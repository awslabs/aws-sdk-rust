// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains the response information for the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTrafficPoliciesOutput {
    /// <p>A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current Amazon Web Services account.</p>
    #[doc(hidden)]
    pub traffic_policy_summaries:
        std::option::Option<std::vec::Vec<crate::types::TrafficPolicySummary>>,
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code> in the <code>TrafficPolicyIdMarker</code> request parameter.</p>
    #[doc(hidden)]
    pub is_truncated: bool,
    /// <p>If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy in the next group of <code>MaxItems</code> traffic policies.</p>
    #[doc(hidden)]
    pub traffic_policy_id_marker: std::option::Option<std::string::String>,
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced the current response.</p>
    #[doc(hidden)]
    pub max_items: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListTrafficPoliciesOutput {
    /// <p>A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current Amazon Web Services account.</p>
    pub fn traffic_policy_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::TrafficPolicySummary]> {
        self.traffic_policy_summaries.as_deref()
    }
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code> in the <code>TrafficPolicyIdMarker</code> request parameter.</p>
    pub fn is_truncated(&self) -> bool {
        self.is_truncated
    }
    /// <p>If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy in the next group of <code>MaxItems</code> traffic policies.</p>
    pub fn traffic_policy_id_marker(&self) -> std::option::Option<&str> {
        self.traffic_policy_id_marker.as_deref()
    }
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced the current response.</p>
    pub fn max_items(&self) -> std::option::Option<i32> {
        self.max_items
    }
}
impl aws_http::request_id::RequestId for ListTrafficPoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTrafficPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListTrafficPoliciesOutput`](crate::operation::list_traffic_policies::ListTrafficPoliciesOutput).
    pub fn builder(
    ) -> crate::operation::list_traffic_policies::builders::ListTrafficPoliciesOutputBuilder {
        crate::operation::list_traffic_policies::builders::ListTrafficPoliciesOutputBuilder::default(
        )
    }
}

/// A builder for [`ListTrafficPoliciesOutput`](crate::operation::list_traffic_policies::ListTrafficPoliciesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTrafficPoliciesOutputBuilder {
    pub(crate) traffic_policy_summaries:
        std::option::Option<std::vec::Vec<crate::types::TrafficPolicySummary>>,
    pub(crate) is_truncated: std::option::Option<bool>,
    pub(crate) traffic_policy_id_marker: std::option::Option<std::string::String>,
    pub(crate) max_items: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl ListTrafficPoliciesOutputBuilder {
    /// Appends an item to `traffic_policy_summaries`.
    ///
    /// To override the contents of this collection use [`set_traffic_policy_summaries`](Self::set_traffic_policy_summaries).
    ///
    /// <p>A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current Amazon Web Services account.</p>
    pub fn traffic_policy_summaries(mut self, input: crate::types::TrafficPolicySummary) -> Self {
        let mut v = self.traffic_policy_summaries.unwrap_or_default();
        v.push(input);
        self.traffic_policy_summaries = Some(v);
        self
    }
    /// <p>A list that contains one <code>TrafficPolicySummary</code> element for each traffic policy that was created by the current Amazon Web Services account.</p>
    pub fn set_traffic_policy_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TrafficPolicySummary>>,
    ) -> Self {
        self.traffic_policy_summaries = input;
        self
    }
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code> in the <code>TrafficPolicyIdMarker</code> request parameter.</p>
    pub fn is_truncated(mut self, input: bool) -> Self {
        self.is_truncated = Some(input);
        self
    }
    /// <p>A flag that indicates whether there are more traffic policies to be listed. If the response was truncated, you can get the next group of traffic policies by submitting another <code>ListTrafficPolicies</code> request and specifying the value of <code>TrafficPolicyIdMarker</code> in the <code>TrafficPolicyIdMarker</code> request parameter.</p>
    pub fn set_is_truncated(mut self, input: std::option::Option<bool>) -> Self {
        self.is_truncated = input;
        self
    }
    /// <p>If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy in the next group of <code>MaxItems</code> traffic policies.</p>
    pub fn traffic_policy_id_marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.traffic_policy_id_marker = Some(input.into());
        self
    }
    /// <p>If the value of <code>IsTruncated</code> is <code>true</code>, <code>TrafficPolicyIdMarker</code> is the ID of the first traffic policy in the next group of <code>MaxItems</code> traffic policies.</p>
    pub fn set_traffic_policy_id_marker(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.traffic_policy_id_marker = input;
        self
    }
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced the current response.</p>
    pub fn max_items(mut self, input: i32) -> Self {
        self.max_items = Some(input);
        self
    }
    /// <p>The value that you specified for the <code>MaxItems</code> parameter in the <code>ListTrafficPolicies</code> request that produced the current response.</p>
    pub fn set_max_items(mut self, input: std::option::Option<i32>) -> Self {
        self.max_items = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTrafficPoliciesOutput`](crate::operation::list_traffic_policies::ListTrafficPoliciesOutput).
    pub fn build(self) -> crate::operation::list_traffic_policies::ListTrafficPoliciesOutput {
        crate::operation::list_traffic_policies::ListTrafficPoliciesOutput {
            traffic_policy_summaries: self.traffic_policy_summaries,
            is_truncated: self.is_truncated.unwrap_or_default(),
            traffic_policy_id_marker: self.traffic_policy_id_marker,
            max_items: self.max_items,
            _request_id: self._request_id,
        }
    }
}
