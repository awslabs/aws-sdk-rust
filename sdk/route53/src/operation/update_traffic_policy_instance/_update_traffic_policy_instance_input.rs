// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that contains information about the resource record sets that you want to update based on a specified traffic policy instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTrafficPolicyInstanceInput {
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    pub ttl: ::std::option::Option<i64>,
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub traffic_policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub traffic_policy_version: ::std::option::Option<i32>,
}
impl UpdateTrafficPolicyInstanceInput {
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    pub fn ttl(&self) -> ::std::option::Option<i64> {
        self.ttl
    }
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn traffic_policy_id(&self) -> ::std::option::Option<&str> {
        self.traffic_policy_id.as_deref()
    }
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn traffic_policy_version(&self) -> ::std::option::Option<i32> {
        self.traffic_policy_version
    }
}
impl UpdateTrafficPolicyInstanceInput {
    /// Creates a new builder-style object to manufacture [`UpdateTrafficPolicyInstanceInput`](crate::operation::update_traffic_policy_instance::UpdateTrafficPolicyInstanceInput).
    pub fn builder() -> crate::operation::update_traffic_policy_instance::builders::UpdateTrafficPolicyInstanceInputBuilder {
        crate::operation::update_traffic_policy_instance::builders::UpdateTrafficPolicyInstanceInputBuilder::default()
    }
}

/// A builder for [`UpdateTrafficPolicyInstanceInput`](crate::operation::update_traffic_policy_instance::UpdateTrafficPolicyInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTrafficPolicyInstanceInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) ttl: ::std::option::Option<i64>,
    pub(crate) traffic_policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_policy_version: ::std::option::Option<i32>,
}
impl UpdateTrafficPolicyInstanceInputBuilder {
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the traffic policy instance that you want to update.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    /// This field is required.
    pub fn ttl(mut self, input: i64) -> Self {
        self.ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    pub fn set_ttl(mut self, input: ::std::option::Option<i64>) -> Self {
        self.ttl = input;
        self
    }
    /// <p>The TTL that you want Amazon Route 53 to assign to all of the updated resource record sets.</p>
    pub fn get_ttl(&self) -> &::std::option::Option<i64> {
        &self.ttl
    }
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    /// This field is required.
    pub fn traffic_policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn set_traffic_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_policy_id = input;
        self
    }
    /// <p>The ID of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn get_traffic_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_policy_id
    }
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    /// This field is required.
    pub fn traffic_policy_version(mut self, input: i32) -> Self {
        self.traffic_policy_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn set_traffic_policy_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.traffic_policy_version = input;
        self
    }
    /// <p>The version of the traffic policy that you want Amazon Route 53 to use to update resource record sets for the specified traffic policy instance.</p>
    pub fn get_traffic_policy_version(&self) -> &::std::option::Option<i32> {
        &self.traffic_policy_version
    }
    /// Consumes the builder and constructs a [`UpdateTrafficPolicyInstanceInput`](crate::operation::update_traffic_policy_instance::UpdateTrafficPolicyInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_traffic_policy_instance::UpdateTrafficPolicyInstanceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_traffic_policy_instance::UpdateTrafficPolicyInstanceInput {
            id: self.id,
            ttl: self.ttl,
            traffic_policy_id: self.traffic_policy_id,
            traffic_policy_version: self.traffic_policy_version,
        })
    }
}
