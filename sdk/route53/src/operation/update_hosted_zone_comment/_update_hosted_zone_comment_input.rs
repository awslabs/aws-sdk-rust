// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to update the comment for a hosted zone.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateHostedZoneCommentInput {
    /// <p>The ID for the hosted zone that you want to update the comment for.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the <code>Comment</code> element, if any.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<std::string::String>,
}
impl UpdateHostedZoneCommentInput {
    /// <p>The ID for the hosted zone that you want to update the comment for.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the <code>Comment</code> element, if any.</p>
    pub fn comment(&self) -> std::option::Option<&str> {
        self.comment.as_deref()
    }
}
impl UpdateHostedZoneCommentInput {
    /// Creates a new builder-style object to manufacture [`UpdateHostedZoneCommentInput`](crate::operation::update_hosted_zone_comment::UpdateHostedZoneCommentInput).
    pub fn builder(
    ) -> crate::operation::update_hosted_zone_comment::builders::UpdateHostedZoneCommentInputBuilder
    {
        crate::operation::update_hosted_zone_comment::builders::UpdateHostedZoneCommentInputBuilder::default()
    }
}

/// A builder for [`UpdateHostedZoneCommentInput`](crate::operation::update_hosted_zone_comment::UpdateHostedZoneCommentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateHostedZoneCommentInputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) comment: std::option::Option<std::string::String>,
}
impl UpdateHostedZoneCommentInputBuilder {
    /// <p>The ID for the hosted zone that you want to update the comment for.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID for the hosted zone that you want to update the comment for.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the <code>Comment</code> element, if any.</p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.comment = Some(input.into());
        self
    }
    /// <p>The new comment for the hosted zone. If you don't specify a value for <code>Comment</code>, Amazon Route 53 deletes the existing value of the <code>Comment</code> element, if any.</p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comment = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateHostedZoneCommentInput`](crate::operation::update_hosted_zone_comment::UpdateHostedZoneCommentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_hosted_zone_comment::UpdateHostedZoneCommentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_hosted_zone_comment::UpdateHostedZoneCommentInput {
                id: self.id,
                comment: self.comment,
            },
        )
    }
}
