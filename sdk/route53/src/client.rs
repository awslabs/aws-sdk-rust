// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) conf: crate::Config,
    #[allow(dead_code)] // unused when a service does not provide any operations
    pub(crate) runtime_plugins: ::aws_smithy_runtime_api::client::runtime_plugin::RuntimePlugins,
}

/// Client for Amazon Route 53
///
/// Client for invoking operations on Amazon Route 53. Each operation on Amazon Route 53 is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
/// ## Constructing a `Client`
///
/// A [`Config`] is required to construct a client. For most use cases, the [`aws-config`]
/// crate should be used to automatically resolve this config using
/// [`aws_config::load_from_env()`], since this will resolve an [`SdkConfig`] which can be shared
/// across multiple different AWS SDK clients. This config resolution process can be customized
/// by calling [`aws_config::from_env()`] instead, which returns a [`ConfigLoader`] that uses
/// the [builder pattern] to customize the default config.
///
/// In the simplest case, creating a client looks as follows:
/// ```rust,no_run
/// # async fn wrapper() {
/// let config = aws_config::load_from_env().await;
/// let client = aws_sdk_route53::Client::new(&config);
/// # }
/// ```
///
/// Occasionally, SDKs may have additional service-specific that can be set on the [`Config`] that
/// is absent from [`SdkConfig`], or slightly different settings for a specific client may be desired.
/// The [`Config`] struct implements `From<&SdkConfig>`, so setting these specific settings can be
/// done as follows:
///
/// ```rust,no_run
/// # async fn wrapper() {
/// let sdk_config = ::aws_config::load_from_env().await;
/// let config = aws_sdk_route53::config::Builder::from(&sdk_config)
/// # /*
///     .some_service_specific_setting("value")
/// # */
///     .build();
/// # }
/// ```
///
/// See the [`aws-config` docs] and [`Config`] for more information on customizing configuration.
///
/// _Note:_ Client construction is expensive due to connection thread pool initialization, and should
/// be done once at application start-up.
///
/// [`Config`]: crate::Config
/// [`ConfigLoader`]: https://docs.rs/aws-config/*/aws_config/struct.ConfigLoader.html
/// [`SdkConfig`]: https://docs.rs/aws-config/*/aws_config/struct.SdkConfig.html
/// [`aws-config` docs]: https://docs.rs/aws-config/*
/// [`aws-config`]: https://crates.io/crates/aws-config
/// [`aws_config::from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.from_env.html
/// [`aws_config::load_from_env()`]: https://docs.rs/aws-config/*/aws_config/fn.load_from_env.html
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#builders-enable-construction-of-complex-values-c-builder
/// # Using the `Client`
///
/// A client has a function for every operation that can be performed by the service.
/// For example, the [`ActivateKeySigningKey`](crate::operation::activate_key_signing_key) operation has
/// a [`Client::activate_key_signing_key`], function which returns a builder for that operation.
/// The fluent builder ultimately has a `send()` function that returns an async future that
/// returns a result, as illustrated below:
///
/// ```rust,ignore
/// let result = client.activate_key_signing_key()
///     .hosted_zone_id("example")
///     .send()
///     .await;
/// ```
///
/// The underlying HTTP requests that get made by this can be modified with the `customize_operation`
/// function on the fluent builder. See the [`customize`](crate::client::customize) module for more
/// information.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct Client {
    handle: ::std::sync::Arc<Handle>,
}

impl Client {
    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// This method will panic in the following cases:
    ///
    /// - Retries or timeouts are enabled without a `sleep_impl` configured.
    /// - Identity caching is enabled without a `sleep_impl` and `time_source` configured.
    ///
    /// The panic message for each of these will have instructions on how to resolve them.
    pub fn from_conf(conf: crate::Config) -> Self {
        let handle = Handle {
            conf: conf.clone(),
            runtime_plugins: crate::config::base_client_runtime_plugins(conf),
        };
        if let Err(err) = Self::validate_config(&handle) {
            panic!("Invalid client configuration: {err}");
        }
        Self {
            handle: ::std::sync::Arc::new(handle),
        }
    }

    /// Returns the client's configuration.
    pub fn config(&self) -> &crate::Config {
        &self.handle.conf
    }

    fn validate_config(handle: &Handle) -> Result<(), ::aws_smithy_runtime_api::box_error::BoxError> {
        let mut cfg = ::aws_smithy_types::config_bag::ConfigBag::base();
        handle
            .runtime_plugins
            .apply_client_configuration(&mut cfg)?
            .validate_base_client_config(&cfg)?;
        Ok(())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](::aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &::aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }
}

mod activate_key_signing_key;

mod associate_vpc_with_hosted_zone;

mod change_cidr_collection;

mod change_resource_record_sets;

mod change_tags_for_resource;

mod create_cidr_collection;

mod create_health_check;

mod create_hosted_zone;

mod create_key_signing_key;

mod create_query_logging_config;

mod create_reusable_delegation_set;

mod create_traffic_policy;

mod create_traffic_policy_instance;

mod create_traffic_policy_version;

mod create_vpc_association_authorization;

/// Operation customization and supporting types.
///
/// The underlying HTTP requests made during an operation can be customized
/// by calling the `customize()` method on the builder returned from a client
/// operation call. For example, this can be used to add an additional HTTP header:
///
/// ```ignore
/// # async fn wrapper() -> ::std::result::Result<(), aws_sdk_route53::Error> {
/// # let client: aws_sdk_route53::Client = unimplemented!();
/// use ::http::header::{HeaderName, HeaderValue};
///
/// let result = client.activate_key_signing_key()
///     .customize()
///     .mutate_request(|req| {
///         // Add `x-example-header` with value
///         req.headers_mut()
///             .insert(
///                 HeaderName::from_static("x-example-header"),
///                 HeaderValue::from_static("1"),
///             );
///     })
///     .send()
///     .await;
/// # }
/// ```
pub mod customize;

mod deactivate_key_signing_key;

mod delete_cidr_collection;

mod delete_health_check;

mod delete_hosted_zone;

mod delete_key_signing_key;

mod delete_query_logging_config;

mod delete_reusable_delegation_set;

mod delete_traffic_policy;

mod delete_traffic_policy_instance;

mod delete_vpc_association_authorization;

mod disable_hosted_zone_dnssec;

mod disassociate_vpc_from_hosted_zone;

mod enable_hosted_zone_dnssec;

mod get_account_limit;

mod get_change;

mod get_checker_ip_ranges;

mod get_dnssec;

mod get_geo_location;

mod get_health_check;

mod get_health_check_count;

mod get_health_check_last_failure_reason;

mod get_health_check_status;

mod get_hosted_zone;

mod get_hosted_zone_count;

mod get_hosted_zone_limit;

mod get_query_logging_config;

mod get_reusable_delegation_set;

mod get_reusable_delegation_set_limit;

mod get_traffic_policy;

mod get_traffic_policy_instance;

mod get_traffic_policy_instance_count;

mod list_cidr_blocks;

mod list_cidr_collections;

mod list_cidr_locations;

mod list_geo_locations;

mod list_health_checks;

mod list_hosted_zones;

mod list_hosted_zones_by_name;

mod list_hosted_zones_by_vpc;

mod list_query_logging_configs;

mod list_resource_record_sets;

mod list_reusable_delegation_sets;

mod list_tags_for_resource;

mod list_tags_for_resources;

mod list_traffic_policies;

mod list_traffic_policy_instances;

mod list_traffic_policy_instances_by_hosted_zone;

mod list_traffic_policy_instances_by_policy;

mod list_traffic_policy_versions;

mod list_vpc_association_authorizations;

mod test_dns_answer;

mod update_health_check;

mod update_hosted_zone_comment;

mod update_traffic_policy_comment;

mod update_traffic_policy_instance;
