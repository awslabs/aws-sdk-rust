// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_cidr_blocks_output_next_token(
    input: &crate::operation::list_cidr_blocks::ListCidrBlocksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_cidr_collections_output_next_token(
    input: &crate::operation::list_cidr_collections::ListCidrCollectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_cidr_locations_output_next_token(
    input: &crate::operation::list_cidr_locations::ListCidrLocationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_health_checks_output_next_marker(
    input: &crate::operation::list_health_checks::ListHealthChecksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_hosted_zones_output_next_marker(
    input: &crate::operation::list_hosted_zones::ListHostedZonesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_query_logging_configs_output_next_token(
    input: &crate::operation::list_query_logging_configs::ListQueryLoggingConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cidr_blocks_output_cidr_blocks(
    input: crate::operation::list_cidr_blocks::ListCidrBlocksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CidrBlockSummary>> {
    let input = match input.cidr_blocks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cidr_collections_output_cidr_collections(
    input: crate::operation::list_cidr_collections::ListCidrCollectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CollectionSummary>> {
    let input = match input.cidr_collections {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cidr_locations_output_cidr_locations(
    input: crate::operation::list_cidr_locations::ListCidrLocationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LocationSummary>> {
    let input = match input.cidr_locations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_health_checks_output_health_checks(
    input: crate::operation::list_health_checks::ListHealthChecksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HealthCheck>> {
    let input = match input.health_checks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_hosted_zones_output_hosted_zones(
    input: crate::operation::list_hosted_zones::ListHostedZonesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::HostedZone>> {
    let input = match input.hosted_zones {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_query_logging_configs_output_query_logging_configs(
    input: crate::operation::list_query_logging_configs::ListQueryLoggingConfigsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::QueryLoggingConfig>> {
    let input = match input.query_logging_configs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
