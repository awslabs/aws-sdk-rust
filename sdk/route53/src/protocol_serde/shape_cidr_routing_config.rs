// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_cidr_routing_config(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CidrRoutingConfig, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CidrRoutingConfig::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CollectionId") /* CollectionId com.amazonaws.route53#CidrRoutingConfig$CollectionId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_collection_id(var_1);
            }
            ,
            s if s.matches("LocationName") /* LocationName com.amazonaws.route53#CidrRoutingConfig$LocationName */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_location_name(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::cidr_routing_config_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}

pub fn ser_cidr_routing_config(
    input: &crate::types::CidrRoutingConfig,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("CollectionId").finish();
        inner_writer.data(input.collection_id.as_str());
    }
    {
        let mut inner_writer = scope.start_el("LocationName").finish();
        inner_writer.data(input.location_name.as_str());
    }
    scope.finish();
    Ok(())
}
