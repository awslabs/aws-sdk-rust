// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_hosted_zone_op_input(
    input: &crate::input::CreateHostedZoneInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateHostedZoneRequest")
            .write_ns("https://route53.amazonaws.com/doc/2013-04-01/", None);
        crate::protocol_serde::shape_create_hosted_zone_input::ser_create_hosted_zone_input_input(
            input, root,
        )?
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_hosted_zone_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHostedZoneOutput, crate::error::CreateHostedZoneError>
{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::error::CreateHostedZoneError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHostedZoneError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConflictingDomainExists" => {
            crate::error::CreateHostedZoneError::ConflictingDomainExists({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::conflicting_domain_exists::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_conflicting_domain_exists::de_conflicting_domain_exists_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DelegationSetNotAvailable" => {
            crate::error::CreateHostedZoneError::DelegationSetNotAvailable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::delegation_set_not_available::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_not_available::de_delegation_set_not_available_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DelegationSetNotReusable" => {
            crate::error::CreateHostedZoneError::DelegationSetNotReusable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::delegation_set_not_reusable::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_not_reusable::de_delegation_set_not_reusable_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "HostedZoneAlreadyExists" => {
            crate::error::CreateHostedZoneError::HostedZoneAlreadyExists({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::hosted_zone_already_exists::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_hosted_zone_already_exists::de_hosted_zone_already_exists_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidDomainName" => crate::error::CreateHostedZoneError::InvalidDomainName({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_domain_name::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_domain_name::de_invalid_domain_name_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::CreateHostedZoneError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_input::de_invalid_input_xml_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHostedZoneError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidVPCId" => crate::error::CreateHostedZoneError::InvalidVpcId({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_vpc_id::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_vpc_id::de_invalid_vpc_id_xml_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateHostedZoneError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "NoSuchDelegationSet" => crate::error::CreateHostedZoneError::NoSuchDelegationSet({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::no_such_delegation_set::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_no_such_delegation_set::de_no_such_delegation_set_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TooManyHostedZones" => crate::error::CreateHostedZoneError::TooManyHostedZones({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::too_many_hosted_zones::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_too_many_hosted_zones::de_too_many_hosted_zones_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateHostedZoneError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateHostedZoneError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_hosted_zone_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHostedZoneOutput, crate::error::CreateHostedZoneError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hosted_zone_output::Builder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_hosted_zone::de_create_hosted_zone(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CreateHostedZoneError::unhandled)?;
        output = output.set_location(
            crate::protocol_serde::shape_create_hosted_zone_output::de_location_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::CreateHostedZoneError::unhandled(
                    "Failed to parse Location from header `Location",
                )
            })?,
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_create_hosted_zone(
    inp: &[u8],
    mut builder: crate::output::create_hosted_zone_output::Builder,
) -> Result<crate::output::create_hosted_zone_output::Builder, aws_smithy_xml::decode::XmlDecodeError>
{
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("CreateHostedZoneResponse") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected CreateHostedZoneResponse but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZone") /* HostedZone com.amazonaws.route53.synthetic#CreateHostedZoneOutput$HostedZone */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_hosted_zone::de_hosted_zone(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zone(var_1);
            }
            ,
            s if s.matches("ChangeInfo") /* ChangeInfo com.amazonaws.route53.synthetic#CreateHostedZoneOutput$ChangeInfo */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_change_info::de_change_info(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_change_info(var_2);
            }
            ,
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53.synthetic#CreateHostedZoneOutput$DelegationSet */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_delegation_set::de_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_3);
            }
            ,
            s if s.matches("VPC") /* VPC com.amazonaws.route53.synthetic#CreateHostedZoneOutput$VPC */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_vpc::de_vpc(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_vpc(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
