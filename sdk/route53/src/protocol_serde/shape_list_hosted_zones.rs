// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_hosted_zones_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_hosted_zones::ListHostedZonesOutput,
    crate::operation::list_hosted_zones::ListHostedZonesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::list_hosted_zones::ListHostedZonesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::list_hosted_zones::ListHostedZonesError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DelegationSetNotReusable" => {
            crate::operation::list_hosted_zones::ListHostedZonesError::DelegationSetNotReusable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::DelegationSetNotReusableBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_not_reusable::de_delegation_set_not_reusable_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_hosted_zones::ListHostedZonesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInput" => {
            crate::operation::list_hosted_zones::ListHostedZonesError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidInputBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_input::de_invalid_input_xml_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::operation::list_hosted_zones::ListHostedZonesError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "NoSuchDelegationSet" => {
            crate::operation::list_hosted_zones::ListHostedZonesError::NoSuchDelegationSet({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::NoSuchDelegationSetBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_such_delegation_set::de_no_such_delegation_set_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_hosted_zones::ListHostedZonesError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::list_hosted_zones::ListHostedZonesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_hosted_zones_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_hosted_zones::ListHostedZonesOutput,
    crate::operation::list_hosted_zones::ListHostedZonesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::list_hosted_zones::builders::ListHostedZonesOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_list_hosted_zones::de_list_hosted_zones(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::list_hosted_zones::ListHostedZonesError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_list_hosted_zones(
    inp: &[u8],
    mut builder: crate::operation::list_hosted_zones::builders::ListHostedZonesOutputBuilder,
) -> Result<
    crate::operation::list_hosted_zones::builders::ListHostedZonesOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("ListHostedZonesResponse") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected ListHostedZonesResponse but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HostedZones") /* HostedZones com.amazonaws.route53.synthetic#ListHostedZonesOutput$HostedZones */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_hosted_zones::de_hosted_zones(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_hosted_zones(var_1);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53.synthetic#ListHostedZonesOutput$IsTruncated */ =>  {
                let var_2 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_2);
            }
            ,
            s if s.matches("Marker") /* Marker com.amazonaws.route53.synthetic#ListHostedZonesOutput$Marker */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_marker(var_3);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53.synthetic#ListHostedZonesOutput$MaxItems */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_4);
            }
            ,
            s if s.matches("NextMarker") /* NextMarker com.amazonaws.route53.synthetic#ListHostedZonesOutput$NextMarker */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_marker(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
