// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_key_signing_key(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::KeySigningKey, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::KeySigningKey::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.route53#KeySigningKey$Name */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_1);
            }
            ,
            s if s.matches("KmsArn") /* KmsArn com.amazonaws.route53#KeySigningKey$KmsArn */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_kms_arn(var_2);
            }
            ,
            s if s.matches("Flag") /* Flag com.amazonaws.route53#KeySigningKey$Flag */ =>  {
                let var_3 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_flag(var_3);
            }
            ,
            s if s.matches("SigningAlgorithmMnemonic") /* SigningAlgorithmMnemonic com.amazonaws.route53#KeySigningKey$SigningAlgorithmMnemonic */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_signing_algorithm_mnemonic(var_4);
            }
            ,
            s if s.matches("SigningAlgorithmType") /* SigningAlgorithmType com.amazonaws.route53#KeySigningKey$SigningAlgorithmType */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_signing_algorithm_type(var_5);
            }
            ,
            s if s.matches("DigestAlgorithmMnemonic") /* DigestAlgorithmMnemonic com.amazonaws.route53#KeySigningKey$DigestAlgorithmMnemonic */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_digest_algorithm_mnemonic(var_6);
            }
            ,
            s if s.matches("DigestAlgorithmType") /* DigestAlgorithmType com.amazonaws.route53#KeySigningKey$DigestAlgorithmType */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#SigningKeyInteger`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_digest_algorithm_type(var_7);
            }
            ,
            s if s.matches("KeyTag") /* KeyTag com.amazonaws.route53#KeySigningKey$KeyTag */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#SigningKeyTag`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_key_tag(var_8);
            }
            ,
            s if s.matches("DigestValue") /* DigestValue com.amazonaws.route53#KeySigningKey$DigestValue */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_digest_value(var_9);
            }
            ,
            s if s.matches("PublicKey") /* PublicKey com.amazonaws.route53#KeySigningKey$PublicKey */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_public_key(var_10);
            }
            ,
            s if s.matches("DSRecord") /* DSRecord com.amazonaws.route53#KeySigningKey$DSRecord */ =>  {
                let var_11 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_ds_record(var_11);
            }
            ,
            s if s.matches("DNSKEYRecord") /* DNSKEYRecord com.amazonaws.route53#KeySigningKey$DNSKEYRecord */ =>  {
                let var_12 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_dnskey_record(var_12);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.route53#KeySigningKey$Status */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_13);
            }
            ,
            s if s.matches("StatusMessage") /* StatusMessage com.amazonaws.route53#KeySigningKey$StatusMessage */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_message(var_14);
            }
            ,
            s if s.matches("CreatedDate") /* CreatedDate com.amazonaws.route53#KeySigningKey$CreatedDate */ =>  {
                let var_15 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_created_date(var_15);
            }
            ,
            s if s.matches("LastModifiedDate") /* LastModifiedDate com.amazonaws.route53#KeySigningKey$LastModifiedDate */ =>  {
                let var_16 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.route53#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_last_modified_date(var_16);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
