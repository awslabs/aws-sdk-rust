// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_list_resource_record_sets_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_resource_record_sets::ListResourceRecordSetsOutput,
    crate::operation::list_resource_record_sets::ListResourceRecordSetsError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(
        crate::operation::list_resource_record_sets::ListResourceRecordSetsError::unhandled,
    )?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code =
        match generic.code() {
            Some(code) => code,
            None => return Err(
                crate::operation::list_resource_record_sets::ListResourceRecordSetsError::unhandled(
                    generic,
                ),
            ),
        };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidInput" => crate::operation::list_resource_record_sets::ListResourceRecordSetsError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidInputBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_input::de_invalid_input_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_resource_record_sets::ListResourceRecordSetsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NoSuchHostedZone" => crate::operation::list_resource_record_sets::ListResourceRecordSetsError::NoSuchHostedZone({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoSuchHostedZoneBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_such_hosted_zone::de_no_such_hosted_zone_xml_err(response.body().as_ref(), output).map_err(crate::operation::list_resource_record_sets::ListResourceRecordSetsError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::list_resource_record_sets::ListResourceRecordSetsError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_list_resource_record_sets_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::list_resource_record_sets::ListResourceRecordSetsOutput,
    crate::operation::list_resource_record_sets::ListResourceRecordSetsError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::list_resource_record_sets::builders::ListResourceRecordSetsOutputBuilder::default();
        let _ = response;
        output =
            crate::protocol_serde::shape_list_resource_record_sets::de_list_resource_record_sets(
                response.body().as_ref(),
                output,
            )
            .map_err(
                crate::operation::list_resource_record_sets::ListResourceRecordSetsError::unhandled,
            )?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_list_resource_record_sets(
    inp: &[u8],
    mut builder: crate::operation::list_resource_record_sets::builders::ListResourceRecordSetsOutputBuilder,
) -> Result<
    crate::operation::list_resource_record_sets::builders::ListResourceRecordSetsOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("ListResourceRecordSetsResponse") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected ListResourceRecordSetsResponse but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("NextRecordIdentifier") /* NextRecordIdentifier com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$NextRecordIdentifier */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_identifier(var_1);
            }
            ,
            s if s.matches("NextRecordType") /* NextRecordType com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$NextRecordType */ =>  {
                let var_2 =
                    Some(
                        Result::<crate::types::RrType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::RrType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_type(var_2);
            }
            ,
            s if s.matches("NextRecordName") /* NextRecordName com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$NextRecordName */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_next_record_name(var_3);
            }
            ,
            s if s.matches("IsTruncated") /* IsTruncated com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$IsTruncated */ =>  {
                let var_4 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.route53#PageTruncated`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_is_truncated(var_4);
            }
            ,
            s if s.matches("ResourceRecordSets") /* ResourceRecordSets com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$ResourceRecordSets */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_resource_record_sets::de_resource_record_sets(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_resource_record_sets(var_5);
            }
            ,
            s if s.matches("MaxItems") /* MaxItems com.amazonaws.route53.synthetic#ListResourceRecordSetsOutput$MaxItems */ =>  {
                let var_6 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `smithy.api#Integer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_items(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
