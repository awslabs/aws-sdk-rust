// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_hosted_zone(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::HostedZone, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::HostedZone::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#HostedZone$Id */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_1);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#HostedZone$Name */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2);
            }
            ,
            s if s.matches("CallerReference") /* CallerReference com.amazonaws.route53#HostedZone$CallerReference */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_caller_reference(var_3);
            }
            ,
            s if s.matches("Config") /* Config com.amazonaws.route53#HostedZone$Config */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_hosted_zone_config::de_hosted_zone_config(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_config(var_4);
            }
            ,
            s if s.matches("ResourceRecordSetCount") /* ResourceRecordSetCount com.amazonaws.route53#HostedZone$ResourceRecordSetCount */ =>  {
                let var_5 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.route53#HostedZoneRRSetCount`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_resource_record_set_count(var_5);
            }
            ,
            s if s.matches("LinkedService") /* LinkedService com.amazonaws.route53#HostedZone$LinkedService */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_linked_service::de_linked_service(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_linked_service(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
