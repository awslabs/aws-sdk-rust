// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_reusable_delegation_set_op_input(
    input: &crate::input::CreateReusableDelegationSetInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateReusableDelegationSetRequest")
            .write_ns("https://route53.amazonaws.com/doc/2013-04-01/", None);
        crate::protocol_serde::shape_create_reusable_delegation_set_input::ser_create_reusable_delegation_set_input_input(input, root)?
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_reusable_delegation_set_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateReusableDelegationSetOutput,
    crate::error::CreateReusableDelegationSetError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CreateReusableDelegationSetError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "DelegationSetAlreadyCreated" => {
            crate::error::CreateReusableDelegationSetError::DelegationSetAlreadyCreated({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::delegation_set_already_created::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_already_created::de_delegation_set_already_created_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DelegationSetAlreadyReusable" => {
            crate::error::CreateReusableDelegationSetError::DelegationSetAlreadyReusable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::delegation_set_already_reusable::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_already_reusable::de_delegation_set_already_reusable_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DelegationSetNotAvailable" => {
            crate::error::CreateReusableDelegationSetError::DelegationSetNotAvailable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::delegation_set_not_available::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_delegation_set_not_available::de_delegation_set_not_available_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "HostedZoneNotFound" => {
            crate::error::CreateReusableDelegationSetError::HostedZoneNotFound({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::hosted_zone_not_found::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_hosted_zone_not_found::de_hosted_zone_not_found_xml_err(response.body().as_ref(), output).map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidArgument" => crate::error::CreateReusableDelegationSetError::InvalidArgument({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_argument::Builder::default();
                let _ = response;
                output =
                    crate::protocol_serde::shape_invalid_argument::de_invalid_argument_xml_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidInput" => crate::error::CreateReusableDelegationSetError::InvalidInput({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_input::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_input::de_invalid_input_xml_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "LimitsExceeded" => crate::error::CreateReusableDelegationSetError::LimitsExceeded({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::limits_exceeded::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_limits_exceeded::de_limits_exceeded_xml_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::CreateReusableDelegationSetError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_reusable_delegation_set_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::CreateReusableDelegationSetOutput,
    crate::error::CreateReusableDelegationSetError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_reusable_delegation_set_output::Builder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_reusable_delegation_set::de_create_reusable_delegation_set(response.body().as_ref(), output).map_err(crate::error::CreateReusableDelegationSetError::unhandled)?;
        output = output.set_location(
            crate::protocol_serde::shape_create_reusable_delegation_set_output::de_location_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::error::CreateReusableDelegationSetError::unhandled(
                    "Failed to parse Location from header `Location",
                )
            })?,
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_create_reusable_delegation_set(
    inp: &[u8],
    mut builder: crate::output::create_reusable_delegation_set_output::Builder,
) -> Result<
    crate::output::create_reusable_delegation_set_output::Builder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("CreateReusableDelegationSetResponse") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected CreateReusableDelegationSetResponse but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DelegationSet") /* DelegationSet com.amazonaws.route53.synthetic#CreateReusableDelegationSetOutput$DelegationSet */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_delegation_set::de_delegation_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delegation_set(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
