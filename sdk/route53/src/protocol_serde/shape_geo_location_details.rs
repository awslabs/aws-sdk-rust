// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_geo_location_details(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::GeoLocationDetails, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::GeoLocationDetails::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ContinentCode") /* ContinentCode com.amazonaws.route53#GeoLocationDetails$ContinentCode */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continent_code(var_1);
            }
            ,
            s if s.matches("ContinentName") /* ContinentName com.amazonaws.route53#GeoLocationDetails$ContinentName */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_continent_name(var_2);
            }
            ,
            s if s.matches("CountryCode") /* CountryCode com.amazonaws.route53#GeoLocationDetails$CountryCode */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_country_code(var_3);
            }
            ,
            s if s.matches("CountryName") /* CountryName com.amazonaws.route53#GeoLocationDetails$CountryName */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_country_name(var_4);
            }
            ,
            s if s.matches("SubdivisionCode") /* SubdivisionCode com.amazonaws.route53#GeoLocationDetails$SubdivisionCode */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subdivision_code(var_5);
            }
            ,
            s if s.matches("SubdivisionName") /* SubdivisionName com.amazonaws.route53#GeoLocationDetails$SubdivisionName */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subdivision_name(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
