// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_health_check_input_input(
    input: &crate::operation::update_health_check::UpdateHealthCheckInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.alarm_identifier {
        let inner_writer = scope.start_el("AlarmIdentifier");
        crate::protocol_serde::shape_alarm_identifier::ser_alarm_identifier(var_1, inner_writer)?
    }
    if let Some(var_2) = &input.child_health_checks {
        let mut inner_writer = scope.start_el("ChildHealthChecks").finish();
        for list_item_3 in var_2 {
            {
                let mut inner_writer = inner_writer.start_el("ChildHealthCheck").finish();
                inner_writer.data(list_item_3.as_str());
            }
        }
    }
    if let Some(var_4) = &input.disabled {
        let mut inner_writer = scope.start_el("Disabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_4).encode());
    }
    if let Some(var_5) = &input.enable_sni {
        let mut inner_writer = scope.start_el("EnableSNI").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_5).encode());
    }
    if let Some(var_6) = &input.failure_threshold {
        let mut inner_writer = scope.start_el("FailureThreshold").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_6).encode());
    }
    if let Some(var_7) = &input.fully_qualified_domain_name {
        let mut inner_writer = scope.start_el("FullyQualifiedDomainName").finish();
        inner_writer.data(var_7.as_str());
    }
    if let Some(var_8) = &input.health_check_version {
        let mut inner_writer = scope.start_el("HealthCheckVersion").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_8).encode());
    }
    if let Some(var_9) = &input.health_threshold {
        let mut inner_writer = scope.start_el("HealthThreshold").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_9).encode());
    }
    if let Some(var_10) = &input.ip_address {
        let mut inner_writer = scope.start_el("IPAddress").finish();
        inner_writer.data(var_10.as_str());
    }
    if let Some(var_11) = &input.insufficient_data_health_status {
        let mut inner_writer = scope.start_el("InsufficientDataHealthStatus").finish();
        inner_writer.data(var_11.as_str());
    }
    if let Some(var_12) = &input.inverted {
        let mut inner_writer = scope.start_el("Inverted").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_12).encode());
    }
    if let Some(var_13) = &input.port {
        let mut inner_writer = scope.start_el("Port").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_13).encode());
    }
    if let Some(var_14) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_15 in var_14 {
            {
                let mut inner_writer = inner_writer.start_el("Region").finish();
                inner_writer.data(list_item_15.as_str());
            }
        }
    }
    if let Some(var_16) = &input.reset_elements {
        let mut inner_writer = scope.start_el("ResetElements").finish();
        for list_item_17 in var_16 {
            {
                let mut inner_writer = inner_writer.start_el("ResettableElementName").finish();
                inner_writer.data(list_item_17.as_str());
            }
        }
    }
    if let Some(var_18) = &input.resource_path {
        let mut inner_writer = scope.start_el("ResourcePath").finish();
        inner_writer.data(var_18.as_str());
    }
    if let Some(var_19) = &input.search_string {
        let mut inner_writer = scope.start_el("SearchString").finish();
        inner_writer.data(var_19.as_str());
    }
    scope.finish();
    Ok(())
}
