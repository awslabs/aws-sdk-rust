// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_health_check_op_input(
    input: &crate::operation::create_health_check::CreateHealthCheckInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateHealthCheckRequest")
            .write_ns("https://route53.amazonaws.com/doc/2013-04-01/", None);
        crate::protocol_serde::shape_create_health_check_input::ser_create_health_check_input_input(
            input, root,
        )?
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_health_check_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_health_check::CreateHealthCheckOutput,
    crate::operation::create_health_check::CreateHealthCheckError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::create_health_check::CreateHealthCheckError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::create_health_check::CreateHealthCheckError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "HealthCheckAlreadyExists" => {
            crate::operation::create_health_check::CreateHealthCheckError::HealthCheckAlreadyExists(
                {
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::types::error::builders::HealthCheckAlreadyExistsBuilder::default(
                            );
                        let _ = response;
                        output = crate::protocol_serde::shape_health_check_already_exists::de_health_check_already_exists_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_health_check::CreateHealthCheckError::unhandled)?;
                        let output = output.meta(generic);
                        output.build()
                    };
                    if tmp.message.is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                },
            )
        }
        "InvalidInput" => {
            crate::operation::create_health_check::CreateHealthCheckError::InvalidInput({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidInputBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_input::de_invalid_input_xml_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(
                        crate::operation::create_health_check::CreateHealthCheckError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyHealthChecks" => {
            crate::operation::create_health_check::CreateHealthCheckError::TooManyHealthChecks({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::TooManyHealthChecksBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_health_checks::de_too_many_health_checks_xml_err(response.body().as_ref(), output).map_err(crate::operation::create_health_check::CreateHealthCheckError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::create_health_check::CreateHealthCheckError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_health_check_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::create_health_check::CreateHealthCheckOutput,
    crate::operation::create_health_check::CreateHealthCheckError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_health_check::builders::CreateHealthCheckOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_create_health_check::de_create_health_check(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::create_health_check::CreateHealthCheckError::unhandled)?;
        output = output.set_location(
            crate::protocol_serde::shape_create_health_check_output::de_location_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::create_health_check::CreateHealthCheckError::unhandled(
                    "Failed to parse Location from header `Location",
                )
            })?,
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_create_health_check(
    inp: &[u8],
    mut builder: crate::operation::create_health_check::builders::CreateHealthCheckOutputBuilder,
) -> Result<
    crate::operation::create_health_check::builders::CreateHealthCheckOutputBuilder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("CreateHealthCheckResponse") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected CreateHealthCheckResponse but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HealthCheck") /* HealthCheck com.amazonaws.route53.synthetic#CreateHealthCheckOutput$HealthCheck */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_health_check::de_health_check(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_health_check(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
