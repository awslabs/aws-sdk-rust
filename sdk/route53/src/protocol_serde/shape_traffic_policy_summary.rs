// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_traffic_policy_summary(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::TrafficPolicySummary, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::TrafficPolicySummary::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Id") /* Id com.amazonaws.route53#TrafficPolicySummary$Id */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_id(var_1);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.route53#TrafficPolicySummary$Name */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_2);
            }
            ,
            s if s.matches("Type") /* Type com.amazonaws.route53#TrafficPolicySummary$Type */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::RrType, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::RrType::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_type(var_3);
            }
            ,
            s if s.matches("LatestVersion") /* LatestVersion com.amazonaws.route53#TrafficPolicySummary$LatestVersion */ =>  {
                let var_4 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_latest_version(var_4);
            }
            ,
            s if s.matches("TrafficPolicyCount") /* TrafficPolicyCount com.amazonaws.route53#TrafficPolicySummary$TrafficPolicyCount */ =>  {
                let var_5 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.route53#TrafficPolicyVersion`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_traffic_policy_count(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
