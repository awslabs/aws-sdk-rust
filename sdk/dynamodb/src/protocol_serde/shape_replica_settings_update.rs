// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_replica_settings_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ReplicaSettingsUpdate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.region_name {
        object.key("RegionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.replica_provisioned_read_capacity_units {
        object.key("ReplicaProvisionedReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.replica_provisioned_read_capacity_auto_scaling_settings_update {
        #[allow(unused_mut)]
        let mut object_4 = object
            .key("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate")
            .start_object();
        crate::protocol_serde::shape_auto_scaling_settings_update::ser_auto_scaling_settings_update(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.replica_global_secondary_index_settings_update {
        let mut array_6 = object
            .key("ReplicaGlobalSecondaryIndexSettingsUpdate")
            .start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_replica_global_secondary_index_settings_update::ser_replica_global_secondary_index_settings_update(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.replica_table_class {
        object.key("ReplicaTableClass").string(var_9.as_str());
    }
    Ok(())
}
