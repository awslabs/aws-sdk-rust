// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_item::UpdateItemInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.table_name {
        object.key("TableName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.key {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Key").start_object();
        for (key_4, value_5) in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_attribute_value::ser_attribute_value(
                    &mut object_6,
                    value_5,
                )?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.attribute_updates {
        #[allow(unused_mut)]
        let mut object_8 = object.key("AttributeUpdates").start_object();
        for (key_9, value_10) in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_11 = object_8.key(key_9.as_str()).start_object();
                crate::protocol_serde::shape_attribute_value_update::ser_attribute_value_update(
                    &mut object_11,
                    value_10,
                )?;
                object_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_12) = &input.expected {
        #[allow(unused_mut)]
        let mut object_13 = object.key("Expected").start_object();
        for (key_14, value_15) in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_16 = object_13.key(key_14.as_str()).start_object();
                crate::protocol_serde::shape_expected_attribute_value::ser_expected_attribute_value(&mut object_16, value_15)?;
                object_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_17) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_17.as_str());
    }
    if let Some(var_18) = &input.return_values {
        object.key("ReturnValues").string(var_18.as_str());
    }
    if let Some(var_19) = &input.return_consumed_capacity {
        object.key("ReturnConsumedCapacity").string(var_19.as_str());
    }
    if let Some(var_20) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_20.as_str());
    }
    if let Some(var_21) = &input.update_expression {
        object.key("UpdateExpression").string(var_21.as_str());
    }
    if let Some(var_22) = &input.condition_expression {
        object.key("ConditionExpression").string(var_22.as_str());
    }
    if let Some(var_23) = &input.expression_attribute_names {
        #[allow(unused_mut)]
        let mut object_24 = object.key("ExpressionAttributeNames").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.expression_attribute_values {
        #[allow(unused_mut)]
        let mut object_28 = object.key("ExpressionAttributeValues").start_object();
        for (key_29, value_30) in var_27 {
            {
                #[allow(unused_mut)]
                let mut object_31 = object_28.key(key_29.as_str()).start_object();
                crate::protocol_serde::shape_attribute_value::ser_attribute_value(
                    &mut object_31,
                    value_30,
                )?;
                object_31.finish();
            }
        }
        object_28.finish();
    }
    Ok(())
}
