// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_item::GetItemInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.table_name {
        object.key("TableName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.key {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Key").start_object();
        for (key_4, value_5) in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_6 = object_3.key(key_4.as_str()).start_object();
                crate::protocol_serde::shape_attribute_value::ser_attribute_value(
                    &mut object_6,
                    value_5,
                )?;
                object_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_7) = &input.attributes_to_get {
        let mut array_8 = object.key("AttributesToGet").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_10);
    }
    if let Some(var_11) = &input.return_consumed_capacity {
        object.key("ReturnConsumedCapacity").string(var_11.as_str());
    }
    if let Some(var_12) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_12.as_str());
    }
    if let Some(var_13) = &input.expression_attribute_names {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ExpressionAttributeNames").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    Ok(())
}
