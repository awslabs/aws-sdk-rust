// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_keys_and_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KeysAndAttributes,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.keys {
        let mut array_2 = object.key("Keys").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                for (key_5, value_6) in item_3 {
                    {
                        #[allow(unused_mut)]
                        let mut object_7 = object_4.key(key_5.as_str()).start_object();
                        crate::protocol_serde::shape_attribute_value::ser_attribute_value(
                            &mut object_7,
                            value_6,
                        )?;
                        object_7.finish();
                    }
                }
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_8) = &input.attributes_to_get {
        let mut array_9 = object.key("AttributesToGet").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_11);
    }
    if let Some(var_12) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_12.as_str());
    }
    if let Some(var_13) = &input.expression_attribute_names {
        #[allow(unused_mut)]
        let mut object_14 = object.key("ExpressionAttributeNames").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_keys_and_attributes<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::KeysAndAttributes>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KeysAndAttributesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Keys" => {
                                builder = builder.set_keys(
                                    crate::protocol_serde::shape_key_list::de_key_list(tokens)?,
                                );
                            }
                            "AttributesToGet" => {
                                builder = builder.set_attributes_to_get(
                                    crate::protocol_serde::shape_attribute_name_list::de_attribute_name_list(tokens)?
                                );
                            }
                            "ConsistentRead" => {
                                builder = builder.set_consistent_read(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ProjectionExpression" => {
                                builder = builder.set_projection_expression(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpressionAttributeNames" => {
                                builder = builder.set_expression_attribute_names(
                                    crate::protocol_serde::shape_expression_attribute_name_map::de_expression_attribute_name_map(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
