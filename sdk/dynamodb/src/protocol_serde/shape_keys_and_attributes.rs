// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_keys_and_attributes(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KeysAndAttributes,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        let mut array_1 = object.key("Keys").start_array();
        for item_2 in &input.keys {
            {
                #[allow(unused_mut)]
                let mut object_3 = array_1.value().start_object();
                for (key_4, value_5) in item_2 {
                    {
                        #[allow(unused_mut)]
                        let mut object_6 = object_3.key(key_4.as_str()).start_object();
                        crate::protocol_serde::shape_attribute_value::ser_attribute_value(&mut object_6, value_5)?;
                        object_6.finish();
                    }
                }
                object_3.finish();
            }
        }
        array_1.finish();
    }
    if let Some(var_7) = &input.attributes_to_get {
        let mut array_8 = object.key("AttributesToGet").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_10);
    }
    if let Some(var_11) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_11.as_str());
    }
    if let Some(var_12) = &input.expression_attribute_names {
        #[allow(unused_mut)]
        let mut object_13 = object.key("ExpressionAttributeNames").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}

pub(crate) fn de_keys_and_attributes<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::KeysAndAttributes>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KeysAndAttributesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Keys" => {
                            builder = builder.set_keys(crate::protocol_serde::shape_key_list::de_key_list(tokens)?);
                        }
                        "AttributesToGet" => {
                            builder =
                                builder.set_attributes_to_get(crate::protocol_serde::shape_attribute_name_list::de_attribute_name_list(tokens)?);
                        }
                        "ConsistentRead" => {
                            builder = builder.set_consistent_read(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ProjectionExpression" => {
                            builder = builder.set_projection_expression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ExpressionAttributeNames" => {
                            builder = builder.set_expression_attribute_names(
                                crate::protocol_serde::shape_expression_attribute_name_map::de_expression_attribute_name_map(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::keys_and_attributes_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
