// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_table::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.attribute_definitions {
        let mut array_2 = object.key("AttributeDefinitions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_attribute_definition::ser_attribute_definition(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.table_name {
        object.key("TableName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.billing_mode {
        object.key("BillingMode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.provisioned_throughput {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ProvisionedThroughput").start_object();
        crate::protocol_serde::shape_provisioned_throughput::ser_provisioned_throughput(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.global_secondary_index_updates {
        let mut array_10 = object.key("GlobalSecondaryIndexUpdates").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_global_secondary_index_update::ser_global_secondary_index_update(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.stream_specification {
        #[allow(unused_mut)]
        let mut object_14 = object.key("StreamSpecification").start_object();
        crate::protocol_serde::shape_stream_specification::ser_stream_specification(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.sse_specification {
        #[allow(unused_mut)]
        let mut object_16 = object.key("SSESpecification").start_object();
        crate::protocol_serde::shape_sse_specification::ser_sse_specification(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.replica_updates {
        let mut array_18 = object.key("ReplicaUpdates").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_replication_group_update::ser_replication_group_update(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.table_class {
        object.key("TableClass").string(var_21.as_str());
    }
    Ok(())
}
