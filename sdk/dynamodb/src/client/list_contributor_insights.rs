// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListContributorInsights`](crate::client::fluent_builders::ListContributorInsights) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListContributorInsights::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::ListContributorInsights::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::ListContributorInsights::set_table_name): <p>The name of the table.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListContributorInsights::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListContributorInsights::set_next_token): <p>A token to for the desired page, if there is one.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListContributorInsights::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListContributorInsights::set_max_results): <p>Maximum number of results to return per page.</p>
    /// - On success, responds with [`ListContributorInsightsOutput`](crate::output::ListContributorInsightsOutput) with field(s):
    ///   - [`contributor_insights_summaries(Option<Vec<ContributorInsightsSummary>>)`](crate::output::ListContributorInsightsOutput::contributor_insights_summaries): <p>A list of ContributorInsightsSummary.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListContributorInsightsOutput::next_token): <p>A token to go to the next page if there is one.</p>
    /// - On failure, responds with [`SdkError<ListContributorInsightsError>`](crate::error::ListContributorInsightsError)
    pub fn list_contributor_insights(
        &self,
    ) -> crate::client::fluent_builders::ListContributorInsights {
        crate::client::fluent_builders::ListContributorInsights::new(self.handle.clone())
    }
}
