// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListGlobalTables`](crate::client::fluent_builders::ListGlobalTables) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`exclusive_start_global_table_name(impl Into<String>)`](crate::client::fluent_builders::ListGlobalTables::exclusive_start_global_table_name) / [`set_exclusive_start_global_table_name(Option<String>)`](crate::client::fluent_builders::ListGlobalTables::set_exclusive_start_global_table_name): <p>The first global table name that this operation will evaluate.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGlobalTables::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListGlobalTables::set_limit): <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>  <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    ///   - [`region_name(impl Into<String>)`](crate::client::fluent_builders::ListGlobalTables::region_name) / [`set_region_name(Option<String>)`](crate::client::fluent_builders::ListGlobalTables::set_region_name): <p>Lists the global tables in a specific Region.</p>
    /// - On success, responds with [`ListGlobalTablesOutput`](crate::output::ListGlobalTablesOutput) with field(s):
    ///   - [`global_tables(Option<Vec<GlobalTable>>)`](crate::output::ListGlobalTablesOutput::global_tables): <p>List of global table names.</p>
    ///   - [`last_evaluated_global_table_name(Option<String>)`](crate::output::ListGlobalTablesOutput::last_evaluated_global_table_name): <p>Last evaluated global table name.</p>
    /// - On failure, responds with [`SdkError<ListGlobalTablesError>`](crate::error::ListGlobalTablesError)
    pub fn list_global_tables(&self) -> crate::client::fluent_builders::ListGlobalTables {
        crate::client::fluent_builders::ListGlobalTables::new(self.handle.clone())
    }
}
