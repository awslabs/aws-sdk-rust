// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchExecuteStatement`](crate::client::fluent_builders::BatchExecuteStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statements(Vec<BatchStatementRequest>)`](crate::client::fluent_builders::BatchExecuteStatement::statements) / [`set_statements(Option<Vec<BatchStatementRequest>>)`](crate::client::fluent_builders::BatchExecuteStatement::set_statements): <p>The list of PartiQL statements representing the batch to run.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::BatchExecuteStatement::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::BatchExecuteStatement::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    /// - On success, responds with [`BatchExecuteStatementOutput`](crate::output::BatchExecuteStatementOutput) with field(s):
    ///   - [`responses(Option<Vec<BatchStatementResponse>>)`](crate::output::BatchExecuteStatementOutput::responses): <p>The response to each PartiQL statement in the batch.</p>
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::BatchExecuteStatementOutput::consumed_capacity): <p>The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.</p>
    /// - On failure, responds with [`SdkError<BatchExecuteStatementError>`](crate::error::BatchExecuteStatementError)
    pub fn batch_execute_statement(&self) -> crate::client::fluent_builders::BatchExecuteStatement {
        crate::client::fluent_builders::BatchExecuteStatement::new(self.handle.clone())
    }
}
