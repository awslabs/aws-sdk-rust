// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_endpoints_output_correct_errors(
    mut builder: crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder,
) -> crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder {
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_import_output_correct_errors(
    mut builder: crate::operation::describe_import::builders::DescribeImportOutputBuilder,
) -> crate::operation::describe_import::builders::DescribeImportOutputBuilder {
    if builder.import_table_description.is_none() {
        builder.import_table_description = {
            let builder = crate::types::builders::ImportTableDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn import_table_output_correct_errors(
    mut builder: crate::operation::import_table::builders::ImportTableOutputBuilder,
) -> crate::operation::import_table::builders::ImportTableOutputBuilder {
    if builder.import_table_description.is_none() {
        builder.import_table_description = {
            let builder = crate::types::builders::ImportTableDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn backup_details_correct_errors(
    mut builder: crate::types::builders::BackupDetailsBuilder,
) -> crate::types::builders::BackupDetailsBuilder {
    if builder.backup_arn.is_none() {
        builder.backup_arn = Some(Default::default())
    }
    if builder.backup_name.is_none() {
        builder.backup_name = Some(Default::default())
    }
    if builder.backup_status.is_none() {
        builder.backup_status = "no value was set".parse::<crate::types::BackupStatus>().ok()
    }
    if builder.backup_type.is_none() {
        builder.backup_type = "no value was set".parse::<crate::types::BackupType>().ok()
    }
    if builder.backup_creation_date_time.is_none() {
        builder.backup_creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn continuous_backups_description_correct_errors(
    mut builder: crate::types::builders::ContinuousBackupsDescriptionBuilder,
) -> crate::types::builders::ContinuousBackupsDescriptionBuilder {
    if builder.continuous_backups_status.is_none() {
        builder.continuous_backups_status = "no value was set".parse::<crate::types::ContinuousBackupsStatus>().ok()
    }
    builder
}

pub(crate) fn time_to_live_specification_correct_errors(
    mut builder: crate::types::builders::TimeToLiveSpecificationBuilder,
) -> crate::types::builders::TimeToLiveSpecificationBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn endpoint_correct_errors(mut builder: crate::types::builders::EndpointBuilder) -> crate::types::builders::EndpointBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    if builder.cache_period_in_minutes.is_none() {
        builder.cache_period_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn keys_and_attributes_correct_errors(
    mut builder: crate::types::builders::KeysAndAttributesBuilder,
) -> crate::types::builders::KeysAndAttributesBuilder {
    if builder.keys.is_none() {
        builder.keys = Some(Default::default())
    }
    builder
}

pub(crate) fn replica_settings_description_correct_errors(
    mut builder: crate::types::builders::ReplicaSettingsDescriptionBuilder,
) -> crate::types::builders::ReplicaSettingsDescriptionBuilder {
    if builder.region_name.is_none() {
        builder.region_name = Some(Default::default())
    }
    builder
}

pub(crate) fn restore_summary_correct_errors(
    mut builder: crate::types::builders::RestoreSummaryBuilder,
) -> crate::types::builders::RestoreSummaryBuilder {
    if builder.restore_date_time.is_none() {
        builder.restore_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.restore_in_progress.is_none() {
        builder.restore_in_progress = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_source_correct_errors(
    mut builder: crate::types::builders::S3BucketSourceBuilder,
) -> crate::types::builders::S3BucketSourceBuilder {
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn source_table_details_correct_errors(
    mut builder: crate::types::builders::SourceTableDetailsBuilder,
) -> crate::types::builders::SourceTableDetailsBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.table_id.is_none() {
        builder.table_id = Some(Default::default())
    }
    if builder.key_schema.is_none() {
        builder.key_schema = Some(Default::default())
    }
    if builder.table_creation_date_time.is_none() {
        builder.table_creation_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.provisioned_throughput.is_none() {
        builder.provisioned_throughput = {
            let builder = crate::types::builders::ProvisionedThroughputBuilder::default();
            crate::serde_util::provisioned_throughput_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn stream_specification_correct_errors(
    mut builder: crate::types::builders::StreamSpecificationBuilder,
) -> crate::types::builders::StreamSpecificationBuilder {
    if builder.stream_enabled.is_none() {
        builder.stream_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn table_creation_parameters_correct_errors(
    mut builder: crate::types::builders::TableCreationParametersBuilder,
) -> crate::types::builders::TableCreationParametersBuilder {
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.attribute_definitions.is_none() {
        builder.attribute_definitions = Some(Default::default())
    }
    if builder.key_schema.is_none() {
        builder.key_schema = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_definition_correct_errors(
    mut builder: crate::types::builders::AttributeDefinitionBuilder,
) -> crate::types::builders::AttributeDefinitionBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.attribute_type.is_none() {
        builder.attribute_type = "no value was set".parse::<crate::types::ScalarAttributeType>().ok()
    }
    builder
}

pub(crate) fn key_schema_element_correct_errors(
    mut builder: crate::types::builders::KeySchemaElementBuilder,
) -> crate::types::builders::KeySchemaElementBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.key_type.is_none() {
        builder.key_type = "no value was set".parse::<crate::types::KeyType>().ok()
    }
    builder
}

pub(crate) fn provisioned_throughput_correct_errors(
    mut builder: crate::types::builders::ProvisionedThroughputBuilder,
) -> crate::types::builders::ProvisionedThroughputBuilder {
    if builder.read_capacity_units.is_none() {
        builder.read_capacity_units = Some(Default::default())
    }
    if builder.write_capacity_units.is_none() {
        builder.write_capacity_units = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_request_correct_errors(
    mut builder: crate::types::builders::DeleteRequestBuilder,
) -> crate::types::builders::DeleteRequestBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn global_secondary_index_correct_errors(
    mut builder: crate::types::builders::GlobalSecondaryIndexBuilder,
) -> crate::types::builders::GlobalSecondaryIndexBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.key_schema.is_none() {
        builder.key_schema = Some(Default::default())
    }
    if builder.projection.is_none() {
        builder.projection = {
            let builder = crate::types::builders::ProjectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn put_request_correct_errors(mut builder: crate::types::builders::PutRequestBuilder) -> crate::types::builders::PutRequestBuilder {
    if builder.item.is_none() {
        builder.item = Some(Default::default())
    }
    builder
}

pub(crate) fn replica_global_secondary_index_settings_description_correct_errors(
    mut builder: crate::types::builders::ReplicaGlobalSecondaryIndexSettingsDescriptionBuilder,
) -> crate::types::builders::ReplicaGlobalSecondaryIndexSettingsDescriptionBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_scaling_target_tracking_scaling_policy_configuration_description_correct_errors(
    mut builder: crate::types::builders::AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionBuilder,
) -> crate::types::builders::AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionBuilder {
    if builder.target_value.is_none() {
        builder.target_value = Some(Default::default())
    }
    builder
}
