// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the properties of a replica.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicaSettingsDescription {
    /// <p>The Region name of the replica.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
    /// <p>The current state of the Region:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Region is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The Region is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The Region is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The Region is ready for use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub replica_status: std::option::Option<crate::types::ReplicaStatus>,
    /// <p>The read/write capacity mode of the replica.</p>
    #[doc(hidden)]
    pub replica_billing_mode_summary: std::option::Option<crate::types::BillingModeSummary>,
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    #[doc(hidden)]
    pub replica_provisioned_read_capacity_units: std::option::Option<i64>,
    /// <p>Auto scaling settings for a global table replica's read capacity units.</p>
    #[doc(hidden)]
    pub replica_provisioned_read_capacity_auto_scaling_settings:
        std::option::Option<crate::types::AutoScalingSettingsDescription>,
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    #[doc(hidden)]
    pub replica_provisioned_write_capacity_units: std::option::Option<i64>,
    /// <p>Auto scaling settings for a global table replica's write capacity units.</p>
    #[doc(hidden)]
    pub replica_provisioned_write_capacity_auto_scaling_settings:
        std::option::Option<crate::types::AutoScalingSettingsDescription>,
    /// <p>Replica global secondary index settings for the global table.</p>
    #[doc(hidden)]
    pub replica_global_secondary_index_settings: std::option::Option<
        std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexSettingsDescription>,
    >,
    /// <p>Contains details of the table class.</p>
    #[doc(hidden)]
    pub replica_table_class_summary: std::option::Option<crate::types::TableClassSummary>,
}
impl ReplicaSettingsDescription {
    /// <p>The Region name of the replica.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>The current state of the Region:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Region is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The Region is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The Region is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The Region is ready for use.</p> </li>
    /// </ul>
    pub fn replica_status(&self) -> std::option::Option<&crate::types::ReplicaStatus> {
        self.replica_status.as_ref()
    }
    /// <p>The read/write capacity mode of the replica.</p>
    pub fn replica_billing_mode_summary(
        &self,
    ) -> std::option::Option<&crate::types::BillingModeSummary> {
        self.replica_billing_mode_summary.as_ref()
    }
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    pub fn replica_provisioned_read_capacity_units(&self) -> std::option::Option<i64> {
        self.replica_provisioned_read_capacity_units
    }
    /// <p>Auto scaling settings for a global table replica's read capacity units.</p>
    pub fn replica_provisioned_read_capacity_auto_scaling_settings(
        &self,
    ) -> std::option::Option<&crate::types::AutoScalingSettingsDescription> {
        self.replica_provisioned_read_capacity_auto_scaling_settings
            .as_ref()
    }
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn replica_provisioned_write_capacity_units(&self) -> std::option::Option<i64> {
        self.replica_provisioned_write_capacity_units
    }
    /// <p>Auto scaling settings for a global table replica's write capacity units.</p>
    pub fn replica_provisioned_write_capacity_auto_scaling_settings(
        &self,
    ) -> std::option::Option<&crate::types::AutoScalingSettingsDescription> {
        self.replica_provisioned_write_capacity_auto_scaling_settings
            .as_ref()
    }
    /// <p>Replica global secondary index settings for the global table.</p>
    pub fn replica_global_secondary_index_settings(
        &self,
    ) -> std::option::Option<&[crate::types::ReplicaGlobalSecondaryIndexSettingsDescription]> {
        self.replica_global_secondary_index_settings.as_deref()
    }
    /// <p>Contains details of the table class.</p>
    pub fn replica_table_class_summary(
        &self,
    ) -> std::option::Option<&crate::types::TableClassSummary> {
        self.replica_table_class_summary.as_ref()
    }
}
impl ReplicaSettingsDescription {
    /// Creates a new builder-style object to manufacture [`ReplicaSettingsDescription`](crate::types::ReplicaSettingsDescription).
    pub fn builder() -> crate::types::builders::ReplicaSettingsDescriptionBuilder {
        crate::types::builders::ReplicaSettingsDescriptionBuilder::default()
    }
}

/// A builder for [`ReplicaSettingsDescription`](crate::types::ReplicaSettingsDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicaSettingsDescriptionBuilder {
    pub(crate) region_name: std::option::Option<std::string::String>,
    pub(crate) replica_status: std::option::Option<crate::types::ReplicaStatus>,
    pub(crate) replica_billing_mode_summary: std::option::Option<crate::types::BillingModeSummary>,
    pub(crate) replica_provisioned_read_capacity_units: std::option::Option<i64>,
    pub(crate) replica_provisioned_read_capacity_auto_scaling_settings:
        std::option::Option<crate::types::AutoScalingSettingsDescription>,
    pub(crate) replica_provisioned_write_capacity_units: std::option::Option<i64>,
    pub(crate) replica_provisioned_write_capacity_auto_scaling_settings:
        std::option::Option<crate::types::AutoScalingSettingsDescription>,
    pub(crate) replica_global_secondary_index_settings: std::option::Option<
        std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexSettingsDescription>,
    >,
    pub(crate) replica_table_class_summary: std::option::Option<crate::types::TableClassSummary>,
}
impl ReplicaSettingsDescriptionBuilder {
    /// <p>The Region name of the replica.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>The Region name of the replica.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The current state of the Region:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Region is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The Region is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The Region is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The Region is ready for use.</p> </li>
    /// </ul>
    pub fn replica_status(mut self, input: crate::types::ReplicaStatus) -> Self {
        self.replica_status = Some(input);
        self
    }
    /// <p>The current state of the Region:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Region is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The Region is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The Region is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The Region is ready for use.</p> </li>
    /// </ul>
    pub fn set_replica_status(
        mut self,
        input: std::option::Option<crate::types::ReplicaStatus>,
    ) -> Self {
        self.replica_status = input;
        self
    }
    /// <p>The read/write capacity mode of the replica.</p>
    pub fn replica_billing_mode_summary(mut self, input: crate::types::BillingModeSummary) -> Self {
        self.replica_billing_mode_summary = Some(input);
        self
    }
    /// <p>The read/write capacity mode of the replica.</p>
    pub fn set_replica_billing_mode_summary(
        mut self,
        input: std::option::Option<crate::types::BillingModeSummary>,
    ) -> Self {
        self.replica_billing_mode_summary = input;
        self
    }
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    pub fn replica_provisioned_read_capacity_units(mut self, input: i64) -> Self {
        self.replica_provisioned_read_capacity_units = Some(input);
        self
    }
    /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    pub fn set_replica_provisioned_read_capacity_units(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.replica_provisioned_read_capacity_units = input;
        self
    }
    /// <p>Auto scaling settings for a global table replica's read capacity units.</p>
    pub fn replica_provisioned_read_capacity_auto_scaling_settings(
        mut self,
        input: crate::types::AutoScalingSettingsDescription,
    ) -> Self {
        self.replica_provisioned_read_capacity_auto_scaling_settings = Some(input);
        self
    }
    /// <p>Auto scaling settings for a global table replica's read capacity units.</p>
    pub fn set_replica_provisioned_read_capacity_auto_scaling_settings(
        mut self,
        input: std::option::Option<crate::types::AutoScalingSettingsDescription>,
    ) -> Self {
        self.replica_provisioned_read_capacity_auto_scaling_settings = input;
        self
    }
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn replica_provisioned_write_capacity_units(mut self, input: i64) -> Self {
        self.replica_provisioned_write_capacity_units = Some(input);
        self
    }
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#ProvisionedThroughput">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn set_replica_provisioned_write_capacity_units(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.replica_provisioned_write_capacity_units = input;
        self
    }
    /// <p>Auto scaling settings for a global table replica's write capacity units.</p>
    pub fn replica_provisioned_write_capacity_auto_scaling_settings(
        mut self,
        input: crate::types::AutoScalingSettingsDescription,
    ) -> Self {
        self.replica_provisioned_write_capacity_auto_scaling_settings = Some(input);
        self
    }
    /// <p>Auto scaling settings for a global table replica's write capacity units.</p>
    pub fn set_replica_provisioned_write_capacity_auto_scaling_settings(
        mut self,
        input: std::option::Option<crate::types::AutoScalingSettingsDescription>,
    ) -> Self {
        self.replica_provisioned_write_capacity_auto_scaling_settings = input;
        self
    }
    /// Appends an item to `replica_global_secondary_index_settings`.
    ///
    /// To override the contents of this collection use [`set_replica_global_secondary_index_settings`](Self::set_replica_global_secondary_index_settings).
    ///
    /// <p>Replica global secondary index settings for the global table.</p>
    pub fn replica_global_secondary_index_settings(
        mut self,
        input: crate::types::ReplicaGlobalSecondaryIndexSettingsDescription,
    ) -> Self {
        let mut v = self
            .replica_global_secondary_index_settings
            .unwrap_or_default();
        v.push(input);
        self.replica_global_secondary_index_settings = Some(v);
        self
    }
    /// <p>Replica global secondary index settings for the global table.</p>
    pub fn set_replica_global_secondary_index_settings(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexSettingsDescription>,
        >,
    ) -> Self {
        self.replica_global_secondary_index_settings = input;
        self
    }
    /// <p>Contains details of the table class.</p>
    pub fn replica_table_class_summary(mut self, input: crate::types::TableClassSummary) -> Self {
        self.replica_table_class_summary = Some(input);
        self
    }
    /// <p>Contains details of the table class.</p>
    pub fn set_replica_table_class_summary(
        mut self,
        input: std::option::Option<crate::types::TableClassSummary>,
    ) -> Self {
        self.replica_table_class_summary = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicaSettingsDescription`](crate::types::ReplicaSettingsDescription).
    pub fn build(self) -> crate::types::ReplicaSettingsDescription {
        crate::types::ReplicaSettingsDescription {
            region_name: self.region_name,
            replica_status: self.replica_status,
            replica_billing_mode_summary: self.replica_billing_mode_summary,
            replica_provisioned_read_capacity_units: self.replica_provisioned_read_capacity_units,
            replica_provisioned_read_capacity_auto_scaling_settings: self
                .replica_provisioned_read_capacity_auto_scaling_settings,
            replica_provisioned_write_capacity_units: self.replica_provisioned_write_capacity_units,
            replica_provisioned_write_capacity_auto_scaling_settings: self
                .replica_provisioned_write_capacity_auto_scaling_settings,
            replica_global_secondary_index_settings: self.replica_global_secondary_index_settings,
            replica_table_class_summary: self.replica_table_class_summary,
        }
    }
}
