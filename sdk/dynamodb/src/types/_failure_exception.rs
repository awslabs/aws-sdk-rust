// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a failure a contributor insights operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailureException {
    /// <p>Exception name.</p>
    #[doc(hidden)]
    pub exception_name: std::option::Option<std::string::String>,
    /// <p>Description of the failure.</p>
    #[doc(hidden)]
    pub exception_description: std::option::Option<std::string::String>,
}
impl FailureException {
    /// <p>Exception name.</p>
    pub fn exception_name(&self) -> std::option::Option<&str> {
        self.exception_name.as_deref()
    }
    /// <p>Description of the failure.</p>
    pub fn exception_description(&self) -> std::option::Option<&str> {
        self.exception_description.as_deref()
    }
}
impl FailureException {
    /// Creates a new builder-style object to manufacture [`FailureException`](crate::types::FailureException).
    pub fn builder() -> crate::types::builders::FailureExceptionBuilder {
        crate::types::builders::FailureExceptionBuilder::default()
    }
}

/// A builder for [`FailureException`](crate::types::FailureException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailureExceptionBuilder {
    pub(crate) exception_name: std::option::Option<std::string::String>,
    pub(crate) exception_description: std::option::Option<std::string::String>,
}
impl FailureExceptionBuilder {
    /// <p>Exception name.</p>
    pub fn exception_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.exception_name = Some(input.into());
        self
    }
    /// <p>Exception name.</p>
    pub fn set_exception_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.exception_name = input;
        self
    }
    /// <p>Description of the failure.</p>
    pub fn exception_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.exception_description = Some(input.into());
        self
    }
    /// <p>Description of the failure.</p>
    pub fn set_exception_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.exception_description = input;
        self
    }
    /// Consumes the builder and constructs a [`FailureException`](crate::types::FailureException).
    pub fn build(self) -> crate::types::FailureException {
        crate::types::FailureException {
            exception_name: self.exception_name,
            exception_description: self.exception_description,
        }
    }
}
