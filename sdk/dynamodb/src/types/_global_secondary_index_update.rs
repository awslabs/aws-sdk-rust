// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents one of the following:</p>
/// <ul>
/// <li> <p>A new global secondary index to be added to an existing table.</p> </li>
/// <li> <p>New provisioned throughput parameters for an existing global secondary index.</p> </li>
/// <li> <p>An existing global secondary index to be removed from an existing table.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GlobalSecondaryIndexUpdate {
    /// <p>The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.</p>
    #[doc(hidden)]
    pub update: std::option::Option<crate::types::UpdateGlobalSecondaryIndexAction>,
    /// <p>The parameters required for creating a global secondary index on an existing table:</p>
    /// <ul>
    /// <li> <p> <code>IndexName </code> </p> </li>
    /// <li> <p> <code>KeySchema </code> </p> </li>
    /// <li> <p> <code>AttributeDefinitions </code> </p> </li>
    /// <li> <p> <code>Projection </code> </p> </li>
    /// <li> <p> <code>ProvisionedThroughput </code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub create: std::option::Option<crate::types::CreateGlobalSecondaryIndexAction>,
    /// <p>The name of an existing global secondary index to be removed.</p>
    #[doc(hidden)]
    pub delete: std::option::Option<crate::types::DeleteGlobalSecondaryIndexAction>,
}
impl GlobalSecondaryIndexUpdate {
    /// <p>The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.</p>
    pub fn update(&self) -> std::option::Option<&crate::types::UpdateGlobalSecondaryIndexAction> {
        self.update.as_ref()
    }
    /// <p>The parameters required for creating a global secondary index on an existing table:</p>
    /// <ul>
    /// <li> <p> <code>IndexName </code> </p> </li>
    /// <li> <p> <code>KeySchema </code> </p> </li>
    /// <li> <p> <code>AttributeDefinitions </code> </p> </li>
    /// <li> <p> <code>Projection </code> </p> </li>
    /// <li> <p> <code>ProvisionedThroughput </code> </p> </li>
    /// </ul>
    pub fn create(&self) -> std::option::Option<&crate::types::CreateGlobalSecondaryIndexAction> {
        self.create.as_ref()
    }
    /// <p>The name of an existing global secondary index to be removed.</p>
    pub fn delete(&self) -> std::option::Option<&crate::types::DeleteGlobalSecondaryIndexAction> {
        self.delete.as_ref()
    }
}
impl GlobalSecondaryIndexUpdate {
    /// Creates a new builder-style object to manufacture [`GlobalSecondaryIndexUpdate`](crate::types::GlobalSecondaryIndexUpdate).
    pub fn builder() -> crate::types::builders::GlobalSecondaryIndexUpdateBuilder {
        crate::types::builders::GlobalSecondaryIndexUpdateBuilder::default()
    }
}

/// A builder for [`GlobalSecondaryIndexUpdate`](crate::types::GlobalSecondaryIndexUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GlobalSecondaryIndexUpdateBuilder {
    pub(crate) update: std::option::Option<crate::types::UpdateGlobalSecondaryIndexAction>,
    pub(crate) create: std::option::Option<crate::types::CreateGlobalSecondaryIndexAction>,
    pub(crate) delete: std::option::Option<crate::types::DeleteGlobalSecondaryIndexAction>,
}
impl GlobalSecondaryIndexUpdateBuilder {
    /// <p>The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.</p>
    pub fn update(mut self, input: crate::types::UpdateGlobalSecondaryIndexAction) -> Self {
        self.update = Some(input);
        self
    }
    /// <p>The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.</p>
    pub fn set_update(
        mut self,
        input: std::option::Option<crate::types::UpdateGlobalSecondaryIndexAction>,
    ) -> Self {
        self.update = input;
        self
    }
    /// <p>The parameters required for creating a global secondary index on an existing table:</p>
    /// <ul>
    /// <li> <p> <code>IndexName </code> </p> </li>
    /// <li> <p> <code>KeySchema </code> </p> </li>
    /// <li> <p> <code>AttributeDefinitions </code> </p> </li>
    /// <li> <p> <code>Projection </code> </p> </li>
    /// <li> <p> <code>ProvisionedThroughput </code> </p> </li>
    /// </ul>
    pub fn create(mut self, input: crate::types::CreateGlobalSecondaryIndexAction) -> Self {
        self.create = Some(input);
        self
    }
    /// <p>The parameters required for creating a global secondary index on an existing table:</p>
    /// <ul>
    /// <li> <p> <code>IndexName </code> </p> </li>
    /// <li> <p> <code>KeySchema </code> </p> </li>
    /// <li> <p> <code>AttributeDefinitions </code> </p> </li>
    /// <li> <p> <code>Projection </code> </p> </li>
    /// <li> <p> <code>ProvisionedThroughput </code> </p> </li>
    /// </ul>
    pub fn set_create(
        mut self,
        input: std::option::Option<crate::types::CreateGlobalSecondaryIndexAction>,
    ) -> Self {
        self.create = input;
        self
    }
    /// <p>The name of an existing global secondary index to be removed.</p>
    pub fn delete(mut self, input: crate::types::DeleteGlobalSecondaryIndexAction) -> Self {
        self.delete = Some(input);
        self
    }
    /// <p>The name of an existing global secondary index to be removed.</p>
    pub fn set_delete(
        mut self,
        input: std::option::Option<crate::types::DeleteGlobalSecondaryIndexAction>,
    ) -> Self {
        self.delete = input;
        self
    }
    /// Consumes the builder and constructs a [`GlobalSecondaryIndexUpdate`](crate::types::GlobalSecondaryIndexUpdate).
    pub fn build(self) -> crate::types::GlobalSecondaryIndexUpdate {
        crate::types::GlobalSecondaryIndexUpdate {
            update: self.update,
            create: self.create,
            delete: self.delete,
        }
    }
}
