// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the amount of provisioned throughput capacity consumed on a table or an index.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Capacity {
    /// <p>The total number of read capacity units consumed on a table or an index.</p>
    #[doc(hidden)]
    pub read_capacity_units: std::option::Option<f64>,
    /// <p>The total number of write capacity units consumed on a table or an index.</p>
    #[doc(hidden)]
    pub write_capacity_units: std::option::Option<f64>,
    /// <p>The total number of capacity units consumed on a table or an index.</p>
    #[doc(hidden)]
    pub capacity_units: std::option::Option<f64>,
}
impl Capacity {
    /// <p>The total number of read capacity units consumed on a table or an index.</p>
    pub fn read_capacity_units(&self) -> std::option::Option<f64> {
        self.read_capacity_units
    }
    /// <p>The total number of write capacity units consumed on a table or an index.</p>
    pub fn write_capacity_units(&self) -> std::option::Option<f64> {
        self.write_capacity_units
    }
    /// <p>The total number of capacity units consumed on a table or an index.</p>
    pub fn capacity_units(&self) -> std::option::Option<f64> {
        self.capacity_units
    }
}
impl Capacity {
    /// Creates a new builder-style object to manufacture [`Capacity`](crate::types::Capacity).
    pub fn builder() -> crate::types::builders::CapacityBuilder {
        crate::types::builders::CapacityBuilder::default()
    }
}

/// A builder for [`Capacity`](crate::types::Capacity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CapacityBuilder {
    pub(crate) read_capacity_units: std::option::Option<f64>,
    pub(crate) write_capacity_units: std::option::Option<f64>,
    pub(crate) capacity_units: std::option::Option<f64>,
}
impl CapacityBuilder {
    /// <p>The total number of read capacity units consumed on a table or an index.</p>
    pub fn read_capacity_units(mut self, input: f64) -> Self {
        self.read_capacity_units = Some(input);
        self
    }
    /// <p>The total number of read capacity units consumed on a table or an index.</p>
    pub fn set_read_capacity_units(mut self, input: std::option::Option<f64>) -> Self {
        self.read_capacity_units = input;
        self
    }
    /// <p>The total number of write capacity units consumed on a table or an index.</p>
    pub fn write_capacity_units(mut self, input: f64) -> Self {
        self.write_capacity_units = Some(input);
        self
    }
    /// <p>The total number of write capacity units consumed on a table or an index.</p>
    pub fn set_write_capacity_units(mut self, input: std::option::Option<f64>) -> Self {
        self.write_capacity_units = input;
        self
    }
    /// <p>The total number of capacity units consumed on a table or an index.</p>
    pub fn capacity_units(mut self, input: f64) -> Self {
        self.capacity_units = Some(input);
        self
    }
    /// <p>The total number of capacity units consumed on a table or an index.</p>
    pub fn set_capacity_units(mut self, input: std::option::Option<f64>) -> Self {
        self.capacity_units = input;
        self
    }
    /// Consumes the builder and constructs a [`Capacity`](crate::types::Capacity).
    pub fn build(self) -> crate::types::Capacity {
        crate::types::Capacity {
            read_capacity_units: self.read_capacity_units,
            write_capacity_units: self.write_capacity_units,
            capacity_units: self.capacity_units,
        }
    }
}
