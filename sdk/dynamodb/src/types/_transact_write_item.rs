// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TransactWriteItem {
    /// <p>A request to perform a check item operation.</p>
    #[doc(hidden)]
    pub condition_check: std::option::Option<crate::types::ConditionCheck>,
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    #[doc(hidden)]
    pub put: std::option::Option<crate::types::Put>,
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    #[doc(hidden)]
    pub delete: std::option::Option<crate::types::Delete>,
    /// <p>A request to perform an <code>UpdateItem</code> operation.</p>
    #[doc(hidden)]
    pub update: std::option::Option<crate::types::Update>,
}
impl TransactWriteItem {
    /// <p>A request to perform a check item operation.</p>
    pub fn condition_check(&self) -> std::option::Option<&crate::types::ConditionCheck> {
        self.condition_check.as_ref()
    }
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    pub fn put(&self) -> std::option::Option<&crate::types::Put> {
        self.put.as_ref()
    }
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    pub fn delete(&self) -> std::option::Option<&crate::types::Delete> {
        self.delete.as_ref()
    }
    /// <p>A request to perform an <code>UpdateItem</code> operation.</p>
    pub fn update(&self) -> std::option::Option<&crate::types::Update> {
        self.update.as_ref()
    }
}
impl TransactWriteItem {
    /// Creates a new builder-style object to manufacture [`TransactWriteItem`](crate::types::TransactWriteItem).
    pub fn builder() -> crate::types::builders::TransactWriteItemBuilder {
        crate::types::builders::TransactWriteItemBuilder::default()
    }
}

/// A builder for [`TransactWriteItem`](crate::types::TransactWriteItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TransactWriteItemBuilder {
    pub(crate) condition_check: std::option::Option<crate::types::ConditionCheck>,
    pub(crate) put: std::option::Option<crate::types::Put>,
    pub(crate) delete: std::option::Option<crate::types::Delete>,
    pub(crate) update: std::option::Option<crate::types::Update>,
}
impl TransactWriteItemBuilder {
    /// <p>A request to perform a check item operation.</p>
    pub fn condition_check(mut self, input: crate::types::ConditionCheck) -> Self {
        self.condition_check = Some(input);
        self
    }
    /// <p>A request to perform a check item operation.</p>
    pub fn set_condition_check(
        mut self,
        input: std::option::Option<crate::types::ConditionCheck>,
    ) -> Self {
        self.condition_check = input;
        self
    }
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    pub fn put(mut self, input: crate::types::Put) -> Self {
        self.put = Some(input);
        self
    }
    /// <p>A request to perform a <code>PutItem</code> operation.</p>
    pub fn set_put(mut self, input: std::option::Option<crate::types::Put>) -> Self {
        self.put = input;
        self
    }
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    pub fn delete(mut self, input: crate::types::Delete) -> Self {
        self.delete = Some(input);
        self
    }
    /// <p>A request to perform a <code>DeleteItem</code> operation.</p>
    pub fn set_delete(mut self, input: std::option::Option<crate::types::Delete>) -> Self {
        self.delete = input;
        self
    }
    /// <p>A request to perform an <code>UpdateItem</code> operation.</p>
    pub fn update(mut self, input: crate::types::Update) -> Self {
        self.update = Some(input);
        self
    }
    /// <p>A request to perform an <code>UpdateItem</code> operation.</p>
    pub fn set_update(mut self, input: std::option::Option<crate::types::Update>) -> Self {
        self.update = input;
        self
    }
    /// Consumes the builder and constructs a [`TransactWriteItem`](crate::types::TransactWriteItem).
    pub fn build(self) -> crate::types::TransactWriteItem {
        crate::types::TransactWriteItem {
            condition_check: self.condition_check,
            put: self.put,
            delete: self.delete,
            update: self.update,
        }
    }
}
