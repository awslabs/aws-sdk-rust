// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of the table when the backup was created. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceTableDetails {
    /// <p>The name of the table for which the backup was created. </p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>Unique identifier for the table for which the backup was created. </p>
    #[doc(hidden)]
    pub table_id: std::option::Option<std::string::String>,
    /// <p>ARN of the table for which backup was created. </p>
    #[doc(hidden)]
    pub table_arn: std::option::Option<std::string::String>,
    /// <p>Size of the table in bytes. Note that this is an approximate value.</p>
    #[doc(hidden)]
    pub table_size_bytes: std::option::Option<i64>,
    /// <p>Schema of the table. </p>
    #[doc(hidden)]
    pub key_schema: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    /// <p>Time when the source table was created. </p>
    #[doc(hidden)]
    pub table_creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Read IOPs and Write IOPS on the table when the backup was created.</p>
    #[doc(hidden)]
    pub provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    /// <p>Number of items in the table. Note that this is an approximate value. </p>
    #[doc(hidden)]
    pub item_count: std::option::Option<i64>,
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p> </li>
    /// <li> <p> <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub billing_mode: std::option::Option<crate::types::BillingMode>,
}
impl SourceTableDetails {
    /// <p>The name of the table for which the backup was created. </p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>Unique identifier for the table for which the backup was created. </p>
    pub fn table_id(&self) -> std::option::Option<&str> {
        self.table_id.as_deref()
    }
    /// <p>ARN of the table for which backup was created. </p>
    pub fn table_arn(&self) -> std::option::Option<&str> {
        self.table_arn.as_deref()
    }
    /// <p>Size of the table in bytes. Note that this is an approximate value.</p>
    pub fn table_size_bytes(&self) -> std::option::Option<i64> {
        self.table_size_bytes
    }
    /// <p>Schema of the table. </p>
    pub fn key_schema(&self) -> std::option::Option<&[crate::types::KeySchemaElement]> {
        self.key_schema.as_deref()
    }
    /// <p>Time when the source table was created. </p>
    pub fn table_creation_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.table_creation_date_time.as_ref()
    }
    /// <p>Read IOPs and Write IOPS on the table when the backup was created.</p>
    pub fn provisioned_throughput(
        &self,
    ) -> std::option::Option<&crate::types::ProvisionedThroughput> {
        self.provisioned_throughput.as_ref()
    }
    /// <p>Number of items in the table. Note that this is an approximate value. </p>
    pub fn item_count(&self) -> std::option::Option<i64> {
        self.item_count
    }
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p> </li>
    /// <li> <p> <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. </p> </li>
    /// </ul>
    pub fn billing_mode(&self) -> std::option::Option<&crate::types::BillingMode> {
        self.billing_mode.as_ref()
    }
}
impl SourceTableDetails {
    /// Creates a new builder-style object to manufacture [`SourceTableDetails`](crate::types::SourceTableDetails).
    pub fn builder() -> crate::types::builders::SourceTableDetailsBuilder {
        crate::types::builders::SourceTableDetailsBuilder::default()
    }
}

/// A builder for [`SourceTableDetails`](crate::types::SourceTableDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceTableDetailsBuilder {
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) table_id: std::option::Option<std::string::String>,
    pub(crate) table_arn: std::option::Option<std::string::String>,
    pub(crate) table_size_bytes: std::option::Option<i64>,
    pub(crate) key_schema: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    pub(crate) table_creation_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    pub(crate) item_count: std::option::Option<i64>,
    pub(crate) billing_mode: std::option::Option<crate::types::BillingMode>,
}
impl SourceTableDetailsBuilder {
    /// <p>The name of the table for which the backup was created. </p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table for which the backup was created. </p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>Unique identifier for the table for which the backup was created. </p>
    pub fn table_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for the table for which the backup was created. </p>
    pub fn set_table_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_id = input;
        self
    }
    /// <p>ARN of the table for which backup was created. </p>
    pub fn table_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_arn = Some(input.into());
        self
    }
    /// <p>ARN of the table for which backup was created. </p>
    pub fn set_table_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_arn = input;
        self
    }
    /// <p>Size of the table in bytes. Note that this is an approximate value.</p>
    pub fn table_size_bytes(mut self, input: i64) -> Self {
        self.table_size_bytes = Some(input);
        self
    }
    /// <p>Size of the table in bytes. Note that this is an approximate value.</p>
    pub fn set_table_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.table_size_bytes = input;
        self
    }
    /// Appends an item to `key_schema`.
    ///
    /// To override the contents of this collection use [`set_key_schema`](Self::set_key_schema).
    ///
    /// <p>Schema of the table. </p>
    pub fn key_schema(mut self, input: crate::types::KeySchemaElement) -> Self {
        let mut v = self.key_schema.unwrap_or_default();
        v.push(input);
        self.key_schema = Some(v);
        self
    }
    /// <p>Schema of the table. </p>
    pub fn set_key_schema(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    ) -> Self {
        self.key_schema = input;
        self
    }
    /// <p>Time when the source table was created. </p>
    pub fn table_creation_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.table_creation_date_time = Some(input);
        self
    }
    /// <p>Time when the source table was created. </p>
    pub fn set_table_creation_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.table_creation_date_time = input;
        self
    }
    /// <p>Read IOPs and Write IOPS on the table when the backup was created.</p>
    pub fn provisioned_throughput(mut self, input: crate::types::ProvisionedThroughput) -> Self {
        self.provisioned_throughput = Some(input);
        self
    }
    /// <p>Read IOPs and Write IOPS on the table when the backup was created.</p>
    pub fn set_provisioned_throughput(
        mut self,
        input: std::option::Option<crate::types::ProvisionedThroughput>,
    ) -> Self {
        self.provisioned_throughput = input;
        self
    }
    /// <p>Number of items in the table. Note that this is an approximate value. </p>
    pub fn item_count(mut self, input: i64) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>Number of items in the table. Note that this is an approximate value. </p>
    pub fn set_item_count(mut self, input: std::option::Option<i64>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p> </li>
    /// <li> <p> <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. </p> </li>
    /// </ul>
    pub fn billing_mode(mut self, input: crate::types::BillingMode) -> Self {
        self.billing_mode = Some(input);
        self
    }
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li> <p> <code>PROVISIONED</code> - Sets the read/write capacity mode to <code>PROVISIONED</code>. We recommend using <code>PROVISIONED</code> for predictable workloads.</p> </li>
    /// <li> <p> <code>PAY_PER_REQUEST</code> - Sets the read/write capacity mode to <code>PAY_PER_REQUEST</code>. We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. </p> </li>
    /// </ul>
    pub fn set_billing_mode(
        mut self,
        input: std::option::Option<crate::types::BillingMode>,
    ) -> Self {
        self.billing_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceTableDetails`](crate::types::SourceTableDetails).
    pub fn build(self) -> crate::types::SourceTableDetails {
        crate::types::SourceTableDetails {
            table_name: self.table_name,
            table_id: self.table_id,
            table_arn: self.table_arn,
            table_size_bytes: self.table_size_bytes,
            key_schema: self.key_schema,
            table_creation_date_time: self.table_creation_date_time,
            provisioned_throughput: self.provisioned_throughput,
            item_count: self.item_count,
            billing_mode: self.billing_mode,
        }
    }
}
