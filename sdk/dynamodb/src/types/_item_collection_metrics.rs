// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about item collections, if any, that were affected by the operation. <code>ItemCollectionMetrics</code> is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ItemCollectionMetrics {
    /// <p>The partition key value of the item collection. This value is the same as the partition key value of the item.</p>
    #[doc(hidden)]
    pub item_collection_key: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    /// <p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    #[doc(hidden)]
    pub size_estimate_range_gb: std::option::Option<std::vec::Vec<f64>>,
}
impl ItemCollectionMetrics {
    /// <p>The partition key value of the item collection. This value is the same as the partition key value of the item.</p>
    pub fn item_collection_key(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    > {
        self.item_collection_key.as_ref()
    }
    /// <p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    pub fn size_estimate_range_gb(&self) -> std::option::Option<&[f64]> {
        self.size_estimate_range_gb.as_deref()
    }
}
impl ItemCollectionMetrics {
    /// Creates a new builder-style object to manufacture [`ItemCollectionMetrics`](crate::types::ItemCollectionMetrics).
    pub fn builder() -> crate::types::builders::ItemCollectionMetricsBuilder {
        crate::types::builders::ItemCollectionMetricsBuilder::default()
    }
}

/// A builder for [`ItemCollectionMetrics`](crate::types::ItemCollectionMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ItemCollectionMetricsBuilder {
    pub(crate) item_collection_key: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
    >,
    pub(crate) size_estimate_range_gb: std::option::Option<std::vec::Vec<f64>>,
}
impl ItemCollectionMetricsBuilder {
    /// Adds a key-value pair to `item_collection_key`.
    ///
    /// To override the contents of this collection use [`set_item_collection_key`](Self::set_item_collection_key).
    ///
    /// <p>The partition key value of the item collection. This value is the same as the partition key value of the item.</p>
    pub fn item_collection_key(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::AttributeValue,
    ) -> Self {
        let mut hash_map = self.item_collection_key.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.item_collection_key = Some(hash_map);
        self
    }
    /// <p>The partition key value of the item collection. This value is the same as the partition key value of the item.</p>
    pub fn set_item_collection_key(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::AttributeValue>,
        >,
    ) -> Self {
        self.item_collection_key = input;
        self
    }
    /// Appends an item to `size_estimate_range_gb`.
    ///
    /// To override the contents of this collection use [`set_size_estimate_range_gb`](Self::set_size_estimate_range_gb).
    ///
    /// <p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    pub fn size_estimate_range_gb(mut self, input: f64) -> Self {
        let mut v = self.size_estimate_range_gb.unwrap_or_default();
        v.push(input);
        self.size_estimate_range_gb = Some(v);
        self
    }
    /// <p>An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    pub fn set_size_estimate_range_gb(
        mut self,
        input: std::option::Option<std::vec::Vec<f64>>,
    ) -> Self {
        self.size_estimate_range_gb = input;
        self
    }
    /// Consumes the builder and constructs a [`ItemCollectionMetrics`](crate::types::ItemCollectionMetrics).
    pub fn build(self) -> crate::types::ItemCollectionMetrics {
        crate::types::ItemCollectionMetrics {
            item_collection_key: self.item_collection_key,
            size_estimate_range_gb: self.size_estimate_range_gb,
        }
    }
}
