// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the properties of a global secondary index.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GlobalSecondaryIndexDescription {
    /// <p>The name of the global secondary index.</p>
    #[doc(hidden)]
    pub index_name: std::option::Option<std::string::String>,
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    /// <ul>
    /// <li> <p> <code>HASH</code> - partition key</p> </li>
    /// <li> <p> <code>RANGE</code> - sort key</p> </li>
    /// </ul> <note>
    /// <p>The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    #[doc(hidden)]
    pub key_schema: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    /// <p>Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. </p>
    #[doc(hidden)]
    pub projection: std::option::Option<crate::types::Projection>,
    /// <p>The current state of the global secondary index:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The index is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub index_status: std::option::Option<crate::types::IndexStatus>,
    /// <p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and <code>Backfilling</code> is false.</p>
    /// <p>You can delete an index that is being created during the <code>Backfilling</code> phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is true. You can't delete the index that is being created when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false. </p> <note>
    /// <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p>
    /// </note>
    #[doc(hidden)]
    pub backfilling: std::option::Option<bool>,
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    #[doc(hidden)]
    pub provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughputDescription>,
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    #[doc(hidden)]
    pub index_size_bytes: std::option::Option<i64>,
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    #[doc(hidden)]
    pub item_count: std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    #[doc(hidden)]
    pub index_arn: std::option::Option<std::string::String>,
}
impl GlobalSecondaryIndexDescription {
    /// <p>The name of the global secondary index.</p>
    pub fn index_name(&self) -> std::option::Option<&str> {
        self.index_name.as_deref()
    }
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    /// <ul>
    /// <li> <p> <code>HASH</code> - partition key</p> </li>
    /// <li> <p> <code>RANGE</code> - sort key</p> </li>
    /// </ul> <note>
    /// <p>The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    pub fn key_schema(&self) -> std::option::Option<&[crate::types::KeySchemaElement]> {
        self.key_schema.as_deref()
    }
    /// <p>Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. </p>
    pub fn projection(&self) -> std::option::Option<&crate::types::Projection> {
        self.projection.as_ref()
    }
    /// <p>The current state of the global secondary index:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The index is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li>
    /// </ul>
    pub fn index_status(&self) -> std::option::Option<&crate::types::IndexStatus> {
        self.index_status.as_ref()
    }
    /// <p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and <code>Backfilling</code> is false.</p>
    /// <p>You can delete an index that is being created during the <code>Backfilling</code> phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is true. You can't delete the index that is being created when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false. </p> <note>
    /// <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p>
    /// </note>
    pub fn backfilling(&self) -> std::option::Option<bool> {
        self.backfilling
    }
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn provisioned_throughput(
        &self,
    ) -> std::option::Option<&crate::types::ProvisionedThroughputDescription> {
        self.provisioned_throughput.as_ref()
    }
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn index_size_bytes(&self) -> std::option::Option<i64> {
        self.index_size_bytes
    }
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn item_count(&self) -> std::option::Option<i64> {
        self.item_count
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    pub fn index_arn(&self) -> std::option::Option<&str> {
        self.index_arn.as_deref()
    }
}
impl GlobalSecondaryIndexDescription {
    /// Creates a new builder-style object to manufacture [`GlobalSecondaryIndexDescription`](crate::types::GlobalSecondaryIndexDescription).
    pub fn builder() -> crate::types::builders::GlobalSecondaryIndexDescriptionBuilder {
        crate::types::builders::GlobalSecondaryIndexDescriptionBuilder::default()
    }
}

/// A builder for [`GlobalSecondaryIndexDescription`](crate::types::GlobalSecondaryIndexDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GlobalSecondaryIndexDescriptionBuilder {
    pub(crate) index_name: std::option::Option<std::string::String>,
    pub(crate) key_schema: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    pub(crate) projection: std::option::Option<crate::types::Projection>,
    pub(crate) index_status: std::option::Option<crate::types::IndexStatus>,
    pub(crate) backfilling: std::option::Option<bool>,
    pub(crate) provisioned_throughput:
        std::option::Option<crate::types::ProvisionedThroughputDescription>,
    pub(crate) index_size_bytes: std::option::Option<i64>,
    pub(crate) item_count: std::option::Option<i64>,
    pub(crate) index_arn: std::option::Option<std::string::String>,
}
impl GlobalSecondaryIndexDescriptionBuilder {
    /// <p>The name of the global secondary index.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_name = Some(input.into());
        self
    }
    /// <p>The name of the global secondary index.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_name = input;
        self
    }
    /// Appends an item to `key_schema`.
    ///
    /// To override the contents of this collection use [`set_key_schema`](Self::set_key_schema).
    ///
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    /// <ul>
    /// <li> <p> <code>HASH</code> - partition key</p> </li>
    /// <li> <p> <code>RANGE</code> - sort key</p> </li>
    /// </ul> <note>
    /// <p>The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    pub fn key_schema(mut self, input: crate::types::KeySchemaElement) -> Self {
        let mut v = self.key_schema.unwrap_or_default();
        v.push(input);
        self.key_schema = Some(v);
        self
    }
    /// <p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p>
    /// <ul>
    /// <li> <p> <code>HASH</code> - partition key</p> </li>
    /// <li> <p> <code>RANGE</code> - sort key</p> </li>
    /// </ul> <note>
    /// <p>The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    pub fn set_key_schema(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeySchemaElement>>,
    ) -> Self {
        self.key_schema = input;
        self
    }
    /// <p>Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. </p>
    pub fn projection(mut self, input: crate::types::Projection) -> Self {
        self.projection = Some(input);
        self
    }
    /// <p>Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. </p>
    pub fn set_projection(mut self, input: std::option::Option<crate::types::Projection>) -> Self {
        self.projection = input;
        self
    }
    /// <p>The current state of the global secondary index:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The index is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li>
    /// </ul>
    pub fn index_status(mut self, input: crate::types::IndexStatus) -> Self {
        self.index_status = Some(input);
        self
    }
    /// <p>The current state of the global secondary index:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The index is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The index is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The index is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The index is ready for use.</p> </li>
    /// </ul>
    pub fn set_index_status(
        mut self,
        input: std::option::Option<crate::types::IndexStatus>,
    ) -> Self {
        self.index_status = input;
        self
    }
    /// <p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and <code>Backfilling</code> is false.</p>
    /// <p>You can delete an index that is being created during the <code>Backfilling</code> phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is true. You can't delete the index that is being created when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false. </p> <note>
    /// <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p>
    /// </note>
    pub fn backfilling(mut self, input: bool) -> Self {
        self.backfilling = Some(input);
        self
    }
    /// <p>Indicates whether the index is currently backfilling. <i>Backfilling</i> is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and <code>Backfilling</code> is false.</p>
    /// <p>You can delete an index that is being created during the <code>Backfilling</code> phase when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is true. You can't delete the index that is being created when <code>IndexStatus</code> is set to CREATING and <code>Backfilling</code> is false. </p> <note>
    /// <p>For indexes that were created during a <code>CreateTable</code> operation, the <code>Backfilling</code> attribute does not appear in the <code>DescribeTable</code> output.</p>
    /// </note>
    pub fn set_backfilling(mut self, input: std::option::Option<bool>) -> Self {
        self.backfilling = input;
        self
    }
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn provisioned_throughput(
        mut self,
        input: crate::types::ProvisionedThroughputDescription,
    ) -> Self {
        self.provisioned_throughput = Some(input);
        self
    }
    /// <p>Represents the provisioned throughput settings for the specified global secondary index.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub fn set_provisioned_throughput(
        mut self,
        input: std::option::Option<crate::types::ProvisionedThroughputDescription>,
    ) -> Self {
        self.provisioned_throughput = input;
        self
    }
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn index_size_bytes(mut self, input: i64) -> Self {
        self.index_size_bytes = Some(input);
        self
    }
    /// <p>The total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn set_index_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.index_size_bytes = input;
        self
    }
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn item_count(mut self, input: i64) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>The number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.</p>
    pub fn set_item_count(mut self, input: std::option::Option<i64>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    pub fn index_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.index_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the index.</p>
    pub fn set_index_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.index_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`GlobalSecondaryIndexDescription`](crate::types::GlobalSecondaryIndexDescription).
    pub fn build(self) -> crate::types::GlobalSecondaryIndexDescription {
        crate::types::GlobalSecondaryIndexDescription {
            index_name: self.index_name,
            key_schema: self.key_schema,
            projection: self.projection,
            index_status: self.index_status,
            backfilling: self.backfilling,
            provisioned_throughput: self.provisioned_throughput,
            index_size_bytes: self.index_size_bytes,
            item_count: self.item_count,
            index_arn: self.index_arn,
        }
    }
}
