// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the properties of a replica.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Replica {
    /// <p>The Region where the replica needs to be created.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
}
impl Replica {
    /// <p>The Region where the replica needs to be created.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
}
impl Replica {
    /// Creates a new builder-style object to manufacture [`Replica`](crate::types::Replica).
    pub fn builder() -> crate::types::builders::ReplicaBuilder {
        crate::types::builders::ReplicaBuilder::default()
    }
}

/// A builder for [`Replica`](crate::types::Replica).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicaBuilder {
    pub(crate) region_name: std::option::Option<std::string::String>,
}
impl ReplicaBuilder {
    /// <p>The Region where the replica needs to be created.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>The Region where the replica needs to be created.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// Consumes the builder and constructs a [`Replica`](crate::types::Replica).
    pub fn build(self) -> crate::types::Replica {
        crate::types::Replica {
            region_name: self.region_name,
        }
    }
}
