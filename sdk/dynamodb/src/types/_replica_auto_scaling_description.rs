// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the auto scaling settings of the replica.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicaAutoScalingDescription {
    /// <p>The Region where the replica exists.</p>
    pub region_name: ::std::option::Option<::std::string::String>,
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    pub global_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription>>,
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub replica_provisioned_read_capacity_auto_scaling_settings: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub replica_provisioned_write_capacity_auto_scaling_settings: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    /// <p>The current state of the replica:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The replica is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The replica is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The replica is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The replica is ready for use.</p> </li>
    /// </ul>
    pub replica_status: ::std::option::Option<crate::types::ReplicaStatus>,
}
impl ReplicaAutoScalingDescription {
    /// <p>The Region where the replica exists.</p>
    pub fn region_name(&self) -> ::std::option::Option<&str> {
        self.region_name.as_deref()
    }
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.global_secondary_indexes.is_none()`.
    pub fn global_secondary_indexes(&self) -> &[crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription] {
        self.global_secondary_indexes.as_deref().unwrap_or_default()
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn replica_provisioned_read_capacity_auto_scaling_settings(&self) -> ::std::option::Option<&crate::types::AutoScalingSettingsDescription> {
        self.replica_provisioned_read_capacity_auto_scaling_settings.as_ref()
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn replica_provisioned_write_capacity_auto_scaling_settings(&self) -> ::std::option::Option<&crate::types::AutoScalingSettingsDescription> {
        self.replica_provisioned_write_capacity_auto_scaling_settings.as_ref()
    }
    /// <p>The current state of the replica:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The replica is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The replica is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The replica is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The replica is ready for use.</p> </li>
    /// </ul>
    pub fn replica_status(&self) -> ::std::option::Option<&crate::types::ReplicaStatus> {
        self.replica_status.as_ref()
    }
}
impl ReplicaAutoScalingDescription {
    /// Creates a new builder-style object to manufacture [`ReplicaAutoScalingDescription`](crate::types::ReplicaAutoScalingDescription).
    pub fn builder() -> crate::types::builders::ReplicaAutoScalingDescriptionBuilder {
        crate::types::builders::ReplicaAutoScalingDescriptionBuilder::default()
    }
}

/// A builder for [`ReplicaAutoScalingDescription`](crate::types::ReplicaAutoScalingDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicaAutoScalingDescriptionBuilder {
    pub(crate) region_name: ::std::option::Option<::std::string::String>,
    pub(crate) global_secondary_indexes: ::std::option::Option<::std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription>>,
    pub(crate) replica_provisioned_read_capacity_auto_scaling_settings: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    pub(crate) replica_provisioned_write_capacity_auto_scaling_settings: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    pub(crate) replica_status: ::std::option::Option<crate::types::ReplicaStatus>,
}
impl ReplicaAutoScalingDescriptionBuilder {
    /// <p>The Region where the replica exists.</p>
    pub fn region_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Region where the replica exists.</p>
    pub fn set_region_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// <p>The Region where the replica exists.</p>
    pub fn get_region_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_name
    }
    /// Appends an item to `global_secondary_indexes`.
    ///
    /// To override the contents of this collection use [`set_global_secondary_indexes`](Self::set_global_secondary_indexes).
    ///
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    pub fn global_secondary_indexes(mut self, input: crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription) -> Self {
        let mut v = self.global_secondary_indexes.unwrap_or_default();
        v.push(input);
        self.global_secondary_indexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    pub fn set_global_secondary_indexes(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription>>,
    ) -> Self {
        self.global_secondary_indexes = input;
        self
    }
    /// <p>Replica-specific global secondary index auto scaling settings.</p>
    pub fn get_global_secondary_indexes(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::ReplicaGlobalSecondaryIndexAutoScalingDescription>> {
        &self.global_secondary_indexes
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn replica_provisioned_read_capacity_auto_scaling_settings(mut self, input: crate::types::AutoScalingSettingsDescription) -> Self {
        self.replica_provisioned_read_capacity_auto_scaling_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn set_replica_provisioned_read_capacity_auto_scaling_settings(
        mut self,
        input: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    ) -> Self {
        self.replica_provisioned_read_capacity_auto_scaling_settings = input;
        self
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn get_replica_provisioned_read_capacity_auto_scaling_settings(
        &self,
    ) -> &::std::option::Option<crate::types::AutoScalingSettingsDescription> {
        &self.replica_provisioned_read_capacity_auto_scaling_settings
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn replica_provisioned_write_capacity_auto_scaling_settings(mut self, input: crate::types::AutoScalingSettingsDescription) -> Self {
        self.replica_provisioned_write_capacity_auto_scaling_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn set_replica_provisioned_write_capacity_auto_scaling_settings(
        mut self,
        input: ::std::option::Option<crate::types::AutoScalingSettingsDescription>,
    ) -> Self {
        self.replica_provisioned_write_capacity_auto_scaling_settings = input;
        self
    }
    /// <p>Represents the auto scaling settings for a global table or global secondary index.</p>
    pub fn get_replica_provisioned_write_capacity_auto_scaling_settings(
        &self,
    ) -> &::std::option::Option<crate::types::AutoScalingSettingsDescription> {
        &self.replica_provisioned_write_capacity_auto_scaling_settings
    }
    /// <p>The current state of the replica:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The replica is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The replica is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The replica is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The replica is ready for use.</p> </li>
    /// </ul>
    pub fn replica_status(mut self, input: crate::types::ReplicaStatus) -> Self {
        self.replica_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the replica:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The replica is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The replica is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The replica is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The replica is ready for use.</p> </li>
    /// </ul>
    pub fn set_replica_status(mut self, input: ::std::option::Option<crate::types::ReplicaStatus>) -> Self {
        self.replica_status = input;
        self
    }
    /// <p>The current state of the replica:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The replica is being created.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The replica is being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The replica is being deleted.</p> </li>
    /// <li> <p> <code>ACTIVE</code> - The replica is ready for use.</p> </li>
    /// </ul>
    pub fn get_replica_status(&self) -> &::std::option::Option<crate::types::ReplicaStatus> {
        &self.replica_status
    }
    /// Consumes the builder and constructs a [`ReplicaAutoScalingDescription`](crate::types::ReplicaAutoScalingDescription).
    pub fn build(self) -> crate::types::ReplicaAutoScalingDescription {
        crate::types::ReplicaAutoScalingDescription {
            region_name: self.region_name,
            global_secondary_indexes: self.global_secondary_indexes,
            replica_provisioned_read_capacity_auto_scaling_settings: self.replica_provisioned_read_capacity_auto_scaling_settings,
            replica_provisioned_write_capacity_auto_scaling_settings: self.replica_provisioned_write_capacity_auto_scaling_settings,
            replica_status: self.replica_status,
        }
    }
}
