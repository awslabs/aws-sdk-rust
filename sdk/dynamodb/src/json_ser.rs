// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_execute_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchExecuteStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.statements {
        let mut array_2 = object.key("Statements").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_batch_statement_request(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_get_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchGetItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.request_items {
        let mut object_6 = object.key("RequestItems").start_object();
        for (key_7, value_8) in var_5 {
            {
                let mut object_9 = object_6.key(key_7).start_object();
                crate::json_ser::serialize_structure_crate_model_keys_and_attributes(
                    &mut object_9,
                    value_8,
                )?;
                object_9.finish();
            }
        }
        object_6.finish();
    }
    if let Some(var_10) = &input.return_consumed_capacity {
        object.key("ReturnConsumedCapacity").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_write_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchWriteItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.request_items {
        let mut object_12 = object.key("RequestItems").start_object();
        for (key_13, value_14) in var_11 {
            {
                let mut array_15 = object_12.key(key_13).start_array();
                for item_16 in value_14 {
                    {
                        let mut object_17 = array_15.value().start_object();
                        crate::json_ser::serialize_structure_crate_model_write_request(
                            &mut object_17,
                            item_16,
                        )?;
                        object_17.finish();
                    }
                }
                array_15.finish();
            }
        }
        object_12.finish();
    }
    if let Some(var_18) = &input.return_consumed_capacity {
        object.key("ReturnConsumedCapacity").string(var_18.as_str());
    }
    if let Some(var_19) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.table_name {
        object.key("TableName").string(var_20);
    }
    if let Some(var_21) = &input.backup_name {
        object.key("BackupName").string(var_21);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_global_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGlobalTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_22) = &input.global_table_name {
        object.key("GlobalTableName").string(var_22);
    }
    if let Some(var_23) = &input.replication_group {
        let mut array_24 = object.key("ReplicationGroup").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.attribute_definitions {
        let mut array_28 = object.key("AttributeDefinitions").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_definition(
                    &mut object_30,
                    item_29,
                )?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    if let Some(var_31) = &input.table_name {
        object.key("TableName").string(var_31);
    }
    if let Some(var_32) = &input.key_schema {
        let mut array_33 = object.key("KeySchema").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_schema_element(
                    &mut object_35,
                    item_34,
                )?;
                object_35.finish();
            }
        }
        array_33.finish();
    }
    if let Some(var_36) = &input.local_secondary_indexes {
        let mut array_37 = object.key("LocalSecondaryIndexes").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_local_secondary_index(
                    &mut object_39,
                    item_38,
                )?;
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.global_secondary_indexes {
        let mut array_41 = object.key("GlobalSecondaryIndexes").start_array();
        for item_42 in var_40 {
            {
                let mut object_43 = array_41.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_secondary_index(
                    &mut object_43,
                    item_42,
                )?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    if let Some(var_44) = &input.billing_mode {
        object.key("BillingMode").string(var_44.as_str());
    }
    if let Some(var_45) = &input.provisioned_throughput {
        let mut object_46 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.stream_specification {
        let mut object_48 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_specification(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.sse_specification {
        let mut object_50 = object.key("SSESpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_sse_specification(&mut object_50, var_49)?;
        object_50.finish();
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_54, item_53)?;
                object_54.finish();
            }
        }
        array_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.backup_arn {
        object.key("BackupArn").string(var_55);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.table_name {
        object.key("TableName").string(var_56);
    }
    if let Some(var_57) = &input.key {
        let mut object_58 = object.key("Key").start_object();
        for (key_59, value_60) in var_57 {
            {
                let mut object_61 = object_58.key(key_59).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_61,
                    value_60,
                )?;
                object_61.finish();
            }
        }
        object_58.finish();
    }
    if let Some(var_62) = &input.expected {
        let mut object_63 = object.key("Expected").start_object();
        for (key_64, value_65) in var_62 {
            {
                let mut object_66 = object_63.key(key_64).start_object();
                crate::json_ser::serialize_structure_crate_model_expected_attribute_value(
                    &mut object_66,
                    value_65,
                )?;
                object_66.finish();
            }
        }
        object_63.finish();
    }
    if let Some(var_67) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_67.as_str());
    }
    if let Some(var_68) = &input.return_values {
        object.key("ReturnValues").string(var_68.as_str());
    }
    if let Some(var_69) = &input.return_consumed_capacity {
        object.key("ReturnConsumedCapacity").string(var_69.as_str());
    }
    if let Some(var_70) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_70.as_str());
    }
    if let Some(var_71) = &input.condition_expression {
        object.key("ConditionExpression").string(var_71);
    }
    if let Some(var_72) = &input.expression_attribute_names {
        let mut object_73 = object.key("ExpressionAttributeNames").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75);
            }
        }
        object_73.finish();
    }
    if let Some(var_76) = &input.expression_attribute_values {
        let mut object_77 = object.key("ExpressionAttributeValues").start_object();
        for (key_78, value_79) in var_76 {
            {
                let mut object_80 = object_77.key(key_78).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_80,
                    value_79,
                )?;
                object_80.finish();
            }
        }
        object_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.table_name {
        object.key("TableName").string(var_81);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.backup_arn {
        object.key("BackupArn").string(var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_continuous_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContinuousBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.table_name {
        object.key("TableName").string(var_83);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_contributor_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeContributorInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.table_name {
        object.key("TableName").string(var_84);
    }
    if let Some(var_85) = &input.index_name {
        object.key("IndexName").string(var_85);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.export_arn {
        object.key("ExportArn").string(var_86);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_global_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGlobalTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.global_table_name {
        object.key("GlobalTableName").string(var_87);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_global_table_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGlobalTableSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.global_table_name {
        object.key("GlobalTableName").string(var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_kinesis_streaming_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKinesisStreamingDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.table_name {
        object.key("TableName").string(var_89);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.table_name {
        object.key("TableName").string(var_90);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_table_replica_auto_scaling_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTableReplicaAutoScalingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.table_name {
        object.key("TableName").string(var_91);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_time_to_live_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTimeToLiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.table_name {
        object.key("TableName").string(var_92);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_kinesis_streaming_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableKinesisStreamingDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.table_name {
        object.key("TableName").string(var_93);
    }
    if let Some(var_94) = &input.stream_arn {
        object.key("StreamArn").string(var_94);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_kinesis_streaming_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableKinesisStreamingDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.table_name {
        object.key("TableName").string(var_95);
    }
    if let Some(var_96) = &input.stream_arn {
        object.key("StreamArn").string(var_96);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_statement_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteStatementInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.statement {
        object.key("Statement").string(var_97);
    }
    if let Some(var_98) = &input.parameters {
        let mut array_99 = object.key("Parameters").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_101,
                    item_100,
                )?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    if let Some(var_102) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_102);
    }
    if let Some(var_103) = &input.next_token {
        object.key("NextToken").string(var_103);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_execute_transaction_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExecuteTransactionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.transact_statements {
        let mut array_105 = object.key("TransactStatements").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_parameterized_statement(
                    &mut object_107,
                    item_106,
                )?;
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_108);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_export_table_to_point_in_time_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExportTableToPointInTimeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.table_arn {
        object.key("TableArn").string(var_109);
    }
    if let Some(var_110) = &input.export_time {
        object
            .key("ExportTime")
            .instant(var_110, aws_smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_111) = &input.client_token {
        object.key("ClientToken").string(var_111);
    }
    if let Some(var_112) = &input.s3_bucket {
        object.key("S3Bucket").string(var_112);
    }
    if let Some(var_113) = &input.s3_bucket_owner {
        object.key("S3BucketOwner").string(var_113);
    }
    if let Some(var_114) = &input.s3_prefix {
        object.key("S3Prefix").string(var_114);
    }
    if let Some(var_115) = &input.s3_sse_algorithm {
        object.key("S3SseAlgorithm").string(var_115.as_str());
    }
    if let Some(var_116) = &input.s3_sse_kms_key_id {
        object.key("S3SseKmsKeyId").string(var_116);
    }
    if let Some(var_117) = &input.export_format {
        object.key("ExportFormat").string(var_117.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_118) = &input.table_name {
        object.key("TableName").string(var_118);
    }
    if let Some(var_119) = &input.key {
        let mut object_120 = object.key("Key").start_object();
        for (key_121, value_122) in var_119 {
            {
                let mut object_123 = object_120.key(key_121).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_123,
                    value_122,
                )?;
                object_123.finish();
            }
        }
        object_120.finish();
    }
    if let Some(var_124) = &input.attributes_to_get {
        let mut array_125 = object.key("AttributesToGet").start_array();
        for item_126 in var_124 {
            {
                array_125.value().string(item_126);
            }
        }
        array_125.finish();
    }
    if let Some(var_127) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_127);
    }
    if let Some(var_128) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_128.as_str());
    }
    if let Some(var_129) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_129);
    }
    if let Some(var_130) = &input.expression_attribute_names {
        let mut object_131 = object.key("ExpressionAttributeNames").start_object();
        for (key_132, value_133) in var_130 {
            {
                object_131.key(key_132).string(value_133);
            }
        }
        object_131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.table_name {
        object.key("TableName").string(var_134);
    }
    if let Some(var_135) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_135).into()),
        );
    }
    if let Some(var_136) = &input.time_range_lower_bound {
        object
            .key("TimeRangeLowerBound")
            .instant(var_136, aws_smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_137) = &input.time_range_upper_bound {
        object
            .key("TimeRangeUpperBound")
            .instant(var_137, aws_smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_138) = &input.exclusive_start_backup_arn {
        object.key("ExclusiveStartBackupArn").string(var_138);
    }
    if let Some(var_139) = &input.backup_type {
        object.key("BackupType").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_contributor_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListContributorInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.table_name {
        object.key("TableName").string(var_140);
    }
    if let Some(var_141) = &input.next_token {
        object.key("NextToken").string(var_141);
    }
    if input.max_results != 0 {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.table_arn {
        object.key("TableArn").string(var_142);
    }
    if let Some(var_143) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_143).into()),
        );
    }
    if let Some(var_144) = &input.next_token {
        object.key("NextToken").string(var_144);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_global_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGlobalTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.exclusive_start_global_table_name {
        object.key("ExclusiveStartGlobalTableName").string(var_145);
    }
    if let Some(var_146) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    if let Some(var_147) = &input.region_name {
        object.key("RegionName").string(var_147);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tables_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTablesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.exclusive_start_table_name {
        object.key("ExclusiveStartTableName").string(var_148);
    }
    if let Some(var_149) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_149).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_of_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsOfResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.resource_arn {
        object.key("ResourceArn").string(var_150);
    }
    if let Some(var_151) = &input.next_token {
        object.key("NextToken").string(var_151);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.table_name {
        object.key("TableName").string(var_152);
    }
    if let Some(var_153) = &input.item {
        let mut object_154 = object.key("Item").start_object();
        for (key_155, value_156) in var_153 {
            {
                let mut object_157 = object_154.key(key_155).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_157,
                    value_156,
                )?;
                object_157.finish();
            }
        }
        object_154.finish();
    }
    if let Some(var_158) = &input.expected {
        let mut object_159 = object.key("Expected").start_object();
        for (key_160, value_161) in var_158 {
            {
                let mut object_162 = object_159.key(key_160).start_object();
                crate::json_ser::serialize_structure_crate_model_expected_attribute_value(
                    &mut object_162,
                    value_161,
                )?;
                object_162.finish();
            }
        }
        object_159.finish();
    }
    if let Some(var_163) = &input.return_values {
        object.key("ReturnValues").string(var_163.as_str());
    }
    if let Some(var_164) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_164.as_str());
    }
    if let Some(var_165) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_165.as_str());
    }
    if let Some(var_166) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_166.as_str());
    }
    if let Some(var_167) = &input.condition_expression {
        object.key("ConditionExpression").string(var_167);
    }
    if let Some(var_168) = &input.expression_attribute_names {
        let mut object_169 = object.key("ExpressionAttributeNames").start_object();
        for (key_170, value_171) in var_168 {
            {
                object_169.key(key_170).string(value_171);
            }
        }
        object_169.finish();
    }
    if let Some(var_172) = &input.expression_attribute_values {
        let mut object_173 = object.key("ExpressionAttributeValues").start_object();
        for (key_174, value_175) in var_172 {
            {
                let mut object_176 = object_173.key(key_174).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_176,
                    value_175,
                )?;
                object_176.finish();
            }
        }
        object_173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_query_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::QueryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.table_name {
        object.key("TableName").string(var_177);
    }
    if let Some(var_178) = &input.index_name {
        object.key("IndexName").string(var_178);
    }
    if let Some(var_179) = &input.select {
        object.key("Select").string(var_179.as_str());
    }
    if let Some(var_180) = &input.attributes_to_get {
        let mut array_181 = object.key("AttributesToGet").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
    if let Some(var_183) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    if let Some(var_184) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_184);
    }
    if let Some(var_185) = &input.key_conditions {
        let mut object_186 = object.key("KeyConditions").start_object();
        for (key_187, value_188) in var_185 {
            {
                let mut object_189 = object_186.key(key_187).start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_189,
                    value_188,
                )?;
                object_189.finish();
            }
        }
        object_186.finish();
    }
    if let Some(var_190) = &input.query_filter {
        let mut object_191 = object.key("QueryFilter").start_object();
        for (key_192, value_193) in var_190 {
            {
                let mut object_194 = object_191.key(key_192).start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_194,
                    value_193,
                )?;
                object_194.finish();
            }
        }
        object_191.finish();
    }
    if let Some(var_195) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_195.as_str());
    }
    if let Some(var_196) = &input.scan_index_forward {
        object.key("ScanIndexForward").boolean(*var_196);
    }
    if let Some(var_197) = &input.exclusive_start_key {
        let mut object_198 = object.key("ExclusiveStartKey").start_object();
        for (key_199, value_200) in var_197 {
            {
                let mut object_201 = object_198.key(key_199).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_201,
                    value_200,
                )?;
                object_201.finish();
            }
        }
        object_198.finish();
    }
    if let Some(var_202) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_202.as_str());
    }
    if let Some(var_203) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_203);
    }
    if let Some(var_204) = &input.filter_expression {
        object.key("FilterExpression").string(var_204);
    }
    if let Some(var_205) = &input.key_condition_expression {
        object.key("KeyConditionExpression").string(var_205);
    }
    if let Some(var_206) = &input.expression_attribute_names {
        let mut object_207 = object.key("ExpressionAttributeNames").start_object();
        for (key_208, value_209) in var_206 {
            {
                object_207.key(key_208).string(value_209);
            }
        }
        object_207.finish();
    }
    if let Some(var_210) = &input.expression_attribute_values {
        let mut object_211 = object.key("ExpressionAttributeValues").start_object();
        for (key_212, value_213) in var_210 {
            {
                let mut object_214 = object_211.key(key_212).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_214,
                    value_213,
                )?;
                object_214.finish();
            }
        }
        object_211.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_table_from_backup_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreTableFromBackupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.target_table_name {
        object.key("TargetTableName").string(var_215);
    }
    if let Some(var_216) = &input.backup_arn {
        object.key("BackupArn").string(var_216);
    }
    if let Some(var_217) = &input.billing_mode_override {
        object.key("BillingModeOverride").string(var_217.as_str());
    }
    if let Some(var_218) = &input.global_secondary_index_override {
        let mut array_219 = object.key("GlobalSecondaryIndexOverride").start_array();
        for item_220 in var_218 {
            {
                let mut object_221 = array_219.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_secondary_index(
                    &mut object_221,
                    item_220,
                )?;
                object_221.finish();
            }
        }
        array_219.finish();
    }
    if let Some(var_222) = &input.local_secondary_index_override {
        let mut array_223 = object.key("LocalSecondaryIndexOverride").start_array();
        for item_224 in var_222 {
            {
                let mut object_225 = array_223.value().start_object();
                crate::json_ser::serialize_structure_crate_model_local_secondary_index(
                    &mut object_225,
                    item_224,
                )?;
                object_225.finish();
            }
        }
        array_223.finish();
    }
    if let Some(var_226) = &input.provisioned_throughput_override {
        let mut object_227 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_227,
            var_226,
        )?;
        object_227.finish();
    }
    if let Some(var_228) = &input.sse_specification_override {
        let mut object_229 = object.key("SSESpecificationOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_sse_specification(
            &mut object_229,
            var_228,
        )?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_table_to_point_in_time_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreTableToPointInTimeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.source_table_arn {
        object.key("SourceTableArn").string(var_230);
    }
    if let Some(var_231) = &input.source_table_name {
        object.key("SourceTableName").string(var_231);
    }
    if let Some(var_232) = &input.target_table_name {
        object.key("TargetTableName").string(var_232);
    }
    if let Some(var_233) = &input.use_latest_restorable_time {
        object.key("UseLatestRestorableTime").boolean(*var_233);
    }
    if let Some(var_234) = &input.restore_date_time {
        object
            .key("RestoreDateTime")
            .instant(var_234, aws_smithy_types::instant::Format::EpochSeconds);
    }
    if let Some(var_235) = &input.billing_mode_override {
        object.key("BillingModeOverride").string(var_235.as_str());
    }
    if let Some(var_236) = &input.global_secondary_index_override {
        let mut array_237 = object.key("GlobalSecondaryIndexOverride").start_array();
        for item_238 in var_236 {
            {
                let mut object_239 = array_237.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_secondary_index(
                    &mut object_239,
                    item_238,
                )?;
                object_239.finish();
            }
        }
        array_237.finish();
    }
    if let Some(var_240) = &input.local_secondary_index_override {
        let mut array_241 = object.key("LocalSecondaryIndexOverride").start_array();
        for item_242 in var_240 {
            {
                let mut object_243 = array_241.value().start_object();
                crate::json_ser::serialize_structure_crate_model_local_secondary_index(
                    &mut object_243,
                    item_242,
                )?;
                object_243.finish();
            }
        }
        array_241.finish();
    }
    if let Some(var_244) = &input.provisioned_throughput_override {
        let mut object_245 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_245,
            var_244,
        )?;
        object_245.finish();
    }
    if let Some(var_246) = &input.sse_specification_override {
        let mut object_247 = object.key("SSESpecificationOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_sse_specification(
            &mut object_247,
            var_246,
        )?;
        object_247.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_scan_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ScanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.table_name {
        object.key("TableName").string(var_248);
    }
    if let Some(var_249) = &input.index_name {
        object.key("IndexName").string(var_249);
    }
    if let Some(var_250) = &input.attributes_to_get {
        let mut array_251 = object.key("AttributesToGet").start_array();
        for item_252 in var_250 {
            {
                array_251.value().string(item_252);
            }
        }
        array_251.finish();
    }
    if let Some(var_253) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    if let Some(var_254) = &input.select {
        object.key("Select").string(var_254.as_str());
    }
    if let Some(var_255) = &input.scan_filter {
        let mut object_256 = object.key("ScanFilter").start_object();
        for (key_257, value_258) in var_255 {
            {
                let mut object_259 = object_256.key(key_257).start_object();
                crate::json_ser::serialize_structure_crate_model_condition(
                    &mut object_259,
                    value_258,
                )?;
                object_259.finish();
            }
        }
        object_256.finish();
    }
    if let Some(var_260) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_260.as_str());
    }
    if let Some(var_261) = &input.exclusive_start_key {
        let mut object_262 = object.key("ExclusiveStartKey").start_object();
        for (key_263, value_264) in var_261 {
            {
                let mut object_265 = object_262.key(key_263).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_265,
                    value_264,
                )?;
                object_265.finish();
            }
        }
        object_262.finish();
    }
    if let Some(var_266) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_266.as_str());
    }
    if let Some(var_267) = &input.total_segments {
        object.key("TotalSegments").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_267).into()),
        );
    }
    if let Some(var_268) = &input.segment {
        object.key("Segment").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_268).into()),
        );
    }
    if let Some(var_269) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_269);
    }
    if let Some(var_270) = &input.filter_expression {
        object.key("FilterExpression").string(var_270);
    }
    if let Some(var_271) = &input.expression_attribute_names {
        let mut object_272 = object.key("ExpressionAttributeNames").start_object();
        for (key_273, value_274) in var_271 {
            {
                object_272.key(key_273).string(value_274);
            }
        }
        object_272.finish();
    }
    if let Some(var_275) = &input.expression_attribute_values {
        let mut object_276 = object.key("ExpressionAttributeValues").start_object();
        for (key_277, value_278) in var_275 {
            {
                let mut object_279 = object_276.key(key_277).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_279,
                    value_278,
                )?;
                object_279.finish();
            }
        }
        object_276.finish();
    }
    if let Some(var_280) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_280);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_281) = &input.resource_arn {
        object.key("ResourceArn").string(var_281);
    }
    if let Some(var_282) = &input.tags {
        let mut array_283 = object.key("Tags").start_array();
        for item_284 in var_282 {
            {
                let mut object_285 = array_283.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_285, item_284)?;
                object_285.finish();
            }
        }
        array_283.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transact_get_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransactGetItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_286) = &input.transact_items {
        let mut array_287 = object.key("TransactItems").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_transact_get_item(
                    &mut object_289,
                    item_288,
                )?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    if let Some(var_290) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_290.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transact_write_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransactWriteItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_291) = &input.transact_items {
        let mut array_292 = object.key("TransactItems").start_array();
        for item_293 in var_291 {
            {
                let mut object_294 = array_292.value().start_object();
                crate::json_ser::serialize_structure_crate_model_transact_write_item(
                    &mut object_294,
                    item_293,
                )?;
                object_294.finish();
            }
        }
        array_292.finish();
    }
    if let Some(var_295) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_295.as_str());
    }
    if let Some(var_296) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_296.as_str());
    }
    if let Some(var_297) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_297);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.resource_arn {
        object.key("ResourceArn").string(var_298);
    }
    if let Some(var_299) = &input.tag_keys {
        let mut array_300 = object.key("TagKeys").start_array();
        for item_301 in var_299 {
            {
                array_300.value().string(item_301);
            }
        }
        array_300.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_continuous_backups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContinuousBackupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.table_name {
        object.key("TableName").string(var_302);
    }
    if let Some(var_303) = &input.point_in_time_recovery_specification {
        let mut object_304 = object
            .key("PointInTimeRecoverySpecification")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_point_in_time_recovery_specification(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_contributor_insights_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateContributorInsightsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_305) = &input.table_name {
        object.key("TableName").string(var_305);
    }
    if let Some(var_306) = &input.index_name {
        object.key("IndexName").string(var_306);
    }
    if let Some(var_307) = &input.contributor_insights_action {
        object
            .key("ContributorInsightsAction")
            .string(var_307.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_global_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_308) = &input.global_table_name {
        object.key("GlobalTableName").string(var_308);
    }
    if let Some(var_309) = &input.replica_updates {
        let mut array_310 = object.key("ReplicaUpdates").start_array();
        for item_311 in var_309 {
            {
                let mut object_312 = array_310.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_update(
                    &mut object_312,
                    item_311,
                )?;
                object_312.finish();
            }
        }
        array_310.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_global_table_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGlobalTableSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.global_table_name {
        object.key("GlobalTableName").string(var_313);
    }
    if let Some(var_314) = &input.global_table_billing_mode {
        object
            .key("GlobalTableBillingMode")
            .string(var_314.as_str());
    }
    if let Some(var_315) = &input.global_table_provisioned_write_capacity_units {
        object
            .key("GlobalTableProvisionedWriteCapacityUnits")
            .number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*var_315).into()),
            );
    }
    if let Some(var_316) =
        &input.global_table_provisioned_write_capacity_auto_scaling_settings_update
    {
        let mut object_317 = object
            .key("GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_317,
            var_316,
        )?;
        object_317.finish();
    }
    if let Some(var_318) = &input.global_table_global_secondary_index_settings_update {
        let mut array_319 = object
            .key("GlobalTableGlobalSecondaryIndexSettingsUpdate")
            .start_array();
        for item_320 in var_318 {
            {
                let mut object_321 = array_319.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_table_global_secondary_index_settings_update(&mut object_321, item_320)?;
                object_321.finish();
            }
        }
        array_319.finish();
    }
    if let Some(var_322) = &input.replica_settings_update {
        let mut array_323 = object.key("ReplicaSettingsUpdate").start_array();
        for item_324 in var_322 {
            {
                let mut object_325 = array_323.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_settings_update(
                    &mut object_325,
                    item_324,
                )?;
                object_325.finish();
            }
        }
        array_323.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_326) = &input.table_name {
        object.key("TableName").string(var_326);
    }
    if let Some(var_327) = &input.key {
        let mut object_328 = object.key("Key").start_object();
        for (key_329, value_330) in var_327 {
            {
                let mut object_331 = object_328.key(key_329).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_331,
                    value_330,
                )?;
                object_331.finish();
            }
        }
        object_328.finish();
    }
    if let Some(var_332) = &input.attribute_updates {
        let mut object_333 = object.key("AttributeUpdates").start_object();
        for (key_334, value_335) in var_332 {
            {
                let mut object_336 = object_333.key(key_334).start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_value_update(
                    &mut object_336,
                    value_335,
                )?;
                object_336.finish();
            }
        }
        object_333.finish();
    }
    if let Some(var_337) = &input.expected {
        let mut object_338 = object.key("Expected").start_object();
        for (key_339, value_340) in var_337 {
            {
                let mut object_341 = object_338.key(key_339).start_object();
                crate::json_ser::serialize_structure_crate_model_expected_attribute_value(
                    &mut object_341,
                    value_340,
                )?;
                object_341.finish();
            }
        }
        object_338.finish();
    }
    if let Some(var_342) = &input.conditional_operator {
        object.key("ConditionalOperator").string(var_342.as_str());
    }
    if let Some(var_343) = &input.return_values {
        object.key("ReturnValues").string(var_343.as_str());
    }
    if let Some(var_344) = &input.return_consumed_capacity {
        object
            .key("ReturnConsumedCapacity")
            .string(var_344.as_str());
    }
    if let Some(var_345) = &input.return_item_collection_metrics {
        object
            .key("ReturnItemCollectionMetrics")
            .string(var_345.as_str());
    }
    if let Some(var_346) = &input.update_expression {
        object.key("UpdateExpression").string(var_346);
    }
    if let Some(var_347) = &input.condition_expression {
        object.key("ConditionExpression").string(var_347);
    }
    if let Some(var_348) = &input.expression_attribute_names {
        let mut object_349 = object.key("ExpressionAttributeNames").start_object();
        for (key_350, value_351) in var_348 {
            {
                object_349.key(key_350).string(value_351);
            }
        }
        object_349.finish();
    }
    if let Some(var_352) = &input.expression_attribute_values {
        let mut object_353 = object.key("ExpressionAttributeValues").start_object();
        for (key_354, value_355) in var_352 {
            {
                let mut object_356 = object_353.key(key_354).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_356,
                    value_355,
                )?;
                object_356.finish();
            }
        }
        object_353.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_357) = &input.attribute_definitions {
        let mut array_358 = object.key("AttributeDefinitions").start_array();
        for item_359 in var_357 {
            {
                let mut object_360 = array_358.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_definition(
                    &mut object_360,
                    item_359,
                )?;
                object_360.finish();
            }
        }
        array_358.finish();
    }
    if let Some(var_361) = &input.table_name {
        object.key("TableName").string(var_361);
    }
    if let Some(var_362) = &input.billing_mode {
        object.key("BillingMode").string(var_362.as_str());
    }
    if let Some(var_363) = &input.provisioned_throughput {
        let mut object_364 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_364,
            var_363,
        )?;
        object_364.finish();
    }
    if let Some(var_365) = &input.global_secondary_index_updates {
        let mut array_366 = object.key("GlobalSecondaryIndexUpdates").start_array();
        for item_367 in var_365 {
            {
                let mut object_368 = array_366.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_secondary_index_update(
                    &mut object_368,
                    item_367,
                )?;
                object_368.finish();
            }
        }
        array_366.finish();
    }
    if let Some(var_369) = &input.stream_specification {
        let mut object_370 = object.key("StreamSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_stream_specification(
            &mut object_370,
            var_369,
        )?;
        object_370.finish();
    }
    if let Some(var_371) = &input.sse_specification {
        let mut object_372 = object.key("SSESpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_sse_specification(
            &mut object_372,
            var_371,
        )?;
        object_372.finish();
    }
    if let Some(var_373) = &input.replica_updates {
        let mut array_374 = object.key("ReplicaUpdates").start_array();
        for item_375 in var_373 {
            {
                let mut object_376 = array_374.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_group_update(
                    &mut object_376,
                    item_375,
                )?;
                object_376.finish();
            }
        }
        array_374.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_table_replica_auto_scaling_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTableReplicaAutoScalingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_377) = &input.global_secondary_index_updates {
        let mut array_378 = object.key("GlobalSecondaryIndexUpdates").start_array();
        for item_379 in var_377 {
            {
                let mut object_380 = array_378.value().start_object();
                crate::json_ser::serialize_structure_crate_model_global_secondary_index_auto_scaling_update(&mut object_380, item_379)?;
                object_380.finish();
            }
        }
        array_378.finish();
    }
    if let Some(var_381) = &input.table_name {
        object.key("TableName").string(var_381);
    }
    if let Some(var_382) = &input.provisioned_write_capacity_auto_scaling_update {
        let mut object_383 = object
            .key("ProvisionedWriteCapacityAutoScalingUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_383,
            var_382,
        )?;
        object_383.finish();
    }
    if let Some(var_384) = &input.replica_updates {
        let mut array_385 = object.key("ReplicaUpdates").start_array();
        for item_386 in var_384 {
            {
                let mut object_387 = array_385.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_auto_scaling_update(
                    &mut object_387,
                    item_386,
                )?;
                object_387.finish();
            }
        }
        array_385.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_time_to_live_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTimeToLiveInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_388) = &input.table_name {
        object.key("TableName").string(var_388);
    }
    if let Some(var_389) = &input.time_to_live_specification {
        let mut object_390 = object.key("TimeToLiveSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_time_to_live_specification(
            &mut object_390,
            var_389,
        )?;
        object_390.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_batch_statement_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.statement {
        object.key("Statement").string(var_391);
    }
    if let Some(var_392) = &input.parameters {
        let mut array_393 = object.key("Parameters").start_array();
        for item_394 in var_392 {
            {
                let mut object_395 = array_393.value().start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_395,
                    item_394,
                )?;
                object_395.finish();
            }
        }
        array_393.finish();
    }
    if let Some(var_396) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_396);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_keys_and_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeysAndAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_397) = &input.keys {
        let mut array_398 = object.key("Keys").start_array();
        for item_399 in var_397 {
            {
                let mut object_400 = array_398.value().start_object();
                for (key_401, value_402) in item_399 {
                    {
                        let mut object_403 = object_400.key(key_401).start_object();
                        crate::json_ser::serialize_union_crate_model_attribute_value(
                            &mut object_403,
                            value_402,
                        )?;
                        object_403.finish();
                    }
                }
                object_400.finish();
            }
        }
        array_398.finish();
    }
    if let Some(var_404) = &input.attributes_to_get {
        let mut array_405 = object.key("AttributesToGet").start_array();
        for item_406 in var_404 {
            {
                array_405.value().string(item_406);
            }
        }
        array_405.finish();
    }
    if let Some(var_407) = &input.consistent_read {
        object.key("ConsistentRead").boolean(*var_407);
    }
    if let Some(var_408) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_408);
    }
    if let Some(var_409) = &input.expression_attribute_names {
        let mut object_410 = object.key("ExpressionAttributeNames").start_object();
        for (key_411, value_412) in var_409 {
            {
                object_410.key(key_411).string(value_412);
            }
        }
        object_410.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_write_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WriteRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.put_request {
        let mut object_414 = object.key("PutRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_put_request(&mut object_414, var_413)?;
        object_414.finish();
    }
    if let Some(var_415) = &input.delete_request {
        let mut object_416 = object.key("DeleteRequest").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_request(&mut object_416, var_415)?;
        object_416.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Replica,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_417) = &input.region_name {
        object.key("RegionName").string(var_417);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_418) = &input.attribute_name {
        object.key("AttributeName").string(var_418);
    }
    if let Some(var_419) = &input.attribute_type {
        object.key("AttributeType").string(var_419.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_schema_element(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeySchemaElement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.attribute_name {
        object.key("AttributeName").string(var_420);
    }
    if let Some(var_421) = &input.key_type {
        object.key("KeyType").string(var_421.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_local_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LocalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_422) = &input.index_name {
        object.key("IndexName").string(var_422);
    }
    if let Some(var_423) = &input.key_schema {
        let mut array_424 = object.key("KeySchema").start_array();
        for item_425 in var_423 {
            {
                let mut object_426 = array_424.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_schema_element(
                    &mut object_426,
                    item_425,
                )?;
                object_426.finish();
            }
        }
        array_424.finish();
    }
    if let Some(var_427) = &input.projection {
        let mut object_428 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_projection(&mut object_428, var_427)?;
        object_428.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.index_name {
        object.key("IndexName").string(var_429);
    }
    if let Some(var_430) = &input.key_schema {
        let mut array_431 = object.key("KeySchema").start_array();
        for item_432 in var_430 {
            {
                let mut object_433 = array_431.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_schema_element(
                    &mut object_433,
                    item_432,
                )?;
                object_433.finish();
            }
        }
        array_431.finish();
    }
    if let Some(var_434) = &input.projection {
        let mut object_435 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_projection(&mut object_435, var_434)?;
        object_435.finish();
    }
    if let Some(var_436) = &input.provisioned_throughput {
        let mut object_437 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioned_throughput(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisionedThroughput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.read_capacity_units {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    if let Some(var_439) = &input.write_capacity_units {
        object.key("WriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_440) = &input.stream_enabled {
        object.key("StreamEnabled").boolean(*var_440);
    }
    if let Some(var_441) = &input.stream_view_type {
        object.key("StreamViewType").string(var_441.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sse_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SseSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_442) = &input.enabled {
        object.key("Enabled").boolean(*var_442);
    }
    if let Some(var_443) = &input.sse_type {
        object.key("SSEType").string(var_443.as_str());
    }
    if let Some(var_444) = &input.kms_master_key_id {
        object.key("KMSMasterKeyId").string(var_444);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_445) = &input.key {
        object.key("Key").string(var_445);
    }
    if let Some(var_446) = &input.value {
        object.key("Value").string(var_446);
    }
    Ok(())
}

pub fn serialize_union_crate_model_attribute_value(
    object_61: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AttributeValue::S(inner) => {
            object_61.key("S").string(inner);
        }
        crate::model::AttributeValue::N(inner) => {
            object_61.key("N").string(inner);
        }
        crate::model::AttributeValue::B(inner) => {
            object_61
                .key("B")
                .string_unchecked(&aws_smithy_types::base64::encode(inner));
        }
        crate::model::AttributeValue::Ss(inner) => {
            let mut array_447 = object_61.key("SS").start_array();
            for item_448 in inner {
                {
                    array_447.value().string(item_448);
                }
            }
            array_447.finish();
        }
        crate::model::AttributeValue::Ns(inner) => {
            let mut array_449 = object_61.key("NS").start_array();
            for item_450 in inner {
                {
                    array_449.value().string(item_450);
                }
            }
            array_449.finish();
        }
        crate::model::AttributeValue::Bs(inner) => {
            let mut array_451 = object_61.key("BS").start_array();
            for item_452 in inner {
                {
                    array_451
                        .value()
                        .string_unchecked(&aws_smithy_types::base64::encode(item_452));
                }
            }
            array_451.finish();
        }
        crate::model::AttributeValue::M(inner) => {
            let mut object_453 = object_61.key("M").start_object();
            for (key_454, value_455) in inner {
                {
                    let mut object_456 = object_453.key(key_454).start_object();
                    crate::json_ser::serialize_union_crate_model_attribute_value(
                        &mut object_456,
                        value_455,
                    )?;
                    object_456.finish();
                }
            }
            object_453.finish();
        }
        crate::model::AttributeValue::L(inner) => {
            let mut array_457 = object_61.key("L").start_array();
            for item_458 in inner {
                {
                    let mut object_459 = array_457.value().start_object();
                    crate::json_ser::serialize_union_crate_model_attribute_value(
                        &mut object_459,
                        item_458,
                    )?;
                    object_459.finish();
                }
            }
            array_457.finish();
        }
        crate::model::AttributeValue::Null(inner) => {
            object_61.key("NULL").boolean(*inner);
        }
        crate::model::AttributeValue::Bool(inner) => {
            object_61.key("BOOL").boolean(*inner);
        }
        crate::model::AttributeValue::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("AttributeValue"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_expected_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExpectedAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.value {
        let mut object_461 = object.key("Value").start_object();
        crate::json_ser::serialize_union_crate_model_attribute_value(&mut object_461, var_460)?;
        object_461.finish();
    }
    if let Some(var_462) = &input.exists {
        object.key("Exists").boolean(*var_462);
    }
    if let Some(var_463) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_463.as_str());
    }
    if let Some(var_464) = &input.attribute_value_list {
        let mut array_465 = object.key("AttributeValueList").start_array();
        for item_466 in var_464 {
            {
                let mut object_467 = array_465.value().start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_467,
                    item_466,
                )?;
                object_467.finish();
            }
        }
        array_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameterized_statement(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterizedStatement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_468) = &input.statement {
        object.key("Statement").string(var_468);
    }
    if let Some(var_469) = &input.parameters {
        let mut array_470 = object.key("Parameters").start_array();
        for item_471 in var_469 {
            {
                let mut object_472 = array_470.value().start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_472,
                    item_471,
                )?;
                object_472.finish();
            }
        }
        array_470.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Condition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_473) = &input.attribute_value_list {
        let mut array_474 = object.key("AttributeValueList").start_array();
        for item_475 in var_473 {
            {
                let mut object_476 = array_474.value().start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_476,
                    item_475,
                )?;
                object_476.finish();
            }
        }
        array_474.finish();
    }
    if let Some(var_477) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_477.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transact_get_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransactGetItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_478) = &input.get {
        let mut object_479 = object.key("Get").start_object();
        crate::json_ser::serialize_structure_crate_model_get(&mut object_479, var_478)?;
        object_479.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_transact_write_item(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TransactWriteItem,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_480) = &input.condition_check {
        let mut object_481 = object.key("ConditionCheck").start_object();
        crate::json_ser::serialize_structure_crate_model_condition_check(&mut object_481, var_480)?;
        object_481.finish();
    }
    if let Some(var_482) = &input.put {
        let mut object_483 = object.key("Put").start_object();
        crate::json_ser::serialize_structure_crate_model_put(&mut object_483, var_482)?;
        object_483.finish();
    }
    if let Some(var_484) = &input.delete {
        let mut object_485 = object.key("Delete").start_object();
        crate::json_ser::serialize_structure_crate_model_delete(&mut object_485, var_484)?;
        object_485.finish();
    }
    if let Some(var_486) = &input.update {
        let mut object_487 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update(&mut object_487, var_486)?;
        object_487.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_point_in_time_recovery_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PointInTimeRecoverySpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_488) = &input.point_in_time_recovery_enabled {
        object.key("PointInTimeRecoveryEnabled").boolean(*var_488);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_489) = &input.create {
        let mut object_490 = object.key("Create").start_object();
        crate::json_ser::serialize_structure_crate_model_create_replica_action(
            &mut object_490,
            var_489,
        )?;
        object_490.finish();
    }
    if let Some(var_491) = &input.delete {
        let mut object_492 = object.key("Delete").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_replica_action(
            &mut object_492,
            var_491,
        )?;
        object_492.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_settings_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingSettingsUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_493) = &input.minimum_units {
        object.key("MinimumUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_493).into()),
        );
    }
    if let Some(var_494) = &input.maximum_units {
        object.key("MaximumUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_494).into()),
        );
    }
    if let Some(var_495) = &input.auto_scaling_disabled {
        object.key("AutoScalingDisabled").boolean(*var_495);
    }
    if let Some(var_496) = &input.auto_scaling_role_arn {
        object.key("AutoScalingRoleArn").string(var_496);
    }
    if let Some(var_497) = &input.scaling_policy_update {
        let mut object_498 = object.key("ScalingPolicyUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_policy_update(
            &mut object_498,
            var_497,
        )?;
        object_498.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_global_table_global_secondary_index_settings_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlobalTableGlobalSecondaryIndexSettingsUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_499) = &input.index_name {
        object.key("IndexName").string(var_499);
    }
    if let Some(var_500) = &input.provisioned_write_capacity_units {
        object.key("ProvisionedWriteCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_500).into()),
        );
    }
    if let Some(var_501) = &input.provisioned_write_capacity_auto_scaling_settings_update {
        let mut object_502 = object
            .key("ProvisionedWriteCapacityAutoScalingSettingsUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_502,
            var_501,
        )?;
        object_502.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_settings_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaSettingsUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_503) = &input.region_name {
        object.key("RegionName").string(var_503);
    }
    if let Some(var_504) = &input.replica_provisioned_read_capacity_units {
        object.key("ReplicaProvisionedReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_504).into()),
        );
    }
    if let Some(var_505) = &input.replica_provisioned_read_capacity_auto_scaling_settings_update {
        let mut object_506 = object
            .key("ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_506,
            var_505,
        )?;
        object_506.finish();
    }
    if let Some(var_507) = &input.replica_global_secondary_index_settings_update {
        let mut array_508 = object
            .key("ReplicaGlobalSecondaryIndexSettingsUpdate")
            .start_array();
        for item_509 in var_507 {
            {
                let mut object_510 = array_508.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_global_secondary_index_settings_update(&mut object_510, item_509)?;
                object_510.finish();
            }
        }
        array_508.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_value_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeValueUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_511) = &input.value {
        let mut object_512 = object.key("Value").start_object();
        crate::json_ser::serialize_union_crate_model_attribute_value(&mut object_512, var_511)?;
        object_512.finish();
    }
    if let Some(var_513) = &input.action {
        object.key("Action").string(var_513.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_global_secondary_index_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlobalSecondaryIndexUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_514) = &input.update {
        let mut object_515 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update_global_secondary_index_action(
            &mut object_515,
            var_514,
        )?;
        object_515.finish();
    }
    if let Some(var_516) = &input.create {
        let mut object_517 = object.key("Create").start_object();
        crate::json_ser::serialize_structure_crate_model_create_global_secondary_index_action(
            &mut object_517,
            var_516,
        )?;
        object_517.finish();
    }
    if let Some(var_518) = &input.delete {
        let mut object_519 = object.key("Delete").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_global_secondary_index_action(
            &mut object_519,
            var_518,
        )?;
        object_519.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replication_group_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationGroupUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.create {
        let mut object_521 = object.key("Create").start_object();
        crate::json_ser::serialize_structure_crate_model_create_replication_group_member_action(
            &mut object_521,
            var_520,
        )?;
        object_521.finish();
    }
    if let Some(var_522) = &input.update {
        let mut object_523 = object.key("Update").start_object();
        crate::json_ser::serialize_structure_crate_model_update_replication_group_member_action(
            &mut object_523,
            var_522,
        )?;
        object_523.finish();
    }
    if let Some(var_524) = &input.delete {
        let mut object_525 = object.key("Delete").start_object();
        crate::json_ser::serialize_structure_crate_model_delete_replication_group_member_action(
            &mut object_525,
            var_524,
        )?;
        object_525.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_global_secondary_index_auto_scaling_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlobalSecondaryIndexAutoScalingUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.index_name {
        object.key("IndexName").string(var_526);
    }
    if let Some(var_527) = &input.provisioned_write_capacity_auto_scaling_update {
        let mut object_528 = object
            .key("ProvisionedWriteCapacityAutoScalingUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_528,
            var_527,
        )?;
        object_528.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_auto_scaling_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaAutoScalingUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_529) = &input.region_name {
        object.key("RegionName").string(var_529);
    }
    if let Some(var_530) = &input.replica_global_secondary_index_updates {
        let mut array_531 = object
            .key("ReplicaGlobalSecondaryIndexUpdates")
            .start_array();
        for item_532 in var_530 {
            {
                let mut object_533 = array_531.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_global_secondary_index_auto_scaling_update(&mut object_533, item_532)?;
                object_533.finish();
            }
        }
        array_531.finish();
    }
    if let Some(var_534) = &input.replica_provisioned_read_capacity_auto_scaling_update {
        let mut object_535 = object
            .key("ReplicaProvisionedReadCapacityAutoScalingUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_535,
            var_534,
        )?;
        object_535.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_time_to_live_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeToLiveSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_536) = &input.enabled {
        object.key("Enabled").boolean(*var_536);
    }
    if let Some(var_537) = &input.attribute_name {
        object.key("AttributeName").string(var_537);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_538) = &input.item {
        let mut object_539 = object.key("Item").start_object();
        for (key_540, value_541) in var_538 {
            {
                let mut object_542 = object_539.key(key_540).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_542,
                    value_541,
                )?;
                object_542.finish();
            }
        }
        object_539.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_543) = &input.key {
        let mut object_544 = object.key("Key").start_object();
        for (key_545, value_546) in var_543 {
            {
                let mut object_547 = object_544.key(key_545).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_547,
                    value_546,
                )?;
                object_547.finish();
            }
        }
        object_544.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_projection(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Projection,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_548) = &input.projection_type {
        object.key("ProjectionType").string(var_548.as_str());
    }
    if let Some(var_549) = &input.non_key_attributes {
        let mut array_550 = object.key("NonKeyAttributes").start_array();
        for item_551 in var_549 {
            {
                array_550.value().string(item_551);
            }
        }
        array_550.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_get(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Get,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_552) = &input.key {
        let mut object_553 = object.key("Key").start_object();
        for (key_554, value_555) in var_552 {
            {
                let mut object_556 = object_553.key(key_554).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_556,
                    value_555,
                )?;
                object_556.finish();
            }
        }
        object_553.finish();
    }
    if let Some(var_557) = &input.table_name {
        object.key("TableName").string(var_557);
    }
    if let Some(var_558) = &input.projection_expression {
        object.key("ProjectionExpression").string(var_558);
    }
    if let Some(var_559) = &input.expression_attribute_names {
        let mut object_560 = object.key("ExpressionAttributeNames").start_object();
        for (key_561, value_562) in var_559 {
            {
                object_560.key(key_561).string(value_562);
            }
        }
        object_560.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_condition_check(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConditionCheck,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_563) = &input.key {
        let mut object_564 = object.key("Key").start_object();
        for (key_565, value_566) in var_563 {
            {
                let mut object_567 = object_564.key(key_565).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_567,
                    value_566,
                )?;
                object_567.finish();
            }
        }
        object_564.finish();
    }
    if let Some(var_568) = &input.table_name {
        object.key("TableName").string(var_568);
    }
    if let Some(var_569) = &input.condition_expression {
        object.key("ConditionExpression").string(var_569);
    }
    if let Some(var_570) = &input.expression_attribute_names {
        let mut object_571 = object.key("ExpressionAttributeNames").start_object();
        for (key_572, value_573) in var_570 {
            {
                object_571.key(key_572).string(value_573);
            }
        }
        object_571.finish();
    }
    if let Some(var_574) = &input.expression_attribute_values {
        let mut object_575 = object.key("ExpressionAttributeValues").start_object();
        for (key_576, value_577) in var_574 {
            {
                let mut object_578 = object_575.key(key_576).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_578,
                    value_577,
                )?;
                object_578.finish();
            }
        }
        object_575.finish();
    }
    if let Some(var_579) = &input.return_values_on_condition_check_failure {
        object
            .key("ReturnValuesOnConditionCheckFailure")
            .string(var_579.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Put,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_580) = &input.item {
        let mut object_581 = object.key("Item").start_object();
        for (key_582, value_583) in var_580 {
            {
                let mut object_584 = object_581.key(key_582).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_584,
                    value_583,
                )?;
                object_584.finish();
            }
        }
        object_581.finish();
    }
    if let Some(var_585) = &input.table_name {
        object.key("TableName").string(var_585);
    }
    if let Some(var_586) = &input.condition_expression {
        object.key("ConditionExpression").string(var_586);
    }
    if let Some(var_587) = &input.expression_attribute_names {
        let mut object_588 = object.key("ExpressionAttributeNames").start_object();
        for (key_589, value_590) in var_587 {
            {
                object_588.key(key_589).string(value_590);
            }
        }
        object_588.finish();
    }
    if let Some(var_591) = &input.expression_attribute_values {
        let mut object_592 = object.key("ExpressionAttributeValues").start_object();
        for (key_593, value_594) in var_591 {
            {
                let mut object_595 = object_592.key(key_593).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_595,
                    value_594,
                )?;
                object_595.finish();
            }
        }
        object_592.finish();
    }
    if let Some(var_596) = &input.return_values_on_condition_check_failure {
        object
            .key("ReturnValuesOnConditionCheckFailure")
            .string(var_596.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Delete,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_597) = &input.key {
        let mut object_598 = object.key("Key").start_object();
        for (key_599, value_600) in var_597 {
            {
                let mut object_601 = object_598.key(key_599).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_601,
                    value_600,
                )?;
                object_601.finish();
            }
        }
        object_598.finish();
    }
    if let Some(var_602) = &input.table_name {
        object.key("TableName").string(var_602);
    }
    if let Some(var_603) = &input.condition_expression {
        object.key("ConditionExpression").string(var_603);
    }
    if let Some(var_604) = &input.expression_attribute_names {
        let mut object_605 = object.key("ExpressionAttributeNames").start_object();
        for (key_606, value_607) in var_604 {
            {
                object_605.key(key_606).string(value_607);
            }
        }
        object_605.finish();
    }
    if let Some(var_608) = &input.expression_attribute_values {
        let mut object_609 = object.key("ExpressionAttributeValues").start_object();
        for (key_610, value_611) in var_608 {
            {
                let mut object_612 = object_609.key(key_610).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_612,
                    value_611,
                )?;
                object_612.finish();
            }
        }
        object_609.finish();
    }
    if let Some(var_613) = &input.return_values_on_condition_check_failure {
        object
            .key("ReturnValuesOnConditionCheckFailure")
            .string(var_613.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Update,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.key {
        let mut object_615 = object.key("Key").start_object();
        for (key_616, value_617) in var_614 {
            {
                let mut object_618 = object_615.key(key_616).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_618,
                    value_617,
                )?;
                object_618.finish();
            }
        }
        object_615.finish();
    }
    if let Some(var_619) = &input.update_expression {
        object.key("UpdateExpression").string(var_619);
    }
    if let Some(var_620) = &input.table_name {
        object.key("TableName").string(var_620);
    }
    if let Some(var_621) = &input.condition_expression {
        object.key("ConditionExpression").string(var_621);
    }
    if let Some(var_622) = &input.expression_attribute_names {
        let mut object_623 = object.key("ExpressionAttributeNames").start_object();
        for (key_624, value_625) in var_622 {
            {
                object_623.key(key_624).string(value_625);
            }
        }
        object_623.finish();
    }
    if let Some(var_626) = &input.expression_attribute_values {
        let mut object_627 = object.key("ExpressionAttributeValues").start_object();
        for (key_628, value_629) in var_626 {
            {
                let mut object_630 = object_627.key(key_628).start_object();
                crate::json_ser::serialize_union_crate_model_attribute_value(
                    &mut object_630,
                    value_629,
                )?;
                object_630.finish();
            }
        }
        object_627.finish();
    }
    if let Some(var_631) = &input.return_values_on_condition_check_failure {
        object
            .key("ReturnValuesOnConditionCheckFailure")
            .string(var_631.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_replica_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateReplicaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_632) = &input.region_name {
        object.key("RegionName").string(var_632);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_replica_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteReplicaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_633) = &input.region_name {
        object.key("RegionName").string(var_633);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_policy_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicyUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_634) = &input.policy_name {
        object.key("PolicyName").string(var_634);
    }
    if let Some(var_635) = &input.target_tracking_scaling_policy_configuration {
        let mut object_636 = object
            .key("TargetTrackingScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_target_tracking_scaling_policy_configuration_update(&mut object_636, var_635)?;
        object_636.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_global_secondary_index_settings_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaGlobalSecondaryIndexSettingsUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_637) = &input.index_name {
        object.key("IndexName").string(var_637);
    }
    if let Some(var_638) = &input.provisioned_read_capacity_units {
        object.key("ProvisionedReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_638).into()),
        );
    }
    if let Some(var_639) = &input.provisioned_read_capacity_auto_scaling_settings_update {
        let mut object_640 = object
            .key("ProvisionedReadCapacityAutoScalingSettingsUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_640,
            var_639,
        )?;
        object_640.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_global_secondary_index_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateGlobalSecondaryIndexAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.index_name {
        object.key("IndexName").string(var_641);
    }
    if let Some(var_642) = &input.provisioned_throughput {
        let mut object_643 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_643,
            var_642,
        )?;
        object_643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_global_secondary_index_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateGlobalSecondaryIndexAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_644) = &input.index_name {
        object.key("IndexName").string(var_644);
    }
    if let Some(var_645) = &input.key_schema {
        let mut array_646 = object.key("KeySchema").start_array();
        for item_647 in var_645 {
            {
                let mut object_648 = array_646.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_schema_element(
                    &mut object_648,
                    item_647,
                )?;
                object_648.finish();
            }
        }
        array_646.finish();
    }
    if let Some(var_649) = &input.projection {
        let mut object_650 = object.key("Projection").start_object();
        crate::json_ser::serialize_structure_crate_model_projection(&mut object_650, var_649)?;
        object_650.finish();
    }
    if let Some(var_651) = &input.provisioned_throughput {
        let mut object_652 = object.key("ProvisionedThroughput").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput(
            &mut object_652,
            var_651,
        )?;
        object_652.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_global_secondary_index_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteGlobalSecondaryIndexAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.index_name {
        object.key("IndexName").string(var_653);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_create_replication_group_member_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CreateReplicationGroupMemberAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.region_name {
        object.key("RegionName").string(var_654);
    }
    if let Some(var_655) = &input.kms_master_key_id {
        object.key("KMSMasterKeyId").string(var_655);
    }
    if let Some(var_656) = &input.provisioned_throughput_override {
        let mut object_657 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput_override(
            &mut object_657,
            var_656,
        )?;
        object_657.finish();
    }
    if let Some(var_658) = &input.global_secondary_indexes {
        let mut array_659 = object.key("GlobalSecondaryIndexes").start_array();
        for item_660 in var_658 {
            {
                let mut object_661 = array_659.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_global_secondary_index(
                    &mut object_661,
                    item_660,
                )?;
                object_661.finish();
            }
        }
        array_659.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_replication_group_member_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateReplicationGroupMemberAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_662) = &input.region_name {
        object.key("RegionName").string(var_662);
    }
    if let Some(var_663) = &input.kms_master_key_id {
        object.key("KMSMasterKeyId").string(var_663);
    }
    if let Some(var_664) = &input.provisioned_throughput_override {
        let mut object_665 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput_override(
            &mut object_665,
            var_664,
        )?;
        object_665.finish();
    }
    if let Some(var_666) = &input.global_secondary_indexes {
        let mut array_667 = object.key("GlobalSecondaryIndexes").start_array();
        for item_668 in var_666 {
            {
                let mut object_669 = array_667.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replica_global_secondary_index(
                    &mut object_669,
                    item_668,
                )?;
                object_669.finish();
            }
        }
        array_667.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_delete_replication_group_member_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeleteReplicationGroupMemberAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_670) = &input.region_name {
        object.key("RegionName").string(var_670);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_global_secondary_index_auto_scaling_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaGlobalSecondaryIndexAutoScalingUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_671) = &input.index_name {
        object.key("IndexName").string(var_671);
    }
    if let Some(var_672) = &input.provisioned_read_capacity_auto_scaling_update {
        let mut object_673 = object
            .key("ProvisionedReadCapacityAutoScalingUpdate")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_settings_update(
            &mut object_673,
            var_672,
        )?;
        object_673.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_target_tracking_scaling_policy_configuration_update(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingTargetTrackingScalingPolicyConfigurationUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_674) = &input.disable_scale_in {
        object.key("DisableScaleIn").boolean(*var_674);
    }
    if let Some(var_675) = &input.scale_in_cooldown {
        object.key("ScaleInCooldown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_675).into()),
        );
    }
    if let Some(var_676) = &input.scale_out_cooldown {
        object.key("ScaleOutCooldown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_676).into()),
        );
    }
    if let Some(var_677) = &input.target_value {
        object.key("TargetValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_677).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioned_throughput_override(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisionedThroughputOverride,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_678) = &input.read_capacity_units {
        object.key("ReadCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_678).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replica_global_secondary_index(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicaGlobalSecondaryIndex,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_679) = &input.index_name {
        object.key("IndexName").string(var_679);
    }
    if let Some(var_680) = &input.provisioned_throughput_override {
        let mut object_681 = object.key("ProvisionedThroughputOverride").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioned_throughput_override(
            &mut object_681,
            var_680,
        )?;
        object_681.finish();
    }
    Ok(())
}
