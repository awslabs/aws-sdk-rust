// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::restore_table_to_point_in_time::_restore_table_to_point_in_time_output::RestoreTableToPointInTimeOutputBuilder;

pub use crate::operation::restore_table_to_point_in_time::_restore_table_to_point_in_time_input::RestoreTableToPointInTimeInputBuilder;

impl crate::operation::restore_table_to_point_in_time::builders::RestoreTableToPointInTimeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.restore_table_to_point_in_time();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RestoreTableToPointInTime`.
///
/// <p>Restores the specified table to the specified point in time within <code>EarliestRestorableDateTime</code> and <code>LatestRestorableDateTime</code>. You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 50 concurrent restores (any type of restore) in a given account.</p>
/// <p>When you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table.</p>
/// <p>Along with data, the following are also included on the new restored table using point in time recovery:</p>
/// <ul>
/// <li>
/// <p>Global secondary indexes (GSIs)</p></li>
/// <li>
/// <p>Local secondary indexes (LSIs)</p></li>
/// <li>
/// <p>Provisioned read and write capacity</p></li>
/// <li>
/// <p>Encryption settings</p><important>
/// <p>All these settings come from the current settings of the source table at the time of restore.</p>
/// </important></li>
/// </ul>
/// <p>You must manually set up the following on the restored table:</p>
/// <ul>
/// <li>
/// <p>Auto scaling policies</p></li>
/// <li>
/// <p>IAM policies</p></li>
/// <li>
/// <p>Amazon CloudWatch metrics and alarms</p></li>
/// <li>
/// <p>Tags</p></li>
/// <li>
/// <p>Stream settings</p></li>
/// <li>
/// <p>Time to Live (TTL) settings</p></li>
/// <li>
/// <p>Point in time recovery settings</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RestoreTableToPointInTimeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::restore_table_to_point_in_time::builders::RestoreTableToPointInTimeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeOutput,
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeError,
    > for RestoreTableToPointInTimeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeOutput,
            crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RestoreTableToPointInTimeFluentBuilder {
    /// Creates a new `RestoreTableToPointInTime`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RestoreTableToPointInTime as a reference.
    pub fn as_input(&self) -> &crate::operation::restore_table_to_point_in_time::builders::RestoreTableToPointInTimeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTime::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTime::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeOutput,
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn source_table_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_table_arn(input.into());
        self
    }
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn set_source_table_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_table_arn(input);
        self
    }
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn get_source_table_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_table_arn()
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn source_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_table_name(input.into());
        self
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn set_source_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_table_name(input);
        self
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn get_source_table_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_table_name()
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn target_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_table_name(input.into());
        self
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn set_target_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_table_name(input);
        self
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn get_target_table_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_table_name()
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.</p>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.inner = self.inner.use_latest_restorable_time(input);
        self
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.</p>
    pub fn set_use_latest_restorable_time(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_latest_restorable_time(input);
        self
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.</p>
    pub fn get_use_latest_restorable_time(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_latest_restorable_time()
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn restore_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.restore_date_time(input);
        self
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn set_restore_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_restore_date_time(input);
        self
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn get_restore_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_restore_date_time()
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn billing_mode_override(mut self, input: crate::types::BillingMode) -> Self {
        self.inner = self.inner.billing_mode_override(input);
        self
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn set_billing_mode_override(mut self, input: ::std::option::Option<crate::types::BillingMode>) -> Self {
        self.inner = self.inner.set_billing_mode_override(input);
        self
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn get_billing_mode_override(&self) -> &::std::option::Option<crate::types::BillingMode> {
        self.inner.get_billing_mode_override()
    }
    ///
    /// Appends an item to `GlobalSecondaryIndexOverride`.
    ///
    /// To override the contents of this collection use [`set_global_secondary_index_override`](Self::set_global_secondary_index_override).
    ///
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn global_secondary_index_override(mut self, input: crate::types::GlobalSecondaryIndex) -> Self {
        self.inner = self.inner.global_secondary_index_override(input);
        self
    }
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn set_global_secondary_index_override(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlobalSecondaryIndex>>) -> Self {
        self.inner = self.inner.set_global_secondary_index_override(input);
        self
    }
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn get_global_secondary_index_override(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlobalSecondaryIndex>> {
        self.inner.get_global_secondary_index_override()
    }
    ///
    /// Appends an item to `LocalSecondaryIndexOverride`.
    ///
    /// To override the contents of this collection use [`set_local_secondary_index_override`](Self::set_local_secondary_index_override).
    ///
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn local_secondary_index_override(mut self, input: crate::types::LocalSecondaryIndex) -> Self {
        self.inner = self.inner.local_secondary_index_override(input);
        self
    }
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn set_local_secondary_index_override(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LocalSecondaryIndex>>) -> Self {
        self.inner = self.inner.set_local_secondary_index_override(input);
        self
    }
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn get_local_secondary_index_override(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LocalSecondaryIndex>> {
        self.inner.get_local_secondary_index_override()
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn provisioned_throughput_override(mut self, input: crate::types::ProvisionedThroughput) -> Self {
        self.inner = self.inner.provisioned_throughput_override(input);
        self
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn set_provisioned_throughput_override(mut self, input: ::std::option::Option<crate::types::ProvisionedThroughput>) -> Self {
        self.inner = self.inner.set_provisioned_throughput_override(input);
        self
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn get_provisioned_throughput_override(&self) -> &::std::option::Option<crate::types::ProvisionedThroughput> {
        self.inner.get_provisioned_throughput_override()
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn sse_specification_override(mut self, input: crate::types::SseSpecification) -> Self {
        self.inner = self.inner.sse_specification_override(input);
        self
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn set_sse_specification_override(mut self, input: ::std::option::Option<crate::types::SseSpecification>) -> Self {
        self.inner = self.inner.set_sse_specification_override(input);
        self
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn get_sse_specification_override(&self) -> &::std::option::Option<crate::types::SseSpecification> {
        self.inner.get_sse_specification_override()
    }
}
