// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreTableToPointInTimeInput {
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub source_table_arn: std::option::Option<std::string::String>,
    /// <p>Name of the source table that is being restored.</p>
    #[doc(hidden)]
    pub source_table_name: std::option::Option<std::string::String>,
    /// <p>The name of the new table to which it must be restored to.</p>
    #[doc(hidden)]
    pub target_table_name: std::option::Option<std::string::String>,
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
    #[doc(hidden)]
    pub use_latest_restorable_time: std::option::Option<bool>,
    /// <p>Time in the past to restore the table to.</p>
    #[doc(hidden)]
    pub restore_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The billing mode of the restored table.</p>
    #[doc(hidden)]
    pub billing_mode_override: std::option::Option<crate::types::BillingMode>,
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    #[doc(hidden)]
    pub global_secondary_index_override:
        std::option::Option<std::vec::Vec<crate::types::GlobalSecondaryIndex>>,
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    #[doc(hidden)]
    pub local_secondary_index_override:
        std::option::Option<std::vec::Vec<crate::types::LocalSecondaryIndex>>,
    /// <p>Provisioned throughput settings for the restored table.</p>
    #[doc(hidden)]
    pub provisioned_throughput_override: std::option::Option<crate::types::ProvisionedThroughput>,
    /// <p>The new server-side encryption settings for the restored table.</p>
    #[doc(hidden)]
    pub sse_specification_override: std::option::Option<crate::types::SseSpecification>,
}
impl RestoreTableToPointInTimeInput {
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn source_table_arn(&self) -> std::option::Option<&str> {
        self.source_table_arn.as_deref()
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn source_table_name(&self) -> std::option::Option<&str> {
        self.source_table_name.as_deref()
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn target_table_name(&self) -> std::option::Option<&str> {
        self.target_table_name.as_deref()
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
    pub fn use_latest_restorable_time(&self) -> std::option::Option<bool> {
        self.use_latest_restorable_time
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn restore_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_date_time.as_ref()
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn billing_mode_override(&self) -> std::option::Option<&crate::types::BillingMode> {
        self.billing_mode_override.as_ref()
    }
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn global_secondary_index_override(
        &self,
    ) -> std::option::Option<&[crate::types::GlobalSecondaryIndex]> {
        self.global_secondary_index_override.as_deref()
    }
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn local_secondary_index_override(
        &self,
    ) -> std::option::Option<&[crate::types::LocalSecondaryIndex]> {
        self.local_secondary_index_override.as_deref()
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn provisioned_throughput_override(
        &self,
    ) -> std::option::Option<&crate::types::ProvisionedThroughput> {
        self.provisioned_throughput_override.as_ref()
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn sse_specification_override(
        &self,
    ) -> std::option::Option<&crate::types::SseSpecification> {
        self.sse_specification_override.as_ref()
    }
}
impl RestoreTableToPointInTimeInput {
    /// Creates a new builder-style object to manufacture [`RestoreTableToPointInTimeInput`](crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeInput).
    pub fn builder() -> crate::operation::restore_table_to_point_in_time::builders::RestoreTableToPointInTimeInputBuilder{
        crate::operation::restore_table_to_point_in_time::builders::RestoreTableToPointInTimeInputBuilder::default()
    }
}

/// A builder for [`RestoreTableToPointInTimeInput`](crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreTableToPointInTimeInputBuilder {
    pub(crate) source_table_arn: std::option::Option<std::string::String>,
    pub(crate) source_table_name: std::option::Option<std::string::String>,
    pub(crate) target_table_name: std::option::Option<std::string::String>,
    pub(crate) use_latest_restorable_time: std::option::Option<bool>,
    pub(crate) restore_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) billing_mode_override: std::option::Option<crate::types::BillingMode>,
    pub(crate) global_secondary_index_override:
        std::option::Option<std::vec::Vec<crate::types::GlobalSecondaryIndex>>,
    pub(crate) local_secondary_index_override:
        std::option::Option<std::vec::Vec<crate::types::LocalSecondaryIndex>>,
    pub(crate) provisioned_throughput_override:
        std::option::Option<crate::types::ProvisionedThroughput>,
    pub(crate) sse_specification_override: std::option::Option<crate::types::SseSpecification>,
}
impl RestoreTableToPointInTimeInputBuilder {
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn source_table_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_table_arn = Some(input.into());
        self
    }
    /// <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    pub fn set_source_table_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_table_arn = input;
        self
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn source_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_table_name = Some(input.into());
        self
    }
    /// <p>Name of the source table that is being restored.</p>
    pub fn set_source_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_table_name = input;
        self
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn target_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_table_name = Some(input.into());
        self
    }
    /// <p>The name of the new table to which it must be restored to.</p>
    pub fn set_target_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_table_name = input;
        self
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.use_latest_restorable_time = Some(input);
        self
    }
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
    pub fn set_use_latest_restorable_time(mut self, input: std::option::Option<bool>) -> Self {
        self.use_latest_restorable_time = input;
        self
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn restore_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.restore_date_time = Some(input);
        self
    }
    /// <p>Time in the past to restore the table to.</p>
    pub fn set_restore_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.restore_date_time = input;
        self
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn billing_mode_override(mut self, input: crate::types::BillingMode) -> Self {
        self.billing_mode_override = Some(input);
        self
    }
    /// <p>The billing mode of the restored table.</p>
    pub fn set_billing_mode_override(
        mut self,
        input: std::option::Option<crate::types::BillingMode>,
    ) -> Self {
        self.billing_mode_override = input;
        self
    }
    /// Appends an item to `global_secondary_index_override`.
    ///
    /// To override the contents of this collection use [`set_global_secondary_index_override`](Self::set_global_secondary_index_override).
    ///
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn global_secondary_index_override(
        mut self,
        input: crate::types::GlobalSecondaryIndex,
    ) -> Self {
        let mut v = self.global_secondary_index_override.unwrap_or_default();
        v.push(input);
        self.global_secondary_index_override = Some(v);
        self
    }
    /// <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn set_global_secondary_index_override(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GlobalSecondaryIndex>>,
    ) -> Self {
        self.global_secondary_index_override = input;
        self
    }
    /// Appends an item to `local_secondary_index_override`.
    ///
    /// To override the contents of this collection use [`set_local_secondary_index_override`](Self::set_local_secondary_index_override).
    ///
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn local_secondary_index_override(
        mut self,
        input: crate::types::LocalSecondaryIndex,
    ) -> Self {
        let mut v = self.local_secondary_index_override.unwrap_or_default();
        v.push(input);
        self.local_secondary_index_override = Some(v);
        self
    }
    /// <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    pub fn set_local_secondary_index_override(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LocalSecondaryIndex>>,
    ) -> Self {
        self.local_secondary_index_override = input;
        self
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn provisioned_throughput_override(
        mut self,
        input: crate::types::ProvisionedThroughput,
    ) -> Self {
        self.provisioned_throughput_override = Some(input);
        self
    }
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub fn set_provisioned_throughput_override(
        mut self,
        input: std::option::Option<crate::types::ProvisionedThroughput>,
    ) -> Self {
        self.provisioned_throughput_override = input;
        self
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn sse_specification_override(mut self, input: crate::types::SseSpecification) -> Self {
        self.sse_specification_override = Some(input);
        self
    }
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub fn set_sse_specification_override(
        mut self,
        input: std::option::Option<crate::types::SseSpecification>,
    ) -> Self {
        self.sse_specification_override = input;
        self
    }
    /// Consumes the builder and constructs a [`RestoreTableToPointInTimeInput`](crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::restore_table_to_point_in_time::RestoreTableToPointInTimeInput {
                source_table_arn: self.source_table_arn,
                source_table_name: self.source_table_name,
                target_table_name: self.target_table_name,
                use_latest_restorable_time: self.use_latest_restorable_time,
                restore_date_time: self.restore_date_time,
                billing_mode_override: self.billing_mode_override,
                global_secondary_index_override: self.global_secondary_index_override,
                local_secondary_index_override: self.local_secondary_index_override,
                provisioned_throughput_override: self.provisioned_throughput_override,
                sse_specification_override: self.sse_specification_override,
            },
        )
    }
}
