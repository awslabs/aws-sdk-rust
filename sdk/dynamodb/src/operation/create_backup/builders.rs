// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_backup::_create_backup_output::CreateBackupOutputBuilder;

pub use crate::operation::create_backup::_create_backup_input::CreateBackupInputBuilder;

/// Fluent builder constructing a request to `CreateBackup`.
///
/// <p>Creates a backup for an existing table.</p>
/// <p> Each time you create an on-demand backup, the entire table data is backed up. There is no limit to the number of on-demand backups that can be taken. </p>
/// <p> When you create an on-demand backup, a time marker of the request is cataloged, and the backup is created asynchronously, by applying all changes until the time of the request to the last full table snapshot. Backup requests are processed instantaneously and become available for restore within minutes. </p>
/// <p>You can call <code>CreateBackup</code> at a maximum rate of 50 times per second.</p>
/// <p>All backups in DynamoDB work without consuming any provisioned throughput on the table.</p>
/// <p> If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to contain all data committed to the table up to 14:24:00, and data committed after 14:26:00 will not be. The backup might contain data modifications made between 14:24:00 and 14:26:00. On-demand backup does not support causal consistency. </p>
/// <p> Along with data, the following are also included on the backups: </p>
/// <ul>
/// <li> <p>Global secondary indexes (GSIs)</p> </li>
/// <li> <p>Local secondary indexes (LSIs)</p> </li>
/// <li> <p>Streams</p> </li>
/// <li> <p>Provisioned read and write capacity</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBackupFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_backup::builders::CreateBackupInputBuilder,
}
impl CreateBackupFluentBuilder {
    /// Creates a new `CreateBackup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_backup::CreateBackup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_backup::CreateBackupError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_backup::CreateBackupOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_backup::CreateBackupError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.table_name(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_table_name(input);
        self
    }
    /// <p>Specified name for the backup.</p>
    pub fn backup_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.backup_name(input.into());
        self
    }
    /// <p>Specified name for the backup.</p>
    pub fn set_backup_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_backup_name(input);
        self
    }
}
