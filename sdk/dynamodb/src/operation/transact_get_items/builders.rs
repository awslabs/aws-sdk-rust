// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::transact_get_items::_transact_get_items_output::TransactGetItemsOutputBuilder;

pub use crate::operation::transact_get_items::_transact_get_items_input::TransactGetItemsInputBuilder;

/// Fluent builder constructing a request to `TransactGetItems`.
///
/// <p> <code>TransactGetItems</code> is a synchronous operation that atomically retrieves multiple items from one or more tables (but not from indexes) in a single account and Region. A <code>TransactGetItems</code> call can contain up to 100 <code>TransactGetItem</code> objects, each of which contains a <code>Get</code> structure that specifies an item to retrieve from a table in the account and Region. A call to <code>TransactGetItems</code> cannot retrieve items from tables in more than one Amazon Web Services account or Region. The aggregate size of the items in the transaction cannot exceed 4 MB.</p>
/// <p>DynamoDB rejects the entire <code>TransactGetItems</code> request if any of the following is true:</p>
/// <ul>
/// <li> <p>A conflicting operation is in the process of updating an item to be read.</p> </li>
/// <li> <p>There is insufficient provisioned capacity for the transaction to be completed.</p> </li>
/// <li> <p>There is a user error, such as an invalid data format.</p> </li>
/// <li> <p>The aggregate size of the items in the transaction cannot exceed 4 MB.</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TransactGetItemsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::transact_get_items::builders::TransactGetItemsInputBuilder,
}
impl TransactGetItemsFluentBuilder {
    /// Creates a new `TransactGetItems`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::transact_get_items::TransactGetItems,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::transact_get_items::TransactGetItemsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::transact_get_items::TransactGetItemsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::transact_get_items::TransactGetItemsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `TransactItems`.
    ///
    /// To override the contents of this collection use [`set_transact_items`](Self::set_transact_items).
    ///
    /// <p>An ordered array of up to 100 <code>TransactGetItem</code> objects, each of which contains a <code>Get</code> structure.</p>
    pub fn transact_items(mut self, input: crate::types::TransactGetItem) -> Self {
        self.inner = self.inner.transact_items(input);
        self
    }
    /// <p>An ordered array of up to 100 <code>TransactGetItem</code> objects, each of which contains a <code>Get</code> structure.</p>
    pub fn set_transact_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TransactGetItem>>,
    ) -> Self {
        self.inner = self.inner.set_transact_items(input);
        self
    }
    /// <p>A value of <code>TOTAL</code> causes consumed capacity information to be returned, and a value of <code>NONE</code> prevents that information from being returned. No other value is valid.</p>
    pub fn return_consumed_capacity(mut self, input: crate::types::ReturnConsumedCapacity) -> Self {
        self.inner = self.inner.return_consumed_capacity(input);
        self
    }
    /// <p>A value of <code>TOTAL</code> causes consumed capacity information to be returned, and a value of <code>NONE</code> prevents that information from being returned. No other value is valid.</p>
    pub fn set_return_consumed_capacity(
        mut self,
        input: std::option::Option<crate::types::ReturnConsumedCapacity>,
    ) -> Self {
        self.inner = self.inner.set_return_consumed_capacity(input);
        self
    }
}
