// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListGlobalTablesInput {
    /// <p>The first global table name that this operation will evaluate.</p>
    #[doc(hidden)]
    pub exclusive_start_global_table_name: std::option::Option<std::string::String>,
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
    /// <p>Lists the global tables in a specific Region.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
}
impl ListGlobalTablesInput {
    /// <p>The first global table name that this operation will evaluate.</p>
    pub fn exclusive_start_global_table_name(&self) -> std::option::Option<&str> {
        self.exclusive_start_global_table_name.as_deref()
    }
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
    /// <p>Lists the global tables in a specific Region.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
}
impl ListGlobalTablesInput {
    /// Creates a new builder-style object to manufacture [`ListGlobalTablesInput`](crate::operation::list_global_tables::ListGlobalTablesInput).
    pub fn builder() -> crate::operation::list_global_tables::builders::ListGlobalTablesInputBuilder
    {
        crate::operation::list_global_tables::builders::ListGlobalTablesInputBuilder::default()
    }
}

/// A builder for [`ListGlobalTablesInput`](crate::operation::list_global_tables::ListGlobalTablesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListGlobalTablesInputBuilder {
    pub(crate) exclusive_start_global_table_name: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) region_name: std::option::Option<std::string::String>,
}
impl ListGlobalTablesInputBuilder {
    /// <p>The first global table name that this operation will evaluate.</p>
    pub fn exclusive_start_global_table_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.exclusive_start_global_table_name = Some(input.into());
        self
    }
    /// <p>The first global table name that this operation will evaluate.</p>
    pub fn set_exclusive_start_global_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.exclusive_start_global_table_name = input;
        self
    }
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Lists the global tables in a specific Region.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>Lists the global tables in a specific Region.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// Consumes the builder and constructs a [`ListGlobalTablesInput`](crate::operation::list_global_tables::ListGlobalTablesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_global_tables::ListGlobalTablesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_global_tables::ListGlobalTablesInput {
                exclusive_start_global_table_name: self.exclusive_start_global_table_name,
                limit: self.limit,
                region_name: self.region_name,
            },
        )
    }
}
