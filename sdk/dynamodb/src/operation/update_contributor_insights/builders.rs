// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_contributor_insights::_update_contributor_insights_output::UpdateContributorInsightsOutputBuilder;

pub use crate::operation::update_contributor_insights::_update_contributor_insights_input::UpdateContributorInsightsInputBuilder;

/// Fluent builder constructing a request to `UpdateContributorInsights`.
///
/// <p>Updates the status for contributor insights for a specific table or index. CloudWatch Contributor Insights for DynamoDB graphs display the partition key and (if applicable) sort key of frequently accessed items and frequently throttled items in plaintext. If you require the use of Amazon Web Services Key Management Service (KMS) to encrypt this tableâ€™s partition key and sort key data with an Amazon Web Services managed key or customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB for this table.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateContributorInsightsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_contributor_insights::builders::UpdateContributorInsightsInputBuilder
            }
impl UpdateContributorInsightsFluentBuilder {
    /// Creates a new `UpdateContributorInsights`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_contributor_insights::UpdateContributorInsights,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_contributor_insights::UpdateContributorInsightsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_contributor_insights::UpdateContributorInsightsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_contributor_insights::UpdateContributorInsightsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.table_name(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_table_name(input);
        self
    }
    /// <p>The global secondary index name, if applicable.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.index_name(input.into());
        self
    }
    /// <p>The global secondary index name, if applicable.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_index_name(input);
        self
    }
    /// <p>Represents the contributor insights action.</p>
    pub fn contributor_insights_action(
        mut self,
        input: crate::types::ContributorInsightsAction,
    ) -> Self {
        self.inner = self.inner.contributor_insights_action(input);
        self
    }
    /// <p>Represents the contributor insights action.</p>
    pub fn set_contributor_insights_action(
        mut self,
        input: std::option::Option<crate::types::ContributorInsightsAction>,
    ) -> Self {
        self.inner = self.inner.set_contributor_insights_action(input);
        self
    }
}
