// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon DynamoDB
///
/// Client for invoking operations on Amazon DynamoDB. Each operation on Amazon DynamoDB is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_dynamodb::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_dynamodb::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_dynamodb::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchExecuteStatement`](crate::client::fluent_builders::BatchExecuteStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statements(Vec<BatchStatementRequest>)`](crate::client::fluent_builders::BatchExecuteStatement::statements) / [`set_statements(Option<Vec<BatchStatementRequest>>)`](crate::client::fluent_builders::BatchExecuteStatement::set_statements): <p>The list of PartiQL statements representing the batch to run.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::BatchExecuteStatement::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::BatchExecuteStatement::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    /// - On success, responds with [`BatchExecuteStatementOutput`](crate::output::BatchExecuteStatementOutput) with field(s):
    ///   - [`responses(Option<Vec<BatchStatementResponse>>)`](crate::output::BatchExecuteStatementOutput::responses): <p>The response to each PartiQL statement in the batch.</p>
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::BatchExecuteStatementOutput::consumed_capacity): <p>The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.</p>
    /// - On failure, responds with [`SdkError<BatchExecuteStatementError>`](crate::error::BatchExecuteStatementError)
    pub fn batch_execute_statement(&self) -> crate::client::fluent_builders::BatchExecuteStatement {
        crate::client::fluent_builders::BatchExecuteStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchGetItem`](crate::client::fluent_builders::BatchGetItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`request_items(HashMap<String, KeysAndAttributes>)`](crate::client::fluent_builders::BatchGetItem::request_items) / [`set_request_items(Option<HashMap<String, KeysAndAttributes>>)`](crate::client::fluent_builders::BatchGetItem::set_request_items): <p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p>  <p>Each element in the map of items to retrieve consists of the following:</p>  <ul>   <li> <p> <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if <code>false</code> (the default), an eventually consistent read is used.</p> </li>   <li> <p> <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>    <ul>     <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>     <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>     <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>    </ul> <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>    <ul>     <li> <p> <code>Percentile</code> </p> </li>    </ul> <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>    <ul>     <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>    </ul> <p>You could then use this substitution in an expression, as in this example:</p>    <ul>     <li> <p> <code>#P = :val</code> </p> </li>    </ul> <note>     <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>    </note> <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> </li>   <li> <p> <code>Keys</code> - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide <i>both</i> the partition key value and the sort key value.</p> </li>   <li> <p> <code>ProjectionExpression</code> - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p> <p>If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> </li>   <li> <p> <code>AttributesToGet</code> - This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p> </li>  </ul>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::BatchGetItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::BatchGetItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    /// - On success, responds with [`BatchGetItemOutput`](crate::output::BatchGetItemOutput) with field(s):
    ///   - [`responses(Option<HashMap<String, Vec<HashMap<String, AttributeValue>>>>)`](crate::output::BatchGetItemOutput::responses): <p>A map of table name to a list of items. Each object in <code>Responses</code> consists of a table name, along with a map of attribute data consisting of the data type and attribute value.</p>
    ///   - [`unprocessed_keys(Option<HashMap<String, KeysAndAttributes>>)`](crate::output::BatchGetItemOutput::unprocessed_keys): <p>A map of tables and their respective keys that were not processed with the current response. The <code>UnprocessedKeys</code> value is in the same form as <code>RequestItems</code>, so the value can be provided directly to a subsequent <code>BatchGetItem</code> operation. For more information, see <code>RequestItems</code> in the Request Parameters section.</p>  <p>Each element consists of:</p>  <ul>   <li> <p> <code>Keys</code> - An array of primary key attribute values that define specific items in the table.</p> </li>   <li> <p> <code>ProjectionExpression</code> - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.</p> </li>   <li> <p> <code>ConsistentRead</code> - The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.</p> </li>  </ul>  <p>If there are no unprocessed keys remaining, the response contains an empty <code>UnprocessedKeys</code> map.</p>
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::BatchGetItemOutput::consumed_capacity): <p>The read capacity units consumed by the entire <code>BatchGetItem</code> operation.</p>  <p>Each element consists of:</p>  <ul>   <li> <p> <code>TableName</code> - The table that consumed the provisioned throughput.</p> </li>   <li> <p> <code>CapacityUnits</code> - The total number of capacity units consumed.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<BatchGetItemError>`](crate::error::BatchGetItemError)
    pub fn batch_get_item(&self) -> crate::client::fluent_builders::BatchGetItem {
        crate::client::fluent_builders::BatchGetItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchWriteItem`](crate::client::fluent_builders::BatchWriteItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`request_items(HashMap<String, Vec<WriteRequest>>)`](crate::client::fluent_builders::BatchWriteItem::request_items) / [`set_request_items(Option<HashMap<String, Vec<WriteRequest>>>)`](crate::client::fluent_builders::BatchWriteItem::set_request_items): <p>A map of one or more table names and, for each table, a list of operations to be performed (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the following:</p>  <ul>   <li> <p> <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement:</p>    <ul>     <li> <p> <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide <i>all</i> of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p> </li>    </ul> </li>   <li> <p> <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement:</p>    <ul>     <li> <p> <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a <code>ValidationException</code> exception.</p> <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p> </li>    </ul> </li>  </ul>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::BatchWriteItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::BatchWriteItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`return_item_collection_metrics(ReturnItemCollectionMetrics)`](crate::client::fluent_builders::BatchWriteItem::return_item_collection_metrics) / [`set_return_item_collection_metrics(Option<ReturnItemCollectionMetrics>)`](crate::client::fluent_builders::BatchWriteItem::set_return_item_collection_metrics): <p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    /// - On success, responds with [`BatchWriteItemOutput`](crate::output::BatchWriteItemOutput) with field(s):
    ///   - [`unprocessed_items(Option<HashMap<String, Vec<WriteRequest>>>)`](crate::output::BatchWriteItemOutput::unprocessed_items): <p>A map of tables and requests against those tables that were not processed. The <code>UnprocessedItems</code> value is in the same form as <code>RequestItems</code>, so you can provide this value directly to a subsequent <code>BatchWriteItem</code> operation. For more information, see <code>RequestItems</code> in the Request Parameters section.</p>  <p>Each <code>UnprocessedItems</code> entry consists of a table name and, for that table, a list of operations to perform (<code>DeleteRequest</code> or <code>PutRequest</code>).</p>  <ul>   <li> <p> <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The item to be deleted is identified by a <code>Key</code> subelement:</p>    <ul>     <li> <p> <code>Key</code> - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.</p> </li>    </ul> </li>   <li> <p> <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to be put is identified by an <code>Item</code> subelement:</p>    <ul>     <li> <p> <code>Item</code> - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a <code>ValidationException</code> exception.</p> <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p> </li>    </ul> </li>  </ul>  <p>If there are no unprocessed items remaining, the response contains an empty <code>UnprocessedItems</code> map.</p>
    ///   - [`item_collection_metrics(Option<HashMap<String, Vec<ItemCollectionMetrics>>>)`](crate::output::BatchWriteItemOutput::item_collection_metrics): <p>A list of tables that were processed by <code>BatchWriteItem</code> and, for each table, information about any item collections that were affected by individual <code>DeleteItem</code> or <code>PutItem</code> operations.</p>  <p>Each entry consists of the following subelements:</p>  <ul>   <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item.</p> </li>   <li> <p> <code>SizeEstimateRangeGB</code> - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li>  </ul>
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::BatchWriteItemOutput::consumed_capacity): <p>The capacity units consumed by the entire <code>BatchWriteItem</code> operation.</p>  <p>Each element consists of:</p>  <ul>   <li> <p> <code>TableName</code> - The table that consumed the provisioned throughput.</p> </li>   <li> <p> <code>CapacityUnits</code> - The total number of capacity units consumed.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<BatchWriteItemError>`](crate::error::BatchWriteItemError)
    pub fn batch_write_item(&self) -> crate::client::fluent_builders::BatchWriteItem {
        crate::client::fluent_builders::BatchWriteItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBackup`](crate::client::fluent_builders::CreateBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::CreateBackup::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::CreateBackup::set_table_name): <p>The name of the table.</p>
    ///   - [`backup_name(impl Into<String>)`](crate::client::fluent_builders::CreateBackup::backup_name) / [`set_backup_name(Option<String>)`](crate::client::fluent_builders::CreateBackup::set_backup_name): <p>Specified name for the backup.</p>
    /// - On success, responds with [`CreateBackupOutput`](crate::output::CreateBackupOutput) with field(s):
    ///   - [`backup_details(Option<BackupDetails>)`](crate::output::CreateBackupOutput::backup_details): <p>Contains the details of the backup created for the table.</p>
    /// - On failure, responds with [`SdkError<CreateBackupError>`](crate::error::CreateBackupError)
    pub fn create_backup(&self) -> crate::client::fluent_builders::CreateBackup {
        crate::client::fluent_builders::CreateBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateGlobalTable`](crate::client::fluent_builders::CreateGlobalTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_table_name(impl Into<String>)`](crate::client::fluent_builders::CreateGlobalTable::global_table_name) / [`set_global_table_name(Option<String>)`](crate::client::fluent_builders::CreateGlobalTable::set_global_table_name): <p>The global table name.</p>
    ///   - [`replication_group(Vec<Replica>)`](crate::client::fluent_builders::CreateGlobalTable::replication_group) / [`set_replication_group(Option<Vec<Replica>>)`](crate::client::fluent_builders::CreateGlobalTable::set_replication_group): <p>The Regions where the global table needs to be created.</p>
    /// - On success, responds with [`CreateGlobalTableOutput`](crate::output::CreateGlobalTableOutput) with field(s):
    ///   - [`global_table_description(Option<GlobalTableDescription>)`](crate::output::CreateGlobalTableOutput::global_table_description): <p>Contains the details of the global table.</p>
    /// - On failure, responds with [`SdkError<CreateGlobalTableError>`](crate::error::CreateGlobalTableError)
    pub fn create_global_table(&self) -> crate::client::fluent_builders::CreateGlobalTable {
        crate::client::fluent_builders::CreateGlobalTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTable`](crate::client::fluent_builders::CreateTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attribute_definitions(Vec<AttributeDefinition>)`](crate::client::fluent_builders::CreateTable::attribute_definitions) / [`set_attribute_definitions(Option<Vec<AttributeDefinition>>)`](crate::client::fluent_builders::CreateTable::set_attribute_definitions): <p>An array of attributes that describe the key schema for the table and indexes.</p>
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::CreateTable::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::CreateTable::set_table_name): <p>The name of the table to create.</p>
    ///   - [`key_schema(Vec<KeySchemaElement>)`](crate::client::fluent_builders::CreateTable::key_schema) / [`set_key_schema(Option<Vec<KeySchemaElement>>)`](crate::client::fluent_builders::CreateTable::set_key_schema): <p>Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>  <p>Each <code>KeySchemaElement</code> in the array is composed of:</p>  <ul>   <li> <p> <code>AttributeName</code> - The name of this key attribute.</p> </li>   <li> <p> <code>KeyType</code> - The role that the key attribute will assume:</p>    <ul>     <li> <p> <code>HASH</code> - partition key</p> </li>     <li> <p> <code>RANGE</code> - sort key</p> </li>    </ul> </li>  </ul> <note>   <p>The partition key of an item is also known as its <i>hash attribute</i>. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p>   <p>The sort key of an item is also known as its <i>range attribute</i>. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p>  </note>  <p>For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p>  <p>For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`local_secondary_indexes(Vec<LocalSecondaryIndex>)`](crate::client::fluent_builders::CreateTable::local_secondary_indexes) / [`set_local_secondary_indexes(Option<Vec<LocalSecondaryIndex>>)`](crate::client::fluent_builders::CreateTable::set_local_secondary_indexes): <p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p>  <p>Each local secondary index in the array includes the following:</p>  <ul>   <li> <p> <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p> <p></p> </li>   <li> <p> <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.</p> </li>   <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p>    <ul>     <li> <p> <code>ProjectionType</code> - One of the following:</p>      <ul>       <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li>       <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes is in <code>NonKeyAttributes</code>.</p> </li>       <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li>      </ul> </li>     <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li>    </ul> </li>  </ul>
    ///   - [`global_secondary_indexes(Vec<GlobalSecondaryIndex>)`](crate::client::fluent_builders::CreateTable::global_secondary_indexes) / [`set_global_secondary_indexes(Option<Vec<GlobalSecondaryIndex>>)`](crate::client::fluent_builders::CreateTable::set_global_secondary_indexes): <p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p>  <ul>   <li> <p> <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p> <p></p> </li>   <li> <p> <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p> </li>   <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p>    <ul>     <li> <p> <code>ProjectionType</code> - One of the following:</p>      <ul>       <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li>       <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes is in <code>NonKeyAttributes</code>.</p> </li>       <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li>      </ul> </li>     <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li>    </ul> </li>   <li> <p> <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.</p> </li>  </ul>
    ///   - [`billing_mode(BillingMode)`](crate::client::fluent_builders::CreateTable::billing_mode) / [`set_billing_mode(Option<BillingMode>)`](crate::client::fluent_builders::CreateTable::set_billing_mode): <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>  <ul>   <li> <p> <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p> </li>   <li> <p> <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>. </p> </li>  </ul>
    ///   - [`provisioned_throughput(ProvisionedThroughput)`](crate::client::fluent_builders::CreateTable::provisioned_throughput) / [`set_provisioned_throughput(Option<ProvisionedThroughput>)`](crate::client::fluent_builders::CreateTable::set_provisioned_throughput): <p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p>  <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this property.</p>  <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`stream_specification(StreamSpecification)`](crate::client::fluent_builders::CreateTable::stream_specification) / [`set_stream_specification(Option<StreamSpecification>)`](crate::client::fluent_builders::CreateTable::set_stream_specification): <p>The settings for DynamoDB Streams on the table. These settings consist of:</p>  <ul>   <li> <p> <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).</p> </li>   <li> <p> <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the table's stream. Valid values for <code>StreamViewType</code> are:</p>    <ul>     <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li>     <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li>     <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li>     <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li>    </ul> </li>  </ul>
    ///   - [`sse_specification(SseSpecification)`](crate::client::fluent_builders::CreateTable::sse_specification) / [`set_sse_specification(Option<SseSpecification>)`](crate::client::fluent_builders::CreateTable::set_sse_specification): <p>Represents the settings used to enable server-side encryption.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTable::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTable::set_tags): <p>A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>.</p>
    ///   - [`table_class(TableClass)`](crate::client::fluent_builders::CreateTable::table_class) / [`set_table_class(Option<TableClass>)`](crate::client::fluent_builders::CreateTable::set_table_class): <p>The table class of the new table. Valid values are <code>STANDARD</code> and <code>STANDARD_INFREQUENT_ACCESS</code>.</p>
    /// - On success, responds with [`CreateTableOutput`](crate::output::CreateTableOutput) with field(s):
    ///   - [`table_description(Option<TableDescription>)`](crate::output::CreateTableOutput::table_description): <p>Represents the properties of the table.</p>
    /// - On failure, responds with [`SdkError<CreateTableError>`](crate::error::CreateTableError)
    pub fn create_table(&self) -> crate::client::fluent_builders::CreateTable {
        crate::client::fluent_builders::CreateTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBackup`](crate::client::fluent_builders::DeleteBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteBackup::backup_arn) / [`set_backup_arn(Option<String>)`](crate::client::fluent_builders::DeleteBackup::set_backup_arn): <p>The ARN associated with the backup.</p>
    /// - On success, responds with [`DeleteBackupOutput`](crate::output::DeleteBackupOutput) with field(s):
    ///   - [`backup_description(Option<BackupDescription>)`](crate::output::DeleteBackupOutput::backup_description): <p>Contains the description of the backup created for the table.</p>
    /// - On failure, responds with [`SdkError<DeleteBackupError>`](crate::error::DeleteBackupError)
    pub fn delete_backup(&self) -> crate::client::fluent_builders::DeleteBackup {
        crate::client::fluent_builders::DeleteBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteItem`](crate::client::fluent_builders::DeleteItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DeleteItem::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DeleteItem::set_table_name): <p>The name of the table from which to delete the item.</p>
    ///   - [`key(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::DeleteItem::key) / [`set_key(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::DeleteItem::set_key): <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to delete.</p>  <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    ///   - [`expected(HashMap<String, ExpectedAttributeValue>)`](crate::client::fluent_builders::DeleteItem::expected) / [`set_expected(Option<HashMap<String, ExpectedAttributeValue>>)`](crate::client::fluent_builders::DeleteItem::set_expected): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`conditional_operator(ConditionalOperator)`](crate::client::fluent_builders::DeleteItem::conditional_operator) / [`set_conditional_operator(Option<ConditionalOperator>)`](crate::client::fluent_builders::DeleteItem::set_conditional_operator): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`return_values(ReturnValue)`](crate::client::fluent_builders::DeleteItem::return_values) / [`set_return_values(Option<ReturnValue>)`](crate::client::fluent_builders::DeleteItem::set_return_values): <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were deleted. For <code>DeleteItem</code>, the valid values are:</p>  <ul>   <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li>   <li> <p> <code>ALL_OLD</code> - The content of the old item is returned.</p> </li>  </ul>  <p>There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.</p> <note>   <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>.</p>  </note>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::DeleteItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::DeleteItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`return_item_collection_metrics(ReturnItemCollectionMetrics)`](crate::client::fluent_builders::DeleteItem::return_item_collection_metrics) / [`set_return_item_collection_metrics(Option<ReturnItemCollectionMetrics>)`](crate::client::fluent_builders::DeleteItem::set_return_item_collection_metrics): <p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    ///   - [`condition_expression(impl Into<String>)`](crate::client::fluent_builders::DeleteItem::condition_expression) / [`set_condition_expression(Option<String>)`](crate::client::fluent_builders::DeleteItem::set_condition_expression): <p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to succeed.</p>  <p>An expression can contain any of the following:</p>  <ul>   <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li>   <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li>   <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li>  </ul>  <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::DeleteItem::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::DeleteItem::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_values(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::DeleteItem::expression_attribute_values) / [`set_expression_attribute_values(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::DeleteItem::set_expression_attribute_values): <p>One or more values that can be substituted in an expression.</p>  <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>  <p> <code>Available | Backordered | Discontinued</code> </p>  <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>  <p> <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code> </p>  <p>You could then use these values in an expression, such as this:</p>  <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p>  <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On success, responds with [`DeleteItemOutput`](crate::output::DeleteItemOutput) with field(s):
    ///   - [`attributes(Option<HashMap<String, AttributeValue>>)`](crate::output::DeleteItemOutput::attributes): <p>A map of attribute names to <code>AttributeValue</code> objects, representing the item as it appeared before the <code>DeleteItem</code> operation. This map appears in the response only if <code>ReturnValues</code> was specified as <code>ALL_OLD</code> in the request.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::DeleteItemOutput::consumed_capacity): <p>The capacity units consumed by the <code>DeleteItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Mode</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`item_collection_metrics(Option<ItemCollectionMetrics>)`](crate::output::DeleteItemOutput::item_collection_metrics): <p>Information about item collections, if any, that were affected by the <code>DeleteItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p>  <p>Each <code>ItemCollectionMetrics</code> element consists of:</p>  <ul>   <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li>   <li> <p> <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DeleteItemError>`](crate::error::DeleteItemError)
    pub fn delete_item(&self) -> crate::client::fluent_builders::DeleteItem {
        crate::client::fluent_builders::DeleteItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTable`](crate::client::fluent_builders::DeleteTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DeleteTable::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DeleteTable::set_table_name): <p>The name of the table to delete.</p>
    /// - On success, responds with [`DeleteTableOutput`](crate::output::DeleteTableOutput) with field(s):
    ///   - [`table_description(Option<TableDescription>)`](crate::output::DeleteTableOutput::table_description): <p>Represents the properties of a table.</p>
    /// - On failure, responds with [`SdkError<DeleteTableError>`](crate::error::DeleteTableError)
    pub fn delete_table(&self) -> crate::client::fluent_builders::DeleteTable {
        crate::client::fluent_builders::DeleteTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBackup`](crate::client::fluent_builders::DescribeBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`backup_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeBackup::backup_arn) / [`set_backup_arn(Option<String>)`](crate::client::fluent_builders::DescribeBackup::set_backup_arn): <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    /// - On success, responds with [`DescribeBackupOutput`](crate::output::DescribeBackupOutput) with field(s):
    ///   - [`backup_description(Option<BackupDescription>)`](crate::output::DescribeBackupOutput::backup_description): <p>Contains the description of the backup created for the table.</p>
    /// - On failure, responds with [`SdkError<DescribeBackupError>`](crate::error::DescribeBackupError)
    pub fn describe_backup(&self) -> crate::client::fluent_builders::DescribeBackup {
        crate::client::fluent_builders::DescribeBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeContinuousBackups`](crate::client::fluent_builders::DescribeContinuousBackups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeContinuousBackups::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeContinuousBackups::set_table_name): <p>Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.</p>
    /// - On success, responds with [`DescribeContinuousBackupsOutput`](crate::output::DescribeContinuousBackupsOutput) with field(s):
    ///   - [`continuous_backups_description(Option<ContinuousBackupsDescription>)`](crate::output::DescribeContinuousBackupsOutput::continuous_backups_description): <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    /// - On failure, responds with [`SdkError<DescribeContinuousBackupsError>`](crate::error::DescribeContinuousBackupsError)
    pub fn describe_continuous_backups(
        &self,
    ) -> crate::client::fluent_builders::DescribeContinuousBackups {
        crate::client::fluent_builders::DescribeContinuousBackups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeContributorInsights`](crate::client::fluent_builders::DescribeContributorInsights) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeContributorInsights::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeContributorInsights::set_table_name): <p>The name of the table to describe.</p>
    ///   - [`index_name(impl Into<String>)`](crate::client::fluent_builders::DescribeContributorInsights::index_name) / [`set_index_name(Option<String>)`](crate::client::fluent_builders::DescribeContributorInsights::set_index_name): <p>The name of the global secondary index to describe, if applicable.</p>
    /// - On success, responds with [`DescribeContributorInsightsOutput`](crate::output::DescribeContributorInsightsOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::DescribeContributorInsightsOutput::table_name): <p>The name of the table being described.</p>
    ///   - [`index_name(Option<String>)`](crate::output::DescribeContributorInsightsOutput::index_name): <p>The name of the global secondary index being described.</p>
    ///   - [`contributor_insights_rule_list(Option<Vec<String>>)`](crate::output::DescribeContributorInsightsOutput::contributor_insights_rule_list): <p>List of names of the associated contributor insights rules.</p>
    ///   - [`contributor_insights_status(Option<ContributorInsightsStatus>)`](crate::output::DescribeContributorInsightsOutput::contributor_insights_status): <p>Current status of contributor insights.</p>
    ///   - [`last_update_date_time(Option<DateTime>)`](crate::output::DescribeContributorInsightsOutput::last_update_date_time): <p>Timestamp of the last time the status was changed.</p>
    ///   - [`failure_exception(Option<FailureException>)`](crate::output::DescribeContributorInsightsOutput::failure_exception): <p>Returns information about the last failure that was encountered.</p>  <p>The most common exceptions for a FAILED status are:</p>  <ul>   <li> <p>LimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor Insights rules before retrying.</p> </li>   <li> <p>AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.</p> </li>   <li> <p>AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.</p> </li>   <li> <p>InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DescribeContributorInsightsError>`](crate::error::DescribeContributorInsightsError)
    pub fn describe_contributor_insights(
        &self,
    ) -> crate::client::fluent_builders::DescribeContributorInsights {
        crate::client::fluent_builders::DescribeContributorInsights::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEndpoints`](crate::client::fluent_builders::DescribeEndpoints) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeEndpoints::send) it.

    /// - On success, responds with [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput) with field(s):
    ///   - [`endpoints(Option<Vec<Endpoint>>)`](crate::output::DescribeEndpointsOutput::endpoints): <p>List of endpoints.</p>
    /// - On failure, responds with [`SdkError<DescribeEndpointsError>`](crate::error::DescribeEndpointsError)
    pub fn describe_endpoints(&self) -> crate::client::fluent_builders::DescribeEndpoints {
        crate::client::fluent_builders::DescribeEndpoints::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeExport`](crate::client::fluent_builders::DescribeExport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`export_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeExport::export_arn) / [`set_export_arn(Option<String>)`](crate::client::fluent_builders::DescribeExport::set_export_arn): <p>The Amazon Resource Name (ARN) associated with the export.</p>
    /// - On success, responds with [`DescribeExportOutput`](crate::output::DescribeExportOutput) with field(s):
    ///   - [`export_description(Option<ExportDescription>)`](crate::output::DescribeExportOutput::export_description): <p>Represents the properties of the export.</p>
    /// - On failure, responds with [`SdkError<DescribeExportError>`](crate::error::DescribeExportError)
    pub fn describe_export(&self) -> crate::client::fluent_builders::DescribeExport {
        crate::client::fluent_builders::DescribeExport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGlobalTable`](crate::client::fluent_builders::DescribeGlobalTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeGlobalTable::global_table_name) / [`set_global_table_name(Option<String>)`](crate::client::fluent_builders::DescribeGlobalTable::set_global_table_name): <p>The name of the global table.</p>
    /// - On success, responds with [`DescribeGlobalTableOutput`](crate::output::DescribeGlobalTableOutput) with field(s):
    ///   - [`global_table_description(Option<GlobalTableDescription>)`](crate::output::DescribeGlobalTableOutput::global_table_description): <p>Contains the details of the global table.</p>
    /// - On failure, responds with [`SdkError<DescribeGlobalTableError>`](crate::error::DescribeGlobalTableError)
    pub fn describe_global_table(&self) -> crate::client::fluent_builders::DescribeGlobalTable {
        crate::client::fluent_builders::DescribeGlobalTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeGlobalTableSettings`](crate::client::fluent_builders::DescribeGlobalTableSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeGlobalTableSettings::global_table_name) / [`set_global_table_name(Option<String>)`](crate::client::fluent_builders::DescribeGlobalTableSettings::set_global_table_name): <p>The name of the global table to describe.</p>
    /// - On success, responds with [`DescribeGlobalTableSettingsOutput`](crate::output::DescribeGlobalTableSettingsOutput) with field(s):
    ///   - [`global_table_name(Option<String>)`](crate::output::DescribeGlobalTableSettingsOutput::global_table_name): <p>The name of the global table.</p>
    ///   - [`replica_settings(Option<Vec<ReplicaSettingsDescription>>)`](crate::output::DescribeGlobalTableSettingsOutput::replica_settings): <p>The Region-specific settings for the global table.</p>
    /// - On failure, responds with [`SdkError<DescribeGlobalTableSettingsError>`](crate::error::DescribeGlobalTableSettingsError)
    pub fn describe_global_table_settings(
        &self,
    ) -> crate::client::fluent_builders::DescribeGlobalTableSettings {
        crate::client::fluent_builders::DescribeGlobalTableSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeImport`](crate::client::fluent_builders::DescribeImport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`import_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeImport::import_arn) / [`set_import_arn(Option<String>)`](crate::client::fluent_builders::DescribeImport::set_import_arn): <p> The Amazon Resource Name (ARN) associated with the table you're importing to. </p>
    /// - On success, responds with [`DescribeImportOutput`](crate::output::DescribeImportOutput) with field(s):
    ///   - [`import_table_description(Option<ImportTableDescription>)`](crate::output::DescribeImportOutput::import_table_description): <p> Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered. </p>
    /// - On failure, responds with [`SdkError<DescribeImportError>`](crate::error::DescribeImportError)
    pub fn describe_import(&self) -> crate::client::fluent_builders::DescribeImport {
        crate::client::fluent_builders::DescribeImport::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeKinesisStreamingDestination`](crate::client::fluent_builders::DescribeKinesisStreamingDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeKinesisStreamingDestination::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeKinesisStreamingDestination::set_table_name): <p>The name of the table being described.</p>
    /// - On success, responds with [`DescribeKinesisStreamingDestinationOutput`](crate::output::DescribeKinesisStreamingDestinationOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::DescribeKinesisStreamingDestinationOutput::table_name): <p>The name of the table being described.</p>
    ///   - [`kinesis_data_stream_destinations(Option<Vec<KinesisDataStreamDestination>>)`](crate::output::DescribeKinesisStreamingDestinationOutput::kinesis_data_stream_destinations): <p>The list of replica structures for the table being described.</p>
    /// - On failure, responds with [`SdkError<DescribeKinesisStreamingDestinationError>`](crate::error::DescribeKinesisStreamingDestinationError)
    pub fn describe_kinesis_streaming_destination(
        &self,
    ) -> crate::client::fluent_builders::DescribeKinesisStreamingDestination {
        crate::client::fluent_builders::DescribeKinesisStreamingDestination::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeLimits`](crate::client::fluent_builders::DescribeLimits) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DescribeLimits::send) it.

    /// - On success, responds with [`DescribeLimitsOutput`](crate::output::DescribeLimitsOutput) with field(s):
    ///   - [`account_max_read_capacity_units(Option<i64>)`](crate::output::DescribeLimitsOutput::account_max_read_capacity_units): <p>The maximum total read capacity units that your account allows you to provision across all of your tables in this Region.</p>
    ///   - [`account_max_write_capacity_units(Option<i64>)`](crate::output::DescribeLimitsOutput::account_max_write_capacity_units): <p>The maximum total write capacity units that your account allows you to provision across all of your tables in this Region.</p>
    ///   - [`table_max_read_capacity_units(Option<i64>)`](crate::output::DescribeLimitsOutput::table_max_read_capacity_units): <p>The maximum read capacity units that your account allows you to provision for a new table that you are creating in this Region, including the read capacity units provisioned for its global secondary indexes (GSIs).</p>
    ///   - [`table_max_write_capacity_units(Option<i64>)`](crate::output::DescribeLimitsOutput::table_max_write_capacity_units): <p>The maximum write capacity units that your account allows you to provision for a new table that you are creating in this Region, including the write capacity units provisioned for its global secondary indexes (GSIs).</p>
    /// - On failure, responds with [`SdkError<DescribeLimitsError>`](crate::error::DescribeLimitsError)
    pub fn describe_limits(&self) -> crate::client::fluent_builders::DescribeLimits {
        crate::client::fluent_builders::DescribeLimits::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTable`](crate::client::fluent_builders::DescribeTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeTable::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeTable::set_table_name): <p>The name of the table to describe.</p>
    /// - On success, responds with [`DescribeTableOutput`](crate::output::DescribeTableOutput) with field(s):
    ///   - [`table(Option<TableDescription>)`](crate::output::DescribeTableOutput::table): <p>The properties of the table.</p>
    /// - On failure, responds with [`SdkError<DescribeTableError>`](crate::error::DescribeTableError)
    pub fn describe_table(&self) -> crate::client::fluent_builders::DescribeTable {
        crate::client::fluent_builders::DescribeTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTableReplicaAutoScaling`](crate::client::fluent_builders::DescribeTableReplicaAutoScaling) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeTableReplicaAutoScaling::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeTableReplicaAutoScaling::set_table_name): <p>The name of the table.</p>
    /// - On success, responds with [`DescribeTableReplicaAutoScalingOutput`](crate::output::DescribeTableReplicaAutoScalingOutput) with field(s):
    ///   - [`table_auto_scaling_description(Option<TableAutoScalingDescription>)`](crate::output::DescribeTableReplicaAutoScalingOutput::table_auto_scaling_description): <p>Represents the auto scaling properties of the table.</p>
    /// - On failure, responds with [`SdkError<DescribeTableReplicaAutoScalingError>`](crate::error::DescribeTableReplicaAutoScalingError)
    pub fn describe_table_replica_auto_scaling(
        &self,
    ) -> crate::client::fluent_builders::DescribeTableReplicaAutoScaling {
        crate::client::fluent_builders::DescribeTableReplicaAutoScaling::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeTimeToLive`](crate::client::fluent_builders::DescribeTimeToLive) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DescribeTimeToLive::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DescribeTimeToLive::set_table_name): <p>The name of the table to be described.</p>
    /// - On success, responds with [`DescribeTimeToLiveOutput`](crate::output::DescribeTimeToLiveOutput) with field(s):
    ///   - [`time_to_live_description(Option<TimeToLiveDescription>)`](crate::output::DescribeTimeToLiveOutput::time_to_live_description): <p></p>
    /// - On failure, responds with [`SdkError<DescribeTimeToLiveError>`](crate::error::DescribeTimeToLiveError)
    pub fn describe_time_to_live(&self) -> crate::client::fluent_builders::DescribeTimeToLive {
        crate::client::fluent_builders::DescribeTimeToLive::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableKinesisStreamingDestination`](crate::client::fluent_builders::DisableKinesisStreamingDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::DisableKinesisStreamingDestination::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::DisableKinesisStreamingDestination::set_table_name): <p>The name of the DynamoDB table.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::DisableKinesisStreamingDestination::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::DisableKinesisStreamingDestination::set_stream_arn): <p>The ARN for a Kinesis data stream.</p>
    /// - On success, responds with [`DisableKinesisStreamingDestinationOutput`](crate::output::DisableKinesisStreamingDestinationOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::DisableKinesisStreamingDestinationOutput::table_name): <p>The name of the table being modified.</p>
    ///   - [`stream_arn(Option<String>)`](crate::output::DisableKinesisStreamingDestinationOutput::stream_arn): <p>The ARN for the specific Kinesis data stream.</p>
    ///   - [`destination_status(Option<DestinationStatus>)`](crate::output::DisableKinesisStreamingDestinationOutput::destination_status): <p>The current status of the replication.</p>
    /// - On failure, responds with [`SdkError<DisableKinesisStreamingDestinationError>`](crate::error::DisableKinesisStreamingDestinationError)
    pub fn disable_kinesis_streaming_destination(
        &self,
    ) -> crate::client::fluent_builders::DisableKinesisStreamingDestination {
        crate::client::fluent_builders::DisableKinesisStreamingDestination::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableKinesisStreamingDestination`](crate::client::fluent_builders::EnableKinesisStreamingDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::EnableKinesisStreamingDestination::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::EnableKinesisStreamingDestination::set_table_name): <p>The name of the DynamoDB table.</p>
    ///   - [`stream_arn(impl Into<String>)`](crate::client::fluent_builders::EnableKinesisStreamingDestination::stream_arn) / [`set_stream_arn(Option<String>)`](crate::client::fluent_builders::EnableKinesisStreamingDestination::set_stream_arn): <p>The ARN for a Kinesis data stream.</p>
    /// - On success, responds with [`EnableKinesisStreamingDestinationOutput`](crate::output::EnableKinesisStreamingDestinationOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::EnableKinesisStreamingDestinationOutput::table_name): <p>The name of the table being modified.</p>
    ///   - [`stream_arn(Option<String>)`](crate::output::EnableKinesisStreamingDestinationOutput::stream_arn): <p>The ARN for the specific Kinesis data stream.</p>
    ///   - [`destination_status(Option<DestinationStatus>)`](crate::output::EnableKinesisStreamingDestinationOutput::destination_status): <p>The current status of the replication.</p>
    /// - On failure, responds with [`SdkError<EnableKinesisStreamingDestinationError>`](crate::error::EnableKinesisStreamingDestinationError)
    pub fn enable_kinesis_streaming_destination(
        &self,
    ) -> crate::client::fluent_builders::EnableKinesisStreamingDestination {
        crate::client::fluent_builders::EnableKinesisStreamingDestination::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExecuteStatement`](crate::client::fluent_builders::ExecuteStatement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`statement(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::statement) / [`set_statement(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_statement): <p>The PartiQL statement representing the operation to run.</p>
    ///   - [`parameters(Vec<AttributeValue>)`](crate::client::fluent_builders::ExecuteStatement::parameters) / [`set_parameters(Option<Vec<AttributeValue>>)`](crate::client::fluent_builders::ExecuteStatement::set_parameters): <p>The parameters for the PartiQL statement, if any.</p>
    ///   - [`consistent_read(bool)`](crate::client::fluent_builders::ExecuteStatement::consistent_read) / [`set_consistent_read(Option<bool>)`](crate::client::fluent_builders::ExecuteStatement::set_consistent_read): <p>The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ExecuteStatement::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ExecuteStatement::set_next_token): <p>Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::ExecuteStatement::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::ExecuteStatement::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ExecuteStatement::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ExecuteStatement::set_limit): <p>The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, along with a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation so you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the operation. </p>
    /// - On success, responds with [`ExecuteStatementOutput`](crate::output::ExecuteStatementOutput) with field(s):
    ///   - [`items(Option<Vec<HashMap<String, AttributeValue>>>)`](crate::output::ExecuteStatementOutput::items): <p>If a read operation was used, this property will contain the result of the read operation; a map of attribute names and their values. For the write operations this value will be empty.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ExecuteStatementOutput::next_token): <p>If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::ExecuteStatementOutput::consumed_capacity): <p>The capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the request asked for it. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`last_evaluated_key(Option<HashMap<String, AttributeValue>>)`](crate::output::ExecuteStatementOutput::last_evaluated_key): <p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request. If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved. If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty. </p>
    /// - On failure, responds with [`SdkError<ExecuteStatementError>`](crate::error::ExecuteStatementError)
    pub fn execute_statement(&self) -> crate::client::fluent_builders::ExecuteStatement {
        crate::client::fluent_builders::ExecuteStatement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExecuteTransaction`](crate::client::fluent_builders::ExecuteTransaction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transact_statements(Vec<ParameterizedStatement>)`](crate::client::fluent_builders::ExecuteTransaction::transact_statements) / [`set_transact_statements(Option<Vec<ParameterizedStatement>>)`](crate::client::fluent_builders::ExecuteTransaction::set_transact_statements): <p>The list of PartiQL statements representing the transaction to run.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::ExecuteTransaction::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::ExecuteTransaction::set_client_request_token): <p>Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::ExecuteTransaction::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::ExecuteTransaction::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html">TransactGetItems</a> and <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html">TransactWriteItems</a>.</p>
    /// - On success, responds with [`ExecuteTransactionOutput`](crate::output::ExecuteTransactionOutput) with field(s):
    ///   - [`responses(Option<Vec<ItemResponse>>)`](crate::output::ExecuteTransactionOutput::responses): <p>The response to a PartiQL transaction.</p>
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::ExecuteTransactionOutput::consumed_capacity): <p>The capacity units consumed by the entire operation. The values of the list are ordered according to the ordering of the statements.</p>
    /// - On failure, responds with [`SdkError<ExecuteTransactionError>`](crate::error::ExecuteTransactionError)
    pub fn execute_transaction(&self) -> crate::client::fluent_builders::ExecuteTransaction {
        crate::client::fluent_builders::ExecuteTransaction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExportTableToPointInTime`](crate::client::fluent_builders::ExportTableToPointInTime) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_arn(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::table_arn) / [`set_table_arn(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_table_arn): <p>The Amazon Resource Name (ARN) associated with the table to export.</p>
    ///   - [`export_time(DateTime)`](crate::client::fluent_builders::ExportTableToPointInTime::export_time) / [`set_export_time(Option<DateTime>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_export_time): <p>Time in the past from which to export table data, counted in seconds from the start of the Unix epoch. The table export will be a snapshot of the table's state at this point in time.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_client_token): <p>Providing a <code>ClientToken</code> makes the call to <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple identical calls have the same effect as one single call.</p>  <p>A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.</p>  <p>If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an <code>ImportConflictException</code>.</p>
    ///   - [`s3_bucket(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::s3_bucket) / [`set_s3_bucket(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_s3_bucket): <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    ///   - [`s3_bucket_owner(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::s3_bucket_owner) / [`set_s3_bucket_owner(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_s3_bucket_owner): <p>The ID of the Amazon Web Services account that owns the bucket the export will be stored in.</p>
    ///   - [`s3_prefix(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::s3_prefix) / [`set_s3_prefix(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_s3_prefix): <p>The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.</p>
    ///   - [`s3_sse_algorithm(S3SseAlgorithm)`](crate::client::fluent_builders::ExportTableToPointInTime::s3_sse_algorithm) / [`set_s3_sse_algorithm(Option<S3SseAlgorithm>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_s3_sse_algorithm): <p>Type of encryption used on the bucket where export data will be stored. Valid values for <code>S3SseAlgorithm</code> are:</p>  <ul>   <li> <p> <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p> </li>   <li> <p> <code>KMS</code> - server-side encryption with KMS managed keys</p> </li>  </ul>
    ///   - [`s3_sse_kms_key_id(impl Into<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::s3_sse_kms_key_id) / [`set_s3_sse_kms_key_id(Option<String>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_s3_sse_kms_key_id): <p>The ID of the KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).</p>
    ///   - [`export_format(ExportFormat)`](crate::client::fluent_builders::ExportTableToPointInTime::export_format) / [`set_export_format(Option<ExportFormat>)`](crate::client::fluent_builders::ExportTableToPointInTime::set_export_format): <p>The format for the exported data. Valid values for <code>ExportFormat</code> are <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
    /// - On success, responds with [`ExportTableToPointInTimeOutput`](crate::output::ExportTableToPointInTimeOutput) with field(s):
    ///   - [`export_description(Option<ExportDescription>)`](crate::output::ExportTableToPointInTimeOutput::export_description): <p>Contains a description of the table export.</p>
    /// - On failure, responds with [`SdkError<ExportTableToPointInTimeError>`](crate::error::ExportTableToPointInTimeError)
    pub fn export_table_to_point_in_time(
        &self,
    ) -> crate::client::fluent_builders::ExportTableToPointInTime {
        crate::client::fluent_builders::ExportTableToPointInTime::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetItem`](crate::client::fluent_builders::GetItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::GetItem::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::GetItem::set_table_name): <p>The name of the table containing the requested item.</p>
    ///   - [`key(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::GetItem::key) / [`set_key(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::GetItem::set_key): <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of the item to retrieve.</p>  <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    ///   - [`attributes_to_get(Vec<String>)`](crate::client::fluent_builders::GetItem::attributes_to_get) / [`set_attributes_to_get(Option<Vec<String>>)`](crate::client::fluent_builders::GetItem::set_attributes_to_get): <p>This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`consistent_read(bool)`](crate::client::fluent_builders::GetItem::consistent_read) / [`set_consistent_read(Option<bool>)`](crate::client::fluent_builders::GetItem::set_consistent_read): <p>Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::GetItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::GetItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`projection_expression(impl Into<String>)`](crate::client::fluent_builders::GetItem::projection_expression) / [`set_projection_expression(Option<String>)`](crate::client::fluent_builders::GetItem::set_projection_expression): <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>  <p>If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::GetItem::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::GetItem::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On success, responds with [`GetItemOutput`](crate::output::GetItemOutput) with field(s):
    ///   - [`item(Option<HashMap<String, AttributeValue>>)`](crate::output::GetItemOutput::item): <p>A map of attribute names to <code>AttributeValue</code> objects, as specified by <code>ProjectionExpression</code>.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::GetItemOutput::consumed_capacity): <p>The capacity units consumed by the <code>GetItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On failure, responds with [`SdkError<GetItemError>`](crate::error::GetItemError)
    pub fn get_item(&self) -> crate::client::fluent_builders::GetItem {
        crate::client::fluent_builders::GetItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportTable`](crate::client::fluent_builders::ImportTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::ImportTable::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::ImportTable::set_client_token): <p>Providing a <code>ClientToken</code> makes the call to <code>ImportTableInput</code> idempotent, meaning that multiple identical calls have the same effect as one single call.</p>  <p>A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.</p>  <p>If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an <code>IdempotentParameterMismatch</code> exception.</p>
    ///   - [`s3_bucket_source(S3BucketSource)`](crate::client::fluent_builders::ImportTable::s3_bucket_source) / [`set_s3_bucket_source(Option<S3BucketSource>)`](crate::client::fluent_builders::ImportTable::set_s3_bucket_source): <p> The S3 bucket that provides the source for the import. </p>
    ///   - [`input_format(InputFormat)`](crate::client::fluent_builders::ImportTable::input_format) / [`set_input_format(Option<InputFormat>)`](crate::client::fluent_builders::ImportTable::set_input_format): <p> The format of the source data. Valid values for <code>ImportFormat</code> are <code>CSV</code>, <code>DYNAMODB_JSON</code> or <code>ION</code>. </p>
    ///   - [`input_format_options(InputFormatOptions)`](crate::client::fluent_builders::ImportTable::input_format_options) / [`set_input_format_options(Option<InputFormatOptions>)`](crate::client::fluent_builders::ImportTable::set_input_format_options): <p> Additional properties that specify how the input is formatted, </p>
    ///   - [`input_compression_type(InputCompressionType)`](crate::client::fluent_builders::ImportTable::input_compression_type) / [`set_input_compression_type(Option<InputCompressionType>)`](crate::client::fluent_builders::ImportTable::set_input_compression_type): <p> Type of compression to be used on the input coming from the imported table. </p>
    ///   - [`table_creation_parameters(TableCreationParameters)`](crate::client::fluent_builders::ImportTable::table_creation_parameters) / [`set_table_creation_parameters(Option<TableCreationParameters>)`](crate::client::fluent_builders::ImportTable::set_table_creation_parameters): <p>Parameters for the table to import the data into. </p>
    /// - On success, responds with [`ImportTableOutput`](crate::output::ImportTableOutput) with field(s):
    ///   - [`import_table_description(Option<ImportTableDescription>)`](crate::output::ImportTableOutput::import_table_description): <p> Represents the properties of the table created for the import, and parameters of the import. The import parameters include import status, how many items were processed, and how many errors were encountered. </p>
    /// - On failure, responds with [`SdkError<ImportTableError>`](crate::error::ImportTableError)
    pub fn import_table(&self) -> crate::client::fluent_builders::ImportTable {
        crate::client::fluent_builders::ImportTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListBackups`](crate::client::fluent_builders::ListBackups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::ListBackups::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::ListBackups::set_table_name): <p>The backups from the table specified by <code>TableName</code> are listed. </p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListBackups::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListBackups::set_limit): <p>Maximum number of backups to return at once.</p>
    ///   - [`time_range_lower_bound(DateTime)`](crate::client::fluent_builders::ListBackups::time_range_lower_bound) / [`set_time_range_lower_bound(Option<DateTime>)`](crate::client::fluent_builders::ListBackups::set_time_range_lower_bound): <p>Only backups created after this time are listed. <code>TimeRangeLowerBound</code> is inclusive.</p>
    ///   - [`time_range_upper_bound(DateTime)`](crate::client::fluent_builders::ListBackups::time_range_upper_bound) / [`set_time_range_upper_bound(Option<DateTime>)`](crate::client::fluent_builders::ListBackups::set_time_range_upper_bound): <p>Only backups created before this time are listed. <code>TimeRangeUpperBound</code> is exclusive. </p>
    ///   - [`exclusive_start_backup_arn(impl Into<String>)`](crate::client::fluent_builders::ListBackups::exclusive_start_backup_arn) / [`set_exclusive_start_backup_arn(Option<String>)`](crate::client::fluent_builders::ListBackups::set_exclusive_start_backup_arn): <p> <code>LastEvaluatedBackupArn</code> is the Amazon Resource Name (ARN) of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a new <code>ListBackups</code> operation in order to fetch the next page of results. </p>
    ///   - [`backup_type(BackupTypeFilter)`](crate::client::fluent_builders::ListBackups::backup_type) / [`set_backup_type(Option<BackupTypeFilter>)`](crate::client::fluent_builders::ListBackups::set_backup_type): <p>The backups from the table specified by <code>BackupType</code> are listed.</p>  <p>Where <code>BackupType</code> can be:</p>  <ul>   <li> <p> <code>USER</code> - On-demand backup created by you. (The default setting if no other backup types are specified.)</p> </li>   <li> <p> <code>SYSTEM</code> - On-demand backup automatically created by DynamoDB.</p> </li>   <li> <p> <code>ALL</code> - All types of on-demand backups (USER and SYSTEM).</p> </li>  </ul>
    /// - On success, responds with [`ListBackupsOutput`](crate::output::ListBackupsOutput) with field(s):
    ///   - [`backup_summaries(Option<Vec<BackupSummary>>)`](crate::output::ListBackupsOutput::backup_summaries): <p>List of <code>BackupSummary</code> objects.</p>
    ///   - [`last_evaluated_backup_arn(Option<String>)`](crate::output::ListBackupsOutput::last_evaluated_backup_arn): <p> The ARN of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a new <code>ListBackups</code> operation in order to fetch the next page of results. </p>  <p> If <code>LastEvaluatedBackupArn</code> is empty, then the last page of results has been processed and there are no more results to be retrieved. </p>  <p> If <code>LastEvaluatedBackupArn</code> is not empty, this may or may not indicate that there is more data to be returned. All results are guaranteed to have been returned if and only if no value for <code>LastEvaluatedBackupArn</code> is returned. </p>
    /// - On failure, responds with [`SdkError<ListBackupsError>`](crate::error::ListBackupsError)
    pub fn list_backups(&self) -> crate::client::fluent_builders::ListBackups {
        crate::client::fluent_builders::ListBackups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListContributorInsights`](crate::client::fluent_builders::ListContributorInsights) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListContributorInsights::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::ListContributorInsights::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::ListContributorInsights::set_table_name): <p>The name of the table.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListContributorInsights::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListContributorInsights::set_next_token): <p>A token to for the desired page, if there is one.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListContributorInsights::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListContributorInsights::set_max_results): <p>Maximum number of results to return per page.</p>
    /// - On success, responds with [`ListContributorInsightsOutput`](crate::output::ListContributorInsightsOutput) with field(s):
    ///   - [`contributor_insights_summaries(Option<Vec<ContributorInsightsSummary>>)`](crate::output::ListContributorInsightsOutput::contributor_insights_summaries): <p>A list of ContributorInsightsSummary.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListContributorInsightsOutput::next_token): <p>A token to go to the next page if there is one.</p>
    /// - On failure, responds with [`SdkError<ListContributorInsightsError>`](crate::error::ListContributorInsightsError)
    pub fn list_contributor_insights(
        &self,
    ) -> crate::client::fluent_builders::ListContributorInsights {
        crate::client::fluent_builders::ListContributorInsights::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExports`](crate::client::fluent_builders::ListExports) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExports::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_arn(impl Into<String>)`](crate::client::fluent_builders::ListExports::table_arn) / [`set_table_arn(Option<String>)`](crate::client::fluent_builders::ListExports::set_table_arn): <p>The Amazon Resource Name (ARN) associated with the exported table.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExports::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExports::set_max_results): <p>Maximum number of results to return per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExports::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExports::set_next_token): <p>An optional string that, if supplied, must be copied from the output of a previous call to <code>ListExports</code>. When provided in this manner, the API fetches the next page of results.</p>
    /// - On success, responds with [`ListExportsOutput`](crate::output::ListExportsOutput) with field(s):
    ///   - [`export_summaries(Option<Vec<ExportSummary>>)`](crate::output::ListExportsOutput::export_summaries): <p>A list of <code>ExportSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExportsOutput::next_token): <p>If this value is returned, there are additional results to be displayed. To retrieve them, call <code>ListExports</code> again, with <code>NextToken</code> set to this value.</p>
    /// - On failure, responds with [`SdkError<ListExportsError>`](crate::error::ListExportsError)
    pub fn list_exports(&self) -> crate::client::fluent_builders::ListExports {
        crate::client::fluent_builders::ListExports::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListGlobalTables`](crate::client::fluent_builders::ListGlobalTables) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`exclusive_start_global_table_name(impl Into<String>)`](crate::client::fluent_builders::ListGlobalTables::exclusive_start_global_table_name) / [`set_exclusive_start_global_table_name(Option<String>)`](crate::client::fluent_builders::ListGlobalTables::set_exclusive_start_global_table_name): <p>The first global table name that this operation will evaluate.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListGlobalTables::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListGlobalTables::set_limit): <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>  <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    ///   - [`region_name(impl Into<String>)`](crate::client::fluent_builders::ListGlobalTables::region_name) / [`set_region_name(Option<String>)`](crate::client::fluent_builders::ListGlobalTables::set_region_name): <p>Lists the global tables in a specific Region.</p>
    /// - On success, responds with [`ListGlobalTablesOutput`](crate::output::ListGlobalTablesOutput) with field(s):
    ///   - [`global_tables(Option<Vec<GlobalTable>>)`](crate::output::ListGlobalTablesOutput::global_tables): <p>List of global table names.</p>
    ///   - [`last_evaluated_global_table_name(Option<String>)`](crate::output::ListGlobalTablesOutput::last_evaluated_global_table_name): <p>Last evaluated global table name.</p>
    /// - On failure, responds with [`SdkError<ListGlobalTablesError>`](crate::error::ListGlobalTablesError)
    pub fn list_global_tables(&self) -> crate::client::fluent_builders::ListGlobalTables {
        crate::client::fluent_builders::ListGlobalTables::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListImports`](crate::client::fluent_builders::ListImports) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListImports::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_arn(impl Into<String>)`](crate::client::fluent_builders::ListImports::table_arn) / [`set_table_arn(Option<String>)`](crate::client::fluent_builders::ListImports::set_table_arn): <p> The Amazon Resource Name (ARN) associated with the table that was imported to. </p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListImports::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::ListImports::set_page_size): <p> The number of <code>ImportSummary </code>objects returned in a single page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListImports::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListImports::set_next_token): <p> An optional string that, if supplied, must be copied from the output of a previous call to <code>ListImports</code>. When provided in this manner, the API fetches the next page of results. </p>
    /// - On success, responds with [`ListImportsOutput`](crate::output::ListImportsOutput) with field(s):
    ///   - [`import_summary_list(Option<Vec<ImportSummary>>)`](crate::output::ListImportsOutput::import_summary_list): <p> A list of <code>ImportSummary</code> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListImportsOutput::next_token): <p> If this value is returned, there are additional results to be displayed. To retrieve them, call <code>ListImports</code> again, with <code>NextToken</code> set to this value. </p>
    /// - On failure, responds with [`SdkError<ListImportsError>`](crate::error::ListImportsError)
    pub fn list_imports(&self) -> crate::client::fluent_builders::ListImports {
        crate::client::fluent_builders::ListImports::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTables`](crate::client::fluent_builders::ListTables) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTables::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`exclusive_start_table_name(impl Into<String>)`](crate::client::fluent_builders::ListTables::exclusive_start_table_name) / [`set_exclusive_start_table_name(Option<String>)`](crate::client::fluent_builders::ListTables::set_exclusive_start_table_name): <p>The first table name that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page of results.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListTables::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListTables::set_limit): <p>A maximum number of table names to return. If this parameter is not specified, the limit is 100.</p>
    /// - On success, responds with [`ListTablesOutput`](crate::output::ListTablesOutput) with field(s):
    ///   - [`table_names(Option<Vec<String>>)`](crate::output::ListTablesOutput::table_names): <p>The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.</p>  <p>If <code>LastEvaluatedTableName</code> also appears in the output, you can use this value as the <code>ExclusiveStartTableName</code> parameter in a subsequent <code>ListTables</code> request and obtain the next page of results.</p>
    ///   - [`last_evaluated_table_name(Option<String>)`](crate::output::ListTablesOutput::last_evaluated_table_name): <p>The name of the last table in the current page of results. Use this value as the <code>ExclusiveStartTableName</code> in a new request to obtain the next page of results, until all the table names are returned.</p>  <p>If you do not receive a <code>LastEvaluatedTableName</code> value in the response, this means that there are no more table names to be retrieved.</p>
    /// - On failure, responds with [`SdkError<ListTablesError>`](crate::error::ListTablesError)
    pub fn list_tables(&self) -> crate::client::fluent_builders::ListTables {
        crate::client::fluent_builders::ListTables::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsOfResource`](crate::client::fluent_builders::ListTagsOfResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsOfResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsOfResource::set_resource_arn): <p>The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTagsOfResource::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTagsOfResource::set_next_token): <p>An optional string that, if supplied, must be copied from the output of a previous call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.</p>
    /// - On success, responds with [`ListTagsOfResourceOutput`](crate::output::ListTagsOfResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsOfResourceOutput::tags): <p>The tags currently associated with the Amazon DynamoDB resource.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTagsOfResourceOutput::next_token): <p>If this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.</p>
    /// - On failure, responds with [`SdkError<ListTagsOfResourceError>`](crate::error::ListTagsOfResourceError)
    pub fn list_tags_of_resource(&self) -> crate::client::fluent_builders::ListTagsOfResource {
        crate::client::fluent_builders::ListTagsOfResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutItem`](crate::client::fluent_builders::PutItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::PutItem::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::PutItem::set_table_name): <p>The name of the table to contain the item.</p>
    ///   - [`item(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::PutItem::item) / [`set_item(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::PutItem::set_item): <p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p>  <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p>  <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>  <p>Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.</p>  <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>  <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>
    ///   - [`expected(HashMap<String, ExpectedAttributeValue>)`](crate::client::fluent_builders::PutItem::expected) / [`set_expected(Option<HashMap<String, ExpectedAttributeValue>>)`](crate::client::fluent_builders::PutItem::set_expected): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`return_values(ReturnValue)`](crate::client::fluent_builders::PutItem::return_values) / [`set_return_values(Option<ReturnValue>)`](crate::client::fluent_builders::PutItem::set_return_values): <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p>  <ul>   <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li>   <li> <p> <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the content of the old item is returned.</p> </li>  </ul>  <p>The values returned are strongly consistent.</p>  <p>There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.</p> <note>   <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however, <code>PutItem</code> does not recognize any values other than <code>NONE</code> or <code>ALL_OLD</code>.</p>  </note>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::PutItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::PutItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`return_item_collection_metrics(ReturnItemCollectionMetrics)`](crate::client::fluent_builders::PutItem::return_item_collection_metrics) / [`set_return_item_collection_metrics(Option<ReturnItemCollectionMetrics>)`](crate::client::fluent_builders::PutItem::set_return_item_collection_metrics): <p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    ///   - [`conditional_operator(ConditionalOperator)`](crate::client::fluent_builders::PutItem::conditional_operator) / [`set_conditional_operator(Option<ConditionalOperator>)`](crate::client::fluent_builders::PutItem::set_conditional_operator): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`condition_expression(impl Into<String>)`](crate::client::fluent_builders::PutItem::condition_expression) / [`set_condition_expression(Option<String>)`](crate::client::fluent_builders::PutItem::set_condition_expression): <p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to succeed.</p>  <p>An expression can contain any of the following:</p>  <ul>   <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li>   <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li>   <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li>  </ul>  <p>For more information on condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::PutItem::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::PutItem::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_values(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::PutItem::expression_attribute_values) / [`set_expression_attribute_values(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::PutItem::set_expression_attribute_values): <p>One or more values that can be substituted in an expression.</p>  <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>  <p> <code>Available | Backordered | Discontinued</code> </p>  <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>  <p> <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code> </p>  <p>You could then use these values in an expression, such as this:</p>  <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p>  <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On success, responds with [`PutItemOutput`](crate::output::PutItemOutput) with field(s):
    ///   - [`attributes(Option<HashMap<String, AttributeValue>>)`](crate::output::PutItemOutput::attributes): <p>The attribute values as they appeared before the <code>PutItem</code> operation, but only if <code>ReturnValues</code> is specified as <code>ALL_OLD</code> in the request. Each element consists of an attribute name and an attribute value.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::PutItemOutput::consumed_capacity): <p>The capacity units consumed by the <code>PutItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`item_collection_metrics(Option<ItemCollectionMetrics>)`](crate::output::PutItemOutput::item_collection_metrics): <p>Information about item collections, if any, that were affected by the <code>PutItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p>  <p>Each <code>ItemCollectionMetrics</code> element consists of:</p>  <ul>   <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li>   <li> <p> <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<PutItemError>`](crate::error::PutItemError)
    pub fn put_item(&self) -> crate::client::fluent_builders::PutItem {
        crate::client::fluent_builders::PutItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Query`](crate::client::fluent_builders::Query) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::Query::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::Query::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::Query::set_table_name): <p>The name of the table containing the requested items.</p>
    ///   - [`index_name(impl Into<String>)`](crate::client::fluent_builders::Query::index_name) / [`set_index_name(Option<String>)`](crate::client::fluent_builders::Query::set_index_name): <p>The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code> </p>
    ///   - [`select(Select)`](crate::client::fluent_builders::Query::select) / [`set_select(Option<Select>)`](crate::client::fluent_builders::Query::set_select): <p>The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.</p>  <ul>   <li> <p> <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.</p> </li>   <li> <p> <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p> </li>   <li> <p> <code>COUNT</code> - Returns the number of matching items, rather than the matching items themselves.</p> </li>   <li> <p> <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>ProjectionExpression</code>. This return value is equivalent to specifying <code>ProjectionExpression</code> without specifying any value for <code>Select</code>.</p> <p>If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.</p> <p>If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.</p> </li>  </ul>  <p>If neither <code>Select</code> nor <code>ProjectionExpression</code> are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot use both <code>Select</code> and <code>ProjectionExpression</code> together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying <code>ProjectionExpression</code> without any value for <code>Select</code>.)</p> <note>   <p>If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code> can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code> will return an error.</p>  </note>
    ///   - [`attributes_to_get(Vec<String>)`](crate::client::fluent_builders::Query::attributes_to_get) / [`set_attributes_to_get(Option<Vec<String>>)`](crate::client::fluent_builders::Query::set_attributes_to_get): <p>This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::Query::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::Query::set_limit): <p>The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query and Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`consistent_read(bool)`](crate::client::fluent_builders::Query::consistent_read) / [`set_consistent_read(Option<bool>)`](crate::client::fluent_builders::Query::set_consistent_read): <p>Determines the read consistency model: If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>  <p>Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to <code>true</code>, you will receive a <code>ValidationException</code>.</p>
    ///   - [`key_conditions(HashMap<String, Condition>)`](crate::client::fluent_builders::Query::key_conditions) / [`set_key_conditions(Option<HashMap<String, Condition>>)`](crate::client::fluent_builders::Query::set_key_conditions): <p>This is a legacy parameter. Use <code>KeyConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`query_filter(HashMap<String, Condition>)`](crate::client::fluent_builders::Query::query_filter) / [`set_query_filter(Option<HashMap<String, Condition>>)`](crate::client::fluent_builders::Query::set_query_filter): <p>This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`conditional_operator(ConditionalOperator)`](crate::client::fluent_builders::Query::conditional_operator) / [`set_conditional_operator(Option<ConditionalOperator>)`](crate::client::fluent_builders::Query::set_conditional_operator): <p>This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`scan_index_forward(bool)`](crate::client::fluent_builders::Query::scan_index_forward) / [`set_scan_index_forward(Option<bool>)`](crate::client::fluent_builders::Query::set_scan_index_forward): <p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p>  <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p>  <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>
    ///   - [`exclusive_start_key(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::Query::exclusive_start_key) / [`set_exclusive_start_key(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::Query::set_exclusive_start_key): <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>  <p>The data type for <code>ExclusiveStartKey</code> must be String, Number, or Binary. No set data types are allowed.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::Query::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::Query::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`projection_expression(impl Into<String>)`](crate::client::fluent_builders::Query::projection_expression) / [`set_projection_expression(Option<String>)`](crate::client::fluent_builders::Query::set_projection_expression): <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>  <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`filter_expression(impl Into<String>)`](crate::client::fluent_builders::Query::filter_expression) / [`set_filter_expression(Option<String>)`](crate::client::fluent_builders::Query::set_filter_expression): <p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code> criteria are not returned.</p>  <p>A <code>FilterExpression</code> does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.</p> <note>   <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.</p>  </note>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`key_condition_expression(impl Into<String>)`](crate::client::fluent_builders::Query::key_condition_expression) / [`set_key_condition_expression(Option<String>)`](crate::client::fluent_builders::Query::set_key_condition_expression): <p>The condition that specifies the key values for items to be retrieved by the <code>Query</code> action.</p>  <p>The condition must perform an equality test on a single partition key value.</p>  <p>The condition can optionally perform one of several comparison tests on a single sort key value. This allows <code>Query</code> to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.</p>  <p>The partition key equality test is required, and must be specified in the following format:</p>  <p> <code>partitionKeyName</code> <i>=</i> <code>:partitionkeyval</code> </p>  <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p>  <p> <code>partitionKeyName</code> <code>=</code> <code>:partitionkeyval</code> <code>AND</code> <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> </p>  <p>Valid comparisons for the sort key condition are as follows:</p>  <ul>   <li> <p> <code>sortKeyName</code> <code>=</code> <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p> </li>   <li> <p> <code>sortKeyName</code> <code>&lt;</code> <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p> </li>   <li> <p> <code>sortKeyName</code> <code>&lt;=</code> <code>:sortkeyval</code> - true if the sort key value is less than or equal to <code>:sortkeyval</code>.</p> </li>   <li> <p> <code>sortKeyName</code> <code>&gt;</code> <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p> </li>   <li> <p> <code>sortKeyName</code> <code>&gt;= </code> <code>:sortkeyval</code> - true if the sort key value is greater than or equal to <code>:sortkeyval</code>.</p> </li>   <li> <p> <code>sortKeyName</code> <code>BETWEEN</code> <code>:sortkeyval1</code> <code>AND</code> <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p> </li>   <li> <p> <code>begins_with (</code> <code>sortKeyName</code>, <code>:sortkeyval</code> <code>)</code> - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name <code>begins_with</code> is case-sensitive.</p> </li>  </ul>  <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p>  <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved word:</p>  <ul>   <li> <p> <code>Size = :myval</code> </p> </li>  </ul>  <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p>  <ul>   <li> <p> <code>#S = :myval</code> </p> </li>  </ul>  <p>For a list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>  <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using Placeholders for Attribute Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::Query::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::Query::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_values(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::Query::expression_attribute_values) / [`set_expression_attribute_values(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::Query::set_expression_attribute_values): <p>One or more values that can be substituted in an expression.</p>  <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>  <p> <code>Available | Backordered | Discontinued</code> </p>  <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>  <p> <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code> </p>  <p>You could then use these values in an expression, such as this:</p>  <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p>  <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On success, responds with [`QueryOutput`](crate::output::QueryOutput) with field(s):
    ///   - [`items(Option<Vec<HashMap<String, AttributeValue>>>)`](crate::output::QueryOutput::items): <p>An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    ///   - [`count(i32)`](crate::output::QueryOutput::count): <p>The number of items in the response.</p>  <p>If you used a <code>QueryFilter</code> in the request, then <code>Count</code> is the number of items returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items before the filter was applied.</p>  <p>If you did not use a filter in the request, then <code>Count</code> and <code>ScannedCount</code> are the same.</p>
    ///   - [`scanned_count(i32)`](crate::output::QueryOutput::scanned_count): <p>The number of items evaluated, before any <code>QueryFilter</code> is applied. A high <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient <code>Query</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>  <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as <code>Count</code>.</p>
    ///   - [`last_evaluated_key(Option<HashMap<String, AttributeValue>>)`](crate::output::QueryOutput::last_evaluated_key): <p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>  <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>  <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::QueryOutput::consumed_capacity): <p>The capacity units consumed by the <code>Query</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On failure, responds with [`SdkError<QueryError>`](crate::error::QueryError)
    pub fn query(&self) -> crate::client::fluent_builders::Query {
        crate::client::fluent_builders::Query::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RestoreTableFromBackup`](crate::client::fluent_builders::RestoreTableFromBackup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`target_table_name(impl Into<String>)`](crate::client::fluent_builders::RestoreTableFromBackup::target_table_name) / [`set_target_table_name(Option<String>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_target_table_name): <p>The name of the new table to which the backup must be restored.</p>
    ///   - [`backup_arn(impl Into<String>)`](crate::client::fluent_builders::RestoreTableFromBackup::backup_arn) / [`set_backup_arn(Option<String>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_backup_arn): <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    ///   - [`billing_mode_override(BillingMode)`](crate::client::fluent_builders::RestoreTableFromBackup::billing_mode_override) / [`set_billing_mode_override(Option<BillingMode>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_billing_mode_override): <p>The billing mode of the restored table.</p>
    ///   - [`global_secondary_index_override(Vec<GlobalSecondaryIndex>)`](crate::client::fluent_builders::RestoreTableFromBackup::global_secondary_index_override) / [`set_global_secondary_index_override(Option<Vec<GlobalSecondaryIndex>>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_global_secondary_index_override): <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    ///   - [`local_secondary_index_override(Vec<LocalSecondaryIndex>)`](crate::client::fluent_builders::RestoreTableFromBackup::local_secondary_index_override) / [`set_local_secondary_index_override(Option<Vec<LocalSecondaryIndex>>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_local_secondary_index_override): <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    ///   - [`provisioned_throughput_override(ProvisionedThroughput)`](crate::client::fluent_builders::RestoreTableFromBackup::provisioned_throughput_override) / [`set_provisioned_throughput_override(Option<ProvisionedThroughput>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_provisioned_throughput_override): <p>Provisioned throughput settings for the restored table.</p>
    ///   - [`sse_specification_override(SseSpecification)`](crate::client::fluent_builders::RestoreTableFromBackup::sse_specification_override) / [`set_sse_specification_override(Option<SseSpecification>)`](crate::client::fluent_builders::RestoreTableFromBackup::set_sse_specification_override): <p>The new server-side encryption settings for the restored table.</p>
    /// - On success, responds with [`RestoreTableFromBackupOutput`](crate::output::RestoreTableFromBackupOutput) with field(s):
    ///   - [`table_description(Option<TableDescription>)`](crate::output::RestoreTableFromBackupOutput::table_description): <p>The description of the table created from an existing backup.</p>
    /// - On failure, responds with [`SdkError<RestoreTableFromBackupError>`](crate::error::RestoreTableFromBackupError)
    pub fn restore_table_from_backup(
        &self,
    ) -> crate::client::fluent_builders::RestoreTableFromBackup {
        crate::client::fluent_builders::RestoreTableFromBackup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RestoreTableToPointInTime`](crate::client::fluent_builders::RestoreTableToPointInTime) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_table_arn(impl Into<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::source_table_arn) / [`set_source_table_arn(Option<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_source_table_arn): <p>The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).</p>
    ///   - [`source_table_name(impl Into<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::source_table_name) / [`set_source_table_name(Option<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_source_table_name): <p>Name of the source table that is being restored.</p>
    ///   - [`target_table_name(impl Into<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::target_table_name) / [`set_target_table_name(Option<String>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_target_table_name): <p>The name of the new table to which it must be restored to.</p>
    ///   - [`use_latest_restorable_time(bool)`](crate::client::fluent_builders::RestoreTableToPointInTime::use_latest_restorable_time) / [`set_use_latest_restorable_time(Option<bool>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_use_latest_restorable_time): <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. </p>
    ///   - [`restore_date_time(DateTime)`](crate::client::fluent_builders::RestoreTableToPointInTime::restore_date_time) / [`set_restore_date_time(Option<DateTime>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_restore_date_time): <p>Time in the past to restore the table to.</p>
    ///   - [`billing_mode_override(BillingMode)`](crate::client::fluent_builders::RestoreTableToPointInTime::billing_mode_override) / [`set_billing_mode_override(Option<BillingMode>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_billing_mode_override): <p>The billing mode of the restored table.</p>
    ///   - [`global_secondary_index_override(Vec<GlobalSecondaryIndex>)`](crate::client::fluent_builders::RestoreTableToPointInTime::global_secondary_index_override) / [`set_global_secondary_index_override(Option<Vec<GlobalSecondaryIndex>>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_global_secondary_index_override): <p>List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    ///   - [`local_secondary_index_override(Vec<LocalSecondaryIndex>)`](crate::client::fluent_builders::RestoreTableToPointInTime::local_secondary_index_override) / [`set_local_secondary_index_override(Option<Vec<LocalSecondaryIndex>>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_local_secondary_index_override): <p>List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.</p>
    ///   - [`provisioned_throughput_override(ProvisionedThroughput)`](crate::client::fluent_builders::RestoreTableToPointInTime::provisioned_throughput_override) / [`set_provisioned_throughput_override(Option<ProvisionedThroughput>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_provisioned_throughput_override): <p>Provisioned throughput settings for the restored table.</p>
    ///   - [`sse_specification_override(SseSpecification)`](crate::client::fluent_builders::RestoreTableToPointInTime::sse_specification_override) / [`set_sse_specification_override(Option<SseSpecification>)`](crate::client::fluent_builders::RestoreTableToPointInTime::set_sse_specification_override): <p>The new server-side encryption settings for the restored table.</p>
    /// - On success, responds with [`RestoreTableToPointInTimeOutput`](crate::output::RestoreTableToPointInTimeOutput) with field(s):
    ///   - [`table_description(Option<TableDescription>)`](crate::output::RestoreTableToPointInTimeOutput::table_description): <p>Represents the properties of a table.</p>
    /// - On failure, responds with [`SdkError<RestoreTableToPointInTimeError>`](crate::error::RestoreTableToPointInTimeError)
    pub fn restore_table_to_point_in_time(
        &self,
    ) -> crate::client::fluent_builders::RestoreTableToPointInTime {
        crate::client::fluent_builders::RestoreTableToPointInTime::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`Scan`](crate::client::fluent_builders::Scan) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::Scan::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::Scan::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::Scan::set_table_name): <p>The name of the table containing the requested items; or, if you provide <code>IndexName</code>, the name of the table to which that index belongs.</p>
    ///   - [`index_name(impl Into<String>)`](crate::client::fluent_builders::Scan::index_name) / [`set_index_name(Option<String>)`](crate::client::fluent_builders::Scan::set_index_name): <p>The name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>.</p>
    ///   - [`attributes_to_get(Vec<String>)`](crate::client::fluent_builders::Scan::attributes_to_get) / [`set_attributes_to_get(Option<Vec<String>>)`](crate::client::fluent_builders::Scan::set_attributes_to_get): <p>This is a legacy parameter. Use <code>ProjectionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::Scan::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::Scan::set_limit): <p>The maximum number of items to evaluate (not necessarily the number of matching items). If DynamoDB processes the number of items up to the limit while processing the results, it stops the operation and returns the matching values up to that point, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can pick up where you left off. Also, if the processed dataset size exceeds 1 MB before DynamoDB reaches this limit, it stops the operation and returns the matching values up to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Working with Queries</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`select(Select)`](crate::client::fluent_builders::Scan::select) / [`set_select(Option<Select>)`](crate::client::fluent_builders::Scan::set_select): <p>The attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.</p>  <ul>   <li> <p> <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.</p> </li>   <li> <p> <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p> </li>   <li> <p> <code>COUNT</code> - Returns the number of matching items, rather than the matching items themselves.</p> </li>   <li> <p> <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in <code>ProjectionExpression</code>. This return value is equivalent to specifying <code>ProjectionExpression</code> without specifying any value for <code>Select</code>.</p> <p>If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency.</p> <p>If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.</p> </li>  </ul>  <p>If neither <code>Select</code> nor <code>ProjectionExpression</code> are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot use both <code>Select</code> and <code>ProjectionExpression</code> together in a single request, unless the value for <code>Select</code> is <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying <code>ProjectionExpression</code> without any value for <code>Select</code>.)</p> <note>   <p>If you use the <code>ProjectionExpression</code> parameter, then the value for <code>Select</code> can only be <code>SPECIFIC_ATTRIBUTES</code>. Any other value for <code>Select</code> will return an error.</p>  </note>
    ///   - [`scan_filter(HashMap<String, Condition>)`](crate::client::fluent_builders::Scan::scan_filter) / [`set_scan_filter(Option<HashMap<String, Condition>>)`](crate::client::fluent_builders::Scan::set_scan_filter): <p>This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`conditional_operator(ConditionalOperator)`](crate::client::fluent_builders::Scan::conditional_operator) / [`set_conditional_operator(Option<ConditionalOperator>)`](crate::client::fluent_builders::Scan::set_conditional_operator): <p>This is a legacy parameter. Use <code>FilterExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`exclusive_start_key(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::Scan::exclusive_start_key) / [`set_exclusive_start_key(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::Scan::set_exclusive_start_key): <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>  <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>  <p>In a parallel scan, a <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::Scan::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::Scan::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`total_segments(i32)`](crate::client::fluent_builders::Scan::total_segments) / [`set_total_segments(Option<i32>)`](crate::client::fluent_builders::Scan::set_total_segments): <p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of segments into which the <code>Scan</code> operation will be divided. The value of <code>TotalSegments</code> corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a <code>TotalSegments</code> value of 4.</p>  <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will be sequential rather than parallel.</p>  <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>
    ///   - [`segment(i32)`](crate::client::fluent_builders::Scan::segment) / [`set_segment(Option<i32>)`](crate::client::fluent_builders::Scan::set_segment): <p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be scanned by an application worker.</p>  <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value of 0, the second thread specifies 1, and so on.</p>  <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code> operation.</p>  <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value provided for <code>TotalSegments</code>.</p>  <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>
    ///   - [`projection_expression(impl Into<String>)`](crate::client::fluent_builders::Scan::projection_expression) / [`set_projection_expression(Option<String>)`](crate::client::fluent_builders::Scan::set_projection_expression): <p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>  <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`filter_expression(impl Into<String>)`](crate::client::fluent_builders::Scan::filter_expression) / [`set_filter_expression(Option<String>)`](crate::client::fluent_builders::Scan::set_filter_expression): <p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code> criteria are not returned.</p> <note>   <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.</p>  </note>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Query.FilterExpression">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::Scan::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::Scan::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_values(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::Scan::expression_attribute_values) / [`set_expression_attribute_values(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::Scan::set_expression_attribute_values): <p>One or more values that can be substituted in an expression.</p>  <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <code>ProductStatus</code> attribute was one of the following: </p>  <p> <code>Available | Backordered | Discontinued</code> </p>  <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>  <p> <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code> </p>  <p>You could then use these values in an expression, such as this:</p>  <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p>  <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`consistent_read(bool)`](crate::client::fluent_builders::Scan::consistent_read) / [`set_consistent_read(Option<bool>)`](crate::client::fluent_builders::Scan::set_consistent_read): <p>A Boolean value that determines the read consistency model during the scan:</p>  <ul>   <li> <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from <code>Scan</code> might not contain the results from other recently completed write operations (<code>PutItem</code>, <code>UpdateItem</code>, or <code>DeleteItem</code>).</p> </li>   <li> <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p> </li>  </ul>  <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p>  <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>
    /// - On success, responds with [`ScanOutput`](crate::output::ScanOutput) with field(s):
    ///   - [`items(Option<Vec<HashMap<String, AttributeValue>>>)`](crate::output::ScanOutput::items): <p>An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    ///   - [`count(i32)`](crate::output::ScanOutput::count): <p>The number of items in the response.</p>  <p>If you set <code>ScanFilter</code> in the request, then <code>Count</code> is the number of items returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items before the filter was applied.</p>  <p>If you did not use a filter in the request, then <code>Count</code> is the same as <code>ScannedCount</code>.</p>
    ///   - [`scanned_count(i32)`](crate::output::ScanOutput::scanned_count): <p>The number of items evaluated, before any <code>ScanFilter</code> is applied. A high <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient <code>Scan</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>  <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as <code>Count</code>.</p>
    ///   - [`last_evaluated_key(Option<HashMap<String, AttributeValue>>)`](crate::output::ScanOutput::last_evaluated_key): <p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>  <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>  <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::ScanOutput::consumed_capacity): <p>The capacity units consumed by the <code>Scan</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On failure, responds with [`SdkError<ScanError>`](crate::error::ScanError)
    pub fn scan(&self) -> crate::client::fluent_builders::Scan {
        crate::client::fluent_builders::Scan::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to be assigned to the Amazon DynamoDB resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TransactGetItems`](crate::client::fluent_builders::TransactGetItems) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transact_items(Vec<TransactGetItem>)`](crate::client::fluent_builders::TransactGetItems::transact_items) / [`set_transact_items(Option<Vec<TransactGetItem>>)`](crate::client::fluent_builders::TransactGetItems::set_transact_items): <p>An ordered array of up to 100 <code>TransactGetItem</code> objects, each of which contains a <code>Get</code> structure.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::TransactGetItems::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::TransactGetItems::set_return_consumed_capacity): <p>A value of <code>TOTAL</code> causes consumed capacity information to be returned, and a value of <code>NONE</code> prevents that information from being returned. No other value is valid.</p>
    /// - On success, responds with [`TransactGetItemsOutput`](crate::output::TransactGetItemsOutput) with field(s):
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::TransactGetItemsOutput::consumed_capacity): <p>If the <i>ReturnConsumedCapacity</i> value was <code>TOTAL</code>, this is an array of <code>ConsumedCapacity</code> objects, one for each table addressed by <code>TransactGetItem</code> objects in the <i>TransactItems</i> parameter. These <code>ConsumedCapacity</code> objects report the read-capacity units consumed by the <code>TransactGetItems</code> call in that table.</p>
    ///   - [`responses(Option<Vec<ItemResponse>>)`](crate::output::TransactGetItemsOutput::responses): <p>An ordered array of up to 100 <code>ItemResponse</code> objects, each of which corresponds to the <code>TransactGetItem</code> object in the same position in the <i>TransactItems</i> array. Each <code>ItemResponse</code> object contains a Map of the name-value pairs that are the projected attributes of the requested item.</p>  <p>If a requested item could not be retrieved, the corresponding <code>ItemResponse</code> object is Null, or if the requested item has no projected attributes, the corresponding <code>ItemResponse</code> object is an empty Map. </p>
    /// - On failure, responds with [`SdkError<TransactGetItemsError>`](crate::error::TransactGetItemsError)
    pub fn transact_get_items(&self) -> crate::client::fluent_builders::TransactGetItems {
        crate::client::fluent_builders::TransactGetItems::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TransactWriteItems`](crate::client::fluent_builders::TransactWriteItems) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`transact_items(Vec<TransactWriteItem>)`](crate::client::fluent_builders::TransactWriteItems::transact_items) / [`set_transact_items(Option<Vec<TransactWriteItem>>)`](crate::client::fluent_builders::TransactWriteItems::set_transact_items): <p>An ordered array of up to 100 <code>TransactWriteItem</code> objects, each of which contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or <code>Delete</code> object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item. </p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::TransactWriteItems::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::TransactWriteItems::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`return_item_collection_metrics(ReturnItemCollectionMetrics)`](crate::client::fluent_builders::TransactWriteItems::return_item_collection_metrics) / [`set_return_item_collection_metrics(Option<ReturnItemCollectionMetrics>)`](crate::client::fluent_builders::TransactWriteItems::set_return_item_collection_metrics): <p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned. </p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::TransactWriteItems::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::TransactWriteItems::set_client_request_token): <p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code> idempotent, meaning that multiple identical calls have the same effect as one single call.</p>  <p>Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the <code>ReturnConsumedCapacity&gt;</code> parameter is set, then the initial <code>TransactWriteItems</code> call returns the amount of write capacity units consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with the same client token return the number of read capacity units consumed in reading the item.</p>  <p>A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent.</p>  <p>If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an <code>IdempotentParameterMismatch</code> exception.</p>
    /// - On success, responds with [`TransactWriteItemsOutput`](crate::output::TransactWriteItemsOutput) with field(s):
    ///   - [`consumed_capacity(Option<Vec<ConsumedCapacity>>)`](crate::output::TransactWriteItemsOutput::consumed_capacity): <p>The capacity units consumed by the entire <code>TransactWriteItems</code> operation. The values of the list are ordered according to the ordering of the <code>TransactItems</code> request parameter. </p>
    ///   - [`item_collection_metrics(Option<HashMap<String, Vec<ItemCollectionMetrics>>>)`](crate::output::TransactWriteItemsOutput::item_collection_metrics): <p>A list of tables that were processed by <code>TransactWriteItems</code> and, for each table, information about any item collections that were affected by individual <code>UpdateItem</code>, <code>PutItem</code>, or <code>DeleteItem</code> operations. </p>
    /// - On failure, responds with [`SdkError<TransactWriteItemsError>`](crate::error::TransactWriteItemsError)
    pub fn transact_write_items(&self) -> crate::client::fluent_builders::TransactWriteItems {
        crate::client::fluent_builders::TransactWriteItems::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateContinuousBackups`](crate::client::fluent_builders::UpdateContinuousBackups) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateContinuousBackups::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateContinuousBackups::set_table_name): <p>The name of the table.</p>
    ///   - [`point_in_time_recovery_specification(PointInTimeRecoverySpecification)`](crate::client::fluent_builders::UpdateContinuousBackups::point_in_time_recovery_specification) / [`set_point_in_time_recovery_specification(Option<PointInTimeRecoverySpecification>)`](crate::client::fluent_builders::UpdateContinuousBackups::set_point_in_time_recovery_specification): <p>Represents the settings used to enable point in time recovery.</p>
    /// - On success, responds with [`UpdateContinuousBackupsOutput`](crate::output::UpdateContinuousBackupsOutput) with field(s):
    ///   - [`continuous_backups_description(Option<ContinuousBackupsDescription>)`](crate::output::UpdateContinuousBackupsOutput::continuous_backups_description): <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    /// - On failure, responds with [`SdkError<UpdateContinuousBackupsError>`](crate::error::UpdateContinuousBackupsError)
    pub fn update_continuous_backups(
        &self,
    ) -> crate::client::fluent_builders::UpdateContinuousBackups {
        crate::client::fluent_builders::UpdateContinuousBackups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateContributorInsights`](crate::client::fluent_builders::UpdateContributorInsights) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateContributorInsights::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateContributorInsights::set_table_name): <p>The name of the table.</p>
    ///   - [`index_name(impl Into<String>)`](crate::client::fluent_builders::UpdateContributorInsights::index_name) / [`set_index_name(Option<String>)`](crate::client::fluent_builders::UpdateContributorInsights::set_index_name): <p>The global secondary index name, if applicable.</p>
    ///   - [`contributor_insights_action(ContributorInsightsAction)`](crate::client::fluent_builders::UpdateContributorInsights::contributor_insights_action) / [`set_contributor_insights_action(Option<ContributorInsightsAction>)`](crate::client::fluent_builders::UpdateContributorInsights::set_contributor_insights_action): <p>Represents the contributor insights action.</p>
    /// - On success, responds with [`UpdateContributorInsightsOutput`](crate::output::UpdateContributorInsightsOutput) with field(s):
    ///   - [`table_name(Option<String>)`](crate::output::UpdateContributorInsightsOutput::table_name): <p>The name of the table.</p>
    ///   - [`index_name(Option<String>)`](crate::output::UpdateContributorInsightsOutput::index_name): <p>The name of the global secondary index, if applicable.</p>
    ///   - [`contributor_insights_status(Option<ContributorInsightsStatus>)`](crate::output::UpdateContributorInsightsOutput::contributor_insights_status): <p>The status of contributor insights</p>
    /// - On failure, responds with [`SdkError<UpdateContributorInsightsError>`](crate::error::UpdateContributorInsightsError)
    pub fn update_contributor_insights(
        &self,
    ) -> crate::client::fluent_builders::UpdateContributorInsights {
        crate::client::fluent_builders::UpdateContributorInsights::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGlobalTable`](crate::client::fluent_builders::UpdateGlobalTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateGlobalTable::global_table_name) / [`set_global_table_name(Option<String>)`](crate::client::fluent_builders::UpdateGlobalTable::set_global_table_name): <p>The global table name.</p>
    ///   - [`replica_updates(Vec<ReplicaUpdate>)`](crate::client::fluent_builders::UpdateGlobalTable::replica_updates) / [`set_replica_updates(Option<Vec<ReplicaUpdate>>)`](crate::client::fluent_builders::UpdateGlobalTable::set_replica_updates): <p>A list of Regions that should be added or removed from the global table.</p>
    /// - On success, responds with [`UpdateGlobalTableOutput`](crate::output::UpdateGlobalTableOutput) with field(s):
    ///   - [`global_table_description(Option<GlobalTableDescription>)`](crate::output::UpdateGlobalTableOutput::global_table_description): <p>Contains the details of the global table.</p>
    /// - On failure, responds with [`SdkError<UpdateGlobalTableError>`](crate::error::UpdateGlobalTableError)
    pub fn update_global_table(&self) -> crate::client::fluent_builders::UpdateGlobalTable {
        crate::client::fluent_builders::UpdateGlobalTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateGlobalTableSettings`](crate::client::fluent_builders::UpdateGlobalTableSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::global_table_name) / [`set_global_table_name(Option<String>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_global_table_name): <p>The name of the global table</p>
    ///   - [`global_table_billing_mode(BillingMode)`](crate::client::fluent_builders::UpdateGlobalTableSettings::global_table_billing_mode) / [`set_global_table_billing_mode(Option<BillingMode>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_global_table_billing_mode): <p>The billing mode of the global table. If <code>GlobalTableBillingMode</code> is not specified, the global table defaults to <code>PROVISIONED</code> capacity billing mode.</p>  <ul>   <li> <p> <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p> </li>   <li> <p> <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>. </p> </li>  </ul>
    ///   - [`global_table_provisioned_write_capacity_units(i64)`](crate::client::fluent_builders::UpdateGlobalTableSettings::global_table_provisioned_write_capacity_units) / [`set_global_table_provisioned_write_capacity_units(Option<i64>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_global_table_provisioned_write_capacity_units): <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code> </p>
    ///   - [`global_table_provisioned_write_capacity_auto_scaling_settings_update(AutoScalingSettingsUpdate)`](crate::client::fluent_builders::UpdateGlobalTableSettings::global_table_provisioned_write_capacity_auto_scaling_settings_update) / [`set_global_table_provisioned_write_capacity_auto_scaling_settings_update(Option<AutoScalingSettingsUpdate>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_global_table_provisioned_write_capacity_auto_scaling_settings_update): <p>Auto scaling settings for managing provisioned write capacity for the global table.</p>
    ///   - [`global_table_global_secondary_index_settings_update(Vec<GlobalTableGlobalSecondaryIndexSettingsUpdate>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::global_table_global_secondary_index_settings_update) / [`set_global_table_global_secondary_index_settings_update(Option<Vec<GlobalTableGlobalSecondaryIndexSettingsUpdate>>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_global_table_global_secondary_index_settings_update): <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
    ///   - [`replica_settings_update(Vec<ReplicaSettingsUpdate>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::replica_settings_update) / [`set_replica_settings_update(Option<Vec<ReplicaSettingsUpdate>>)`](crate::client::fluent_builders::UpdateGlobalTableSettings::set_replica_settings_update): <p>Represents the settings for a global table in a Region that will be modified.</p>
    /// - On success, responds with [`UpdateGlobalTableSettingsOutput`](crate::output::UpdateGlobalTableSettingsOutput) with field(s):
    ///   - [`global_table_name(Option<String>)`](crate::output::UpdateGlobalTableSettingsOutput::global_table_name): <p>The name of the global table.</p>
    ///   - [`replica_settings(Option<Vec<ReplicaSettingsDescription>>)`](crate::output::UpdateGlobalTableSettingsOutput::replica_settings): <p>The Region-specific settings for the global table.</p>
    /// - On failure, responds with [`SdkError<UpdateGlobalTableSettingsError>`](crate::error::UpdateGlobalTableSettingsError)
    pub fn update_global_table_settings(
        &self,
    ) -> crate::client::fluent_builders::UpdateGlobalTableSettings {
        crate::client::fluent_builders::UpdateGlobalTableSettings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateItem`](crate::client::fluent_builders::UpdateItem) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateItem::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateItem::set_table_name): <p>The name of the table containing the item to update.</p>
    ///   - [`key(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::UpdateItem::key) / [`set_key(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::UpdateItem::set_key): <p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p>  <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    ///   - [`attribute_updates(HashMap<String, AttributeValueUpdate>)`](crate::client::fluent_builders::UpdateItem::attribute_updates) / [`set_attribute_updates(Option<HashMap<String, AttributeValueUpdate>>)`](crate::client::fluent_builders::UpdateItem::set_attribute_updates): <p>This is a legacy parameter. Use <code>UpdateExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expected(HashMap<String, ExpectedAttributeValue>)`](crate::client::fluent_builders::UpdateItem::expected) / [`set_expected(Option<HashMap<String, ExpectedAttributeValue>>)`](crate::client::fluent_builders::UpdateItem::set_expected): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`conditional_operator(ConditionalOperator)`](crate::client::fluent_builders::UpdateItem::conditional_operator) / [`set_conditional_operator(Option<ConditionalOperator>)`](crate::client::fluent_builders::UpdateItem::set_conditional_operator): <p>This is a legacy parameter. Use <code>ConditionExpression</code> instead. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`return_values(ReturnValue)`](crate::client::fluent_builders::UpdateItem::return_values) / [`set_return_values(Option<ReturnValue>)`](crate::client::fluent_builders::UpdateItem::set_return_values): <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear before or after they are updated. For <code>UpdateItem</code>, the valid values are:</p>  <ul>   <li> <p> <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is <code>NONE</code>, then nothing is returned. (This setting is the default for <code>ReturnValues</code>.)</p> </li>   <li> <p> <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p> </li>   <li> <p> <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p> </li>   <li> <p> <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p> </li>   <li> <p> <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p> </li>  </ul>  <p>There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.</p>  <p>The values returned are strongly consistent.</p>
    ///   - [`return_consumed_capacity(ReturnConsumedCapacity)`](crate::client::fluent_builders::UpdateItem::return_consumed_capacity) / [`set_return_consumed_capacity(Option<ReturnConsumedCapacity>)`](crate::client::fluent_builders::UpdateItem::set_return_consumed_capacity): <p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p>  <ul>   <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li>   <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li>   <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li>  </ul>
    ///   - [`return_item_collection_metrics(ReturnItemCollectionMetrics)`](crate::client::fluent_builders::UpdateItem::return_item_collection_metrics) / [`set_return_item_collection_metrics(Option<ReturnItemCollectionMetrics>)`](crate::client::fluent_builders::UpdateItem::set_return_item_collection_metrics): <p>Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    ///   - [`update_expression(impl Into<String>)`](crate::client::fluent_builders::UpdateItem::update_expression) / [`set_update_expression(Option<String>)`](crate::client::fluent_builders::UpdateItem::set_update_expression): <p>An expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them.</p>  <p>The following action values are available for <code>UpdateExpression</code>.</p>  <ul>   <li> <p> <code>SET</code> - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use <code>SET</code> to add or subtract from an attribute that is of type Number. For example: <code>SET myNum = myNum + :val</code> </p> <p> <code>SET</code> supports the following functions:</p>    <ul>     <li> <p> <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p> </li>     <li> <p> <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p> </li>    </ul> <p>These function names are case-sensitive.</p> </li>   <li> <p> <code>REMOVE</code> - Removes one or more attributes from an item.</p> </li>   <li> <p> <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of <code>ADD</code> depends on the data type of the attribute:</p>    <ul>     <li> <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a negative number, then it is subtracted from the existing attribute.</p> <note>       <p>If you use <code>ADD</code> to increment or decrement a number value for an item that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial value.</p>       <p>Similarly, if you use <code>ADD</code> for an existing item to increment or decrement an attribute value that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial value. For example, suppose that the item you want to update doesn't have an attribute named <code>itemcount</code>, but you decide to <code>ADD</code> the number <code>3</code> to this attribute anyway. DynamoDB will create the <code>itemcount</code> attribute, set its initial value to <code>0</code>, and finally add <code>3</code> to it. The result will be a new <code>itemcount</code> attribute in the item, with a value of <code>3</code>.</p>      </note> </li>     <li> <p>If the existing data type is a set and if <code>Value</code> is also a set, then <code>Value</code> is added to the existing set. For example, if the attribute value is the set <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code> action is specified for a set attribute and the attribute type specified does not match the existing set type. </p> <p>Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the <code>Value</code> must also be a set of strings.</p> </li>    </ul> <important>     <p>The <code>ADD</code> action only supports Number and set data types. In addition, <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p>    </important> </li>   <li> <p> <code>DELETE</code> - Deletes an element from a set.</p> <p>If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set <code>[a,b,c]</code> and the <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value is <code>[b]</code>. Specifying an empty set is an error.</p> <important>     <p>The <code>DELETE</code> action only supports set data types. In addition, <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p>    </important> </li>  </ul>  <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1, b=:value2 DELETE :value3, :value4, :value5</code> </p>  <p>For more information on update expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`condition_expression(impl Into<String>)`](crate::client::fluent_builders::UpdateItem::condition_expression) / [`set_condition_expression(Option<String>)`](crate::client::fluent_builders::UpdateItem::set_condition_expression): <p>A condition that must be satisfied in order for a conditional update to succeed.</p>  <p>An expression can contain any of the following:</p>  <ul>   <li> <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code> </p> <p>These function names are case-sensitive.</p> </li>   <li> <p>Comparison operators: <code>= | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;= | BETWEEN | IN </code> </p> </li>   <li> <p> Logical operators: <code>AND | OR | NOT</code> </p> </li>  </ul>  <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_names(HashMap<String, String>)`](crate::client::fluent_builders::UpdateItem::expression_attribute_names) / [`set_expression_attribute_names(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateItem::set_expression_attribute_names): <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p> </li>   <li> <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p> </li>   <li> <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p> </li>  </ul>  <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>  <ul>   <li> <p> <code>Percentile</code> </p> </li>  </ul>  <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.) To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>  <ul>   <li> <p> <code>{"#P":"Percentile"}</code> </p> </li>  </ul>  <p>You could then use this substitution in an expression, as in this example:</p>  <ul>   <li> <p> <code>#P = :val</code> </p> </li>  </ul> <note>   <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>  </note>  <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`expression_attribute_values(HashMap<String, AttributeValue>)`](crate::client::fluent_builders::UpdateItem::expression_attribute_values) / [`set_expression_attribute_values(Option<HashMap<String, AttributeValue>>)`](crate::client::fluent_builders::UpdateItem::set_expression_attribute_values): <p>One or more values that can be substituted in an expression.</p>  <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <code>ProductStatus</code> attribute was one of the following: </p>  <p> <code>Available | Backordered | Discontinued</code> </p>  <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>  <p> <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code> </p>  <p>You could then use these values in an expression, such as this:</p>  <p> <code>ProductStatus IN (:avail, :back, :disc)</code> </p>  <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// - On success, responds with [`UpdateItemOutput`](crate::output::UpdateItemOutput) with field(s):
    ///   - [`attributes(Option<HashMap<String, AttributeValue>>)`](crate::output::UpdateItemOutput::attributes): <p>A map of attribute values as they appear before or after the <code>UpdateItem</code> operation, as determined by the <code>ReturnValues</code> parameter.</p>  <p>The <code>Attributes</code> map is only present if <code>ReturnValues</code> was specified as something other than <code>NONE</code> in the request. Each element represents one attribute.</p>
    ///   - [`consumed_capacity(Option<ConsumedCapacity>)`](crate::output::UpdateItemOutput::consumed_capacity): <p>The capacity units consumed by the <code>UpdateItem</code> operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    ///   - [`item_collection_metrics(Option<ItemCollectionMetrics>)`](crate::output::UpdateItemOutput::item_collection_metrics): <p>Information about item collections, if any, that were affected by the <code>UpdateItem</code> operation. <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.</p>  <p>Each <code>ItemCollectionMetrics</code> element consists of:</p>  <ul>   <li> <p> <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as the partition key value of the item itself.</p> </li>   <li> <p> <code>SizeEstimateRangeGB</code> - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p> <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<UpdateItemError>`](crate::error::UpdateItemError)
    pub fn update_item(&self) -> crate::client::fluent_builders::UpdateItem {
        crate::client::fluent_builders::UpdateItem::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTable`](crate::client::fluent_builders::UpdateTable) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attribute_definitions(Vec<AttributeDefinition>)`](crate::client::fluent_builders::UpdateTable::attribute_definitions) / [`set_attribute_definitions(Option<Vec<AttributeDefinition>>)`](crate::client::fluent_builders::UpdateTable::set_attribute_definitions): <p>An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.</p>
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateTable::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateTable::set_table_name): <p>The name of the table to be updated.</p>
    ///   - [`billing_mode(BillingMode)`](crate::client::fluent_builders::UpdateTable::billing_mode) / [`set_billing_mode(Option<BillingMode>)`](crate::client::fluent_builders::UpdateTable::set_billing_mode): <p>Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.</p>  <ul>   <li> <p> <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p> </li>   <li> <p> <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>. </p> </li>  </ul>
    ///   - [`provisioned_throughput(ProvisionedThroughput)`](crate::client::fluent_builders::UpdateTable::provisioned_throughput) / [`set_provisioned_throughput(Option<ProvisionedThroughput>)`](crate::client::fluent_builders::UpdateTable::set_provisioned_throughput): <p>The new provisioned throughput settings for the specified table or index.</p>
    ///   - [`global_secondary_index_updates(Vec<GlobalSecondaryIndexUpdate>)`](crate::client::fluent_builders::UpdateTable::global_secondary_index_updates) / [`set_global_secondary_index_updates(Option<Vec<GlobalSecondaryIndexUpdate>>)`](crate::client::fluent_builders::UpdateTable::set_global_secondary_index_updates): <p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p>  <ul>   <li> <p> <code>Create</code> - add a new global secondary index to the table.</p> </li>   <li> <p> <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p> </li>   <li> <p> <code>Delete</code> - remove a global secondary index from the table.</p> </li>  </ul>  <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing Global Secondary Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    ///   - [`stream_specification(StreamSpecification)`](crate::client::fluent_builders::UpdateTable::stream_specification) / [`set_stream_specification(Option<StreamSpecification>)`](crate::client::fluent_builders::UpdateTable::set_stream_specification): <p>Represents the DynamoDB Streams configuration for the table.</p> <note>   <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn't have a stream.</p>  </note>
    ///   - [`sse_specification(SseSpecification)`](crate::client::fluent_builders::UpdateTable::sse_specification) / [`set_sse_specification(Option<SseSpecification>)`](crate::client::fluent_builders::UpdateTable::set_sse_specification): <p>The new server-side encryption settings for the specified table.</p>
    ///   - [`replica_updates(Vec<ReplicationGroupUpdate>)`](crate::client::fluent_builders::UpdateTable::replica_updates) / [`set_replica_updates(Option<Vec<ReplicationGroupUpdate>>)`](crate::client::fluent_builders::UpdateTable::set_replica_updates): <p>A list of replica update actions (create, delete, or update) for the table.</p> <note>   <p>This property only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version 2019.11.21</a> of global tables.</p>  </note>
    ///   - [`table_class(TableClass)`](crate::client::fluent_builders::UpdateTable::table_class) / [`set_table_class(Option<TableClass>)`](crate::client::fluent_builders::UpdateTable::set_table_class): <p>The table class of the table to be updated. Valid values are <code>STANDARD</code> and <code>STANDARD_INFREQUENT_ACCESS</code>.</p>
    /// - On success, responds with [`UpdateTableOutput`](crate::output::UpdateTableOutput) with field(s):
    ///   - [`table_description(Option<TableDescription>)`](crate::output::UpdateTableOutput::table_description): <p>Represents the properties of the table.</p>
    /// - On failure, responds with [`SdkError<UpdateTableError>`](crate::error::UpdateTableError)
    pub fn update_table(&self) -> crate::client::fluent_builders::UpdateTable {
        crate::client::fluent_builders::UpdateTable::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTableReplicaAutoScaling`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_secondary_index_updates(Vec<GlobalSecondaryIndexAutoScalingUpdate>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::global_secondary_index_updates) / [`set_global_secondary_index_updates(Option<Vec<GlobalSecondaryIndexAutoScalingUpdate>>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::set_global_secondary_index_updates): <p>Represents the auto scaling settings of the global secondary indexes of the replica to be updated.</p>
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::set_table_name): <p>The name of the global table to be updated.</p>
    ///   - [`provisioned_write_capacity_auto_scaling_update(AutoScalingSettingsUpdate)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::provisioned_write_capacity_auto_scaling_update) / [`set_provisioned_write_capacity_auto_scaling_update(Option<AutoScalingSettingsUpdate>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::set_provisioned_write_capacity_auto_scaling_update): <p>Represents the auto scaling settings to be modified for a global table or global secondary index.</p>
    ///   - [`replica_updates(Vec<ReplicaAutoScalingUpdate>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::replica_updates) / [`set_replica_updates(Option<Vec<ReplicaAutoScalingUpdate>>)`](crate::client::fluent_builders::UpdateTableReplicaAutoScaling::set_replica_updates): <p>Represents the auto scaling settings of replicas of the table that will be modified.</p>
    /// - On success, responds with [`UpdateTableReplicaAutoScalingOutput`](crate::output::UpdateTableReplicaAutoScalingOutput) with field(s):
    ///   - [`table_auto_scaling_description(Option<TableAutoScalingDescription>)`](crate::output::UpdateTableReplicaAutoScalingOutput::table_auto_scaling_description): <p>Returns information about the auto scaling settings of a table with replicas.</p>
    /// - On failure, responds with [`SdkError<UpdateTableReplicaAutoScalingError>`](crate::error::UpdateTableReplicaAutoScalingError)
    pub fn update_table_replica_auto_scaling(
        &self,
    ) -> crate::client::fluent_builders::UpdateTableReplicaAutoScaling {
        crate::client::fluent_builders::UpdateTableReplicaAutoScaling::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTimeToLive`](crate::client::fluent_builders::UpdateTimeToLive) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`table_name(impl Into<String>)`](crate::client::fluent_builders::UpdateTimeToLive::table_name) / [`set_table_name(Option<String>)`](crate::client::fluent_builders::UpdateTimeToLive::set_table_name): <p>The name of the table to be configured.</p>
    ///   - [`time_to_live_specification(TimeToLiveSpecification)`](crate::client::fluent_builders::UpdateTimeToLive::time_to_live_specification) / [`set_time_to_live_specification(Option<TimeToLiveSpecification>)`](crate::client::fluent_builders::UpdateTimeToLive::set_time_to_live_specification): <p>Represents the settings used to enable or disable Time to Live for the specified table.</p>
    /// - On success, responds with [`UpdateTimeToLiveOutput`](crate::output::UpdateTimeToLiveOutput) with field(s):
    ///   - [`time_to_live_specification(Option<TimeToLiveSpecification>)`](crate::output::UpdateTimeToLiveOutput::time_to_live_specification): <p>Represents the output of an <code>UpdateTimeToLive</code> operation.</p>
    /// - On failure, responds with [`SdkError<UpdateTimeToLiveError>`](crate::error::UpdateTimeToLiveError)
    pub fn update_time_to_live(&self) -> crate::client::fluent_builders::UpdateTimeToLive {
        crate::client::fluent_builders::UpdateTimeToLive::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
