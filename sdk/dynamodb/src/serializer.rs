// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchExecuteStatementInputBody<'a> {
    /// <p>
    /// The list of PartiQL statements representing the batch to run.
    /// </p>
    pub statements: &'a std::option::Option<std::vec::Vec<crate::model::BatchStatementRequest>>,
}
impl<'a> std::fmt::Debug for BatchExecuteStatementInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchExecuteStatementInputBody");
        formatter.field("statements", &self.statements);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>BatchGetItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGetItemInputBody<'a> {
    /// <p>A map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per <code>BatchGetItem</code> request.</p>
    /// <p>Each element in the map of items to retrieve consists of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ConsistentRead</code> - If <code>true</code>, a strongly consistent read is used; if
    /// <code>false</code> (the default), an eventually consistent read is used.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ExpressionAttributeNames</code> - One or more substitution tokens for attribute names in the <code>ProjectionExpression</code> parameter. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB
    /// Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Keys</code> - An array of primary key attribute values that define specific items in the
    /// table. For each primary key, you must provide <i>all</i> of the key attributes. For
    /// example, with a simple primary key, you only need to provide the partition key value. For a
    /// composite key, you must provide <i>both</i> the partition key value and the sort key value.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ProjectionExpression</code> - A string that identifies one or more
    /// attributes to retrieve from the table. These attributes can include scalars,
    /// sets, or elements of a JSON document. The attributes in the expression must be
    /// separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes are returned. If any
    /// of the requested attributes are not found, they do not appear in the
    /// result.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>AttributesToGet</code> - This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.
    /// </p>
    /// </li>
    /// </ul>
    pub request_items: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::KeysAndAttributes>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
}
impl<'a> std::fmt::Debug for BatchGetItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetItemInputBody");
        formatter.field("request_items", &self.request_items);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>BatchWriteItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchWriteItemInputBody<'a> {
    /// <p>A map of one or more table names and, for each table, a list of operations to be performed
    /// (<code>DeleteRequest</code> or <code>PutRequest</code>). Each element in the map consists of the
    /// following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
    /// item to be deleted is identified by a <code>Key</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
    /// Each entry in this map consists of an attribute name and an attribute value. For each
    /// primary key, you must provide <i>all</i> of the key attributes. For example, with a
    /// simple primary key, you only need to provide a value for the partition key. For a
    /// composite primary key, you must provide values for <i>both</i> the partition key and the sort key.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
    /// be put is identified by an <code>Item</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Item</code> - A map of attributes and their values. Each entry in
    /// this map consists of an attribute name and an attribute value. Attribute
    /// values must not be null; string and binary type attributes must have
    /// lengths greater than zero; and set type attributes must not be empty.
    /// Requests that contain empty values are rejected with a
    /// <code>ValidationException</code> exception.</p>
    /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub request_items: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::model::WriteRequest>>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics:
        &'a std::option::Option<crate::model::ReturnItemCollectionMetrics>,
}
impl<'a> std::fmt::Debug for BatchWriteItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchWriteItemInputBody");
        formatter.field("request_items", &self.request_items);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field(
            "return_item_collection_metrics",
            &self.return_item_collection_metrics,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateBackupInputBody<'a> {
    /// <p>The name of the table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Specified name for the backup.</p>
    pub backup_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for CreateBackupInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackupInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("backup_name", &self.backup_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGlobalTableInputBody<'a> {
    /// <p>The global table name.</p>
    pub global_table_name: &'a std::option::Option<std::string::String>,
    /// <p>The Regions where the global table needs to be created.</p>
    pub replication_group: &'a std::option::Option<std::vec::Vec<crate::model::Replica>>,
}
impl<'a> std::fmt::Debug for CreateGlobalTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlobalTableInputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.field("replication_group", &self.replication_group);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>CreateTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTableInputBody<'a> {
    /// <p>An array of attributes that describe the key schema for the table and indexes.</p>
    pub attribute_definitions:
        &'a std::option::Option<std::vec::Vec<crate::model::AttributeDefinition>>,
    /// <p>The name of the table to create.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Specifies the attributes that make up the primary key for a table or an index. The attributes
    /// in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more
    /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html">Data Model</a> in the
    /// <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>Each <code>KeySchemaElement</code> in the array is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AttributeName</code> - The name of this key attribute.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeyType</code> - The role that the key attribute will assume:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>HASH</code> - partition key</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RANGE</code> - sort key</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The partition key of an item is also known as its <i>hash
    /// attribute</i>. The term "hash attribute" derives from the DynamoDB usage of
    /// an internal hash function to evenly distribute data items across partitions, based
    /// on their partition key values.</p>
    /// <p>The sort key of an item is also known as its <i>range attribute</i>.
    /// The term "range attribute" derives from the way DynamoDB stores items with the same
    /// partition key physically close together, in sorted order by the sort key value.</p>
    /// </note>
    /// <p>For a simple primary key (partition key), you must provide
    /// exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p>
    /// <p>For a composite primary key (partition key and sort key), you must provide exactly two
    /// elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>,
    /// and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key">Working with Tables</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub key_schema: &'a std::option::Option<std::vec::Vec<crate::model::KeySchemaElement>>,
    /// <p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p>
    /// <p>Each local secondary index in the array includes the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p>
    /// <p></p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with
    /// the same partition key as the table.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Projection</code> - Specifies
    /// attributes that are copied (projected) from the table into the index. These are in
    /// addition to the primary key attributes and index key
    /// attributes, which are automatically projected. Each
    /// attribute specification is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ProjectionType</code> - One
    /// of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    /// index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>INCLUDE</code> - Only the specified table attributes are
    /// projected into the index. The list of projected attributes is in
    /// <code>NonKeyAttributes</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All of the table attributes are projected into the
    /// index.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NonKeyAttributes</code> - A list of one or more non-key
    /// attribute names that are projected into the secondary index. The total
    /// count of attributes provided in <code>NonKeyAttributes</code>,
    /// summed across all of the secondary indexes, must not exceed 100. If you
    /// project the same attribute into two different indexes, this counts as
    /// two distinct attributes when determining the total.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub local_secondary_indexes:
        &'a std::option::Option<std::vec::Vec<crate::model::LocalSecondaryIndex>>,
    /// <p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p>
    /// <p></p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Projection</code> - Specifies
    /// attributes that are copied (projected) from the table into the index. These are in
    /// addition to the primary key attributes and index key
    /// attributes, which are automatically projected. Each
    /// attribute specification is composed of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ProjectionType</code> - One
    /// of the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the
    /// index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>INCLUDE</code> - Only the specified table attributes are
    /// projected into the index. The list of projected attributes is in
    /// <code>NonKeyAttributes</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All of the table attributes are projected into the
    /// index.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are
    /// projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index,
    /// consisting of read and write capacity units.</p>
    /// </li>
    /// </ul>
    pub global_secondary_indexes:
        &'a std::option::Option<std::vec::Vec<crate::model::GlobalSecondaryIndex>>,
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub billing_mode: &'a std::option::Option<crate::model::BillingMode>,
    /// <p>Represents the provisioned throughput settings for a specified table or index. The
    /// settings can be modified using the <code>UpdateTable</code> operation.</p>
    /// <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you
    /// set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this
    /// property.</p>
    /// <p>For current minimum and maximum provisioned throughput values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
    /// Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub provisioned_throughput: &'a std::option::Option<crate::model::ProvisionedThroughput>,
    /// <p>The settings for DynamoDB Streams on the table. These settings consist of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled
    /// (true) or disabled (false).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code>
    /// determines what information is written to the table's stream. Valid values for
    /// <code>StreamViewType</code> are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the
    /// stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written
    /// to the stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is
    /// written to the stream.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are
    /// written to the stream.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub stream_specification: &'a std::option::Option<crate::model::StreamSpecification>,
    /// <p>Represents the settings used to enable server-side encryption.</p>
    pub sse_specification: &'a std::option::Option<crate::model::SSESpecification>,
    /// <p>A list of key-value pairs to label the table. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>.</p>
    pub tags: &'a std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl<'a> std::fmt::Debug for CreateTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTableInputBody");
        formatter.field("attribute_definitions", &self.attribute_definitions);
        formatter.field("table_name", &self.table_name);
        formatter.field("key_schema", &self.key_schema);
        formatter.field("local_secondary_indexes", &self.local_secondary_indexes);
        formatter.field("global_secondary_indexes", &self.global_secondary_indexes);
        formatter.field("billing_mode", &self.billing_mode);
        formatter.field("provisioned_throughput", &self.provisioned_throughput);
        formatter.field("stream_specification", &self.stream_specification);
        formatter.field("sse_specification", &self.sse_specification);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteBackupInputBody<'a> {
    /// <p>The ARN associated with the backup.</p>
    pub backup_arn: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DeleteBackupInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteBackupInputBody");
        formatter.field("backup_arn", &self.backup_arn);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>DeleteItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteItemInputBody<'a> {
    /// <p>The name of the table from which to delete the item.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    /// the item to delete.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::ExpectedAttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: &'a std::option::Option<crate::model::ConditionalOperator>,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    /// were deleted. For <code>DeleteItem</code>, the valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - The content of the old item is returned.</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    /// <code>DeleteItem</code> does not recognize any values other than <code>NONE</code> or
    /// <code>ALL_OLD</code>.</p>
    /// </note>
    pub return_values: &'a std::option::Option<crate::model::ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics:
        &'a std::option::Option<crate::model::ReturnItemCollectionMetrics>,
    /// <p>A condition that must be satisfied in order for a conditional <code>DeleteItem</code> to
    /// succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
}
impl<'a> std::fmt::Debug for DeleteItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteItemInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("key", &self.key);
        formatter.field("expected", &self.expected);
        formatter.field("conditional_operator", &self.conditional_operator);
        formatter.field("return_values", &self.return_values);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field(
            "return_item_collection_metrics",
            &self.return_item_collection_metrics,
        );
        formatter.field("condition_expression", &self.condition_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.field(
            "expression_attribute_values",
            &self.expression_attribute_values,
        );
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>DeleteTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTableInputBody<'a> {
    /// <p>The name of the table to delete.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DeleteTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTableInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeBackupInputBody<'a> {
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    pub backup_arn: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeBackupInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeBackupInputBody");
        formatter.field("backup_arn", &self.backup_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContinuousBackupsInputBody<'a> {
    /// <p>Name of the table for which the customer wants to check the continuous backups and point in time recovery settings.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeContinuousBackupsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContinuousBackupsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContributorInsightsInputBody<'a> {
    /// <p>The name of the table to describe.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The name of the global secondary index to describe, if applicable.</p>
    pub index_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeContributorInsightsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContributorInsightsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportInputBody<'a> {
    /// <p>The Amazon Resource Name (ARN) associated with the export.</p>
    pub export_arn: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeExportInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportInputBody");
        formatter.field("export_arn", &self.export_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalTableInputBody<'a> {
    /// <p>The name of the global table.</p>
    pub global_table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeGlobalTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalTableInputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalTableSettingsInputBody<'a> {
    /// <p>The name of the global table to describe.</p>
    pub global_table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeGlobalTableSettingsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalTableSettingsInputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeKinesisStreamingDestinationInputBody<'a> {
    /// <p>The name of the table being described.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeKinesisStreamingDestinationInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeKinesisStreamingDestinationInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>DescribeTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTableInputBody<'a> {
    /// <p>The name of the table to describe.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTableInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTableReplicaAutoScalingInputBody<'a> {
    /// <p>The name of the table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeTableReplicaAutoScalingInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTableReplicaAutoScalingInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTimeToLiveInputBody<'a> {
    /// <p>The name of the table to be described.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DescribeTimeToLiveInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTimeToLiveInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableKinesisStreamingDestinationInputBody<'a> {
    /// <p>The name of the DynamoDB table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The ARN for a Kinesis data stream.</p>
    pub stream_arn: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for DisableKinesisStreamingDestinationInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableKinesisStreamingDestinationInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("stream_arn", &self.stream_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableKinesisStreamingDestinationInputBody<'a> {
    /// <p>The name of the DynamoDB table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The ARN for a Kinesis data stream.</p>
    pub stream_arn: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for EnableKinesisStreamingDestinationInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableKinesisStreamingDestinationInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("stream_arn", &self.stream_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteStatementInputBody<'a> {
    /// <p>
    /// The PartiQL statement representing the operation to run.
    /// </p>
    pub statement: &'a std::option::Option<std::string::String>,
    /// <p>
    /// The parameters for the PartiQL statement, if any.
    /// </p>
    pub parameters: &'a std::option::Option<std::vec::Vec<crate::model::AttributeValue>>,
    /// <p>
    /// The consistency of a read operation. If set to <code>true</code>, then a strongly consistent read is used; otherwise, an eventually consistent read is used.
    /// </p>
    pub consistent_read: &'a std::option::Option<bool>,
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    pub next_token: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ExecuteStatementInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteStatementInputBody");
        formatter.field("statement", &self.statement);
        formatter.field("parameters", &self.parameters);
        formatter.field("consistent_read", &self.consistent_read);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteTransactionInputBody<'a> {
    /// <p>
    /// The list of PartiQL statements representing the transaction to run.
    /// </p>
    pub transact_statements:
        &'a std::option::Option<std::vec::Vec<crate::model::ParameterizedStatement>>,
    /// <p>
    /// Set this value to get remaining results, if <code>NextToken</code> was returned in the statement response.
    /// </p>
    pub client_request_token: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ExecuteTransactionInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteTransactionInputBody");
        formatter.field("transact_statements", &self.transact_statements);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportTableToPointInTimeInputBody<'a> {
    /// <p>The Amazon Resource Name (ARN) associated with the table to export.</p>
    pub table_arn: &'a std::option::Option<std::string::String>,
    /// <p>Time in the past from which to export table data. The table export will be a snapshot
    /// of the table's state at this point in time.</p>
    pub export_time: &'a std::option::Option<smithy_types::Instant>,
    /// <p>Providing a <code>ClientToken</code> makes the call to
    /// <code>ExportTableToPointInTimeInput</code> idempotent, meaning that multiple
    /// identical calls have the same effect as one single call.</p>
    /// <p>A client token is valid for 8 hours after the first request that uses it is
    /// completed. After 8 hours, any request with the same client token is treated as a new
    /// request. Do not resubmit the same request with the same client token for more than 8
    /// hours, or the result might not be idempotent.</p>
    /// <p>If you submit a request with the same client token but a change in other parameters
    /// within the 8-hour idempotency window, DynamoDB returns an
    /// <code>IdempotentParameterMismatch</code> exception.</p>
    pub client_token: &'a std::option::Option<std::string::String>,
    /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    pub s3_bucket: &'a std::option::Option<std::string::String>,
    /// <p>The ID of the AWS account that owns the bucket the export will be stored in.</p>
    pub s3_bucket_owner: &'a std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported
    /// snapshot.</p>
    pub s3_prefix: &'a std::option::Option<std::string::String>,
    /// <p>Type of encryption used on the bucket where export data will be stored. Valid values
    /// for <code>S3SseAlgorithm</code> are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AES256</code> - server-side encryption with Amazon S3 managed keys</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KMS</code> - server-side encryption with AWS KMS managed keys</p>
    /// </li>
    /// </ul>
    pub s3_sse_algorithm: &'a std::option::Option<crate::model::S3SseAlgorithm>,
    /// <p>The ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will
    /// be stored (if applicable).</p>
    pub s3_sse_kms_key_id: &'a std::option::Option<std::string::String>,
    /// <p>The format for the exported data. Valid values for <code>ExportFormat</code> are
    /// <code>DYNAMODB_JSON</code> or <code>ION</code>.</p>
    pub export_format: &'a std::option::Option<crate::model::ExportFormat>,
}
impl<'a> std::fmt::Debug for ExportTableToPointInTimeInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportTableToPointInTimeInputBody");
        formatter.field("table_arn", &self.table_arn);
        formatter.field("export_time", &self.export_time);
        formatter.field("client_token", &self.client_token);
        formatter.field("s3_bucket", &self.s3_bucket);
        formatter.field("s3_bucket_owner", &self.s3_bucket_owner);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("s3_sse_algorithm", &self.s3_sse_algorithm);
        formatter.field("s3_sse_kms_key_id", &self.s3_sse_kms_key_id);
        formatter.field("export_format", &self.export_format);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>GetItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetItemInputBody<'a> {
    /// <p>The name of the table containing the requested item.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the primary key of
    /// the item to retrieve.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    pub consistent_read: &'a std::option::Option<bool>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes are returned. If any of the
    /// requested attributes are not found, they do not appear in the result.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub projection_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
}
impl<'a> std::fmt::Debug for GetItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetItemInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("key", &self.key);
        formatter.field("attributes_to_get", &self.attributes_to_get);
        formatter.field("consistent_read", &self.consistent_read);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field("projection_expression", &self.projection_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBackupsInputBody<'a> {
    /// <p>The backups from the table specified by <code>TableName</code> are listed. </p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Maximum number of backups to return at once.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Only backups created after this time are listed. <code>TimeRangeLowerBound</code> is inclusive.</p>
    pub time_range_lower_bound: &'a std::option::Option<smithy_types::Instant>,
    /// <p>Only backups created before this time are listed. <code>TimeRangeUpperBound</code> is exclusive. </p>
    pub time_range_upper_bound: &'a std::option::Option<smithy_types::Instant>,
    /// <p>
    /// <code>LastEvaluatedBackupArn</code> is the Amazon Resource Name (ARN) of the backup last
    /// evaluated when the current page of results was returned, inclusive of the current page
    /// of results. This value may be specified as the <code>ExclusiveStartBackupArn</code> of a
    /// new <code>ListBackups</code> operation in order to fetch the next page of results. </p>
    pub exclusive_start_backup_arn: &'a std::option::Option<std::string::String>,
    /// <p>The backups from the table specified by <code>BackupType</code> are listed.</p>
    /// <p>Where <code>BackupType</code> can be:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>USER</code> - On-demand backup created by you.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SYSTEM</code> - On-demand backup automatically created by
    /// DynamoDB.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL</code> - All types of on-demand backups (USER and SYSTEM).</p>
    /// </li>
    /// </ul>
    pub backup_type: &'a std::option::Option<crate::model::BackupTypeFilter>,
}
impl<'a> std::fmt::Debug for ListBackupsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBackupsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("limit", &self.limit);
        formatter.field("time_range_lower_bound", &self.time_range_lower_bound);
        formatter.field("time_range_upper_bound", &self.time_range_upper_bound);
        formatter.field(
            "exclusive_start_backup_arn",
            &self.exclusive_start_backup_arn,
        );
        formatter.field("backup_type", &self.backup_type);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContributorInsightsInputBody<'a> {
    /// <p>The name of the table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>A token to for the desired page, if there is one.</p>
    pub next_token: &'a std::option::Option<std::string::String>,
    /// <p>Maximum number of results to return per page.</p>
    pub max_results: &'a i32,
}
impl<'a> std::fmt::Debug for ListContributorInsightsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContributorInsightsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListExportsInputBody<'a> {
    /// <p>The Amazon Resource Name (ARN) associated with the exported table.</p>
    pub table_arn: &'a std::option::Option<std::string::String>,
    /// <p>Maximum number of results to return per page.</p>
    pub max_results: &'a std::option::Option<i32>,
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    /// call to <code>ListExports</code>. When provided in this manner, the API fetches the next
    /// page of results.</p>
    pub next_token: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListExportsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListExportsInputBody");
        formatter.field("table_arn", &self.table_arn);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGlobalTablesInputBody<'a> {
    /// <p>The first global table name that this operation will evaluate.</p>
    pub exclusive_start_global_table_name: &'a std::option::Option<std::string::String>,
    /// <p>The maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.</p>
    /// <p>If the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point,
    /// with a table name in the <code>LastEvaluatedGlobalTableName</code> to apply in a subsequent operation to the <code>ExclusiveStartGlobalTableName</code> parameter.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Lists the global tables in a specific Region.</p>
    pub region_name: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListGlobalTablesInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGlobalTablesInputBody");
        formatter.field(
            "exclusive_start_global_table_name",
            &self.exclusive_start_global_table_name,
        );
        formatter.field("limit", &self.limit);
        formatter.field("region_name", &self.region_name);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>ListTables</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTablesInputBody<'a> {
    /// <p>The first table name that this operation will evaluate. Use the value that was returned for
    /// <code>LastEvaluatedTableName</code> in a previous operation, so that you can obtain the next page
    /// of results.</p>
    pub exclusive_start_table_name: &'a std::option::Option<std::string::String>,
    /// <p>A maximum number of table names to return. If this parameter is not specified, the limit is 100.</p>
    pub limit: &'a std::option::Option<i32>,
}
impl<'a> std::fmt::Debug for ListTablesInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTablesInputBody");
        formatter.field(
            "exclusive_start_table_name",
            &self.exclusive_start_table_name,
        );
        formatter.field("limit", &self.limit);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsOfResourceInputBody<'a> {
    /// <p>The Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).</p>
    pub resource_arn: &'a std::option::Option<std::string::String>,
    /// <p>An optional string that, if supplied, must be copied from the output of a previous
    /// call to ListTagOfResource. When provided in this manner, this API fetches the next page of results.</p>
    pub next_token: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for ListTagsOfResourceInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsOfResourceInputBody");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>PutItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutItemInputBody<'a> {
    /// <p>The name of the table to contain the item.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>A map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.</p>
    /// <p>You must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.</p>
    /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    /// <p>Empty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.</p>
    /// <p>For more information about primary keys, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html#HowItWorks.CoreComponents.PrimaryKey">Primary Key</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    /// <p>Each element in the <code>Item</code> map is an <code>AttributeValue</code> object.</p>
    pub item: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::ExpectedAttributeValue>,
    >,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appeared before they
    /// were updated with the <code>PutItem</code> request. For <code>PutItem</code>, the valid values are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - If <code>PutItem</code> overwrote an attribute name-value pair, then the
    /// content of the old item is returned.</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>The <code>ReturnValues</code> parameter is used by several DynamoDB operations; however,
    /// <code>PutItem</code> does not recognize any values other than <code>NONE</code> or
    /// <code>ALL_OLD</code>.</p>
    /// </note>
    pub return_values: &'a std::option::Option<crate::model::ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics:
        &'a std::option::Option<crate::model::ReturnItemCollectionMetrics>,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: &'a std::option::Option<crate::model::ConditionalOperator>,
    /// <p>A condition that must be satisfied in order for a conditional <code>PutItem</code> operation to
    /// succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information on condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
}
impl<'a> std::fmt::Debug for PutItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutItemInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("item", &self.item);
        formatter.field("expected", &self.expected);
        formatter.field("return_values", &self.return_values);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field(
            "return_item_collection_metrics",
            &self.return_item_collection_metrics,
        );
        formatter.field("conditional_operator", &self.conditional_operator);
        formatter.field("condition_expression", &self.condition_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.field(
            "expression_attribute_values",
            &self.expression_attribute_values,
        );
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>Query</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueryInputBody<'a> {
    /// <p>The name of the table containing the requested items.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that
    /// if you use the <code>IndexName</code> parameter, you must also provide <code>TableName.</code>
    /// </p>
    pub index_name: &'a std::option::Option<std::string::String>,
    /// <p>The attributes to be returned in the
    /// result. You can retrieve all item attributes, specific item attributes, the count of
    /// matching items, or in the case of an index, some or all of the attributes projected into
    /// the index.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    /// specified table or index. If you query a local secondary index, then for each
    /// matching item in the index, DynamoDB fetches the entire item from the parent
    /// table. If the index is configured to project all item attributes, then all of
    /// the data can be obtained from the local secondary index, and no fetching is
    /// required.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    /// Retrieves all attributes that have been projected into the index. If the
    /// index is configured to project all attributes, this return value is
    /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>COUNT</code> - Returns the number of matching items, rather than the
    /// matching items themselves.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    /// <code>AttributesToGet</code>. This return value is equivalent to
    /// specifying <code>AttributesToGet</code> without specifying any value
    /// for <code>Select</code>.</p>
    /// <p>If you query or scan a local secondary index and request only attributes that
    /// are projected into that index, the operation will read only the index and not
    /// the table. If any of the requested attributes are not projected into the local
    /// secondary index, DynamoDB fetches each of these attributes from the parent
    /// table. This extra fetching incurs additional throughput cost and latency.</p>
    /// <p>If you query or scan a global secondary index, you can only request
    /// attributes that are projected into the index. Global secondary index queries
    /// cannot fetch attributes from the parent table.</p>
    /// </li>
    /// </ul>
    /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    /// use both <code>Select</code> and <code>AttributesToGet</code>
    /// together in a single request, unless the value for <code>Select</code> is
    /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    /// <code>AttributesToGet</code> without any value for
    /// <code>Select</code>.)</p>
    /// <note>
    /// <p>If you use the <code>ProjectionExpression</code> parameter, then
    /// the value for <code>Select</code> can only be
    /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    /// <code>Select</code> will return an error.</p>
    /// </note>
    pub select: &'a std::option::Option<crate::model::Select>,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    /// If DynamoDB processes the number of items up to the limit while processing the results,
    /// it stops the operation and returns the matching values up to that point, and a key in
    /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
    /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Query and Scan</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>Determines the read consistency model:  If set to <code>true</code>, then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.</p>
    /// <p>Strongly consistent reads
    /// are not supported on global secondary indexes. If you query a global secondary index with <code>ConsistentRead</code> set to
    /// <code>true</code>, you will receive a <code>ValidationException</code>.</p>
    pub consistent_read: &'a std::option::Option<bool>,
    /// <p>This is a legacy parameter.  Use <code>KeyConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.KeyConditions.html">KeyConditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub key_conditions: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::Condition>,
    >,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.QueryFilter.html">QueryFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub query_filter: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::Condition>,
    >,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: &'a std::option::Option<crate::model::ConditionalOperator>,
    /// <p>Specifies the order for index traversal: If <code>true</code> (default), the traversal is performed in ascending order; if <code>false</code>, the traversal is performed in descending order. </p>
    /// <p>Items with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.</p>
    /// <p>If <code>ScanIndexForward</code> is <code>true</code>, DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If <code>ScanIndexForward</code> is <code>false</code>, DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.</p>
    pub scan_index_forward: &'a std::option::Option<bool>,
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number, or Binary. No
    /// set data types are allowed.</p>
    pub exclusive_start_key: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Accessing Item Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub projection_expression: &'a std::option::Option<std::string::String>,
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Query</code> operation, but
    /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    /// criteria are not returned.</p>
    /// <p>A <code>FilterExpression</code> does not allow key attributes.  You cannot define a filter expression based on a partition key or a sort key.</p>
    /// <note>
    /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    /// filtering does not consume any additional read capacity units.</p>
    /// </note>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter
    /// Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub filter_expression: &'a std::option::Option<std::string::String>,
    /// <p>The condition that specifies the key values for items to be retrieved by the
    /// <code>Query</code> action.</p>
    /// <p>The condition must perform an equality test on a single partition key value.</p>
    /// <p>The condition can optionally perform one of several comparison tests on a single
    /// sort key value. This allows <code>Query</code> to retrieve one item with a given
    /// partition key value and sort key value, or several items that have the same partition
    /// key value but different sort key values.</p>
    /// <p>The partition key equality test is required, and must be specified in the following format:</p>
    /// <p>
    /// <code>partitionKeyName</code>
    /// <i>=</i>
    /// <code>:partitionkeyval</code>
    /// </p>
    /// <p>If you also want to provide a condition for the sort key, it must be combined using <code>AND</code> with the condition
    /// for the sort key. Following is an example, using the <b>=</b> comparison operator for the sort key:</p>
    /// <p>
    /// <code>partitionKeyName</code>
    /// <code>=</code>
    /// <code>:partitionkeyval</code>
    /// <code>AND</code>
    /// <code>sortKeyName</code>
    /// <code>=</code>
    /// <code>:sortkeyval</code>
    /// </p>
    /// <p>Valid comparisons for the sort key condition are as follows:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>=</code>
    /// <code>:sortkeyval</code> - true if the sort key value is equal to <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code><</code>
    /// <code>:sortkeyval</code> - true if the sort key value is less than <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code><=</code>
    /// <code>:sortkeyval</code> - true if the sort key value is less than or equal to
    /// <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>></code>
    /// <code>:sortkeyval</code> - true if the sort key value is greater than <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>>= </code>
    /// <code>:sortkeyval</code> - true if the sort key value is greater than
    /// or equal to <code>:sortkeyval</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sortKeyName</code>
    /// <code>BETWEEN</code>
    /// <code>:sortkeyval1</code>
    /// <code>AND</code>
    /// <code>:sortkeyval2</code> - true if the sort key value is greater than or equal to
    /// <code>:sortkeyval1</code>, and less than or equal to <code>:sortkeyval2</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>begins_with (</code>
    /// <code>sortKeyName</code>, <code>:sortkeyval</code>
    /// <code>)</code> -
    /// true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.)  Note that the function name
    /// <code>begins_with</code> is case-sensitive.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <code>ExpressionAttributeValues</code> parameter to replace tokens such as
    /// <code>:partitionval</code> and <code>:sortval</code> with actual values at runtime.</p>
    /// <p>You can optionally use the <code>ExpressionAttributeNames</code> parameter to replace the names of
    /// the partition key and sort key with placeholder tokens. This option might be necessary if an attribute
    /// name conflicts with a DynamoDB reserved word. For example, the following
    /// <code>KeyConditionExpression</code> parameter causes an error because <i>Size</i> is a reserved
    /// word:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Size = :myval</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To work around this, define a placeholder (such a <code>#S</code>) to represent the attribute
    /// name <i>Size</i>. <code>KeyConditionExpression</code> then is as follows:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#S = :myval</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For a list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved
    /// Words</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>For more information on <code>ExpressionAttributeNames</code> and <code>ExpressionAttributeValues</code>,
    /// see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ExpressionPlaceholders.html">Using Placeholders for Attribute
    /// Names and Values</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub key_condition_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for
    /// <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the
    /// <i>ProductStatus</i> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expression_attribute_values: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
}
impl<'a> std::fmt::Debug for QueryInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueryInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.field("select", &self.select);
        formatter.field("attributes_to_get", &self.attributes_to_get);
        formatter.field("limit", &self.limit);
        formatter.field("consistent_read", &self.consistent_read);
        formatter.field("key_conditions", &self.key_conditions);
        formatter.field("query_filter", &self.query_filter);
        formatter.field("conditional_operator", &self.conditional_operator);
        formatter.field("scan_index_forward", &self.scan_index_forward);
        formatter.field("exclusive_start_key", &self.exclusive_start_key);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field("projection_expression", &self.projection_expression);
        formatter.field("filter_expression", &self.filter_expression);
        formatter.field("key_condition_expression", &self.key_condition_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.field(
            "expression_attribute_values",
            &self.expression_attribute_values,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreTableFromBackupInputBody<'a> {
    /// <p>The name of the new table to which the backup must be restored.</p>
    pub target_table_name: &'a std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) associated with the backup.</p>
    pub backup_arn: &'a std::option::Option<std::string::String>,
    /// <p>The billing mode of the restored table.</p>
    pub billing_mode_override: &'a std::option::Option<crate::model::BillingMode>,
    /// <p>List of global secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub global_secondary_index_override:
        &'a std::option::Option<std::vec::Vec<crate::model::GlobalSecondaryIndex>>,
    /// <p>List of local secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub local_secondary_index_override:
        &'a std::option::Option<std::vec::Vec<crate::model::LocalSecondaryIndex>>,
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub provisioned_throughput_override:
        &'a std::option::Option<crate::model::ProvisionedThroughput>,
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub sse_specification_override: &'a std::option::Option<crate::model::SSESpecification>,
}
impl<'a> std::fmt::Debug for RestoreTableFromBackupInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreTableFromBackupInputBody");
        formatter.field("target_table_name", &self.target_table_name);
        formatter.field("backup_arn", &self.backup_arn);
        formatter.field("billing_mode_override", &self.billing_mode_override);
        formatter.field(
            "global_secondary_index_override",
            &self.global_secondary_index_override,
        );
        formatter.field(
            "local_secondary_index_override",
            &self.local_secondary_index_override,
        );
        formatter.field(
            "provisioned_throughput_override",
            &self.provisioned_throughput_override,
        );
        formatter.field(
            "sse_specification_override",
            &self.sse_specification_override,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreTableToPointInTimeInputBody<'a> {
    /// <p>The DynamoDB table that will be restored. This value is an Amazon
    /// Resource Name (ARN).</p>
    pub source_table_arn: &'a std::option::Option<std::string::String>,
    /// <p>Name of the source table that is being restored.</p>
    pub source_table_name: &'a std::option::Option<std::string::String>,
    /// <p>The name of the new table to which it must be restored to.</p>
    pub target_table_name: &'a std::option::Option<std::string::String>,
    /// <p>Restore the table to the latest possible time. <code>LatestRestorableDateTime</code>
    /// is typically 5 minutes before the current time. </p>
    pub use_latest_restorable_time: &'a std::option::Option<bool>,
    /// <p>Time in the past to restore the table to.</p>
    pub restore_date_time: &'a std::option::Option<smithy_types::Instant>,
    /// <p>The billing mode of the restored table.</p>
    pub billing_mode_override: &'a std::option::Option<crate::model::BillingMode>,
    /// <p>List of global secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub global_secondary_index_override:
        &'a std::option::Option<std::vec::Vec<crate::model::GlobalSecondaryIndex>>,
    /// <p>List of local secondary indexes for the restored table. The indexes
    /// provided should match existing secondary indexes. You can choose to exclude
    /// some or all of the indexes at the time of restore.</p>
    pub local_secondary_index_override:
        &'a std::option::Option<std::vec::Vec<crate::model::LocalSecondaryIndex>>,
    /// <p>Provisioned throughput settings for the restored table.</p>
    pub provisioned_throughput_override:
        &'a std::option::Option<crate::model::ProvisionedThroughput>,
    /// <p>The new server-side encryption settings for the restored table.</p>
    pub sse_specification_override: &'a std::option::Option<crate::model::SSESpecification>,
}
impl<'a> std::fmt::Debug for RestoreTableToPointInTimeInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreTableToPointInTimeInputBody");
        formatter.field("source_table_arn", &self.source_table_arn);
        formatter.field("source_table_name", &self.source_table_name);
        formatter.field("target_table_name", &self.target_table_name);
        formatter.field(
            "use_latest_restorable_time",
            &self.use_latest_restorable_time,
        );
        formatter.field("restore_date_time", &self.restore_date_time);
        formatter.field("billing_mode_override", &self.billing_mode_override);
        formatter.field(
            "global_secondary_index_override",
            &self.global_secondary_index_override,
        );
        formatter.field(
            "local_secondary_index_override",
            &self.local_secondary_index_override,
        );
        formatter.field(
            "provisioned_throughput_override",
            &self.provisioned_throughput_override,
        );
        formatter.field(
            "sse_specification_override",
            &self.sse_specification_override,
        );
        formatter.finish()
    }
}

/// <p>Represents the input of a <code>Scan</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ScanInputBody<'a> {
    /// <p>The name of the table containing the requested items; or, if you provide
    /// <code>IndexName</code>, the name of the table to which that index belongs.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The name of a secondary index to scan. This index can be any local secondary index or global secondary index.  Note that if you use the <code>IndexName</code> parameter, you must also provide <code>TableName</code>.</p>
    pub index_name: &'a std::option::Option<std::string::String>,
    /// <p>This is a legacy parameter.  Use <code>ProjectionExpression</code> instead.  For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributesToGet.html">AttributesToGet</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attributes_to_get: &'a std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of items to evaluate (not necessarily the number of matching items).
    /// If DynamoDB processes the number of items up to the limit while processing the results,
    /// it stops the operation and returns the matching values up to that point, and a key in
    /// <code>LastEvaluatedKey</code> to apply in a subsequent operation, so that you can
    /// pick up where you left off. Also, if the processed dataset size exceeds 1 MB before
    /// DynamoDB reaches this limit, it stops the operation and returns the matching values up
    /// to the limit, and a key in <code>LastEvaluatedKey</code> to apply in a subsequent
    /// operation to continue the operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html">Working with Queries</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub limit: &'a std::option::Option<i32>,
    /// <p>The attributes to be returned in the
    /// result. You can retrieve all item attributes, specific item attributes, the count of
    /// matching items, or in the case of an index, some or all of the attributes projected into
    /// the index.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ALL_ATTRIBUTES</code> - Returns all of the item attributes from the
    /// specified table or index. If you query a local secondary index, then for each
    /// matching item in the index, DynamoDB fetches the entire item from the parent
    /// table. If the index is configured to project all item attributes, then all of
    /// the data can be obtained from the local secondary index, and no fetching is
    /// required.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_PROJECTED_ATTRIBUTES</code> - Allowed only when querying an index.
    /// Retrieves all attributes that have been projected into the index. If the
    /// index is configured to project all attributes, this return value is
    /// equivalent to specifying <code>ALL_ATTRIBUTES</code>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>COUNT</code> - Returns the number of matching items, rather than the
    /// matching items themselves.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SPECIFIC_ATTRIBUTES</code> - Returns only the attributes listed in
    /// <code>AttributesToGet</code>. This return value is equivalent to
    /// specifying <code>AttributesToGet</code> without specifying any value
    /// for <code>Select</code>.</p>
    /// <p>If you query or scan a local secondary index and request only attributes that
    /// are projected into that index, the operation reads only the index and not the
    /// table. If any of the requested attributes are not projected into the local
    /// secondary index, DynamoDB fetches each of these attributes from the parent
    /// table. This extra fetching incurs additional throughput cost and latency.</p>
    /// <p>If you query or scan a global secondary index, you can only request
    /// attributes that are projected into the index. Global secondary index queries
    /// cannot fetch attributes from the parent table.</p>
    /// </li>
    /// </ul>
    /// <p>If neither <code>Select</code> nor <code>AttributesToGet</code>
    /// are specified, DynamoDB defaults to <code>ALL_ATTRIBUTES</code> when accessing a
    /// table, and <code>ALL_PROJECTED_ATTRIBUTES</code> when accessing an index. You cannot
    /// use both <code>Select</code> and <code>AttributesToGet</code>
    /// together in a single request, unless the value for <code>Select</code> is
    /// <code>SPECIFIC_ATTRIBUTES</code>. (This usage is equivalent to specifying
    /// <code>AttributesToGet</code> without any value for
    /// <code>Select</code>.)</p>
    /// <note>
    /// <p>If you use the <code>ProjectionExpression</code> parameter, then
    /// the value for <code>Select</code> can only be
    /// <code>SPECIFIC_ATTRIBUTES</code>. Any other value for
    /// <code>Select</code> will return an error.</p>
    /// </note>
    pub select: &'a std::option::Option<crate::model::Select>,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ScanFilter.html">ScanFilter</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub scan_filter: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::Condition>,
    >,
    /// <p>This is a legacy parameter.  Use <code>FilterExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: &'a std::option::Option<crate::model::ConditionalOperator>,
    /// <p>The primary key of the first item that this operation will evaluate. Use the value that was returned for <code>LastEvaluatedKey</code> in the previous operation.</p>
    /// <p>The data type for <code>ExclusiveStartKey</code> must be String, Number or Binary. No set data types are allowed.</p>
    /// <p>In a parallel scan, a
    /// <code>Scan</code> request that includes <code>ExclusiveStartKey</code> must specify the same segment
    /// whose previous <code>Scan</code> returned the corresponding value of <code>LastEvaluatedKey</code>.</p>
    pub exclusive_start_key: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>For a parallel <code>Scan</code> request, <code>TotalSegments</code> represents the total number of
    /// segments into which the <code>Scan</code> operation will be divided. The value of
    /// <code>TotalSegments</code> corresponds to the number of application workers that will perform the
    /// parallel scan. For example, if you want to use four application threads to scan a table or an index,
    /// specify a <code>TotalSegments</code> value of 4.</p>
    /// <p>The value for <code>TotalSegments</code> must be greater than or equal to 1, and less than or equal
    /// to 1000000. If you specify a <code>TotalSegments</code> value of 1, the <code>Scan</code> operation will
    /// be sequential rather than parallel.</p>
    /// <p>If you specify <code>TotalSegments</code>, you must also specify <code>Segment</code>.</p>
    pub total_segments: &'a std::option::Option<i32>,
    /// <p>For a parallel <code>Scan</code> request, <code>Segment</code> identifies an individual segment to be
    /// scanned by an application worker.</p>
    /// <p>Segment IDs are zero-based, so the first segment is always 0. For example, if you want to
    /// use four application threads to scan a table or an index, then the first thread specifies a <code>Segment</code> value
    /// of 0, the second thread specifies 1, and so on.</p>
    /// <p>The value of <code>LastEvaluatedKey</code> returned from a parallel <code>Scan</code> request must be
    /// used as <code>ExclusiveStartKey</code> with the same segment ID in a subsequent <code>Scan</code>
    /// operation.</p>
    /// <p>The value for <code>Segment</code> must be greater than or equal to 0, and less than the value
    /// provided for <code>TotalSegments</code>.</p>
    /// <p>If you provide <code>Segment</code>, you must also provide <code>TotalSegments</code>.</p>
    pub segment: &'a std::option::Option<i32>,
    /// <p>A string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.</p>
    /// <p>If no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub projection_expression: &'a std::option::Option<std::string::String>,
    /// <p>A string that contains conditions that DynamoDB applies after the <code>Scan</code> operation, but
    /// before the data is returned to you. Items that do not satisfy the <code>FilterExpression</code>
    /// criteria are not returned.</p>
    /// <note>
    /// <p>A <code>FilterExpression</code> is applied after the items have already been read; the process of
    /// filtering does not consume any additional read capacity units.</p>
    /// </note>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#FilteringResults">Filter Expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub filter_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer Guide</i>). To work around this, you could specify the following for <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information on expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to
    /// dereference an attribute value. For example, suppose that you wanted to check whether
    /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>A Boolean value that determines the read consistency model during the scan:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>ConsistentRead</code> is <code>false</code>, then the data returned from
    /// <code>Scan</code> might not contain the results from other recently
    /// completed write operations (<code>PutItem</code>, <code>UpdateItem</code>, or
    /// <code>DeleteItem</code>).</p>
    /// </li>
    /// <li>
    /// <p>If <code>ConsistentRead</code> is <code>true</code>, then all of the write operations that completed before the <code>Scan</code> began are guaranteed to be contained in the <code>Scan</code> response.</p>
    /// </li>
    /// </ul>
    /// <p>The default setting for <code>ConsistentRead</code> is <code>false</code>.</p>
    /// <p>The <code>ConsistentRead</code> parameter is not supported on global secondary indexes. If you scan a global secondary index with <code>ConsistentRead</code> set to true, you will receive a <code>ValidationException</code>.</p>
    pub consistent_read: &'a std::option::Option<bool>,
}
impl<'a> std::fmt::Debug for ScanInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScanInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.field("attributes_to_get", &self.attributes_to_get);
        formatter.field("limit", &self.limit);
        formatter.field("select", &self.select);
        formatter.field("scan_filter", &self.scan_filter);
        formatter.field("conditional_operator", &self.conditional_operator);
        formatter.field("exclusive_start_key", &self.exclusive_start_key);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field("total_segments", &self.total_segments);
        formatter.field("segment", &self.segment);
        formatter.field("projection_expression", &self.projection_expression);
        formatter.field("filter_expression", &self.filter_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.field(
            "expression_attribute_values",
            &self.expression_attribute_values,
        );
        formatter.field("consistent_read", &self.consistent_read);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceInputBody<'a> {
    /// <p>Identifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).</p>
    pub resource_arn: &'a std::option::Option<std::string::String>,
    /// <p>The tags to be assigned to the Amazon DynamoDB resource.</p>
    pub tags: &'a std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl<'a> std::fmt::Debug for TagResourceInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceInputBody");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TransactGetItemsInputBody<'a> {
    /// <p>An ordered array of up to 25 <code>TransactGetItem</code> objects,
    /// each of which contains a <code>Get</code> structure.</p>
    pub transact_items: &'a std::option::Option<std::vec::Vec<crate::model::TransactGetItem>>,
    /// <p>A value of <code>TOTAL</code> causes consumed capacity information
    /// to be returned, and a value of <code>NONE</code> prevents that information
    /// from being returned. No other value is valid.</p>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
}
impl<'a> std::fmt::Debug for TransactGetItemsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TransactGetItemsInputBody");
        formatter.field("transact_items", &self.transact_items);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TransactWriteItemsInputBody<'a> {
    /// <p>An ordered array of up to 25 <code>TransactWriteItem</code> objects, each of which
    /// contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or
    /// <code>Delete</code> object. These can operate on items in different tables, but the
    /// tables must reside in the same AWS account and Region, and no two of them can operate on
    /// the same item. </p>
    pub transact_items: &'a std::option::Option<std::vec::Vec<crate::model::TransactWriteItem>>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned. If set to
    /// <code>SIZE</code>, the response includes statistics about item collections (if any), that
    /// were modified during the operation and are returned in the response.
    /// If set to <code>NONE</code> (the default), no statistics are returned.
    /// </p>
    pub return_item_collection_metrics:
        &'a std::option::Option<crate::model::ReturnItemCollectionMetrics>,
    /// <p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code>
    /// idempotent, meaning that multiple identical calls have the same effect as one single call.</p>
    /// <p>Although multiple identical calls using the same client request token produce the same
    /// result on the server (no side effects), the responses to the calls might not be the
    /// same. If the <code>ReturnConsumedCapacity></code> parameter is set, then the initial
    /// <code>TransactWriteItems</code> call returns the amount of write capacity units
    /// consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with
    /// the same client token return the number of read capacity units consumed in reading the
    /// item.</p>
    /// <p>A client request token is valid for 10 minutes after the first request that uses it is
    /// completed. After 10 minutes, any request with the same client token is treated as a new
    /// request. Do not resubmit the same request with the same client token for more than 10
    /// minutes, or the result might not be idempotent.</p>
    /// <p>If you submit a request with the same client token but a change in other parameters
    /// within the 10-minute idempotency window, DynamoDB returns an
    /// <code>IdempotentParameterMismatch</code> exception.</p>
    pub client_request_token: &'a std::option::Option<std::string::String>,
}
impl<'a> std::fmt::Debug for TransactWriteItemsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TransactWriteItemsInputBody");
        formatter.field("transact_items", &self.transact_items);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field(
            "return_item_collection_metrics",
            &self.return_item_collection_metrics,
        );
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceInputBody<'a> {
    /// <p>The DynamoDB resource that the tags will be removed from. This value is an Amazon
    /// Resource Name (ARN).</p>
    pub resource_arn: &'a std::option::Option<std::string::String>,
    /// <p>A list of tag keys. Existing tags of the resource whose keys are members of this list
    /// will be removed from the DynamoDB resource.</p>
    pub tag_keys: &'a std::option::Option<std::vec::Vec<std::string::String>>,
}
impl<'a> std::fmt::Debug for UntagResourceInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceInputBody");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("tag_keys", &self.tag_keys);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContinuousBackupsInputBody<'a> {
    /// <p>The name of the table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Represents the settings used to enable point in time recovery.</p>
    pub point_in_time_recovery_specification:
        &'a std::option::Option<crate::model::PointInTimeRecoverySpecification>,
}
impl<'a> std::fmt::Debug for UpdateContinuousBackupsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContinuousBackupsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field(
            "point_in_time_recovery_specification",
            &self.point_in_time_recovery_specification,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContributorInsightsInputBody<'a> {
    /// <p>The name of the table.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The global secondary index name, if applicable.</p>
    pub index_name: &'a std::option::Option<std::string::String>,
    /// <p>Represents the contributor insights action.</p>
    pub contributor_insights_action:
        &'a std::option::Option<crate::model::ContributorInsightsAction>,
}
impl<'a> std::fmt::Debug for UpdateContributorInsightsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContributorInsightsInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.field(
            "contributor_insights_action",
            &self.contributor_insights_action,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGlobalTableInputBody<'a> {
    /// <p>The global table name.</p>
    pub global_table_name: &'a std::option::Option<std::string::String>,
    /// <p>A list of Regions that should be added or removed from the global table.</p>
    pub replica_updates: &'a std::option::Option<std::vec::Vec<crate::model::ReplicaUpdate>>,
}
impl<'a> std::fmt::Debug for UpdateGlobalTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGlobalTableInputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.field("replica_updates", &self.replica_updates);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGlobalTableSettingsInputBody<'a> {
    /// <p>The name of the global table</p>
    pub global_table_name: &'a std::option::Option<std::string::String>,
    /// <p>The billing mode of the global table. If <code>GlobalTableBillingMode</code> is not specified, the global table defaults to <code>PROVISIONED</code> capacity billing mode.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub global_table_billing_mode: &'a std::option::Option<crate::model::BillingMode>,
    /// <p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException.</code>
    /// </p>
    pub global_table_provisioned_write_capacity_units: &'a std::option::Option<i64>,
    /// <p>Auto scaling settings for managing provisioned write capacity for the global
    /// table.</p>
    pub global_table_provisioned_write_capacity_auto_scaling_settings_update:
        &'a std::option::Option<crate::model::AutoScalingSettingsUpdate>,
    /// <p>Represents the settings of a global secondary index for a global table that will be modified.</p>
    pub global_table_global_secondary_index_settings_update: &'a std::option::Option<
        std::vec::Vec<crate::model::GlobalTableGlobalSecondaryIndexSettingsUpdate>,
    >,
    /// <p>Represents the settings for a global table in a Region that will be modified.</p>
    pub replica_settings_update:
        &'a std::option::Option<std::vec::Vec<crate::model::ReplicaSettingsUpdate>>,
}
impl<'a> std::fmt::Debug for UpdateGlobalTableSettingsInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGlobalTableSettingsInputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.field("global_table_billing_mode", &self.global_table_billing_mode);
        formatter.field(
            "global_table_provisioned_write_capacity_units",
            &self.global_table_provisioned_write_capacity_units,
        );
        formatter.field(
            "global_table_provisioned_write_capacity_auto_scaling_settings_update",
            &self.global_table_provisioned_write_capacity_auto_scaling_settings_update,
        );
        formatter.field(
            "global_table_global_secondary_index_settings_update",
            &self.global_table_global_secondary_index_settings_update,
        );
        formatter.field("replica_settings_update", &self.replica_settings_update);
        formatter.finish()
    }
}

/// <p>Represents the input of an <code>UpdateItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateItemInputBody<'a> {
    /// <p>The name of the table containing the item to update.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.</p>
    /// <p>For the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.</p>
    pub key: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>UpdateExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.AttributeUpdates.html">AttributeUpdates</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub attribute_updates: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValueUpdate>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.Expected.html">Expected</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub expected: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::ExpectedAttributeValue>,
    >,
    /// <p>This is a legacy parameter.  Use <code>ConditionExpression</code> instead.   For more information, see
    /// <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LegacyConditionalParameters.ConditionalOperator.html">ConditionalOperator</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub conditional_operator: &'a std::option::Option<crate::model::ConditionalOperator>,
    /// <p>Use <code>ReturnValues</code> if you want to get the item attributes as they appear
    /// before or after they are updated. For <code>UpdateItem</code>, the valid values
    /// are:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>NONE</code> - If <code>ReturnValues</code> is not specified, or if its value is
    /// <code>NONE</code>, then nothing is returned. (This setting is the default for
    /// <code>ReturnValues</code>.)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_OLD</code> - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>UPDATED_OLD</code> - Returns only the updated attributes, as they appeared before the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ALL_NEW</code> - Returns all of the attributes of the item, as they appear after the UpdateItem operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>UPDATED_NEW</code> - Returns only the updated attributes, as they appear after the UpdateItem operation.</p>
    /// </li>
    /// </ul>
    /// <p>There is no additional cost associated with requesting a return value aside from the
    /// small network and processing overhead of receiving a larger response. No read capacity
    /// units are consumed.</p>
    /// <p>The values returned are strongly consistent.</p>
    pub return_values: &'a std::option::Option<crate::model::ReturnValue>,
    /// <p>Determines the level of detail about provisioned throughput consumption that is returned in the response:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p>
    /// <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all.  In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p>
    /// </li>
    /// </ul>
    pub return_consumed_capacity: &'a std::option::Option<crate::model::ReturnConsumedCapacity>,
    /// <p>Determines whether item collection metrics are returned.  If set to <code>SIZE</code>, the response includes statistics about item collections, if any, that were modified during
    /// the operation are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned.</p>
    pub return_item_collection_metrics:
        &'a std::option::Option<crate::model::ReturnItemCollectionMetrics>,
    /// <p>An expression that defines one or more attributes to be updated, the action to be
    /// performed on them, and new values for them.</p>
    /// <p>The following action values are available for <code>UpdateExpression</code>.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SET</code> - Adds one or more attributes and values to an item. If any of
    /// these attributes already exist, they are replaced by the new values. You can
    /// also use <code>SET</code> to add or subtract from an attribute that is of type
    /// Number. For example: <code>SET myNum = myNum + :val</code>
    /// </p>
    /// <p>
    /// <code>SET</code> supports the following functions:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>if_not_exists (path, operand)</code> - if the item does not contain an attribute at the specified path, then <code>if_not_exists</code> evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>list_append (operand, operand)</code> - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.</p>
    /// </li>
    /// </ul>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>REMOVE</code> - Removes one or more attributes from an item.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ADD</code> - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of
    /// <code>ADD</code> depends on the data type of the attribute:</p>
    /// <ul>
    /// <li>
    /// <p>If the existing attribute is a number, and if <code>Value</code> is also a number, then
    /// <code>Value</code> is mathematically added to the existing attribute. If <code>Value</code> is a
    /// negative number, then it is subtracted from the existing attribute.</p>
    /// <note>
    /// <p>If you use <code>ADD</code> to increment or decrement a number value for an item
    /// that doesn't exist before the update, DynamoDB uses <code>0</code> as the initial
    /// value.</p>
    /// <p>Similarly, if you use <code>ADD</code> for an existing item to increment
    /// or decrement an attribute value that doesn't exist before the
    /// update, DynamoDB uses <code>0</code> as the initial value. For
    /// example, suppose that the item you want to update doesn't have an
    /// attribute named <code>itemcount</code>, but you decide to
    /// <code>ADD</code> the number <code>3</code> to this attribute
    /// anyway. DynamoDB will create the <code>itemcount</code> attribute,
    /// set its initial value to <code>0</code>, and finally add
    /// <code>3</code> to it. The result will be a new
    /// <code>itemcount</code> attribute in the item, with a value of
    /// <code>3</code>.</p>
    /// </note>
    /// </li>
    /// <li>
    /// <p>If the existing data type is a set and if <code>Value</code> is also a set, then
    /// <code>Value</code> is added to the existing set. For example, if the attribute value is the set
    /// <code>[1,2]</code>, and the <code>ADD</code> action specified <code>[3]</code>, then
    /// the final attribute value is <code>[1,2,3]</code>. An error occurs if an <code>ADD</code>
    /// action is specified for a set attribute and the attribute type specified does not
    /// match the existing set type. </p>
    /// <p>Both sets must have the same primitive data type. For example, if the existing data
    /// type is a set of strings, the <code>Value</code> must also be a set of strings.</p>
    /// </li>
    /// </ul>
    /// <important>
    /// <p>The <code>ADD</code> action only supports Number and set data types. In addition,
    /// <code>ADD</code> can only be used on top-level attributes, not nested attributes.</p>
    /// </important>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DELETE</code> - Deletes an element from a set.</p>
    /// <p>If a set of values is specified, then those values are subtracted from the old
    /// set. For example, if the attribute value was the set <code>[a,b,c]</code> and the
    /// <code>DELETE</code> action specifies <code>[a,c]</code>, then the final attribute value
    /// is <code>[b]</code>. Specifying an empty set is an error.</p>
    /// <important>
    /// <p>The <code>DELETE</code> action only supports set data types. In addition,
    /// <code>DELETE</code> can only be used on top-level attributes, not nested attributes.</p>
    /// </important>
    /// </li>
    /// </ul>
    /// <p>You can have many actions in a single expression, such as the following: <code>SET a=:value1,
    /// b=:value2 DELETE :value3, :value4, :value5</code>
    /// </p>
    /// <p>For more information on update expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.Modifying.html">Modifying Items and Attributes</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    pub update_expression: &'a std::option::Option<std::string::String>,
    /// <p>A condition that must be satisfied in order for a conditional update to succeed.</p>
    /// <p>An expression can contain any of the following:</p>
    /// <ul>
    /// <li>
    /// <p>Functions: <code>attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size</code>
    /// </p>
    /// <p>These function names are case-sensitive.</p>
    /// </li>
    /// <li>
    /// <p>Comparison operators: <code>= | <> |
    /// < | > | <= | >= |
    /// BETWEEN | IN </code>
    /// </p>
    /// </li>
    /// <li>
    /// <p> Logical operators: <code>AND | OR | NOT</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>For more information about condition expressions, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Specifying Conditions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub condition_expression: &'a std::option::Option<std::string::String>,
    /// <p>One or more substitution tokens for attribute names in an expression. The following are some use cases for using <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>To access an attribute whose name conflicts with a DynamoDB reserved word.</p>
    /// </li>
    /// <li>
    /// <p>To create a placeholder for repeating occurrences of an attribute name in an expression.</p>
    /// </li>
    /// <li>
    /// <p>To prevent special characters in an attribute name from being misinterpreted in an expression.</p>
    /// </li>
    /// </ul>
    /// <p>Use the <b>#</b> character in an expression to dereference an attribute name. For example, consider the following attribute name:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Percentile</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The name of this attribute conflicts with a reserved word, so it cannot be used directly
    /// in an expression. (For the complete list of reserved words, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ReservedWords.html">Reserved Words</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.) To work around this, you could specify the following for
    /// <code>ExpressionAttributeNames</code>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>{"#P":"Percentile"}</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>You could then use this substitution in an expression, as in this example:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>#P = :val</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>Tokens that begin with the <b>:</b> character are <i>expression attribute values</i>, which are placeholders for the actual value at runtime.</p>
    /// </note>
    /// <p>For more information about expression attribute names, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.AccessingItemAttributes.html">Specifying Item Attributes</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_names: &'a std::option::Option<
        std::collections::HashMap<std::string::String, std::string::String>,
    >,
    /// <p>One or more values that can be substituted in an expression.</p>
    /// <p>Use the <b>:</b> (colon) character in an expression to
    /// dereference an attribute value. For example, suppose that you wanted to check whether
    /// the value of the <code>ProductStatus</code> attribute was one of the following: </p>
    /// <p>
    /// <code>Available | Backordered | Discontinued</code>
    /// </p>
    /// <p>You would first need to specify <code>ExpressionAttributeValues</code> as follows:</p>
    /// <p>
    /// <code>{ ":avail":{"S":"Available"}, ":back":{"S":"Backordered"}, ":disc":{"S":"Discontinued"} }</code>
    /// </p>
    /// <p>You could then use these values in an expression, such as this:</p>
    /// <p>
    /// <code>ProductStatus IN (:avail, :back, :disc)</code>
    /// </p>
    /// <p>For more information on expression attribute values, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.SpecifyingConditions.html">Condition Expressions</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    pub expression_attribute_values: &'a std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
}
impl<'a> std::fmt::Debug for UpdateItemInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateItemInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("key", &self.key);
        formatter.field("attribute_updates", &self.attribute_updates);
        formatter.field("expected", &self.expected);
        formatter.field("conditional_operator", &self.conditional_operator);
        formatter.field("return_values", &self.return_values);
        formatter.field("return_consumed_capacity", &self.return_consumed_capacity);
        formatter.field(
            "return_item_collection_metrics",
            &self.return_item_collection_metrics,
        );
        formatter.field("update_expression", &self.update_expression);
        formatter.field("condition_expression", &self.condition_expression);
        formatter.field(
            "expression_attribute_names",
            &self.expression_attribute_names,
        );
        formatter.field(
            "expression_attribute_values",
            &self.expression_attribute_values,
        );
        formatter.finish()
    }
}

/// <p>Represents the input of an <code>UpdateTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTableInputBody<'a> {
    /// <p>An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index.</p>
    pub attribute_definitions:
        &'a std::option::Option<std::vec::Vec<crate::model::AttributeDefinition>>,
    /// <p>The name of the table to be updated.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Controls how you are charged for read and write throughput and how you manage capacity.
    /// When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial
    /// provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes
    /// over the past 30 minutes.</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual">Provisioned Mode</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand">On-Demand Mode</a>.
    /// </p>
    /// </li>
    /// </ul>
    pub billing_mode: &'a std::option::Option<crate::model::BillingMode>,
    /// <p>The new provisioned throughput settings for the specified table or index.</p>
    pub provisioned_throughput: &'a std::option::Option<crate::model::ProvisionedThroughput>,
    /// <p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Create</code> - add a new global secondary index to the table.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Delete</code> - remove a global secondary index from the table.</p>
    /// </li>
    /// </ul>
    /// <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html">Managing Global Secondary
    /// Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
    pub global_secondary_index_updates:
        &'a std::option::Option<std::vec::Vec<crate::model::GlobalSecondaryIndexUpdate>>,
    /// <p>Represents the DynamoDB Streams configuration for the table.</p>
    /// <note>
    /// <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a
    /// table that already has a stream, or if you try to disable a stream on a table that
    /// doesn't have a stream.</p>
    /// </note>
    pub stream_specification: &'a std::option::Option<crate::model::StreamSpecification>,
    /// <p>The new server-side encryption settings for the specified table.</p>
    pub sse_specification: &'a std::option::Option<crate::model::SSESpecification>,
    /// <p>A list of replica update actions (create, delete, or update) for the table.</p>
    /// <note>
    /// <p>This property only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version 2019.11.21</a> of global tables.</p>
    /// </note>
    pub replica_updates:
        &'a std::option::Option<std::vec::Vec<crate::model::ReplicationGroupUpdate>>,
}
impl<'a> std::fmt::Debug for UpdateTableInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTableInputBody");
        formatter.field("attribute_definitions", &self.attribute_definitions);
        formatter.field("table_name", &self.table_name);
        formatter.field("billing_mode", &self.billing_mode);
        formatter.field("provisioned_throughput", &self.provisioned_throughput);
        formatter.field(
            "global_secondary_index_updates",
            &self.global_secondary_index_updates,
        );
        formatter.field("stream_specification", &self.stream_specification);
        formatter.field("sse_specification", &self.sse_specification);
        formatter.field("replica_updates", &self.replica_updates);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTableReplicaAutoScalingInputBody<'a> {
    /// <p>Represents the auto scaling settings of the global secondary indexes of the replica
    /// to be updated.</p>
    pub global_secondary_index_updates:
        &'a std::option::Option<std::vec::Vec<crate::model::GlobalSecondaryIndexAutoScalingUpdate>>,
    /// <p>The name of the global table to be updated.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Represents the auto scaling settings to be modified for a global table or global
    /// secondary index.</p>
    pub provisioned_write_capacity_auto_scaling_update:
        &'a std::option::Option<crate::model::AutoScalingSettingsUpdate>,
    /// <p>Represents the auto scaling settings of replicas of the table that will be
    /// modified.</p>
    pub replica_updates:
        &'a std::option::Option<std::vec::Vec<crate::model::ReplicaAutoScalingUpdate>>,
}
impl<'a> std::fmt::Debug for UpdateTableReplicaAutoScalingInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTableReplicaAutoScalingInputBody");
        formatter.field(
            "global_secondary_index_updates",
            &self.global_secondary_index_updates,
        );
        formatter.field("table_name", &self.table_name);
        formatter.field(
            "provisioned_write_capacity_auto_scaling_update",
            &self.provisioned_write_capacity_auto_scaling_update,
        );
        formatter.field("replica_updates", &self.replica_updates);
        formatter.finish()
    }
}

/// <p>Represents the input of an <code>UpdateTimeToLive</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTimeToLiveInputBody<'a> {
    /// <p>The name of the table to be configured.</p>
    pub table_name: &'a std::option::Option<std::string::String>,
    /// <p>Represents the settings used to enable or disable Time to Live for the specified table.</p>
    pub time_to_live_specification: &'a std::option::Option<crate::model::TimeToLiveSpecification>,
}
impl<'a> std::fmt::Debug for UpdateTimeToLiveInputBody<'a> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTimeToLiveInputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field(
            "time_to_live_specification",
            &self.time_to_live_specification,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchExecuteStatementOutputBody {
    /// <p>
    /// The response to each PartiQL statement in the batch.
    /// </p>
    #[serde(rename = "Responses")]
    #[serde(default)]
    pub responses: std::option::Option<std::vec::Vec<crate::model::BatchStatementResponse>>,
}
impl std::fmt::Debug for BatchExecuteStatementOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchExecuteStatementOutputBody");
        formatter.field("responses", &self.responses);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>BatchGetItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchGetItemOutputBody {
    /// <p>A map of table name to a list of items. Each object in <code>Responses</code> consists of a table
    /// name, along with a map of attribute data consisting of the data type and attribute value.</p>
    #[serde(rename = "Responses")]
    #[serde(default)]
    pub responses: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<
                std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
            >,
        >,
    >,
    /// <p>A map of tables and their respective keys that were not processed with the current response.
    /// The <code>UnprocessedKeys</code> value is in the same form as <code>RequestItems</code>, so the value can
    /// be provided directly to a subsequent <code>BatchGetItem</code> operation. For more information, see
    /// <code>RequestItems</code> in the Request Parameters section.</p>
    /// <p>Each element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Keys</code> - An array of primary key attribute values that define specific items in the
    /// table.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ProjectionExpression</code> - One or more attributes to be
    /// retrieved from the table or index. By default, all attributes are returned. If a
    /// requested attribute is not found, it does not appear in the result.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ConsistentRead</code> - The consistency of a read operation. If set to <code>true</code>,
    /// then a strongly consistent read is used; otherwise, an eventually consistent read is
    /// used.</p>
    /// </li>
    /// </ul>
    /// <p>If there are no unprocessed keys remaining, the response contains an empty
    /// <code>UnprocessedKeys</code> map.</p>
    #[serde(rename = "UnprocessedKeys")]
    #[serde(default)]
    pub unprocessed_keys: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::KeysAndAttributes>,
    >,
    /// <p>The read capacity units consumed by the entire <code>BatchGetItem</code> operation.</p>
    /// <p>Each element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>TableName</code> - The table that consumed the provisioned throughput.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>CapacityUnits</code> - The total number of capacity units consumed.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<std::vec::Vec<crate::model::ConsumedCapacity>>,
}
impl std::fmt::Debug for BatchGetItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchGetItemOutputBody");
        formatter.field("responses", &self.responses);
        formatter.field("unprocessed_keys", &self.unprocessed_keys);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>BatchWriteItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchWriteItemOutputBody {
    /// <p>A map of tables and requests against those tables that were not processed. The
    /// <code>UnprocessedItems</code> value is in the same form as <code>RequestItems</code>, so you can provide
    /// this value directly to a subsequent <code>BatchGetItem</code> operation. For more information, see
    /// <code>RequestItems</code> in the Request Parameters section.</p>
    /// <p>Each <code>UnprocessedItems</code> entry consists of a table name and, for that table, a list of
    /// operations to perform (<code>DeleteRequest</code> or <code>PutRequest</code>).</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DeleteRequest</code> - Perform a <code>DeleteItem</code> operation on the specified item. The
    /// item to be deleted is identified by a <code>Key</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Key</code> - A map of primary key attribute values that uniquely identify the item.
    /// Each entry in this map consists of an attribute name and an attribute value.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PutRequest</code> - Perform a <code>PutItem</code> operation on the specified item. The item to
    /// be put is identified by an <code>Item</code> subelement:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>Item</code> - A map of attributes and their values. Each entry in this map consists
    /// of an attribute name and an attribute value. Attribute values must not be null; string
    /// and binary type attributes must have lengths greater than zero; and set type
    /// attributes must not be empty. Requests that contain empty values will be rejected with
    /// a <code>ValidationException</code> exception.</p>
    /// <p>If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table's attribute definition.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <p>If there are no unprocessed items remaining, the response contains an empty
    /// <code>UnprocessedItems</code> map.</p>
    #[serde(rename = "UnprocessedItems")]
    #[serde(default)]
    pub unprocessed_items: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<crate::model::WriteRequest>>,
    >,
    /// <p>A list of tables that were processed by <code>BatchWriteItem</code> and, for each table,
    /// information about any item collections that were affected by individual <code>DeleteItem</code> or
    /// <code>PutItem</code> operations.</p>
    /// <p>Each entry consists of the following subelements:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ItemCollectionKey</code> - The partition key value of the item collection. This is the same as
    /// the partition key value of the item.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SizeEstimateRangeGB</code> - An estimate of item collection size, expressed in GB. This is
    /// a two-element array containing a lower bound and an upper bound for the estimate. The
    /// estimate includes the size of all the items in the table, plus the size of all attributes
    /// projected into all of the local secondary indexes on the table. Use this estimate to measure whether a
    /// local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ItemCollectionMetrics")]
    #[serde(default)]
    pub item_collection_metrics: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::model::ItemCollectionMetrics>,
        >,
    >,
    /// <p>The capacity units consumed by the entire <code>BatchWriteItem</code> operation.</p>
    /// <p>Each element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>TableName</code> - The table that consumed the provisioned throughput.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>CapacityUnits</code> - The total number of capacity units consumed.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<std::vec::Vec<crate::model::ConsumedCapacity>>,
}
impl std::fmt::Debug for BatchWriteItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchWriteItemOutputBody");
        formatter.field("unprocessed_items", &self.unprocessed_items);
        formatter.field("item_collection_metrics", &self.item_collection_metrics);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateBackupOutputBody {
    /// <p>Contains the details of the backup created for the table.</p>
    #[serde(rename = "BackupDetails")]
    #[serde(default)]
    pub backup_details: std::option::Option<crate::model::BackupDetails>,
}
impl std::fmt::Debug for CreateBackupOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBackupOutputBody");
        formatter.field("backup_details", &self.backup_details);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGlobalTableOutputBody {
    /// <p>Contains the details of the global table.</p>
    #[serde(rename = "GlobalTableDescription")]
    #[serde(default)]
    pub global_table_description: std::option::Option<crate::model::GlobalTableDescription>,
}
impl std::fmt::Debug for CreateGlobalTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlobalTableOutputBody");
        formatter.field("global_table_description", &self.global_table_description);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>CreateTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTableOutputBody {
    /// <p>Represents the properties of the table.</p>
    #[serde(rename = "TableDescription")]
    #[serde(default)]
    pub table_description: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for CreateTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTableOutputBody");
        formatter.field("table_description", &self.table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteBackupOutputBody {
    /// <p>Contains the description of the backup created for the table.</p>
    #[serde(rename = "BackupDescription")]
    #[serde(default)]
    pub backup_description: std::option::Option<crate::model::BackupDescription>,
}
impl std::fmt::Debug for DeleteBackupOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteBackupOutputBody");
        formatter.field("backup_description", &self.backup_description);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>DeleteItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteItemOutputBody {
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, representing the item as it
    /// appeared before the <code>DeleteItem</code> operation. This map appears in the response only if
    /// <code>ReturnValues</code> was specified as <code>ALL_OLD</code> in the request.</p>
    #[serde(rename = "Attributes")]
    #[serde(default)]
    pub attributes: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>DeleteItem</code> operation. The data
    /// returned includes the total provisioned throughput consumed, along with statistics for
    /// the table and any indexes involved in the operation. <code>ConsumedCapacity</code> is
    /// only returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For
    /// more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Mode</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
    /// <p>Information about item collections, if any, that were affected by the
    /// <code>DeleteItem</code> operation.
    /// <code>ItemCollectionMetrics</code> is only returned if the
    /// <code>ReturnItemCollectionMetrics</code> parameter was specified. If the
    /// table does not have any local secondary indexes, this information is not returned in the
    /// response.</p>
    /// <p>Each <code>ItemCollectionMetrics</code>
    /// element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ItemCollectionKey</code> - The partition key value of the item
    /// collection. This is the same as the partition key value of the item itself.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    /// in gigabytes. This value is a two-element array
    /// containing a lower bound and an upper bound for the
    /// estimate. The estimate includes the size of all the
    /// items in the table, plus the size of all attributes
    /// projected into all of the local secondary indexes on that
    /// table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ItemCollectionMetrics")]
    #[serde(default)]
    pub item_collection_metrics: std::option::Option<crate::model::ItemCollectionMetrics>,
}
impl std::fmt::Debug for DeleteItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteItemOutputBody");
        formatter.field("attributes", &self.attributes);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.field("item_collection_metrics", &self.item_collection_metrics);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>DeleteTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTableOutputBody {
    /// <p>Represents the properties of a table.</p>
    #[serde(rename = "TableDescription")]
    #[serde(default)]
    pub table_description: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for DeleteTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTableOutputBody");
        formatter.field("table_description", &self.table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeBackupOutputBody {
    /// <p>Contains the description of the backup created for the table.</p>
    #[serde(rename = "BackupDescription")]
    #[serde(default)]
    pub backup_description: std::option::Option<crate::model::BackupDescription>,
}
impl std::fmt::Debug for DescribeBackupOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeBackupOutputBody");
        formatter.field("backup_description", &self.backup_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContinuousBackupsOutputBody {
    /// <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    #[serde(rename = "ContinuousBackupsDescription")]
    #[serde(default)]
    pub continuous_backups_description:
        std::option::Option<crate::model::ContinuousBackupsDescription>,
}
impl std::fmt::Debug for DescribeContinuousBackupsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContinuousBackupsOutputBody");
        formatter.field(
            "continuous_backups_description",
            &self.continuous_backups_description,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeContributorInsightsOutputBody {
    /// <p>The name of the table being described.</p>
    #[serde(rename = "TableName")]
    #[serde(default)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The name of the global secondary index being described.</p>
    #[serde(rename = "IndexName")]
    #[serde(default)]
    pub index_name: std::option::Option<std::string::String>,
    /// <p>List of names of the associated Alpine rules.</p>
    #[serde(rename = "ContributorInsightsRuleList")]
    #[serde(default)]
    pub contributor_insights_rule_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Current Status contributor insights.</p>
    #[serde(rename = "ContributorInsightsStatus")]
    #[serde(default)]
    pub contributor_insights_status: std::option::Option<crate::model::ContributorInsightsStatus>,
    /// <p>Timestamp of the last time the status was changed.</p>
    #[serde(rename = "LastUpdateDateTime")]
    #[serde(
        deserialize_with = "crate::serde_util::stdoptionoptionsmithytypesinstant_epoch_seconds_deser"
    )]
    #[serde(default)]
    pub last_update_date_time: std::option::Option<smithy_types::Instant>,
    /// <p>Returns information about the last failure that encountered.</p>
    /// <p>The most common exceptions for a FAILED status are:</p>
    /// <ul>
    /// <li>
    /// <p>LimitExceededException -   Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for
    /// other tables/indexes OR disable Contributor Insights rules before retrying.</p>
    /// </li>
    /// <li>
    /// <p>AccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.</p>
    /// </li>
    /// <li>
    /// <p>AccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.</p>
    /// </li>
    /// <li>
    /// <p>InternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "FailureException")]
    #[serde(default)]
    pub failure_exception: std::option::Option<crate::model::FailureException>,
}
impl std::fmt::Debug for DescribeContributorInsightsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeContributorInsightsOutputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.field(
            "contributor_insights_rule_list",
            &self.contributor_insights_rule_list,
        );
        formatter.field(
            "contributor_insights_status",
            &self.contributor_insights_status,
        );
        formatter.field("last_update_date_time", &self.last_update_date_time);
        formatter.field("failure_exception", &self.failure_exception);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEndpointsOutputBody {
    /// <p>List of endpoints.</p>
    #[serde(rename = "Endpoints")]
    #[serde(default)]
    pub endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
}
impl std::fmt::Debug for DescribeEndpointsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEndpointsOutputBody");
        formatter.field("endpoints", &self.endpoints);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportOutputBody {
    /// <p>Represents the properties of the export.</p>
    #[serde(rename = "ExportDescription")]
    #[serde(default)]
    pub export_description: std::option::Option<crate::model::ExportDescription>,
}
impl std::fmt::Debug for DescribeExportOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportOutputBody");
        formatter.field("export_description", &self.export_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalTableOutputBody {
    /// <p>Contains the details of the global table.</p>
    #[serde(rename = "GlobalTableDescription")]
    #[serde(default)]
    pub global_table_description: std::option::Option<crate::model::GlobalTableDescription>,
}
impl std::fmt::Debug for DescribeGlobalTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalTableOutputBody");
        formatter.field("global_table_description", &self.global_table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalTableSettingsOutputBody {
    /// <p>The name of the global table.</p>
    #[serde(rename = "GlobalTableName")]
    #[serde(default)]
    pub global_table_name: std::option::Option<std::string::String>,
    /// <p>The Region-specific settings for the global table.</p>
    #[serde(rename = "ReplicaSettings")]
    #[serde(default)]
    pub replica_settings:
        std::option::Option<std::vec::Vec<crate::model::ReplicaSettingsDescription>>,
}
impl std::fmt::Debug for DescribeGlobalTableSettingsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalTableSettingsOutputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.field("replica_settings", &self.replica_settings);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeKinesisStreamingDestinationOutputBody {
    /// <p>The name of the table being described.</p>
    #[serde(rename = "TableName")]
    #[serde(default)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The list of replica structures for the table being described.</p>
    #[serde(rename = "KinesisDataStreamDestinations")]
    #[serde(default)]
    pub kinesis_data_stream_destinations:
        std::option::Option<std::vec::Vec<crate::model::KinesisDataStreamDestination>>,
}
impl std::fmt::Debug for DescribeKinesisStreamingDestinationOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeKinesisStreamingDestinationOutputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field(
            "kinesis_data_stream_destinations",
            &self.kinesis_data_stream_destinations,
        );
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>DescribeLimits</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeLimitsOutputBody {
    /// <p>The maximum total read capacity units that your account allows you to provision across
    /// all of your tables in this Region.</p>
    #[serde(rename = "AccountMaxReadCapacityUnits")]
    #[serde(default)]
    pub account_max_read_capacity_units: std::option::Option<i64>,
    /// <p>The maximum total write capacity units that your account allows you to provision across
    /// all of your tables in this Region.</p>
    #[serde(rename = "AccountMaxWriteCapacityUnits")]
    #[serde(default)]
    pub account_max_write_capacity_units: std::option::Option<i64>,
    /// <p>The maximum read capacity units that your account allows you to provision for a new
    /// table that you are creating in this Region, including the read capacity units
    /// provisioned for its global secondary indexes (GSIs).</p>
    #[serde(rename = "TableMaxReadCapacityUnits")]
    #[serde(default)]
    pub table_max_read_capacity_units: std::option::Option<i64>,
    /// <p>The maximum write capacity units that your account allows you to provision for a new
    /// table that you are creating in this Region, including the write capacity units
    /// provisioned for its global secondary indexes (GSIs).</p>
    #[serde(rename = "TableMaxWriteCapacityUnits")]
    #[serde(default)]
    pub table_max_write_capacity_units: std::option::Option<i64>,
}
impl std::fmt::Debug for DescribeLimitsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeLimitsOutputBody");
        formatter.field(
            "account_max_read_capacity_units",
            &self.account_max_read_capacity_units,
        );
        formatter.field(
            "account_max_write_capacity_units",
            &self.account_max_write_capacity_units,
        );
        formatter.field(
            "table_max_read_capacity_units",
            &self.table_max_read_capacity_units,
        );
        formatter.field(
            "table_max_write_capacity_units",
            &self.table_max_write_capacity_units,
        );
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>DescribeTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTableOutputBody {
    /// <p>The properties of the table.</p>
    #[serde(rename = "Table")]
    #[serde(default)]
    pub table: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for DescribeTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTableOutputBody");
        formatter.field("table", &self.table);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTableReplicaAutoScalingOutputBody {
    /// <p>Represents the auto scaling properties of the table.</p>
    #[serde(rename = "TableAutoScalingDescription")]
    #[serde(default)]
    pub table_auto_scaling_description:
        std::option::Option<crate::model::TableAutoScalingDescription>,
}
impl std::fmt::Debug for DescribeTableReplicaAutoScalingOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTableReplicaAutoScalingOutputBody");
        formatter.field(
            "table_auto_scaling_description",
            &self.table_auto_scaling_description,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeTimeToLiveOutputBody {
    /// <p></p>
    #[serde(rename = "TimeToLiveDescription")]
    #[serde(default)]
    pub time_to_live_description: std::option::Option<crate::model::TimeToLiveDescription>,
}
impl std::fmt::Debug for DescribeTimeToLiveOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeTimeToLiveOutputBody");
        formatter.field("time_to_live_description", &self.time_to_live_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableKinesisStreamingDestinationOutputBody {
    /// <p>The name of the table being modified.</p>
    #[serde(rename = "TableName")]
    #[serde(default)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The ARN for the specific Kinesis data stream.</p>
    #[serde(rename = "StreamArn")]
    #[serde(default)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The current status of the replication.</p>
    #[serde(rename = "DestinationStatus")]
    #[serde(default)]
    pub destination_status: std::option::Option<crate::model::DestinationStatus>,
}
impl std::fmt::Debug for DisableKinesisStreamingDestinationOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableKinesisStreamingDestinationOutputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("stream_arn", &self.stream_arn);
        formatter.field("destination_status", &self.destination_status);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableKinesisStreamingDestinationOutputBody {
    /// <p>The name of the table being modified.</p>
    #[serde(rename = "TableName")]
    #[serde(default)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The ARN for the specific Kinesis data stream.</p>
    #[serde(rename = "StreamArn")]
    #[serde(default)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The current status of the replication.</p>
    #[serde(rename = "DestinationStatus")]
    #[serde(default)]
    pub destination_status: std::option::Option<crate::model::DestinationStatus>,
}
impl std::fmt::Debug for EnableKinesisStreamingDestinationOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableKinesisStreamingDestinationOutputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("stream_arn", &self.stream_arn);
        formatter.field("destination_status", &self.destination_status);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteStatementOutputBody {
    /// <p>
    /// If a read operation was used, this property will contain the result of the reade operation; a map of attribute names and their values. For the write operations this value will be empty.
    /// </p>
    #[serde(rename = "Items")]
    #[serde(default)]
    pub items: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, crate::model::AttributeValue>>,
    >,
    /// <p>
    /// If the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results.
    /// </p>
    #[serde(rename = "NextToken")]
    #[serde(default)]
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExecuteStatementOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteStatementOutputBody");
        formatter.field("items", &self.items);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ExecuteTransactionOutputBody {
    /// <p>
    /// The response to a PartiQL transaction.
    /// </p>
    #[serde(rename = "Responses")]
    #[serde(default)]
    pub responses: std::option::Option<std::vec::Vec<crate::model::ItemResponse>>,
}
impl std::fmt::Debug for ExecuteTransactionOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExecuteTransactionOutputBody");
        formatter.field("responses", &self.responses);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportTableToPointInTimeOutputBody {
    /// <p>Contains a description of the table export.</p>
    #[serde(rename = "ExportDescription")]
    #[serde(default)]
    pub export_description: std::option::Option<crate::model::ExportDescription>,
}
impl std::fmt::Debug for ExportTableToPointInTimeOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExportTableToPointInTimeOutputBody");
        formatter.field("export_description", &self.export_description);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>GetItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct GetItemOutputBody {
    /// <p>A map of attribute names to <code>AttributeValue</code> objects, as specified
    /// by <code>ProjectionExpression</code>.</p>
    #[serde(rename = "Item")]
    #[serde(default)]
    pub item: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>GetItem</code> operation. The data returned
    /// includes the total provisioned throughput consumed, along with statistics for the table
    /// and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    /// returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
}
impl std::fmt::Debug for GetItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetItemOutputBody");
        formatter.field("item", &self.item);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBackupsOutputBody {
    /// <p>List of <code>BackupSummary</code> objects.</p>
    #[serde(rename = "BackupSummaries")]
    #[serde(default)]
    pub backup_summaries: std::option::Option<std::vec::Vec<crate::model::BackupSummary>>,
    /// <p>
    /// The ARN of the backup last evaluated when the current page of results was returned,
    /// inclusive of the current page of results. This value may be specified as the
    /// <code>ExclusiveStartBackupArn</code> of a new <code>ListBackups</code> operation in order to fetch the next page of results.
    /// </p>
    /// <p>
    /// If <code>LastEvaluatedBackupArn</code> is empty, then the last page of results has been processed and there are no
    /// more results to be retrieved.
    /// </p>
    /// <p> If <code>LastEvaluatedBackupArn</code> is not empty, this may or may not indicate that
    /// there is more data to be returned. All results are guaranteed to have been returned if
    /// and only if no value for <code>LastEvaluatedBackupArn</code> is returned. </p>
    #[serde(rename = "LastEvaluatedBackupArn")]
    #[serde(default)]
    pub last_evaluated_backup_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListBackupsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBackupsOutputBody");
        formatter.field("backup_summaries", &self.backup_summaries);
        formatter.field("last_evaluated_backup_arn", &self.last_evaluated_backup_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListContributorInsightsOutputBody {
    /// <p>A list of ContributorInsightsSummary.</p>
    #[serde(rename = "ContributorInsightsSummaries")]
    #[serde(default)]
    pub contributor_insights_summaries:
        std::option::Option<std::vec::Vec<crate::model::ContributorInsightsSummary>>,
    /// <p>A token to go to the next page if there is one.</p>
    #[serde(rename = "NextToken")]
    #[serde(default)]
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListContributorInsightsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListContributorInsightsOutputBody");
        formatter.field(
            "contributor_insights_summaries",
            &self.contributor_insights_summaries,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListExportsOutputBody {
    /// <p>A list of <code>ExportSummary</code> objects.</p>
    #[serde(rename = "ExportSummaries")]
    #[serde(default)]
    pub export_summaries: std::option::Option<std::vec::Vec<crate::model::ExportSummary>>,
    /// <p>If this value is returned, there are additional results to be displayed. To retrieve
    /// them, call <code>ListExports</code> again, with <code>NextToken</code> set to this
    /// value.</p>
    #[serde(rename = "NextToken")]
    #[serde(default)]
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListExportsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListExportsOutputBody");
        formatter.field("export_summaries", &self.export_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGlobalTablesOutputBody {
    /// <p>List of global table names.</p>
    #[serde(rename = "GlobalTables")]
    #[serde(default)]
    pub global_tables: std::option::Option<std::vec::Vec<crate::model::GlobalTable>>,
    /// <p>Last evaluated global table name.</p>
    #[serde(rename = "LastEvaluatedGlobalTableName")]
    #[serde(default)]
    pub last_evaluated_global_table_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListGlobalTablesOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGlobalTablesOutputBody");
        formatter.field("global_tables", &self.global_tables);
        formatter.field(
            "last_evaluated_global_table_name",
            &self.last_evaluated_global_table_name,
        );
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>ListTables</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTablesOutputBody {
    /// <p>The names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.</p>
    /// <p>If <code>LastEvaluatedTableName</code> also appears in the output, you can use this value as the
    /// <code>ExclusiveStartTableName</code> parameter in a subsequent <code>ListTables</code> request and
    /// obtain the next page of results.</p>
    #[serde(rename = "TableNames")]
    #[serde(default)]
    pub table_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the last table in the current page of results. Use this value as the
    /// <code>ExclusiveStartTableName</code> in a new request to obtain the next page of results, until
    /// all the table names are returned.</p>
    /// <p>If you do not receive a <code>LastEvaluatedTableName</code> value in the response, this means that
    /// there are no more table names to be retrieved.</p>
    #[serde(rename = "LastEvaluatedTableName")]
    #[serde(default)]
    pub last_evaluated_table_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTablesOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTablesOutputBody");
        formatter.field("table_names", &self.table_names);
        formatter.field("last_evaluated_table_name", &self.last_evaluated_table_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsOfResourceOutputBody {
    /// <p>The tags currently associated with the Amazon DynamoDB resource.</p>
    #[serde(rename = "Tags")]
    #[serde(default)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>If this value is returned, there are additional results to be displayed. To retrieve them,
    /// call ListTagsOfResource again, with NextToken set to this value.</p>
    #[serde(rename = "NextToken")]
    #[serde(default)]
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTagsOfResourceOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsOfResourceOutputBody");
        formatter.field("tags", &self.tags);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>PutItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct PutItemOutputBody {
    /// <p>The attribute values as they appeared before the <code>PutItem</code> operation, but only if
    /// <code>ReturnValues</code> is specified as <code>ALL_OLD</code> in the request. Each element
    /// consists of an attribute name and an attribute value.</p>
    #[serde(rename = "Attributes")]
    #[serde(default)]
    pub attributes: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>PutItem</code> operation. The data returned
    /// includes the total provisioned throughput consumed, along with statistics for the table
    /// and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    /// returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Read/Write Capacity Mode</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
    /// <p>Information about item collections, if any, that were affected by the
    /// <code>PutItem</code> operation. <code>ItemCollectionMetrics</code>
    /// is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table does not have any local
    /// secondary indexes, this information is not returned in the response.</p>
    /// <p>Each <code>ItemCollectionMetrics</code>
    /// element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ItemCollectionKey</code> - The partition key value of the item
    /// collection. This is the same as the partition key value of the item itself.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    /// in gigabytes. This value is a two-element array
    /// containing a lower bound and an upper bound for the
    /// estimate. The estimate includes the size of all the
    /// items in the table, plus the size of all attributes
    /// projected into all of the local secondary indexes on that
    /// table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ItemCollectionMetrics")]
    #[serde(default)]
    pub item_collection_metrics: std::option::Option<crate::model::ItemCollectionMetrics>,
}
impl std::fmt::Debug for PutItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutItemOutputBody");
        formatter.field("attributes", &self.attributes);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.field("item_collection_metrics", &self.item_collection_metrics);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>Query</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct QueryOutputBody {
    /// <p>An array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    #[serde(rename = "Items")]
    #[serde(default)]
    pub items: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, crate::model::AttributeValue>>,
    >,
    /// <p>The number of items in the response.</p>
    /// <p>If you used a <code>QueryFilter</code> in the request, then <code>Count</code> is the number of items
    /// returned after the filter was applied, and <code>ScannedCount</code> is the number of
    /// matching items before the filter was applied.</p>
    /// <p>If you did not use a filter in the request, then <code>Count</code> and <code>ScannedCount</code> are the
    /// same.</p>
    #[serde(rename = "Count")]
    pub count: i32,
    /// <p>The number of items evaluated, before any <code>QueryFilter</code> is applied. A high
    /// <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient
    /// <code>Query</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the
    /// <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as
    /// <code>Count</code>.</p>
    #[serde(rename = "ScannedCount")]
    pub scanned_count: i32,
    /// <p>The primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.</p>
    /// <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when <code>LastEvaluatedKey</code> is empty.</p>
    #[serde(rename = "LastEvaluatedKey")]
    #[serde(default)]
    pub last_evaluated_key: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>Query</code> operation. The data returned
    /// includes the total provisioned throughput consumed, along with statistics for the table
    /// and any indexes involved in the operation. <code>ConsumedCapacity</code> is only
    /// returned if the <code>ReturnConsumedCapacity</code> parameter was specified. For more
    /// information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned Throughput</a> in the <i>Amazon DynamoDB Developer
    /// Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
}
impl std::fmt::Debug for QueryOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueryOutputBody");
        formatter.field("items", &self.items);
        formatter.field("count", &self.count);
        formatter.field("scanned_count", &self.scanned_count);
        formatter.field("last_evaluated_key", &self.last_evaluated_key);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreTableFromBackupOutputBody {
    /// <p>The description of the table created from an existing backup.</p>
    #[serde(rename = "TableDescription")]
    #[serde(default)]
    pub table_description: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for RestoreTableFromBackupOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreTableFromBackupOutputBody");
        formatter.field("table_description", &self.table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreTableToPointInTimeOutputBody {
    /// <p>Represents the properties of a table.</p>
    #[serde(rename = "TableDescription")]
    #[serde(default)]
    pub table_description: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for RestoreTableToPointInTimeOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreTableToPointInTimeOutputBody");
        formatter.field("table_description", &self.table_description);
        formatter.finish()
    }
}

/// <p>Represents the output of a <code>Scan</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct ScanOutputBody {
    /// <p>An array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.</p>
    #[serde(rename = "Items")]
    #[serde(default)]
    pub items: std::option::Option<
        std::vec::Vec<std::collections::HashMap<std::string::String, crate::model::AttributeValue>>,
    >,
    /// <p>The number of items in the response.</p>
    /// <p>If you set <code>ScanFilter</code> in the request, then <code>Count</code> is the number of items
    /// returned after the filter was applied, and <code>ScannedCount</code> is the number of matching items
    /// before the filter was applied.</p>
    /// <p>If you did not use a filter in the request, then <code>Count</code> is the same as
    /// <code>ScannedCount</code>.</p>
    #[serde(rename = "Count")]
    pub count: i32,
    /// <p>The number of items evaluated, before any <code>ScanFilter</code> is applied. A high
    /// <code>ScannedCount</code> value with few, or no, <code>Count</code> results indicates an inefficient
    /// <code>Scan</code> operation. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/QueryAndScan.html#Count">Count and ScannedCount</a> in the
    /// <i>Amazon DynamoDB Developer Guide</i>.</p>
    /// <p>If you did not use a filter in the request, then <code>ScannedCount</code> is the same as
    /// <code>Count</code>.</p>
    #[serde(rename = "ScannedCount")]
    pub scanned_count: i32,
    /// <p>The primary key of the item where the operation stopped, inclusive of the previous
    /// result set. Use this value to start a new operation, excluding this value in the new
    /// request.</p>
    /// <p>If <code>LastEvaluatedKey</code> is empty, then the "last page" of results
    /// has been processed and there is no more data to be retrieved.</p>
    /// <p>If <code>LastEvaluatedKey</code> is not empty, it does not necessarily mean
    /// that there is more data in the result set. The only way to know when you have reached
    /// the end of the result set is when <code>LastEvaluatedKey</code> is
    /// empty.</p>
    #[serde(rename = "LastEvaluatedKey")]
    #[serde(default)]
    pub last_evaluated_key: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>Scan</code> operation. The data returned includes the total
    /// provisioned throughput consumed, along with statistics for the table and any indexes involved
    /// in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
    /// For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
    /// Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
}
impl std::fmt::Debug for ScanOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ScanOutputBody");
        formatter.field("items", &self.items);
        formatter.field("count", &self.count);
        formatter.field("scanned_count", &self.scanned_count);
        formatter.field("last_evaluated_key", &self.last_evaluated_key);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct TransactGetItemsOutputBody {
    /// <p>If the <i>ReturnConsumedCapacity</i> value was <code>TOTAL</code>,
    /// this is an array of <code>ConsumedCapacity</code> objects, one for each table
    /// addressed by <code>TransactGetItem</code> objects in the <i>TransactItems</i>
    /// parameter. These <code>ConsumedCapacity</code> objects report the read-capacity
    /// units consumed by the <code>TransactGetItems</code> call in that table.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<std::vec::Vec<crate::model::ConsumedCapacity>>,
    /// <p>An ordered array of up to 25 <code>ItemResponse</code> objects, each of which corresponds
    /// to the <code>TransactGetItem</code> object in the same position in the
    /// <i>TransactItems</i> array. Each <code>ItemResponse</code> object
    /// contains a Map of the name-value pairs that are the projected attributes of
    /// the requested item.</p>
    /// <p>If a requested item could not be retrieved, the corresponding <code>ItemResponse</code>
    /// object is Null, or if the requested item has no projected attributes, the corresponding
    /// <code>ItemResponse</code> object is an empty Map. </p>
    #[serde(rename = "Responses")]
    #[serde(default)]
    pub responses: std::option::Option<std::vec::Vec<crate::model::ItemResponse>>,
}
impl std::fmt::Debug for TransactGetItemsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TransactGetItemsOutputBody");
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.field("responses", &self.responses);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct TransactWriteItemsOutputBody {
    /// <p>The capacity units consumed by the entire <code>TransactWriteItems</code>
    /// operation. The values of the list are ordered according to
    /// the ordering of the <code>TransactItems</code> request parameter.
    /// </p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<std::vec::Vec<crate::model::ConsumedCapacity>>,
    /// <p>A list of tables that were processed by <code>TransactWriteItems</code> and, for each
    /// table, information about any item collections that were affected by individual
    /// <code>UpdateItem</code>, <code>PutItem</code>, or <code>DeleteItem</code>
    /// operations. </p>
    #[serde(rename = "ItemCollectionMetrics")]
    #[serde(default)]
    pub item_collection_metrics: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::model::ItemCollectionMetrics>,
        >,
    >,
}
impl std::fmt::Debug for TransactWriteItemsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TransactWriteItemsOutputBody");
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.field("item_collection_metrics", &self.item_collection_metrics);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContinuousBackupsOutputBody {
    /// <p>Represents the continuous backups and point in time recovery settings on the table.</p>
    #[serde(rename = "ContinuousBackupsDescription")]
    #[serde(default)]
    pub continuous_backups_description:
        std::option::Option<crate::model::ContinuousBackupsDescription>,
}
impl std::fmt::Debug for UpdateContinuousBackupsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContinuousBackupsOutputBody");
        formatter.field(
            "continuous_backups_description",
            &self.continuous_backups_description,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateContributorInsightsOutputBody {
    /// <p>The name of the table.</p>
    #[serde(rename = "TableName")]
    #[serde(default)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The name of the global secondary index, if applicable.</p>
    #[serde(rename = "IndexName")]
    #[serde(default)]
    pub index_name: std::option::Option<std::string::String>,
    /// <p>The status of contributor insights</p>
    #[serde(rename = "ContributorInsightsStatus")]
    #[serde(default)]
    pub contributor_insights_status: std::option::Option<crate::model::ContributorInsightsStatus>,
}
impl std::fmt::Debug for UpdateContributorInsightsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateContributorInsightsOutputBody");
        formatter.field("table_name", &self.table_name);
        formatter.field("index_name", &self.index_name);
        formatter.field(
            "contributor_insights_status",
            &self.contributor_insights_status,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGlobalTableOutputBody {
    /// <p>Contains the details of the global table.</p>
    #[serde(rename = "GlobalTableDescription")]
    #[serde(default)]
    pub global_table_description: std::option::Option<crate::model::GlobalTableDescription>,
}
impl std::fmt::Debug for UpdateGlobalTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGlobalTableOutputBody");
        formatter.field("global_table_description", &self.global_table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGlobalTableSettingsOutputBody {
    /// <p>The name of the global table.</p>
    #[serde(rename = "GlobalTableName")]
    #[serde(default)]
    pub global_table_name: std::option::Option<std::string::String>,
    /// <p>The Region-specific settings for the global table.</p>
    #[serde(rename = "ReplicaSettings")]
    #[serde(default)]
    pub replica_settings:
        std::option::Option<std::vec::Vec<crate::model::ReplicaSettingsDescription>>,
}
impl std::fmt::Debug for UpdateGlobalTableSettingsOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGlobalTableSettingsOutputBody");
        formatter.field("global_table_name", &self.global_table_name);
        formatter.field("replica_settings", &self.replica_settings);
        formatter.finish()
    }
}

/// <p>Represents the output of an <code>UpdateItem</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateItemOutputBody {
    /// <p>A map of attribute values as they appear before or after the <code>UpdateItem</code>
    /// operation, as determined by the <code>ReturnValues</code> parameter.</p>
    /// <p>The <code>Attributes</code> map is only present if <code>ReturnValues</code> was
    /// specified as something other than <code>NONE</code> in the request. Each element
    /// represents one attribute.</p>
    #[serde(rename = "Attributes")]
    #[serde(default)]
    pub attributes: std::option::Option<
        std::collections::HashMap<std::string::String, crate::model::AttributeValue>,
    >,
    /// <p>The capacity units consumed by the <code>UpdateItem</code> operation. The data returned includes the total
    /// provisioned throughput consumed, along with statistics for the table and any indexes involved
    /// in the operation. <code>ConsumedCapacity</code> is only returned if the <code>ReturnConsumedCapacity</code> parameter was specified.
    /// For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughputIntro.html">Provisioned
    /// Throughput</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
    #[serde(rename = "ConsumedCapacity")]
    #[serde(default)]
    pub consumed_capacity: std::option::Option<crate::model::ConsumedCapacity>,
    /// <p>Information about item collections, if any, that were affected by the
    /// <code>UpdateItem</code> operation.
    /// <code>ItemCollectionMetrics</code> is only returned if the <code>ReturnItemCollectionMetrics</code> parameter was specified. If the table
    /// does not have any local secondary indexes, this information is not
    /// returned in the response.</p>
    /// <p>Each <code>ItemCollectionMetrics</code>
    /// element consists of:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ItemCollectionKey</code> - The partition key value of the item
    /// collection. This is the same as the partition key value of the item itself.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SizeEstimateRangeGB</code> - An estimate of item collection size,
    /// in gigabytes. This value is a two-element array
    /// containing a lower bound and an upper bound for the
    /// estimate. The estimate includes the size of all the
    /// items in the table, plus the size of all attributes
    /// projected into all of the local secondary indexes on that
    /// table. Use this estimate to measure whether a local secondary index is approaching its size limit.</p>
    /// <p>The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.</p>
    /// </li>
    /// </ul>
    #[serde(rename = "ItemCollectionMetrics")]
    #[serde(default)]
    pub item_collection_metrics: std::option::Option<crate::model::ItemCollectionMetrics>,
}
impl std::fmt::Debug for UpdateItemOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateItemOutputBody");
        formatter.field("attributes", &self.attributes);
        formatter.field("consumed_capacity", &self.consumed_capacity);
        formatter.field("item_collection_metrics", &self.item_collection_metrics);
        formatter.finish()
    }
}

/// <p>Represents the output of an <code>UpdateTable</code> operation.</p>
#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTableOutputBody {
    /// <p>Represents the properties of the table.</p>
    #[serde(rename = "TableDescription")]
    #[serde(default)]
    pub table_description: std::option::Option<crate::model::TableDescription>,
}
impl std::fmt::Debug for UpdateTableOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTableOutputBody");
        formatter.field("table_description", &self.table_description);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTableReplicaAutoScalingOutputBody {
    /// <p>Returns information about the auto scaling settings of a table with replicas.</p>
    #[serde(rename = "TableAutoScalingDescription")]
    #[serde(default)]
    pub table_auto_scaling_description:
        std::option::Option<crate::model::TableAutoScalingDescription>,
}
impl std::fmt::Debug for UpdateTableReplicaAutoScalingOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTableReplicaAutoScalingOutputBody");
        formatter.field(
            "table_auto_scaling_description",
            &self.table_auto_scaling_description,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::default::Default, serde::Deserialize, std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTimeToLiveOutputBody {
    /// <p>Represents the output of an <code>UpdateTimeToLive</code> operation.</p>
    #[serde(rename = "TimeToLiveSpecification")]
    #[serde(default)]
    pub time_to_live_specification: std::option::Option<crate::model::TimeToLiveSpecification>,
}
impl std::fmt::Debug for UpdateTimeToLiveOutputBody {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTimeToLiveOutputBody");
        formatter.field(
            "time_to_live_specification",
            &self.time_to_live_specification,
        );
        formatter.finish()
    }
}
