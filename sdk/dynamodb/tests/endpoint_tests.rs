// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#![cfg(feature = "test-util")]
#[::tokio::test]
async fn operation_input_test_list_tables_1() {
    /* documentation: For custom endpoint with account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "SDK::Endpoint": "https://example.com",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.endpoint_url("https://example.com");
        let builder = builder.account_id("012345678901");
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://example.com"),
        "expected URI to start with `https://example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_2() {
    /* documentation: For custom endpoint with empty account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "SDK::Endpoint": "https://example.com",
        "AWS::Auth::AccountId": ""
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.endpoint_url("https://example.com");
        let builder = builder.account_id("");
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://example.com"),
        "expected URI to start with `https://example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_3() {
    /* documentation: For region local with account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "local",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("local"));
        let builder = builder.account_id("012345678901");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("http://localhost:8000"),
        "expected URI to start with `http://localhost:8000` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_4() {
    /* documentation: For region local with empty account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "local",
        "AWS::Auth::AccountId": ""
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("local"));
        let builder = builder.account_id("");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("http://localhost:8000"),
        "expected URI to start with `http://localhost:8000` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_5() {
    /* documentation: For AccountIdEndpointMode required and no AccountId set */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountIdEndpointMode": "required"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id_endpoint_mode("required");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: AccountIdEndpointMode is required but no AccountID was provided or able to be loaded. [For AccountIdEndpointMode required and no AccountId set]");
    assert!(
        format!("{:?}", error).contains("AccountIdEndpointMode is required but no AccountID was provided or able to be loaded."),
        "expected error to contain `AccountIdEndpointMode is required but no AccountID was provided or able to be loaded.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_6() {
    /* documentation: For region us-east-1 with account ID available, FIPS enabled, and DualStack enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.us-east-1.api.aws"),
        "expected URI to start with `https://dynamodb-fips.us-east-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_7() {
    /* documentation: For region us-east-1 with account ID available, FIPS enabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_8() {
    /* documentation: For region us-east-1 with account ID available, AccountIdEndpointMode preferred, FIPS enabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::Auth::AccountIdEndpointMode": "preferred",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.account_id_endpoint_mode("preferred");
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_9() {
    /* documentation: For region us-east-1 with account ID available, AccountIdEndpointMode required, FIPS enabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::Auth::AccountIdEndpointMode": "required",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.account_id_endpoint_mode("required");
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_10() {
    /* documentation: For region us-east-1 with account ID available, FIPS disabled, and DualStack enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-east-1.api.aws"),
        "expected URI to start with `https://dynamodb.us-east-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_11() {
    /* documentation: For region us-east-1 with account ID available, FIPS disabled, and DualStack enabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-east-1.api.aws"),
        "expected URI to start with `https://dynamodb.us-east-1.api.aws` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_12() {
    /* documentation: For region us-east-1 with account ID available, AccountIdEndpointMode preferred, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::Auth::AccountIdEndpointMode": "preferred"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.account_id_endpoint_mode("preferred");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://012345678901.ddb.us-east-1.amazonaws.com"),
        "expected URI to start with `https://012345678901.ddb.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_13() {
    /* documentation: For region us-east-1 with account ID available, AccountIdEndpointMode required, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::Auth::AccountIdEndpointMode": "required"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.account_id_endpoint_mode("required");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://012345678901.ddb.us-east-1.amazonaws.com"),
        "expected URI to start with `https://012345678901.ddb.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_14() {
    /* documentation: For region us-east-1 with account ID available, AccountIdEndpointMode disabled, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::Auth::AccountIdEndpointMode": "disabled"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.account_id_endpoint_mode("disabled");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_15() {
    /* documentation: For region us-east-1 with empty account ID, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::Auth::AccountId": " "
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.account_id(" ");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Credentials-sourced account ID parameter is invalid [For region us-east-1 with empty account ID, FIPS disabled, and DualStack disabled]");
    assert!(
        format!("{:?}", error).contains("Credentials-sourced account ID parameter is invalid"),
        "expected error to contain `Credentials-sourced account ID parameter is invalid` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_16() {
    /* documentation: For region cn-north-1 with account ID available, FIPS enabled, and DualStack enabled */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.cn-north-1.api.amazonwebservices.com.cn"),
        "expected URI to start with `https://dynamodb-fips.cn-north-1.api.amazonwebservices.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_17() {
    /* documentation: For region cn-north-1 with account ID available, FIPS enabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://dynamodb-fips.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_18() {
    /* documentation: For region cn-north-1 with account ID available, FIPS disabled, and DualStack enabled */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.cn-north-1.api.amazonwebservices.com.cn"),
        "expected URI to start with `https://dynamodb.cn-north-1.api.amazonwebservices.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_19() {
    /* documentation: For region cn-north-1 with account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.account_id("012345678901");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://dynamodb.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_20() {
    /* documentation: For region cn-north-1 with empty account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::Auth::AccountId": ""
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.account_id("");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://dynamodb.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_21() {
    /* documentation: For region us-iso-east-1 with account ID available, FIPS enabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-iso-east-1",
        "AWS::Auth::AccountId": "012345678901",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-iso-east-1"));
        let builder = builder.account_id("012345678901");
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb-fips.us-iso-east-1.c2s.ic.gov"),
        "expected URI to start with `https://dynamodb-fips.us-iso-east-1.c2s.ic.gov` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_22() {
    /* documentation: For region us-iso-east-1 with account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-iso-east-1",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-iso-east-1"));
        let builder = builder.account_id("012345678901");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-iso-east-1.c2s.ic.gov"),
        "expected URI to start with `https://dynamodb.us-iso-east-1.c2s.ic.gov` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_23() {
    /* documentation: For region us-iso-east-1 with empty account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-iso-east-1",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-iso-east-1"));
        let builder = builder.account_id("012345678901");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-iso-east-1.c2s.ic.gov"),
        "expected URI to start with `https://dynamodb.us-iso-east-1.c2s.ic.gov` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_24() {
    /* documentation: For region us-gov-east-1 with account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-gov-east-1",
        "AWS::Auth::AccountId": "012345678901"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        let builder = builder.account_id("012345678901");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_tables_25() {
    /* documentation: For region us-gov-east-1 with empty account ID available, FIPS disabled, and DualStack disabled */
    /* builtIns: {
        "AWS::Region": "us-gov-east-1",
        "AWS::Auth::AccountId": ""
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_dynamodb::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        let builder = builder.account_id("");
        builder.build()
    };
    let client = aws_sdk_dynamodb::Client::from_conf(conf);
    let _result = dbg!(client.list_tables().send().await);
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://dynamodb.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://dynamodb.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}
