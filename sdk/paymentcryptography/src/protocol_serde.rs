// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_alias;

pub(crate) mod shape_create_key;

pub(crate) mod shape_delete_alias;

pub(crate) mod shape_delete_key;

pub(crate) mod shape_export_key;

pub(crate) mod shape_get_alias;

pub(crate) mod shape_get_key;

pub(crate) mod shape_get_parameters_for_export;

pub(crate) mod shape_get_parameters_for_import;

pub(crate) mod shape_get_public_key_certificate;

pub(crate) mod shape_import_key;

pub(crate) mod shape_list_aliases;

pub(crate) mod shape_list_keys;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_restore_key;

pub(crate) mod shape_start_key_usage;

pub(crate) mod shape_stop_key_usage;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_alias;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_alias_input;

pub(crate) mod shape_create_key_input;

pub(crate) mod shape_delete_alias_input;

pub(crate) mod shape_delete_key_input;

pub(crate) mod shape_export_key_input;

pub(crate) mod shape_get_alias_input;

pub(crate) mod shape_get_key_input;

pub(crate) mod shape_get_parameters_for_export_input;

pub(crate) mod shape_get_parameters_for_import_input;

pub(crate) mod shape_get_public_key_certificate_input;

pub(crate) mod shape_import_key_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_aliases_input;

pub(crate) mod shape_list_keys_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_restore_key_input;

pub(crate) mod shape_service_quota_exceeded_exception;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_start_key_usage_input;

pub(crate) mod shape_stop_key_usage_input;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_throttling_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_alias_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_alias;

pub(crate) mod shape_aliases;

pub(crate) mod shape_export_attributes;

pub(crate) mod shape_export_key_material;

pub(crate) mod shape_import_key_material;

pub(crate) mod shape_key;

pub(crate) mod shape_key_attributes;

pub(crate) mod shape_key_summary_list;

pub(crate) mod shape_tag;

pub(crate) mod shape_tags;

pub(crate) mod shape_wrapped_key;

pub(crate) mod shape_export_dukpt_initial_key;

pub(crate) mod shape_export_key_cryptogram;

pub(crate) mod shape_export_tr31_key_block;

pub(crate) mod shape_export_tr34_key_block;

pub(crate) mod shape_import_key_cryptogram;

pub(crate) mod shape_import_tr31_key_block;

pub(crate) mod shape_import_tr34_key_block;

pub(crate) mod shape_key_modes_of_use;

pub(crate) mod shape_key_summary;

pub(crate) mod shape_root_certificate_public_key;

pub(crate) mod shape_trusted_certificate_public_key;

pub(crate) mod shape_key_block_headers;
