// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameter information for trusted public key certificate import.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TrustedCertificatePublicKey {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.</p>
    pub key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    /// <p>Parameter information for trusted public key certificate import.</p>
    pub public_key_certificate: ::std::string::String,
    /// <p>The <code>KeyARN</code> of the root public key certificate or certificate chain that signs the trusted public key certificate import.</p>
    pub certificate_authority_public_key_identifier: ::std::string::String,
}
impl TrustedCertificatePublicKey {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.</p>
    pub fn key_attributes(&self) -> ::std::option::Option<&crate::types::KeyAttributes> {
        self.key_attributes.as_ref()
    }
    /// <p>Parameter information for trusted public key certificate import.</p>
    pub fn public_key_certificate(&self) -> &str {
        use std::ops::Deref;
        self.public_key_certificate.deref()
    }
    /// <p>The <code>KeyARN</code> of the root public key certificate or certificate chain that signs the trusted public key certificate import.</p>
    pub fn certificate_authority_public_key_identifier(&self) -> &str {
        use std::ops::Deref;
        self.certificate_authority_public_key_identifier.deref()
    }
}
impl ::std::fmt::Debug for TrustedCertificatePublicKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TrustedCertificatePublicKey");
        formatter.field("key_attributes", &self.key_attributes);
        formatter.field("public_key_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "certificate_authority_public_key_identifier",
            &self.certificate_authority_public_key_identifier,
        );
        formatter.finish()
    }
}
impl TrustedCertificatePublicKey {
    /// Creates a new builder-style object to manufacture [`TrustedCertificatePublicKey`](crate::types::TrustedCertificatePublicKey).
    pub fn builder() -> crate::types::builders::TrustedCertificatePublicKeyBuilder {
        crate::types::builders::TrustedCertificatePublicKeyBuilder::default()
    }
}

/// A builder for [`TrustedCertificatePublicKey`](crate::types::TrustedCertificatePublicKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TrustedCertificatePublicKeyBuilder {
    pub(crate) key_attributes: ::std::option::Option<crate::types::KeyAttributes>,
    pub(crate) public_key_certificate: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_authority_public_key_identifier: ::std::option::Option<::std::string::String>,
}
impl TrustedCertificatePublicKeyBuilder {
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.</p>
    /// This field is required.
    pub fn key_attributes(mut self, input: crate::types::KeyAttributes) -> Self {
        self.key_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.</p>
    pub fn set_key_attributes(mut self, input: ::std::option::Option<crate::types::KeyAttributes>) -> Self {
        self.key_attributes = input;
        self
    }
    /// <p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after a trusted public key is imported.</p>
    pub fn get_key_attributes(&self) -> &::std::option::Option<crate::types::KeyAttributes> {
        &self.key_attributes
    }
    /// <p>Parameter information for trusted public key certificate import.</p>
    /// This field is required.
    pub fn public_key_certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_key_certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Parameter information for trusted public key certificate import.</p>
    pub fn set_public_key_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_key_certificate = input;
        self
    }
    /// <p>Parameter information for trusted public key certificate import.</p>
    pub fn get_public_key_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_key_certificate
    }
    /// <p>The <code>KeyARN</code> of the root public key certificate or certificate chain that signs the trusted public key certificate import.</p>
    /// This field is required.
    pub fn certificate_authority_public_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_authority_public_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>KeyARN</code> of the root public key certificate or certificate chain that signs the trusted public key certificate import.</p>
    pub fn set_certificate_authority_public_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_authority_public_key_identifier = input;
        self
    }
    /// <p>The <code>KeyARN</code> of the root public key certificate or certificate chain that signs the trusted public key certificate import.</p>
    pub fn get_certificate_authority_public_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_authority_public_key_identifier
    }
    /// Consumes the builder and constructs a [`TrustedCertificatePublicKey`](crate::types::TrustedCertificatePublicKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`public_key_certificate`](crate::types::builders::TrustedCertificatePublicKeyBuilder::public_key_certificate)
    /// - [`certificate_authority_public_key_identifier`](crate::types::builders::TrustedCertificatePublicKeyBuilder::certificate_authority_public_key_identifier)
    pub fn build(self) -> ::std::result::Result<crate::types::TrustedCertificatePublicKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrustedCertificatePublicKey {
            key_attributes: self.key_attributes,
            public_key_certificate: self.public_key_certificate.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "public_key_certificate",
                    "public_key_certificate was not specified but it is required when building TrustedCertificatePublicKey",
                )
            })?,
            certificate_authority_public_key_identifier: self.certificate_authority_public_key_identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_authority_public_key_identifier",
                    "certificate_authority_public_key_identifier was not specified but it is required when building TrustedCertificatePublicKey",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for TrustedCertificatePublicKeyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TrustedCertificatePublicKeyBuilder");
        formatter.field("key_attributes", &self.key_attributes);
        formatter.field("public_key_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field(
            "certificate_authority_public_key_identifier",
            &self.certificate_authority_public_key_identifier,
        );
        formatter.finish()
    }
}
