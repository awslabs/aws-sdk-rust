// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DeriveKeyUsage`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let derivekeyusage = unimplemented!();
/// match derivekeyusage {
///     DeriveKeyUsage::Tr31B0BaseDerivationKey => { /* ... */ },
///     DeriveKeyUsage::Tr31C0CardVerificationKey => { /* ... */ },
///     DeriveKeyUsage::Tr31D0SymmetricDataEncryptionKey => { /* ... */ },
///     DeriveKeyUsage::Tr31E0EmvMkeyAppCryptograms => { /* ... */ },
///     DeriveKeyUsage::Tr31E1EmvMkeyConfidentiality => { /* ... */ },
///     DeriveKeyUsage::Tr31E2EmvMkeyIntegrity => { /* ... */ },
///     DeriveKeyUsage::Tr31E4EmvMkeyDynamicNumbers => { /* ... */ },
///     DeriveKeyUsage::Tr31E5EmvMkeyCardPersonalization => { /* ... */ },
///     DeriveKeyUsage::Tr31E6EmvMkeyOther => { /* ... */ },
///     DeriveKeyUsage::Tr31K0KeyEncryptionKey => { /* ... */ },
///     DeriveKeyUsage::Tr31K1KeyBlockProtectionKey => { /* ... */ },
///     DeriveKeyUsage::Tr31M1Iso97971MacKey => { /* ... */ },
///     DeriveKeyUsage::Tr31M3Iso97973MacKey => { /* ... */ },
///     DeriveKeyUsage::Tr31M6Iso97975CmacKey => { /* ... */ },
///     DeriveKeyUsage::Tr31M7HmacKey => { /* ... */ },
///     DeriveKeyUsage::Tr31P0PinEncryptionKey => { /* ... */ },
///     DeriveKeyUsage::Tr31P1PinGenerationKey => { /* ... */ },
///     DeriveKeyUsage::Tr31V1Ibm3624PinVerificationKey => { /* ... */ },
///     DeriveKeyUsage::Tr31V2VisaPinVerificationKey => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `derivekeyusage` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DeriveKeyUsage::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DeriveKeyUsage::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DeriveKeyUsage::NewFeature` is defined.
/// Specifically, when `derivekeyusage` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DeriveKeyUsage::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DeriveKeyUsage {
    #[allow(missing_docs)] // documentation missing in model
    Tr31B0BaseDerivationKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31C0CardVerificationKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31D0SymmetricDataEncryptionKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E0EmvMkeyAppCryptograms,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E1EmvMkeyConfidentiality,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E2EmvMkeyIntegrity,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E4EmvMkeyDynamicNumbers,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E5EmvMkeyCardPersonalization,
    #[allow(missing_docs)] // documentation missing in model
    Tr31E6EmvMkeyOther,
    #[allow(missing_docs)] // documentation missing in model
    Tr31K0KeyEncryptionKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31K1KeyBlockProtectionKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31M1Iso97971MacKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31M3Iso97973MacKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31M6Iso97975CmacKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31M7HmacKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31P0PinEncryptionKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31P1PinGenerationKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31V1Ibm3624PinVerificationKey,
    #[allow(missing_docs)] // documentation missing in model
    Tr31V2VisaPinVerificationKey,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DeriveKeyUsage {
    fn from(s: &str) -> Self {
        match s {
            "TR31_B0_BASE_DERIVATION_KEY" => DeriveKeyUsage::Tr31B0BaseDerivationKey,
            "TR31_C0_CARD_VERIFICATION_KEY" => DeriveKeyUsage::Tr31C0CardVerificationKey,
            "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY" => DeriveKeyUsage::Tr31D0SymmetricDataEncryptionKey,
            "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS" => DeriveKeyUsage::Tr31E0EmvMkeyAppCryptograms,
            "TR31_E1_EMV_MKEY_CONFIDENTIALITY" => DeriveKeyUsage::Tr31E1EmvMkeyConfidentiality,
            "TR31_E2_EMV_MKEY_INTEGRITY" => DeriveKeyUsage::Tr31E2EmvMkeyIntegrity,
            "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS" => DeriveKeyUsage::Tr31E4EmvMkeyDynamicNumbers,
            "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION" => DeriveKeyUsage::Tr31E5EmvMkeyCardPersonalization,
            "TR31_E6_EMV_MKEY_OTHER" => DeriveKeyUsage::Tr31E6EmvMkeyOther,
            "TR31_K0_KEY_ENCRYPTION_KEY" => DeriveKeyUsage::Tr31K0KeyEncryptionKey,
            "TR31_K1_KEY_BLOCK_PROTECTION_KEY" => DeriveKeyUsage::Tr31K1KeyBlockProtectionKey,
            "TR31_M1_ISO_9797_1_MAC_KEY" => DeriveKeyUsage::Tr31M1Iso97971MacKey,
            "TR31_M3_ISO_9797_3_MAC_KEY" => DeriveKeyUsage::Tr31M3Iso97973MacKey,
            "TR31_M6_ISO_9797_5_CMAC_KEY" => DeriveKeyUsage::Tr31M6Iso97975CmacKey,
            "TR31_M7_HMAC_KEY" => DeriveKeyUsage::Tr31M7HmacKey,
            "TR31_P0_PIN_ENCRYPTION_KEY" => DeriveKeyUsage::Tr31P0PinEncryptionKey,
            "TR31_P1_PIN_GENERATION_KEY" => DeriveKeyUsage::Tr31P1PinGenerationKey,
            "TR31_V1_IBM3624_PIN_VERIFICATION_KEY" => DeriveKeyUsage::Tr31V1Ibm3624PinVerificationKey,
            "TR31_V2_VISA_PIN_VERIFICATION_KEY" => DeriveKeyUsage::Tr31V2VisaPinVerificationKey,
            other => DeriveKeyUsage::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DeriveKeyUsage {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DeriveKeyUsage::from(s))
    }
}
impl DeriveKeyUsage {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DeriveKeyUsage::Tr31B0BaseDerivationKey => "TR31_B0_BASE_DERIVATION_KEY",
            DeriveKeyUsage::Tr31C0CardVerificationKey => "TR31_C0_CARD_VERIFICATION_KEY",
            DeriveKeyUsage::Tr31D0SymmetricDataEncryptionKey => "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY",
            DeriveKeyUsage::Tr31E0EmvMkeyAppCryptograms => "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS",
            DeriveKeyUsage::Tr31E1EmvMkeyConfidentiality => "TR31_E1_EMV_MKEY_CONFIDENTIALITY",
            DeriveKeyUsage::Tr31E2EmvMkeyIntegrity => "TR31_E2_EMV_MKEY_INTEGRITY",
            DeriveKeyUsage::Tr31E4EmvMkeyDynamicNumbers => "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS",
            DeriveKeyUsage::Tr31E5EmvMkeyCardPersonalization => "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION",
            DeriveKeyUsage::Tr31E6EmvMkeyOther => "TR31_E6_EMV_MKEY_OTHER",
            DeriveKeyUsage::Tr31K0KeyEncryptionKey => "TR31_K0_KEY_ENCRYPTION_KEY",
            DeriveKeyUsage::Tr31K1KeyBlockProtectionKey => "TR31_K1_KEY_BLOCK_PROTECTION_KEY",
            DeriveKeyUsage::Tr31M1Iso97971MacKey => "TR31_M1_ISO_9797_1_MAC_KEY",
            DeriveKeyUsage::Tr31M3Iso97973MacKey => "TR31_M3_ISO_9797_3_MAC_KEY",
            DeriveKeyUsage::Tr31M6Iso97975CmacKey => "TR31_M6_ISO_9797_5_CMAC_KEY",
            DeriveKeyUsage::Tr31M7HmacKey => "TR31_M7_HMAC_KEY",
            DeriveKeyUsage::Tr31P0PinEncryptionKey => "TR31_P0_PIN_ENCRYPTION_KEY",
            DeriveKeyUsage::Tr31P1PinGenerationKey => "TR31_P1_PIN_GENERATION_KEY",
            DeriveKeyUsage::Tr31V1Ibm3624PinVerificationKey => "TR31_V1_IBM3624_PIN_VERIFICATION_KEY",
            DeriveKeyUsage::Tr31V2VisaPinVerificationKey => "TR31_V2_VISA_PIN_VERIFICATION_KEY",
            DeriveKeyUsage::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "TR31_B0_BASE_DERIVATION_KEY",
            "TR31_C0_CARD_VERIFICATION_KEY",
            "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY",
            "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS",
            "TR31_E1_EMV_MKEY_CONFIDENTIALITY",
            "TR31_E2_EMV_MKEY_INTEGRITY",
            "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS",
            "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION",
            "TR31_E6_EMV_MKEY_OTHER",
            "TR31_K0_KEY_ENCRYPTION_KEY",
            "TR31_K1_KEY_BLOCK_PROTECTION_KEY",
            "TR31_M1_ISO_9797_1_MAC_KEY",
            "TR31_M3_ISO_9797_3_MAC_KEY",
            "TR31_M6_ISO_9797_5_CMAC_KEY",
            "TR31_M7_HMAC_KEY",
            "TR31_P0_PIN_ENCRYPTION_KEY",
            "TR31_P1_PIN_GENERATION_KEY",
            "TR31_V1_IBM3624_PIN_VERIFICATION_KEY",
            "TR31_V2_VISA_PIN_VERIFICATION_KEY",
        ]
    }
}
impl ::std::convert::AsRef<str> for DeriveKeyUsage {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DeriveKeyUsage {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DeriveKeyUsage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DeriveKeyUsage::Tr31B0BaseDerivationKey => write!(f, "TR31_B0_BASE_DERIVATION_KEY"),
            DeriveKeyUsage::Tr31C0CardVerificationKey => write!(f, "TR31_C0_CARD_VERIFICATION_KEY"),
            DeriveKeyUsage::Tr31D0SymmetricDataEncryptionKey => write!(f, "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY"),
            DeriveKeyUsage::Tr31E0EmvMkeyAppCryptograms => write!(f, "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS"),
            DeriveKeyUsage::Tr31E1EmvMkeyConfidentiality => write!(f, "TR31_E1_EMV_MKEY_CONFIDENTIALITY"),
            DeriveKeyUsage::Tr31E2EmvMkeyIntegrity => write!(f, "TR31_E2_EMV_MKEY_INTEGRITY"),
            DeriveKeyUsage::Tr31E4EmvMkeyDynamicNumbers => write!(f, "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS"),
            DeriveKeyUsage::Tr31E5EmvMkeyCardPersonalization => write!(f, "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION"),
            DeriveKeyUsage::Tr31E6EmvMkeyOther => write!(f, "TR31_E6_EMV_MKEY_OTHER"),
            DeriveKeyUsage::Tr31K0KeyEncryptionKey => write!(f, "TR31_K0_KEY_ENCRYPTION_KEY"),
            DeriveKeyUsage::Tr31K1KeyBlockProtectionKey => write!(f, "TR31_K1_KEY_BLOCK_PROTECTION_KEY"),
            DeriveKeyUsage::Tr31M1Iso97971MacKey => write!(f, "TR31_M1_ISO_9797_1_MAC_KEY"),
            DeriveKeyUsage::Tr31M3Iso97973MacKey => write!(f, "TR31_M3_ISO_9797_3_MAC_KEY"),
            DeriveKeyUsage::Tr31M6Iso97975CmacKey => write!(f, "TR31_M6_ISO_9797_5_CMAC_KEY"),
            DeriveKeyUsage::Tr31M7HmacKey => write!(f, "TR31_M7_HMAC_KEY"),
            DeriveKeyUsage::Tr31P0PinEncryptionKey => write!(f, "TR31_P0_PIN_ENCRYPTION_KEY"),
            DeriveKeyUsage::Tr31P1PinGenerationKey => write!(f, "TR31_P1_PIN_GENERATION_KEY"),
            DeriveKeyUsage::Tr31V1Ibm3624PinVerificationKey => write!(f, "TR31_V1_IBM3624_PIN_VERIFICATION_KEY"),
            DeriveKeyUsage::Tr31V2VisaPinVerificationKey => write!(f, "TR31_V2_VISA_PIN_VERIFICATION_KEY"),
            DeriveKeyUsage::Unknown(value) => write!(f, "{value}"),
        }
    }
}
