// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata used to create the certificate signing request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CertificateSubjectType {
    /// <p>The name you provide to create the certificate signing request.</p>
    pub common_name: ::std::string::String,
    /// <p>The organization unit you provide to create the certificate signing request.</p>
    pub organization_unit: ::std::option::Option<::std::string::String>,
    /// <p>The organization you provide to create the certificate signing request.</p>
    pub organization: ::std::option::Option<::std::string::String>,
    /// <p>The city you provide to create the certificate signing request.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>The city you provide to create the certificate signing request.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>The state or province you provide to create the certificate signing request.</p>
    pub state_or_province: ::std::option::Option<::std::string::String>,
    /// <p>The email address you provide to create the certificate signing request.</p>
    pub email_address: ::std::option::Option<::std::string::String>,
}
impl CertificateSubjectType {
    /// <p>The name you provide to create the certificate signing request.</p>
    pub fn common_name(&self) -> &str {
        use std::ops::Deref;
        self.common_name.deref()
    }
    /// <p>The organization unit you provide to create the certificate signing request.</p>
    pub fn organization_unit(&self) -> ::std::option::Option<&str> {
        self.organization_unit.as_deref()
    }
    /// <p>The organization you provide to create the certificate signing request.</p>
    pub fn organization(&self) -> ::std::option::Option<&str> {
        self.organization.as_deref()
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>The state or province you provide to create the certificate signing request.</p>
    pub fn state_or_province(&self) -> ::std::option::Option<&str> {
        self.state_or_province.as_deref()
    }
    /// <p>The email address you provide to create the certificate signing request.</p>
    pub fn email_address(&self) -> ::std::option::Option<&str> {
        self.email_address.as_deref()
    }
}
impl CertificateSubjectType {
    /// Creates a new builder-style object to manufacture [`CertificateSubjectType`](crate::types::CertificateSubjectType).
    pub fn builder() -> crate::types::builders::CertificateSubjectTypeBuilder {
        crate::types::builders::CertificateSubjectTypeBuilder::default()
    }
}

/// A builder for [`CertificateSubjectType`](crate::types::CertificateSubjectType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CertificateSubjectTypeBuilder {
    pub(crate) common_name: ::std::option::Option<::std::string::String>,
    pub(crate) organization_unit: ::std::option::Option<::std::string::String>,
    pub(crate) organization: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) state_or_province: ::std::option::Option<::std::string::String>,
    pub(crate) email_address: ::std::option::Option<::std::string::String>,
}
impl CertificateSubjectTypeBuilder {
    /// <p>The name you provide to create the certificate signing request.</p>
    /// This field is required.
    pub fn common_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.common_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name you provide to create the certificate signing request.</p>
    pub fn set_common_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.common_name = input;
        self
    }
    /// <p>The name you provide to create the certificate signing request.</p>
    pub fn get_common_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.common_name
    }
    /// <p>The organization unit you provide to create the certificate signing request.</p>
    pub fn organization_unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization unit you provide to create the certificate signing request.</p>
    pub fn set_organization_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_unit = input;
        self
    }
    /// <p>The organization unit you provide to create the certificate signing request.</p>
    pub fn get_organization_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_unit
    }
    /// <p>The organization you provide to create the certificate signing request.</p>
    pub fn organization(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization you provide to create the certificate signing request.</p>
    pub fn set_organization(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization = input;
        self
    }
    /// <p>The organization you provide to create the certificate signing request.</p>
    pub fn get_organization(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>The city you provide to create the certificate signing request.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>The state or province you provide to create the certificate signing request.</p>
    pub fn state_or_province(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_or_province = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state or province you provide to create the certificate signing request.</p>
    pub fn set_state_or_province(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_or_province = input;
        self
    }
    /// <p>The state or province you provide to create the certificate signing request.</p>
    pub fn get_state_or_province(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_or_province
    }
    /// <p>The email address you provide to create the certificate signing request.</p>
    pub fn email_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.email_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address you provide to create the certificate signing request.</p>
    pub fn set_email_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The email address you provide to create the certificate signing request.</p>
    pub fn get_email_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.email_address
    }
    /// Consumes the builder and constructs a [`CertificateSubjectType`](crate::types::CertificateSubjectType).
    /// This method will fail if any of the following fields are not set:
    /// - [`common_name`](crate::types::builders::CertificateSubjectTypeBuilder::common_name)
    pub fn build(self) -> ::std::result::Result<crate::types::CertificateSubjectType, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CertificateSubjectType {
            common_name: self.common_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "common_name",
                    "common_name was not specified but it is required when building CertificateSubjectType",
                )
            })?,
            organization_unit: self.organization_unit,
            organization: self.organization,
            city: self.city,
            country: self.country,
            state_or_province: self.state_or_province,
            email_address: self.email_address,
        })
    }
}
