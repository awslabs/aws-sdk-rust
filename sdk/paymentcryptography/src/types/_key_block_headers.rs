// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Optional metadata for export associated with the key material. This data is signed but transmitted in clear text.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeyBlockHeaders {
    /// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
    pub key_modes_of_use: ::std::option::Option<crate::types::KeyModesOfUse>,
    /// <p>Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography.</p>
    /// <p>When set to <code>EXPORTABLE</code>, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to <code>NON_EXPORTABLE</code>, the key cannot be subsequently exported by the receiver. When set to <code>SENSITIVE</code>, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a>.</p>
    pub key_exportability: ::std::option::Option<crate::types::KeyExportability>,
    /// <p>Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.</p>
    pub key_version: ::std::option::Option<::std::string::String>,
    /// <p>Parameter used to indicate the type of optional data in key block headers. Refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a> for information on allowed data type for optional blocks.</p>
    /// <p>Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.</p>
    pub optional_blocks: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl KeyBlockHeaders {
    /// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
    pub fn key_modes_of_use(&self) -> ::std::option::Option<&crate::types::KeyModesOfUse> {
        self.key_modes_of_use.as_ref()
    }
    /// <p>Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography.</p>
    /// <p>When set to <code>EXPORTABLE</code>, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to <code>NON_EXPORTABLE</code>, the key cannot be subsequently exported by the receiver. When set to <code>SENSITIVE</code>, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a>.</p>
    pub fn key_exportability(&self) -> ::std::option::Option<&crate::types::KeyExportability> {
        self.key_exportability.as_ref()
    }
    /// <p>Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.</p>
    pub fn key_version(&self) -> ::std::option::Option<&str> {
        self.key_version.as_deref()
    }
    /// <p>Parameter used to indicate the type of optional data in key block headers. Refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a> for information on allowed data type for optional blocks.</p>
    /// <p>Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.</p>
    pub fn optional_blocks(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.optional_blocks.as_ref()
    }
}
impl KeyBlockHeaders {
    /// Creates a new builder-style object to manufacture [`KeyBlockHeaders`](crate::types::KeyBlockHeaders).
    pub fn builder() -> crate::types::builders::KeyBlockHeadersBuilder {
        crate::types::builders::KeyBlockHeadersBuilder::default()
    }
}

/// A builder for [`KeyBlockHeaders`](crate::types::KeyBlockHeaders).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeyBlockHeadersBuilder {
    pub(crate) key_modes_of_use: ::std::option::Option<crate::types::KeyModesOfUse>,
    pub(crate) key_exportability: ::std::option::Option<crate::types::KeyExportability>,
    pub(crate) key_version: ::std::option::Option<::std::string::String>,
    pub(crate) optional_blocks: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl KeyBlockHeadersBuilder {
    /// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
    pub fn key_modes_of_use(mut self, input: crate::types::KeyModesOfUse) -> Self {
        self.key_modes_of_use = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
    pub fn set_key_modes_of_use(mut self, input: ::std::option::Option<crate::types::KeyModesOfUse>) -> Self {
        self.key_modes_of_use = input;
        self
    }
    /// <p>The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec.</p>
    pub fn get_key_modes_of_use(&self) -> &::std::option::Option<crate::types::KeyModesOfUse> {
        &self.key_modes_of_use
    }
    /// <p>Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography.</p>
    /// <p>When set to <code>EXPORTABLE</code>, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to <code>NON_EXPORTABLE</code>, the key cannot be subsequently exported by the receiver. When set to <code>SENSITIVE</code>, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a>.</p>
    pub fn key_exportability(mut self, input: crate::types::KeyExportability) -> Self {
        self.key_exportability = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography.</p>
    /// <p>When set to <code>EXPORTABLE</code>, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to <code>NON_EXPORTABLE</code>, the key cannot be subsequently exported by the receiver. When set to <code>SENSITIVE</code>, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a>.</p>
    pub fn set_key_exportability(mut self, input: ::std::option::Option<crate::types::KeyExportability>) -> Self {
        self.key_exportability = input;
        self
    }
    /// <p>Specifies subsequent exportability of the key within the key block after it is received by the receiving party. It can be used to further restrict exportability of the key after export from Amazon Web Services Payment Cryptography.</p>
    /// <p>When set to <code>EXPORTABLE</code>, the key can be subsequently exported by the receiver under a KEK using TR-31 or TR-34 key block export only. When set to <code>NON_EXPORTABLE</code>, the key cannot be subsequently exported by the receiver. When set to <code>SENSITIVE</code>, the key can be exported by the receiver under a KEK using TR-31, TR-34, RSA wrap and unwrap cryptogram or using a symmetric cryptogram key export method. For further information refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a>.</p>
    pub fn get_key_exportability(&self) -> &::std::option::Option<crate::types::KeyExportability> {
        &self.key_exportability
    }
    /// <p>Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.</p>
    pub fn key_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.</p>
    pub fn set_key_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_version = input;
        self
    }
    /// <p>Parameter used to indicate the version of the key carried in the key block or indicate the value carried in the key block is a component of a key.</p>
    pub fn get_key_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_version
    }
    /// Adds a key-value pair to `optional_blocks`.
    ///
    /// To override the contents of this collection use [`set_optional_blocks`](Self::set_optional_blocks).
    ///
    /// <p>Parameter used to indicate the type of optional data in key block headers. Refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a> for information on allowed data type for optional blocks.</p>
    /// <p>Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.</p>
    pub fn optional_blocks(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.optional_blocks.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.optional_blocks = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Parameter used to indicate the type of optional data in key block headers. Refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a> for information on allowed data type for optional blocks.</p>
    /// <p>Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.</p>
    pub fn set_optional_blocks(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.optional_blocks = input;
        self
    }
    /// <p>Parameter used to indicate the type of optional data in key block headers. Refer to <a href="https://webstore.ansi.org/standards/ascx9/ansix91432022">ANSI X9.143-2022</a> for information on allowed data type for optional blocks.</p>
    /// <p>Optional block character limit is 112 characters. For each optional block, 2 characters are reserved for optional block ID and 2 characters reserved for optional block length. More than one optional blocks can be included as long as the combined length does not increase 112 characters.</p>
    pub fn get_optional_blocks(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.optional_blocks
    }
    /// Consumes the builder and constructs a [`KeyBlockHeaders`](crate::types::KeyBlockHeaders).
    pub fn build(self) -> crate::types::KeyBlockHeaders {
        crate::types::KeyBlockHeaders {
            key_modes_of_use: self.key_modes_of_use,
            key_exportability: self.key_exportability,
            key_version: self.key_version,
            optional_blocks: self.optional_blocks,
        }
    }
}
