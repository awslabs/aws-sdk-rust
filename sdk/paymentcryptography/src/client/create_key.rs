// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateKey`](crate::operation::create_key::builders::CreateKeyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_attributes(KeyAttributes)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::key_attributes) / [`set_key_attributes(Option<KeyAttributes>)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::set_key_attributes):<br>required: **true**<br><p>The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created.</p><br>
    ///   - [`key_check_value_algorithm(KeyCheckValueAlgorithm)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::key_check_value_algorithm) / [`set_key_check_value_algorithm(Option<KeyCheckValueAlgorithm>)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::set_key_check_value_algorithm):<br>required: **false**<br><p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV) for DES and AES keys.</p>  <p>For DES key, the KCV is computed by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is computed by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p><br>
    ///   - [`exportable(bool)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::exportable) / [`set_exportable(Option<bool>)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::set_exportable):<br>required: **true**<br><p>Specifies whether the key is exportable from the service.</p><br>
    ///   - [`enabled(bool)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::enabled) / [`set_enabled(Option<bool>)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::set_enabled):<br>required: **false**<br><p>Specifies whether to enable the key. If the key is enabled, it is activated for use within the service. If the key not enabled, then it is created but not activated. The default value is enabled.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_key::builders::CreateKeyFluentBuilder::set_tags):<br>required: **false**<br><p>The tags to attach to the key. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. </p>  <p>To use this parameter, you must have <code>TagResource</code> permission.</p> <important>   <p>Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.</p>  </important> <note>   <p>Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.</p>  </note><br>
    /// - On success, responds with [`CreateKeyOutput`](crate::operation::create_key::CreateKeyOutput) with field(s):
    ///   - [`key(Option<Key>)`](crate::operation::create_key::CreateKeyOutput::key): <p>The key material that contains all the key attributes.</p>
    /// - On failure, responds with [`SdkError<CreateKeyError>`](crate::operation::create_key::CreateKeyError)
    pub fn create_key(&self) -> crate::operation::create_key::builders::CreateKeyFluentBuilder {
        crate::operation::create_key::builders::CreateKeyFluentBuilder::new(self.handle.clone())
    }
}
