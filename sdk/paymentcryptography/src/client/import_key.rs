// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportKey`](crate::operation::import_key::builders::ImportKeyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`key_material(ImportKeyMaterial)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::key_material) / [`set_key_material(Option<ImportKeyMaterial>)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::set_key_material):<br>required: **true**<br><p>The key or public key certificate type to use during key material import, for example TR-34 or RootCertificatePublicKey.</p><br>
    ///   - [`key_check_value_algorithm(KeyCheckValueAlgorithm)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::key_check_value_algorithm) / [`set_key_check_value_algorithm(Option<KeyCheckValueAlgorithm>)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::set_key_check_value_algorithm):<br>required: **false**<br><p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV). It is used to validate the key integrity.</p> <p>For TDES keys, the KCV is computed by encrypting 8 bytes, each with value of zero, with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES keys, the KCV is computed using a CMAC algorithm where the input data is 16 bytes of zero and retaining the 3 highest order bytes of the encrypted result.</p><br>
    ///   - [`enabled(bool)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::enabled) / [`set_enabled(Option<bool>)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::set_enabled):<br>required: **false**<br><p>Specifies whether import key is enabled.</p><br>
    ///   - [`tags(Tag)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::import_key::builders::ImportKeyFluentBuilder::set_tags):<br>required: **false**<br><p>Assigns one or more tags to the Amazon Web Services Payment Cryptography key. Use this parameter to tag a key when it is imported. To tag an existing Amazon Web Services Payment Cryptography key, use the <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_TagResource.html">TagResource</a> operation.</p> <p>Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. If you specify an existing tag key with a different tag value, Amazon Web Services Payment Cryptography replaces the current tag value with the specified one.</p><important>  <p>Don't include personal, confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.</p> </important> <note>  <p>Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.</p> </note><br>
    /// - On success, responds with [`ImportKeyOutput`](crate::operation::import_key::ImportKeyOutput) with field(s):
    ///   - [`key(Option<Key>)`](crate::operation::import_key::ImportKeyOutput::key): <p>The <code>KeyARN</code> of the key material imported within Amazon Web Services Payment Cryptography.</p>
    /// - On failure, responds with [`SdkError<ImportKeyError>`](crate::operation::import_key::ImportKeyError)
    pub fn import_key(&self) -> crate::operation::import_key::builders::ImportKeyFluentBuilder {
        crate::operation::import_key::builders::ImportKeyFluentBuilder::new(self.handle.clone())
    }
}
