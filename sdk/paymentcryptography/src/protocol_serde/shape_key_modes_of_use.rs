// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_key_modes_of_use(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::KeyModesOfUse,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if input.encrypt {
        object.key("Encrypt").boolean(input.encrypt);
    }
    if input.decrypt {
        object.key("Decrypt").boolean(input.decrypt);
    }
    if input.wrap {
        object.key("Wrap").boolean(input.wrap);
    }
    if input.unwrap {
        object.key("Unwrap").boolean(input.unwrap);
    }
    if input.generate {
        object.key("Generate").boolean(input.generate);
    }
    if input.sign {
        object.key("Sign").boolean(input.sign);
    }
    if input.verify {
        object.key("Verify").boolean(input.verify);
    }
    if input.derive_key {
        object.key("DeriveKey").boolean(input.derive_key);
    }
    if input.no_restrictions {
        object.key("NoRestrictions").boolean(input.no_restrictions);
    }
    Ok(())
}

pub(crate) fn de_key_modes_of_use<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::KeyModesOfUse>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::KeyModesOfUseBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Encrypt" => {
                            builder = builder.set_encrypt(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Decrypt" => {
                            builder = builder.set_decrypt(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Wrap" => {
                            builder = builder.set_wrap(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Unwrap" => {
                            builder = builder.set_unwrap(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Generate" => {
                            builder = builder.set_generate(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Sign" => {
                            builder = builder.set_sign(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Verify" => {
                            builder = builder.set_verify(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DeriveKey" => {
                            builder = builder.set_derive_key(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "NoRestrictions" => {
                            builder = builder.set_no_restrictions(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
