// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPublicKeyCertificateOutput {
    /// <p>The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.</p>
    pub key_certificate: ::std::string::String,
    /// <p>The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.</p>
    pub key_certificate_chain: ::std::string::String,
    _request_id: Option<String>,
}
impl GetPublicKeyCertificateOutput {
    /// <p>The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.</p>
    pub fn key_certificate(&self) -> &str {
        use std::ops::Deref;
        self.key_certificate.deref()
    }
    /// <p>The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.</p>
    pub fn key_certificate_chain(&self) -> &str {
        use std::ops::Deref;
        self.key_certificate_chain.deref()
    }
}
impl ::std::fmt::Debug for GetPublicKeyCertificateOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPublicKeyCertificateOutput");
        formatter.field("key_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("key_certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetPublicKeyCertificateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPublicKeyCertificateOutput {
    /// Creates a new builder-style object to manufacture [`GetPublicKeyCertificateOutput`](crate::operation::get_public_key_certificate::GetPublicKeyCertificateOutput).
    pub fn builder() -> crate::operation::get_public_key_certificate::builders::GetPublicKeyCertificateOutputBuilder {
        crate::operation::get_public_key_certificate::builders::GetPublicKeyCertificateOutputBuilder::default()
    }
}

/// A builder for [`GetPublicKeyCertificateOutput`](crate::operation::get_public_key_certificate::GetPublicKeyCertificateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetPublicKeyCertificateOutputBuilder {
    pub(crate) key_certificate: ::std::option::Option<::std::string::String>,
    pub(crate) key_certificate_chain: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetPublicKeyCertificateOutputBuilder {
    /// <p>The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.</p>
    /// This field is required.
    pub fn key_certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.</p>
    pub fn set_key_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_certificate = input;
        self
    }
    /// <p>The public key component of the asymmetric key pair in a certificate (PEM) format. It is signed by the root certificate authority (CA) within your service account. The certificate expires in 90 days.</p>
    pub fn get_key_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_certificate
    }
    /// <p>The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.</p>
    /// This field is required.
    pub fn key_certificate_chain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_certificate_chain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.</p>
    pub fn set_key_certificate_chain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_certificate_chain = input;
        self
    }
    /// <p>The certificate chain that signed the public key certificate of the asymmetric key pair. This is the root certificate authority (CA) within your service account.</p>
    pub fn get_key_certificate_chain(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_certificate_chain
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPublicKeyCertificateOutput`](crate::operation::get_public_key_certificate::GetPublicKeyCertificateOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_certificate`](crate::operation::get_public_key_certificate::builders::GetPublicKeyCertificateOutputBuilder::key_certificate)
    /// - [`key_certificate_chain`](crate::operation::get_public_key_certificate::builders::GetPublicKeyCertificateOutputBuilder::key_certificate_chain)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_public_key_certificate::GetPublicKeyCertificateOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_public_key_certificate::GetPublicKeyCertificateOutput {
            key_certificate: self.key_certificate.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_certificate",
                    "key_certificate was not specified but it is required when building GetPublicKeyCertificateOutput",
                )
            })?,
            key_certificate_chain: self.key_certificate_chain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_certificate_chain",
                    "key_certificate_chain was not specified but it is required when building GetPublicKeyCertificateOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetPublicKeyCertificateOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPublicKeyCertificateOutputBuilder");
        formatter.field("key_certificate", &"*** Sensitive Data Redacted ***");
        formatter.field("key_certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
