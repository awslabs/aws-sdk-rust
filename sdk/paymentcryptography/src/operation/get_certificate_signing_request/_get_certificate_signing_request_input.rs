// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCertificateSigningRequestInput {
    /// <p>Asymmetric key used for generating the certificate signing request</p>
    pub key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The cryptographic algorithm used to sign your CSR.</p>
    pub signing_algorithm: ::std::option::Option<crate::types::SigningAlgorithmType>,
    /// <p>The metadata used to create the CSR.</p>
    pub certificate_subject: ::std::option::Option<crate::types::CertificateSubjectType>,
}
impl GetCertificateSigningRequestInput {
    /// <p>Asymmetric key used for generating the certificate signing request</p>
    pub fn key_identifier(&self) -> ::std::option::Option<&str> {
        self.key_identifier.as_deref()
    }
    /// <p>The cryptographic algorithm used to sign your CSR.</p>
    pub fn signing_algorithm(&self) -> ::std::option::Option<&crate::types::SigningAlgorithmType> {
        self.signing_algorithm.as_ref()
    }
    /// <p>The metadata used to create the CSR.</p>
    pub fn certificate_subject(&self) -> ::std::option::Option<&crate::types::CertificateSubjectType> {
        self.certificate_subject.as_ref()
    }
}
impl GetCertificateSigningRequestInput {
    /// Creates a new builder-style object to manufacture [`GetCertificateSigningRequestInput`](crate::operation::get_certificate_signing_request::GetCertificateSigningRequestInput).
    pub fn builder() -> crate::operation::get_certificate_signing_request::builders::GetCertificateSigningRequestInputBuilder {
        crate::operation::get_certificate_signing_request::builders::GetCertificateSigningRequestInputBuilder::default()
    }
}

/// A builder for [`GetCertificateSigningRequestInput`](crate::operation::get_certificate_signing_request::GetCertificateSigningRequestInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetCertificateSigningRequestInputBuilder {
    pub(crate) key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) signing_algorithm: ::std::option::Option<crate::types::SigningAlgorithmType>,
    pub(crate) certificate_subject: ::std::option::Option<crate::types::CertificateSubjectType>,
}
impl GetCertificateSigningRequestInputBuilder {
    /// <p>Asymmetric key used for generating the certificate signing request</p>
    /// This field is required.
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Asymmetric key used for generating the certificate signing request</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_identifier = input;
        self
    }
    /// <p>Asymmetric key used for generating the certificate signing request</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_identifier
    }
    /// <p>The cryptographic algorithm used to sign your CSR.</p>
    /// This field is required.
    pub fn signing_algorithm(mut self, input: crate::types::SigningAlgorithmType) -> Self {
        self.signing_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>The cryptographic algorithm used to sign your CSR.</p>
    pub fn set_signing_algorithm(mut self, input: ::std::option::Option<crate::types::SigningAlgorithmType>) -> Self {
        self.signing_algorithm = input;
        self
    }
    /// <p>The cryptographic algorithm used to sign your CSR.</p>
    pub fn get_signing_algorithm(&self) -> &::std::option::Option<crate::types::SigningAlgorithmType> {
        &self.signing_algorithm
    }
    /// <p>The metadata used to create the CSR.</p>
    /// This field is required.
    pub fn certificate_subject(mut self, input: crate::types::CertificateSubjectType) -> Self {
        self.certificate_subject = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metadata used to create the CSR.</p>
    pub fn set_certificate_subject(mut self, input: ::std::option::Option<crate::types::CertificateSubjectType>) -> Self {
        self.certificate_subject = input;
        self
    }
    /// <p>The metadata used to create the CSR.</p>
    pub fn get_certificate_subject(&self) -> &::std::option::Option<crate::types::CertificateSubjectType> {
        &self.certificate_subject
    }
    /// Consumes the builder and constructs a [`GetCertificateSigningRequestInput`](crate::operation::get_certificate_signing_request::GetCertificateSigningRequestInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_certificate_signing_request::GetCertificateSigningRequestInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_certificate_signing_request::GetCertificateSigningRequestInput {
            key_identifier: self.key_identifier,
            signing_algorithm: self.signing_algorithm,
            certificate_subject: self.certificate_subject,
        })
    }
}
