// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_broker::_update_broker_output::UpdateBrokerOutputBuilder;

pub use crate::operation::update_broker::_update_broker_input::UpdateBrokerInputBuilder;

/// Fluent builder constructing a request to `UpdateBroker`.
///
/// <p>Adds a pending configuration change to a broker.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBrokerFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_broker::builders::UpdateBrokerInputBuilder,
}
impl UpdateBrokerFluentBuilder {
    /// Creates a new `UpdateBroker`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_broker::UpdateBroker,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_broker::UpdateBrokerError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_broker::UpdateBrokerOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_broker::UpdateBrokerError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p>
    pub fn authentication_strategy(mut self, input: crate::types::AuthenticationStrategy) -> Self {
        self.inner = self.inner.authentication_strategy(input);
        self
    }
    /// <p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p>
    pub fn set_authentication_strategy(
        mut self,
        input: std::option::Option<crate::types::AuthenticationStrategy>,
    ) -> Self {
        self.inner = self.inner.set_authentication_strategy(input);
        self
    }
    /// <p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_minor_version_upgrade(input);
        self
    }
    /// <p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_minor_version_upgrade(input);
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn broker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.broker_id(input.into());
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn set_broker_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_broker_id(input);
        self
    }
    /// <p>A list of information about the configuration.</p>
    pub fn configuration(mut self, input: crate::types::ConfigurationId) -> Self {
        self.inner = self.inner.configuration(input);
        self
    }
    /// <p>A list of information about the configuration.</p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ConfigurationId>,
    ) -> Self {
        self.inner = self.inner.set_configuration(input);
        self
    }
    /// <p>The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine_version(input.into());
        self
    }
    /// <p>The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine_version(input);
        self
    }
    /// <p>The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.</p>
    pub fn host_instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.host_instance_type(input.into());
        self
    }
    /// <p>The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.</p>
    pub fn set_host_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_host_instance_type(input);
        self
    }
    /// <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p>
    pub fn ldap_server_metadata(mut self, input: crate::types::LdapServerMetadataInput) -> Self {
        self.inner = self.inner.ldap_server_metadata(input);
        self
    }
    /// <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p>
    pub fn set_ldap_server_metadata(
        mut self,
        input: std::option::Option<crate::types::LdapServerMetadataInput>,
    ) -> Self {
        self.inner = self.inner.set_ldap_server_metadata(input);
        self
    }
    /// <p>Enables Amazon CloudWatch logging for brokers.</p>
    pub fn logs(mut self, input: crate::types::Logs) -> Self {
        self.inner = self.inner.logs(input);
        self
    }
    /// <p>Enables Amazon CloudWatch logging for brokers.</p>
    pub fn set_logs(mut self, input: std::option::Option<crate::types::Logs>) -> Self {
        self.inner = self.inner.set_logs(input);
        self
    }
    /// <p>The parameters that determine the WeeklyStartTime.</p>
    pub fn maintenance_window_start_time(mut self, input: crate::types::WeeklyStartTime) -> Self {
        self.inner = self.inner.maintenance_window_start_time(input);
        self
    }
    /// <p>The parameters that determine the WeeklyStartTime.</p>
    pub fn set_maintenance_window_start_time(
        mut self,
        input: std::option::Option<crate::types::WeeklyStartTime>,
    ) -> Self {
        self.inner = self.inner.set_maintenance_window_start_time(input);
        self
    }
    /// Appends an item to `SecurityGroups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.</p>
    pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_groups(input.into());
        self
    }
    /// <p>The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_security_groups(input);
        self
    }
}
