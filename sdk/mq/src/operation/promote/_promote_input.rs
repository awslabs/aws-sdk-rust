// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Promotes a data replication replica broker to the primary broker role.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PromoteInput {
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub broker_id: ::std::option::Option<::std::string::String>,
    /// <p>The Promote mode requested. Note: Valid values for the parameter are SWITCHOVER, FAILOVER.</p>
    pub mode: ::std::option::Option<crate::types::PromoteMode>,
}
impl PromoteInput {
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn broker_id(&self) -> ::std::option::Option<&str> {
        self.broker_id.as_deref()
    }
    /// <p>The Promote mode requested. Note: Valid values for the parameter are SWITCHOVER, FAILOVER.</p>
    pub fn mode(&self) -> ::std::option::Option<&crate::types::PromoteMode> {
        self.mode.as_ref()
    }
}
impl PromoteInput {
    /// Creates a new builder-style object to manufacture [`PromoteInput`](crate::operation::promote::PromoteInput).
    pub fn builder() -> crate::operation::promote::builders::PromoteInputBuilder {
        crate::operation::promote::builders::PromoteInputBuilder::default()
    }
}

/// A builder for [`PromoteInput`](crate::operation::promote::PromoteInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PromoteInputBuilder {
    pub(crate) broker_id: ::std::option::Option<::std::string::String>,
    pub(crate) mode: ::std::option::Option<crate::types::PromoteMode>,
}
impl PromoteInputBuilder {
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    /// This field is required.
    pub fn broker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.broker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn set_broker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.broker_id = input;
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn get_broker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.broker_id
    }
    /// <p>The Promote mode requested. Note: Valid values for the parameter are SWITCHOVER, FAILOVER.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::PromoteMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Promote mode requested. Note: Valid values for the parameter are SWITCHOVER, FAILOVER.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::PromoteMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The Promote mode requested. Note: Valid values for the parameter are SWITCHOVER, FAILOVER.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::PromoteMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`PromoteInput`](crate::operation::promote::PromoteInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::promote::PromoteInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::promote::PromoteInput {
            broker_id: self.broker_id,
            mode: self.mode,
        })
    }
}
