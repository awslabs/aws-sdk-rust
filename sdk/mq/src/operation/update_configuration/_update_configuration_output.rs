// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfigurationOutput {
    /// <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Required. The date and time of the configuration.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The latest revision of the configuration.</p>
    #[doc(hidden)]
    pub latest_revision: std::option::Option<crate::types::ConfigurationRevision>,
    /// <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::vec::Vec<crate::types::SanitizationWarning>>,
    _request_id: Option<String>,
}
impl UpdateConfigurationOutput {
    /// <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The latest revision of the configuration.</p>
    pub fn latest_revision(&self) -> std::option::Option<&crate::types::ConfigurationRevision> {
        self.latest_revision.as_ref()
    }
    /// <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.</p>
    pub fn warnings(&self) -> std::option::Option<&[crate::types::SanitizationWarning]> {
        self.warnings.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationOutput`](crate::operation::update_configuration::UpdateConfigurationOutput).
    pub fn builder(
    ) -> crate::operation::update_configuration::builders::UpdateConfigurationOutputBuilder {
        crate::operation::update_configuration::builders::UpdateConfigurationOutputBuilder::default(
        )
    }
}

/// A builder for [`UpdateConfigurationOutput`](crate::operation::update_configuration::UpdateConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateConfigurationOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) latest_revision: std::option::Option<crate::types::ConfigurationRevision>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) warnings: std::option::Option<std::vec::Vec<crate::types::SanitizationWarning>>,
    _request_id: Option<String>,
}
impl UpdateConfigurationOutputBuilder {
    /// <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The latest revision of the configuration.</p>
    pub fn latest_revision(mut self, input: crate::types::ConfigurationRevision) -> Self {
        self.latest_revision = Some(input);
        self
    }
    /// <p>The latest revision of the configuration.</p>
    pub fn set_latest_revision(
        mut self,
        input: std::option::Option<crate::types::ConfigurationRevision>,
    ) -> Self {
        self.latest_revision = input;
        self
    }
    /// <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.</p>
    pub fn warnings(mut self, input: crate::types::SanitizationWarning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = Some(v);
        self
    }
    /// <p>The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.</p>
    pub fn set_warnings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SanitizationWarning>>,
    ) -> Self {
        self.warnings = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateConfigurationOutput`](crate::operation::update_configuration::UpdateConfigurationOutput).
    pub fn build(self) -> crate::operation::update_configuration::UpdateConfigurationOutput {
        crate::operation::update_configuration::UpdateConfigurationOutput {
            arn: self.arn,
            created: self.created,
            id: self.id,
            latest_revision: self.latest_revision,
            name: self.name,
            warnings: self.warnings,
            _request_id: self._request_id,
        }
    }
}
