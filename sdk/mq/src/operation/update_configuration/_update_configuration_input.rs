// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates the specified configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateConfigurationInput {
    /// <p>The unique ID that Amazon MQ generates for the configuration.</p>
    pub configuration_id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.</p>
    pub data: ::std::option::Option<::std::string::String>,
    /// <p>The description of the configuration.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateConfigurationInput {
    /// <p>The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn configuration_id(&self) -> ::std::option::Option<&str> {
        self.configuration_id.as_deref()
    }
    /// <p>Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.</p>
    pub fn data(&self) -> ::std::option::Option<&str> {
        self.data.as_deref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationInput`](crate::operation::update_configuration::UpdateConfigurationInput).
    pub fn builder() -> crate::operation::update_configuration::builders::UpdateConfigurationInputBuilder {
        crate::operation::update_configuration::builders::UpdateConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateConfigurationInput`](crate::operation::update_configuration::UpdateConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateConfigurationInputBuilder {
    pub(crate) configuration_id: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateConfigurationInputBuilder {
    /// <p>The unique ID that Amazon MQ generates for the configuration.</p>
    /// This field is required.
    pub fn configuration_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configuration_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn set_configuration_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configuration_id = input;
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn get_configuration_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.configuration_id
    }
    /// <p>Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.</p>
    /// This field is required.
    pub fn data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// <p>Amazon MQ for Active MQ: The base64-encoded XML configuration. Amazon MQ for RabbitMQ: the base64-encoded Cuttlefish configuration.</p>
    pub fn get_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.data
    }
    /// <p>The description of the configuration.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateConfigurationInput`](crate::operation::update_configuration::UpdateConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_configuration::UpdateConfigurationInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_configuration::UpdateConfigurationInput {
            configuration_id: self.configuration_id,
            data: self.data,
            description: self.description,
        })
    }
}
