// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeBrokerInstanceOptionsInput {
    /// <p>Filter response by engine type.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<std::string::String>,
    /// <p>Filter response by host instance type.</p>
    #[doc(hidden)]
    pub host_instance_type: std::option::Option<std::string::String>,
    /// <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Filter response by storage type.</p>
    #[doc(hidden)]
    pub storage_type: std::option::Option<std::string::String>,
}
impl DescribeBrokerInstanceOptionsInput {
    /// <p>Filter response by engine type.</p>
    pub fn engine_type(&self) -> std::option::Option<&str> {
        self.engine_type.as_deref()
    }
    /// <p>Filter response by host instance type.</p>
    pub fn host_instance_type(&self) -> std::option::Option<&str> {
        self.host_instance_type.as_deref()
    }
    /// <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Filter response by storage type.</p>
    pub fn storage_type(&self) -> std::option::Option<&str> {
        self.storage_type.as_deref()
    }
}
impl DescribeBrokerInstanceOptionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeBrokerInstanceOptionsInput`](crate::operation::describe_broker_instance_options::DescribeBrokerInstanceOptionsInput).
    pub fn builder() -> crate::operation::describe_broker_instance_options::builders::DescribeBrokerInstanceOptionsInputBuilder{
        crate::operation::describe_broker_instance_options::builders::DescribeBrokerInstanceOptionsInputBuilder::default()
    }
}

/// A builder for [`DescribeBrokerInstanceOptionsInput`](crate::operation::describe_broker_instance_options::DescribeBrokerInstanceOptionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeBrokerInstanceOptionsInputBuilder {
    pub(crate) engine_type: std::option::Option<std::string::String>,
    pub(crate) host_instance_type: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) storage_type: std::option::Option<std::string::String>,
}
impl DescribeBrokerInstanceOptionsInputBuilder {
    /// <p>Filter response by engine type.</p>
    pub fn engine_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_type = Some(input.into());
        self
    }
    /// <p>Filter response by engine type.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>Filter response by host instance type.</p>
    pub fn host_instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.host_instance_type = Some(input.into());
        self
    }
    /// <p>Filter response by host instance type.</p>
    pub fn set_host_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.host_instance_type = input;
        self
    }
    /// <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Filter response by storage type.</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_type = Some(input.into());
        self
    }
    /// <p>Filter response by storage type.</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeBrokerInstanceOptionsInput`](crate::operation::describe_broker_instance_options::DescribeBrokerInstanceOptionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_broker_instance_options::DescribeBrokerInstanceOptionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_broker_instance_options::DescribeBrokerInstanceOptionsInput {
                engine_type: self.engine_type
                ,
                host_instance_type: self.host_instance_type
                ,
                max_results: self.max_results
                    .unwrap_or_default()
                ,
                next_token: self.next_token
                ,
                storage_type: self.storage_type
                ,
            }
        )
    }
}
