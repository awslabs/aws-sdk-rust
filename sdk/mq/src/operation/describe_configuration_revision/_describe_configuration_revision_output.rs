// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConfigurationRevisionOutput {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    #[doc(hidden)]
    pub configuration_id: std::option::Option<std::string::String>,
    /// <p>Required. The date and time of the configuration.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Required. The base64-encoded XML configuration.</p>
    #[doc(hidden)]
    pub data: std::option::Option<std::string::String>,
    /// <p>The description of the configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeConfigurationRevisionOutput {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn configuration_id(&self) -> std::option::Option<&str> {
        self.configuration_id.as_deref()
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>Required. The base64-encoded XML configuration.</p>
    pub fn data(&self) -> std::option::Option<&str> {
        self.data.as_deref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeConfigurationRevisionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConfigurationRevisionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
    pub fn builder() -> crate::operation::describe_configuration_revision::builders::DescribeConfigurationRevisionOutputBuilder{
        crate::operation::describe_configuration_revision::builders::DescribeConfigurationRevisionOutputBuilder::default()
    }
}

/// A builder for [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeConfigurationRevisionOutputBuilder {
    pub(crate) configuration_id: std::option::Option<std::string::String>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeConfigurationRevisionOutputBuilder {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn configuration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_id = Some(input.into());
        self
    }
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn set_configuration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.configuration_id = input;
        self
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>Required. The date and time of the configuration.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>Required. The base64-encoded XML configuration.</p>
    pub fn data(mut self, input: impl Into<std::string::String>) -> Self {
        self.data = Some(input.into());
        self
    }
    /// <p>Required. The base64-encoded XML configuration.</p>
    pub fn set_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data = input;
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput
    {
        crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput {
            configuration_id: self.configuration_id,
            created: self.created,
            data: self.data,
            description: self.description,
            _request_id: self._request_id,
        }
    }
}
