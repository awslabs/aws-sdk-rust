// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListBrokers`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder::max_results) / [`set_max_results(i32)`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder::set_max_results): <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_brokers::builders::ListBrokersFluentBuilder::set_next_token): <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    /// - On success, responds with [`ListBrokersOutput`](crate::operation::list_brokers::ListBrokersOutput) with field(s):
    ///   - [`broker_summaries(Option<Vec<BrokerSummary>>)`](crate::operation::list_brokers::ListBrokersOutput::broker_summaries): <p>A list of information about all brokers.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_brokers::ListBrokersOutput::next_token): <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
    /// - On failure, responds with [`SdkError<ListBrokersError>`](crate::operation::list_brokers::ListBrokersError)
    pub fn list_brokers(
        &self,
    ) -> crate::operation::list_brokers::builders::ListBrokersFluentBuilder {
        crate::operation::list_brokers::builders::ListBrokersFluentBuilder::new(self.handle.clone())
    }
}
