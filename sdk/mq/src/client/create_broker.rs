// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateBroker`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`authentication_strategy(AuthenticationStrategy)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::authentication_strategy) / [`set_authentication_strategy(Option<AuthenticationStrategy>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_authentication_strategy):<br>required: **false**<br><p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p><br>
    ///   - [`auto_minor_version_upgrade(bool)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::auto_minor_version_upgrade) / [`set_auto_minor_version_upgrade(Option<bool>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_auto_minor_version_upgrade):<br>required: **true**<br><p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.</p><br>
    ///   - [`broker_name(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::broker_name) / [`set_broker_name(Option<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_broker_name):<br>required: **true**<br><p>Required. The broker's name. This value must be unique in your Amazon Web Services account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p> <important>  <p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker names are not intended to be used for private or sensitive data.</p> </important><br>
    ///   - [`configuration(ConfigurationId)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::configuration) / [`set_configuration(Option<ConfigurationId>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_configuration):<br>required: **false**<br><p>A list of information about the configuration.</p><br>
    ///   - [`creator_request_id(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::creator_request_id) / [`set_creator_request_id(Option<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_creator_request_id):<br>required: **false**<br><p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action.</p> <note>  <p>We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p> </note><br>
    ///   - [`deployment_mode(DeploymentMode)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::deployment_mode) / [`set_deployment_mode(Option<DeploymentMode>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_deployment_mode):<br>required: **true**<br><p>Required. The broker's deployment mode.</p><br>
    ///   - [`encryption_options(EncryptionOptions)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::encryption_options) / [`set_encryption_options(Option<EncryptionOptions>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_encryption_options):<br>required: **false**<br><p>Encryption options for the broker.</p><br>
    ///   - [`engine_type(EngineType)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::engine_type) / [`set_engine_type(Option<EngineType>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_engine_type):<br>required: **true**<br><p>Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p><br>
    ///   - [`engine_version(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::engine_version) / [`set_engine_version(Option<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_engine_version):<br>required: **true**<br><p>Required. The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p><br>
    ///   - [`host_instance_type(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::host_instance_type) / [`set_host_instance_type(Option<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_host_instance_type):<br>required: **true**<br><p>Required. The broker's instance type.</p><br>
    ///   - [`ldap_server_metadata(LdapServerMetadataInput)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::ldap_server_metadata) / [`set_ldap_server_metadata(Option<LdapServerMetadataInput>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_ldap_server_metadata):<br>required: **false**<br><p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p><br>
    ///   - [`logs(Logs)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::logs) / [`set_logs(Option<Logs>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_logs):<br>required: **false**<br><p>Enables Amazon CloudWatch logging for brokers.</p><br>
    ///   - [`maintenance_window_start_time(WeeklyStartTime)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::maintenance_window_start_time) / [`set_maintenance_window_start_time(Option<WeeklyStartTime>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_maintenance_window_start_time):<br>required: **false**<br><p>The parameters that determine the WeeklyStartTime.</p><br>
    ///   - [`publicly_accessible(bool)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::publicly_accessible) / [`set_publicly_accessible(Option<bool>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_publicly_accessible):<br>required: **true**<br><p>Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.</p><br>
    ///   - [`security_groups(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::security_groups) / [`set_security_groups(Option<Vec::<String>>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_security_groups):<br>required: **false**<br><p>The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.</p><br>
    ///   - [`storage_type(BrokerStorageType)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::storage_type) / [`set_storage_type(Option<BrokerStorageType>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_storage_type):<br>required: **false**<br><p>The broker's storage type.</p><br>
    ///   - [`subnet_ids(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::subnet_ids) / [`set_subnet_ids(Option<Vec::<String>>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_subnet_ids):<br>required: **false**<br><p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important>  <p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your Amazon Web Services account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your Amazon Web Services account.</p> </important><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_tags):<br>required: **false**<br><p>Create tags when creating the broker.</p><br>
    ///   - [`users(User)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::users) / [`set_users(Option<Vec::<User>>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_users):<br>required: **true**<br><p>The list of broker users (persons or applications) who can access queues and topics. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p><br>
    ///   - [`data_replication_mode(DataReplicationMode)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::data_replication_mode) / [`set_data_replication_mode(Option<DataReplicationMode>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_data_replication_mode):<br>required: **false**<br><p>Defines whether this broker is a part of a data replication pair.</p><br>
    ///   - [`data_replication_primary_broker_arn(impl Into<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::data_replication_primary_broker_arn) / [`set_data_replication_primary_broker_arn(Option<String>)`](crate::operation::create_broker::builders::CreateBrokerFluentBuilder::set_data_replication_primary_broker_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when dataReplicationMode is set to CRDR.</p><br>
    /// - On success, responds with [`CreateBrokerOutput`](crate::operation::create_broker::CreateBrokerOutput) with field(s):
    ///   - [`broker_arn(Option<String>)`](crate::operation::create_broker::CreateBrokerOutput::broker_arn): <p>The broker's Amazon Resource Name (ARN).</p>
    ///   - [`broker_id(Option<String>)`](crate::operation::create_broker::CreateBrokerOutput::broker_id): <p>The unique ID that Amazon MQ generates for the broker.</p>
    /// - On failure, responds with [`SdkError<CreateBrokerError>`](crate::operation::create_broker::CreateBrokerError)
    pub fn create_broker(&self) -> crate::operation::create_broker::builders::CreateBrokerFluentBuilder {
        crate::operation::create_broker::builders::CreateBrokerFluentBuilder::new(self.handle.clone())
    }
}
