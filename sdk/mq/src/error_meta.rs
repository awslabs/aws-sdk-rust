// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Returns information about an error.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>Returns information about an error.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Returns information about an error.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>Returns information about an error.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>Returns information about an error.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>Returns information about an error.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBrokerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBrokerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBrokerError> for Error {
    fn from(err: crate::error::CreateBrokerError) -> Self {
        match err {
            crate::error::CreateBrokerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBrokerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBrokerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateBrokerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateBrokerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateBrokerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConfigurationError> for Error {
    fn from(err: crate::error::CreateConfigurationError) -> Self {
        match err {
            crate::error::CreateConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTagsError> for Error {
    fn from(err: crate::error::CreateTagsError) -> Self {
        match err {
            crate::error::CreateTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateTagsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBrokerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBrokerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBrokerError> for Error {
    fn from(err: crate::error::DeleteBrokerError) -> Self {
        match err {
            crate::error::DeleteBrokerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBrokerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteBrokerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteBrokerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBrokerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTagsError> for Error {
    fn from(err: crate::error::DeleteTagsError) -> Self {
        match err {
            crate::error::DeleteTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteTagsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBrokerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBrokerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBrokerError> for Error {
    fn from(err: crate::error::DescribeBrokerError) -> Self {
        match err {
            crate::error::DescribeBrokerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeBrokerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeBrokerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeBrokerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBrokerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBrokerEngineTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBrokerEngineTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBrokerEngineTypesError> for Error {
    fn from(err: crate::error::DescribeBrokerEngineTypesError) -> Self {
        match err {
            crate::error::DescribeBrokerEngineTypesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeBrokerEngineTypesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeBrokerEngineTypesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeBrokerEngineTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBrokerInstanceOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBrokerInstanceOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBrokerInstanceOptionsError> for Error {
    fn from(err: crate::error::DescribeBrokerInstanceOptionsError) -> Self {
        match err {
            crate::error::DescribeBrokerInstanceOptionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeBrokerInstanceOptionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeBrokerInstanceOptionsError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DescribeBrokerInstanceOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationError> for Error {
    fn from(err: crate::error::DescribeConfigurationError) -> Self {
        match err {
            crate::error::DescribeConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationRevisionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationRevisionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationRevisionError> for Error {
    fn from(err: crate::error::DescribeConfigurationRevisionError) -> Self {
        match err {
            crate::error::DescribeConfigurationRevisionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeConfigurationRevisionError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeConfigurationRevisionError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DescribeConfigurationRevisionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeConfigurationRevisionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserError> for Error {
    fn from(err: crate::error::DescribeUserError) -> Self {
        match err {
            crate::error::DescribeUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListBrokersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListBrokersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListBrokersError> for Error {
    fn from(err: crate::error::ListBrokersError) -> Self {
        match err {
            crate::error::ListBrokersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListBrokersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListBrokersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListBrokersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListConfigurationRevisionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListConfigurationRevisionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConfigurationRevisionsError> for Error {
    fn from(err: crate::error::ListConfigurationRevisionsError) -> Self {
        match err {
            crate::error::ListConfigurationRevisionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListConfigurationRevisionsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListConfigurationRevisionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListConfigurationRevisionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListConfigurationRevisionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListConfigurationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListConfigurationsError> for Error {
    fn from(err: crate::error::ListConfigurationsError) -> Self {
        match err {
            crate::error::ListConfigurationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListConfigurationsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListConfigurationsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTagsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListUsersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListUsersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListUsersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootBrokerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RebootBrokerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootBrokerError> for Error {
    fn from(err: crate::error::RebootBrokerError) -> Self {
        match err {
            crate::error::RebootBrokerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RebootBrokerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RebootBrokerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::RebootBrokerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::RebootBrokerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBrokerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBrokerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBrokerError> for Error {
    fn from(err: crate::error::UpdateBrokerError) -> Self {
        match err {
            crate::error::UpdateBrokerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBrokerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBrokerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateBrokerError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateBrokerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBrokerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConfigurationError> for Error {
    fn from(err: crate::error::UpdateConfigurationError) -> Self {
        match err {
            crate::error::UpdateConfigurationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateConfigurationError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateConfigurationError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateConfigurationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err {
            crate::error::UpdateUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
