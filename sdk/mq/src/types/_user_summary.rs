// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns a list of all broker users. Does not apply to RabbitMQ brokers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserSummary {
    /// <p>The type of change pending for the broker user.</p>
    #[doc(hidden)]
    pub pending_change: std::option::Option<crate::types::ChangeType>,
    /// <p>Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
}
impl UserSummary {
    /// <p>The type of change pending for the broker user.</p>
    pub fn pending_change(&self) -> std::option::Option<&crate::types::ChangeType> {
        self.pending_change.as_ref()
    }
    /// <p>Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl UserSummary {
    /// Creates a new builder-style object to manufacture [`UserSummary`](crate::types::UserSummary).
    pub fn builder() -> crate::types::builders::UserSummaryBuilder {
        crate::types::builders::UserSummaryBuilder::default()
    }
}

/// A builder for [`UserSummary`](crate::types::UserSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserSummaryBuilder {
    pub(crate) pending_change: std::option::Option<crate::types::ChangeType>,
    pub(crate) username: std::option::Option<std::string::String>,
}
impl UserSummaryBuilder {
    /// <p>The type of change pending for the broker user.</p>
    pub fn pending_change(mut self, input: crate::types::ChangeType) -> Self {
        self.pending_change = Some(input);
        self
    }
    /// <p>The type of change pending for the broker user.</p>
    pub fn set_pending_change(
        mut self,
        input: std::option::Option<crate::types::ChangeType>,
    ) -> Self {
        self.pending_change = input;
        self
    }
    /// <p>Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Consumes the builder and constructs a [`UserSummary`](crate::types::UserSummary).
    pub fn build(self) -> crate::types::UserSummary {
        crate::types::UserSummary {
            pending_change: self.pending_change,
            username: self.username,
        }
    }
}
