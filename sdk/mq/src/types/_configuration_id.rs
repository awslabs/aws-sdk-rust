// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of information about the configuration.</p> <important>
/// <p>Does not apply to RabbitMQ brokers.</p>
/// </important>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigurationId {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The revision number of the configuration.</p>
    #[doc(hidden)]
    pub revision: i32,
}
impl ConfigurationId {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The revision number of the configuration.</p>
    pub fn revision(&self) -> i32 {
        self.revision
    }
}
impl ConfigurationId {
    /// Creates a new builder-style object to manufacture [`ConfigurationId`](crate::types::ConfigurationId).
    pub fn builder() -> crate::types::builders::ConfigurationIdBuilder {
        crate::types::builders::ConfigurationIdBuilder::default()
    }
}

/// A builder for [`ConfigurationId`](crate::types::ConfigurationId).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigurationIdBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) revision: std::option::Option<i32>,
}
impl ConfigurationIdBuilder {
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The revision number of the configuration.</p>
    pub fn revision(mut self, input: i32) -> Self {
        self.revision = Some(input);
        self
    }
    /// <p>The revision number of the configuration.</p>
    pub fn set_revision(mut self, input: std::option::Option<i32>) -> Self {
        self.revision = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigurationId`](crate::types::ConfigurationId).
    pub fn build(self) -> crate::types::ConfigurationId {
        crate::types::ConfigurationId {
            id: self.id,
            revision: self.revision.unwrap_or_default(),
        }
    }
}
