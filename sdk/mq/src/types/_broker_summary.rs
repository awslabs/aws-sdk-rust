// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about all brokers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BrokerSummary {
    /// <p>The broker's Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub broker_arn: std::option::Option<std::string::String>,
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    #[doc(hidden)]
    pub broker_id: std::option::Option<std::string::String>,
    /// <p>The broker's name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
    #[doc(hidden)]
    pub broker_name: std::option::Option<std::string::String>,
    /// <p>The broker's status.</p>
    #[doc(hidden)]
    pub broker_state: std::option::Option<crate::types::BrokerState>,
    /// <p>The time when the broker was created.</p>
    #[doc(hidden)]
    pub created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The broker's deployment mode.</p>
    #[doc(hidden)]
    pub deployment_mode: std::option::Option<crate::types::DeploymentMode>,
    /// <p>The type of broker engine.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<crate::types::EngineType>,
    /// <p>The broker's instance type.</p>
    #[doc(hidden)]
    pub host_instance_type: std::option::Option<std::string::String>,
}
impl BrokerSummary {
    /// <p>The broker's Amazon Resource Name (ARN).</p>
    pub fn broker_arn(&self) -> std::option::Option<&str> {
        self.broker_arn.as_deref()
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn broker_id(&self) -> std::option::Option<&str> {
        self.broker_id.as_deref()
    }
    /// <p>The broker's name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
    pub fn broker_name(&self) -> std::option::Option<&str> {
        self.broker_name.as_deref()
    }
    /// <p>The broker's status.</p>
    pub fn broker_state(&self) -> std::option::Option<&crate::types::BrokerState> {
        self.broker_state.as_ref()
    }
    /// <p>The time when the broker was created.</p>
    pub fn created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created.as_ref()
    }
    /// <p>The broker's deployment mode.</p>
    pub fn deployment_mode(&self) -> std::option::Option<&crate::types::DeploymentMode> {
        self.deployment_mode.as_ref()
    }
    /// <p>The type of broker engine.</p>
    pub fn engine_type(&self) -> std::option::Option<&crate::types::EngineType> {
        self.engine_type.as_ref()
    }
    /// <p>The broker's instance type.</p>
    pub fn host_instance_type(&self) -> std::option::Option<&str> {
        self.host_instance_type.as_deref()
    }
}
impl BrokerSummary {
    /// Creates a new builder-style object to manufacture [`BrokerSummary`](crate::types::BrokerSummary).
    pub fn builder() -> crate::types::builders::BrokerSummaryBuilder {
        crate::types::builders::BrokerSummaryBuilder::default()
    }
}

/// A builder for [`BrokerSummary`](crate::types::BrokerSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BrokerSummaryBuilder {
    pub(crate) broker_arn: std::option::Option<std::string::String>,
    pub(crate) broker_id: std::option::Option<std::string::String>,
    pub(crate) broker_name: std::option::Option<std::string::String>,
    pub(crate) broker_state: std::option::Option<crate::types::BrokerState>,
    pub(crate) created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deployment_mode: std::option::Option<crate::types::DeploymentMode>,
    pub(crate) engine_type: std::option::Option<crate::types::EngineType>,
    pub(crate) host_instance_type: std::option::Option<std::string::String>,
}
impl BrokerSummaryBuilder {
    /// <p>The broker's Amazon Resource Name (ARN).</p>
    pub fn broker_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.broker_arn = Some(input.into());
        self
    }
    /// <p>The broker's Amazon Resource Name (ARN).</p>
    pub fn set_broker_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.broker_arn = input;
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn broker_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.broker_id = Some(input.into());
        self
    }
    /// <p>The unique ID that Amazon MQ generates for the broker.</p>
    pub fn set_broker_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.broker_id = input;
        self
    }
    /// <p>The broker's name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
    pub fn broker_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.broker_name = Some(input.into());
        self
    }
    /// <p>The broker's name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
    pub fn set_broker_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.broker_name = input;
        self
    }
    /// <p>The broker's status.</p>
    pub fn broker_state(mut self, input: crate::types::BrokerState) -> Self {
        self.broker_state = Some(input);
        self
    }
    /// <p>The broker's status.</p>
    pub fn set_broker_state(
        mut self,
        input: std::option::Option<crate::types::BrokerState>,
    ) -> Self {
        self.broker_state = input;
        self
    }
    /// <p>The time when the broker was created.</p>
    pub fn created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created = Some(input);
        self
    }
    /// <p>The time when the broker was created.</p>
    pub fn set_created(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The broker's deployment mode.</p>
    pub fn deployment_mode(mut self, input: crate::types::DeploymentMode) -> Self {
        self.deployment_mode = Some(input);
        self
    }
    /// <p>The broker's deployment mode.</p>
    pub fn set_deployment_mode(
        mut self,
        input: std::option::Option<crate::types::DeploymentMode>,
    ) -> Self {
        self.deployment_mode = input;
        self
    }
    /// <p>The type of broker engine.</p>
    pub fn engine_type(mut self, input: crate::types::EngineType) -> Self {
        self.engine_type = Some(input);
        self
    }
    /// <p>The type of broker engine.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<crate::types::EngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// <p>The broker's instance type.</p>
    pub fn host_instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.host_instance_type = Some(input.into());
        self
    }
    /// <p>The broker's instance type.</p>
    pub fn set_host_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.host_instance_type = input;
        self
    }
    /// Consumes the builder and constructs a [`BrokerSummary`](crate::types::BrokerSummary).
    pub fn build(self) -> crate::types::BrokerSummary {
        crate::types::BrokerSummary {
            broker_arn: self.broker_arn,
            broker_id: self.broker_id,
            broker_name: self.broker_name,
            broker_state: self.broker_state,
            created: self.created,
            deployment_mode: self.deployment_mode,
            engine_type: self.engine_type,
            host_instance_type: self.host_instance_type,
        }
    }
}
