// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Encryption options for the broker.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EncryptionOptions {
    /// <p>The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
    pub use_aws_owned_key: ::std::option::Option<bool>,
}
impl EncryptionOptions {
    /// <p>The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
    pub fn use_aws_owned_key(&self) -> ::std::option::Option<bool> {
        self.use_aws_owned_key
    }
}
impl EncryptionOptions {
    /// Creates a new builder-style object to manufacture [`EncryptionOptions`](crate::types::EncryptionOptions).
    pub fn builder() -> crate::types::builders::EncryptionOptionsBuilder {
        crate::types::builders::EncryptionOptionsBuilder::default()
    }
}

/// A builder for [`EncryptionOptions`](crate::types::EncryptionOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EncryptionOptionsBuilder {
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) use_aws_owned_key: ::std::option::Option<bool>,
}
impl EncryptionOptionsBuilder {
    /// <p>The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
    /// This field is required.
    pub fn use_aws_owned_key(mut self, input: bool) -> Self {
        self.use_aws_owned_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
    pub fn set_use_aws_owned_key(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_aws_owned_key = input;
        self
    }
    /// <p>Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
    pub fn get_use_aws_owned_key(&self) -> &::std::option::Option<bool> {
        &self.use_aws_owned_key
    }
    /// Consumes the builder and constructs a [`EncryptionOptions`](crate::types::EncryptionOptions).
    pub fn build(self) -> crate::types::EncryptionOptions {
        crate::types::EncryptionOptions {
            kms_key_id: self.kms_key_id,
            use_aws_owned_key: self.use_aws_owned_key,
        }
    }
}
