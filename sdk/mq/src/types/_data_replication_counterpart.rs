// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a broker in a data replication pair.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataReplicationCounterpart {
    /// <p>Required. The unique broker id generated by Amazon MQ.</p>
    pub broker_id: ::std::option::Option<::std::string::String>,
    /// <p>Required. The region of the broker.</p>
    pub region: ::std::option::Option<::std::string::String>,
}
impl DataReplicationCounterpart {
    /// <p>Required. The unique broker id generated by Amazon MQ.</p>
    pub fn broker_id(&self) -> ::std::option::Option<&str> {
        self.broker_id.as_deref()
    }
    /// <p>Required. The region of the broker.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
}
impl DataReplicationCounterpart {
    /// Creates a new builder-style object to manufacture [`DataReplicationCounterpart`](crate::types::DataReplicationCounterpart).
    pub fn builder() -> crate::types::builders::DataReplicationCounterpartBuilder {
        crate::types::builders::DataReplicationCounterpartBuilder::default()
    }
}

/// A builder for [`DataReplicationCounterpart`](crate::types::DataReplicationCounterpart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataReplicationCounterpartBuilder {
    pub(crate) broker_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
}
impl DataReplicationCounterpartBuilder {
    /// <p>Required. The unique broker id generated by Amazon MQ.</p>
    /// This field is required.
    pub fn broker_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.broker_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required. The unique broker id generated by Amazon MQ.</p>
    pub fn set_broker_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.broker_id = input;
        self
    }
    /// <p>Required. The unique broker id generated by Amazon MQ.</p>
    pub fn get_broker_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.broker_id
    }
    /// <p>Required. The region of the broker.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Required. The region of the broker.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Required. The region of the broker.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Consumes the builder and constructs a [`DataReplicationCounterpart`](crate::types::DataReplicationCounterpart).
    pub fn build(self) -> crate::types::DataReplicationCounterpart {
        crate::types::DataReplicationCounterpart {
            broker_id: self.broker_id,
            region: self.region,
        }
    }
}
