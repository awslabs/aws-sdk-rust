// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Broker configuration information</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Configurations {
    /// <p>The broker's current configuration.</p>
    pub current: ::std::option::Option<crate::types::ConfigurationId>,
    /// <p>The history of configurations applied to the broker.</p>
    pub history: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationId>>,
    /// <p>The broker's pending configuration.</p>
    pub pending: ::std::option::Option<crate::types::ConfigurationId>,
}
impl Configurations {
    /// <p>The broker's current configuration.</p>
    pub fn current(&self) -> ::std::option::Option<&crate::types::ConfigurationId> {
        self.current.as_ref()
    }
    /// <p>The history of configurations applied to the broker.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.history.is_none()`.
    pub fn history(&self) -> &[crate::types::ConfigurationId] {
        self.history.as_deref().unwrap_or_default()
    }
    /// <p>The broker's pending configuration.</p>
    pub fn pending(&self) -> ::std::option::Option<&crate::types::ConfigurationId> {
        self.pending.as_ref()
    }
}
impl Configurations {
    /// Creates a new builder-style object to manufacture [`Configurations`](crate::types::Configurations).
    pub fn builder() -> crate::types::builders::ConfigurationsBuilder {
        crate::types::builders::ConfigurationsBuilder::default()
    }
}

/// A builder for [`Configurations`](crate::types::Configurations).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationsBuilder {
    pub(crate) current: ::std::option::Option<crate::types::ConfigurationId>,
    pub(crate) history: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationId>>,
    pub(crate) pending: ::std::option::Option<crate::types::ConfigurationId>,
}
impl ConfigurationsBuilder {
    /// <p>The broker's current configuration.</p>
    pub fn current(mut self, input: crate::types::ConfigurationId) -> Self {
        self.current = ::std::option::Option::Some(input);
        self
    }
    /// <p>The broker's current configuration.</p>
    pub fn set_current(mut self, input: ::std::option::Option<crate::types::ConfigurationId>) -> Self {
        self.current = input;
        self
    }
    /// <p>The broker's current configuration.</p>
    pub fn get_current(&self) -> &::std::option::Option<crate::types::ConfigurationId> {
        &self.current
    }
    /// Appends an item to `history`.
    ///
    /// To override the contents of this collection use [`set_history`](Self::set_history).
    ///
    /// <p>The history of configurations applied to the broker.</p>
    pub fn history(mut self, input: crate::types::ConfigurationId) -> Self {
        let mut v = self.history.unwrap_or_default();
        v.push(input);
        self.history = ::std::option::Option::Some(v);
        self
    }
    /// <p>The history of configurations applied to the broker.</p>
    pub fn set_history(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ConfigurationId>>) -> Self {
        self.history = input;
        self
    }
    /// <p>The history of configurations applied to the broker.</p>
    pub fn get_history(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ConfigurationId>> {
        &self.history
    }
    /// <p>The broker's pending configuration.</p>
    pub fn pending(mut self, input: crate::types::ConfigurationId) -> Self {
        self.pending = ::std::option::Option::Some(input);
        self
    }
    /// <p>The broker's pending configuration.</p>
    pub fn set_pending(mut self, input: ::std::option::Option<crate::types::ConfigurationId>) -> Self {
        self.pending = input;
        self
    }
    /// <p>The broker's pending configuration.</p>
    pub fn get_pending(&self) -> &::std::option::Option<crate::types::ConfigurationId> {
        &self.pending
    }
    /// Consumes the builder and constructs a [`Configurations`](crate::types::Configurations).
    pub fn build(self) -> crate::types::Configurations {
        crate::types::Configurations {
            current: self.current,
            history: self.history,
            pending: self.pending,
        }
    }
}
