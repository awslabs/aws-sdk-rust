// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about all brokers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BrokerInstance {
    /// <p>The brokers web console URL.</p>
    #[doc(hidden)]
    pub console_url: std::option::Option<std::string::String>,
    /// <p>The broker's wire-level protocol endpoints.</p>
    #[doc(hidden)]
    pub endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<std::string::String>,
}
impl BrokerInstance {
    /// <p>The brokers web console URL.</p>
    pub fn console_url(&self) -> std::option::Option<&str> {
        self.console_url.as_deref()
    }
    /// <p>The broker's wire-level protocol endpoints.</p>
    pub fn endpoints(&self) -> std::option::Option<&[std::string::String]> {
        self.endpoints.as_deref()
    }
    /// <p>The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.</p>
    pub fn ip_address(&self) -> std::option::Option<&str> {
        self.ip_address.as_deref()
    }
}
impl BrokerInstance {
    /// Creates a new builder-style object to manufacture [`BrokerInstance`](crate::types::BrokerInstance).
    pub fn builder() -> crate::types::builders::BrokerInstanceBuilder {
        crate::types::builders::BrokerInstanceBuilder::default()
    }
}

/// A builder for [`BrokerInstance`](crate::types::BrokerInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BrokerInstanceBuilder {
    pub(crate) console_url: std::option::Option<std::string::String>,
    pub(crate) endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ip_address: std::option::Option<std::string::String>,
}
impl BrokerInstanceBuilder {
    /// <p>The brokers web console URL.</p>
    pub fn console_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.console_url = Some(input.into());
        self
    }
    /// <p>The brokers web console URL.</p>
    pub fn set_console_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.console_url = input;
        self
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>The broker's wire-level protocol endpoints.</p>
    pub fn endpoints(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input.into());
        self.endpoints = Some(v);
        self
    }
    /// <p>The broker's wire-level protocol endpoints.</p>
    pub fn set_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.</p>
    pub fn ip_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address = Some(input.into());
        self
    }
    /// <p>The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.</p>
    pub fn set_ip_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`BrokerInstance`](crate::types::BrokerInstance).
    pub fn build(self) -> crate::types::BrokerInstance {
        crate::types::BrokerInstance {
            console_url: self.console_url,
            endpoints: self.endpoints,
            ip_address: self.ip_address,
        }
    }
}
