// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn configuration_id_correct_errors(
    mut builder: crate::types::builders::ConfigurationIdBuilder,
) -> crate::types::builders::ConfigurationIdBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_revision_correct_errors(
    mut builder: crate::types::builders::ConfigurationRevisionBuilder,
) -> crate::types::builders::ConfigurationRevisionBuilder {
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn data_replication_metadata_output_correct_errors(
    mut builder: crate::types::builders::DataReplicationMetadataOutputBuilder,
) -> crate::types::builders::DataReplicationMetadataOutputBuilder {
    if builder.data_replication_role.is_none() {
        builder.data_replication_role = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_options_correct_errors(
    mut builder: crate::types::builders::EncryptionOptionsBuilder,
) -> crate::types::builders::EncryptionOptionsBuilder {
    if builder.use_aws_owned_key.is_none() {
        builder.use_aws_owned_key = Some(Default::default())
    }
    builder
}

pub(crate) fn ldap_server_metadata_output_correct_errors(
    mut builder: crate::types::builders::LdapServerMetadataOutputBuilder,
) -> crate::types::builders::LdapServerMetadataOutputBuilder {
    if builder.hosts.is_none() {
        builder.hosts = Some(Default::default())
    }
    if builder.role_base.is_none() {
        builder.role_base = Some(Default::default())
    }
    if builder.role_search_matching.is_none() {
        builder.role_search_matching = Some(Default::default())
    }
    if builder.service_account_username.is_none() {
        builder.service_account_username = Some(Default::default())
    }
    if builder.user_base.is_none() {
        builder.user_base = Some(Default::default())
    }
    if builder.user_search_matching.is_none() {
        builder.user_search_matching = Some(Default::default())
    }
    builder
}

pub(crate) fn logs_summary_correct_errors(mut builder: crate::types::builders::LogsSummaryBuilder) -> crate::types::builders::LogsSummaryBuilder {
    if builder.general.is_none() {
        builder.general = Some(Default::default())
    }
    if builder.general_log_group.is_none() {
        builder.general_log_group = Some(Default::default())
    }
    builder
}

pub(crate) fn user_pending_changes_correct_errors(
    mut builder: crate::types::builders::UserPendingChangesBuilder,
) -> crate::types::builders::UserPendingChangesBuilder {
    if builder.pending_change.is_none() {
        builder.pending_change = "no value was set".parse::<crate::types::ChangeType>().ok()
    }
    builder
}

pub(crate) fn weekly_start_time_correct_errors(
    mut builder: crate::types::builders::WeeklyStartTimeBuilder,
) -> crate::types::builders::WeeklyStartTimeBuilder {
    if builder.day_of_week.is_none() {
        builder.day_of_week = "no value was set".parse::<crate::types::DayOfWeek>().ok()
    }
    if builder.time_of_day.is_none() {
        builder.time_of_day = Some(Default::default())
    }
    builder
}

pub(crate) fn broker_summary_correct_errors(
    mut builder: crate::types::builders::BrokerSummaryBuilder,
) -> crate::types::builders::BrokerSummaryBuilder {
    if builder.deployment_mode.is_none() {
        builder.deployment_mode = "no value was set".parse::<crate::types::DeploymentMode>().ok()
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    builder
}

pub(crate) fn configuration_correct_errors(
    mut builder: crate::types::builders::ConfigurationBuilder,
) -> crate::types::builders::ConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.authentication_strategy.is_none() {
        builder.authentication_strategy = "no value was set".parse::<crate::types::AuthenticationStrategy>().ok()
    }
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.engine_type.is_none() {
        builder.engine_type = "no value was set".parse::<crate::types::EngineType>().ok()
    }
    if builder.engine_version.is_none() {
        builder.engine_version = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.latest_revision.is_none() {
        builder.latest_revision = {
            let builder = crate::types::builders::ConfigurationRevisionBuilder::default();
            Some(crate::serde_util::configuration_revision_correct_errors(builder).build())
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn data_replication_counterpart_correct_errors(
    mut builder: crate::types::builders::DataReplicationCounterpartBuilder,
) -> crate::types::builders::DataReplicationCounterpartBuilder {
    if builder.broker_id.is_none() {
        builder.broker_id = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn sanitization_warning_correct_errors(
    mut builder: crate::types::builders::SanitizationWarningBuilder,
) -> crate::types::builders::SanitizationWarningBuilder {
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::SanitizationWarningReason>().ok()
    }
    builder
}

pub(crate) fn user_summary_correct_errors(mut builder: crate::types::builders::UserSummaryBuilder) -> crate::types::builders::UserSummaryBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    builder
}
