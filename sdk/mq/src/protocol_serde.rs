// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_broker;

pub(crate) mod shape_create_configuration;

pub(crate) mod shape_create_tags;

pub(crate) mod shape_create_user;

pub(crate) mod shape_delete_broker;

pub(crate) mod shape_delete_tags;

pub(crate) mod shape_delete_user;

pub(crate) mod shape_describe_broker;

pub(crate) mod shape_describe_broker_engine_types;

pub(crate) mod shape_describe_broker_instance_options;

pub(crate) mod shape_describe_configuration;

pub(crate) mod shape_describe_configuration_revision;

pub(crate) mod shape_describe_user;

pub(crate) mod shape_list_brokers;

pub(crate) mod shape_list_configuration_revisions;

pub(crate) mod shape_list_configurations;

pub(crate) mod shape_list_tags;

pub(crate) mod shape_list_users;

pub(crate) mod shape_promote;

pub(crate) mod shape_reboot_broker;

pub(crate) mod shape_update_broker;

pub(crate) mod shape_update_configuration;

pub(crate) mod shape_update_user;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_broker_input;

pub(crate) mod shape_create_configuration_input;

pub(crate) mod shape_create_tags_input;

pub(crate) mod shape_create_user_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_internal_server_error_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_promote_input;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_broker_input;

pub(crate) mod shape_update_configuration_input;

pub(crate) mod shape_update_user_input;

pub(crate) mod shape_configuration_id;

pub(crate) mod shape_configuration_revision;

pub(crate) mod shape_configurations;

pub(crate) mod shape_data_replication_metadata_output;

pub(crate) mod shape_encryption_options;

pub(crate) mod shape_ldap_server_metadata_input;

pub(crate) mod shape_ldap_server_metadata_output;

pub(crate) mod shape_list_of_action_required;

pub(crate) mod shape_list_of_broker_engine_type;

pub(crate) mod shape_list_of_broker_instance;

pub(crate) mod shape_list_of_broker_instance_option;

pub(crate) mod shape_list_of_broker_summary;

pub(crate) mod shape_list_of_configuration;

pub(crate) mod shape_list_of_configuration_revision;

pub(crate) mod shape_list_of_sanitization_warning;

pub(crate) mod shape_list_of_string;

pub(crate) mod shape_list_of_user_summary;

pub(crate) mod shape_logs;

pub(crate) mod shape_logs_summary;

pub(crate) mod shape_map_of_string;

pub(crate) mod shape_user;

pub(crate) mod shape_user_pending_changes;

pub(crate) mod shape_weekly_start_time;

pub(crate) mod shape_action_required;

pub(crate) mod shape_broker_engine_type;

pub(crate) mod shape_broker_instance;

pub(crate) mod shape_broker_instance_option;

pub(crate) mod shape_broker_summary;

pub(crate) mod shape_configuration;

pub(crate) mod shape_data_replication_counterpart;

pub(crate) mod shape_list_of_configuration_id;

pub(crate) mod shape_pending_logs;

pub(crate) mod shape_sanitization_warning;

pub(crate) mod shape_user_summary;

pub(crate) mod shape_list_of_availability_zone;

pub(crate) mod shape_list_of_deployment_mode;

pub(crate) mod shape_list_of_engine_version;

pub(crate) mod shape_availability_zone;

pub(crate) mod shape_engine_version;
