// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_complete_attachment_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CompleteAttachmentUploadInput,
) {
    if let Some(var_1) = &input.attachment_ids {
        let mut array_2 = object.key("AttachmentIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.client_token {
        object.key("ClientToken").string(var_4);
    }
}

pub fn serialize_structure_create_participant_connection_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateParticipantConnectionInput,
) {
    if let Some(var_5) = &input.r#type {
        let mut array_6 = object.key("Type").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
}

pub fn serialize_structure_disconnect_participant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectParticipantInput,
) {
    if let Some(var_8) = &input.client_token {
        object.key("ClientToken").string(var_8);
    }
}

pub fn serialize_structure_get_attachment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAttachmentInput,
) {
    if let Some(var_9) = &input.attachment_id {
        object.key("AttachmentId").string(var_9);
    }
}

pub fn serialize_structure_get_transcript_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetTranscriptInput,
) {
    if let Some(var_10) = &input.contact_id {
        object.key("ContactId").string(var_10);
    }
    if let Some(var_11) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.next_token {
        object.key("NextToken").string(var_12);
    }
    if let Some(var_13) = &input.scan_direction {
        object.key("ScanDirection").string(var_13.as_str());
    }
    if let Some(var_14) = &input.sort_order {
        object.key("SortOrder").string(var_14.as_str());
    }
    if let Some(var_15) = &input.start_position {
        let mut object_16 = object.key("StartPosition").start_object();
        crate::json_ser::serialize_structure_start_position(&mut object_16, var_15);
        object_16.finish();
    }
}

pub fn serialize_structure_send_event_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendEventInput,
) {
    if let Some(var_17) = &input.client_token {
        object.key("ClientToken").string(var_17);
    }
    if let Some(var_18) = &input.content {
        object.key("Content").string(var_18);
    }
    if let Some(var_19) = &input.content_type {
        object.key("ContentType").string(var_19);
    }
}

pub fn serialize_structure_send_message_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendMessageInput,
) {
    if let Some(var_20) = &input.client_token {
        object.key("ClientToken").string(var_20);
    }
    if let Some(var_21) = &input.content {
        object.key("Content").string(var_21);
    }
    if let Some(var_22) = &input.content_type {
        object.key("ContentType").string(var_22);
    }
}

pub fn serialize_structure_start_attachment_upload_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAttachmentUploadInput,
) {
    if let Some(var_23) = &input.attachment_name {
        object.key("AttachmentName").string(var_23);
    }
    {
        object.key("AttachmentSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.attachment_size_in_bytes).into()),
        );
    }
    if let Some(var_24) = &input.client_token {
        object.key("ClientToken").string(var_24);
    }
    if let Some(var_25) = &input.content_type {
        object.key("ContentType").string(var_25);
    }
}

pub fn serialize_structure_start_position(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartPosition,
) {
    if let Some(var_26) = &input.id {
        object.key("Id").string(var_26);
    }
    if let Some(var_27) = &input.absolute_time {
        object.key("AbsoluteTime").string(var_27);
    }
    if input.most_recent != 0 {
        object.key("MostRecent").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.most_recent).into()),
        );
    }
}
