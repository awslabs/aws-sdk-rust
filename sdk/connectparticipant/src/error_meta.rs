// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An attachment with that identifier is already being uploaded.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>This exception occurs when there is an internal failure in the Amazon Connect service.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The number of attachments per contact exceeds the quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by Amazon Connect.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteAttachmentUploadError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CompleteAttachmentUploadError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CompleteAttachmentUploadError> for Error {
    fn from(err: crate::error::CompleteAttachmentUploadError) -> Self {
        match err {
            crate::error::CompleteAttachmentUploadError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CompleteAttachmentUploadError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CompleteAttachmentUploadError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CompleteAttachmentUploadError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CompleteAttachmentUploadError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CompleteAttachmentUploadError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CompleteAttachmentUploadError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateParticipantConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateParticipantConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateParticipantConnectionError> for Error {
    fn from(err: crate::error::CreateParticipantConnectionError) -> Self {
        match err {
            crate::error::CreateParticipantConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateParticipantConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateParticipantConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateParticipantConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateParticipantConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisconnectParticipantError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisconnectParticipantError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisconnectParticipantError> for Error {
    fn from(err: crate::error::DisconnectParticipantError) -> Self {
        match err {
            crate::error::DisconnectParticipantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisconnectParticipantError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisconnectParticipantError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisconnectParticipantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisconnectParticipantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAttachmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAttachmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAttachmentError> for Error {
    fn from(err: crate::error::GetAttachmentError) -> Self {
        match err {
            crate::error::GetAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAttachmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAttachmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTranscriptError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTranscriptError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTranscriptError> for Error {
    fn from(err: crate::error::GetTranscriptError) -> Self {
        match err {
            crate::error::GetTranscriptError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetTranscriptError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetTranscriptError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetTranscriptError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetTranscriptError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendEventError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendEventError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendEventError> for Error {
    fn from(err: crate::error::SendEventError) -> Self {
        match err {
            crate::error::SendEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendMessageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendMessageError> for Error {
    fn from(err: crate::error::SendMessageError) -> Self {
        match err {
            crate::error::SendMessageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendMessageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendMessageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendMessageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAttachmentUploadError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAttachmentUploadError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAttachmentUploadError> for Error {
    fn from(err: crate::error::StartAttachmentUploadError) -> Self {
        match err {
            crate::error::StartAttachmentUploadError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartAttachmentUploadError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartAttachmentUploadError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartAttachmentUploadError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartAttachmentUploadError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartAttachmentUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
