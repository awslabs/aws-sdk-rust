// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An attachment with that identifier is already being uploaded.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>This exception occurs when there is an internal failure in the Amazon Connect service.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The number of attachments per contact exceeds the quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by Amazon Connect.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::complete_attachment_upload::CompleteAttachmentUploadError> for Error {
    fn from(
        err: crate::operation::complete_attachment_upload::CompleteAttachmentUploadError,
    ) -> Self {
        match err {
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::complete_attachment_upload::CompleteAttachmentUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_participant_connection::CreateParticipantConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_participant_connection::CreateParticipantConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_participant_connection::CreateParticipantConnectionError>
    for Error
{
    fn from(
        err: crate::operation::create_participant_connection::CreateParticipantConnectionError,
    ) -> Self {
        match err {
            crate::operation::create_participant_connection::CreateParticipantConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_participant_connection::CreateParticipantConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_participant_connection::CreateParticipantConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_participant_connection::CreateParticipantConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_participant_connection::CreateParticipantConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disconnect_participant::DisconnectParticipantError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disconnect_participant::DisconnectParticipantError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disconnect_participant::DisconnectParticipantError> for Error {
    fn from(err: crate::operation::disconnect_participant::DisconnectParticipantError) -> Self {
        match err {
            crate::operation::disconnect_participant::DisconnectParticipantError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disconnect_participant::DisconnectParticipantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_attachment::GetAttachmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_attachment::GetAttachmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_attachment::GetAttachmentError> for Error {
    fn from(err: crate::operation::get_attachment::GetAttachmentError) -> Self {
        match err {
            crate::operation::get_attachment::GetAttachmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_attachment::GetAttachmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_attachment::GetAttachmentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_attachment::GetAttachmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_attachment::GetAttachmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_transcript::GetTranscriptError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_transcript::GetTranscriptError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_transcript::GetTranscriptError> for Error {
    fn from(err: crate::operation::get_transcript::GetTranscriptError) -> Self {
        match err {
            crate::operation::get_transcript::GetTranscriptError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_transcript::GetTranscriptError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_transcript::GetTranscriptError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_transcript::GetTranscriptError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_transcript::GetTranscriptError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_event::SendEventError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::send_event::SendEventError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_event::SendEventError> for Error {
    fn from(err: crate::operation::send_event::SendEventError) -> Self {
        match err {
            crate::operation::send_event::SendEventError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_event::SendEventError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_event::SendEventError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_event::SendEventError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_event::SendEventError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_message::SendMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::send_message::SendMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_message::SendMessageError> for Error {
    fn from(err: crate::operation::send_message::SendMessageError) -> Self {
        match err {
            crate::operation::send_message::SendMessageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::send_message::SendMessageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::send_message::SendMessageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::send_message::SendMessageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::send_message::SendMessageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_attachment_upload::StartAttachmentUploadError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_attachment_upload::StartAttachmentUploadError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_attachment_upload::StartAttachmentUploadError> for Error {
    fn from(err: crate::operation::start_attachment_upload::StartAttachmentUploadError) -> Self {
        match err {
            crate::operation::start_attachment_upload::StartAttachmentUploadError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_attachment_upload::StartAttachmentUploadError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_attachment_upload::StartAttachmentUploadError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_attachment_upload::StartAttachmentUploadError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_attachment_upload::StartAttachmentUploadError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_attachment_upload::StartAttachmentUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
