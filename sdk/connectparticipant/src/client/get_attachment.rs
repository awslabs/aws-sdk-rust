// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetAttachment`](crate::operation::get_attachment::builders::GetAttachmentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attachment_id(impl Into<String>)`](crate::operation::get_attachment::builders::GetAttachmentFluentBuilder::attachment_id) / [`set_attachment_id(Option<String>)`](crate::operation::get_attachment::builders::GetAttachmentFluentBuilder::set_attachment_id): <p>A unique identifier for the attachment.</p>
    ///   - [`connection_token(impl Into<String>)`](crate::operation::get_attachment::builders::GetAttachmentFluentBuilder::connection_token) / [`set_connection_token(Option<String>)`](crate::operation::get_attachment::builders::GetAttachmentFluentBuilder::set_connection_token): <p>The authentication token associated with the participant's connection.</p>
    /// - On success, responds with [`GetAttachmentOutput`](crate::operation::get_attachment::GetAttachmentOutput) with field(s):
    ///   - [`url(Option<String>)`](crate::operation::get_attachment::GetAttachmentOutput::url): <p>This is the pre-signed URL that can be used for uploading the file to Amazon S3 when used in response to <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_StartAttachmentUpload.html">StartAttachmentUpload</a>.</p>
    ///   - [`url_expiry(Option<String>)`](crate::operation::get_attachment::GetAttachmentOutput::url_expiry): <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    /// - On failure, responds with [`SdkError<GetAttachmentError>`](crate::operation::get_attachment::GetAttachmentError)
    pub fn get_attachment(
        &self,
    ) -> crate::operation::get_attachment::builders::GetAttachmentFluentBuilder {
        crate::operation::get_attachment::builders::GetAttachmentFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
