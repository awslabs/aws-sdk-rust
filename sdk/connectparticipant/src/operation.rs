// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Allows you to confirm that the attachment has been uploaded using the pre-signed URL
/// provided in StartAttachmentUpload API. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteAttachmentUpload {
    _private: (),
}
impl CompleteAttachmentUpload {
    /// Creates a new builder-style object to manufacture [`CompleteAttachmentUploadInput`](crate::input::CompleteAttachmentUploadInput)
    pub fn builder() -> crate::input::complete_attachment_upload_input::Builder {
        crate::input::complete_attachment_upload_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CompleteAttachmentUpload {
    type Output = std::result::Result<
        crate::output::CompleteAttachmentUploadOutput,
        crate::error::CompleteAttachmentUploadError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_complete_attachment_upload_error(response)
        } else {
            crate::operation_deser::parse_complete_attachment_upload_response(response)
        }
    }
}

/// <p>Creates the participant's connection. Note that ParticipantToken is used for invoking
/// this API instead of ConnectionToken.</p>
/// <p>The participant token is valid for the lifetime of the participant â€“ until they are
/// part of a contact.</p>
/// <p>The response URL for <code>WEBSOCKET</code> Type has a connect expiry timeout of 100s.
/// Clients must manually connect to the returned websocket URL and subscribe to the desired
/// topic. </p>
/// <p>For chat, you need to publish the following on the established websocket
/// connection:</p>
/// <p>
/// <code>{"topic":"aws/subscribe","content":{"topics":["aws/chat"]}}</code>
/// </p>
/// <p>Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter,
/// clients need to call this API again to obtain a new websocket URL and perform the same
/// steps as before.</p>
/// <note>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
/// authentication</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateParticipantConnection {
    _private: (),
}
impl CreateParticipantConnection {
    /// Creates a new builder-style object to manufacture [`CreateParticipantConnectionInput`](crate::input::CreateParticipantConnectionInput)
    pub fn builder() -> crate::input::create_participant_connection_input::Builder {
        crate::input::create_participant_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateParticipantConnection {
    type Output = std::result::Result<
        crate::output::CreateParticipantConnectionOutput,
        crate::error::CreateParticipantConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_participant_connection_error(response)
        } else {
            crate::operation_deser::parse_create_participant_connection_response(response)
        }
    }
}

/// <p>Disconnects a participant. Note that ConnectionToken is used for invoking this API
/// instead of ParticipantToken.</p>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
/// authentication</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisconnectParticipant {
    _private: (),
}
impl DisconnectParticipant {
    /// Creates a new builder-style object to manufacture [`DisconnectParticipantInput`](crate::input::DisconnectParticipantInput)
    pub fn builder() -> crate::input::disconnect_participant_input::Builder {
        crate::input::disconnect_participant_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisconnectParticipant {
    type Output = std::result::Result<
        crate::output::DisconnectParticipantOutput,
        crate::error::DisconnectParticipantError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disconnect_participant_error(response)
        } else {
            crate::operation_deser::parse_disconnect_participant_response(response)
        }
    }
}

/// <p>Provides a pre-signed URL for download of a completed attachment. This is an
/// asynchronous API for use with active contacts.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAttachment {
    _private: (),
}
impl GetAttachment {
    /// Creates a new builder-style object to manufacture [`GetAttachmentInput`](crate::input::GetAttachmentInput)
    pub fn builder() -> crate::input::get_attachment_input::Builder {
        crate::input::get_attachment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAttachment {
    type Output =
        std::result::Result<crate::output::GetAttachmentOutput, crate::error::GetAttachmentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_attachment_error(response)
        } else {
            crate::operation_deser::parse_get_attachment_response(response)
        }
    }
}

/// <p>Retrieves a transcript of the session, including details about any attachments. Note
/// that ConnectionToken is used for invoking this API instead of ParticipantToken.</p>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
/// authentication</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTranscript {
    _private: (),
}
impl GetTranscript {
    /// Creates a new builder-style object to manufacture [`GetTranscriptInput`](crate::input::GetTranscriptInput)
    pub fn builder() -> crate::input::get_transcript_input::Builder {
        crate::input::get_transcript_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTranscript {
    type Output =
        std::result::Result<crate::output::GetTranscriptOutput, crate::error::GetTranscriptError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_transcript_error(response)
        } else {
            crate::operation_deser::parse_get_transcript_response(response)
        }
    }
}

/// <p>Sends an event. Note that ConnectionToken is used for invoking this API instead of
/// ParticipantToken.</p>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
/// authentication</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendEvent {
    _private: (),
}
impl SendEvent {
    /// Creates a new builder-style object to manufacture [`SendEventInput`](crate::input::SendEventInput)
    pub fn builder() -> crate::input::send_event_input::Builder {
        crate::input::send_event_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendEvent {
    type Output = std::result::Result<crate::output::SendEventOutput, crate::error::SendEventError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_event_error(response)
        } else {
            crate::operation_deser::parse_send_event_response(response)
        }
    }
}

/// <p>Sends a message. Note that ConnectionToken is used for invoking this API instead of
/// ParticipantToken.</p>
/// <note>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
/// authentication</a>.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendMessage {
    _private: (),
}
impl SendMessage {
    /// Creates a new builder-style object to manufacture [`SendMessageInput`](crate::input::SendMessageInput)
    pub fn builder() -> crate::input::send_message_input::Builder {
        crate::input::send_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendMessage {
    type Output =
        std::result::Result<crate::output::SendMessageOutput, crate::error::SendMessageError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_message_error(response)
        } else {
            crate::operation_deser::parse_send_message_response(response)
        }
    }
}

/// <p>Provides a pre-signed Amazon S3 URL in response for uploading the file directly to
/// S3.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartAttachmentUpload {
    _private: (),
}
impl StartAttachmentUpload {
    /// Creates a new builder-style object to manufacture [`StartAttachmentUploadInput`](crate::input::StartAttachmentUploadInput)
    pub fn builder() -> crate::input::start_attachment_upload_input::Builder {
        crate::input::start_attachment_upload_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartAttachmentUpload {
    type Output = std::result::Result<
        crate::output::StartAttachmentUploadOutput,
        crate::error::StartAttachmentUploadError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_attachment_upload_error(response)
        } else {
            crate::operation_deser::parse_start_attachment_upload_response(response)
        }
    }
}
