// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The case-insensitive input to indicate standard MIME type that describes the format of the file that will be uploaded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachmentItem {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p>A unique identifier for the attachment.</p>
    #[doc(hidden)]
    pub attachment_id: std::option::Option<std::string::String>,
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    #[doc(hidden)]
    pub attachment_name: std::option::Option<std::string::String>,
    /// <p>Status of the attachment.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ArtifactStatus>,
}
impl AttachmentItem {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>A unique identifier for the attachment.</p>
    pub fn attachment_id(&self) -> std::option::Option<&str> {
        self.attachment_id.as_deref()
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn attachment_name(&self) -> std::option::Option<&str> {
        self.attachment_name.as_deref()
    }
    /// <p>Status of the attachment.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ArtifactStatus> {
        self.status.as_ref()
    }
}
impl AttachmentItem {
    /// Creates a new builder-style object to manufacture [`AttachmentItem`](crate::types::AttachmentItem).
    pub fn builder() -> crate::types::builders::AttachmentItemBuilder {
        crate::types::builders::AttachmentItemBuilder::default()
    }
}

/// A builder for [`AttachmentItem`](crate::types::AttachmentItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AttachmentItemBuilder {
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) attachment_id: std::option::Option<std::string::String>,
    pub(crate) attachment_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ArtifactStatus>,
}
impl AttachmentItemBuilder {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>A unique identifier for the attachment.</p>
    pub fn attachment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.attachment_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the attachment.</p>
    pub fn set_attachment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attachment_id = input;
        self
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn attachment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attachment_name = Some(input.into());
        self
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn set_attachment_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attachment_name = input;
        self
    }
    /// <p>Status of the attachment.</p>
    pub fn status(mut self, input: crate::types::ArtifactStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of the attachment.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ArtifactStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`AttachmentItem`](crate::types::AttachmentItem).
    pub fn build(self) -> crate::types::AttachmentItem {
        crate::types::AttachmentItem {
            content_type: self.content_type,
            attachment_id: self.attachment_id,
            attachment_name: self.attachment_name,
            status: self.status,
        }
    }
}
