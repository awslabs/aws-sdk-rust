// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The websocket for the participant's connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Websocket {
    /// <p>The URL of the websocket.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    /// <p>The URL expiration timestamp in ISO date format.</p>
    /// <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    #[doc(hidden)]
    pub connection_expiry: std::option::Option<std::string::String>,
}
impl Websocket {
    /// <p>The URL of the websocket.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
    /// <p>The URL expiration timestamp in ISO date format.</p>
    /// <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn connection_expiry(&self) -> std::option::Option<&str> {
        self.connection_expiry.as_deref()
    }
}
impl Websocket {
    /// Creates a new builder-style object to manufacture [`Websocket`](crate::types::Websocket).
    pub fn builder() -> crate::types::builders::WebsocketBuilder {
        crate::types::builders::WebsocketBuilder::default()
    }
}

/// A builder for [`Websocket`](crate::types::Websocket).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WebsocketBuilder {
    pub(crate) url: std::option::Option<std::string::String>,
    pub(crate) connection_expiry: std::option::Option<std::string::String>,
}
impl WebsocketBuilder {
    /// <p>The URL of the websocket.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>The URL of the websocket.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// <p>The URL expiration timestamp in ISO date format.</p>
    /// <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn connection_expiry(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_expiry = Some(input.into());
        self
    }
    /// <p>The URL expiration timestamp in ISO date format.</p>
    /// <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
    pub fn set_connection_expiry(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connection_expiry = input;
        self
    }
    /// Consumes the builder and constructs a [`Websocket`](crate::types::Websocket).
    pub fn build(self) -> crate::types::Websocket {
        crate::types::Websocket {
            url: self.url,
            connection_expiry: self.connection_expiry,
        }
    }
}
