// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains metadata related to a message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MessageMetadata {
    /// <p>The identifier of the message that contains the metadata information. </p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    /// <p>The list of receipt information for a message for different recipients.</p>
    #[doc(hidden)]
    pub receipts: std::option::Option<std::vec::Vec<crate::types::Receipt>>,
}
impl MessageMetadata {
    /// <p>The identifier of the message that contains the metadata information. </p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The list of receipt information for a message for different recipients.</p>
    pub fn receipts(&self) -> std::option::Option<&[crate::types::Receipt]> {
        self.receipts.as_deref()
    }
}
impl MessageMetadata {
    /// Creates a new builder-style object to manufacture [`MessageMetadata`](crate::types::MessageMetadata).
    pub fn builder() -> crate::types::builders::MessageMetadataBuilder {
        crate::types::builders::MessageMetadataBuilder::default()
    }
}

/// A builder for [`MessageMetadata`](crate::types::MessageMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageMetadataBuilder {
    pub(crate) message_id: std::option::Option<std::string::String>,
    pub(crate) receipts: std::option::Option<std::vec::Vec<crate::types::Receipt>>,
}
impl MessageMetadataBuilder {
    /// <p>The identifier of the message that contains the metadata information. </p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The identifier of the message that contains the metadata information. </p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// Appends an item to `receipts`.
    ///
    /// To override the contents of this collection use [`set_receipts`](Self::set_receipts).
    ///
    /// <p>The list of receipt information for a message for different recipients.</p>
    pub fn receipts(mut self, input: crate::types::Receipt) -> Self {
        let mut v = self.receipts.unwrap_or_default();
        v.push(input);
        self.receipts = Some(v);
        self
    }
    /// <p>The list of receipt information for a message for different recipients.</p>
    pub fn set_receipts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Receipt>>,
    ) -> Self {
        self.receipts = input;
        self
    }
    /// Consumes the builder and constructs a [`MessageMetadata`](crate::types::MessageMetadata).
    pub fn build(self) -> crate::types::MessageMetadata {
        crate::types::MessageMetadata {
            message_id: self.message_id,
            receipts: self.receipts,
        }
    }
}
