// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ChatItemType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let chatitemtype = unimplemented!();
/// match chatitemtype {
///     ChatItemType::Attachment => { /* ... */ },
///     ChatItemType::ChatEnded => { /* ... */ },
///     ChatItemType::ConnectionAck => { /* ... */ },
///     ChatItemType::Event => { /* ... */ },
///     ChatItemType::Message => { /* ... */ },
///     ChatItemType::MessageDelivered => { /* ... */ },
///     ChatItemType::MessageRead => { /* ... */ },
///     ChatItemType::ParticipantJoined => { /* ... */ },
///     ChatItemType::ParticipantLeft => { /* ... */ },
///     ChatItemType::TransferFailed => { /* ... */ },
///     ChatItemType::TransferSucceeded => { /* ... */ },
///     ChatItemType::Typing => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `chatitemtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ChatItemType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ChatItemType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ChatItemType::NewFeature` is defined.
/// Specifically, when `chatitemtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ChatItemType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ChatItemType {
    #[allow(missing_docs)] // documentation missing in model
    Attachment,
    #[allow(missing_docs)] // documentation missing in model
    ChatEnded,
    #[allow(missing_docs)] // documentation missing in model
    ConnectionAck,
    #[allow(missing_docs)] // documentation missing in model
    Event,
    #[allow(missing_docs)] // documentation missing in model
    Message,
    #[allow(missing_docs)] // documentation missing in model
    MessageDelivered,
    #[allow(missing_docs)] // documentation missing in model
    MessageRead,
    #[allow(missing_docs)] // documentation missing in model
    ParticipantJoined,
    #[allow(missing_docs)] // documentation missing in model
    ParticipantLeft,
    #[allow(missing_docs)] // documentation missing in model
    TransferFailed,
    #[allow(missing_docs)] // documentation missing in model
    TransferSucceeded,
    #[allow(missing_docs)] // documentation missing in model
    Typing,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ChatItemType {
    fn from(s: &str) -> Self {
        match s {
            "ATTACHMENT" => ChatItemType::Attachment,
            "CHAT_ENDED" => ChatItemType::ChatEnded,
            "CONNECTION_ACK" => ChatItemType::ConnectionAck,
            "EVENT" => ChatItemType::Event,
            "MESSAGE" => ChatItemType::Message,
            "MESSAGE_DELIVERED" => ChatItemType::MessageDelivered,
            "MESSAGE_READ" => ChatItemType::MessageRead,
            "PARTICIPANT_JOINED" => ChatItemType::ParticipantJoined,
            "PARTICIPANT_LEFT" => ChatItemType::ParticipantLeft,
            "TRANSFER_FAILED" => ChatItemType::TransferFailed,
            "TRANSFER_SUCCEEDED" => ChatItemType::TransferSucceeded,
            "TYPING" => ChatItemType::Typing,
            other => {
                ChatItemType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ChatItemType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ChatItemType::from(s))
    }
}
impl ChatItemType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ChatItemType::Attachment => "ATTACHMENT",
            ChatItemType::ChatEnded => "CHAT_ENDED",
            ChatItemType::ConnectionAck => "CONNECTION_ACK",
            ChatItemType::Event => "EVENT",
            ChatItemType::Message => "MESSAGE",
            ChatItemType::MessageDelivered => "MESSAGE_DELIVERED",
            ChatItemType::MessageRead => "MESSAGE_READ",
            ChatItemType::ParticipantJoined => "PARTICIPANT_JOINED",
            ChatItemType::ParticipantLeft => "PARTICIPANT_LEFT",
            ChatItemType::TransferFailed => "TRANSFER_FAILED",
            ChatItemType::TransferSucceeded => "TRANSFER_SUCCEEDED",
            ChatItemType::Typing => "TYPING",
            ChatItemType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ATTACHMENT",
            "CHAT_ENDED",
            "CONNECTION_ACK",
            "EVENT",
            "MESSAGE",
            "MESSAGE_DELIVERED",
            "MESSAGE_READ",
            "PARTICIPANT_JOINED",
            "PARTICIPANT_LEFT",
            "TRANSFER_FAILED",
            "TRANSFER_SUCCEEDED",
            "TYPING",
        ]
    }
}
impl AsRef<str> for ChatItemType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
