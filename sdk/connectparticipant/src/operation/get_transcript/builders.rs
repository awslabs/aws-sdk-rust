// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_transcript::_get_transcript_output::GetTranscriptOutputBuilder;

pub use crate::operation::get_transcript::_get_transcript_input::GetTranscriptInputBuilder;

impl crate::operation::get_transcript::builders::GetTranscriptInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_transcript::GetTranscriptOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_transcript::GetTranscriptError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_transcript();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetTranscript`.
///
/// <p>Retrieves a transcript of the session, including details about any attachments. For information about accessing past chat contact transcripts for a persistent chat, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html">Enable persistent chat</a>.</p>
/// <p>If you have a process that consumes events in the transcript of an chat that has ended, note that chat transcripts contain the following event content types if the event has occurred during the chat session:</p>
/// <ul>
/// <li>
/// <p><code>application/vnd.amazonaws.connect.event.participant.left</code></p></li>
/// <li>
/// <p><code>application/vnd.amazonaws.connect.event.participant.joined</code></p></li>
/// <li>
/// <p><code>application/vnd.amazonaws.connect.event.chat.ended</code></p></li>
/// <li>
/// <p><code>application/vnd.amazonaws.connect.event.transfer.succeeded</code></p></li>
/// <li>
/// <p><code>application/vnd.amazonaws.connect.event.transfer.failed</code></p></li>
/// </ul><note>
/// <p><code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p>
/// </note>
/// <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 authentication</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetTranscriptFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_transcript::builders::GetTranscriptInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_transcript::GetTranscriptOutput,
        crate::operation::get_transcript::GetTranscriptError,
    > for GetTranscriptFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_transcript::GetTranscriptOutput,
            crate::operation::get_transcript::GetTranscriptError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetTranscriptFluentBuilder {
    /// Creates a new `GetTranscript`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetTranscript as a reference.
    pub fn as_input(&self) -> &crate::operation::get_transcript::builders::GetTranscriptInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_transcript::GetTranscriptOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_transcript::GetTranscriptError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_transcript::GetTranscript::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_transcript::GetTranscript::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_transcript::GetTranscriptOutput,
        crate::operation::get_transcript::GetTranscriptError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_transcript::paginator::GetTranscriptPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_transcript::paginator::GetTranscriptPaginator {
        crate::operation::get_transcript::paginator::GetTranscriptPaginator::new(self.handle, self.inner)
    }
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn contact_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.contact_id(input.into());
        self
    }
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn set_contact_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_contact_id(input);
        self
    }
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn get_contact_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_contact_id()
    }
    /// <p>The maximum number of results to return in the page. Default: 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the page. Default: 10.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return in the page. Default: 10.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition.</p>
    pub fn scan_direction(mut self, input: crate::types::ScanDirection) -> Self {
        self.inner = self.inner.scan_direction(input);
        self
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition.</p>
    pub fn set_scan_direction(mut self, input: ::std::option::Option<crate::types::ScanDirection>) -> Self {
        self.inner = self.inner.set_scan_direction(input);
        self
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition.</p>
    pub fn get_scan_direction(&self) -> &::std::option::Option<crate::types::ScanDirection> {
        self.inner.get_scan_direction()
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn sort_order(mut self, input: crate::types::SortKey) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortKey>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortKey> {
        self.inner.get_sort_order()
    }
    /// <p>A filtering option for where to start.</p>
    pub fn start_position(mut self, input: crate::types::StartPosition) -> Self {
        self.inner = self.inner.start_position(input);
        self
    }
    /// <p>A filtering option for where to start.</p>
    pub fn set_start_position(mut self, input: ::std::option::Option<crate::types::StartPosition>) -> Self {
        self.inner = self.inner.set_start_position(input);
        self
    }
    /// <p>A filtering option for where to start.</p>
    pub fn get_start_position(&self) -> &::std::option::Option<crate::types::StartPosition> {
        self.inner.get_start_position()
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.connection_token(input.into());
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn set_connection_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_connection_token(input);
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn get_connection_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_connection_token()
    }
}
