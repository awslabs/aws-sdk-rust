// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTranscriptInput {
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    #[doc(hidden)]
    pub contact_id: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return in the page. Default: 10. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. </p>
    #[doc(hidden)]
    pub scan_direction: std::option::Option<crate::types::ScanDirection>,
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortKey>,
    /// <p>A filtering option for where to start.</p>
    #[doc(hidden)]
    pub start_position: std::option::Option<crate::types::StartPosition>,
    /// <p>The authentication token associated with the participant's connection.</p>
    #[doc(hidden)]
    pub connection_token: std::option::Option<std::string::String>,
}
impl GetTranscriptInput {
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn contact_id(&self) -> std::option::Option<&str> {
        self.contact_id.as_deref()
    }
    /// <p>The maximum number of results to return in the page. Default: 10. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. </p>
    pub fn scan_direction(&self) -> std::option::Option<&crate::types::ScanDirection> {
        self.scan_direction.as_ref()
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortKey> {
        self.sort_order.as_ref()
    }
    /// <p>A filtering option for where to start.</p>
    pub fn start_position(&self) -> std::option::Option<&crate::types::StartPosition> {
        self.start_position.as_ref()
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(&self) -> std::option::Option<&str> {
        self.connection_token.as_deref()
    }
}
impl GetTranscriptInput {
    /// Creates a new builder-style object to manufacture [`GetTranscriptInput`](crate::operation::get_transcript::GetTranscriptInput).
    pub fn builder() -> crate::operation::get_transcript::builders::GetTranscriptInputBuilder {
        crate::operation::get_transcript::builders::GetTranscriptInputBuilder::default()
    }
}

/// A builder for [`GetTranscriptInput`](crate::operation::get_transcript::GetTranscriptInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTranscriptInputBuilder {
    pub(crate) contact_id: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) scan_direction: std::option::Option<crate::types::ScanDirection>,
    pub(crate) sort_order: std::option::Option<crate::types::SortKey>,
    pub(crate) start_position: std::option::Option<crate::types::StartPosition>,
    pub(crate) connection_token: std::option::Option<std::string::String>,
}
impl GetTranscriptInputBuilder {
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn contact_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_id = Some(input.into());
        self
    }
    /// <p>The contactId from the current contact chain for which transcript is needed.</p>
    pub fn set_contact_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_id = input;
        self
    }
    /// <p>The maximum number of results to return in the page. Default: 10. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return in the page. Default: 10. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. </p>
    pub fn scan_direction(mut self, input: crate::types::ScanDirection) -> Self {
        self.scan_direction = Some(input);
        self
    }
    /// <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. </p>
    pub fn set_scan_direction(
        mut self,
        input: std::option::Option<crate::types::ScanDirection>,
    ) -> Self {
        self.scan_direction = input;
        self
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn sort_order(mut self, input: crate::types::SortKey) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>The sort order for the records. Default: DESCENDING.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortKey>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>A filtering option for where to start.</p>
    pub fn start_position(mut self, input: crate::types::StartPosition) -> Self {
        self.start_position = Some(input);
        self
    }
    /// <p>A filtering option for where to start.</p>
    pub fn set_start_position(
        mut self,
        input: std::option::Option<crate::types::StartPosition>,
    ) -> Self {
        self.start_position = input;
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_token = Some(input.into());
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn set_connection_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTranscriptInput`](crate::operation::get_transcript::GetTranscriptInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_transcript::GetTranscriptInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_transcript::GetTranscriptInput {
            contact_id: self.contact_id,
            max_results: self.max_results,
            next_token: self.next_token,
            scan_direction: self.scan_direction,
            sort_order: self.sort_order,
            start_position: self.start_position,
            connection_token: self.connection_token,
        })
    }
}
