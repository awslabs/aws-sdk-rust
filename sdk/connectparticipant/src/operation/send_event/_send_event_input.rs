// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendEventInput {
    /// <p>The content type of the request. Supported types are:</p>
    /// <ul>
    /// <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.delivered</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.read</p> </li>
    /// </ul>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>The content of the event to be sent (for example, message text). For content related to message receipts, this is supported in the form of a JSON string.</p>
    /// <p>Sample Content: "{\"messageId\":\"11111111-aaaa-bbbb-cccc-EXAMPLE01234\"}"</p>
    pub content: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The authentication token associated with the participant's connection.</p>
    pub connection_token: ::std::option::Option<::std::string::String>,
}
impl SendEventInput {
    /// <p>The content type of the request. Supported types are:</p>
    /// <ul>
    /// <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.delivered</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.read</p> </li>
    /// </ul>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The content of the event to be sent (for example, message text). For content related to message receipts, this is supported in the form of a JSON string.</p>
    /// <p>Sample Content: "{\"messageId\":\"11111111-aaaa-bbbb-cccc-EXAMPLE01234\"}"</p>
    pub fn content(&self) -> ::std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(&self) -> ::std::option::Option<&str> {
        self.connection_token.as_deref()
    }
}
impl SendEventInput {
    /// Creates a new builder-style object to manufacture [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn builder() -> crate::operation::send_event::builders::SendEventInputBuilder {
        crate::operation::send_event::builders::SendEventInputBuilder::default()
    }
}

/// A builder for [`SendEventInput`](crate::operation::send_event::SendEventInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendEventInputBuilder {
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) content: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) connection_token: ::std::option::Option<::std::string::String>,
}
impl SendEventInputBuilder {
    /// <p>The content type of the request. Supported types are:</p>
    /// <ul>
    /// <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.delivered</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.read</p> </li>
    /// </ul>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content type of the request. Supported types are:</p>
    /// <ul>
    /// <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.delivered</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.read</p> </li>
    /// </ul>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The content type of the request. Supported types are:</p>
    /// <ul>
    /// <li> <p>application/vnd.amazonaws.connect.event.typing</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.delivered</p> </li>
    /// <li> <p>application/vnd.amazonaws.connect.event.message.read</p> </li>
    /// </ul>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The content of the event to be sent (for example, message text). For content related to message receipts, this is supported in the form of a JSON string.</p>
    /// <p>Sample Content: "{\"messageId\":\"11111111-aaaa-bbbb-cccc-EXAMPLE01234\"}"</p>
    pub fn content(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the event to be sent (for example, message text). For content related to message receipts, this is supported in the form of a JSON string.</p>
    /// <p>Sample Content: "{\"messageId\":\"11111111-aaaa-bbbb-cccc-EXAMPLE01234\"}"</p>
    pub fn set_content(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The content of the event to be sent (for example, message text). For content related to message receipts, this is supported in the form of a JSON string.</p>
    /// <p>Sample Content: "{\"messageId\":\"11111111-aaaa-bbbb-cccc-EXAMPLE01234\"}"</p>
    pub fn get_content(&self) -> &::std::option::Option<::std::string::String> {
        &self.content
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    /// This field is required.
    pub fn connection_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn set_connection_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_token = input;
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn get_connection_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_token
    }
    /// Consumes the builder and constructs a [`SendEventInput`](crate::operation::send_event::SendEventInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::send_event::SendEventInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::send_event::SendEventInput {
            content_type: self.content_type,
            content: self.content,
            client_token: self.client_token,
            connection_token: self.connection_token,
        })
    }
}
