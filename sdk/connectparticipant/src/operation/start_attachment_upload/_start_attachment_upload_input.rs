// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartAttachmentUploadInput {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub content_type: ::std::option::Option<::std::string::String>,
    /// <p>The size of the attachment in bytes.</p>
    pub attachment_size_in_bytes: ::std::option::Option<i64>,
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub attachment_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The authentication token associated with the participant's connection.</p>
    pub connection_token: ::std::option::Option<::std::string::String>,
}
impl StartAttachmentUploadInput {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn content_type(&self) -> ::std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p>The size of the attachment in bytes.</p>
    pub fn attachment_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.attachment_size_in_bytes
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn attachment_name(&self) -> ::std::option::Option<&str> {
        self.attachment_name.as_deref()
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn connection_token(&self) -> ::std::option::Option<&str> {
        self.connection_token.as_deref()
    }
}
impl StartAttachmentUploadInput {
    /// Creates a new builder-style object to manufacture [`StartAttachmentUploadInput`](crate::operation::start_attachment_upload::StartAttachmentUploadInput).
    pub fn builder() -> crate::operation::start_attachment_upload::builders::StartAttachmentUploadInputBuilder {
        crate::operation::start_attachment_upload::builders::StartAttachmentUploadInputBuilder::default()
    }
}

/// A builder for [`StartAttachmentUploadInput`](crate::operation::start_attachment_upload::StartAttachmentUploadInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartAttachmentUploadInputBuilder {
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) attachment_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) attachment_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) connection_token: ::std::option::Option<::std::string::String>,
}
impl StartAttachmentUploadInputBuilder {
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The size of the attachment in bytes.</p>
    /// This field is required.
    pub fn attachment_size_in_bytes(mut self, input: i64) -> Self {
        self.attachment_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the attachment in bytes.</p>
    pub fn set_attachment_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.attachment_size_in_bytes = input;
        self
    }
    /// <p>The size of the attachment in bytes.</p>
    pub fn get_attachment_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.attachment_size_in_bytes
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    /// This field is required.
    pub fn attachment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attachment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn set_attachment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attachment_name = input;
        self
    }
    /// <p>A case-sensitive name of the attachment being uploaded.</p>
    pub fn get_attachment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.attachment_name
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href="https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/">Making retries safe with idempotent APIs</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    /// This field is required.
    pub fn connection_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn set_connection_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_token = input;
        self
    }
    /// <p>The authentication token associated with the participant's connection.</p>
    pub fn get_connection_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_token
    }
    /// Consumes the builder and constructs a [`StartAttachmentUploadInput`](crate::operation::start_attachment_upload::StartAttachmentUploadInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_attachment_upload::StartAttachmentUploadInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_attachment_upload::StartAttachmentUploadInput {
            content_type: self.content_type,
            attachment_size_in_bytes: self.attachment_size_in_bytes,
            attachment_name: self.attachment_name,
            client_token: self.client_token,
            connection_token: self.connection_token,
        })
    }
}
