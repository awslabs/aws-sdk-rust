// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_route_ferry_leg_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::RouteFerryLegDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RouteFerryLegDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AfterTravelSteps" => {
                            builder = builder.set_after_travel_steps(
                                crate::protocol_serde::shape_route_ferry_after_travel_step_list::de_route_ferry_after_travel_step_list(tokens)?,
                            );
                        }
                        "Arrival" => {
                            builder = builder.set_arrival(crate::protocol_serde::shape_route_ferry_arrival::de_route_ferry_arrival(tokens)?);
                        }
                        "BeforeTravelSteps" => {
                            builder = builder.set_before_travel_steps(
                                crate::protocol_serde::shape_route_ferry_before_travel_step_list::de_route_ferry_before_travel_step_list(tokens)?,
                            );
                        }
                        "Departure" => {
                            builder = builder.set_departure(crate::protocol_serde::shape_route_ferry_departure::de_route_ferry_departure(tokens)?);
                        }
                        "Notices" => {
                            builder = builder.set_notices(crate::protocol_serde::shape_route_ferry_notice_list::de_route_ferry_notice_list(tokens)?);
                        }
                        "PassThroughWaypoints" => {
                            builder = builder.set_pass_through_waypoints(
                                crate::protocol_serde::shape_route_pass_through_waypoint_list::de_route_pass_through_waypoint_list(tokens)?,
                            );
                        }
                        "RouteName" => {
                            builder = builder.set_route_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Spans" => {
                            builder = builder.set_spans(crate::protocol_serde::shape_route_ferry_span_list::de_route_ferry_span_list(tokens)?);
                        }
                        "Summary" => {
                            builder = builder.set_summary(crate::protocol_serde::shape_route_ferry_summary::de_route_ferry_summary(tokens)?);
                        }
                        "TravelSteps" => {
                            builder = builder.set_travel_steps(
                                crate::protocol_serde::shape_route_ferry_travel_step_list::de_route_ferry_travel_step_list(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::route_ferry_leg_details_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
