// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_route_matrix_boundary_geometry<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::RouteMatrixBoundaryGeometry>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RouteMatrixBoundaryGeometryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "AutoCircle" => {
                            builder = builder.set_auto_circle(crate::protocol_serde::shape_route_matrix_auto_circle::de_route_matrix_auto_circle(
                                tokens,
                            )?);
                        }
                        "Circle" => {
                            builder = builder.set_circle(crate::protocol_serde::shape_circle::de_circle(tokens)?);
                        }
                        "BoundingBox" => {
                            builder = builder.set_bounding_box(crate::protocol_serde::shape_bounding_box::de_bounding_box(tokens)?);
                        }
                        "Polygon" => {
                            builder = builder.set_polygon(crate::protocol_serde::shape_linear_rings::de_linear_rings(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_route_matrix_boundary_geometry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RouteMatrixBoundaryGeometry,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auto_circle {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AutoCircle").start_object();
        crate::protocol_serde::shape_route_matrix_auto_circle::ser_route_matrix_auto_circle(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.circle {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Circle").start_object();
        crate::protocol_serde::shape_circle::ser_circle(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.bounding_box {
        let mut array_6 = object.key("BoundingBox").start_array();
        for item_7 in var_5 {
            {
                array_6.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::Float((*item_7).into()),
                );
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.polygon {
        let mut array_9 = object.key("Polygon").start_array();
        for item_10 in var_8 {
            {
                let mut array_11 = array_9.value().start_array();
                for item_12 in item_10 {
                    {
                        let mut array_13 = array_11.value().start_array();
                        for item_14 in item_12 {
                            {
                                array_13.value().number(
                                    #[allow(clippy::useless_conversion)]
                                    ::aws_smithy_types::Number::Float((*item_14).into()),
                                );
                            }
                        }
                        array_13.finish();
                    }
                }
                array_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
