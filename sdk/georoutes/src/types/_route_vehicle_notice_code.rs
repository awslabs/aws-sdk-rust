// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RouteVehicleNoticeCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let routevehiclenoticecode = unimplemented!();
/// match routevehiclenoticecode {
///     RouteVehicleNoticeCode::AccuratePolylineUnavailable => { /* ... */ },
///     RouteVehicleNoticeCode::Other => { /* ... */ },
///     RouteVehicleNoticeCode::PotentialViolatedAvoidTollRoadUsage => { /* ... */ },
///     RouteVehicleNoticeCode::PotentialViolatedCarpoolUsage => { /* ... */ },
///     RouteVehicleNoticeCode::PotentialViolatedTurnRestrictionUsage => { /* ... */ },
///     RouteVehicleNoticeCode::PotentialViolatedVehicleRestrictionUsage => { /* ... */ },
///     RouteVehicleNoticeCode::PotentialViolatedZoneRestrictionUsage => { /* ... */ },
///     RouteVehicleNoticeCode::SeasonalClosure => { /* ... */ },
///     RouteVehicleNoticeCode::TollTransponder => { /* ... */ },
///     RouteVehicleNoticeCode::TollsDataTemporarilyUnavailable => { /* ... */ },
///     RouteVehicleNoticeCode::TollsDataUnavailable => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidControlledAccessHighway => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidDifficultTurns => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidDirtRoad => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidSeasonalClosure => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidTollRoad => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidTollTransponder => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidTruckRoadType => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidTunnel => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedAvoidUTurns => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedBlockedRoad => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedCarpool => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedEmergencyGate => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedStartDirection => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedTurnRestriction => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedVehicleRestriction => { /* ... */ },
///     RouteVehicleNoticeCode::ViolatedZoneRestriction => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `routevehiclenoticecode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RouteVehicleNoticeCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RouteVehicleNoticeCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RouteVehicleNoticeCode::NewFeature` is defined.
/// Specifically, when `routevehiclenoticecode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RouteVehicleNoticeCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum RouteVehicleNoticeCode {
    #[allow(missing_docs)] // documentation missing in model
    AccuratePolylineUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    PotentialViolatedAvoidTollRoadUsage,
    #[allow(missing_docs)] // documentation missing in model
    PotentialViolatedCarpoolUsage,
    #[allow(missing_docs)] // documentation missing in model
    PotentialViolatedTurnRestrictionUsage,
    #[allow(missing_docs)] // documentation missing in model
    PotentialViolatedVehicleRestrictionUsage,
    #[allow(missing_docs)] // documentation missing in model
    PotentialViolatedZoneRestrictionUsage,
    #[allow(missing_docs)] // documentation missing in model
    SeasonalClosure,
    #[allow(missing_docs)] // documentation missing in model
    TollTransponder,
    #[allow(missing_docs)] // documentation missing in model
    TollsDataTemporarilyUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    TollsDataUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidControlledAccessHighway,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidDifficultTurns,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidDirtRoad,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidSeasonalClosure,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidTollRoad,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidTollTransponder,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidTruckRoadType,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidTunnel,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedAvoidUTurns,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedBlockedRoad,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedCarpool,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedEmergencyGate,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedStartDirection,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedTurnRestriction,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedVehicleRestriction,
    #[allow(missing_docs)] // documentation missing in model
    ViolatedZoneRestriction,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RouteVehicleNoticeCode {
    fn from(s: &str) -> Self {
        match s {
            "AccuratePolylineUnavailable" => RouteVehicleNoticeCode::AccuratePolylineUnavailable,
            "Other" => RouteVehicleNoticeCode::Other,
            "PotentialViolatedAvoidTollRoadUsage" => RouteVehicleNoticeCode::PotentialViolatedAvoidTollRoadUsage,
            "PotentialViolatedCarpoolUsage" => RouteVehicleNoticeCode::PotentialViolatedCarpoolUsage,
            "PotentialViolatedTurnRestrictionUsage" => RouteVehicleNoticeCode::PotentialViolatedTurnRestrictionUsage,
            "PotentialViolatedVehicleRestrictionUsage" => RouteVehicleNoticeCode::PotentialViolatedVehicleRestrictionUsage,
            "PotentialViolatedZoneRestrictionUsage" => RouteVehicleNoticeCode::PotentialViolatedZoneRestrictionUsage,
            "SeasonalClosure" => RouteVehicleNoticeCode::SeasonalClosure,
            "TollTransponder" => RouteVehicleNoticeCode::TollTransponder,
            "TollsDataTemporarilyUnavailable" => RouteVehicleNoticeCode::TollsDataTemporarilyUnavailable,
            "TollsDataUnavailable" => RouteVehicleNoticeCode::TollsDataUnavailable,
            "ViolatedAvoidControlledAccessHighway" => RouteVehicleNoticeCode::ViolatedAvoidControlledAccessHighway,
            "ViolatedAvoidDifficultTurns" => RouteVehicleNoticeCode::ViolatedAvoidDifficultTurns,
            "ViolatedAvoidDirtRoad" => RouteVehicleNoticeCode::ViolatedAvoidDirtRoad,
            "ViolatedAvoidSeasonalClosure" => RouteVehicleNoticeCode::ViolatedAvoidSeasonalClosure,
            "ViolatedAvoidTollRoad" => RouteVehicleNoticeCode::ViolatedAvoidTollRoad,
            "ViolatedAvoidTollTransponder" => RouteVehicleNoticeCode::ViolatedAvoidTollTransponder,
            "ViolatedAvoidTruckRoadType" => RouteVehicleNoticeCode::ViolatedAvoidTruckRoadType,
            "ViolatedAvoidTunnel" => RouteVehicleNoticeCode::ViolatedAvoidTunnel,
            "ViolatedAvoidUTurns" => RouteVehicleNoticeCode::ViolatedAvoidUTurns,
            "ViolatedBlockedRoad" => RouteVehicleNoticeCode::ViolatedBlockedRoad,
            "ViolatedCarpool" => RouteVehicleNoticeCode::ViolatedCarpool,
            "ViolatedEmergencyGate" => RouteVehicleNoticeCode::ViolatedEmergencyGate,
            "ViolatedStartDirection" => RouteVehicleNoticeCode::ViolatedStartDirection,
            "ViolatedTurnRestriction" => RouteVehicleNoticeCode::ViolatedTurnRestriction,
            "ViolatedVehicleRestriction" => RouteVehicleNoticeCode::ViolatedVehicleRestriction,
            "ViolatedZoneRestriction" => RouteVehicleNoticeCode::ViolatedZoneRestriction,
            other => RouteVehicleNoticeCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RouteVehicleNoticeCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RouteVehicleNoticeCode::from(s))
    }
}
impl RouteVehicleNoticeCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RouteVehicleNoticeCode::AccuratePolylineUnavailable => "AccuratePolylineUnavailable",
            RouteVehicleNoticeCode::Other => "Other",
            RouteVehicleNoticeCode::PotentialViolatedAvoidTollRoadUsage => "PotentialViolatedAvoidTollRoadUsage",
            RouteVehicleNoticeCode::PotentialViolatedCarpoolUsage => "PotentialViolatedCarpoolUsage",
            RouteVehicleNoticeCode::PotentialViolatedTurnRestrictionUsage => "PotentialViolatedTurnRestrictionUsage",
            RouteVehicleNoticeCode::PotentialViolatedVehicleRestrictionUsage => "PotentialViolatedVehicleRestrictionUsage",
            RouteVehicleNoticeCode::PotentialViolatedZoneRestrictionUsage => "PotentialViolatedZoneRestrictionUsage",
            RouteVehicleNoticeCode::SeasonalClosure => "SeasonalClosure",
            RouteVehicleNoticeCode::TollTransponder => "TollTransponder",
            RouteVehicleNoticeCode::TollsDataTemporarilyUnavailable => "TollsDataTemporarilyUnavailable",
            RouteVehicleNoticeCode::TollsDataUnavailable => "TollsDataUnavailable",
            RouteVehicleNoticeCode::ViolatedAvoidControlledAccessHighway => "ViolatedAvoidControlledAccessHighway",
            RouteVehicleNoticeCode::ViolatedAvoidDifficultTurns => "ViolatedAvoidDifficultTurns",
            RouteVehicleNoticeCode::ViolatedAvoidDirtRoad => "ViolatedAvoidDirtRoad",
            RouteVehicleNoticeCode::ViolatedAvoidSeasonalClosure => "ViolatedAvoidSeasonalClosure",
            RouteVehicleNoticeCode::ViolatedAvoidTollRoad => "ViolatedAvoidTollRoad",
            RouteVehicleNoticeCode::ViolatedAvoidTollTransponder => "ViolatedAvoidTollTransponder",
            RouteVehicleNoticeCode::ViolatedAvoidTruckRoadType => "ViolatedAvoidTruckRoadType",
            RouteVehicleNoticeCode::ViolatedAvoidTunnel => "ViolatedAvoidTunnel",
            RouteVehicleNoticeCode::ViolatedAvoidUTurns => "ViolatedAvoidUTurns",
            RouteVehicleNoticeCode::ViolatedBlockedRoad => "ViolatedBlockedRoad",
            RouteVehicleNoticeCode::ViolatedCarpool => "ViolatedCarpool",
            RouteVehicleNoticeCode::ViolatedEmergencyGate => "ViolatedEmergencyGate",
            RouteVehicleNoticeCode::ViolatedStartDirection => "ViolatedStartDirection",
            RouteVehicleNoticeCode::ViolatedTurnRestriction => "ViolatedTurnRestriction",
            RouteVehicleNoticeCode::ViolatedVehicleRestriction => "ViolatedVehicleRestriction",
            RouteVehicleNoticeCode::ViolatedZoneRestriction => "ViolatedZoneRestriction",
            RouteVehicleNoticeCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AccuratePolylineUnavailable",
            "Other",
            "PotentialViolatedAvoidTollRoadUsage",
            "PotentialViolatedCarpoolUsage",
            "PotentialViolatedTurnRestrictionUsage",
            "PotentialViolatedVehicleRestrictionUsage",
            "PotentialViolatedZoneRestrictionUsage",
            "SeasonalClosure",
            "TollTransponder",
            "TollsDataTemporarilyUnavailable",
            "TollsDataUnavailable",
            "ViolatedAvoidControlledAccessHighway",
            "ViolatedAvoidDifficultTurns",
            "ViolatedAvoidDirtRoad",
            "ViolatedAvoidSeasonalClosure",
            "ViolatedAvoidTollRoad",
            "ViolatedAvoidTollTransponder",
            "ViolatedAvoidTruckRoadType",
            "ViolatedAvoidTunnel",
            "ViolatedAvoidUTurns",
            "ViolatedBlockedRoad",
            "ViolatedCarpool",
            "ViolatedEmergencyGate",
            "ViolatedStartDirection",
            "ViolatedTurnRestriction",
            "ViolatedVehicleRestriction",
            "ViolatedZoneRestriction",
        ]
    }
}
impl ::std::convert::AsRef<str> for RouteVehicleNoticeCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RouteVehicleNoticeCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RouteVehicleNoticeCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RouteVehicleNoticeCode::AccuratePolylineUnavailable => write!(f, "AccuratePolylineUnavailable"),
            RouteVehicleNoticeCode::Other => write!(f, "Other"),
            RouteVehicleNoticeCode::PotentialViolatedAvoidTollRoadUsage => write!(f, "PotentialViolatedAvoidTollRoadUsage"),
            RouteVehicleNoticeCode::PotentialViolatedCarpoolUsage => write!(f, "PotentialViolatedCarpoolUsage"),
            RouteVehicleNoticeCode::PotentialViolatedTurnRestrictionUsage => write!(f, "PotentialViolatedTurnRestrictionUsage"),
            RouteVehicleNoticeCode::PotentialViolatedVehicleRestrictionUsage => write!(f, "PotentialViolatedVehicleRestrictionUsage"),
            RouteVehicleNoticeCode::PotentialViolatedZoneRestrictionUsage => write!(f, "PotentialViolatedZoneRestrictionUsage"),
            RouteVehicleNoticeCode::SeasonalClosure => write!(f, "SeasonalClosure"),
            RouteVehicleNoticeCode::TollTransponder => write!(f, "TollTransponder"),
            RouteVehicleNoticeCode::TollsDataTemporarilyUnavailable => write!(f, "TollsDataTemporarilyUnavailable"),
            RouteVehicleNoticeCode::TollsDataUnavailable => write!(f, "TollsDataUnavailable"),
            RouteVehicleNoticeCode::ViolatedAvoidControlledAccessHighway => write!(f, "ViolatedAvoidControlledAccessHighway"),
            RouteVehicleNoticeCode::ViolatedAvoidDifficultTurns => write!(f, "ViolatedAvoidDifficultTurns"),
            RouteVehicleNoticeCode::ViolatedAvoidDirtRoad => write!(f, "ViolatedAvoidDirtRoad"),
            RouteVehicleNoticeCode::ViolatedAvoidSeasonalClosure => write!(f, "ViolatedAvoidSeasonalClosure"),
            RouteVehicleNoticeCode::ViolatedAvoidTollRoad => write!(f, "ViolatedAvoidTollRoad"),
            RouteVehicleNoticeCode::ViolatedAvoidTollTransponder => write!(f, "ViolatedAvoidTollTransponder"),
            RouteVehicleNoticeCode::ViolatedAvoidTruckRoadType => write!(f, "ViolatedAvoidTruckRoadType"),
            RouteVehicleNoticeCode::ViolatedAvoidTunnel => write!(f, "ViolatedAvoidTunnel"),
            RouteVehicleNoticeCode::ViolatedAvoidUTurns => write!(f, "ViolatedAvoidUTurns"),
            RouteVehicleNoticeCode::ViolatedBlockedRoad => write!(f, "ViolatedBlockedRoad"),
            RouteVehicleNoticeCode::ViolatedCarpool => write!(f, "ViolatedCarpool"),
            RouteVehicleNoticeCode::ViolatedEmergencyGate => write!(f, "ViolatedEmergencyGate"),
            RouteVehicleNoticeCode::ViolatedStartDirection => write!(f, "ViolatedStartDirection"),
            RouteVehicleNoticeCode::ViolatedTurnRestriction => write!(f, "ViolatedTurnRestriction"),
            RouteVehicleNoticeCode::ViolatedVehicleRestriction => write!(f, "ViolatedVehicleRestriction"),
            RouteVehicleNoticeCode::ViolatedZoneRestriction => write!(f, "ViolatedZoneRestriction"),
            RouteVehicleNoticeCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
