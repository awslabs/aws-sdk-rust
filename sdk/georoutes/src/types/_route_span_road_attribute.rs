// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RouteSpanRoadAttribute`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let routespanroadattribute = unimplemented!();
/// match routespanroadattribute {
///     RouteSpanRoadAttribute::Bridge => { /* ... */ },
///     RouteSpanRoadAttribute::BuiltUpArea => { /* ... */ },
///     RouteSpanRoadAttribute::ControlledAccessHighway => { /* ... */ },
///     RouteSpanRoadAttribute::DirtRoad => { /* ... */ },
///     RouteSpanRoadAttribute::DividedRoad => { /* ... */ },
///     RouteSpanRoadAttribute::Motorway => { /* ... */ },
///     RouteSpanRoadAttribute::PrivateRoad => { /* ... */ },
///     RouteSpanRoadAttribute::Ramp => { /* ... */ },
///     RouteSpanRoadAttribute::RightHandTraffic => { /* ... */ },
///     RouteSpanRoadAttribute::Roundabout => { /* ... */ },
///     RouteSpanRoadAttribute::Tunnel => { /* ... */ },
///     RouteSpanRoadAttribute::UnderConstruction => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `routespanroadattribute` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RouteSpanRoadAttribute::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RouteSpanRoadAttribute::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RouteSpanRoadAttribute::NewFeature` is defined.
/// Specifically, when `routespanroadattribute` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RouteSpanRoadAttribute::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::hash::Hash)]
pub enum RouteSpanRoadAttribute {
    #[allow(missing_docs)] // documentation missing in model
    Bridge,
    #[allow(missing_docs)] // documentation missing in model
    BuiltUpArea,
    #[allow(missing_docs)] // documentation missing in model
    ControlledAccessHighway,
    #[allow(missing_docs)] // documentation missing in model
    DirtRoad,
    #[allow(missing_docs)] // documentation missing in model
    DividedRoad,
    #[allow(missing_docs)] // documentation missing in model
    Motorway,
    #[allow(missing_docs)] // documentation missing in model
    PrivateRoad,
    #[allow(missing_docs)] // documentation missing in model
    Ramp,
    #[allow(missing_docs)] // documentation missing in model
    RightHandTraffic,
    #[allow(missing_docs)] // documentation missing in model
    Roundabout,
    #[allow(missing_docs)] // documentation missing in model
    Tunnel,
    #[allow(missing_docs)] // documentation missing in model
    UnderConstruction,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RouteSpanRoadAttribute {
    fn from(s: &str) -> Self {
        match s {
            "Bridge" => RouteSpanRoadAttribute::Bridge,
            "BuiltUpArea" => RouteSpanRoadAttribute::BuiltUpArea,
            "ControlledAccessHighway" => RouteSpanRoadAttribute::ControlledAccessHighway,
            "DirtRoad" => RouteSpanRoadAttribute::DirtRoad,
            "DividedRoad" => RouteSpanRoadAttribute::DividedRoad,
            "Motorway" => RouteSpanRoadAttribute::Motorway,
            "PrivateRoad" => RouteSpanRoadAttribute::PrivateRoad,
            "Ramp" => RouteSpanRoadAttribute::Ramp,
            "RightHandTraffic" => RouteSpanRoadAttribute::RightHandTraffic,
            "Roundabout" => RouteSpanRoadAttribute::Roundabout,
            "Tunnel" => RouteSpanRoadAttribute::Tunnel,
            "UnderConstruction" => RouteSpanRoadAttribute::UnderConstruction,
            other => RouteSpanRoadAttribute::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RouteSpanRoadAttribute {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RouteSpanRoadAttribute::from(s))
    }
}
impl RouteSpanRoadAttribute {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RouteSpanRoadAttribute::Bridge => "Bridge",
            RouteSpanRoadAttribute::BuiltUpArea => "BuiltUpArea",
            RouteSpanRoadAttribute::ControlledAccessHighway => "ControlledAccessHighway",
            RouteSpanRoadAttribute::DirtRoad => "DirtRoad",
            RouteSpanRoadAttribute::DividedRoad => "DividedRoad",
            RouteSpanRoadAttribute::Motorway => "Motorway",
            RouteSpanRoadAttribute::PrivateRoad => "PrivateRoad",
            RouteSpanRoadAttribute::Ramp => "Ramp",
            RouteSpanRoadAttribute::RightHandTraffic => "RightHandTraffic",
            RouteSpanRoadAttribute::Roundabout => "Roundabout",
            RouteSpanRoadAttribute::Tunnel => "Tunnel",
            RouteSpanRoadAttribute::UnderConstruction => "UnderConstruction",
            RouteSpanRoadAttribute::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Bridge",
            "BuiltUpArea",
            "ControlledAccessHighway",
            "DirtRoad",
            "DividedRoad",
            "Motorway",
            "PrivateRoad",
            "Ramp",
            "RightHandTraffic",
            "Roundabout",
            "Tunnel",
            "UnderConstruction",
        ]
    }
}
impl ::std::convert::AsRef<str> for RouteSpanRoadAttribute {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RouteSpanRoadAttribute {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RouteSpanRoadAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RouteSpanRoadAttribute::Bridge => write!(f, "Bridge"),
            RouteSpanRoadAttribute::BuiltUpArea => write!(f, "BuiltUpArea"),
            RouteSpanRoadAttribute::ControlledAccessHighway => write!(f, "ControlledAccessHighway"),
            RouteSpanRoadAttribute::DirtRoad => write!(f, "DirtRoad"),
            RouteSpanRoadAttribute::DividedRoad => write!(f, "DividedRoad"),
            RouteSpanRoadAttribute::Motorway => write!(f, "Motorway"),
            RouteSpanRoadAttribute::PrivateRoad => write!(f, "PrivateRoad"),
            RouteSpanRoadAttribute::Ramp => write!(f, "Ramp"),
            RouteSpanRoadAttribute::RightHandTraffic => write!(f, "RightHandTraffic"),
            RouteSpanRoadAttribute::Roundabout => write!(f, "Roundabout"),
            RouteSpanRoadAttribute::Tunnel => write!(f, "Tunnel"),
            RouteSpanRoadAttribute::UnderConstruction => write!(f, "UnderConstruction"),
            RouteSpanRoadAttribute::Unknown(value) => write!(f, "{value}"),
        }
    }
}
impl ::std::fmt::Debug for RouteSpanRoadAttribute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
