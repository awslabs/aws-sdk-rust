// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RouteSpanAdditionalFeature`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let routespanadditionalfeature = unimplemented!();
/// match routespanadditionalfeature {
///     RouteSpanAdditionalFeature::BestCaseDuration => { /* ... */ },
///     RouteSpanAdditionalFeature::CarAccess => { /* ... */ },
///     RouteSpanAdditionalFeature::Consumption => { /* ... */ },
///     RouteSpanAdditionalFeature::Country => { /* ... */ },
///     RouteSpanAdditionalFeature::Distance => { /* ... */ },
///     RouteSpanAdditionalFeature::Duration => { /* ... */ },
///     RouteSpanAdditionalFeature::DynamicSpeed => { /* ... */ },
///     RouteSpanAdditionalFeature::FunctionalClassification => { /* ... */ },
///     RouteSpanAdditionalFeature::Gates => { /* ... */ },
///     RouteSpanAdditionalFeature::Incidents => { /* ... */ },
///     RouteSpanAdditionalFeature::Names => { /* ... */ },
///     RouteSpanAdditionalFeature::Notices => { /* ... */ },
///     RouteSpanAdditionalFeature::PedestrianAccess => { /* ... */ },
///     RouteSpanAdditionalFeature::RailwayCrossings => { /* ... */ },
///     RouteSpanAdditionalFeature::Region => { /* ... */ },
///     RouteSpanAdditionalFeature::RoadAttributes => { /* ... */ },
///     RouteSpanAdditionalFeature::RouteNumbers => { /* ... */ },
///     RouteSpanAdditionalFeature::ScooterAccess => { /* ... */ },
///     RouteSpanAdditionalFeature::SpeedLimit => { /* ... */ },
///     RouteSpanAdditionalFeature::TollSystems => { /* ... */ },
///     RouteSpanAdditionalFeature::TruckAccess => { /* ... */ },
///     RouteSpanAdditionalFeature::TruckRoadTypes => { /* ... */ },
///     RouteSpanAdditionalFeature::TypicalDuration => { /* ... */ },
///     RouteSpanAdditionalFeature::Zones => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `routespanadditionalfeature` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RouteSpanAdditionalFeature::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RouteSpanAdditionalFeature::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RouteSpanAdditionalFeature::NewFeature` is defined.
/// Specifically, when `routespanadditionalfeature` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RouteSpanAdditionalFeature::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum RouteSpanAdditionalFeature {
    #[allow(missing_docs)] // documentation missing in model
    BestCaseDuration,
    #[allow(missing_docs)] // documentation missing in model
    CarAccess,
    #[allow(missing_docs)] // documentation missing in model
    Consumption,
    #[allow(missing_docs)] // documentation missing in model
    Country,
    #[allow(missing_docs)] // documentation missing in model
    Distance,
    #[allow(missing_docs)] // documentation missing in model
    Duration,
    #[allow(missing_docs)] // documentation missing in model
    DynamicSpeed,
    #[allow(missing_docs)] // documentation missing in model
    FunctionalClassification,
    #[allow(missing_docs)] // documentation missing in model
    Gates,
    #[allow(missing_docs)] // documentation missing in model
    Incidents,
    #[allow(missing_docs)] // documentation missing in model
    Names,
    #[allow(missing_docs)] // documentation missing in model
    Notices,
    #[allow(missing_docs)] // documentation missing in model
    PedestrianAccess,
    #[allow(missing_docs)] // documentation missing in model
    RailwayCrossings,
    #[allow(missing_docs)] // documentation missing in model
    Region,
    #[allow(missing_docs)] // documentation missing in model
    RoadAttributes,
    #[allow(missing_docs)] // documentation missing in model
    RouteNumbers,
    #[allow(missing_docs)] // documentation missing in model
    ScooterAccess,
    #[allow(missing_docs)] // documentation missing in model
    SpeedLimit,
    #[allow(missing_docs)] // documentation missing in model
    TollSystems,
    #[allow(missing_docs)] // documentation missing in model
    TruckAccess,
    #[allow(missing_docs)] // documentation missing in model
    TruckRoadTypes,
    #[allow(missing_docs)] // documentation missing in model
    TypicalDuration,
    #[allow(missing_docs)] // documentation missing in model
    Zones,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RouteSpanAdditionalFeature {
    fn from(s: &str) -> Self {
        match s {
            "BestCaseDuration" => RouteSpanAdditionalFeature::BestCaseDuration,
            "CarAccess" => RouteSpanAdditionalFeature::CarAccess,
            "Consumption" => RouteSpanAdditionalFeature::Consumption,
            "Country" => RouteSpanAdditionalFeature::Country,
            "Distance" => RouteSpanAdditionalFeature::Distance,
            "Duration" => RouteSpanAdditionalFeature::Duration,
            "DynamicSpeed" => RouteSpanAdditionalFeature::DynamicSpeed,
            "FunctionalClassification" => RouteSpanAdditionalFeature::FunctionalClassification,
            "Gates" => RouteSpanAdditionalFeature::Gates,
            "Incidents" => RouteSpanAdditionalFeature::Incidents,
            "Names" => RouteSpanAdditionalFeature::Names,
            "Notices" => RouteSpanAdditionalFeature::Notices,
            "PedestrianAccess" => RouteSpanAdditionalFeature::PedestrianAccess,
            "RailwayCrossings" => RouteSpanAdditionalFeature::RailwayCrossings,
            "Region" => RouteSpanAdditionalFeature::Region,
            "RoadAttributes" => RouteSpanAdditionalFeature::RoadAttributes,
            "RouteNumbers" => RouteSpanAdditionalFeature::RouteNumbers,
            "ScooterAccess" => RouteSpanAdditionalFeature::ScooterAccess,
            "SpeedLimit" => RouteSpanAdditionalFeature::SpeedLimit,
            "TollSystems" => RouteSpanAdditionalFeature::TollSystems,
            "TruckAccess" => RouteSpanAdditionalFeature::TruckAccess,
            "TruckRoadTypes" => RouteSpanAdditionalFeature::TruckRoadTypes,
            "TypicalDuration" => RouteSpanAdditionalFeature::TypicalDuration,
            "Zones" => RouteSpanAdditionalFeature::Zones,
            other => RouteSpanAdditionalFeature::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RouteSpanAdditionalFeature {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RouteSpanAdditionalFeature::from(s))
    }
}
impl RouteSpanAdditionalFeature {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RouteSpanAdditionalFeature::BestCaseDuration => "BestCaseDuration",
            RouteSpanAdditionalFeature::CarAccess => "CarAccess",
            RouteSpanAdditionalFeature::Consumption => "Consumption",
            RouteSpanAdditionalFeature::Country => "Country",
            RouteSpanAdditionalFeature::Distance => "Distance",
            RouteSpanAdditionalFeature::Duration => "Duration",
            RouteSpanAdditionalFeature::DynamicSpeed => "DynamicSpeed",
            RouteSpanAdditionalFeature::FunctionalClassification => "FunctionalClassification",
            RouteSpanAdditionalFeature::Gates => "Gates",
            RouteSpanAdditionalFeature::Incidents => "Incidents",
            RouteSpanAdditionalFeature::Names => "Names",
            RouteSpanAdditionalFeature::Notices => "Notices",
            RouteSpanAdditionalFeature::PedestrianAccess => "PedestrianAccess",
            RouteSpanAdditionalFeature::RailwayCrossings => "RailwayCrossings",
            RouteSpanAdditionalFeature::Region => "Region",
            RouteSpanAdditionalFeature::RoadAttributes => "RoadAttributes",
            RouteSpanAdditionalFeature::RouteNumbers => "RouteNumbers",
            RouteSpanAdditionalFeature::ScooterAccess => "ScooterAccess",
            RouteSpanAdditionalFeature::SpeedLimit => "SpeedLimit",
            RouteSpanAdditionalFeature::TollSystems => "TollSystems",
            RouteSpanAdditionalFeature::TruckAccess => "TruckAccess",
            RouteSpanAdditionalFeature::TruckRoadTypes => "TruckRoadTypes",
            RouteSpanAdditionalFeature::TypicalDuration => "TypicalDuration",
            RouteSpanAdditionalFeature::Zones => "Zones",
            RouteSpanAdditionalFeature::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BestCaseDuration",
            "CarAccess",
            "Consumption",
            "Country",
            "Distance",
            "Duration",
            "DynamicSpeed",
            "FunctionalClassification",
            "Gates",
            "Incidents",
            "Names",
            "Notices",
            "PedestrianAccess",
            "RailwayCrossings",
            "Region",
            "RoadAttributes",
            "RouteNumbers",
            "ScooterAccess",
            "SpeedLimit",
            "TollSystems",
            "TruckAccess",
            "TruckRoadTypes",
            "TypicalDuration",
            "Zones",
        ]
    }
}
impl ::std::convert::AsRef<str> for RouteSpanAdditionalFeature {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RouteSpanAdditionalFeature {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RouteSpanAdditionalFeature {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RouteSpanAdditionalFeature::BestCaseDuration => write!(f, "BestCaseDuration"),
            RouteSpanAdditionalFeature::CarAccess => write!(f, "CarAccess"),
            RouteSpanAdditionalFeature::Consumption => write!(f, "Consumption"),
            RouteSpanAdditionalFeature::Country => write!(f, "Country"),
            RouteSpanAdditionalFeature::Distance => write!(f, "Distance"),
            RouteSpanAdditionalFeature::Duration => write!(f, "Duration"),
            RouteSpanAdditionalFeature::DynamicSpeed => write!(f, "DynamicSpeed"),
            RouteSpanAdditionalFeature::FunctionalClassification => write!(f, "FunctionalClassification"),
            RouteSpanAdditionalFeature::Gates => write!(f, "Gates"),
            RouteSpanAdditionalFeature::Incidents => write!(f, "Incidents"),
            RouteSpanAdditionalFeature::Names => write!(f, "Names"),
            RouteSpanAdditionalFeature::Notices => write!(f, "Notices"),
            RouteSpanAdditionalFeature::PedestrianAccess => write!(f, "PedestrianAccess"),
            RouteSpanAdditionalFeature::RailwayCrossings => write!(f, "RailwayCrossings"),
            RouteSpanAdditionalFeature::Region => write!(f, "Region"),
            RouteSpanAdditionalFeature::RoadAttributes => write!(f, "RoadAttributes"),
            RouteSpanAdditionalFeature::RouteNumbers => write!(f, "RouteNumbers"),
            RouteSpanAdditionalFeature::ScooterAccess => write!(f, "ScooterAccess"),
            RouteSpanAdditionalFeature::SpeedLimit => write!(f, "SpeedLimit"),
            RouteSpanAdditionalFeature::TollSystems => write!(f, "TollSystems"),
            RouteSpanAdditionalFeature::TruckAccess => write!(f, "TruckAccess"),
            RouteSpanAdditionalFeature::TruckRoadTypes => write!(f, "TruckRoadTypes"),
            RouteSpanAdditionalFeature::TypicalDuration => write!(f, "TypicalDuration"),
            RouteSpanAdditionalFeature::Zones => write!(f, "Zones"),
            RouteSpanAdditionalFeature::Unknown(value) => write!(f, "{value}"),
        }
    }
}
