// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RouteTollPaymentMethod`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let routetollpaymentmethod = unimplemented!();
/// match routetollpaymentmethod {
///     RouteTollPaymentMethod::BankCard => { /* ... */ },
///     RouteTollPaymentMethod::Cash => { /* ... */ },
///     RouteTollPaymentMethod::CashExact => { /* ... */ },
///     RouteTollPaymentMethod::CreditCard => { /* ... */ },
///     RouteTollPaymentMethod::PassSubscription => { /* ... */ },
///     RouteTollPaymentMethod::Transponder => { /* ... */ },
///     RouteTollPaymentMethod::TravelCard => { /* ... */ },
///     RouteTollPaymentMethod::VideoToll => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `routetollpaymentmethod` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RouteTollPaymentMethod::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RouteTollPaymentMethod::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RouteTollPaymentMethod::NewFeature` is defined.
/// Specifically, when `routetollpaymentmethod` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RouteTollPaymentMethod::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::hash::Hash)]
pub enum RouteTollPaymentMethod {
    #[allow(missing_docs)] // documentation missing in model
    BankCard,
    #[allow(missing_docs)] // documentation missing in model
    Cash,
    #[allow(missing_docs)] // documentation missing in model
    CashExact,
    #[allow(missing_docs)] // documentation missing in model
    CreditCard,
    #[allow(missing_docs)] // documentation missing in model
    PassSubscription,
    #[allow(missing_docs)] // documentation missing in model
    Transponder,
    #[allow(missing_docs)] // documentation missing in model
    TravelCard,
    #[allow(missing_docs)] // documentation missing in model
    VideoToll,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RouteTollPaymentMethod {
    fn from(s: &str) -> Self {
        match s {
            "BankCard" => RouteTollPaymentMethod::BankCard,
            "Cash" => RouteTollPaymentMethod::Cash,
            "CashExact" => RouteTollPaymentMethod::CashExact,
            "CreditCard" => RouteTollPaymentMethod::CreditCard,
            "PassSubscription" => RouteTollPaymentMethod::PassSubscription,
            "Transponder" => RouteTollPaymentMethod::Transponder,
            "TravelCard" => RouteTollPaymentMethod::TravelCard,
            "VideoToll" => RouteTollPaymentMethod::VideoToll,
            other => RouteTollPaymentMethod::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RouteTollPaymentMethod {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RouteTollPaymentMethod::from(s))
    }
}
impl RouteTollPaymentMethod {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RouteTollPaymentMethod::BankCard => "BankCard",
            RouteTollPaymentMethod::Cash => "Cash",
            RouteTollPaymentMethod::CashExact => "CashExact",
            RouteTollPaymentMethod::CreditCard => "CreditCard",
            RouteTollPaymentMethod::PassSubscription => "PassSubscription",
            RouteTollPaymentMethod::Transponder => "Transponder",
            RouteTollPaymentMethod::TravelCard => "TravelCard",
            RouteTollPaymentMethod::VideoToll => "VideoToll",
            RouteTollPaymentMethod::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BankCard",
            "Cash",
            "CashExact",
            "CreditCard",
            "PassSubscription",
            "Transponder",
            "TravelCard",
            "VideoToll",
        ]
    }
}
impl ::std::convert::AsRef<str> for RouteTollPaymentMethod {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RouteTollPaymentMethod {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RouteTollPaymentMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RouteTollPaymentMethod::BankCard => write!(f, "BankCard"),
            RouteTollPaymentMethod::Cash => write!(f, "Cash"),
            RouteTollPaymentMethod::CashExact => write!(f, "CashExact"),
            RouteTollPaymentMethod::CreditCard => write!(f, "CreditCard"),
            RouteTollPaymentMethod::PassSubscription => write!(f, "PassSubscription"),
            RouteTollPaymentMethod::Transponder => write!(f, "Transponder"),
            RouteTollPaymentMethod::TravelCard => write!(f, "TravelCard"),
            RouteTollPaymentMethod::VideoToll => write!(f, "VideoToll"),
            RouteTollPaymentMethod::Unknown(value) => write!(f, "{value}"),
        }
    }
}
impl ::std::fmt::Debug for RouteTollPaymentMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::std::write!(f, "*** Sensitive Data Redacted ***")
    }
}
