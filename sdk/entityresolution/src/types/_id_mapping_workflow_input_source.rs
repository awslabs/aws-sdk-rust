// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing <code>InputSourceARN</code>, <code>SchemaName</code>, and <code>Type</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdMappingWorkflowInputSource {
    /// <p>An Glue table ARN for the input source table.</p>
    pub input_source_arn: ::std::string::String,
    /// <p>The name of the schema to be retrieved.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of ID namespace. There are two types: <code>SOURCE</code> and <code>TARGET</code>.</p>
    /// <p>The <code>SOURCE</code> contains configurations for <code>sourceId</code> data that will be processed in an ID mapping workflow.</p>
    /// <p>The <code>TARGET</code> contains a configuration of <code>targetId</code> to which all <code>sourceIds</code> will resolve to.</p>
    pub r#type: ::std::option::Option<crate::types::IdNamespaceType>,
}
impl IdMappingWorkflowInputSource {
    /// <p>An Glue table ARN for the input source table.</p>
    pub fn input_source_arn(&self) -> &str {
        use std::ops::Deref;
        self.input_source_arn.deref()
    }
    /// <p>The name of the schema to be retrieved.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>The type of ID namespace. There are two types: <code>SOURCE</code> and <code>TARGET</code>.</p>
    /// <p>The <code>SOURCE</code> contains configurations for <code>sourceId</code> data that will be processed in an ID mapping workflow.</p>
    /// <p>The <code>TARGET</code> contains a configuration of <code>targetId</code> to which all <code>sourceIds</code> will resolve to.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::IdNamespaceType> {
        self.r#type.as_ref()
    }
}
impl IdMappingWorkflowInputSource {
    /// Creates a new builder-style object to manufacture [`IdMappingWorkflowInputSource`](crate::types::IdMappingWorkflowInputSource).
    pub fn builder() -> crate::types::builders::IdMappingWorkflowInputSourceBuilder {
        crate::types::builders::IdMappingWorkflowInputSourceBuilder::default()
    }
}

/// A builder for [`IdMappingWorkflowInputSource`](crate::types::IdMappingWorkflowInputSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IdMappingWorkflowInputSourceBuilder {
    pub(crate) input_source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::IdNamespaceType>,
}
impl IdMappingWorkflowInputSourceBuilder {
    /// <p>An Glue table ARN for the input source table.</p>
    /// This field is required.
    pub fn input_source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Glue table ARN for the input source table.</p>
    pub fn set_input_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_source_arn = input;
        self
    }
    /// <p>An Glue table ARN for the input source table.</p>
    pub fn get_input_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_source_arn
    }
    /// <p>The name of the schema to be retrieved.</p>
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema to be retrieved.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the schema to be retrieved.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// <p>The type of ID namespace. There are two types: <code>SOURCE</code> and <code>TARGET</code>.</p>
    /// <p>The <code>SOURCE</code> contains configurations for <code>sourceId</code> data that will be processed in an ID mapping workflow.</p>
    /// <p>The <code>TARGET</code> contains a configuration of <code>targetId</code> to which all <code>sourceIds</code> will resolve to.</p>
    pub fn r#type(mut self, input: crate::types::IdNamespaceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ID namespace. There are two types: <code>SOURCE</code> and <code>TARGET</code>.</p>
    /// <p>The <code>SOURCE</code> contains configurations for <code>sourceId</code> data that will be processed in an ID mapping workflow.</p>
    /// <p>The <code>TARGET</code> contains a configuration of <code>targetId</code> to which all <code>sourceIds</code> will resolve to.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IdNamespaceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of ID namespace. There are two types: <code>SOURCE</code> and <code>TARGET</code>.</p>
    /// <p>The <code>SOURCE</code> contains configurations for <code>sourceId</code> data that will be processed in an ID mapping workflow.</p>
    /// <p>The <code>TARGET</code> contains a configuration of <code>targetId</code> to which all <code>sourceIds</code> will resolve to.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IdNamespaceType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`IdMappingWorkflowInputSource`](crate::types::IdMappingWorkflowInputSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`input_source_arn`](crate::types::builders::IdMappingWorkflowInputSourceBuilder::input_source_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::IdMappingWorkflowInputSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IdMappingWorkflowInputSource {
            input_source_arn: self.input_source_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "input_source_arn",
                    "input_source_arn was not specified but it is required when building IdMappingWorkflowInputSource",
                )
            })?,
            schema_name: self.schema_name,
            r#type: self.r#type,
        })
    }
}
