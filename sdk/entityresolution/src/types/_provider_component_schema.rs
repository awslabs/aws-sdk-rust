// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input schema supported by provider service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProviderComponentSchema {
    /// <p>Input schema for the provider service.</p>
    pub schemas: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    /// <p>The provider schema attributes.</p>
    pub provider_schema_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ProviderSchemaAttribute>>,
}
impl ProviderComponentSchema {
    /// <p>Input schema for the provider service.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schemas.is_none()`.
    pub fn schemas(&self) -> &[::std::vec::Vec<::std::string::String>] {
        self.schemas.as_deref().unwrap_or_default()
    }
    /// <p>The provider schema attributes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provider_schema_attributes.is_none()`.
    pub fn provider_schema_attributes(&self) -> &[crate::types::ProviderSchemaAttribute] {
        self.provider_schema_attributes.as_deref().unwrap_or_default()
    }
}
impl ProviderComponentSchema {
    /// Creates a new builder-style object to manufacture [`ProviderComponentSchema`](crate::types::ProviderComponentSchema).
    pub fn builder() -> crate::types::builders::ProviderComponentSchemaBuilder {
        crate::types::builders::ProviderComponentSchemaBuilder::default()
    }
}

/// A builder for [`ProviderComponentSchema`](crate::types::ProviderComponentSchema).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProviderComponentSchemaBuilder {
    pub(crate) schemas: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>,
    pub(crate) provider_schema_attributes: ::std::option::Option<::std::vec::Vec<crate::types::ProviderSchemaAttribute>>,
}
impl ProviderComponentSchemaBuilder {
    /// Appends an item to `schemas`.
    ///
    /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
    ///
    /// <p>Input schema for the provider service.</p>
    pub fn schemas(mut self, input: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut v = self.schemas.unwrap_or_default();
        v.push(input);
        self.schemas = ::std::option::Option::Some(v);
        self
    }
    /// <p>Input schema for the provider service.</p>
    pub fn set_schemas(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>>) -> Self {
        self.schemas = input;
        self
    }
    /// <p>Input schema for the provider service.</p>
    pub fn get_schemas(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::string::String>>> {
        &self.schemas
    }
    /// Appends an item to `provider_schema_attributes`.
    ///
    /// To override the contents of this collection use [`set_provider_schema_attributes`](Self::set_provider_schema_attributes).
    ///
    /// <p>The provider schema attributes.</p>
    pub fn provider_schema_attributes(mut self, input: crate::types::ProviderSchemaAttribute) -> Self {
        let mut v = self.provider_schema_attributes.unwrap_or_default();
        v.push(input);
        self.provider_schema_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The provider schema attributes.</p>
    pub fn set_provider_schema_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProviderSchemaAttribute>>) -> Self {
        self.provider_schema_attributes = input;
        self
    }
    /// <p>The provider schema attributes.</p>
    pub fn get_provider_schema_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProviderSchemaAttribute>> {
        &self.provider_schema_attributes
    }
    /// Consumes the builder and constructs a [`ProviderComponentSchema`](crate::types::ProviderComponentSchema).
    pub fn build(self) -> crate::types::ProviderComponentSchema {
        crate::types::ProviderComponentSchema {
            schemas: self.schemas,
            provider_schema_attributes: self.provider_schema_attributes,
        }
    }
}
