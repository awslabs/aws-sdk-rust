// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing <code>InputRecords</code>, <code>TotalRecordsProcessed</code>, <code>MatchIDs</code>, and <code>RecordsNotProcessed</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobMetrics {
    /// <p>The total number of input records.</p>
    pub input_records: ::std::option::Option<i32>,
    /// <p>The total number of records processed.</p>
    pub total_records_processed: ::std::option::Option<i32>,
    /// <p>The total number of records that did not get processed.</p>
    pub records_not_processed: ::std::option::Option<i32>,
    /// <p>The total number of <code>matchID</code>s generated.</p>
    pub match_ids: ::std::option::Option<i32>,
}
impl JobMetrics {
    /// <p>The total number of input records.</p>
    pub fn input_records(&self) -> ::std::option::Option<i32> {
        self.input_records
    }
    /// <p>The total number of records processed.</p>
    pub fn total_records_processed(&self) -> ::std::option::Option<i32> {
        self.total_records_processed
    }
    /// <p>The total number of records that did not get processed.</p>
    pub fn records_not_processed(&self) -> ::std::option::Option<i32> {
        self.records_not_processed
    }
    /// <p>The total number of <code>matchID</code>s generated.</p>
    pub fn match_ids(&self) -> ::std::option::Option<i32> {
        self.match_ids
    }
}
impl JobMetrics {
    /// Creates a new builder-style object to manufacture [`JobMetrics`](crate::types::JobMetrics).
    pub fn builder() -> crate::types::builders::JobMetricsBuilder {
        crate::types::builders::JobMetricsBuilder::default()
    }
}

/// A builder for [`JobMetrics`](crate::types::JobMetrics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobMetricsBuilder {
    pub(crate) input_records: ::std::option::Option<i32>,
    pub(crate) total_records_processed: ::std::option::Option<i32>,
    pub(crate) records_not_processed: ::std::option::Option<i32>,
    pub(crate) match_ids: ::std::option::Option<i32>,
}
impl JobMetricsBuilder {
    /// <p>The total number of input records.</p>
    pub fn input_records(mut self, input: i32) -> Self {
        self.input_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of input records.</p>
    pub fn set_input_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.input_records = input;
        self
    }
    /// <p>The total number of input records.</p>
    pub fn get_input_records(&self) -> &::std::option::Option<i32> {
        &self.input_records
    }
    /// <p>The total number of records processed.</p>
    pub fn total_records_processed(mut self, input: i32) -> Self {
        self.total_records_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of records processed.</p>
    pub fn set_total_records_processed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_records_processed = input;
        self
    }
    /// <p>The total number of records processed.</p>
    pub fn get_total_records_processed(&self) -> &::std::option::Option<i32> {
        &self.total_records_processed
    }
    /// <p>The total number of records that did not get processed.</p>
    pub fn records_not_processed(mut self, input: i32) -> Self {
        self.records_not_processed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of records that did not get processed.</p>
    pub fn set_records_not_processed(mut self, input: ::std::option::Option<i32>) -> Self {
        self.records_not_processed = input;
        self
    }
    /// <p>The total number of records that did not get processed.</p>
    pub fn get_records_not_processed(&self) -> &::std::option::Option<i32> {
        &self.records_not_processed
    }
    /// <p>The total number of <code>matchID</code>s generated.</p>
    pub fn match_ids(mut self, input: i32) -> Self {
        self.match_ids = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of <code>matchID</code>s generated.</p>
    pub fn set_match_ids(mut self, input: ::std::option::Option<i32>) -> Self {
        self.match_ids = input;
        self
    }
    /// <p>The total number of <code>matchID</code>s generated.</p>
    pub fn get_match_ids(&self) -> &::std::option::Option<i32> {
        &self.match_ids
    }
    /// Consumes the builder and constructs a [`JobMetrics`](crate::types::JobMetrics).
    pub fn build(self) -> crate::types::JobMetrics {
        crate::types::JobMetrics {
            input_records: self.input_records,
            total_records_processed: self.total_records_processed,
            records_not_processed: self.records_not_processed,
            match_ids: self.match_ids,
        }
    }
}
