// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action. <code>HTTP Status Code: 403</code></p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be processed because of conflict in the current state of the resource. Example: Workflow already exists, Schema already exists, Workflow is currently running, etc. <code>HTTP Status Code: 400</code></p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request was rejected because it attempted to create resources beyond the current Entity Resolution account limits. The error message describes the limit exceeded. <code>HTTP Status Code: 402</code></p>
    ExceedsLimitException(crate::types::error::ExceedsLimitException),
    /// <p>This exception occurs when there is an internal failure in the Entity Resolution service. <code>HTTP Status Code: 500</code></p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource could not be found. <code>HTTP Status Code: 404</code></p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request was denied due to request throttling. <code>HTTP Status Code: 429</code></p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by Entity Resolution. <code>HTTP Status Code: 400</code></p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ExceedsLimitException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::ExceedsLimitException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_policy_statement::AddPolicyStatementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_policy_statement::AddPolicyStatementError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_policy_statement::AddPolicyStatementError> for Error {
    fn from(err: crate::operation::add_policy_statement::AddPolicyStatementError) -> Self {
        match err {
            crate::operation::add_policy_statement::AddPolicyStatementError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::add_policy_statement::AddPolicyStatementError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::add_policy_statement::AddPolicyStatementError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::add_policy_statement::AddPolicyStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_policy_statement::AddPolicyStatementError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::add_policy_statement::AddPolicyStatementError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::add_policy_statement::AddPolicyStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError> for Error {
    fn from(err: crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError) -> Self {
        match err {
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::ExceedsLimitException(inner) => {
                Error::ExceedsLimitException(inner)
            }
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_id_mapping_workflow::CreateIdMappingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_id_namespace::CreateIdNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_id_namespace::CreateIdNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_id_namespace::CreateIdNamespaceError> for Error {
    fn from(err: crate::operation::create_id_namespace::CreateIdNamespaceError) -> Self {
        match err {
            crate::operation::create_id_namespace::CreateIdNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::ExceedsLimitException(inner) => Error::ExceedsLimitException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_id_namespace::CreateIdNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_matching_workflow::CreateMatchingWorkflowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_matching_workflow::CreateMatchingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_matching_workflow::CreateMatchingWorkflowError> for Error {
    fn from(err: crate::operation::create_matching_workflow::CreateMatchingWorkflowError) -> Self {
        match err {
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::ExceedsLimitException(inner) => {
                Error::ExceedsLimitException(inner)
            }
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_matching_workflow::CreateMatchingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_schema_mapping::CreateSchemaMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_schema_mapping::CreateSchemaMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_schema_mapping::CreateSchemaMappingError> for Error {
    fn from(err: crate::operation::create_schema_mapping::CreateSchemaMappingError) -> Self {
        match err {
            crate::operation::create_schema_mapping::CreateSchemaMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_schema_mapping::CreateSchemaMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_schema_mapping::CreateSchemaMappingError::ExceedsLimitException(inner) => Error::ExceedsLimitException(inner),
            crate::operation::create_schema_mapping::CreateSchemaMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_schema_mapping::CreateSchemaMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_schema_mapping::CreateSchemaMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_schema_mapping::CreateSchemaMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError> for Error {
    fn from(err: crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError) -> Self {
        match err {
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_id_mapping_workflow::DeleteIdMappingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_id_namespace::DeleteIdNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_id_namespace::DeleteIdNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_id_namespace::DeleteIdNamespaceError> for Error {
    fn from(err: crate::operation::delete_id_namespace::DeleteIdNamespaceError) -> Self {
        match err {
            crate::operation::delete_id_namespace::DeleteIdNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_id_namespace::DeleteIdNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_id_namespace::DeleteIdNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_id_namespace::DeleteIdNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_id_namespace::DeleteIdNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError> for Error {
    fn from(err: crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError) -> Self {
        match err {
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_matching_workflow::DeleteMatchingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_policy_statement::DeletePolicyStatementError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_policy_statement::DeletePolicyStatementError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_policy_statement::DeletePolicyStatementError> for Error {
    fn from(err: crate::operation::delete_policy_statement::DeletePolicyStatementError) -> Self {
        match err {
            crate::operation::delete_policy_statement::DeletePolicyStatementError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_policy_statement::DeletePolicyStatementError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_policy_statement::DeletePolicyStatementError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_policy_statement::DeletePolicyStatementError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_policy_statement::DeletePolicyStatementError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_policy_statement::DeletePolicyStatementError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_policy_statement::DeletePolicyStatementError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema_mapping::DeleteSchemaMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema_mapping::DeleteSchemaMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_schema_mapping::DeleteSchemaMappingError> for Error {
    fn from(err: crate::operation::delete_schema_mapping::DeleteSchemaMappingError) -> Self {
        match err {
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_schema_mapping::DeleteSchemaMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_mapping_job::GetIdMappingJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_mapping_job::GetIdMappingJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_id_mapping_job::GetIdMappingJobError> for Error {
    fn from(err: crate::operation::get_id_mapping_job::GetIdMappingJobError) -> Self {
        match err {
            crate::operation::get_id_mapping_job::GetIdMappingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_id_mapping_job::GetIdMappingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_id_mapping_job::GetIdMappingJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_id_mapping_job::GetIdMappingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_id_mapping_job::GetIdMappingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_id_mapping_job::GetIdMappingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError> for Error {
    fn from(err: crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError) -> Self {
        match err {
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_id_mapping_workflow::GetIdMappingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_namespace::GetIdNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_id_namespace::GetIdNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_id_namespace::GetIdNamespaceError> for Error {
    fn from(err: crate::operation::get_id_namespace::GetIdNamespaceError) -> Self {
        match err {
            crate::operation::get_id_namespace::GetIdNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_id_namespace::GetIdNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_id_namespace::GetIdNamespaceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_id_namespace::GetIdNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_id_namespace::GetIdNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_id_namespace::GetIdNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_match_id::GetMatchIdError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_match_id::GetMatchIdError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_match_id::GetMatchIdError> for Error {
    fn from(err: crate::operation::get_match_id::GetMatchIdError) -> Self {
        match err {
            crate::operation::get_match_id::GetMatchIdError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_match_id::GetMatchIdError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_match_id::GetMatchIdError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_match_id::GetMatchIdError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_match_id::GetMatchIdError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_match_id::GetMatchIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_matching_job::GetMatchingJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_matching_job::GetMatchingJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_matching_job::GetMatchingJobError> for Error {
    fn from(err: crate::operation::get_matching_job::GetMatchingJobError) -> Self {
        match err {
            crate::operation::get_matching_job::GetMatchingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_matching_job::GetMatchingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_matching_job::GetMatchingJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_matching_job::GetMatchingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_matching_job::GetMatchingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_matching_job::GetMatchingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_matching_workflow::GetMatchingWorkflowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_matching_workflow::GetMatchingWorkflowError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_matching_workflow::GetMatchingWorkflowError> for Error {
    fn from(err: crate::operation::get_matching_workflow::GetMatchingWorkflowError) -> Self {
        match err {
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_matching_workflow::GetMatchingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_policy::GetPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_policy::GetPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_policy::GetPolicyError> for Error {
    fn from(err: crate::operation::get_policy::GetPolicyError) -> Self {
        match err {
            crate::operation::get_policy::GetPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_policy::GetPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_policy::GetPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_policy::GetPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_policy::GetPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_policy::GetPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_provider_service::GetProviderServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_provider_service::GetProviderServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_provider_service::GetProviderServiceError> for Error {
    fn from(err: crate::operation::get_provider_service::GetProviderServiceError) -> Self {
        match err {
            crate::operation::get_provider_service::GetProviderServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_provider_service::GetProviderServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_provider_service::GetProviderServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_provider_service::GetProviderServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_provider_service::GetProviderServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_provider_service::GetProviderServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_mapping::GetSchemaMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_schema_mapping::GetSchemaMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_schema_mapping::GetSchemaMappingError> for Error {
    fn from(err: crate::operation::get_schema_mapping::GetSchemaMappingError) -> Self {
        match err {
            crate::operation::get_schema_mapping::GetSchemaMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_schema_mapping::GetSchemaMappingError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_schema_mapping::GetSchemaMappingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_schema_mapping::GetSchemaMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_schema_mapping::GetSchemaMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_schema_mapping::GetSchemaMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_mapping_jobs::ListIdMappingJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_mapping_jobs::ListIdMappingJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_id_mapping_jobs::ListIdMappingJobsError> for Error {
    fn from(err: crate::operation::list_id_mapping_jobs::ListIdMappingJobsError) -> Self {
        match err {
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_id_mapping_jobs::ListIdMappingJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError> for Error {
    fn from(err: crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError) -> Self {
        match err {
            crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_id_mapping_workflows::ListIdMappingWorkflowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_namespaces::ListIdNamespacesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_id_namespaces::ListIdNamespacesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_id_namespaces::ListIdNamespacesError> for Error {
    fn from(err: crate::operation::list_id_namespaces::ListIdNamespacesError) -> Self {
        match err {
            crate::operation::list_id_namespaces::ListIdNamespacesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_id_namespaces::ListIdNamespacesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_id_namespaces::ListIdNamespacesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_id_namespaces::ListIdNamespacesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_id_namespaces::ListIdNamespacesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_matching_jobs::ListMatchingJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_matching_jobs::ListMatchingJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_matching_jobs::ListMatchingJobsError> for Error {
    fn from(err: crate::operation::list_matching_jobs::ListMatchingJobsError) -> Self {
        match err {
            crate::operation::list_matching_jobs::ListMatchingJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_matching_jobs::ListMatchingJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_matching_jobs::ListMatchingJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_matching_jobs::ListMatchingJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_matching_jobs::ListMatchingJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_matching_jobs::ListMatchingJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_matching_workflows::ListMatchingWorkflowsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_matching_workflows::ListMatchingWorkflowsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_matching_workflows::ListMatchingWorkflowsError> for Error {
    fn from(err: crate::operation::list_matching_workflows::ListMatchingWorkflowsError) -> Self {
        match err {
            crate::operation::list_matching_workflows::ListMatchingWorkflowsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_matching_workflows::ListMatchingWorkflowsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_matching_workflows::ListMatchingWorkflowsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_matching_workflows::ListMatchingWorkflowsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_matching_workflows::ListMatchingWorkflowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_provider_services::ListProviderServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_provider_services::ListProviderServicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_provider_services::ListProviderServicesError> for Error {
    fn from(err: crate::operation::list_provider_services::ListProviderServicesError) -> Self {
        match err {
            crate::operation::list_provider_services::ListProviderServicesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_provider_services::ListProviderServicesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_provider_services::ListProviderServicesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_provider_services::ListProviderServicesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_provider_services::ListProviderServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_mappings::ListSchemaMappingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_mappings::ListSchemaMappingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_schema_mappings::ListSchemaMappingsError> for Error {
    fn from(err: crate::operation::list_schema_mappings::ListSchemaMappingsError) -> Self {
        match err {
            crate::operation::list_schema_mappings::ListSchemaMappingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_schema_mappings::ListSchemaMappingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_schema_mappings::ListSchemaMappingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_schema_mappings::ListSchemaMappingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_schema_mappings::ListSchemaMappingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_policy::PutPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_policy::PutPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_policy::PutPolicyError> for Error {
    fn from(err: crate::operation::put_policy::PutPolicyError) -> Self {
        match err {
            crate::operation::put_policy::PutPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_policy::PutPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_policy::PutPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_policy::PutPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_policy::PutPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_policy::PutPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_policy::PutPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_id_mapping_job::StartIdMappingJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_id_mapping_job::StartIdMappingJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_id_mapping_job::StartIdMappingJobError> for Error {
    fn from(err: crate::operation::start_id_mapping_job::StartIdMappingJobError) -> Self {
        match err {
            crate::operation::start_id_mapping_job::StartIdMappingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::ExceedsLimitException(inner) => Error::ExceedsLimitException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_id_mapping_job::StartIdMappingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_id_mapping_job::StartIdMappingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_matching_job::StartMatchingJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_matching_job::StartMatchingJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_matching_job::StartMatchingJobError> for Error {
    fn from(err: crate::operation::start_matching_job::StartMatchingJobError) -> Self {
        match err {
            crate::operation::start_matching_job::StartMatchingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::ExceedsLimitException(inner) => Error::ExceedsLimitException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_matching_job::StartMatchingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError> for Error {
    fn from(err: crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError) -> Self {
        match err {
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_id_mapping_workflow::UpdateIdMappingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_id_namespace::UpdateIdNamespaceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_id_namespace::UpdateIdNamespaceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_id_namespace::UpdateIdNamespaceError> for Error {
    fn from(err: crate::operation::update_id_namespace::UpdateIdNamespaceError) -> Self {
        match err {
            crate::operation::update_id_namespace::UpdateIdNamespaceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_id_namespace::UpdateIdNamespaceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_id_namespace::UpdateIdNamespaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_id_namespace::UpdateIdNamespaceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_id_namespace::UpdateIdNamespaceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_id_namespace::UpdateIdNamespaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_matching_workflow::UpdateMatchingWorkflowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_matching_workflow::UpdateMatchingWorkflowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_matching_workflow::UpdateMatchingWorkflowError> for Error {
    fn from(err: crate::operation::update_matching_workflow::UpdateMatchingWorkflowError) -> Self {
        match err {
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_matching_workflow::UpdateMatchingWorkflowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_schema_mapping::UpdateSchemaMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_schema_mapping::UpdateSchemaMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_schema_mapping::UpdateSchemaMappingError> for Error {
    fn from(err: crate::operation::update_schema_mapping::UpdateSchemaMappingError) -> Self {
        match err {
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_schema_mapping::UpdateSchemaMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ExceedsLimitException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ExceedsLimitException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
