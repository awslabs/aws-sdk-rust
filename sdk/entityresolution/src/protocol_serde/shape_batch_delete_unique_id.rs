// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_batch_delete_unique_id_http_error(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput,
    crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?;
    generic_builder = ::aws_types::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalServerException" => crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::InternalServerException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                    .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ResourceNotFoundException" => crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::ResourceNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ValidationException" => crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output)
                    .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_batch_delete_unique_id_http_response(
    _response_status: u16,
    _response_headers: &::aws_smithy_runtime_api::http::Headers,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput,
    crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::default();
        output = crate::protocol_serde::shape_batch_delete_unique_id::de_batch_delete_unique_id(_response_body, output)
            .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?;
        output._set_request_id(::aws_types::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        crate::serde_util::batch_delete_unique_id_output_output_correct_errors(output)
            .build()
            .map_err(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdError::unhandled)?
    })
}

pub fn ser_batch_delete_unique_id_headers(
    input: &crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput,
    mut builder: ::http::request::Builder,
) -> std::result::Result<::http::request::Builder, ::aws_smithy_types::error::operation::BuildError> {
    if let ::std::option::Option::Some(inner_1) = &input.input_source {
        let formatted_2 = inner_1.as_str();
        let header_value = formatted_2;
        let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
            ::aws_smithy_types::error::operation::BuildError::invalid_field(
                "input_source",
                format!("`{}` cannot be used as a header value: {}", &header_value, err),
            )
        })?;
        builder = builder.header("inputSource", header_value);
    }
    if let ::std::option::Option::Some(inner_3) = &input.unique_ids {
        // Empty vec in header is serialized as an empty string
        if inner_3.is_empty() {
            builder = builder.header("uniqueIds", "");
        } else {
            for inner_4 in inner_3 {
                let formatted_5 = ::aws_smithy_http::header::quote_header_value(inner_4.as_str());
                let header_value = formatted_5;
                let header_value: ::http::HeaderValue = header_value.parse().map_err(|err| {
                    ::aws_smithy_types::error::operation::BuildError::invalid_field(
                        "unique_ids",
                        format!("`{}` cannot be used as a header value: {}", &header_value, err),
                    )
                })?;
                builder = builder.header("uniqueIds", header_value);
            }
        }
    }
    Ok(builder)
}

pub(crate) fn de_batch_delete_unique_id(
    value: &[u8],
    mut builder: crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder,
) -> ::std::result::Result<
    crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "deleted" => {
                    builder = builder.set_deleted(crate::protocol_serde::shape_deleted_unique_id_list::de_deleted_unique_id_list(tokens)?);
                }
                "disconnectedUniqueIds" => {
                    builder = builder.set_disconnected_unique_ids(
                        crate::protocol_serde::shape_disconnected_unique_ids_list::de_disconnected_unique_ids_list(tokens)?,
                    );
                }
                "errors" => {
                    builder = builder.set_errors(crate::protocol_serde::shape_delete_unique_id_errors_list::de_delete_unique_id_errors_list(tokens)?);
                }
                "status" => {
                    builder = builder.set_status(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| crate::types::DeleteUniqueIdStatus::from(u.as_ref())))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {other:?}"
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
