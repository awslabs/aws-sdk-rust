// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetMatchingWorkflowInput {
    /// <p>The name of the workflow.</p>
    pub workflow_name: ::std::option::Option<::std::string::String>,
}
impl GetMatchingWorkflowInput {
    /// <p>The name of the workflow.</p>
    pub fn workflow_name(&self) -> ::std::option::Option<&str> {
        self.workflow_name.as_deref()
    }
}
impl GetMatchingWorkflowInput {
    /// Creates a new builder-style object to manufacture [`GetMatchingWorkflowInput`](crate::operation::get_matching_workflow::GetMatchingWorkflowInput).
    pub fn builder() -> crate::operation::get_matching_workflow::builders::GetMatchingWorkflowInputBuilder {
        crate::operation::get_matching_workflow::builders::GetMatchingWorkflowInputBuilder::default()
    }
}

/// A builder for [`GetMatchingWorkflowInput`](crate::operation::get_matching_workflow::GetMatchingWorkflowInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetMatchingWorkflowInputBuilder {
    pub(crate) workflow_name: ::std::option::Option<::std::string::String>,
}
impl GetMatchingWorkflowInputBuilder {
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn workflow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_workflow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_name = input;
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_workflow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_name
    }
    /// Consumes the builder and constructs a [`GetMatchingWorkflowInput`](crate::operation::get_matching_workflow::GetMatchingWorkflowInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_matching_workflow::GetMatchingWorkflowInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::get_matching_workflow::GetMatchingWorkflowInput {
            workflow_name: self.workflow_name,
        })
    }
}
