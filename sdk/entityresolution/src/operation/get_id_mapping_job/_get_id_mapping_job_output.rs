// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetIdMappingJobOutput {
    /// <p>The ID of the job.</p>
    pub job_id: ::std::string::String,
    /// <p>The current status of the job.</p>
    pub status: crate::types::JobStatus,
    /// <p>The time at which the job was started.</p>
    pub start_time: ::aws_smithy_types::DateTime,
    /// <p>The time at which the job has finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>
    pub metrics: ::std::option::Option<crate::types::IdMappingJobMetrics>,
    /// <p>An object containing an error message, if there was an error.</p>
    pub error_details: ::std::option::Option<crate::types::ErrorDetails>,
    _request_id: Option<String>,
}
impl GetIdMappingJobOutput {
    /// <p>The ID of the job.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The current status of the job.</p>
    pub fn status(&self) -> &crate::types::JobStatus {
        &self.status
    }
    /// <p>The time at which the job was started.</p>
    pub fn start_time(&self) -> &::aws_smithy_types::DateTime {
        &self.start_time
    }
    /// <p>The time at which the job has finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>
    pub fn metrics(&self) -> ::std::option::Option<&crate::types::IdMappingJobMetrics> {
        self.metrics.as_ref()
    }
    /// <p>An object containing an error message, if there was an error.</p>
    pub fn error_details(&self) -> ::std::option::Option<&crate::types::ErrorDetails> {
        self.error_details.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetIdMappingJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIdMappingJobOutput {
    /// Creates a new builder-style object to manufacture [`GetIdMappingJobOutput`](crate::operation::get_id_mapping_job::GetIdMappingJobOutput).
    pub fn builder() -> crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder {
        crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder::default()
    }
}

/// A builder for [`GetIdMappingJobOutput`](crate::operation::get_id_mapping_job::GetIdMappingJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetIdMappingJobOutputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) metrics: ::std::option::Option<crate::types::IdMappingJobMetrics>,
    pub(crate) error_details: ::std::option::Option<crate::types::ErrorDetails>,
    _request_id: Option<String>,
}
impl GetIdMappingJobOutputBuilder {
    /// <p>The ID of the job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID of the job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The current status of the job.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::JobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.status
    }
    /// <p>The time at which the job was started.</p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the job was started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time at which the job was started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The time at which the job has finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the job has finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time at which the job has finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>
    pub fn metrics(mut self, input: crate::types::IdMappingJobMetrics) -> Self {
        self.metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<crate::types::IdMappingJobMetrics>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<crate::types::IdMappingJobMetrics> {
        &self.metrics
    }
    /// <p>An object containing an error message, if there was an error.</p>
    pub fn error_details(mut self, input: crate::types::ErrorDetails) -> Self {
        self.error_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object containing an error message, if there was an error.</p>
    pub fn set_error_details(mut self, input: ::std::option::Option<crate::types::ErrorDetails>) -> Self {
        self.error_details = input;
        self
    }
    /// <p>An object containing an error message, if there was an error.</p>
    pub fn get_error_details(&self) -> &::std::option::Option<crate::types::ErrorDetails> {
        &self.error_details
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIdMappingJobOutput`](crate::operation::get_id_mapping_job::GetIdMappingJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder::job_id)
    /// - [`status`](crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder::status)
    /// - [`start_time`](crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder::start_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_id_mapping_job::GetIdMappingJobOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_id_mapping_job::GetIdMappingJobOutput {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building GetIdMappingJobOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetIdMappingJobOutput",
                )
            })?,
            start_time: self.start_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_time",
                    "start_time was not specified but it is required when building GetIdMappingJobOutput",
                )
            })?,
            end_time: self.end_time,
            metrics: self.metrics,
            error_details: self.error_details,
            _request_id: self._request_id,
        })
    }
}
