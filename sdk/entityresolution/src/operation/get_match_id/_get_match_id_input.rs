// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetMatchIdInput {
    /// <p>The name of the workflow.</p>
    pub workflow_name: ::std::option::Option<::std::string::String>,
    /// <p>The record to fetch the Match ID for.</p>
    pub record: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub apply_normalization: ::std::option::Option<bool>,
}
impl GetMatchIdInput {
    /// <p>The name of the workflow.</p>
    pub fn workflow_name(&self) -> ::std::option::Option<&str> {
        self.workflow_name.as_deref()
    }
    /// <p>The record to fetch the Match ID for.</p>
    pub fn record(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.record.as_ref()
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn apply_normalization(&self) -> ::std::option::Option<bool> {
        self.apply_normalization
    }
}
impl ::std::fmt::Debug for GetMatchIdInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMatchIdInput");
        formatter.field("workflow_name", &self.workflow_name);
        formatter.field("record", &"*** Sensitive Data Redacted ***");
        formatter.field("apply_normalization", &self.apply_normalization);
        formatter.finish()
    }
}
impl GetMatchIdInput {
    /// Creates a new builder-style object to manufacture [`GetMatchIdInput`](crate::operation::get_match_id::GetMatchIdInput).
    pub fn builder() -> crate::operation::get_match_id::builders::GetMatchIdInputBuilder {
        crate::operation::get_match_id::builders::GetMatchIdInputBuilder::default()
    }
}

/// A builder for [`GetMatchIdInput`](crate::operation::get_match_id::GetMatchIdInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetMatchIdInputBuilder {
    pub(crate) workflow_name: ::std::option::Option<::std::string::String>,
    pub(crate) record: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) apply_normalization: ::std::option::Option<bool>,
}
impl GetMatchIdInputBuilder {
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn workflow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_workflow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_name = input;
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_workflow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_name
    }
    /// Adds a key-value pair to `record`.
    ///
    /// To override the contents of this collection use [`set_record`](Self::set_record).
    ///
    /// <p>The record to fetch the Match ID for.</p>
    pub fn record(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.record.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.record = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The record to fetch the Match ID for.</p>
    pub fn set_record(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.record = input;
        self
    }
    /// <p>The record to fetch the Match ID for.</p>
    pub fn get_record(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.record
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn apply_normalization(mut self, input: bool) -> Self {
        self.apply_normalization = ::std::option::Option::Some(input);
        self
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn set_apply_normalization(mut self, input: ::std::option::Option<bool>) -> Self {
        self.apply_normalization = input;
        self
    }
    /// <p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>
    pub fn get_apply_normalization(&self) -> &::std::option::Option<bool> {
        &self.apply_normalization
    }
    /// Consumes the builder and constructs a [`GetMatchIdInput`](crate::operation::get_match_id::GetMatchIdInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_match_id::GetMatchIdInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_match_id::GetMatchIdInput {
            workflow_name: self.workflow_name,
            record: self.record,
            apply_normalization: self.apply_normalization,
        })
    }
}
impl ::std::fmt::Debug for GetMatchIdInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetMatchIdInputBuilder");
        formatter.field("workflow_name", &self.workflow_name);
        formatter.field("record", &"*** Sensitive Data Redacted ***");
        formatter.field("apply_normalization", &self.apply_normalization);
        formatter.finish()
    }
}
