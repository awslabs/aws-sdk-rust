// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSchemaMappingInput {
    /// <p>The name of the schema. There can't be multiple <code>SchemaMappings</code> with the same name.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the schema.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>
    pub mapped_input_fields: ::std::option::Option<::std::vec::Vec<crate::types::SchemaInputAttribute>>,
}
impl UpdateSchemaMappingInput {
    /// <p>The name of the schema. There can't be multiple <code>SchemaMappings</code> with the same name.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>A description of the schema.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mapped_input_fields.is_none()`.
    pub fn mapped_input_fields(&self) -> &[crate::types::SchemaInputAttribute] {
        self.mapped_input_fields.as_deref().unwrap_or_default()
    }
}
impl UpdateSchemaMappingInput {
    /// Creates a new builder-style object to manufacture [`UpdateSchemaMappingInput`](crate::operation::update_schema_mapping::UpdateSchemaMappingInput).
    pub fn builder() -> crate::operation::update_schema_mapping::builders::UpdateSchemaMappingInputBuilder {
        crate::operation::update_schema_mapping::builders::UpdateSchemaMappingInputBuilder::default()
    }
}

/// A builder for [`UpdateSchemaMappingInput`](crate::operation::update_schema_mapping::UpdateSchemaMappingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSchemaMappingInputBuilder {
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) mapped_input_fields: ::std::option::Option<::std::vec::Vec<crate::types::SchemaInputAttribute>>,
}
impl UpdateSchemaMappingInputBuilder {
    /// <p>The name of the schema. There can't be multiple <code>SchemaMappings</code> with the same name.</p>
    /// This field is required.
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema. There can't be multiple <code>SchemaMappings</code> with the same name.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the schema. There can't be multiple <code>SchemaMappings</code> with the same name.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// <p>A description of the schema.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the schema.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the schema.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `mapped_input_fields`.
    ///
    /// To override the contents of this collection use [`set_mapped_input_fields`](Self::set_mapped_input_fields).
    ///
    /// <p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>
    pub fn mapped_input_fields(mut self, input: crate::types::SchemaInputAttribute) -> Self {
        let mut v = self.mapped_input_fields.unwrap_or_default();
        v.push(input);
        self.mapped_input_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>
    pub fn set_mapped_input_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaInputAttribute>>) -> Self {
        self.mapped_input_fields = input;
        self
    }
    /// <p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>
    pub fn get_mapped_input_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaInputAttribute>> {
        &self.mapped_input_fields
    }
    /// Consumes the builder and constructs a [`UpdateSchemaMappingInput`](crate::operation::update_schema_mapping::UpdateSchemaMappingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_schema_mapping::UpdateSchemaMappingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_schema_mapping::UpdateSchemaMappingInput {
            schema_name: self.schema_name,
            description: self.description,
            mapped_input_fields: self.mapped_input_fields,
        })
    }
}
