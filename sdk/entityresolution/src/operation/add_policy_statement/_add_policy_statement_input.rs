// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddPolicyStatementInput {
    /// <p>The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A statement identifier that differentiates the statement from others in the same policy.</p>
    pub statement_id: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the permissions specified in the policy are to be allowed (<code>Allow</code>) or denied (<code>Deny</code>).</p>
    pub effect: ::std::option::Option<crate::types::StatementEffect>,
    /// <p>The action that the principal can use on the resource.</p>
    /// <p>For example, <code>entityresolution:GetIdMappingJob</code>, <code>entityresolution:GetMatchingJob</code>.</p>
    pub action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Amazon Web Services service or Amazon Web Services account that can access the resource defined as ARN.</p>
    pub principal: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A set of condition keys that you can use in key policies.</p>
    pub condition: ::std::option::Option<::std::string::String>,
}
impl AddPolicyStatementInput {
    /// <p>The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A statement identifier that differentiates the statement from others in the same policy.</p>
    pub fn statement_id(&self) -> ::std::option::Option<&str> {
        self.statement_id.as_deref()
    }
    /// <p>Determines whether the permissions specified in the policy are to be allowed (<code>Allow</code>) or denied (<code>Deny</code>).</p>
    pub fn effect(&self) -> ::std::option::Option<&crate::types::StatementEffect> {
        self.effect.as_ref()
    }
    /// <p>The action that the principal can use on the resource.</p>
    /// <p>For example, <code>entityresolution:GetIdMappingJob</code>, <code>entityresolution:GetMatchingJob</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.action.is_none()`.
    pub fn action(&self) -> &[::std::string::String] {
        self.action.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services service or Amazon Web Services account that can access the resource defined as ARN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.principal.is_none()`.
    pub fn principal(&self) -> &[::std::string::String] {
        self.principal.as_deref().unwrap_or_default()
    }
    /// <p>A set of condition keys that you can use in key policies.</p>
    pub fn condition(&self) -> ::std::option::Option<&str> {
        self.condition.as_deref()
    }
}
impl AddPolicyStatementInput {
    /// Creates a new builder-style object to manufacture [`AddPolicyStatementInput`](crate::operation::add_policy_statement::AddPolicyStatementInput).
    pub fn builder() -> crate::operation::add_policy_statement::builders::AddPolicyStatementInputBuilder {
        crate::operation::add_policy_statement::builders::AddPolicyStatementInputBuilder::default()
    }
}

/// A builder for [`AddPolicyStatementInput`](crate::operation::add_policy_statement::AddPolicyStatementInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddPolicyStatementInputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) statement_id: ::std::option::Option<::std::string::String>,
    pub(crate) effect: ::std::option::Option<crate::types::StatementEffect>,
    pub(crate) action: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) principal: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) condition: ::std::option::Option<::std::string::String>,
}
impl AddPolicyStatementInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that will be accessed by the principal.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A statement identifier that differentiates the statement from others in the same policy.</p>
    /// This field is required.
    pub fn statement_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A statement identifier that differentiates the statement from others in the same policy.</p>
    pub fn set_statement_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement_id = input;
        self
    }
    /// <p>A statement identifier that differentiates the statement from others in the same policy.</p>
    pub fn get_statement_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement_id
    }
    /// <p>Determines whether the permissions specified in the policy are to be allowed (<code>Allow</code>) or denied (<code>Deny</code>).</p>
    /// This field is required.
    pub fn effect(mut self, input: crate::types::StatementEffect) -> Self {
        self.effect = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the permissions specified in the policy are to be allowed (<code>Allow</code>) or denied (<code>Deny</code>).</p>
    pub fn set_effect(mut self, input: ::std::option::Option<crate::types::StatementEffect>) -> Self {
        self.effect = input;
        self
    }
    /// <p>Determines whether the permissions specified in the policy are to be allowed (<code>Allow</code>) or denied (<code>Deny</code>).</p>
    pub fn get_effect(&self) -> &::std::option::Option<crate::types::StatementEffect> {
        &self.effect
    }
    /// Appends an item to `action`.
    ///
    /// To override the contents of this collection use [`set_action`](Self::set_action).
    ///
    /// <p>The action that the principal can use on the resource.</p>
    /// <p>For example, <code>entityresolution:GetIdMappingJob</code>, <code>entityresolution:GetMatchingJob</code>.</p>
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.action.unwrap_or_default();
        v.push(input.into());
        self.action = ::std::option::Option::Some(v);
        self
    }
    /// <p>The action that the principal can use on the resource.</p>
    /// <p>For example, <code>entityresolution:GetIdMappingJob</code>, <code>entityresolution:GetMatchingJob</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action that the principal can use on the resource.</p>
    /// <p>For example, <code>entityresolution:GetIdMappingJob</code>, <code>entityresolution:GetMatchingJob</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.action
    }
    /// Appends an item to `principal`.
    ///
    /// To override the contents of this collection use [`set_principal`](Self::set_principal).
    ///
    /// <p>The Amazon Web Services service or Amazon Web Services account that can access the resource defined as ARN.</p>
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.principal.unwrap_or_default();
        v.push(input.into());
        self.principal = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services service or Amazon Web Services account that can access the resource defined as ARN.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The Amazon Web Services service or Amazon Web Services account that can access the resource defined as ARN.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.principal
    }
    /// <p>A set of condition keys that you can use in key policies.</p>
    pub fn condition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.condition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A set of condition keys that you can use in key policies.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.condition = input;
        self
    }
    /// <p>A set of condition keys that you can use in key policies.</p>
    pub fn get_condition(&self) -> &::std::option::Option<::std::string::String> {
        &self.condition
    }
    /// Consumes the builder and constructs a [`AddPolicyStatementInput`](crate::operation::add_policy_statement::AddPolicyStatementInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::add_policy_statement::AddPolicyStatementInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::add_policy_statement::AddPolicyStatementInput {
            arn: self.arn,
            statement_id: self.statement_id,
            effect: self.effect,
            action: self.action,
            principal: self.principal,
            condition: self.condition,
        })
    }
}
