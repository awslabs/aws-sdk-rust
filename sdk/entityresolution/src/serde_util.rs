// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_id_mapping_workflow_output_correct_errors(
    mut builder: crate::operation::create_id_mapping_workflow::builders::CreateIdMappingWorkflowOutputBuilder,
) -> crate::operation::create_id_mapping_workflow::builders::CreateIdMappingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.id_mapping_techniques.is_none() {
        builder.id_mapping_techniques = {
            let builder = crate::types::builders::IdMappingTechniquesBuilder::default();
            crate::serde_util::id_mapping_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_matching_workflow_output_correct_errors(
    mut builder: crate::operation::create_matching_workflow::builders::CreateMatchingWorkflowOutputBuilder,
) -> crate::operation::create_matching_workflow::builders::CreateMatchingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.resolution_techniques.is_none() {
        builder.resolution_techniques = {
            let builder = crate::types::builders::ResolutionTechniquesBuilder::default();
            crate::serde_util::resolution_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_schema_mapping_output_correct_errors(
    mut builder: crate::operation::create_schema_mapping::builders::CreateSchemaMappingOutputBuilder,
) -> crate::operation::create_schema_mapping::builders::CreateSchemaMappingOutputBuilder {
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.mapped_input_fields.is_none() {
        builder.mapped_input_fields = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_id_mapping_workflow_output_correct_errors(
    mut builder: crate::operation::delete_id_mapping_workflow::builders::DeleteIdMappingWorkflowOutputBuilder,
) -> crate::operation::delete_id_mapping_workflow::builders::DeleteIdMappingWorkflowOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_matching_workflow_output_correct_errors(
    mut builder: crate::operation::delete_matching_workflow::builders::DeleteMatchingWorkflowOutputBuilder,
) -> crate::operation::delete_matching_workflow::builders::DeleteMatchingWorkflowOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_schema_mapping_output_correct_errors(
    mut builder: crate::operation::delete_schema_mapping::builders::DeleteSchemaMappingOutputBuilder,
) -> crate::operation::delete_schema_mapping::builders::DeleteSchemaMappingOutputBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn get_id_mapping_job_output_correct_errors(
    mut builder: crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder,
) -> crate::operation::get_id_mapping_job::builders::GetIdMappingJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_id_mapping_workflow_output_correct_errors(
    mut builder: crate::operation::get_id_mapping_workflow::builders::GetIdMappingWorkflowOutputBuilder,
) -> crate::operation::get_id_mapping_workflow::builders::GetIdMappingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.id_mapping_techniques.is_none() {
        builder.id_mapping_techniques = {
            let builder = crate::types::builders::IdMappingTechniquesBuilder::default();
            crate::serde_util::id_mapping_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_matching_job_output_correct_errors(
    mut builder: crate::operation::get_matching_job::builders::GetMatchingJobOutputBuilder,
) -> crate::operation::get_matching_job::builders::GetMatchingJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_matching_workflow_output_correct_errors(
    mut builder: crate::operation::get_matching_workflow::builders::GetMatchingWorkflowOutputBuilder,
) -> crate::operation::get_matching_workflow::builders::GetMatchingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.resolution_techniques.is_none() {
        builder.resolution_techniques = {
            let builder = crate::types::builders::ResolutionTechniquesBuilder::default();
            crate::serde_util::resolution_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_provider_service_output_correct_errors(
    mut builder: crate::operation::get_provider_service::builders::GetProviderServiceOutputBuilder,
) -> crate::operation::get_provider_service::builders::GetProviderServiceOutputBuilder {
    if builder.provider_name.is_none() {
        builder.provider_name = Some(Default::default())
    }
    if builder.provider_service_name.is_none() {
        builder.provider_service_name = Some(Default::default())
    }
    if builder.provider_service_display_name.is_none() {
        builder.provider_service_display_name = Some(Default::default())
    }
    if builder.provider_service_type.is_none() {
        builder.provider_service_type = "no value was set".parse::<crate::types::ServiceType>().ok()
    }
    if builder.provider_service_arn.is_none() {
        builder.provider_service_arn = Some(Default::default())
    }
    if builder.provider_endpoint_configuration.is_none() {
        builder.provider_endpoint_configuration = Some(crate::types::ProviderEndpointConfiguration::Unknown)
    }
    if builder.anonymized_output.is_none() {
        builder.anonymized_output = Some(Default::default())
    }
    if builder.provider_entity_output_definition.is_none() {
        builder.provider_entity_output_definition = Some(Default::default())
    }
    builder
}

pub(crate) fn get_schema_mapping_output_correct_errors(
    mut builder: crate::operation::get_schema_mapping::builders::GetSchemaMappingOutputBuilder,
) -> crate::operation::get_schema_mapping::builders::GetSchemaMappingOutputBuilder {
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.mapped_input_fields.is_none() {
        builder.mapped_input_fields = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.has_workflows.is_none() {
        builder.has_workflows = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn start_id_mapping_job_output_correct_errors(
    mut builder: crate::operation::start_id_mapping_job::builders::StartIdMappingJobOutputBuilder,
) -> crate::operation::start_id_mapping_job::builders::StartIdMappingJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_matching_job_output_correct_errors(
    mut builder: crate::operation::start_matching_job::builders::StartMatchingJobOutputBuilder,
) -> crate::operation::start_matching_job::builders::StartMatchingJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_id_mapping_workflow_output_correct_errors(
    mut builder: crate::operation::update_id_mapping_workflow::builders::UpdateIdMappingWorkflowOutputBuilder,
) -> crate::operation::update_id_mapping_workflow::builders::UpdateIdMappingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.id_mapping_techniques.is_none() {
        builder.id_mapping_techniques = {
            let builder = crate::types::builders::IdMappingTechniquesBuilder::default();
            crate::serde_util::id_mapping_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_matching_workflow_output_correct_errors(
    mut builder: crate::operation::update_matching_workflow::builders::UpdateMatchingWorkflowOutputBuilder,
) -> crate::operation::update_matching_workflow::builders::UpdateMatchingWorkflowOutputBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.input_source_config.is_none() {
        builder.input_source_config = Some(Default::default())
    }
    if builder.output_source_config.is_none() {
        builder.output_source_config = Some(Default::default())
    }
    if builder.resolution_techniques.is_none() {
        builder.resolution_techniques = {
            let builder = crate::types::builders::ResolutionTechniquesBuilder::default();
            crate::serde_util::resolution_techniques_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_schema_mapping_output_correct_errors(
    mut builder: crate::operation::update_schema_mapping::builders::UpdateSchemaMappingOutputBuilder,
) -> crate::operation::update_schema_mapping::builders::UpdateSchemaMappingOutputBuilder {
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.mapped_input_fields.is_none() {
        builder.mapped_input_fields = Some(Default::default())
    }
    builder
}

pub(crate) fn id_mapping_techniques_correct_errors(
    mut builder: crate::types::builders::IdMappingTechniquesBuilder,
) -> crate::types::builders::IdMappingTechniquesBuilder {
    if builder.id_mapping_type.is_none() {
        builder.id_mapping_type = "no value was set".parse::<crate::types::IdMappingType>().ok()
    }
    if builder.provider_properties.is_none() {
        builder.provider_properties = {
            let builder = crate::types::builders::ProviderPropertiesBuilder::default();
            crate::serde_util::provider_properties_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resolution_techniques_correct_errors(
    mut builder: crate::types::builders::ResolutionTechniquesBuilder,
) -> crate::types::builders::ResolutionTechniquesBuilder {
    if builder.resolution_type.is_none() {
        builder.resolution_type = "no value was set".parse::<crate::types::ResolutionType>().ok()
    }
    builder
}

pub(crate) fn provider_properties_correct_errors(
    mut builder: crate::types::builders::ProviderPropertiesBuilder,
) -> crate::types::builders::ProviderPropertiesBuilder {
    if builder.provider_service_arn.is_none() {
        builder.provider_service_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn id_mapping_workflow_input_source_correct_errors(
    mut builder: crate::types::builders::IdMappingWorkflowInputSourceBuilder,
) -> crate::types::builders::IdMappingWorkflowInputSourceBuilder {
    if builder.input_source_arn.is_none() {
        builder.input_source_arn = Some(Default::default())
    }
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    builder
}

pub(crate) fn id_mapping_workflow_output_source_correct_errors(
    mut builder: crate::types::builders::IdMappingWorkflowOutputSourceBuilder,
) -> crate::types::builders::IdMappingWorkflowOutputSourceBuilder {
    if builder.output_s3_path.is_none() {
        builder.output_s3_path = Some(Default::default())
    }
    builder
}

pub(crate) fn id_mapping_workflow_summary_correct_errors(
    mut builder: crate::types::builders::IdMappingWorkflowSummaryBuilder,
) -> crate::types::builders::IdMappingWorkflowSummaryBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn input_source_correct_errors(mut builder: crate::types::builders::InputSourceBuilder) -> crate::types::builders::InputSourceBuilder {
    if builder.input_source_arn.is_none() {
        builder.input_source_arn = Some(Default::default())
    }
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    builder
}

pub(crate) fn job_summary_correct_errors(mut builder: crate::types::builders::JobSummaryBuilder) -> crate::types::builders::JobSummaryBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn matching_workflow_summary_correct_errors(
    mut builder: crate::types::builders::MatchingWorkflowSummaryBuilder,
) -> crate::types::builders::MatchingWorkflowSummaryBuilder {
    if builder.workflow_name.is_none() {
        builder.workflow_name = Some(Default::default())
    }
    if builder.workflow_arn.is_none() {
        builder.workflow_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.resolution_type.is_none() {
        builder.resolution_type = "no value was set".parse::<crate::types::ResolutionType>().ok()
    }
    builder
}

pub(crate) fn output_source_correct_errors(mut builder: crate::types::builders::OutputSourceBuilder) -> crate::types::builders::OutputSourceBuilder {
    if builder.output_s3_path.is_none() {
        builder.output_s3_path = Some(Default::default())
    }
    if builder.output.is_none() {
        builder.output = Some(Default::default())
    }
    builder
}

pub(crate) fn provider_marketplace_configuration_correct_errors(
    mut builder: crate::types::builders::ProviderMarketplaceConfigurationBuilder,
) -> crate::types::builders::ProviderMarketplaceConfigurationBuilder {
    if builder.data_set_id.is_none() {
        builder.data_set_id = Some(Default::default())
    }
    if builder.revision_id.is_none() {
        builder.revision_id = Some(Default::default())
    }
    if builder.asset_id.is_none() {
        builder.asset_id = Some(Default::default())
    }
    if builder.listing_id.is_none() {
        builder.listing_id = Some(Default::default())
    }
    builder
}

pub(crate) fn provider_service_summary_correct_errors(
    mut builder: crate::types::builders::ProviderServiceSummaryBuilder,
) -> crate::types::builders::ProviderServiceSummaryBuilder {
    if builder.provider_service_arn.is_none() {
        builder.provider_service_arn = Some(Default::default())
    }
    if builder.provider_name.is_none() {
        builder.provider_name = Some(Default::default())
    }
    if builder.provider_service_display_name.is_none() {
        builder.provider_service_display_name = Some(Default::default())
    }
    if builder.provider_service_name.is_none() {
        builder.provider_service_name = Some(Default::default())
    }
    if builder.provider_service_type.is_none() {
        builder.provider_service_type = "no value was set".parse::<crate::types::ServiceType>().ok()
    }
    builder
}

pub(crate) fn rule_based_properties_correct_errors(
    mut builder: crate::types::builders::RuleBasedPropertiesBuilder,
) -> crate::types::builders::RuleBasedPropertiesBuilder {
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    if builder.attribute_matching_model.is_none() {
        builder.attribute_matching_model = "no value was set".parse::<crate::types::AttributeMatchingModel>().ok()
    }
    builder
}

pub(crate) fn schema_input_attribute_correct_errors(
    mut builder: crate::types::builders::SchemaInputAttributeBuilder,
) -> crate::types::builders::SchemaInputAttributeBuilder {
    if builder.field_name.is_none() {
        builder.field_name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SchemaAttributeType>().ok()
    }
    builder
}

pub(crate) fn schema_mapping_summary_correct_errors(
    mut builder: crate::types::builders::SchemaMappingSummaryBuilder,
) -> crate::types::builders::SchemaMappingSummaryBuilder {
    if builder.schema_name.is_none() {
        builder.schema_name = Some(Default::default())
    }
    if builder.schema_arn.is_none() {
        builder.schema_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.has_workflows.is_none() {
        builder.has_workflows = Some(Default::default())
    }
    builder
}

pub(crate) fn intermediate_source_configuration_correct_errors(
    mut builder: crate::types::builders::IntermediateSourceConfigurationBuilder,
) -> crate::types::builders::IntermediateSourceConfigurationBuilder {
    if builder.intermediate_s3_path.is_none() {
        builder.intermediate_s3_path = Some(Default::default())
    }
    builder
}

pub(crate) fn output_attribute_correct_errors(
    mut builder: crate::types::builders::OutputAttributeBuilder,
) -> crate::types::builders::OutputAttributeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.matching_keys.is_none() {
        builder.matching_keys = Some(Default::default())
    }
    builder
}
