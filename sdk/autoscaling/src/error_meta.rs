// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request failed because an active instance refresh for the specified Auto Scaling group was not found. </p>
    ActiveInstanceRefreshNotFoundFault(crate::error::ActiveInstanceRefreshNotFoundFault),
    /// <p>You already have an Auto Scaling group or launch configuration with this name.</p>
    AlreadyExistsFault(crate::error::AlreadyExistsFault),
    /// <p>The request failed because an active instance refresh operation already exists for the specified Auto Scaling group.</p>
    InstanceRefreshInProgressFault(crate::error::InstanceRefreshInProgressFault),
    /// <p>The <code>NextToken</code> value is not valid.</p>
    InvalidNextToken(crate::error::InvalidNextToken),
    /// <p>You have already reached a limit for your Amazon EC2 Auto Scaling resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html">DescribeAccountLimits</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    LimitExceededFault(crate::error::LimitExceededFault),
    /// <p>You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group, instance, or load balancer).</p>
    ResourceContentionFault(crate::error::ResourceContentionFault),
    /// <p>The operation can't be performed because the resource is in use.</p>
    ResourceInUseFault(crate::error::ResourceInUseFault),
    /// <p>The operation can't be performed because there are scaling activities in progress.</p>
    ScalingActivityInProgressFault(crate::error::ScalingActivityInProgressFault),
    /// <p>The service-linked role is not yet ready for use.</p>
    ServiceLinkedRoleFailure(crate::error::ServiceLinkedRoleFailure),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActiveInstanceRefreshNotFoundFault(inner) => inner.fmt(f),
            Error::AlreadyExistsFault(inner) => inner.fmt(f),
            Error::InstanceRefreshInProgressFault(inner) => inner.fmt(f),
            Error::InvalidNextToken(inner) => inner.fmt(f),
            Error::LimitExceededFault(inner) => inner.fmt(f),
            Error::ResourceContentionFault(inner) => inner.fmt(f),
            Error::ResourceInUseFault(inner) => inner.fmt(f),
            Error::ScalingActivityInProgressFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleFailure(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AttachInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachInstancesError> for Error {
    fn from(err: crate::error::AttachInstancesError) -> Self {
        match err {
            crate::error::AttachInstancesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::AttachInstancesError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::AttachInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachLoadBalancersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachLoadBalancersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachLoadBalancersError> for Error {
    fn from(err: crate::error::AttachLoadBalancersError) -> Self {
        match err {
            crate::error::AttachLoadBalancersError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::AttachLoadBalancersError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::AttachLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AttachLoadBalancerTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AttachLoadBalancerTargetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachLoadBalancerTargetGroupsError> for Error {
    fn from(err: crate::error::AttachLoadBalancerTargetGroupsError) -> Self {
        match err {
            crate::error::AttachLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::AttachLoadBalancerTargetGroupsError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::AttachLoadBalancerTargetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachTrafficSourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AttachTrafficSourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachTrafficSourcesError> for Error {
    fn from(err: crate::error::AttachTrafficSourcesError) -> Self {
        match err {
            crate::error::AttachTrafficSourcesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::AttachTrafficSourcesError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::AttachTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteScheduledActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteScheduledActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteScheduledActionError> for Error {
    fn from(err: crate::error::BatchDeleteScheduledActionError) -> Self {
        match err {
            crate::error::BatchDeleteScheduledActionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::BatchDeleteScheduledActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::BatchPutScheduledUpdateGroupActionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchPutScheduledUpdateGroupActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchPutScheduledUpdateGroupActionError> for Error {
    fn from(err: crate::error::BatchPutScheduledUpdateGroupActionError) -> Self {
        match err {
            crate::error::BatchPutScheduledUpdateGroupActionError::AlreadyExistsFault(inner) => {
                Error::AlreadyExistsFault(inner)
            }
            crate::error::BatchPutScheduledUpdateGroupActionError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::BatchPutScheduledUpdateGroupActionError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::error::BatchPutScheduledUpdateGroupActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelInstanceRefreshError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelInstanceRefreshError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelInstanceRefreshError> for Error {
    fn from(err: crate::error::CancelInstanceRefreshError) -> Self {
        match err {
            crate::error::CancelInstanceRefreshError::ActiveInstanceRefreshNotFoundFault(inner) => {
                Error::ActiveInstanceRefreshNotFoundFault(inner)
            }
            crate::error::CancelInstanceRefreshError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::CancelInstanceRefreshError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::CancelInstanceRefreshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteLifecycleActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CompleteLifecycleActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CompleteLifecycleActionError> for Error {
    fn from(err: crate::error::CompleteLifecycleActionError) -> Self {
        match err {
            crate::error::CompleteLifecycleActionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::CompleteLifecycleActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAutoScalingGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAutoScalingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAutoScalingGroupError> for Error {
    fn from(err: crate::error::CreateAutoScalingGroupError) -> Self {
        match err {
            crate::error::CreateAutoScalingGroupError::AlreadyExistsFault(inner) => {
                Error::AlreadyExistsFault(inner)
            }
            crate::error::CreateAutoScalingGroupError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::CreateAutoScalingGroupError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::CreateAutoScalingGroupError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::CreateAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLaunchConfigurationError> for Error {
    fn from(err: crate::error::CreateLaunchConfigurationError) -> Self {
        match err {
            crate::error::CreateLaunchConfigurationError::AlreadyExistsFault(inner) => {
                Error::AlreadyExistsFault(inner)
            }
            crate::error::CreateLaunchConfigurationError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::CreateLaunchConfigurationError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::CreateLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOrUpdateTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOrUpdateTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOrUpdateTagsError> for Error {
    fn from(err: crate::error::CreateOrUpdateTagsError) -> Self {
        match err {
            crate::error::CreateOrUpdateTagsError::AlreadyExistsFault(inner) => {
                Error::AlreadyExistsFault(inner)
            }
            crate::error::CreateOrUpdateTagsError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::CreateOrUpdateTagsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::CreateOrUpdateTagsError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::CreateOrUpdateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAutoScalingGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAutoScalingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAutoScalingGroupError> for Error {
    fn from(err: crate::error::DeleteAutoScalingGroupError) -> Self {
        match err {
            crate::error::DeleteAutoScalingGroupError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteAutoScalingGroupError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::DeleteAutoScalingGroupError::ScalingActivityInProgressFault(inner) => {
                Error::ScalingActivityInProgressFault(inner)
            }
            crate::error::DeleteAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLaunchConfigurationError> for Error {
    fn from(err: crate::error::DeleteLaunchConfigurationError) -> Self {
        match err {
            crate::error::DeleteLaunchConfigurationError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteLaunchConfigurationError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::DeleteLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLifecycleHookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLifecycleHookError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLifecycleHookError> for Error {
    fn from(err: crate::error::DeleteLifecycleHookError) -> Self {
        match err {
            crate::error::DeleteLifecycleHookError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteLifecycleHookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteNotificationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNotificationConfigurationError> for Error {
    fn from(err: crate::error::DeleteNotificationConfigurationError) -> Self {
        match err {
            crate::error::DeleteNotificationConfigurationError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteNotificationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePolicyError> for Error {
    fn from(err: crate::error::DeletePolicyError) -> Self {
        match err {
            crate::error::DeletePolicyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeletePolicyError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::DeletePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScheduledActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteScheduledActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScheduledActionError> for Error {
    fn from(err: crate::error::DeleteScheduledActionError) -> Self {
        match err {
            crate::error::DeleteScheduledActionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTagsError> for Error {
    fn from(err: crate::error::DeleteTagsError) -> Self {
        match err {
            crate::error::DeleteTagsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteTagsError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::DeleteTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWarmPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteWarmPoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWarmPoolError> for Error {
    fn from(err: crate::error::DeleteWarmPoolError) -> Self {
        match err {
            crate::error::DeleteWarmPoolError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::DeleteWarmPoolError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DeleteWarmPoolError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::DeleteWarmPoolError::ScalingActivityInProgressFault(inner) => {
                Error::ScalingActivityInProgressFault(inner)
            }
            crate::error::DeleteWarmPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountLimitsError> for Error {
    fn from(err: crate::error::DescribeAccountLimitsError) -> Self {
        match err {
            crate::error::DescribeAccountLimitsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeAccountLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAdjustmentTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAdjustmentTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAdjustmentTypesError> for Error {
    fn from(err: crate::error::DescribeAdjustmentTypesError) -> Self {
        match err {
            crate::error::DescribeAdjustmentTypesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeAdjustmentTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAutoScalingGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAutoScalingGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAutoScalingGroupsError> for Error {
    fn from(err: crate::error::DescribeAutoScalingGroupsError) -> Self {
        match err {
            crate::error::DescribeAutoScalingGroupsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeAutoScalingGroupsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeAutoScalingGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAutoScalingInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAutoScalingInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAutoScalingInstancesError> for Error {
    fn from(err: crate::error::DescribeAutoScalingInstancesError) -> Self {
        match err {
            crate::error::DescribeAutoScalingInstancesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeAutoScalingInstancesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeAutoScalingInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeAutoScalingNotificationTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAutoScalingNotificationTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAutoScalingNotificationTypesError> for Error {
    fn from(err: crate::error::DescribeAutoScalingNotificationTypesError) -> Self {
        match err {
            crate::error::DescribeAutoScalingNotificationTypesError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::error::DescribeAutoScalingNotificationTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceRefreshesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceRefreshesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceRefreshesError> for Error {
    fn from(err: crate::error::DescribeInstanceRefreshesError) -> Self {
        match err {
            crate::error::DescribeInstanceRefreshesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeInstanceRefreshesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeInstanceRefreshesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLaunchConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLaunchConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLaunchConfigurationsError> for Error {
    fn from(err: crate::error::DescribeLaunchConfigurationsError) -> Self {
        match err {
            crate::error::DescribeLaunchConfigurationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeLaunchConfigurationsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeLaunchConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLifecycleHooksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLifecycleHooksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLifecycleHooksError> for Error {
    fn from(err: crate::error::DescribeLifecycleHooksError) -> Self {
        match err {
            crate::error::DescribeLifecycleHooksError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeLifecycleHooksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLifecycleHookTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLifecycleHookTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLifecycleHookTypesError> for Error {
    fn from(err: crate::error::DescribeLifecycleHookTypesError) -> Self {
        match err {
            crate::error::DescribeLifecycleHookTypesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeLifecycleHookTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLoadBalancersError> for Error {
    fn from(err: crate::error::DescribeLoadBalancersError) -> Self {
        match err {
            crate::error::DescribeLoadBalancersError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeLoadBalancersError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeLoadBalancerTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeLoadBalancerTargetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLoadBalancerTargetGroupsError> for Error {
    fn from(err: crate::error::DescribeLoadBalancerTargetGroupsError) -> Self {
        match err {
            crate::error::DescribeLoadBalancerTargetGroupsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeLoadBalancerTargetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMetricCollectionTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMetricCollectionTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMetricCollectionTypesError> for Error {
    fn from(err: crate::error::DescribeMetricCollectionTypesError) -> Self {
        match err {
            crate::error::DescribeMetricCollectionTypesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeMetricCollectionTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeNotificationConfigurationsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeNotificationConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNotificationConfigurationsError> for Error {
    fn from(err: crate::error::DescribeNotificationConfigurationsError) -> Self {
        match err {
            crate::error::DescribeNotificationConfigurationsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeNotificationConfigurationsError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::error::DescribeNotificationConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePoliciesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePoliciesError> for Error {
    fn from(err: crate::error::DescribePoliciesError) -> Self {
        match err {
            crate::error::DescribePoliciesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribePoliciesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribePoliciesError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::DescribePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingActivitiesError> for Error {
    fn from(err: crate::error::DescribeScalingActivitiesError) -> Self {
        match err {
            crate::error::DescribeScalingActivitiesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeScalingActivitiesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeScalingActivitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingProcessTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingProcessTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingProcessTypesError> for Error {
    fn from(err: crate::error::DescribeScalingProcessTypesError) -> Self {
        match err {
            crate::error::DescribeScalingProcessTypesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeScalingProcessTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScheduledActionsError> for Error {
    fn from(err: crate::error::DescribeScheduledActionsError) -> Self {
        match err {
            crate::error::DescribeScheduledActionsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeScheduledActionsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeScheduledActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTagsError> for Error {
    fn from(err: crate::error::DescribeTagsError) -> Self {
        match err {
            crate::error::DescribeTagsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeTagsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeTerminationPolicyTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeTerminationPolicyTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTerminationPolicyTypesError> for Error {
    fn from(err: crate::error::DescribeTerminationPolicyTypesError) -> Self {
        match err {
            crate::error::DescribeTerminationPolicyTypesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeTerminationPolicyTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTrafficSourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTrafficSourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrafficSourcesError> for Error {
    fn from(err: crate::error::DescribeTrafficSourcesError) -> Self {
        match err {
            crate::error::DescribeTrafficSourcesError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeTrafficSourcesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWarmPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWarmPoolError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWarmPoolError> for Error {
    fn from(err: crate::error::DescribeWarmPoolError) -> Self {
        match err {
            crate::error::DescribeWarmPoolError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::error::DescribeWarmPoolError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::DescribeWarmPoolError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DescribeWarmPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetachInstancesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachInstancesError> for Error {
    fn from(err: crate::error::DetachInstancesError) -> Self {
        match err {
            crate::error::DetachInstancesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DetachInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachLoadBalancersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetachLoadBalancersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachLoadBalancersError> for Error {
    fn from(err: crate::error::DetachLoadBalancersError) -> Self {
        match err {
            crate::error::DetachLoadBalancersError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DetachLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DetachLoadBalancerTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DetachLoadBalancerTargetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachLoadBalancerTargetGroupsError> for Error {
    fn from(err: crate::error::DetachLoadBalancerTargetGroupsError) -> Self {
        match err {
            crate::error::DetachLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DetachLoadBalancerTargetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachTrafficSourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetachTrafficSourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachTrafficSourcesError> for Error {
    fn from(err: crate::error::DetachTrafficSourcesError) -> Self {
        match err {
            crate::error::DetachTrafficSourcesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DetachTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableMetricsCollectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisableMetricsCollectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableMetricsCollectionError> for Error {
    fn from(err: crate::error::DisableMetricsCollectionError) -> Self {
        match err {
            crate::error::DisableMetricsCollectionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::DisableMetricsCollectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableMetricsCollectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::EnableMetricsCollectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableMetricsCollectionError> for Error {
    fn from(err: crate::error::EnableMetricsCollectionError) -> Self {
        match err {
            crate::error::EnableMetricsCollectionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::EnableMetricsCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnterStandbyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EnterStandbyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnterStandbyError> for Error {
    fn from(err: crate::error::EnterStandbyError) -> Self {
        match err {
            crate::error::EnterStandbyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::EnterStandbyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecutePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExecutePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecutePolicyError> for Error {
    fn from(err: crate::error::ExecutePolicyError) -> Self {
        match err {
            crate::error::ExecutePolicyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::ExecutePolicyError::ScalingActivityInProgressFault(inner) => {
                Error::ScalingActivityInProgressFault(inner)
            }
            crate::error::ExecutePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExitStandbyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ExitStandbyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExitStandbyError> for Error {
    fn from(err: crate::error::ExitStandbyError) -> Self {
        match err {
            crate::error::ExitStandbyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::ExitStandbyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPredictiveScalingForecastError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPredictiveScalingForecastError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPredictiveScalingForecastError> for Error {
    fn from(err: crate::error::GetPredictiveScalingForecastError) -> Self {
        match err {
            crate::error::GetPredictiveScalingForecastError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::GetPredictiveScalingForecastError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutLifecycleHookError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutLifecycleHookError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutLifecycleHookError> for Error {
    fn from(err: crate::error::PutLifecycleHookError) -> Self {
        match err {
            crate::error::PutLifecycleHookError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PutLifecycleHookError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::PutLifecycleHookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutNotificationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutNotificationConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutNotificationConfigurationError> for Error {
    fn from(err: crate::error::PutNotificationConfigurationError) -> Self {
        match err {
            crate::error::PutNotificationConfigurationError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PutNotificationConfigurationError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::PutNotificationConfigurationError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::PutNotificationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutScalingPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutScalingPolicyError> for Error {
    fn from(err: crate::error::PutScalingPolicyError) -> Self {
        match err {
            crate::error::PutScalingPolicyError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PutScalingPolicyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::PutScalingPolicyError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutScheduledUpdateGroupActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutScheduledUpdateGroupActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutScheduledUpdateGroupActionError> for Error {
    fn from(err: crate::error::PutScheduledUpdateGroupActionError) -> Self {
        match err {
            crate::error::PutScheduledUpdateGroupActionError::AlreadyExistsFault(inner) => {
                Error::AlreadyExistsFault(inner)
            }
            crate::error::PutScheduledUpdateGroupActionError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PutScheduledUpdateGroupActionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::PutScheduledUpdateGroupActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutWarmPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutWarmPoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutWarmPoolError> for Error {
    fn from(err: crate::error::PutWarmPoolError) -> Self {
        match err {
            crate::error::PutWarmPoolError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::PutWarmPoolError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::PutWarmPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RecordLifecycleActionHeartbeatError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RecordLifecycleActionHeartbeatError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RecordLifecycleActionHeartbeatError> for Error {
    fn from(err: crate::error::RecordLifecycleActionHeartbeatError) -> Self {
        match err {
            crate::error::RecordLifecycleActionHeartbeatError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::RecordLifecycleActionHeartbeatError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResumeProcessesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResumeProcessesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResumeProcessesError> for Error {
    fn from(err: crate::error::ResumeProcessesError) -> Self {
        match err {
            crate::error::ResumeProcessesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::ResumeProcessesError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::ResumeProcessesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetDesiredCapacityError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetDesiredCapacityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetDesiredCapacityError> for Error {
    fn from(err: crate::error::SetDesiredCapacityError) -> Self {
        match err {
            crate::error::SetDesiredCapacityError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::SetDesiredCapacityError::ScalingActivityInProgressFault(inner) => {
                Error::ScalingActivityInProgressFault(inner)
            }
            crate::error::SetDesiredCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetInstanceHealthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetInstanceHealthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetInstanceHealthError> for Error {
    fn from(err: crate::error::SetInstanceHealthError) -> Self {
        match err {
            crate::error::SetInstanceHealthError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::SetInstanceHealthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetInstanceProtectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetInstanceProtectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetInstanceProtectionError> for Error {
    fn from(err: crate::error::SetInstanceProtectionError) -> Self {
        match err {
            crate::error::SetInstanceProtectionError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::SetInstanceProtectionError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::SetInstanceProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartInstanceRefreshError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartInstanceRefreshError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartInstanceRefreshError> for Error {
    fn from(err: crate::error::StartInstanceRefreshError) -> Self {
        match err {
            crate::error::StartInstanceRefreshError::InstanceRefreshInProgressFault(inner) => {
                Error::InstanceRefreshInProgressFault(inner)
            }
            crate::error::StartInstanceRefreshError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::error::StartInstanceRefreshError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::StartInstanceRefreshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SuspendProcessesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SuspendProcessesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SuspendProcessesError> for Error {
    fn from(err: crate::error::SuspendProcessesError) -> Self {
        match err {
            crate::error::SuspendProcessesError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::SuspendProcessesError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::error::SuspendProcessesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::TerminateInstanceInAutoScalingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::TerminateInstanceInAutoScalingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TerminateInstanceInAutoScalingGroupError> for Error {
    fn from(err: crate::error::TerminateInstanceInAutoScalingGroupError) -> Self {
        match err {
            crate::error::TerminateInstanceInAutoScalingGroupError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::error::TerminateInstanceInAutoScalingGroupError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::error::TerminateInstanceInAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAutoScalingGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAutoScalingGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAutoScalingGroupError> for Error {
    fn from(err: crate::error::UpdateAutoScalingGroupError) -> Self {
        match err {
            crate::error::UpdateAutoScalingGroupError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::error::UpdateAutoScalingGroupError::ScalingActivityInProgressFault(inner) => {
                Error::ScalingActivityInProgressFault(inner)
            }
            crate::error::UpdateAutoScalingGroupError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::error::UpdateAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ActiveInstanceRefreshNotFoundFault(e) => e.request_id(),
            Self::AlreadyExistsFault(e) => e.request_id(),
            Self::InstanceRefreshInProgressFault(e) => e.request_id(),
            Self::InvalidNextToken(e) => e.request_id(),
            Self::LimitExceededFault(e) => e.request_id(),
            Self::ResourceContentionFault(e) => e.request_id(),
            Self::ResourceInUseFault(e) => e.request_id(),
            Self::ScalingActivityInProgressFault(e) => e.request_id(),
            Self::ServiceLinkedRoleFailure(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
