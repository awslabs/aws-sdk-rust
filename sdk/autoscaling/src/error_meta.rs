// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ActiveInstanceRefreshNotFoundFault(crate::error::ActiveInstanceRefreshNotFoundFault),
    AlreadyExistsFault(crate::error::AlreadyExistsFault),
    InstanceRefreshInProgressFault(crate::error::InstanceRefreshInProgressFault),
    InvalidNextToken(crate::error::InvalidNextToken),
    LimitExceededFault(crate::error::LimitExceededFault),
    ResourceContentionFault(crate::error::ResourceContentionFault),
    ResourceInUseFault(crate::error::ResourceInUseFault),
    ScalingActivityInProgressFault(crate::error::ScalingActivityInProgressFault),
    ServiceLinkedRoleFailure(crate::error::ServiceLinkedRoleFailure),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActiveInstanceRefreshNotFoundFault(inner) => inner.fmt(f),
            Error::AlreadyExistsFault(inner) => inner.fmt(f),
            Error::InstanceRefreshInProgressFault(inner) => inner.fmt(f),
            Error::InvalidNextToken(inner) => inner.fmt(f),
            Error::LimitExceededFault(inner) => inner.fmt(f),
            Error::ResourceContentionFault(inner) => inner.fmt(f),
            Error::ResourceInUseFault(inner) => inner.fmt(f),
            Error::ScalingActivityInProgressFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleFailure(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachInstancesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::AttachInstancesErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::AttachInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachLoadBalancersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AttachLoadBalancersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachLoadBalancersErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::AttachLoadBalancersErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::AttachLoadBalancersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AttachLoadBalancerTargetGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AttachLoadBalancerTargetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AttachLoadBalancerTargetGroupsErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::AttachLoadBalancerTargetGroupsErrorKind::ServiceLinkedRoleFailure(
                    inner,
                ) => Error::ServiceLinkedRoleFailure(inner),
                crate::error::AttachLoadBalancerTargetGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchDeleteScheduledActionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::BatchDeleteScheduledActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::BatchDeleteScheduledActionErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::BatchDeleteScheduledActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::BatchPutScheduledUpdateGroupActionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::BatchPutScheduledUpdateGroupActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::BatchPutScheduledUpdateGroupActionErrorKind::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
                crate::error::BatchPutScheduledUpdateGroupActionErrorKind::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
                crate::error::BatchPutScheduledUpdateGroupActionErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::BatchPutScheduledUpdateGroupActionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelInstanceRefreshError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelInstanceRefreshError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CancelInstanceRefreshErrorKind::ActiveInstanceRefreshNotFoundFault(inner) => Error::ActiveInstanceRefreshNotFoundFault(inner),
                crate::error::CancelInstanceRefreshErrorKind::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
                crate::error::CancelInstanceRefreshErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::CancelInstanceRefreshErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CompleteLifecycleActionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CompleteLifecycleActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CompleteLifecycleActionErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::CompleteLifecycleActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAutoScalingGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAutoScalingGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAutoScalingGroupErrorKind::AlreadyExistsFault(inner) => {
                    Error::AlreadyExistsFault(inner)
                }
                crate::error::CreateAutoScalingGroupErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::CreateAutoScalingGroupErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::CreateAutoScalingGroupErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::CreateAutoScalingGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLaunchConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateLaunchConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLaunchConfigurationErrorKind::AlreadyExistsFault(inner) => {
                    Error::AlreadyExistsFault(inner)
                }
                crate::error::CreateLaunchConfigurationErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::CreateLaunchConfigurationErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::CreateLaunchConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateOrUpdateTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateOrUpdateTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateOrUpdateTagsErrorKind::AlreadyExistsFault(inner) => {
                    Error::AlreadyExistsFault(inner)
                }
                crate::error::CreateOrUpdateTagsErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::CreateOrUpdateTagsErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::CreateOrUpdateTagsErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::CreateOrUpdateTagsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteAutoScalingGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteAutoScalingGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteAutoScalingGroupErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeleteAutoScalingGroupErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::DeleteAutoScalingGroupErrorKind::ScalingActivityInProgressFault(
                    inner,
                ) => Error::ScalingActivityInProgressFault(inner),
                crate::error::DeleteAutoScalingGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLaunchConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteLaunchConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLaunchConfigurationErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DeleteLaunchConfigurationErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::DeleteLaunchConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLifecycleHookError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLifecycleHookError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLifecycleHookErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeleteLifecycleHookErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteNotificationConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteNotificationConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteNotificationConfigurationErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DeleteNotificationConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeletePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeletePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeletePolicyErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeletePolicyErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::DeletePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteScheduledActionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteScheduledActionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteScheduledActionErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeleteScheduledActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTagsErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeleteTagsErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::DeleteTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteWarmPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteWarmPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteWarmPoolErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::DeleteWarmPoolErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DeleteWarmPoolErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::DeleteWarmPoolErrorKind::ScalingActivityInProgressFault(inner) => {
                    Error::ScalingActivityInProgressFault(inner)
                }
                crate::error::DeleteWarmPoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAccountLimitsErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeAccountLimitsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAdjustmentTypesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAdjustmentTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAdjustmentTypesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeAdjustmentTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutoScalingGroupsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAutoScalingGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAutoScalingGroupsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeAutoScalingGroupsErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeAutoScalingGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutoScalingInstancesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAutoScalingInstancesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAutoScalingInstancesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeAutoScalingInstancesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeAutoScalingInstancesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAutoScalingNotificationTypesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeAutoScalingNotificationTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeAutoScalingNotificationTypesErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::DescribeAutoScalingNotificationTypesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeInstanceRefreshesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeInstanceRefreshesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeInstanceRefreshesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeInstanceRefreshesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeInstanceRefreshesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLaunchConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLaunchConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLaunchConfigurationsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeLaunchConfigurationsErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeLaunchConfigurationsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLifecycleHooksError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLifecycleHooksError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLifecycleHooksErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeLifecycleHooksErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLifecycleHookTypesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLifecycleHookTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLifecycleHookTypesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeLifecycleHookTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLoadBalancersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLoadBalancersErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeLoadBalancersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLoadBalancerTargetGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeLoadBalancerTargetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeLoadBalancerTargetGroupsErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::DescribeLoadBalancerTargetGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeMetricCollectionTypesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeMetricCollectionTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeMetricCollectionTypesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeMetricCollectionTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeNotificationConfigurationsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeNotificationConfigurationsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeNotificationConfigurationsErrorKind::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
                crate::error::DescribeNotificationConfigurationsErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::DescribeNotificationConfigurationsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribePoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribePoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribePoliciesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribePoliciesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribePoliciesErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::DescribePoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeScalingActivitiesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeScalingActivitiesErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeScalingActivitiesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeScalingActivitiesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeScalingProcessTypesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeScalingProcessTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeScalingProcessTypesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeScalingProcessTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeScheduledActionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeScheduledActionsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeScheduledActionsErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeScheduledActionsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTagsErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeTagsErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTerminationPolicyTypesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeTerminationPolicyTypesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTerminationPolicyTypesErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DescribeTerminationPolicyTypesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeWarmPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeWarmPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeWarmPoolErrorKind::InvalidNextToken(inner) => {
                    Error::InvalidNextToken(inner)
                }
                crate::error::DescribeWarmPoolErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::DescribeWarmPoolErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DescribeWarmPoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachInstancesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachInstancesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachInstancesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DetachInstancesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachLoadBalancersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DetachLoadBalancersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachLoadBalancersErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DetachLoadBalancersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DetachLoadBalancerTargetGroupsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DetachLoadBalancerTargetGroupsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DetachLoadBalancerTargetGroupsErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::DetachLoadBalancerTargetGroupsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DisableMetricsCollectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DisableMetricsCollectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DisableMetricsCollectionErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::DisableMetricsCollectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnableMetricsCollectionError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::EnableMetricsCollectionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnableMetricsCollectionErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::EnableMetricsCollectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::EnterStandbyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::EnterStandbyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::EnterStandbyErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::EnterStandbyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExecutePolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExecutePolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExecutePolicyErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::ExecutePolicyErrorKind::ScalingActivityInProgressFault(inner) => {
                    Error::ScalingActivityInProgressFault(inner)
                }
                crate::error::ExecutePolicyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExitStandbyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExitStandbyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExitStandbyErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::ExitStandbyErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetPredictiveScalingForecastError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetPredictiveScalingForecastError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetPredictiveScalingForecastErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::GetPredictiveScalingForecastErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutLifecycleHookError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutLifecycleHookError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutLifecycleHookErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PutLifecycleHookErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::PutLifecycleHookErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutNotificationConfigurationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutNotificationConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutNotificationConfigurationErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PutNotificationConfigurationErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::PutNotificationConfigurationErrorKind::ServiceLinkedRoleFailure(
                    inner,
                ) => Error::ServiceLinkedRoleFailure(inner),
                crate::error::PutNotificationConfigurationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutScalingPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutScalingPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutScalingPolicyErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PutScalingPolicyErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::PutScalingPolicyErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::PutScalingPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutScheduledUpdateGroupActionError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutScheduledUpdateGroupActionError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutScheduledUpdateGroupActionErrorKind::AlreadyExistsFault(inner) => {
                    Error::AlreadyExistsFault(inner)
                }
                crate::error::PutScheduledUpdateGroupActionErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PutScheduledUpdateGroupActionErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::PutScheduledUpdateGroupActionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutWarmPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutWarmPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutWarmPoolErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::PutWarmPoolErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::PutWarmPoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RecordLifecycleActionHeartbeatError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::RecordLifecycleActionHeartbeatError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RecordLifecycleActionHeartbeatErrorKind::ResourceContentionFault(
                    inner,
                ) => Error::ResourceContentionFault(inner),
                crate::error::RecordLifecycleActionHeartbeatErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResumeProcessesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResumeProcessesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ResumeProcessesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::ResumeProcessesErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::ResumeProcessesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetDesiredCapacityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetDesiredCapacityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetDesiredCapacityErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::SetDesiredCapacityErrorKind::ScalingActivityInProgressFault(
                    inner,
                ) => Error::ScalingActivityInProgressFault(inner),
                crate::error::SetDesiredCapacityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetInstanceHealthError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetInstanceHealthError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetInstanceHealthErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::SetInstanceHealthErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetInstanceProtectionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetInstanceProtectionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetInstanceProtectionErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::SetInstanceProtectionErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::SetInstanceProtectionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartInstanceRefreshError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartInstanceRefreshError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartInstanceRefreshErrorKind::InstanceRefreshInProgressFault(
                    inner,
                ) => Error::InstanceRefreshInProgressFault(inner),
                crate::error::StartInstanceRefreshErrorKind::LimitExceededFault(inner) => {
                    Error::LimitExceededFault(inner)
                }
                crate::error::StartInstanceRefreshErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::StartInstanceRefreshErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SuspendProcessesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SuspendProcessesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SuspendProcessesErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::SuspendProcessesErrorKind::ResourceInUseFault(inner) => {
                    Error::ResourceInUseFault(inner)
                }
                crate::error::SuspendProcessesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TerminateInstanceInAutoScalingGroupError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::TerminateInstanceInAutoScalingGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::TerminateInstanceInAutoScalingGroupErrorKind::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
                crate::error::TerminateInstanceInAutoScalingGroupErrorKind::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
                crate::error::TerminateInstanceInAutoScalingGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAutoScalingGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateAutoScalingGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAutoScalingGroupErrorKind::ResourceContentionFault(inner) => {
                    Error::ResourceContentionFault(inner)
                }
                crate::error::UpdateAutoScalingGroupErrorKind::ScalingActivityInProgressFault(
                    inner,
                ) => Error::ScalingActivityInProgressFault(inner),
                crate::error::UpdateAutoScalingGroupErrorKind::ServiceLinkedRoleFailure(inner) => {
                    Error::ServiceLinkedRoleFailure(inner)
                }
                crate::error::UpdateAutoScalingGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
