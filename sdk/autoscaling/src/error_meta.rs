// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request failed because an active instance refresh for the specified Auto Scaling group was not found. </p>
    ActiveInstanceRefreshNotFoundFault(crate::types::error::ActiveInstanceRefreshNotFoundFault),
    /// <p>You already have an Auto Scaling group or launch configuration with this name.</p>
    AlreadyExistsFault(crate::types::error::AlreadyExistsFault),
    /// <p>The request failed because an active instance refresh operation already exists for the specified Auto Scaling group.</p>
    InstanceRefreshInProgressFault(crate::types::error::InstanceRefreshInProgressFault),
    /// <p>The <code>NextToken</code> value is not valid.</p>
    InvalidNextToken(crate::types::error::InvalidNextToken),
    /// <p>You have already reached a limit for your Amazon EC2 Auto Scaling resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html">DescribeAccountLimits</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    LimitExceededFault(crate::types::error::LimitExceededFault),
    /// <p>You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group, instance, or load balancer).</p>
    ResourceContentionFault(crate::types::error::ResourceContentionFault),
    /// <p>The operation can't be performed because the resource is in use.</p>
    ResourceInUseFault(crate::types::error::ResourceInUseFault),
    /// <p>The operation can't be performed because there are scaling activities in progress.</p>
    ScalingActivityInProgressFault(crate::types::error::ScalingActivityInProgressFault),
    /// <p>The service-linked role is not yet ready for use.</p>
    ServiceLinkedRoleFailure(crate::types::error::ServiceLinkedRoleFailure),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ActiveInstanceRefreshNotFoundFault(inner) => inner.fmt(f),
            Error::AlreadyExistsFault(inner) => inner.fmt(f),
            Error::InstanceRefreshInProgressFault(inner) => inner.fmt(f),
            Error::InvalidNextToken(inner) => inner.fmt(f),
            Error::LimitExceededFault(inner) => inner.fmt(f),
            Error::ResourceContentionFault(inner) => inner.fmt(f),
            Error::ResourceInUseFault(inner) => inner.fmt(f),
            Error::ScalingActivityInProgressFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleFailure(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_instances::AttachInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_instances::AttachInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_instances::AttachInstancesError> for Error {
    fn from(err: crate::operation::attach_instances::AttachInstancesError) -> Self {
        match err {
            crate::operation::attach_instances::AttachInstancesError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::operation::attach_instances::AttachInstancesError::ServiceLinkedRoleFailure(
                inner,
            ) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::attach_instances::AttachInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_load_balancers::AttachLoadBalancersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_load_balancers::AttachLoadBalancersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_load_balancers::AttachLoadBalancersError> for Error {
    fn from(err: crate::operation::attach_load_balancers::AttachLoadBalancersError) -> Self {
        match err {
            crate::operation::attach_load_balancers::AttachLoadBalancersError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::attach_load_balancers::AttachLoadBalancersError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::attach_load_balancers::AttachLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError>
    for Error
{
    fn from(
        err: crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError,
    ) -> Self {
        match err {
            crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::attach_load_balancer_target_groups::AttachLoadBalancerTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::attach_traffic_sources::AttachTrafficSourcesError> for Error {
    fn from(err: crate::operation::attach_traffic_sources::AttachTrafficSourcesError) -> Self {
        match err {
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError>
    for Error
{
    fn from(
        err: crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError,
    ) -> Self {
        match err {
            crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::batch_delete_scheduled_action::BatchDeleteScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError> for Error {
    fn from(err: crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError) -> Self {
        match err {
            crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
            crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::batch_put_scheduled_update_group_action::BatchPutScheduledUpdateGroupActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_instance_refresh::CancelInstanceRefreshError> for Error {
    fn from(err: crate::operation::cancel_instance_refresh::CancelInstanceRefreshError) -> Self {
        match err {
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError::ActiveInstanceRefreshNotFoundFault(inner) => Error::ActiveInstanceRefreshNotFoundFault(inner),
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::cancel_instance_refresh::CancelInstanceRefreshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::complete_lifecycle_action::CompleteLifecycleActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::complete_lifecycle_action::CompleteLifecycleActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::complete_lifecycle_action::CompleteLifecycleActionError> for Error {
    fn from(
        err: crate::operation::complete_lifecycle_action::CompleteLifecycleActionError,
    ) -> Self {
        match err {
            crate::operation::complete_lifecycle_action::CompleteLifecycleActionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::complete_lifecycle_action::CompleteLifecycleActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError> for Error {
    fn from(err: crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError) -> Self {
        match err {
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::create_auto_scaling_group::CreateAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_launch_configuration::CreateLaunchConfigurationError> for Error {
    fn from(
        err: crate::operation::create_launch_configuration::CreateLaunchConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::create_launch_configuration::CreateLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_or_update_tags::CreateOrUpdateTagsError> for Error {
    fn from(err: crate::operation::create_or_update_tags::CreateOrUpdateTagsError) -> Self {
        match err {
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError::ResourceInUseFault(inner) => Error::ResourceInUseFault(inner),
            crate::operation::create_or_update_tags::CreateOrUpdateTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError> for Error {
    fn from(err: crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError) -> Self {
        match err {
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError::ResourceInUseFault(inner) => Error::ResourceInUseFault(inner),
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::delete_auto_scaling_group::DeleteAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError> for Error {
    fn from(
        err: crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError::ResourceInUseFault(inner) => Error::ResourceInUseFault(inner),
            crate::operation::delete_launch_configuration::DeleteLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError> for Error {
    fn from(err: crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError) -> Self {
        match err {
            crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_lifecycle_hook::DeleteLifecycleHookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_notification_configuration::DeleteNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_policy::DeletePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_policy::DeletePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_policy::DeletePolicyError> for Error {
    fn from(err: crate::operation::delete_policy::DeletePolicyError) -> Self {
        match err {
            crate::operation::delete_policy::DeletePolicyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::ServiceLinkedRoleFailure(inner) => {
                Error::ServiceLinkedRoleFailure(inner)
            }
            crate::operation::delete_policy::DeletePolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_scheduled_action::DeleteScheduledActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_scheduled_action::DeleteScheduledActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_scheduled_action::DeleteScheduledActionError> for Error {
    fn from(err: crate::operation::delete_scheduled_action::DeleteScheduledActionError) -> Self {
        match err {
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_scheduled_action::DeleteScheduledActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_tags::DeleteTagsError> for Error {
    fn from(err: crate::operation::delete_tags::DeleteTagsError) -> Self {
        match err {
            crate::operation::delete_tags::DeleteTagsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_warm_pool::DeleteWarmPoolError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_warm_pool::DeleteWarmPoolError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_warm_pool::DeleteWarmPoolError> for Error {
    fn from(err: crate::operation::delete_warm_pool::DeleteWarmPoolError) -> Self {
        match err {
            crate::operation::delete_warm_pool::DeleteWarmPoolError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::delete_warm_pool::DeleteWarmPoolError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::delete_warm_pool::DeleteWarmPoolError::ResourceInUseFault(inner) => Error::ResourceInUseFault(inner),
            crate::operation::delete_warm_pool::DeleteWarmPoolError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::delete_warm_pool::DeleteWarmPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_account_limits::DescribeAccountLimitsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_account_limits::DescribeAccountLimitsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_account_limits::DescribeAccountLimitsError> for Error {
    fn from(err: crate::operation::describe_account_limits::DescribeAccountLimitsError) -> Self {
        match err {
            crate::operation::describe_account_limits::DescribeAccountLimitsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_account_limits::DescribeAccountLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError> for Error {
    fn from(
        err: crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError,
    ) -> Self {
        match err {
            crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_adjustment_types::DescribeAdjustmentTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError>
    for Error
{
    fn from(
        err: crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError,
    ) -> Self {
        match err {
            crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_auto_scaling_groups::DescribeAutoScalingGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError>
    for Error
{
    fn from(
        err: crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError,
    ) -> Self {
        match err {
            crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_auto_scaling_instances::DescribeAutoScalingInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError> for Error {
    fn from(err: crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError) -> Self {
        match err {
            crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_auto_scaling_notification_types::DescribeAutoScalingNotificationTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError> for Error {
    fn from(
        err: crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError,
    ) -> Self {
        match err {
            crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_instance_refreshes::DescribeInstanceRefreshesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_launch_configurations::DescribeLaunchConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError> for Error {
    fn from(err: crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError) -> Self {
        match err {
            crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_lifecycle_hooks::DescribeLifecycleHooksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError>
    for Error
{
    fn from(
        err: crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError,
    ) -> Self {
        match err {
            crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_lifecycle_hook_types::DescribeLifecycleHookTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_load_balancers::DescribeLoadBalancersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_load_balancers::DescribeLoadBalancersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_load_balancers::DescribeLoadBalancersError> for Error {
    fn from(err: crate::operation::describe_load_balancers::DescribeLoadBalancersError) -> Self {
        match err {
            crate::operation::describe_load_balancers::DescribeLoadBalancersError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_load_balancers::DescribeLoadBalancersError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_load_balancers::DescribeLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError> for Error {
    fn from(err: crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError) -> Self {
        match err {
            crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_load_balancer_target_groups::DescribeLoadBalancerTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError>
    for Error
{
    fn from(
        err: crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError,
    ) -> Self {
        match err {
            crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_metric_collection_types::DescribeMetricCollectionTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError> for Error {
    fn from(err: crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError) -> Self {
        match err {
            crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_notification_configurations::DescribeNotificationConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_policies::DescribePoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_policies::DescribePoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_policies::DescribePoliciesError> for Error {
    fn from(err: crate::operation::describe_policies::DescribePoliciesError) -> Self {
        match err {
            crate::operation::describe_policies::DescribePoliciesError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_policies::DescribePoliciesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_policies::DescribePoliciesError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::describe_policies::DescribePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scaling_activities::DescribeScalingActivitiesError> for Error {
    fn from(
        err: crate::operation::describe_scaling_activities::DescribeScalingActivitiesError,
    ) -> Self {
        match err {
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_scaling_activities::DescribeScalingActivitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError>
    for Error
{
    fn from(
        err: crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError,
    ) -> Self {
        match err {
            crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_scaling_process_types::DescribeScalingProcessTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_scheduled_actions::DescribeScheduledActionsError> for Error {
    fn from(
        err: crate::operation::describe_scheduled_actions::DescribeScheduledActionsError,
    ) -> Self {
        match err {
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_scheduled_actions::DescribeScheduledActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_tags::DescribeTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_tags::DescribeTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_tags::DescribeTagsError> for Error {
    fn from(err: crate::operation::describe_tags::DescribeTagsError) -> Self {
        match err {
            crate::operation::describe_tags::DescribeTagsError::InvalidNextToken(inner) => {
                Error::InvalidNextToken(inner)
            }
            crate::operation::describe_tags::DescribeTagsError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::describe_tags::DescribeTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError>
    for Error
{
    fn from(
        err: crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError,
    ) -> Self {
        match err {
            crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_termination_policy_types::DescribeTerminationPolicyTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_traffic_sources::DescribeTrafficSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_traffic_sources::DescribeTrafficSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_traffic_sources::DescribeTrafficSourcesError> for Error {
    fn from(err: crate::operation::describe_traffic_sources::DescribeTrafficSourcesError) -> Self {
        match err {
            crate::operation::describe_traffic_sources::DescribeTrafficSourcesError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_traffic_sources::DescribeTrafficSourcesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_traffic_sources::DescribeTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_warm_pool::DescribeWarmPoolError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_warm_pool::DescribeWarmPoolError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_warm_pool::DescribeWarmPoolError> for Error {
    fn from(err: crate::operation::describe_warm_pool::DescribeWarmPoolError) -> Self {
        match err {
            crate::operation::describe_warm_pool::DescribeWarmPoolError::InvalidNextToken(inner) => Error::InvalidNextToken(inner),
            crate::operation::describe_warm_pool::DescribeWarmPoolError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::describe_warm_pool::DescribeWarmPoolError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::describe_warm_pool::DescribeWarmPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_instances::DetachInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_instances::DetachInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_instances::DetachInstancesError> for Error {
    fn from(err: crate::operation::detach_instances::DetachInstancesError) -> Self {
        match err {
            crate::operation::detach_instances::DetachInstancesError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::operation::detach_instances::DetachInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_load_balancers::DetachLoadBalancersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_load_balancers::DetachLoadBalancersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_load_balancers::DetachLoadBalancersError> for Error {
    fn from(err: crate::operation::detach_load_balancers::DetachLoadBalancersError) -> Self {
        match err {
            crate::operation::detach_load_balancers::DetachLoadBalancersError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::detach_load_balancers::DetachLoadBalancersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError>
    for Error
{
    fn from(
        err: crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError,
    ) -> Self {
        match err {
            crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detach_traffic_sources::DetachTrafficSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detach_traffic_sources::DetachTrafficSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detach_traffic_sources::DetachTrafficSourcesError> for Error {
    fn from(err: crate::operation::detach_traffic_sources::DetachTrafficSourcesError) -> Self {
        match err {
            crate::operation::detach_traffic_sources::DetachTrafficSourcesError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::detach_traffic_sources::DetachTrafficSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disable_metrics_collection::DisableMetricsCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disable_metrics_collection::DisableMetricsCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disable_metrics_collection::DisableMetricsCollectionError> for Error {
    fn from(
        err: crate::operation::disable_metrics_collection::DisableMetricsCollectionError,
    ) -> Self {
        match err {
            crate::operation::disable_metrics_collection::DisableMetricsCollectionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::disable_metrics_collection::DisableMetricsCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::enable_metrics_collection::EnableMetricsCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::enable_metrics_collection::EnableMetricsCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enable_metrics_collection::EnableMetricsCollectionError> for Error {
    fn from(
        err: crate::operation::enable_metrics_collection::EnableMetricsCollectionError,
    ) -> Self {
        match err {
            crate::operation::enable_metrics_collection::EnableMetricsCollectionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::enable_metrics_collection::EnableMetricsCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::enter_standby::EnterStandbyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::enter_standby::EnterStandbyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::enter_standby::EnterStandbyError> for Error {
    fn from(err: crate::operation::enter_standby::EnterStandbyError) -> Self {
        match err {
            crate::operation::enter_standby::EnterStandbyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::enter_standby::EnterStandbyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::execute_policy::ExecutePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::execute_policy::ExecutePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::execute_policy::ExecutePolicyError> for Error {
    fn from(err: crate::operation::execute_policy::ExecutePolicyError) -> Self {
        match err {
            crate::operation::execute_policy::ExecutePolicyError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::execute_policy::ExecutePolicyError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::execute_policy::ExecutePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::exit_standby::ExitStandbyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::exit_standby::ExitStandbyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::exit_standby::ExitStandbyError> for Error {
    fn from(err: crate::operation::exit_standby::ExitStandbyError) -> Self {
        match err {
            crate::operation::exit_standby::ExitStandbyError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::exit_standby::ExitStandbyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError>
    for Error
{
    fn from(
        err: crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError,
    ) -> Self {
        match err {
            crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_lifecycle_hook::PutLifecycleHookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_lifecycle_hook::PutLifecycleHookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_lifecycle_hook::PutLifecycleHookError> for Error {
    fn from(err: crate::operation::put_lifecycle_hook::PutLifecycleHookError) -> Self {
        match err {
            crate::operation::put_lifecycle_hook::PutLifecycleHookError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::put_lifecycle_hook::PutLifecycleHookError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::put_lifecycle_hook::PutLifecycleHookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_notification_configuration::PutNotificationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_notification_configuration::PutNotificationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_notification_configuration::PutNotificationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::put_notification_configuration::PutNotificationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::put_notification_configuration::PutNotificationConfigurationError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::put_notification_configuration::PutNotificationConfigurationError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::put_notification_configuration::PutNotificationConfigurationError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::put_notification_configuration::PutNotificationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_scaling_policy::PutScalingPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_scaling_policy::PutScalingPolicyError> for Error {
    fn from(err: crate::operation::put_scaling_policy::PutScalingPolicyError) -> Self {
        match err {
            crate::operation::put_scaling_policy::PutScalingPolicyError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::put_scaling_policy::PutScalingPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError>
    for Error
{
    fn from(
        err: crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError,
    ) -> Self {
        match err {
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError::AlreadyExistsFault(inner) => Error::AlreadyExistsFault(inner),
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::put_scheduled_update_group_action::PutScheduledUpdateGroupActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::put_warm_pool::PutWarmPoolError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_warm_pool::PutWarmPoolError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_warm_pool::PutWarmPoolError> for Error {
    fn from(err: crate::operation::put_warm_pool::PutWarmPoolError) -> Self {
        match err {
            crate::operation::put_warm_pool::PutWarmPoolError::LimitExceededFault(inner) => {
                Error::LimitExceededFault(inner)
            }
            crate::operation::put_warm_pool::PutWarmPoolError::ResourceContentionFault(inner) => {
                Error::ResourceContentionFault(inner)
            }
            crate::operation::put_warm_pool::PutWarmPoolError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError>
    for Error
{
    fn from(
        err: crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
    ) -> Self {
        match err {
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::resume_processes::ResumeProcessesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::resume_processes::ResumeProcessesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resume_processes::ResumeProcessesError> for Error {
    fn from(err: crate::operation::resume_processes::ResumeProcessesError) -> Self {
        match err {
            crate::operation::resume_processes::ResumeProcessesError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::operation::resume_processes::ResumeProcessesError::ResourceInUseFault(inner) => {
                Error::ResourceInUseFault(inner)
            }
            crate::operation::resume_processes::ResumeProcessesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_desired_capacity::SetDesiredCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_desired_capacity::SetDesiredCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_desired_capacity::SetDesiredCapacityError> for Error {
    fn from(err: crate::operation::set_desired_capacity::SetDesiredCapacityError) -> Self {
        match err {
            crate::operation::set_desired_capacity::SetDesiredCapacityError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::set_desired_capacity::SetDesiredCapacityError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::set_desired_capacity::SetDesiredCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_instance_health::SetInstanceHealthError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_instance_health::SetInstanceHealthError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_instance_health::SetInstanceHealthError> for Error {
    fn from(err: crate::operation::set_instance_health::SetInstanceHealthError) -> Self {
        match err {
            crate::operation::set_instance_health::SetInstanceHealthError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::set_instance_health::SetInstanceHealthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_instance_protection::SetInstanceProtectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_instance_protection::SetInstanceProtectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_instance_protection::SetInstanceProtectionError> for Error {
    fn from(err: crate::operation::set_instance_protection::SetInstanceProtectionError) -> Self {
        match err {
            crate::operation::set_instance_protection::SetInstanceProtectionError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::set_instance_protection::SetInstanceProtectionError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::set_instance_protection::SetInstanceProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_instance_refresh::StartInstanceRefreshError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_instance_refresh::StartInstanceRefreshError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_instance_refresh::StartInstanceRefreshError> for Error {
    fn from(err: crate::operation::start_instance_refresh::StartInstanceRefreshError) -> Self {
        match err {
            crate::operation::start_instance_refresh::StartInstanceRefreshError::InstanceRefreshInProgressFault(inner) => Error::InstanceRefreshInProgressFault(inner),
            crate::operation::start_instance_refresh::StartInstanceRefreshError::LimitExceededFault(inner) => Error::LimitExceededFault(inner),
            crate::operation::start_instance_refresh::StartInstanceRefreshError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::start_instance_refresh::StartInstanceRefreshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::suspend_processes::SuspendProcessesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::suspend_processes::SuspendProcessesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::suspend_processes::SuspendProcessesError> for Error {
    fn from(err: crate::operation::suspend_processes::SuspendProcessesError) -> Self {
        match err {
            crate::operation::suspend_processes::SuspendProcessesError::ResourceContentionFault(
                inner,
            ) => Error::ResourceContentionFault(inner),
            crate::operation::suspend_processes::SuspendProcessesError::ResourceInUseFault(
                inner,
            ) => Error::ResourceInUseFault(inner),
            crate::operation::suspend_processes::SuspendProcessesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError> for Error {
    fn from(err: crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError) -> Self {
        match err {
            crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::terminate_instance_in_auto_scaling_group::TerminateInstanceInAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError> for Error {
    fn from(err: crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError) -> Self {
        match err {
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError::ResourceContentionFault(inner) => Error::ResourceContentionFault(inner),
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError::ScalingActivityInProgressFault(inner) => Error::ScalingActivityInProgressFault(inner),
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError::ServiceLinkedRoleFailure(inner) => Error::ServiceLinkedRoleFailure(inner),
            crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ActiveInstanceRefreshNotFoundFault(e) => e.request_id(),
            Self::AlreadyExistsFault(e) => e.request_id(),
            Self::InstanceRefreshInProgressFault(e) => e.request_id(),
            Self::InvalidNextToken(e) => e.request_id(),
            Self::LimitExceededFault(e) => e.request_id(),
            Self::ResourceContentionFault(e) => e.request_id(),
            Self::ResourceInUseFault(e) => e.request_id(),
            Self::ScalingActivityInProgressFault(e) => e.request_id(),
            Self::ServiceLinkedRoleFailure(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
