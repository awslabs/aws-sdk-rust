// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_attach_instances(
    input: &crate::input::AttachInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceIds");
    if let Some(var_2) = &input.instance_ids {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("AutoScalingGroupName");
    if let Some(var_7) = &input.auto_scaling_group_name {
        scope_6.string(var_7);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancers(
    input: &crate::input::AttachLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("AutoScalingGroupName");
    if let Some(var_9) = &input.auto_scaling_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("LoadBalancerNames");
    if let Some(var_11) = &input.load_balancer_names {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancer_target_groups(
    input: &crate::input::AttachLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AutoScalingGroupName");
    if let Some(var_16) = &input.auto_scaling_group_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TargetGroupARNs");
    if let Some(var_18) = &input.target_group_ar_ns {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_scheduled_action(
    input: &crate::input::BatchDeleteScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "BatchDeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("AutoScalingGroupName");
    if let Some(var_23) = &input.auto_scaling_group_name {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ScheduledActionNames");
    if let Some(var_25) = &input.scheduled_action_names {
        let mut list_27 = scope_24.start_list(false, None);
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_put_scheduled_update_group_action(
    input: &crate::input::BatchPutScheduledUpdateGroupActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "BatchPutScheduledUpdateGroupAction",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("AutoScalingGroupName");
    if let Some(var_30) = &input.auto_scaling_group_name {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ScheduledUpdateGroupActions");
    if let Some(var_32) = &input.scheduled_update_group_actions {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_update_group_action_request(
                entry_35, item_33,
            );
        }
        list_34.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_instance_refresh(
    input: &crate::input::CancelInstanceRefreshInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("AutoScalingGroupName");
    if let Some(var_37) = &input.auto_scaling_group_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_lifecycle_action(
    input: &crate::input::CompleteLifecycleActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CompleteLifecycleAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("LifecycleHookName");
    if let Some(var_39) = &input.lifecycle_hook_name {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("AutoScalingGroupName");
    if let Some(var_41) = &input.auto_scaling_group_name {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("LifecycleActionToken");
    if let Some(var_43) = &input.lifecycle_action_token {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("LifecycleActionResult");
    if let Some(var_45) = &input.lifecycle_action_result {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("InstanceId");
    if let Some(var_47) = &input.instance_id {
        scope_46.string(var_47);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_auto_scaling_group(
    input: &crate::input::CreateAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("AutoScalingGroupName");
    if let Some(var_49) = &input.auto_scaling_group_name {
        scope_48.string(var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("LaunchConfigurationName");
    if let Some(var_51) = &input.launch_configuration_name {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("LaunchTemplate");
    if let Some(var_53) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_52, var_53,
        );
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_55) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(scope_54, var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("InstanceId");
    if let Some(var_57) = &input.instance_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("MinSize");
    if let Some(var_59) = &input.min_size {
        scope_58.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("MaxSize");
    if let Some(var_61) = &input.max_size {
        scope_60.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("DesiredCapacity");
    if let Some(var_63) = &input.desired_capacity {
        scope_62.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("DefaultCooldown");
    if let Some(var_65) = &input.default_cooldown {
        scope_64.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AvailabilityZones");
    if let Some(var_67) = &input.availability_zones {
        let mut list_69 = scope_66.start_list(false, None);
        for item_68 in var_67 {
            #[allow(unused_mut)]
            let mut entry_70 = list_69.entry();
            entry_70.string(item_68);
        }
        list_69.finish();
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("LoadBalancerNames");
    if let Some(var_72) = &input.load_balancer_names {
        let mut list_74 = scope_71.start_list(false, None);
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            entry_75.string(item_73);
        }
        list_74.finish();
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("TargetGroupARNs");
    if let Some(var_77) = &input.target_group_ar_ns {
        let mut list_79 = scope_76.start_list(false, None);
        for item_78 in var_77 {
            #[allow(unused_mut)]
            let mut entry_80 = list_79.entry();
            entry_80.string(item_78);
        }
        list_79.finish();
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("HealthCheckType");
    if let Some(var_82) = &input.health_check_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_84) = &input.health_check_grace_period {
        scope_83.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("PlacementGroup");
    if let Some(var_86) = &input.placement_group {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_88) = &input.vpc_zone_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TerminationPolicies");
    if let Some(var_90) = &input.termination_policies {
        let mut list_92 = scope_89.start_list(false, None);
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_95) = &input.new_instances_protected_from_scale_in {
        scope_94.boolean(*var_95);
    }
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("CapacityRebalance");
    if let Some(var_97) = &input.capacity_rebalance {
        scope_96.boolean(*var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("LifecycleHookSpecificationList");
    if let Some(var_99) = &input.lifecycle_hook_specification_list {
        let mut list_101 = scope_98.start_list(false, None);
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            crate::query_ser::serialize_structure_crate_model_lifecycle_hook_specification(
                entry_102, item_100,
            );
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, None);
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105);
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_109) = &input.service_linked_role_arn {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_111) = &input.max_instance_lifetime {
        scope_110.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Context");
    if let Some(var_113) = &input.context {
        scope_112.string(var_113);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_configuration(
    input: &crate::input::CreateLaunchConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("LaunchConfigurationName");
    if let Some(var_115) = &input.launch_configuration_name {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("ImageId");
    if let Some(var_117) = &input.image_id {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("KeyName");
    if let Some(var_119) = &input.key_name {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("SecurityGroups");
    if let Some(var_121) = &input.security_groups {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            entry_124.string(item_122);
        }
        list_123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("ClassicLinkVPCId");
    if let Some(var_126) = &input.classic_link_vpc_id {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("ClassicLinkVPCSecurityGroups");
    if let Some(var_128) = &input.classic_link_vpc_security_groups {
        let mut list_130 = scope_127.start_list(false, None);
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            entry_131.string(item_129);
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("UserData");
    if let Some(var_133) = &input.user_data {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("InstanceId");
    if let Some(var_135) = &input.instance_id {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("InstanceType");
    if let Some(var_137) = &input.instance_type {
        scope_136.string(var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("KernelId");
    if let Some(var_139) = &input.kernel_id {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("RamdiskId");
    if let Some(var_141) = &input.ramdisk_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("BlockDeviceMappings");
    if let Some(var_143) = &input.block_device_mappings {
        let mut list_145 = scope_142.start_list(false, None);
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_146, item_144,
            );
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("InstanceMonitoring");
    if let Some(var_148) = &input.instance_monitoring {
        crate::query_ser::serialize_structure_crate_model_instance_monitoring(scope_147, var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("SpotPrice");
    if let Some(var_150) = &input.spot_price {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("IamInstanceProfile");
    if let Some(var_152) = &input.iam_instance_profile {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("EbsOptimized");
    if let Some(var_154) = &input.ebs_optimized {
        scope_153.boolean(*var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_156) = &input.associate_public_ip_address {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("PlacementTenancy");
    if let Some(var_158) = &input.placement_tenancy {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("MetadataOptions");
    if let Some(var_160) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options(
            scope_159, var_160,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_or_update_tags(
    input: &crate::input::CreateOrUpdateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateOrUpdateTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Tags");
    if let Some(var_162) = &input.tags {
        let mut list_164 = scope_161.start_list(false, None);
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_165, item_163);
        }
        list_164.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_auto_scaling_group(
    input: &crate::input::DeleteAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("AutoScalingGroupName");
    if let Some(var_167) = &input.auto_scaling_group_name {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("ForceDelete");
    if let Some(var_169) = &input.force_delete {
        scope_168.boolean(*var_169);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_configuration(
    input: &crate::input::DeleteLaunchConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("LaunchConfigurationName");
    if let Some(var_171) = &input.launch_configuration_name {
        scope_170.string(var_171);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_lifecycle_hook(
    input: &crate::input::DeleteLifecycleHookInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("LifecycleHookName");
    if let Some(var_173) = &input.lifecycle_hook_name {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("AutoScalingGroupName");
    if let Some(var_175) = &input.auto_scaling_group_name {
        scope_174.string(var_175);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_notification_configuration(
    input: &crate::input::DeleteNotificationConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNotificationConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("AutoScalingGroupName");
    if let Some(var_177) = &input.auto_scaling_group_name {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("TopicARN");
    if let Some(var_179) = &input.topic_arn {
        scope_178.string(var_179);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_policy(
    input: &crate::input::DeletePolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("AutoScalingGroupName");
    if let Some(var_181) = &input.auto_scaling_group_name {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("PolicyName");
    if let Some(var_183) = &input.policy_name {
        scope_182.string(var_183);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("AutoScalingGroupName");
    if let Some(var_185) = &input.auto_scaling_group_name {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("ScheduledActionName");
    if let Some(var_187) = &input.scheduled_action_name {
        scope_186.string(var_187);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("Tags");
    if let Some(var_189) = &input.tags {
        let mut list_191 = scope_188.start_list(false, None);
        for item_190 in var_189 {
            #[allow(unused_mut)]
            let mut entry_192 = list_191.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_192, item_190);
        }
        list_191.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_warm_pool(
    input: &crate::input::DeleteWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AutoScalingGroupName");
    if let Some(var_194) = &input.auto_scaling_group_name {
        scope_193.string(var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("ForceDelete");
    if let Some(var_196) = &input.force_delete {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_adjustment_types(
    input: &crate::input::DescribeAdjustmentTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAdjustmentTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_groups(
    input: &crate::input::DescribeAutoScalingGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_198) = &input.auto_scaling_group_names {
        let mut list_200 = scope_197.start_list(false, None);
        for item_199 in var_198 {
            #[allow(unused_mut)]
            let mut entry_201 = list_200.entry();
            entry_201.string(item_199);
        }
        list_200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("NextToken");
    if let Some(var_203) = &input.next_token {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("MaxRecords");
    if let Some(var_205) = &input.max_records {
        scope_204.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("Filters");
    if let Some(var_207) = &input.filters {
        let mut list_209 = scope_206.start_list(false, None);
        for item_208 in var_207 {
            #[allow(unused_mut)]
            let mut entry_210 = list_209.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_210, item_208);
        }
        list_209.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_instances(
    input: &crate::input::DescribeAutoScalingInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("InstanceIds");
    if let Some(var_212) = &input.instance_ids {
        let mut list_214 = scope_211.start_list(false, None);
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            entry_215.string(item_213);
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("MaxRecords");
    if let Some(var_217) = &input.max_records {
        scope_216.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("NextToken");
    if let Some(var_219) = &input.next_token {
        scope_218.string(var_219);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_notification_types(
    input: &crate::input::DescribeAutoScalingNotificationTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAutoScalingNotificationTypes",
        "2011-01-01",
    );
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_refreshes(
    input: &crate::input::DescribeInstanceRefreshesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceRefreshes", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("AutoScalingGroupName");
    if let Some(var_221) = &input.auto_scaling_group_name {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("InstanceRefreshIds");
    if let Some(var_223) = &input.instance_refresh_ids {
        let mut list_225 = scope_222.start_list(false, None);
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            entry_226.string(item_224);
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("NextToken");
    if let Some(var_228) = &input.next_token {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("MaxRecords");
    if let Some(var_230) = &input.max_records {
        scope_229.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_230).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_configurations(
    input: &crate::input::DescribeLaunchConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchConfigurations", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("LaunchConfigurationNames");
    if let Some(var_232) = &input.launch_configuration_names {
        let mut list_234 = scope_231.start_list(false, None);
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            entry_235.string(item_233);
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("NextToken");
    if let Some(var_237) = &input.next_token {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("MaxRecords");
    if let Some(var_239) = &input.max_records {
        scope_238.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_239).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hooks(
    input: &crate::input::DescribeLifecycleHooksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHooks", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("AutoScalingGroupName");
    if let Some(var_241) = &input.auto_scaling_group_name {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("LifecycleHookNames");
    if let Some(var_243) = &input.lifecycle_hook_names {
        let mut list_245 = scope_242.start_list(false, None);
        for item_244 in var_243 {
            #[allow(unused_mut)]
            let mut entry_246 = list_245.entry();
            entry_246.string(item_244);
        }
        list_245.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hook_types(
    input: &crate::input::DescribeLifecycleHookTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHookTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancers(
    input: &crate::input::DescribeLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("AutoScalingGroupName");
    if let Some(var_248) = &input.auto_scaling_group_name {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("NextToken");
    if let Some(var_250) = &input.next_token {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("MaxRecords");
    if let Some(var_252) = &input.max_records {
        scope_251.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_252).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancer_target_groups(
    input: &crate::input::DescribeLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("AutoScalingGroupName");
    if let Some(var_254) = &input.auto_scaling_group_name {
        scope_253.string(var_254);
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("NextToken");
    if let Some(var_256) = &input.next_token {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("MaxRecords");
    if let Some(var_258) = &input.max_records {
        scope_257.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_258).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_metric_collection_types(
    input: &crate::input::DescribeMetricCollectionTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMetricCollectionTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_notification_configurations(
    input: &crate::input::DescribeNotificationConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNotificationConfigurations",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_260) = &input.auto_scaling_group_names {
        let mut list_262 = scope_259.start_list(false, None);
        for item_261 in var_260 {
            #[allow(unused_mut)]
            let mut entry_263 = list_262.entry();
            entry_263.string(item_261);
        }
        list_262.finish();
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("NextToken");
    if let Some(var_265) = &input.next_token {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("MaxRecords");
    if let Some(var_267) = &input.max_records {
        scope_266.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_267).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_policies(
    input: &crate::input::DescribePoliciesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePolicies", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("AutoScalingGroupName");
    if let Some(var_269) = &input.auto_scaling_group_name {
        scope_268.string(var_269);
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("PolicyNames");
    if let Some(var_271) = &input.policy_names {
        let mut list_273 = scope_270.start_list(false, None);
        for item_272 in var_271 {
            #[allow(unused_mut)]
            let mut entry_274 = list_273.entry();
            entry_274.string(item_272);
        }
        list_273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("PolicyTypes");
    if let Some(var_276) = &input.policy_types {
        let mut list_278 = scope_275.start_list(false, None);
        for item_277 in var_276 {
            #[allow(unused_mut)]
            let mut entry_279 = list_278.entry();
            entry_279.string(item_277);
        }
        list_278.finish();
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("NextToken");
    if let Some(var_281) = &input.next_token {
        scope_280.string(var_281);
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("MaxRecords");
    if let Some(var_283) = &input.max_records {
        scope_282.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_283).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_activities(
    input: &crate::input::DescribeScalingActivitiesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScalingActivities", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("ActivityIds");
    if let Some(var_285) = &input.activity_ids {
        let mut list_287 = scope_284.start_list(false, None);
        for item_286 in var_285 {
            #[allow(unused_mut)]
            let mut entry_288 = list_287.entry();
            entry_288.string(item_286);
        }
        list_287.finish();
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("AutoScalingGroupName");
    if let Some(var_290) = &input.auto_scaling_group_name {
        scope_289.string(var_290);
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("IncludeDeletedGroups");
    if let Some(var_292) = &input.include_deleted_groups {
        scope_291.boolean(*var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("MaxRecords");
    if let Some(var_294) = &input.max_records {
        scope_293.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("NextToken");
    if let Some(var_296) = &input.next_token {
        scope_295.string(var_296);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_process_types(
    input: &crate::input::DescribeScalingProcessTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScalingProcessTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("AutoScalingGroupName");
    if let Some(var_298) = &input.auto_scaling_group_name {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("ScheduledActionNames");
    if let Some(var_300) = &input.scheduled_action_names {
        let mut list_302 = scope_299.start_list(false, None);
        for item_301 in var_300 {
            #[allow(unused_mut)]
            let mut entry_303 = list_302.entry();
            entry_303.string(item_301);
        }
        list_302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("StartTime");
    if let Some(var_305) = &input.start_time {
        scope_304.instant(var_305, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("EndTime");
    if let Some(var_307) = &input.end_time {
        scope_306.instant(var_307, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("NextToken");
    if let Some(var_309) = &input.next_token {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("MaxRecords");
    if let Some(var_311) = &input.max_records {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Filters");
    if let Some(var_313) = &input.filters {
        let mut list_315 = scope_312.start_list(false, None);
        for item_314 in var_313 {
            #[allow(unused_mut)]
            let mut entry_316 = list_315.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_316, item_314);
        }
        list_315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("NextToken");
    if let Some(var_318) = &input.next_token {
        scope_317.string(var_318);
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("MaxRecords");
    if let Some(var_320) = &input.max_records {
        scope_319.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_320).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_termination_policy_types(
    input: &crate::input::DescribeTerminationPolicyTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTerminationPolicyTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_warm_pool(
    input: &crate::input::DescribeWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("AutoScalingGroupName");
    if let Some(var_322) = &input.auto_scaling_group_name {
        scope_321.string(var_322);
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("MaxRecords");
    if let Some(var_324) = &input.max_records {
        scope_323.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("NextToken");
    if let Some(var_326) = &input.next_token {
        scope_325.string(var_326);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_instances(
    input: &crate::input::DetachInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("InstanceIds");
    if let Some(var_328) = &input.instance_ids {
        let mut list_330 = scope_327.start_list(false, None);
        for item_329 in var_328 {
            #[allow(unused_mut)]
            let mut entry_331 = list_330.entry();
            entry_331.string(item_329);
        }
        list_330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("AutoScalingGroupName");
    if let Some(var_333) = &input.auto_scaling_group_name {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_335) = &input.should_decrement_desired_capacity {
        scope_334.boolean(*var_335);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancers(
    input: &crate::input::DetachLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("AutoScalingGroupName");
    if let Some(var_337) = &input.auto_scaling_group_name {
        scope_336.string(var_337);
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("LoadBalancerNames");
    if let Some(var_339) = &input.load_balancer_names {
        let mut list_341 = scope_338.start_list(false, None);
        for item_340 in var_339 {
            #[allow(unused_mut)]
            let mut entry_342 = list_341.entry();
            entry_342.string(item_340);
        }
        list_341.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancer_target_groups(
    input: &crate::input::DetachLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("AutoScalingGroupName");
    if let Some(var_344) = &input.auto_scaling_group_name {
        scope_343.string(var_344);
    }
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("TargetGroupARNs");
    if let Some(var_346) = &input.target_group_ar_ns {
        let mut list_348 = scope_345.start_list(false, None);
        for item_347 in var_346 {
            #[allow(unused_mut)]
            let mut entry_349 = list_348.entry();
            entry_349.string(item_347);
        }
        list_348.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_metrics_collection(
    input: &crate::input::DisableMetricsCollectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("AutoScalingGroupName");
    if let Some(var_351) = &input.auto_scaling_group_name {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("Metrics");
    if let Some(var_353) = &input.metrics {
        let mut list_355 = scope_352.start_list(false, None);
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            entry_356.string(item_354);
        }
        list_355.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_metrics_collection(
    input: &crate::input::EnableMetricsCollectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("AutoScalingGroupName");
    if let Some(var_358) = &input.auto_scaling_group_name {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("Metrics");
    if let Some(var_360) = &input.metrics {
        let mut list_362 = scope_359.start_list(false, None);
        for item_361 in var_360 {
            #[allow(unused_mut)]
            let mut entry_363 = list_362.entry();
            entry_363.string(item_361);
        }
        list_362.finish();
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("Granularity");
    if let Some(var_365) = &input.granularity {
        scope_364.string(var_365);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enter_standby(
    input: &crate::input::EnterStandbyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnterStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("InstanceIds");
    if let Some(var_367) = &input.instance_ids {
        let mut list_369 = scope_366.start_list(false, None);
        for item_368 in var_367 {
            #[allow(unused_mut)]
            let mut entry_370 = list_369.entry();
            entry_370.string(item_368);
        }
        list_369.finish();
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("AutoScalingGroupName");
    if let Some(var_372) = &input.auto_scaling_group_name {
        scope_371.string(var_372);
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_374) = &input.should_decrement_desired_capacity {
        scope_373.boolean(*var_374);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_execute_policy(
    input: &crate::input::ExecutePolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExecutePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("AutoScalingGroupName");
    if let Some(var_376) = &input.auto_scaling_group_name {
        scope_375.string(var_376);
    }
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("PolicyName");
    if let Some(var_378) = &input.policy_name {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("HonorCooldown");
    if let Some(var_380) = &input.honor_cooldown {
        scope_379.boolean(*var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("MetricValue");
    if let Some(var_382) = &input.metric_value {
        scope_381.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_382).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("BreachThreshold");
    if let Some(var_384) = &input.breach_threshold {
        scope_383.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_384).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_exit_standby(
    input: &crate::input::ExitStandbyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExitStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("InstanceIds");
    if let Some(var_386) = &input.instance_ids {
        let mut list_388 = scope_385.start_list(false, None);
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            entry_389.string(item_387);
        }
        list_388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("AutoScalingGroupName");
    if let Some(var_391) = &input.auto_scaling_group_name {
        scope_390.string(var_391);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_predictive_scaling_forecast(
    input: &crate::input::GetPredictiveScalingForecastInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetPredictiveScalingForecast", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("AutoScalingGroupName");
    if let Some(var_393) = &input.auto_scaling_group_name {
        scope_392.string(var_393);
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("PolicyName");
    if let Some(var_395) = &input.policy_name {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("StartTime");
    if let Some(var_397) = &input.start_time {
        scope_396.instant(var_397, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("EndTime");
    if let Some(var_399) = &input.end_time {
        scope_398.instant(var_399, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_lifecycle_hook(
    input: &crate::input::PutLifecycleHookInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("LifecycleHookName");
    if let Some(var_401) = &input.lifecycle_hook_name {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("AutoScalingGroupName");
    if let Some(var_403) = &input.auto_scaling_group_name {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("LifecycleTransition");
    if let Some(var_405) = &input.lifecycle_transition {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("RoleARN");
    if let Some(var_407) = &input.role_arn {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("NotificationTargetARN");
    if let Some(var_409) = &input.notification_target_arn {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("NotificationMetadata");
    if let Some(var_411) = &input.notification_metadata {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("HeartbeatTimeout");
    if let Some(var_413) = &input.heartbeat_timeout {
        scope_412.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("DefaultResult");
    if let Some(var_415) = &input.default_result {
        scope_414.string(var_415);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_notification_configuration(
    input: &crate::input::PutNotificationConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PutNotificationConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("AutoScalingGroupName");
    if let Some(var_417) = &input.auto_scaling_group_name {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("TopicARN");
    if let Some(var_419) = &input.topic_arn {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("NotificationTypes");
    if let Some(var_421) = &input.notification_types {
        let mut list_423 = scope_420.start_list(false, None);
        for item_422 in var_421 {
            #[allow(unused_mut)]
            let mut entry_424 = list_423.entry();
            entry_424.string(item_422);
        }
        list_423.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scaling_policy(
    input: &crate::input::PutScalingPolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutScalingPolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("AutoScalingGroupName");
    if let Some(var_426) = &input.auto_scaling_group_name {
        scope_425.string(var_426);
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("PolicyName");
    if let Some(var_428) = &input.policy_name {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("PolicyType");
    if let Some(var_430) = &input.policy_type {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("AdjustmentType");
    if let Some(var_432) = &input.adjustment_type {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MinAdjustmentStep");
    if let Some(var_434) = &input.min_adjustment_step {
        scope_433.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("MinAdjustmentMagnitude");
    if let Some(var_436) = &input.min_adjustment_magnitude {
        scope_435.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("ScalingAdjustment");
    if let Some(var_438) = &input.scaling_adjustment {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("Cooldown");
    if let Some(var_440) = &input.cooldown {
        scope_439.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("MetricAggregationType");
    if let Some(var_442) = &input.metric_aggregation_type {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("StepAdjustments");
    if let Some(var_444) = &input.step_adjustments {
        let mut list_446 = scope_443.start_list(false, None);
        for item_445 in var_444 {
            #[allow(unused_mut)]
            let mut entry_447 = list_446.entry();
            crate::query_ser::serialize_structure_crate_model_step_adjustment(entry_447, item_445);
        }
        list_446.finish();
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("EstimatedInstanceWarmup");
    if let Some(var_449) = &input.estimated_instance_warmup {
        scope_448.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_449).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("TargetTrackingConfiguration");
    if let Some(var_451) = &input.target_tracking_configuration {
        crate::query_ser::serialize_structure_crate_model_target_tracking_configuration(
            scope_450, var_451,
        );
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("Enabled");
    if let Some(var_453) = &input.enabled {
        scope_452.boolean(*var_453);
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("PredictiveScalingConfiguration");
    if let Some(var_455) = &input.predictive_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_configuration(
            scope_454, var_455,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scheduled_update_group_action(
    input: &crate::input::PutScheduledUpdateGroupActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PutScheduledUpdateGroupAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("AutoScalingGroupName");
    if let Some(var_457) = &input.auto_scaling_group_name {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("ScheduledActionName");
    if let Some(var_459) = &input.scheduled_action_name {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("Time");
    if let Some(var_461) = &input.time {
        scope_460.instant(var_461, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("StartTime");
    if let Some(var_463) = &input.start_time {
        scope_462.instant(var_463, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("EndTime");
    if let Some(var_465) = &input.end_time {
        scope_464.instant(var_465, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("Recurrence");
    if let Some(var_467) = &input.recurrence {
        scope_466.string(var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("MinSize");
    if let Some(var_469) = &input.min_size {
        scope_468.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("MaxSize");
    if let Some(var_471) = &input.max_size {
        scope_470.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("DesiredCapacity");
    if let Some(var_473) = &input.desired_capacity {
        scope_472.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("TimeZone");
    if let Some(var_475) = &input.time_zone {
        scope_474.string(var_475);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_warm_pool(
    input: &crate::input::PutWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("AutoScalingGroupName");
    if let Some(var_477) = &input.auto_scaling_group_name {
        scope_476.string(var_477);
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("MaxGroupPreparedCapacity");
    if let Some(var_479) = &input.max_group_prepared_capacity {
        scope_478.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_479).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("MinSize");
    if let Some(var_481) = &input.min_size {
        scope_480.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("PoolState");
    if let Some(var_483) = &input.pool_state {
        scope_482.string(var_483.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_record_lifecycle_action_heartbeat(
    input: &crate::input::RecordLifecycleActionHeartbeatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RecordLifecycleActionHeartbeat", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("LifecycleHookName");
    if let Some(var_485) = &input.lifecycle_hook_name {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("AutoScalingGroupName");
    if let Some(var_487) = &input.auto_scaling_group_name {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("LifecycleActionToken");
    if let Some(var_489) = &input.lifecycle_action_token {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("InstanceId");
    if let Some(var_491) = &input.instance_id {
        scope_490.string(var_491);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_processes(
    input: &crate::input::ResumeProcessesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResumeProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("AutoScalingGroupName");
    if let Some(var_493) = &input.auto_scaling_group_name {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("ScalingProcesses");
    if let Some(var_495) = &input.scaling_processes {
        let mut list_497 = scope_494.start_list(false, None);
        for item_496 in var_495 {
            #[allow(unused_mut)]
            let mut entry_498 = list_497.entry();
            entry_498.string(item_496);
        }
        list_497.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_desired_capacity(
    input: &crate::input::SetDesiredCapacityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetDesiredCapacity", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("AutoScalingGroupName");
    if let Some(var_500) = &input.auto_scaling_group_name {
        scope_499.string(var_500);
    }
    #[allow(unused_mut)]
    let mut scope_501 = writer.prefix("DesiredCapacity");
    if let Some(var_502) = &input.desired_capacity {
        scope_501.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_502).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("HonorCooldown");
    if let Some(var_504) = &input.honor_cooldown {
        scope_503.boolean(*var_504);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_health(
    input: &crate::input::SetInstanceHealthInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetInstanceHealth", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("InstanceId");
    if let Some(var_506) = &input.instance_id {
        scope_505.string(var_506);
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("HealthStatus");
    if let Some(var_508) = &input.health_status {
        scope_507.string(var_508);
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("ShouldRespectGracePeriod");
    if let Some(var_510) = &input.should_respect_grace_period {
        scope_509.boolean(*var_510);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_protection(
    input: &crate::input::SetInstanceProtectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetInstanceProtection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("InstanceIds");
    if let Some(var_512) = &input.instance_ids {
        let mut list_514 = scope_511.start_list(false, None);
        for item_513 in var_512 {
            #[allow(unused_mut)]
            let mut entry_515 = list_514.entry();
            entry_515.string(item_513);
        }
        list_514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("AutoScalingGroupName");
    if let Some(var_517) = &input.auto_scaling_group_name {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("ProtectedFromScaleIn");
    if let Some(var_519) = &input.protected_from_scale_in {
        scope_518.boolean(*var_519);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instance_refresh(
    input: &crate::input::StartInstanceRefreshInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("AutoScalingGroupName");
    if let Some(var_521) = &input.auto_scaling_group_name {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("Strategy");
    if let Some(var_523) = &input.strategy {
        scope_522.string(var_523.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("DesiredConfiguration");
    if let Some(var_525) = &input.desired_configuration {
        crate::query_ser::serialize_structure_crate_model_desired_configuration(scope_524, var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Preferences");
    if let Some(var_527) = &input.preferences {
        crate::query_ser::serialize_structure_crate_model_refresh_preferences(scope_526, var_527);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_suspend_processes(
    input: &crate::input::SuspendProcessesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SuspendProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("AutoScalingGroupName");
    if let Some(var_529) = &input.auto_scaling_group_name {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("ScalingProcesses");
    if let Some(var_531) = &input.scaling_processes {
        let mut list_533 = scope_530.start_list(false, None);
        for item_532 in var_531 {
            #[allow(unused_mut)]
            let mut entry_534 = list_533.entry();
            entry_534.string(item_532);
        }
        list_533.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instance_in_auto_scaling_group(
    input: &crate::input::TerminateInstanceInAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "TerminateInstanceInAutoScalingGroup",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("InstanceId");
    if let Some(var_536) = &input.instance_id {
        scope_535.string(var_536);
    }
    #[allow(unused_mut)]
    let mut scope_537 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_538) = &input.should_decrement_desired_capacity {
        scope_537.boolean(*var_538);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_auto_scaling_group(
    input: &crate::input::UpdateAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("AutoScalingGroupName");
    if let Some(var_540) = &input.auto_scaling_group_name {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("LaunchConfigurationName");
    if let Some(var_542) = &input.launch_configuration_name {
        scope_541.string(var_542);
    }
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("LaunchTemplate");
    if let Some(var_544) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_543, var_544,
        );
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_546) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(
            scope_545, var_546,
        );
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("MinSize");
    if let Some(var_548) = &input.min_size {
        scope_547.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_548).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("MaxSize");
    if let Some(var_550) = &input.max_size {
        scope_549.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_550).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("DesiredCapacity");
    if let Some(var_552) = &input.desired_capacity {
        scope_551.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_552).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("DefaultCooldown");
    if let Some(var_554) = &input.default_cooldown {
        scope_553.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("AvailabilityZones");
    if let Some(var_556) = &input.availability_zones {
        let mut list_558 = scope_555.start_list(false, None);
        for item_557 in var_556 {
            #[allow(unused_mut)]
            let mut entry_559 = list_558.entry();
            entry_559.string(item_557);
        }
        list_558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("HealthCheckType");
    if let Some(var_561) = &input.health_check_type {
        scope_560.string(var_561);
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_563) = &input.health_check_grace_period {
        scope_562.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_563).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("PlacementGroup");
    if let Some(var_565) = &input.placement_group {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_567) = &input.vpc_zone_identifier {
        scope_566.string(var_567);
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("TerminationPolicies");
    if let Some(var_569) = &input.termination_policies {
        let mut list_571 = scope_568.start_list(false, None);
        for item_570 in var_569 {
            #[allow(unused_mut)]
            let mut entry_572 = list_571.entry();
            entry_572.string(item_570);
        }
        list_571.finish();
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_574) = &input.new_instances_protected_from_scale_in {
        scope_573.boolean(*var_574);
    }
    #[allow(unused_mut)]
    let mut scope_575 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_576) = &input.service_linked_role_arn {
        scope_575.string(var_576);
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_578) = &input.max_instance_lifetime {
        scope_577.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_578).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("CapacityRebalance");
    if let Some(var_580) = &input.capacity_rebalance {
        scope_579.boolean(*var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("Context");
    if let Some(var_582) = &input.context {
        scope_581.string(var_582);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
