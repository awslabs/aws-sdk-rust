// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_attach_instances(
    input: &crate::input::AttachInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AttachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceIds");
    if let Some(var_2) = &input.instance_ids {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("AutoScalingGroupName");
    if let Some(var_7) = &input.auto_scaling_group_name {
        scope_6.string(var_7);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancers(
    input: &crate::input::AttachLoadBalancersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AttachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("AutoScalingGroupName");
    if let Some(var_9) = &input.auto_scaling_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("LoadBalancerNames");
    if let Some(var_11) = &input.load_balancer_names {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancer_target_groups(
    input: &crate::input::AttachLoadBalancerTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AttachLoadBalancerTargetGroups",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AutoScalingGroupName");
    if let Some(var_16) = &input.auto_scaling_group_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TargetGroupARNs");
    if let Some(var_18) = &input.target_group_ar_ns {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_scheduled_action(
    input: &crate::input::BatchDeleteScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchDeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("AutoScalingGroupName");
    if let Some(var_23) = &input.auto_scaling_group_name {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ScheduledActionNames");
    if let Some(var_25) = &input.scheduled_action_names {
        let mut list_27 = scope_24.start_list(false, None);
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_put_scheduled_update_group_action(
    input: &crate::input::BatchPutScheduledUpdateGroupActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "BatchPutScheduledUpdateGroupAction",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("AutoScalingGroupName");
    if let Some(var_30) = &input.auto_scaling_group_name {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ScheduledUpdateGroupActions");
    if let Some(var_32) = &input.scheduled_update_group_actions {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_update_group_action_request(entry_35, item_33)?;
        }
        list_34.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_instance_refresh(
    input: &crate::input::CancelInstanceRefreshInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CancelInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("AutoScalingGroupName");
    if let Some(var_37) = &input.auto_scaling_group_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_lifecycle_action(
    input: &crate::input::CompleteLifecycleActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CompleteLifecycleAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("LifecycleHookName");
    if let Some(var_39) = &input.lifecycle_hook_name {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("AutoScalingGroupName");
    if let Some(var_41) = &input.auto_scaling_group_name {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("LifecycleActionToken");
    if let Some(var_43) = &input.lifecycle_action_token {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("LifecycleActionResult");
    if let Some(var_45) = &input.lifecycle_action_result {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("InstanceId");
    if let Some(var_47) = &input.instance_id {
        scope_46.string(var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_auto_scaling_group(
    input: &crate::input::CreateAutoScalingGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("AutoScalingGroupName");
    if let Some(var_49) = &input.auto_scaling_group_name {
        scope_48.string(var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("LaunchConfigurationName");
    if let Some(var_51) = &input.launch_configuration_name {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("LaunchTemplate");
    if let Some(var_53) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_52, var_53,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_55) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(scope_54, var_55)?;
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("InstanceId");
    if let Some(var_57) = &input.instance_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("MinSize");
    if let Some(var_59) = &input.min_size {
        scope_58.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("MaxSize");
    if let Some(var_61) = &input.max_size {
        scope_60.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("DesiredCapacity");
    if let Some(var_63) = &input.desired_capacity {
        scope_62.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("DefaultCooldown");
    if let Some(var_65) = &input.default_cooldown {
        scope_64.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AvailabilityZones");
    if let Some(var_67) = &input.availability_zones {
        let mut list_69 = scope_66.start_list(false, None);
        for item_68 in var_67 {
            #[allow(unused_mut)]
            let mut entry_70 = list_69.entry();
            entry_70.string(item_68);
        }
        list_69.finish();
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("LoadBalancerNames");
    if let Some(var_72) = &input.load_balancer_names {
        let mut list_74 = scope_71.start_list(false, None);
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            entry_75.string(item_73);
        }
        list_74.finish();
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("TargetGroupARNs");
    if let Some(var_77) = &input.target_group_ar_ns {
        let mut list_79 = scope_76.start_list(false, None);
        for item_78 in var_77 {
            #[allow(unused_mut)]
            let mut entry_80 = list_79.entry();
            entry_80.string(item_78);
        }
        list_79.finish();
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("HealthCheckType");
    if let Some(var_82) = &input.health_check_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_84) = &input.health_check_grace_period {
        scope_83.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("PlacementGroup");
    if let Some(var_86) = &input.placement_group {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_88) = &input.vpc_zone_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TerminationPolicies");
    if let Some(var_90) = &input.termination_policies {
        let mut list_92 = scope_89.start_list(false, None);
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_95) = &input.new_instances_protected_from_scale_in {
        scope_94.boolean(*var_95);
    }
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("CapacityRebalance");
    if let Some(var_97) = &input.capacity_rebalance {
        scope_96.boolean(*var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("LifecycleHookSpecificationList");
    if let Some(var_99) = &input.lifecycle_hook_specification_list {
        let mut list_101 = scope_98.start_list(false, None);
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            crate::query_ser::serialize_structure_crate_model_lifecycle_hook_specification(
                entry_102, item_100,
            )?;
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, None);
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105)?;
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_109) = &input.service_linked_role_arn {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_111) = &input.max_instance_lifetime {
        scope_110.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Context");
    if let Some(var_113) = &input.context {
        scope_112.string(var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("DesiredCapacityType");
    if let Some(var_115) = &input.desired_capacity_type {
        scope_114.string(var_115);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_configuration(
    input: &crate::input::CreateLaunchConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("LaunchConfigurationName");
    if let Some(var_117) = &input.launch_configuration_name {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("ImageId");
    if let Some(var_119) = &input.image_id {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("KeyName");
    if let Some(var_121) = &input.key_name {
        scope_120.string(var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SecurityGroups");
    if let Some(var_123) = &input.security_groups {
        let mut list_125 = scope_122.start_list(false, None);
        for item_124 in var_123 {
            #[allow(unused_mut)]
            let mut entry_126 = list_125.entry();
            entry_126.string(item_124);
        }
        list_125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("ClassicLinkVPCId");
    if let Some(var_128) = &input.classic_link_vpc_id {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("ClassicLinkVPCSecurityGroups");
    if let Some(var_130) = &input.classic_link_vpc_security_groups {
        let mut list_132 = scope_129.start_list(false, None);
        for item_131 in var_130 {
            #[allow(unused_mut)]
            let mut entry_133 = list_132.entry();
            entry_133.string(item_131);
        }
        list_132.finish();
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("UserData");
    if let Some(var_135) = &input.user_data {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("InstanceId");
    if let Some(var_137) = &input.instance_id {
        scope_136.string(var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("InstanceType");
    if let Some(var_139) = &input.instance_type {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("KernelId");
    if let Some(var_141) = &input.kernel_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("RamdiskId");
    if let Some(var_143) = &input.ramdisk_id {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("BlockDeviceMappings");
    if let Some(var_145) = &input.block_device_mappings {
        let mut list_147 = scope_144.start_list(false, None);
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_148, item_146,
            )?;
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("InstanceMonitoring");
    if let Some(var_150) = &input.instance_monitoring {
        crate::query_ser::serialize_structure_crate_model_instance_monitoring(scope_149, var_150)?;
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("SpotPrice");
    if let Some(var_152) = &input.spot_price {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("IamInstanceProfile");
    if let Some(var_154) = &input.iam_instance_profile {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("EbsOptimized");
    if let Some(var_156) = &input.ebs_optimized {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_158) = &input.associate_public_ip_address {
        scope_157.boolean(*var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("PlacementTenancy");
    if let Some(var_160) = &input.placement_tenancy {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("MetadataOptions");
    if let Some(var_162) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options(
            scope_161, var_162,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_or_update_tags(
    input: &crate::input::CreateOrUpdateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateOrUpdateTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("Tags");
    if let Some(var_164) = &input.tags {
        let mut list_166 = scope_163.start_list(false, None);
        for item_165 in var_164 {
            #[allow(unused_mut)]
            let mut entry_167 = list_166.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_167, item_165)?;
        }
        list_166.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_auto_scaling_group(
    input: &crate::input::DeleteAutoScalingGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("AutoScalingGroupName");
    if let Some(var_169) = &input.auto_scaling_group_name {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("ForceDelete");
    if let Some(var_171) = &input.force_delete {
        scope_170.boolean(*var_171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_configuration(
    input: &crate::input::DeleteLaunchConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("LaunchConfigurationName");
    if let Some(var_173) = &input.launch_configuration_name {
        scope_172.string(var_173);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_lifecycle_hook(
    input: &crate::input::DeleteLifecycleHookInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("LifecycleHookName");
    if let Some(var_175) = &input.lifecycle_hook_name {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("AutoScalingGroupName");
    if let Some(var_177) = &input.auto_scaling_group_name {
        scope_176.string(var_177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_notification_configuration(
    input: &crate::input::DeleteNotificationConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteNotificationConfiguration",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("AutoScalingGroupName");
    if let Some(var_179) = &input.auto_scaling_group_name {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("TopicARN");
    if let Some(var_181) = &input.topic_arn {
        scope_180.string(var_181);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_policy(
    input: &crate::input::DeletePolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("AutoScalingGroupName");
    if let Some(var_183) = &input.auto_scaling_group_name {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("PolicyName");
    if let Some(var_185) = &input.policy_name {
        scope_184.string(var_185);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("AutoScalingGroupName");
    if let Some(var_187) = &input.auto_scaling_group_name {
        scope_186.string(var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("ScheduledActionName");
    if let Some(var_189) = &input.scheduled_action_name {
        scope_188.string(var_189);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("Tags");
    if let Some(var_191) = &input.tags {
        let mut list_193 = scope_190.start_list(false, None);
        for item_192 in var_191 {
            #[allow(unused_mut)]
            let mut entry_194 = list_193.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_194, item_192)?;
        }
        list_193.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_warm_pool(
    input: &crate::input::DeleteWarmPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("AutoScalingGroupName");
    if let Some(var_196) = &input.auto_scaling_group_name {
        scope_195.string(var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("ForceDelete");
    if let Some(var_198) = &input.force_delete {
        scope_197.boolean(*var_198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2011-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_adjustment_types(
    input: &crate::input::DescribeAdjustmentTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAdjustmentTypes", "2011-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_groups(
    input: &crate::input::DescribeAutoScalingGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_200) = &input.auto_scaling_group_names {
        let mut list_202 = scope_199.start_list(false, None);
        for item_201 in var_200 {
            #[allow(unused_mut)]
            let mut entry_203 = list_202.entry();
            entry_203.string(item_201);
        }
        list_202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("NextToken");
    if let Some(var_205) = &input.next_token {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("MaxRecords");
    if let Some(var_207) = &input.max_records {
        scope_206.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("Filters");
    if let Some(var_209) = &input.filters {
        let mut list_211 = scope_208.start_list(false, None);
        for item_210 in var_209 {
            #[allow(unused_mut)]
            let mut entry_212 = list_211.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_212, item_210)?;
        }
        list_211.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_instances(
    input: &crate::input::DescribeAutoScalingInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("InstanceIds");
    if let Some(var_214) = &input.instance_ids {
        let mut list_216 = scope_213.start_list(false, None);
        for item_215 in var_214 {
            #[allow(unused_mut)]
            let mut entry_217 = list_216.entry();
            entry_217.string(item_215);
        }
        list_216.finish();
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("MaxRecords");
    if let Some(var_219) = &input.max_records {
        scope_218.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_219).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("NextToken");
    if let Some(var_221) = &input.next_token {
        scope_220.string(var_221);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_notification_types(
    input: &crate::input::DescribeAutoScalingNotificationTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAutoScalingNotificationTypes",
        "2011-01-01",
    );
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_refreshes(
    input: &crate::input::DescribeInstanceRefreshesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstanceRefreshes", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("AutoScalingGroupName");
    if let Some(var_223) = &input.auto_scaling_group_name {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("InstanceRefreshIds");
    if let Some(var_225) = &input.instance_refresh_ids {
        let mut list_227 = scope_224.start_list(false, None);
        for item_226 in var_225 {
            #[allow(unused_mut)]
            let mut entry_228 = list_227.entry();
            entry_228.string(item_226);
        }
        list_227.finish();
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("NextToken");
    if let Some(var_230) = &input.next_token {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("MaxRecords");
    if let Some(var_232) = &input.max_records {
        scope_231.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_configurations(
    input: &crate::input::DescribeLaunchConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLaunchConfigurations", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("LaunchConfigurationNames");
    if let Some(var_234) = &input.launch_configuration_names {
        let mut list_236 = scope_233.start_list(false, None);
        for item_235 in var_234 {
            #[allow(unused_mut)]
            let mut entry_237 = list_236.entry();
            entry_237.string(item_235);
        }
        list_236.finish();
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("NextToken");
    if let Some(var_239) = &input.next_token {
        scope_238.string(var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("MaxRecords");
    if let Some(var_241) = &input.max_records {
        scope_240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hooks(
    input: &crate::input::DescribeLifecycleHooksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHooks", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("AutoScalingGroupName");
    if let Some(var_243) = &input.auto_scaling_group_name {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("LifecycleHookNames");
    if let Some(var_245) = &input.lifecycle_hook_names {
        let mut list_247 = scope_244.start_list(false, None);
        for item_246 in var_245 {
            #[allow(unused_mut)]
            let mut entry_248 = list_247.entry();
            entry_248.string(item_246);
        }
        list_247.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hook_types(
    input: &crate::input::DescribeLifecycleHookTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHookTypes", "2011-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancers(
    input: &crate::input::DescribeLoadBalancersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("AutoScalingGroupName");
    if let Some(var_250) = &input.auto_scaling_group_name {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("NextToken");
    if let Some(var_252) = &input.next_token {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("MaxRecords");
    if let Some(var_254) = &input.max_records {
        scope_253.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_254).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancer_target_groups(
    input: &crate::input::DescribeLoadBalancerTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLoadBalancerTargetGroups",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("AutoScalingGroupName");
    if let Some(var_256) = &input.auto_scaling_group_name {
        scope_255.string(var_256);
    }
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("NextToken");
    if let Some(var_258) = &input.next_token {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("MaxRecords");
    if let Some(var_260) = &input.max_records {
        scope_259.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_260).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_metric_collection_types(
    input: &crate::input::DescribeMetricCollectionTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeMetricCollectionTypes", "2011-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_notification_configurations(
    input: &crate::input::DescribeNotificationConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNotificationConfigurations",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_262) = &input.auto_scaling_group_names {
        let mut list_264 = scope_261.start_list(false, None);
        for item_263 in var_262 {
            #[allow(unused_mut)]
            let mut entry_265 = list_264.entry();
            entry_265.string(item_263);
        }
        list_264.finish();
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("NextToken");
    if let Some(var_267) = &input.next_token {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("MaxRecords");
    if let Some(var_269) = &input.max_records {
        scope_268.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_269).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_policies(
    input: &crate::input::DescribePoliciesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePolicies", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("AutoScalingGroupName");
    if let Some(var_271) = &input.auto_scaling_group_name {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("PolicyNames");
    if let Some(var_273) = &input.policy_names {
        let mut list_275 = scope_272.start_list(false, None);
        for item_274 in var_273 {
            #[allow(unused_mut)]
            let mut entry_276 = list_275.entry();
            entry_276.string(item_274);
        }
        list_275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("PolicyTypes");
    if let Some(var_278) = &input.policy_types {
        let mut list_280 = scope_277.start_list(false, None);
        for item_279 in var_278 {
            #[allow(unused_mut)]
            let mut entry_281 = list_280.entry();
            entry_281.string(item_279);
        }
        list_280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("NextToken");
    if let Some(var_283) = &input.next_token {
        scope_282.string(var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("MaxRecords");
    if let Some(var_285) = &input.max_records {
        scope_284.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_285).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_activities(
    input: &crate::input::DescribeScalingActivitiesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScalingActivities", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("ActivityIds");
    if let Some(var_287) = &input.activity_ids {
        let mut list_289 = scope_286.start_list(false, None);
        for item_288 in var_287 {
            #[allow(unused_mut)]
            let mut entry_290 = list_289.entry();
            entry_290.string(item_288);
        }
        list_289.finish();
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("AutoScalingGroupName");
    if let Some(var_292) = &input.auto_scaling_group_name {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("IncludeDeletedGroups");
    if let Some(var_294) = &input.include_deleted_groups {
        scope_293.boolean(*var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("MaxRecords");
    if let Some(var_296) = &input.max_records {
        scope_295.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("NextToken");
    if let Some(var_298) = &input.next_token {
        scope_297.string(var_298);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_process_types(
    input: &crate::input::DescribeScalingProcessTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScalingProcessTypes", "2011-01-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("AutoScalingGroupName");
    if let Some(var_300) = &input.auto_scaling_group_name {
        scope_299.string(var_300);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("ScheduledActionNames");
    if let Some(var_302) = &input.scheduled_action_names {
        let mut list_304 = scope_301.start_list(false, None);
        for item_303 in var_302 {
            #[allow(unused_mut)]
            let mut entry_305 = list_304.entry();
            entry_305.string(item_303);
        }
        list_304.finish();
    }
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("StartTime");
    if let Some(var_307) = &input.start_time {
        scope_306.date_time(var_307, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("EndTime");
    if let Some(var_309) = &input.end_time {
        scope_308.date_time(var_309, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("NextToken");
    if let Some(var_311) = &input.next_token {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("MaxRecords");
    if let Some(var_313) = &input.max_records {
        scope_312.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_313).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Filters");
    if let Some(var_315) = &input.filters {
        let mut list_317 = scope_314.start_list(false, None);
        for item_316 in var_315 {
            #[allow(unused_mut)]
            let mut entry_318 = list_317.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_318, item_316)?;
        }
        list_317.finish();
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("NextToken");
    if let Some(var_320) = &input.next_token {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("MaxRecords");
    if let Some(var_322) = &input.max_records {
        scope_321.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_termination_policy_types(
    input: &crate::input::DescribeTerminationPolicyTypesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeTerminationPolicyTypes",
        "2011-01-01",
    );
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_warm_pool(
    input: &crate::input::DescribeWarmPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("AutoScalingGroupName");
    if let Some(var_324) = &input.auto_scaling_group_name {
        scope_323.string(var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("MaxRecords");
    if let Some(var_326) = &input.max_records {
        scope_325.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("NextToken");
    if let Some(var_328) = &input.next_token {
        scope_327.string(var_328);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_instances(
    input: &crate::input::DetachInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DetachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("InstanceIds");
    if let Some(var_330) = &input.instance_ids {
        let mut list_332 = scope_329.start_list(false, None);
        for item_331 in var_330 {
            #[allow(unused_mut)]
            let mut entry_333 = list_332.entry();
            entry_333.string(item_331);
        }
        list_332.finish();
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("AutoScalingGroupName");
    if let Some(var_335) = &input.auto_scaling_group_name {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_337) = &input.should_decrement_desired_capacity {
        scope_336.boolean(*var_337);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancers(
    input: &crate::input::DetachLoadBalancersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DetachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("AutoScalingGroupName");
    if let Some(var_339) = &input.auto_scaling_group_name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("LoadBalancerNames");
    if let Some(var_341) = &input.load_balancer_names {
        let mut list_343 = scope_340.start_list(false, None);
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancer_target_groups(
    input: &crate::input::DetachLoadBalancerTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DetachLoadBalancerTargetGroups",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("AutoScalingGroupName");
    if let Some(var_346) = &input.auto_scaling_group_name {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("TargetGroupARNs");
    if let Some(var_348) = &input.target_group_ar_ns {
        let mut list_350 = scope_347.start_list(false, None);
        for item_349 in var_348 {
            #[allow(unused_mut)]
            let mut entry_351 = list_350.entry();
            entry_351.string(item_349);
        }
        list_350.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_metrics_collection(
    input: &crate::input::DisableMetricsCollectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("AutoScalingGroupName");
    if let Some(var_353) = &input.auto_scaling_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Metrics");
    if let Some(var_355) = &input.metrics {
        let mut list_357 = scope_354.start_list(false, None);
        for item_356 in var_355 {
            #[allow(unused_mut)]
            let mut entry_358 = list_357.entry();
            entry_358.string(item_356);
        }
        list_357.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_metrics_collection(
    input: &crate::input::EnableMetricsCollectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("AutoScalingGroupName");
    if let Some(var_360) = &input.auto_scaling_group_name {
        scope_359.string(var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("Metrics");
    if let Some(var_362) = &input.metrics {
        let mut list_364 = scope_361.start_list(false, None);
        for item_363 in var_362 {
            #[allow(unused_mut)]
            let mut entry_365 = list_364.entry();
            entry_365.string(item_363);
        }
        list_364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("Granularity");
    if let Some(var_367) = &input.granularity {
        scope_366.string(var_367);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enter_standby(
    input: &crate::input::EnterStandbyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnterStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("InstanceIds");
    if let Some(var_369) = &input.instance_ids {
        let mut list_371 = scope_368.start_list(false, None);
        for item_370 in var_369 {
            #[allow(unused_mut)]
            let mut entry_372 = list_371.entry();
            entry_372.string(item_370);
        }
        list_371.finish();
    }
    #[allow(unused_mut)]
    let mut scope_373 = writer.prefix("AutoScalingGroupName");
    if let Some(var_374) = &input.auto_scaling_group_name {
        scope_373.string(var_374);
    }
    #[allow(unused_mut)]
    let mut scope_375 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_376) = &input.should_decrement_desired_capacity {
        scope_375.boolean(*var_376);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_execute_policy(
    input: &crate::input::ExecutePolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExecutePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_377 = writer.prefix("AutoScalingGroupName");
    if let Some(var_378) = &input.auto_scaling_group_name {
        scope_377.string(var_378);
    }
    #[allow(unused_mut)]
    let mut scope_379 = writer.prefix("PolicyName");
    if let Some(var_380) = &input.policy_name {
        scope_379.string(var_380);
    }
    #[allow(unused_mut)]
    let mut scope_381 = writer.prefix("HonorCooldown");
    if let Some(var_382) = &input.honor_cooldown {
        scope_381.boolean(*var_382);
    }
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("MetricValue");
    if let Some(var_384) = &input.metric_value {
        scope_383.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_384).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("BreachThreshold");
    if let Some(var_386) = &input.breach_threshold {
        scope_385.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_386).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_exit_standby(
    input: &crate::input::ExitStandbyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ExitStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("InstanceIds");
    if let Some(var_388) = &input.instance_ids {
        let mut list_390 = scope_387.start_list(false, None);
        for item_389 in var_388 {
            #[allow(unused_mut)]
            let mut entry_391 = list_390.entry();
            entry_391.string(item_389);
        }
        list_390.finish();
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("AutoScalingGroupName");
    if let Some(var_393) = &input.auto_scaling_group_name {
        scope_392.string(var_393);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_predictive_scaling_forecast(
    input: &crate::input::GetPredictiveScalingForecastInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetPredictiveScalingForecast", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("AutoScalingGroupName");
    if let Some(var_395) = &input.auto_scaling_group_name {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("PolicyName");
    if let Some(var_397) = &input.policy_name {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("StartTime");
    if let Some(var_399) = &input.start_time {
        scope_398.date_time(var_399, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("EndTime");
    if let Some(var_401) = &input.end_time {
        scope_400.date_time(var_401, aws_smithy_types::date_time::Format::DateTime)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_lifecycle_hook(
    input: &crate::input::PutLifecycleHookInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("LifecycleHookName");
    if let Some(var_403) = &input.lifecycle_hook_name {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("AutoScalingGroupName");
    if let Some(var_405) = &input.auto_scaling_group_name {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("LifecycleTransition");
    if let Some(var_407) = &input.lifecycle_transition {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("RoleARN");
    if let Some(var_409) = &input.role_arn {
        scope_408.string(var_409);
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("NotificationTargetARN");
    if let Some(var_411) = &input.notification_target_arn {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("NotificationMetadata");
    if let Some(var_413) = &input.notification_metadata {
        scope_412.string(var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("HeartbeatTimeout");
    if let Some(var_415) = &input.heartbeat_timeout {
        scope_414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("DefaultResult");
    if let Some(var_417) = &input.default_result {
        scope_416.string(var_417);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_notification_configuration(
    input: &crate::input::PutNotificationConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PutNotificationConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("AutoScalingGroupName");
    if let Some(var_419) = &input.auto_scaling_group_name {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("TopicARN");
    if let Some(var_421) = &input.topic_arn {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("NotificationTypes");
    if let Some(var_423) = &input.notification_types {
        let mut list_425 = scope_422.start_list(false, None);
        for item_424 in var_423 {
            #[allow(unused_mut)]
            let mut entry_426 = list_425.entry();
            entry_426.string(item_424);
        }
        list_425.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scaling_policy(
    input: &crate::input::PutScalingPolicyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutScalingPolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("AutoScalingGroupName");
    if let Some(var_428) = &input.auto_scaling_group_name {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("PolicyName");
    if let Some(var_430) = &input.policy_name {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("PolicyType");
    if let Some(var_432) = &input.policy_type {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("AdjustmentType");
    if let Some(var_434) = &input.adjustment_type {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("MinAdjustmentStep");
    if let Some(var_436) = &input.min_adjustment_step {
        scope_435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MinAdjustmentMagnitude");
    if let Some(var_438) = &input.min_adjustment_magnitude {
        scope_437.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_438).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("ScalingAdjustment");
    if let Some(var_440) = &input.scaling_adjustment {
        scope_439.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("Cooldown");
    if let Some(var_442) = &input.cooldown {
        scope_441.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_442).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("MetricAggregationType");
    if let Some(var_444) = &input.metric_aggregation_type {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("StepAdjustments");
    if let Some(var_446) = &input.step_adjustments {
        let mut list_448 = scope_445.start_list(false, None);
        for item_447 in var_446 {
            #[allow(unused_mut)]
            let mut entry_449 = list_448.entry();
            crate::query_ser::serialize_structure_crate_model_step_adjustment(entry_449, item_447)?;
        }
        list_448.finish();
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("EstimatedInstanceWarmup");
    if let Some(var_451) = &input.estimated_instance_warmup {
        scope_450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_451).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("TargetTrackingConfiguration");
    if let Some(var_453) = &input.target_tracking_configuration {
        crate::query_ser::serialize_structure_crate_model_target_tracking_configuration(
            scope_452, var_453,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("Enabled");
    if let Some(var_455) = &input.enabled {
        scope_454.boolean(*var_455);
    }
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("PredictiveScalingConfiguration");
    if let Some(var_457) = &input.predictive_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_configuration(
            scope_456, var_457,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scheduled_update_group_action(
    input: &crate::input::PutScheduledUpdateGroupActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PutScheduledUpdateGroupAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("AutoScalingGroupName");
    if let Some(var_459) = &input.auto_scaling_group_name {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("ScheduledActionName");
    if let Some(var_461) = &input.scheduled_action_name {
        scope_460.string(var_461);
    }
    #[allow(unused_mut)]
    let mut scope_462 = writer.prefix("Time");
    if let Some(var_463) = &input.time {
        scope_462.date_time(var_463, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("StartTime");
    if let Some(var_465) = &input.start_time {
        scope_464.date_time(var_465, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("EndTime");
    if let Some(var_467) = &input.end_time {
        scope_466.date_time(var_467, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("Recurrence");
    if let Some(var_469) = &input.recurrence {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("MinSize");
    if let Some(var_471) = &input.min_size {
        scope_470.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_471).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("MaxSize");
    if let Some(var_473) = &input.max_size {
        scope_472.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_473).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("DesiredCapacity");
    if let Some(var_475) = &input.desired_capacity {
        scope_474.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("TimeZone");
    if let Some(var_477) = &input.time_zone {
        scope_476.string(var_477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_warm_pool(
    input: &crate::input::PutWarmPoolInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("AutoScalingGroupName");
    if let Some(var_479) = &input.auto_scaling_group_name {
        scope_478.string(var_479);
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("MaxGroupPreparedCapacity");
    if let Some(var_481) = &input.max_group_prepared_capacity {
        scope_480.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("MinSize");
    if let Some(var_483) = &input.min_size {
        scope_482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("PoolState");
    if let Some(var_485) = &input.pool_state {
        scope_484.string(var_485.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("InstanceReusePolicy");
    if let Some(var_487) = &input.instance_reuse_policy {
        crate::query_ser::serialize_structure_crate_model_instance_reuse_policy(
            scope_486, var_487,
        )?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_record_lifecycle_action_heartbeat(
    input: &crate::input::RecordLifecycleActionHeartbeatInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RecordLifecycleActionHeartbeat",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("LifecycleHookName");
    if let Some(var_489) = &input.lifecycle_hook_name {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("AutoScalingGroupName");
    if let Some(var_491) = &input.auto_scaling_group_name {
        scope_490.string(var_491);
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("LifecycleActionToken");
    if let Some(var_493) = &input.lifecycle_action_token {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("InstanceId");
    if let Some(var_495) = &input.instance_id {
        scope_494.string(var_495);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_processes(
    input: &crate::input::ResumeProcessesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResumeProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("AutoScalingGroupName");
    if let Some(var_497) = &input.auto_scaling_group_name {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("ScalingProcesses");
    if let Some(var_499) = &input.scaling_processes {
        let mut list_501 = scope_498.start_list(false, None);
        for item_500 in var_499 {
            #[allow(unused_mut)]
            let mut entry_502 = list_501.entry();
            entry_502.string(item_500);
        }
        list_501.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_desired_capacity(
    input: &crate::input::SetDesiredCapacityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetDesiredCapacity", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_503 = writer.prefix("AutoScalingGroupName");
    if let Some(var_504) = &input.auto_scaling_group_name {
        scope_503.string(var_504);
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("DesiredCapacity");
    if let Some(var_506) = &input.desired_capacity {
        scope_505.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_506).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_507 = writer.prefix("HonorCooldown");
    if let Some(var_508) = &input.honor_cooldown {
        scope_507.boolean(*var_508);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_health(
    input: &crate::input::SetInstanceHealthInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetInstanceHealth", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("InstanceId");
    if let Some(var_510) = &input.instance_id {
        scope_509.string(var_510);
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("HealthStatus");
    if let Some(var_512) = &input.health_status {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("ShouldRespectGracePeriod");
    if let Some(var_514) = &input.should_respect_grace_period {
        scope_513.boolean(*var_514);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_protection(
    input: &crate::input::SetInstanceProtectionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetInstanceProtection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("InstanceIds");
    if let Some(var_516) = &input.instance_ids {
        let mut list_518 = scope_515.start_list(false, None);
        for item_517 in var_516 {
            #[allow(unused_mut)]
            let mut entry_519 = list_518.entry();
            entry_519.string(item_517);
        }
        list_518.finish();
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("AutoScalingGroupName");
    if let Some(var_521) = &input.auto_scaling_group_name {
        scope_520.string(var_521);
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("ProtectedFromScaleIn");
    if let Some(var_523) = &input.protected_from_scale_in {
        scope_522.boolean(*var_523);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instance_refresh(
    input: &crate::input::StartInstanceRefreshInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("AutoScalingGroupName");
    if let Some(var_525) = &input.auto_scaling_group_name {
        scope_524.string(var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Strategy");
    if let Some(var_527) = &input.strategy {
        scope_526.string(var_527.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("DesiredConfiguration");
    if let Some(var_529) = &input.desired_configuration {
        crate::query_ser::serialize_structure_crate_model_desired_configuration(
            scope_528, var_529,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Preferences");
    if let Some(var_531) = &input.preferences {
        crate::query_ser::serialize_structure_crate_model_refresh_preferences(scope_530, var_531)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_suspend_processes(
    input: &crate::input::SuspendProcessesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SuspendProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("AutoScalingGroupName");
    if let Some(var_533) = &input.auto_scaling_group_name {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("ScalingProcesses");
    if let Some(var_535) = &input.scaling_processes {
        let mut list_537 = scope_534.start_list(false, None);
        for item_536 in var_535 {
            #[allow(unused_mut)]
            let mut entry_538 = list_537.entry();
            entry_538.string(item_536);
        }
        list_537.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instance_in_auto_scaling_group(
    input: &crate::input::TerminateInstanceInAutoScalingGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "TerminateInstanceInAutoScalingGroup",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("InstanceId");
    if let Some(var_540) = &input.instance_id {
        scope_539.string(var_540);
    }
    #[allow(unused_mut)]
    let mut scope_541 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_542) = &input.should_decrement_desired_capacity {
        scope_541.boolean(*var_542);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_auto_scaling_group(
    input: &crate::input::UpdateAutoScalingGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_543 = writer.prefix("AutoScalingGroupName");
    if let Some(var_544) = &input.auto_scaling_group_name {
        scope_543.string(var_544);
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("LaunchConfigurationName");
    if let Some(var_546) = &input.launch_configuration_name {
        scope_545.string(var_546);
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("LaunchTemplate");
    if let Some(var_548) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_547, var_548,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_550) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(
            scope_549, var_550,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("MinSize");
    if let Some(var_552) = &input.min_size {
        scope_551.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_552).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("MaxSize");
    if let Some(var_554) = &input.max_size {
        scope_553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("DesiredCapacity");
    if let Some(var_556) = &input.desired_capacity {
        scope_555.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_556).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("DefaultCooldown");
    if let Some(var_558) = &input.default_cooldown {
        scope_557.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("AvailabilityZones");
    if let Some(var_560) = &input.availability_zones {
        let mut list_562 = scope_559.start_list(false, None);
        for item_561 in var_560 {
            #[allow(unused_mut)]
            let mut entry_563 = list_562.entry();
            entry_563.string(item_561);
        }
        list_562.finish();
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("HealthCheckType");
    if let Some(var_565) = &input.health_check_type {
        scope_564.string(var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_567) = &input.health_check_grace_period {
        scope_566.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_567).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("PlacementGroup");
    if let Some(var_569) = &input.placement_group {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_571) = &input.vpc_zone_identifier {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("TerminationPolicies");
    if let Some(var_573) = &input.termination_policies {
        let mut list_575 = scope_572.start_list(false, None);
        for item_574 in var_573 {
            #[allow(unused_mut)]
            let mut entry_576 = list_575.entry();
            entry_576.string(item_574);
        }
        list_575.finish();
    }
    #[allow(unused_mut)]
    let mut scope_577 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_578) = &input.new_instances_protected_from_scale_in {
        scope_577.boolean(*var_578);
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_580) = &input.service_linked_role_arn {
        scope_579.string(var_580);
    }
    #[allow(unused_mut)]
    let mut scope_581 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_582) = &input.max_instance_lifetime {
        scope_581.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_582).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("CapacityRebalance");
    if let Some(var_584) = &input.capacity_rebalance {
        scope_583.boolean(*var_584);
    }
    #[allow(unused_mut)]
    let mut scope_585 = writer.prefix("Context");
    if let Some(var_586) = &input.context {
        scope_585.string(var_586);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("DesiredCapacityType");
    if let Some(var_588) = &input.desired_capacity_type {
        scope_587.string(var_588);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
