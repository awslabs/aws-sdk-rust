// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_attach_instances(
    input: &crate::input::AttachInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceIds");
    if let Some(var_2) = &input.instance_ids {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("AutoScalingGroupName");
    if let Some(var_7) = &input.auto_scaling_group_name {
        scope_6.string(var_7);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancers(
    input: &crate::input::AttachLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "AttachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("AutoScalingGroupName");
    if let Some(var_9) = &input.auto_scaling_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("LoadBalancerNames");
    if let Some(var_11) = &input.load_balancer_names {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_attach_load_balancer_target_groups(
    input: &crate::input::AttachLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "AttachLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AutoScalingGroupName");
    if let Some(var_16) = &input.auto_scaling_group_name {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TargetGroupARNs");
    if let Some(var_18) = &input.target_group_ar_ns {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_scheduled_action(
    input: &crate::input::BatchDeleteScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "BatchDeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("AutoScalingGroupName");
    if let Some(var_23) = &input.auto_scaling_group_name {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ScheduledActionNames");
    if let Some(var_25) = &input.scheduled_action_names {
        let mut list_27 = scope_24.start_list(false, None);
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_put_scheduled_update_group_action(
    input: &crate::input::BatchPutScheduledUpdateGroupActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "BatchPutScheduledUpdateGroupAction",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("AutoScalingGroupName");
    if let Some(var_30) = &input.auto_scaling_group_name {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ScheduledUpdateGroupActions");
    if let Some(var_32) = &input.scheduled_update_group_actions {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_update_group_action_request(
                entry_35, item_33,
            );
        }
        list_34.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_instance_refresh(
    input: &crate::input::CancelInstanceRefreshInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CancelInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("AutoScalingGroupName");
    if let Some(var_37) = &input.auto_scaling_group_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_lifecycle_action(
    input: &crate::input::CompleteLifecycleActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CompleteLifecycleAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("LifecycleHookName");
    if let Some(var_39) = &input.lifecycle_hook_name {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("AutoScalingGroupName");
    if let Some(var_41) = &input.auto_scaling_group_name {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("LifecycleActionToken");
    if let Some(var_43) = &input.lifecycle_action_token {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("LifecycleActionResult");
    if let Some(var_45) = &input.lifecycle_action_result {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("InstanceId");
    if let Some(var_47) = &input.instance_id {
        scope_46.string(var_47);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_auto_scaling_group(
    input: &crate::input::CreateAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("AutoScalingGroupName");
    if let Some(var_49) = &input.auto_scaling_group_name {
        scope_48.string(var_49);
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("LaunchConfigurationName");
    if let Some(var_51) = &input.launch_configuration_name {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("LaunchTemplate");
    if let Some(var_53) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_52, var_53,
        );
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_55) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(scope_54, var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("InstanceId");
    if let Some(var_57) = &input.instance_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("MinSize");
    if let Some(var_59) = &input.min_size {
        scope_58.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_59).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("MaxSize");
    if let Some(var_61) = &input.max_size {
        scope_60.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("DesiredCapacity");
    if let Some(var_63) = &input.desired_capacity {
        scope_62.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("DefaultCooldown");
    if let Some(var_65) = &input.default_cooldown {
        scope_64.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("AvailabilityZones");
    if let Some(var_67) = &input.availability_zones {
        let mut list_69 = scope_66.start_list(false, None);
        for item_68 in var_67 {
            #[allow(unused_mut)]
            let mut entry_70 = list_69.entry();
            entry_70.string(item_68);
        }
        list_69.finish();
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("LoadBalancerNames");
    if let Some(var_72) = &input.load_balancer_names {
        let mut list_74 = scope_71.start_list(false, None);
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            entry_75.string(item_73);
        }
        list_74.finish();
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("TargetGroupARNs");
    if let Some(var_77) = &input.target_group_ar_ns {
        let mut list_79 = scope_76.start_list(false, None);
        for item_78 in var_77 {
            #[allow(unused_mut)]
            let mut entry_80 = list_79.entry();
            entry_80.string(item_78);
        }
        list_79.finish();
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("HealthCheckType");
    if let Some(var_82) = &input.health_check_type {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_84) = &input.health_check_grace_period {
        scope_83.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("PlacementGroup");
    if let Some(var_86) = &input.placement_group {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_88) = &input.vpc_zone_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TerminationPolicies");
    if let Some(var_90) = &input.termination_policies {
        let mut list_92 = scope_89.start_list(false, None);
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            entry_93.string(item_91);
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_95) = &input.new_instances_protected_from_scale_in {
        scope_94.boolean(*var_95);
    }
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("CapacityRebalance");
    if let Some(var_97) = &input.capacity_rebalance {
        scope_96.boolean(*var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("LifecycleHookSpecificationList");
    if let Some(var_99) = &input.lifecycle_hook_specification_list {
        let mut list_101 = scope_98.start_list(false, None);
        for item_100 in var_99 {
            #[allow(unused_mut)]
            let mut entry_102 = list_101.entry();
            crate::query_ser::serialize_structure_crate_model_lifecycle_hook_specification(
                entry_102, item_100,
            );
        }
        list_101.finish();
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Tags");
    if let Some(var_104) = &input.tags {
        let mut list_106 = scope_103.start_list(false, None);
        for item_105 in var_104 {
            #[allow(unused_mut)]
            let mut entry_107 = list_106.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_107, item_105);
        }
        list_106.finish();
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_109) = &input.service_linked_role_arn {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_111) = &input.max_instance_lifetime {
        scope_110.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Context");
    if let Some(var_113) = &input.context {
        scope_112.string(var_113);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_launch_configuration(
    input: &crate::input::CreateLaunchConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "CreateLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("LaunchConfigurationName");
    if let Some(var_115) = &input.launch_configuration_name {
        scope_114.string(var_115);
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("ImageId");
    if let Some(var_117) = &input.image_id {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("KeyName");
    if let Some(var_119) = &input.key_name {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("SecurityGroups");
    if let Some(var_121) = &input.security_groups {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            entry_124.string(item_122);
        }
        list_123.finish();
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("ClassicLinkVPCId");
    if let Some(var_126) = &input.classic_link_vpc_id {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("ClassicLinkVPCSecurityGroups");
    if let Some(var_128) = &input.classic_link_vpc_security_groups {
        let mut list_130 = scope_127.start_list(false, None);
        for item_129 in var_128 {
            #[allow(unused_mut)]
            let mut entry_131 = list_130.entry();
            entry_131.string(item_129);
        }
        list_130.finish();
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("UserData");
    if let Some(var_133) = &input.user_data {
        scope_132.string(var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("InstanceId");
    if let Some(var_135) = &input.instance_id {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("InstanceType");
    if let Some(var_137) = &input.instance_type {
        scope_136.string(var_137);
    }
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("KernelId");
    if let Some(var_139) = &input.kernel_id {
        scope_138.string(var_139);
    }
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("RamdiskId");
    if let Some(var_141) = &input.ramdisk_id {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("BlockDeviceMappings");
    if let Some(var_143) = &input.block_device_mappings {
        let mut list_145 = scope_142.start_list(false, None);
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_146, item_144,
            );
        }
        list_145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("InstanceMonitoring");
    if let Some(var_148) = &input.instance_monitoring {
        crate::query_ser::serialize_structure_crate_model_instance_monitoring(scope_147, var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("SpotPrice");
    if let Some(var_150) = &input.spot_price {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("IamInstanceProfile");
    if let Some(var_152) = &input.iam_instance_profile {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("EbsOptimized");
    if let Some(var_154) = &input.ebs_optimized {
        scope_153.boolean(*var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_156) = &input.associate_public_ip_address {
        scope_155.boolean(*var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("PlacementTenancy");
    if let Some(var_158) = &input.placement_tenancy {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("MetadataOptions");
    if let Some(var_160) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_instance_metadata_options(
            scope_159, var_160,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_or_update_tags(
    input: &crate::input::CreateOrUpdateTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "CreateOrUpdateTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Tags");
    if let Some(var_162) = &input.tags {
        let mut list_164 = scope_161.start_list(false, None);
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_165, item_163);
        }
        list_164.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_auto_scaling_group(
    input: &crate::input::DeleteAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("AutoScalingGroupName");
    if let Some(var_167) = &input.auto_scaling_group_name {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("ForceDelete");
    if let Some(var_169) = &input.force_delete {
        scope_168.boolean(*var_169);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_launch_configuration(
    input: &crate::input::DeleteLaunchConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("LaunchConfigurationName");
    if let Some(var_171) = &input.launch_configuration_name {
        scope_170.string(var_171);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_lifecycle_hook(
    input: &crate::input::DeleteLifecycleHookInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("LifecycleHookName");
    if let Some(var_173) = &input.lifecycle_hook_name {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("AutoScalingGroupName");
    if let Some(var_175) = &input.auto_scaling_group_name {
        scope_174.string(var_175);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_notification_configuration(
    input: &crate::input::DeleteNotificationConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteNotificationConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("AutoScalingGroupName");
    if let Some(var_177) = &input.auto_scaling_group_name {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("TopicARN");
    if let Some(var_179) = &input.topic_arn {
        scope_178.string(var_179);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_policy(
    input: &crate::input::DeletePolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeletePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("AutoScalingGroupName");
    if let Some(var_181) = &input.auto_scaling_group_name {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("PolicyName");
    if let Some(var_183) = &input.policy_name {
        scope_182.string(var_183);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("AutoScalingGroupName");
    if let Some(var_185) = &input.auto_scaling_group_name {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("ScheduledActionName");
    if let Some(var_187) = &input.scheduled_action_name {
        scope_186.string(var_187);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("Tags");
    if let Some(var_189) = &input.tags {
        let mut list_191 = scope_188.start_list(false, None);
        for item_190 in var_189 {
            #[allow(unused_mut)]
            let mut entry_192 = list_191.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_192, item_190);
        }
        list_191.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_warm_pool(
    input: &crate::input::DeleteWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DeleteWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("AutoScalingGroupName");
    if let Some(var_194) = &input.auto_scaling_group_name {
        scope_193.string(var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("ForceDelete");
    if let Some(var_196) = &input.force_delete {
        scope_195.boolean(*var_196);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_adjustment_types(
    input: &crate::input::DescribeAdjustmentTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAdjustmentTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_groups(
    input: &crate::input::DescribeAutoScalingGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_198) = &input.auto_scaling_group_names {
        let mut list_200 = scope_197.start_list(false, None);
        for item_199 in var_198 {
            #[allow(unused_mut)]
            let mut entry_201 = list_200.entry();
            entry_201.string(item_199);
        }
        list_200.finish();
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("NextToken");
    if let Some(var_203) = &input.next_token {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("MaxRecords");
    if let Some(var_205) = &input.max_records {
        scope_204.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_instances(
    input: &crate::input::DescribeAutoScalingInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeAutoScalingInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("InstanceIds");
    if let Some(var_207) = &input.instance_ids {
        let mut list_209 = scope_206.start_list(false, None);
        for item_208 in var_207 {
            #[allow(unused_mut)]
            let mut entry_210 = list_209.entry();
            entry_210.string(item_208);
        }
        list_209.finish();
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("MaxRecords");
    if let Some(var_212) = &input.max_records {
        scope_211.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_212).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("NextToken");
    if let Some(var_214) = &input.next_token {
        scope_213.string(var_214);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_auto_scaling_notification_types(
    input: &crate::input::DescribeAutoScalingNotificationTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAutoScalingNotificationTypes",
        "2011-01-01",
    );
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_instance_refreshes(
    input: &crate::input::DescribeInstanceRefreshesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeInstanceRefreshes", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("AutoScalingGroupName");
    if let Some(var_216) = &input.auto_scaling_group_name {
        scope_215.string(var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceRefreshIds");
    if let Some(var_218) = &input.instance_refresh_ids {
        let mut list_220 = scope_217.start_list(false, None);
        for item_219 in var_218 {
            #[allow(unused_mut)]
            let mut entry_221 = list_220.entry();
            entry_221.string(item_219);
        }
        list_220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("NextToken");
    if let Some(var_223) = &input.next_token {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("MaxRecords");
    if let Some(var_225) = &input.max_records {
        scope_224.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_launch_configurations(
    input: &crate::input::DescribeLaunchConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLaunchConfigurations", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("LaunchConfigurationNames");
    if let Some(var_227) = &input.launch_configuration_names {
        let mut list_229 = scope_226.start_list(false, None);
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            entry_230.string(item_228);
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("NextToken");
    if let Some(var_232) = &input.next_token {
        scope_231.string(var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("MaxRecords");
    if let Some(var_234) = &input.max_records {
        scope_233.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_234).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hooks(
    input: &crate::input::DescribeLifecycleHooksInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHooks", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("AutoScalingGroupName");
    if let Some(var_236) = &input.auto_scaling_group_name {
        scope_235.string(var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("LifecycleHookNames");
    if let Some(var_238) = &input.lifecycle_hook_names {
        let mut list_240 = scope_237.start_list(false, None);
        for item_239 in var_238 {
            #[allow(unused_mut)]
            let mut entry_241 = list_240.entry();
            entry_241.string(item_239);
        }
        list_240.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_lifecycle_hook_types(
    input: &crate::input::DescribeLifecycleHookTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLifecycleHookTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancers(
    input: &crate::input::DescribeLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("AutoScalingGroupName");
    if let Some(var_243) = &input.auto_scaling_group_name {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("NextToken");
    if let Some(var_245) = &input.next_token {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("MaxRecords");
    if let Some(var_247) = &input.max_records {
        scope_246.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_247).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancer_target_groups(
    input: &crate::input::DescribeLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("AutoScalingGroupName");
    if let Some(var_249) = &input.auto_scaling_group_name {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("NextToken");
    if let Some(var_251) = &input.next_token {
        scope_250.string(var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("MaxRecords");
    if let Some(var_253) = &input.max_records {
        scope_252.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_253).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_metric_collection_types(
    input: &crate::input::DescribeMetricCollectionTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeMetricCollectionTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_notification_configurations(
    input: &crate::input::DescribeNotificationConfigurationsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNotificationConfigurations",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("AutoScalingGroupNames");
    if let Some(var_255) = &input.auto_scaling_group_names {
        let mut list_257 = scope_254.start_list(false, None);
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            entry_258.string(item_256);
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("NextToken");
    if let Some(var_260) = &input.next_token {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MaxRecords");
    if let Some(var_262) = &input.max_records {
        scope_261.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_policies(
    input: &crate::input::DescribePoliciesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribePolicies", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("AutoScalingGroupName");
    if let Some(var_264) = &input.auto_scaling_group_name {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("PolicyNames");
    if let Some(var_266) = &input.policy_names {
        let mut list_268 = scope_265.start_list(false, None);
        for item_267 in var_266 {
            #[allow(unused_mut)]
            let mut entry_269 = list_268.entry();
            entry_269.string(item_267);
        }
        list_268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("PolicyTypes");
    if let Some(var_271) = &input.policy_types {
        let mut list_273 = scope_270.start_list(false, None);
        for item_272 in var_271 {
            #[allow(unused_mut)]
            let mut entry_274 = list_273.entry();
            entry_274.string(item_272);
        }
        list_273.finish();
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("NextToken");
    if let Some(var_276) = &input.next_token {
        scope_275.string(var_276);
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("MaxRecords");
    if let Some(var_278) = &input.max_records {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_activities(
    input: &crate::input::DescribeScalingActivitiesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScalingActivities", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("ActivityIds");
    if let Some(var_280) = &input.activity_ids {
        let mut list_282 = scope_279.start_list(false, None);
        for item_281 in var_280 {
            #[allow(unused_mut)]
            let mut entry_283 = list_282.entry();
            entry_283.string(item_281);
        }
        list_282.finish();
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("AutoScalingGroupName");
    if let Some(var_285) = &input.auto_scaling_group_name {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("IncludeDeletedGroups");
    if let Some(var_287) = &input.include_deleted_groups {
        scope_286.boolean(*var_287);
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("MaxRecords");
    if let Some(var_289) = &input.max_records {
        scope_288.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("NextToken");
    if let Some(var_291) = &input.next_token {
        scope_290.string(var_291);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scaling_process_types(
    input: &crate::input::DescribeScalingProcessTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScalingProcessTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("AutoScalingGroupName");
    if let Some(var_293) = &input.auto_scaling_group_name {
        scope_292.string(var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("ScheduledActionNames");
    if let Some(var_295) = &input.scheduled_action_names {
        let mut list_297 = scope_294.start_list(false, None);
        for item_296 in var_295 {
            #[allow(unused_mut)]
            let mut entry_298 = list_297.entry();
            entry_298.string(item_296);
        }
        list_297.finish();
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("StartTime");
    if let Some(var_300) = &input.start_time {
        scope_299.instant(var_300, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("EndTime");
    if let Some(var_302) = &input.end_time {
        scope_301.instant(var_302, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("NextToken");
    if let Some(var_304) = &input.next_token {
        scope_303.string(var_304);
    }
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("MaxRecords");
    if let Some(var_306) = &input.max_records {
        scope_305.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_306).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("Filters");
    if let Some(var_308) = &input.filters {
        let mut list_310 = scope_307.start_list(false, None);
        for item_309 in var_308 {
            #[allow(unused_mut)]
            let mut entry_311 = list_310.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_311, item_309);
        }
        list_310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("NextToken");
    if let Some(var_313) = &input.next_token {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("MaxRecords");
    if let Some(var_315) = &input.max_records {
        scope_314.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_315).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_termination_policy_types(
    input: &crate::input::DescribeTerminationPolicyTypesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DescribeTerminationPolicyTypes", "2011-01-01");
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_warm_pool(
    input: &crate::input::DescribeWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DescribeWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("AutoScalingGroupName");
    if let Some(var_317) = &input.auto_scaling_group_name {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("MaxRecords");
    if let Some(var_319) = &input.max_records {
        scope_318.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_319).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("NextToken");
    if let Some(var_321) = &input.next_token {
        scope_320.string(var_321);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_instances(
    input: &crate::input::DetachInstancesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachInstances", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("InstanceIds");
    if let Some(var_323) = &input.instance_ids {
        let mut list_325 = scope_322.start_list(false, None);
        for item_324 in var_323 {
            #[allow(unused_mut)]
            let mut entry_326 = list_325.entry();
            entry_326.string(item_324);
        }
        list_325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("AutoScalingGroupName");
    if let Some(var_328) = &input.auto_scaling_group_name {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_330) = &input.should_decrement_desired_capacity {
        scope_329.boolean(*var_330);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancers(
    input: &crate::input::DetachLoadBalancersInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "DetachLoadBalancers", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("AutoScalingGroupName");
    if let Some(var_332) = &input.auto_scaling_group_name {
        scope_331.string(var_332);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("LoadBalancerNames");
    if let Some(var_334) = &input.load_balancer_names {
        let mut list_336 = scope_333.start_list(false, None);
        for item_335 in var_334 {
            #[allow(unused_mut)]
            let mut entry_337 = list_336.entry();
            entry_337.string(item_335);
        }
        list_336.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_detach_load_balancer_target_groups(
    input: &crate::input::DetachLoadBalancerTargetGroupsInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DetachLoadBalancerTargetGroups", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("AutoScalingGroupName");
    if let Some(var_339) = &input.auto_scaling_group_name {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("TargetGroupARNs");
    if let Some(var_341) = &input.target_group_ar_ns {
        let mut list_343 = scope_340.start_list(false, None);
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_metrics_collection(
    input: &crate::input::DisableMetricsCollectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "DisableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("AutoScalingGroupName");
    if let Some(var_346) = &input.auto_scaling_group_name {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Metrics");
    if let Some(var_348) = &input.metrics {
        let mut list_350 = scope_347.start_list(false, None);
        for item_349 in var_348 {
            #[allow(unused_mut)]
            let mut entry_351 = list_350.entry();
            entry_351.string(item_349);
        }
        list_350.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_metrics_collection(
    input: &crate::input::EnableMetricsCollectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "EnableMetricsCollection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("AutoScalingGroupName");
    if let Some(var_353) = &input.auto_scaling_group_name {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("Metrics");
    if let Some(var_355) = &input.metrics {
        let mut list_357 = scope_354.start_list(false, None);
        for item_356 in var_355 {
            #[allow(unused_mut)]
            let mut entry_358 = list_357.entry();
            entry_358.string(item_356);
        }
        list_357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("Granularity");
    if let Some(var_360) = &input.granularity {
        scope_359.string(var_360);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enter_standby(
    input: &crate::input::EnterStandbyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "EnterStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("InstanceIds");
    if let Some(var_362) = &input.instance_ids {
        let mut list_364 = scope_361.start_list(false, None);
        for item_363 in var_362 {
            #[allow(unused_mut)]
            let mut entry_365 = list_364.entry();
            entry_365.string(item_363);
        }
        list_364.finish();
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("AutoScalingGroupName");
    if let Some(var_367) = &input.auto_scaling_group_name {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_369) = &input.should_decrement_desired_capacity {
        scope_368.boolean(*var_369);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_execute_policy(
    input: &crate::input::ExecutePolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExecutePolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("AutoScalingGroupName");
    if let Some(var_371) = &input.auto_scaling_group_name {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("PolicyName");
    if let Some(var_373) = &input.policy_name {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("HonorCooldown");
    if let Some(var_375) = &input.honor_cooldown {
        scope_374.boolean(*var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("MetricValue");
    if let Some(var_377) = &input.metric_value {
        scope_376.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("BreachThreshold");
    if let Some(var_379) = &input.breach_threshold {
        scope_378.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_379).into()),
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_exit_standby(
    input: &crate::input::ExitStandbyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ExitStandby", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("InstanceIds");
    if let Some(var_381) = &input.instance_ids {
        let mut list_383 = scope_380.start_list(false, None);
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            entry_384.string(item_382);
        }
        list_383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("AutoScalingGroupName");
    if let Some(var_386) = &input.auto_scaling_group_name {
        scope_385.string(var_386);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_predictive_scaling_forecast(
    input: &crate::input::GetPredictiveScalingForecastInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "GetPredictiveScalingForecast", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("AutoScalingGroupName");
    if let Some(var_388) = &input.auto_scaling_group_name {
        scope_387.string(var_388);
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("PolicyName");
    if let Some(var_390) = &input.policy_name {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("StartTime");
    if let Some(var_392) = &input.start_time {
        scope_391.instant(var_392, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("EndTime");
    if let Some(var_394) = &input.end_time {
        scope_393.instant(var_394, smithy_types::instant::Format::DateTime);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_lifecycle_hook(
    input: &crate::input::PutLifecycleHookInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("LifecycleHookName");
    if let Some(var_396) = &input.lifecycle_hook_name {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("AutoScalingGroupName");
    if let Some(var_398) = &input.auto_scaling_group_name {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("LifecycleTransition");
    if let Some(var_400) = &input.lifecycle_transition {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("RoleARN");
    if let Some(var_402) = &input.role_arn {
        scope_401.string(var_402);
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("NotificationTargetARN");
    if let Some(var_404) = &input.notification_target_arn {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("NotificationMetadata");
    if let Some(var_406) = &input.notification_metadata {
        scope_405.string(var_406);
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("HeartbeatTimeout");
    if let Some(var_408) = &input.heartbeat_timeout {
        scope_407.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("DefaultResult");
    if let Some(var_410) = &input.default_result {
        scope_409.string(var_410);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_notification_configuration(
    input: &crate::input::PutNotificationConfigurationInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PutNotificationConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("AutoScalingGroupName");
    if let Some(var_412) = &input.auto_scaling_group_name {
        scope_411.string(var_412);
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("TopicARN");
    if let Some(var_414) = &input.topic_arn {
        scope_413.string(var_414);
    }
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("NotificationTypes");
    if let Some(var_416) = &input.notification_types {
        let mut list_418 = scope_415.start_list(false, None);
        for item_417 in var_416 {
            #[allow(unused_mut)]
            let mut entry_419 = list_418.entry();
            entry_419.string(item_417);
        }
        list_418.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scaling_policy(
    input: &crate::input::PutScalingPolicyInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutScalingPolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("AutoScalingGroupName");
    if let Some(var_421) = &input.auto_scaling_group_name {
        scope_420.string(var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("PolicyName");
    if let Some(var_423) = &input.policy_name {
        scope_422.string(var_423);
    }
    #[allow(unused_mut)]
    let mut scope_424 = writer.prefix("PolicyType");
    if let Some(var_425) = &input.policy_type {
        scope_424.string(var_425);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("AdjustmentType");
    if let Some(var_427) = &input.adjustment_type {
        scope_426.string(var_427);
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("MinAdjustmentStep");
    if let Some(var_429) = &input.min_adjustment_step {
        scope_428.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("MinAdjustmentMagnitude");
    if let Some(var_431) = &input.min_adjustment_magnitude {
        scope_430.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_431).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("ScalingAdjustment");
    if let Some(var_433) = &input.scaling_adjustment {
        scope_432.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_433).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("Cooldown");
    if let Some(var_435) = &input.cooldown {
        scope_434.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_435).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("MetricAggregationType");
    if let Some(var_437) = &input.metric_aggregation_type {
        scope_436.string(var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("StepAdjustments");
    if let Some(var_439) = &input.step_adjustments {
        let mut list_441 = scope_438.start_list(false, None);
        for item_440 in var_439 {
            #[allow(unused_mut)]
            let mut entry_442 = list_441.entry();
            crate::query_ser::serialize_structure_crate_model_step_adjustment(entry_442, item_440);
        }
        list_441.finish();
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("EstimatedInstanceWarmup");
    if let Some(var_444) = &input.estimated_instance_warmup {
        scope_443.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_444).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("TargetTrackingConfiguration");
    if let Some(var_446) = &input.target_tracking_configuration {
        crate::query_ser::serialize_structure_crate_model_target_tracking_configuration(
            scope_445, var_446,
        );
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("Enabled");
    if let Some(var_448) = &input.enabled {
        scope_447.boolean(*var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("PredictiveScalingConfiguration");
    if let Some(var_450) = &input.predictive_scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_configuration(
            scope_449, var_450,
        );
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_scheduled_update_group_action(
    input: &crate::input::PutScheduledUpdateGroupActionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "PutScheduledUpdateGroupAction", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("AutoScalingGroupName");
    if let Some(var_452) = &input.auto_scaling_group_name {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("ScheduledActionName");
    if let Some(var_454) = &input.scheduled_action_name {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("Time");
    if let Some(var_456) = &input.time {
        scope_455.instant(var_456, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("StartTime");
    if let Some(var_458) = &input.start_time {
        scope_457.instant(var_458, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("EndTime");
    if let Some(var_460) = &input.end_time {
        scope_459.instant(var_460, smithy_types::instant::Format::DateTime);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("Recurrence");
    if let Some(var_462) = &input.recurrence {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("MinSize");
    if let Some(var_464) = &input.min_size {
        scope_463.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("MaxSize");
    if let Some(var_466) = &input.max_size {
        scope_465.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_466).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("DesiredCapacity");
    if let Some(var_468) = &input.desired_capacity {
        scope_467.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_468).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("TimeZone");
    if let Some(var_470) = &input.time_zone {
        scope_469.string(var_470);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_put_warm_pool(
    input: &crate::input::PutWarmPoolInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "PutWarmPool", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("AutoScalingGroupName");
    if let Some(var_472) = &input.auto_scaling_group_name {
        scope_471.string(var_472);
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("MaxGroupPreparedCapacity");
    if let Some(var_474) = &input.max_group_prepared_capacity {
        scope_473.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_474).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("MinSize");
    if let Some(var_476) = &input.min_size {
        scope_475.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_476).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("PoolState");
    if let Some(var_478) = &input.pool_state {
        scope_477.string(var_478.as_str());
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_record_lifecycle_action_heartbeat(
    input: &crate::input::RecordLifecycleActionHeartbeatInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "RecordLifecycleActionHeartbeat", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("LifecycleHookName");
    if let Some(var_480) = &input.lifecycle_hook_name {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("AutoScalingGroupName");
    if let Some(var_482) = &input.auto_scaling_group_name {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("LifecycleActionToken");
    if let Some(var_484) = &input.lifecycle_action_token {
        scope_483.string(var_484);
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("InstanceId");
    if let Some(var_486) = &input.instance_id {
        scope_485.string(var_486);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_processes(
    input: &crate::input::ResumeProcessesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "ResumeProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("AutoScalingGroupName");
    if let Some(var_488) = &input.auto_scaling_group_name {
        scope_487.string(var_488);
    }
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("ScalingProcesses");
    if let Some(var_490) = &input.scaling_processes {
        let mut list_492 = scope_489.start_list(false, None);
        for item_491 in var_490 {
            #[allow(unused_mut)]
            let mut entry_493 = list_492.entry();
            entry_493.string(item_491);
        }
        list_492.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_desired_capacity(
    input: &crate::input::SetDesiredCapacityInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetDesiredCapacity", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("AutoScalingGroupName");
    if let Some(var_495) = &input.auto_scaling_group_name {
        scope_494.string(var_495);
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("DesiredCapacity");
    if let Some(var_497) = &input.desired_capacity {
        scope_496.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_497).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("HonorCooldown");
    if let Some(var_499) = &input.honor_cooldown {
        scope_498.boolean(*var_499);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_health(
    input: &crate::input::SetInstanceHealthInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SetInstanceHealth", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("InstanceId");
    if let Some(var_501) = &input.instance_id {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("HealthStatus");
    if let Some(var_503) = &input.health_status {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("ShouldRespectGracePeriod");
    if let Some(var_505) = &input.should_respect_grace_period {
        scope_504.boolean(*var_505);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_instance_protection(
    input: &crate::input::SetInstanceProtectionInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "SetInstanceProtection", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("InstanceIds");
    if let Some(var_507) = &input.instance_ids {
        let mut list_509 = scope_506.start_list(false, None);
        for item_508 in var_507 {
            #[allow(unused_mut)]
            let mut entry_510 = list_509.entry();
            entry_510.string(item_508);
        }
        list_509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("AutoScalingGroupName");
    if let Some(var_512) = &input.auto_scaling_group_name {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("ProtectedFromScaleIn");
    if let Some(var_514) = &input.protected_from_scale_in {
        scope_513.boolean(*var_514);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_instance_refresh(
    input: &crate::input::StartInstanceRefreshInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "StartInstanceRefresh", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("AutoScalingGroupName");
    if let Some(var_516) = &input.auto_scaling_group_name {
        scope_515.string(var_516);
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("Strategy");
    if let Some(var_518) = &input.strategy {
        scope_517.string(var_518.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("DesiredConfiguration");
    if let Some(var_520) = &input.desired_configuration {
        crate::query_ser::serialize_structure_crate_model_desired_configuration(scope_519, var_520);
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("Preferences");
    if let Some(var_522) = &input.preferences {
        crate::query_ser::serialize_structure_crate_model_refresh_preferences(scope_521, var_522);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_suspend_processes(
    input: &crate::input::SuspendProcessesInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(&mut out, "SuspendProcesses", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("AutoScalingGroupName");
    if let Some(var_524) = &input.auto_scaling_group_name {
        scope_523.string(var_524);
    }
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("ScalingProcesses");
    if let Some(var_526) = &input.scaling_processes {
        let mut list_528 = scope_525.start_list(false, None);
        for item_527 in var_526 {
            #[allow(unused_mut)]
            let mut entry_529 = list_528.entry();
            entry_529.string(item_527);
        }
        list_528.finish();
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_terminate_instance_in_auto_scaling_group(
    input: &crate::input::TerminateInstanceInAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = smithy_query::QueryWriter::new(
        &mut out,
        "TerminateInstanceInAutoScalingGroup",
        "2011-01-01",
    );
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("InstanceId");
    if let Some(var_531) = &input.instance_id {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("ShouldDecrementDesiredCapacity");
    if let Some(var_533) = &input.should_decrement_desired_capacity {
        scope_532.boolean(*var_533);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_auto_scaling_group(
    input: &crate::input::UpdateAutoScalingGroupInput,
) -> Result<smithy_http::body::SdkBody, std::convert::Infallible> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        smithy_query::QueryWriter::new(&mut out, "UpdateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("AutoScalingGroupName");
    if let Some(var_535) = &input.auto_scaling_group_name {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("LaunchConfigurationName");
    if let Some(var_537) = &input.launch_configuration_name {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("LaunchTemplate");
    if let Some(var_539) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_538, var_539,
        );
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_541) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(
            scope_540, var_541,
        );
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("MinSize");
    if let Some(var_543) = &input.min_size {
        scope_542.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_543).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("MaxSize");
    if let Some(var_545) = &input.max_size {
        scope_544.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_545).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("DesiredCapacity");
    if let Some(var_547) = &input.desired_capacity {
        scope_546.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("DefaultCooldown");
    if let Some(var_549) = &input.default_cooldown {
        scope_548.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_549).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("AvailabilityZones");
    if let Some(var_551) = &input.availability_zones {
        let mut list_553 = scope_550.start_list(false, None);
        for item_552 in var_551 {
            #[allow(unused_mut)]
            let mut entry_554 = list_553.entry();
            entry_554.string(item_552);
        }
        list_553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("HealthCheckType");
    if let Some(var_556) = &input.health_check_type {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_558) = &input.health_check_grace_period {
        scope_557.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("PlacementGroup");
    if let Some(var_560) = &input.placement_group {
        scope_559.string(var_560);
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_562) = &input.vpc_zone_identifier {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("TerminationPolicies");
    if let Some(var_564) = &input.termination_policies {
        let mut list_566 = scope_563.start_list(false, None);
        for item_565 in var_564 {
            #[allow(unused_mut)]
            let mut entry_567 = list_566.entry();
            entry_567.string(item_565);
        }
        list_566.finish();
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_569) = &input.new_instances_protected_from_scale_in {
        scope_568.boolean(*var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_571) = &input.service_linked_role_arn {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_573) = &input.max_instance_lifetime {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("CapacityRebalance");
    if let Some(var_575) = &input.capacity_rebalance {
        scope_574.boolean(*var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Context");
    if let Some(var_577) = &input.context {
        scope_576.string(var_577);
    }
    writer.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}
