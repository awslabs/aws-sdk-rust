// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAutoScalingGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateAutoScalingGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateAutoScalingGroupOutput`](crate::output::UpdateAutoScalingGroupOutput).
pub mod update_auto_scaling_group_output {

    /// A builder for [`UpdateAutoScalingGroupOutput`](crate::output::UpdateAutoScalingGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAutoScalingGroupOutput`](crate::output::UpdateAutoScalingGroupOutput).
        pub fn build(self) -> crate::output::UpdateAutoScalingGroupOutput {
            crate::output::UpdateAutoScalingGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateAutoScalingGroupOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAutoScalingGroupOutput`](crate::output::UpdateAutoScalingGroupOutput).
    pub fn builder() -> crate::output::update_auto_scaling_group_output::Builder {
        crate::output::update_auto_scaling_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TerminateInstanceInAutoScalingGroupOutput {
    /// <p>A scaling activity.</p>
    #[doc(hidden)]
    pub activity: std::option::Option<crate::model::Activity>,
    _request_id: Option<String>,
}
impl TerminateInstanceInAutoScalingGroupOutput {
    /// <p>A scaling activity.</p>
    pub fn activity(&self) -> std::option::Option<&crate::model::Activity> {
        self.activity.as_ref()
    }
}
impl aws_http::request_id::RequestId for TerminateInstanceInAutoScalingGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TerminateInstanceInAutoScalingGroupOutput`](crate::output::TerminateInstanceInAutoScalingGroupOutput).
pub mod terminate_instance_in_auto_scaling_group_output {

    /// A builder for [`TerminateInstanceInAutoScalingGroupOutput`](crate::output::TerminateInstanceInAutoScalingGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activity: std::option::Option<crate::model::Activity>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A scaling activity.</p>
        pub fn activity(mut self, input: crate::model::Activity) -> Self {
            self.activity = Some(input);
            self
        }
        /// <p>A scaling activity.</p>
        pub fn set_activity(mut self, input: std::option::Option<crate::model::Activity>) -> Self {
            self.activity = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TerminateInstanceInAutoScalingGroupOutput`](crate::output::TerminateInstanceInAutoScalingGroupOutput).
        pub fn build(self) -> crate::output::TerminateInstanceInAutoScalingGroupOutput {
            crate::output::TerminateInstanceInAutoScalingGroupOutput {
                activity: self.activity,
                _request_id: self._request_id,
            }
        }
    }
}
impl TerminateInstanceInAutoScalingGroupOutput {
    /// Creates a new builder-style object to manufacture [`TerminateInstanceInAutoScalingGroupOutput`](crate::output::TerminateInstanceInAutoScalingGroupOutput).
    pub fn builder() -> crate::output::terminate_instance_in_auto_scaling_group_output::Builder {
        crate::output::terminate_instance_in_auto_scaling_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SuspendProcessesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SuspendProcessesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SuspendProcessesOutput`](crate::output::SuspendProcessesOutput).
pub mod suspend_processes_output {

    /// A builder for [`SuspendProcessesOutput`](crate::output::SuspendProcessesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SuspendProcessesOutput`](crate::output::SuspendProcessesOutput).
        pub fn build(self) -> crate::output::SuspendProcessesOutput {
            crate::output::SuspendProcessesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SuspendProcessesOutput {
    /// Creates a new builder-style object to manufacture [`SuspendProcessesOutput`](crate::output::SuspendProcessesOutput).
    pub fn builder() -> crate::output::suspend_processes_output::Builder {
        crate::output::suspend_processes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartInstanceRefreshOutput {
    /// <p>A unique ID for tracking the progress of the request.</p>
    #[doc(hidden)]
    pub instance_refresh_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartInstanceRefreshOutput {
    /// <p>A unique ID for tracking the progress of the request.</p>
    pub fn instance_refresh_id(&self) -> std::option::Option<&str> {
        self.instance_refresh_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartInstanceRefreshOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartInstanceRefreshOutput`](crate::output::StartInstanceRefreshOutput).
pub mod start_instance_refresh_output {

    /// A builder for [`StartInstanceRefreshOutput`](crate::output::StartInstanceRefreshOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_refresh_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A unique ID for tracking the progress of the request.</p>
        pub fn instance_refresh_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_refresh_id = Some(input.into());
            self
        }
        /// <p>A unique ID for tracking the progress of the request.</p>
        pub fn set_instance_refresh_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.instance_refresh_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartInstanceRefreshOutput`](crate::output::StartInstanceRefreshOutput).
        pub fn build(self) -> crate::output::StartInstanceRefreshOutput {
            crate::output::StartInstanceRefreshOutput {
                instance_refresh_id: self.instance_refresh_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartInstanceRefreshOutput {
    /// Creates a new builder-style object to manufacture [`StartInstanceRefreshOutput`](crate::output::StartInstanceRefreshOutput).
    pub fn builder() -> crate::output::start_instance_refresh_output::Builder {
        crate::output::start_instance_refresh_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SetInstanceProtectionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SetInstanceProtectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SetInstanceProtectionOutput`](crate::output::SetInstanceProtectionOutput).
pub mod set_instance_protection_output {

    /// A builder for [`SetInstanceProtectionOutput`](crate::output::SetInstanceProtectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SetInstanceProtectionOutput`](crate::output::SetInstanceProtectionOutput).
        pub fn build(self) -> crate::output::SetInstanceProtectionOutput {
            crate::output::SetInstanceProtectionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SetInstanceProtectionOutput {
    /// Creates a new builder-style object to manufacture [`SetInstanceProtectionOutput`](crate::output::SetInstanceProtectionOutput).
    pub fn builder() -> crate::output::set_instance_protection_output::Builder {
        crate::output::set_instance_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SetInstanceHealthOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SetInstanceHealthOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SetInstanceHealthOutput`](crate::output::SetInstanceHealthOutput).
pub mod set_instance_health_output {

    /// A builder for [`SetInstanceHealthOutput`](crate::output::SetInstanceHealthOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SetInstanceHealthOutput`](crate::output::SetInstanceHealthOutput).
        pub fn build(self) -> crate::output::SetInstanceHealthOutput {
            crate::output::SetInstanceHealthOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SetInstanceHealthOutput {
    /// Creates a new builder-style object to manufacture [`SetInstanceHealthOutput`](crate::output::SetInstanceHealthOutput).
    pub fn builder() -> crate::output::set_instance_health_output::Builder {
        crate::output::set_instance_health_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SetDesiredCapacityOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for SetDesiredCapacityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SetDesiredCapacityOutput`](crate::output::SetDesiredCapacityOutput).
pub mod set_desired_capacity_output {

    /// A builder for [`SetDesiredCapacityOutput`](crate::output::SetDesiredCapacityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SetDesiredCapacityOutput`](crate::output::SetDesiredCapacityOutput).
        pub fn build(self) -> crate::output::SetDesiredCapacityOutput {
            crate::output::SetDesiredCapacityOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl SetDesiredCapacityOutput {
    /// Creates a new builder-style object to manufacture [`SetDesiredCapacityOutput`](crate::output::SetDesiredCapacityOutput).
    pub fn builder() -> crate::output::set_desired_capacity_output::Builder {
        crate::output::set_desired_capacity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResumeProcessesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ResumeProcessesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ResumeProcessesOutput`](crate::output::ResumeProcessesOutput).
pub mod resume_processes_output {

    /// A builder for [`ResumeProcessesOutput`](crate::output::ResumeProcessesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResumeProcessesOutput`](crate::output::ResumeProcessesOutput).
        pub fn build(self) -> crate::output::ResumeProcessesOutput {
            crate::output::ResumeProcessesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ResumeProcessesOutput {
    /// Creates a new builder-style object to manufacture [`ResumeProcessesOutput`](crate::output::ResumeProcessesOutput).
    pub fn builder() -> crate::output::resume_processes_output::Builder {
        crate::output::resume_processes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordLifecycleActionHeartbeatOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for RecordLifecycleActionHeartbeatOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RecordLifecycleActionHeartbeatOutput`](crate::output::RecordLifecycleActionHeartbeatOutput).
pub mod record_lifecycle_action_heartbeat_output {

    /// A builder for [`RecordLifecycleActionHeartbeatOutput`](crate::output::RecordLifecycleActionHeartbeatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RecordLifecycleActionHeartbeatOutput`](crate::output::RecordLifecycleActionHeartbeatOutput).
        pub fn build(self) -> crate::output::RecordLifecycleActionHeartbeatOutput {
            crate::output::RecordLifecycleActionHeartbeatOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl RecordLifecycleActionHeartbeatOutput {
    /// Creates a new builder-style object to manufacture [`RecordLifecycleActionHeartbeatOutput`](crate::output::RecordLifecycleActionHeartbeatOutput).
    pub fn builder() -> crate::output::record_lifecycle_action_heartbeat_output::Builder {
        crate::output::record_lifecycle_action_heartbeat_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutWarmPoolOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutWarmPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutWarmPoolOutput`](crate::output::PutWarmPoolOutput).
pub mod put_warm_pool_output {

    /// A builder for [`PutWarmPoolOutput`](crate::output::PutWarmPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutWarmPoolOutput`](crate::output::PutWarmPoolOutput).
        pub fn build(self) -> crate::output::PutWarmPoolOutput {
            crate::output::PutWarmPoolOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutWarmPoolOutput {
    /// Creates a new builder-style object to manufacture [`PutWarmPoolOutput`](crate::output::PutWarmPoolOutput).
    pub fn builder() -> crate::output::put_warm_pool_output::Builder {
        crate::output::put_warm_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutScheduledUpdateGroupActionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutScheduledUpdateGroupActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutScheduledUpdateGroupActionOutput`](crate::output::PutScheduledUpdateGroupActionOutput).
pub mod put_scheduled_update_group_action_output {

    /// A builder for [`PutScheduledUpdateGroupActionOutput`](crate::output::PutScheduledUpdateGroupActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutScheduledUpdateGroupActionOutput`](crate::output::PutScheduledUpdateGroupActionOutput).
        pub fn build(self) -> crate::output::PutScheduledUpdateGroupActionOutput {
            crate::output::PutScheduledUpdateGroupActionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutScheduledUpdateGroupActionOutput {
    /// Creates a new builder-style object to manufacture [`PutScheduledUpdateGroupActionOutput`](crate::output::PutScheduledUpdateGroupActionOutput).
    pub fn builder() -> crate::output::put_scheduled_update_group_action_output::Builder {
        crate::output::put_scheduled_update_group_action_output::Builder::default()
    }
}

/// <p>Contains the output of PutScalingPolicy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutScalingPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    #[doc(hidden)]
    pub policy_arn: std::option::Option<std::string::String>,
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    #[doc(hidden)]
    pub alarms: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
    _request_id: Option<String>,
}
impl PutScalingPolicyOutput {
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    pub fn policy_arn(&self) -> std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
    /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
    pub fn alarms(&self) -> std::option::Option<&[crate::model::Alarm]> {
        self.alarms.as_deref()
    }
}
impl aws_http::request_id::RequestId for PutScalingPolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput).
pub mod put_scaling_policy_output {

    /// A builder for [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_arn: std::option::Option<std::string::String>,
        pub(crate) alarms: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the policy.</p>
        pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the policy.</p>
        pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy_arn = input;
            self
        }
        /// Appends an item to `alarms`.
        ///
        /// To override the contents of this collection use [`set_alarms`](Self::set_alarms).
        ///
        /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
        pub fn alarms(mut self, input: crate::model::Alarm) -> Self {
            let mut v = self.alarms.unwrap_or_default();
            v.push(input);
            self.alarms = Some(v);
            self
        }
        /// <p>The CloudWatch alarms created for the target tracking scaling policy.</p>
        pub fn set_alarms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Alarm>>,
        ) -> Self {
            self.alarms = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput).
        pub fn build(self) -> crate::output::PutScalingPolicyOutput {
            crate::output::PutScalingPolicyOutput {
                policy_arn: self.policy_arn,
                alarms: self.alarms,
                _request_id: self._request_id,
            }
        }
    }
}
impl PutScalingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutScalingPolicyOutput`](crate::output::PutScalingPolicyOutput).
    pub fn builder() -> crate::output::put_scaling_policy_output::Builder {
        crate::output::put_scaling_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutNotificationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutNotificationConfigurationOutput`](crate::output::PutNotificationConfigurationOutput).
pub mod put_notification_configuration_output {

    /// A builder for [`PutNotificationConfigurationOutput`](crate::output::PutNotificationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutNotificationConfigurationOutput`](crate::output::PutNotificationConfigurationOutput).
        pub fn build(self) -> crate::output::PutNotificationConfigurationOutput {
            crate::output::PutNotificationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutNotificationConfigurationOutput`](crate::output::PutNotificationConfigurationOutput).
    pub fn builder() -> crate::output::put_notification_configuration_output::Builder {
        crate::output::put_notification_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutLifecycleHookOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutLifecycleHookOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutLifecycleHookOutput`](crate::output::PutLifecycleHookOutput).
pub mod put_lifecycle_hook_output {

    /// A builder for [`PutLifecycleHookOutput`](crate::output::PutLifecycleHookOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutLifecycleHookOutput`](crate::output::PutLifecycleHookOutput).
        pub fn build(self) -> crate::output::PutLifecycleHookOutput {
            crate::output::PutLifecycleHookOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutLifecycleHookOutput {
    /// Creates a new builder-style object to manufacture [`PutLifecycleHookOutput`](crate::output::PutLifecycleHookOutput).
    pub fn builder() -> crate::output::put_lifecycle_hook_output::Builder {
        crate::output::put_lifecycle_hook_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetPredictiveScalingForecastOutput {
    /// <p>The load forecast.</p>
    #[doc(hidden)]
    pub load_forecast: std::option::Option<std::vec::Vec<crate::model::LoadForecast>>,
    /// <p>The capacity forecast.</p>
    #[doc(hidden)]
    pub capacity_forecast: std::option::Option<crate::model::CapacityForecast>,
    /// <p>The time the forecast was made.</p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPredictiveScalingForecastOutput {
    /// <p>The load forecast.</p>
    pub fn load_forecast(&self) -> std::option::Option<&[crate::model::LoadForecast]> {
        self.load_forecast.as_deref()
    }
    /// <p>The capacity forecast.</p>
    pub fn capacity_forecast(&self) -> std::option::Option<&crate::model::CapacityForecast> {
        self.capacity_forecast.as_ref()
    }
    /// <p>The time the forecast was made.</p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetPredictiveScalingForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetPredictiveScalingForecastOutput`](crate::output::GetPredictiveScalingForecastOutput).
pub mod get_predictive_scaling_forecast_output {

    /// A builder for [`GetPredictiveScalingForecastOutput`](crate::output::GetPredictiveScalingForecastOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_forecast: std::option::Option<std::vec::Vec<crate::model::LoadForecast>>,
        pub(crate) capacity_forecast: std::option::Option<crate::model::CapacityForecast>,
        pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `load_forecast`.
        ///
        /// To override the contents of this collection use [`set_load_forecast`](Self::set_load_forecast).
        ///
        /// <p>The load forecast.</p>
        pub fn load_forecast(mut self, input: crate::model::LoadForecast) -> Self {
            let mut v = self.load_forecast.unwrap_or_default();
            v.push(input);
            self.load_forecast = Some(v);
            self
        }
        /// <p>The load forecast.</p>
        pub fn set_load_forecast(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LoadForecast>>,
        ) -> Self {
            self.load_forecast = input;
            self
        }
        /// <p>The capacity forecast.</p>
        pub fn capacity_forecast(mut self, input: crate::model::CapacityForecast) -> Self {
            self.capacity_forecast = Some(input);
            self
        }
        /// <p>The capacity forecast.</p>
        pub fn set_capacity_forecast(
            mut self,
            input: std::option::Option<crate::model::CapacityForecast>,
        ) -> Self {
            self.capacity_forecast = input;
            self
        }
        /// <p>The time the forecast was made.</p>
        pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.update_time = Some(input);
            self
        }
        /// <p>The time the forecast was made.</p>
        pub fn set_update_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.update_time = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetPredictiveScalingForecastOutput`](crate::output::GetPredictiveScalingForecastOutput).
        pub fn build(self) -> crate::output::GetPredictiveScalingForecastOutput {
            crate::output::GetPredictiveScalingForecastOutput {
                load_forecast: self.load_forecast,
                capacity_forecast: self.capacity_forecast,
                update_time: self.update_time,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetPredictiveScalingForecastOutput {
    /// Creates a new builder-style object to manufacture [`GetPredictiveScalingForecastOutput`](crate::output::GetPredictiveScalingForecastOutput).
    pub fn builder() -> crate::output::get_predictive_scaling_forecast_output::Builder {
        crate::output::get_predictive_scaling_forecast_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExitStandbyOutput {
    /// <p>The activities related to moving instances out of <code>Standby</code> mode.</p>
    #[doc(hidden)]
    pub activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
    _request_id: Option<String>,
}
impl ExitStandbyOutput {
    /// <p>The activities related to moving instances out of <code>Standby</code> mode.</p>
    pub fn activities(&self) -> std::option::Option<&[crate::model::Activity]> {
        self.activities.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExitStandbyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExitStandbyOutput`](crate::output::ExitStandbyOutput).
pub mod exit_standby_output {

    /// A builder for [`ExitStandbyOutput`](crate::output::ExitStandbyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `activities`.
        ///
        /// To override the contents of this collection use [`set_activities`](Self::set_activities).
        ///
        /// <p>The activities related to moving instances out of <code>Standby</code> mode.</p>
        pub fn activities(mut self, input: crate::model::Activity) -> Self {
            let mut v = self.activities.unwrap_or_default();
            v.push(input);
            self.activities = Some(v);
            self
        }
        /// <p>The activities related to moving instances out of <code>Standby</code> mode.</p>
        pub fn set_activities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        ) -> Self {
            self.activities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExitStandbyOutput`](crate::output::ExitStandbyOutput).
        pub fn build(self) -> crate::output::ExitStandbyOutput {
            crate::output::ExitStandbyOutput {
                activities: self.activities,
                _request_id: self._request_id,
            }
        }
    }
}
impl ExitStandbyOutput {
    /// Creates a new builder-style object to manufacture [`ExitStandbyOutput`](crate::output::ExitStandbyOutput).
    pub fn builder() -> crate::output::exit_standby_output::Builder {
        crate::output::exit_standby_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExecutePolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for ExecutePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ExecutePolicyOutput`](crate::output::ExecutePolicyOutput).
pub mod execute_policy_output {

    /// A builder for [`ExecutePolicyOutput`](crate::output::ExecutePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ExecutePolicyOutput`](crate::output::ExecutePolicyOutput).
        pub fn build(self) -> crate::output::ExecutePolicyOutput {
            crate::output::ExecutePolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl ExecutePolicyOutput {
    /// Creates a new builder-style object to manufacture [`ExecutePolicyOutput`](crate::output::ExecutePolicyOutput).
    pub fn builder() -> crate::output::execute_policy_output::Builder {
        crate::output::execute_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnterStandbyOutput {
    /// <p>The activities related to moving instances into <code>Standby</code> mode.</p>
    #[doc(hidden)]
    pub activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
    _request_id: Option<String>,
}
impl EnterStandbyOutput {
    /// <p>The activities related to moving instances into <code>Standby</code> mode.</p>
    pub fn activities(&self) -> std::option::Option<&[crate::model::Activity]> {
        self.activities.as_deref()
    }
}
impl aws_http::request_id::RequestId for EnterStandbyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnterStandbyOutput`](crate::output::EnterStandbyOutput).
pub mod enter_standby_output {

    /// A builder for [`EnterStandbyOutput`](crate::output::EnterStandbyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `activities`.
        ///
        /// To override the contents of this collection use [`set_activities`](Self::set_activities).
        ///
        /// <p>The activities related to moving instances into <code>Standby</code> mode.</p>
        pub fn activities(mut self, input: crate::model::Activity) -> Self {
            let mut v = self.activities.unwrap_or_default();
            v.push(input);
            self.activities = Some(v);
            self
        }
        /// <p>The activities related to moving instances into <code>Standby</code> mode.</p>
        pub fn set_activities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        ) -> Self {
            self.activities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnterStandbyOutput`](crate::output::EnterStandbyOutput).
        pub fn build(self) -> crate::output::EnterStandbyOutput {
            crate::output::EnterStandbyOutput {
                activities: self.activities,
                _request_id: self._request_id,
            }
        }
    }
}
impl EnterStandbyOutput {
    /// Creates a new builder-style object to manufacture [`EnterStandbyOutput`](crate::output::EnterStandbyOutput).
    pub fn builder() -> crate::output::enter_standby_output::Builder {
        crate::output::enter_standby_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableMetricsCollectionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableMetricsCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableMetricsCollectionOutput`](crate::output::EnableMetricsCollectionOutput).
pub mod enable_metrics_collection_output {

    /// A builder for [`EnableMetricsCollectionOutput`](crate::output::EnableMetricsCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableMetricsCollectionOutput`](crate::output::EnableMetricsCollectionOutput).
        pub fn build(self) -> crate::output::EnableMetricsCollectionOutput {
            crate::output::EnableMetricsCollectionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableMetricsCollectionOutput {
    /// Creates a new builder-style object to manufacture [`EnableMetricsCollectionOutput`](crate::output::EnableMetricsCollectionOutput).
    pub fn builder() -> crate::output::enable_metrics_collection_output::Builder {
        crate::output::enable_metrics_collection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableMetricsCollectionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisableMetricsCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableMetricsCollectionOutput`](crate::output::DisableMetricsCollectionOutput).
pub mod disable_metrics_collection_output {

    /// A builder for [`DisableMetricsCollectionOutput`](crate::output::DisableMetricsCollectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableMetricsCollectionOutput`](crate::output::DisableMetricsCollectionOutput).
        pub fn build(self) -> crate::output::DisableMetricsCollectionOutput {
            crate::output::DisableMetricsCollectionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableMetricsCollectionOutput {
    /// Creates a new builder-style object to manufacture [`DisableMetricsCollectionOutput`](crate::output::DisableMetricsCollectionOutput).
    pub fn builder() -> crate::output::disable_metrics_collection_output::Builder {
        crate::output::disable_metrics_collection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachTrafficSourcesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachTrafficSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachTrafficSourcesOutput`](crate::output::DetachTrafficSourcesOutput).
pub mod detach_traffic_sources_output {

    /// A builder for [`DetachTrafficSourcesOutput`](crate::output::DetachTrafficSourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachTrafficSourcesOutput`](crate::output::DetachTrafficSourcesOutput).
        pub fn build(self) -> crate::output::DetachTrafficSourcesOutput {
            crate::output::DetachTrafficSourcesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachTrafficSourcesOutput {
    /// Creates a new builder-style object to manufacture [`DetachTrafficSourcesOutput`](crate::output::DetachTrafficSourcesOutput).
    pub fn builder() -> crate::output::detach_traffic_sources_output::Builder {
        crate::output::detach_traffic_sources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachLoadBalancerTargetGroupsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachLoadBalancerTargetGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachLoadBalancerTargetGroupsOutput`](crate::output::DetachLoadBalancerTargetGroupsOutput).
pub mod detach_load_balancer_target_groups_output {

    /// A builder for [`DetachLoadBalancerTargetGroupsOutput`](crate::output::DetachLoadBalancerTargetGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachLoadBalancerTargetGroupsOutput`](crate::output::DetachLoadBalancerTargetGroupsOutput).
        pub fn build(self) -> crate::output::DetachLoadBalancerTargetGroupsOutput {
            crate::output::DetachLoadBalancerTargetGroupsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachLoadBalancerTargetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DetachLoadBalancerTargetGroupsOutput`](crate::output::DetachLoadBalancerTargetGroupsOutput).
    pub fn builder() -> crate::output::detach_load_balancer_target_groups_output::Builder {
        crate::output::detach_load_balancer_target_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachLoadBalancersOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DetachLoadBalancersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachLoadBalancersOutput`](crate::output::DetachLoadBalancersOutput).
pub mod detach_load_balancers_output {

    /// A builder for [`DetachLoadBalancersOutput`](crate::output::DetachLoadBalancersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachLoadBalancersOutput`](crate::output::DetachLoadBalancersOutput).
        pub fn build(self) -> crate::output::DetachLoadBalancersOutput {
            crate::output::DetachLoadBalancersOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachLoadBalancersOutput {
    /// Creates a new builder-style object to manufacture [`DetachLoadBalancersOutput`](crate::output::DetachLoadBalancersOutput).
    pub fn builder() -> crate::output::detach_load_balancers_output::Builder {
        crate::output::detach_load_balancers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachInstancesOutput {
    /// <p>The activities related to detaching the instances from the Auto Scaling group.</p>
    #[doc(hidden)]
    pub activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
    _request_id: Option<String>,
}
impl DetachInstancesOutput {
    /// <p>The activities related to detaching the instances from the Auto Scaling group.</p>
    pub fn activities(&self) -> std::option::Option<&[crate::model::Activity]> {
        self.activities.as_deref()
    }
}
impl aws_http::request_id::RequestId for DetachInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DetachInstancesOutput`](crate::output::DetachInstancesOutput).
pub mod detach_instances_output {

    /// A builder for [`DetachInstancesOutput`](crate::output::DetachInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `activities`.
        ///
        /// To override the contents of this collection use [`set_activities`](Self::set_activities).
        ///
        /// <p>The activities related to detaching the instances from the Auto Scaling group.</p>
        pub fn activities(mut self, input: crate::model::Activity) -> Self {
            let mut v = self.activities.unwrap_or_default();
            v.push(input);
            self.activities = Some(v);
            self
        }
        /// <p>The activities related to detaching the instances from the Auto Scaling group.</p>
        pub fn set_activities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        ) -> Self {
            self.activities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DetachInstancesOutput`](crate::output::DetachInstancesOutput).
        pub fn build(self) -> crate::output::DetachInstancesOutput {
            crate::output::DetachInstancesOutput {
                activities: self.activities,
                _request_id: self._request_id,
            }
        }
    }
}
impl DetachInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DetachInstancesOutput`](crate::output::DetachInstancesOutput).
    pub fn builder() -> crate::output::detach_instances_output::Builder {
        crate::output::detach_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWarmPoolOutput {
    /// <p>The warm pool configuration details. </p>
    #[doc(hidden)]
    pub warm_pool_configuration: std::option::Option<crate::model::WarmPoolConfiguration>,
    /// <p>The instances that are currently in the warm pool.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeWarmPoolOutput {
    /// <p>The warm pool configuration details. </p>
    pub fn warm_pool_configuration(
        &self,
    ) -> std::option::Option<&crate::model::WarmPoolConfiguration> {
        self.warm_pool_configuration.as_ref()
    }
    /// <p>The instances that are currently in the warm pool.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::Instance]> {
        self.instances.as_deref()
    }
    /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeWarmPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeWarmPoolOutput`](crate::output::DescribeWarmPoolOutput).
pub mod describe_warm_pool_output {

    /// A builder for [`DescribeWarmPoolOutput`](crate::output::DescribeWarmPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) warm_pool_configuration:
            std::option::Option<crate::model::WarmPoolConfiguration>,
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The warm pool configuration details. </p>
        pub fn warm_pool_configuration(
            mut self,
            input: crate::model::WarmPoolConfiguration,
        ) -> Self {
            self.warm_pool_configuration = Some(input);
            self
        }
        /// <p>The warm pool configuration details. </p>
        pub fn set_warm_pool_configuration(
            mut self,
            input: std::option::Option<crate::model::WarmPoolConfiguration>,
        ) -> Self {
            self.warm_pool_configuration = input;
            self
        }
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>The instances that are currently in the warm pool.</p>
        pub fn instances(mut self, input: crate::model::Instance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>The instances that are currently in the warm pool.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWarmPoolOutput`](crate::output::DescribeWarmPoolOutput).
        pub fn build(self) -> crate::output::DescribeWarmPoolOutput {
            crate::output::DescribeWarmPoolOutput {
                warm_pool_configuration: self.warm_pool_configuration,
                instances: self.instances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeWarmPoolOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWarmPoolOutput`](crate::output::DescribeWarmPoolOutput).
    pub fn builder() -> crate::output::describe_warm_pool_output::Builder {
        crate::output::describe_warm_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrafficSourcesOutput {
    /// <p>Information about the traffic sources.</p>
    #[doc(hidden)]
    pub traffic_sources: std::option::Option<std::vec::Vec<crate::model::TrafficSourceState>>,
    /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTrafficSourcesOutput {
    /// <p>Information about the traffic sources.</p>
    pub fn traffic_sources(&self) -> std::option::Option<&[crate::model::TrafficSourceState]> {
        self.traffic_sources.as_deref()
    }
    /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTrafficSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTrafficSourcesOutput`](crate::output::DescribeTrafficSourcesOutput).
pub mod describe_traffic_sources_output {

    /// A builder for [`DescribeTrafficSourcesOutput`](crate::output::DescribeTrafficSourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) traffic_sources:
            std::option::Option<std::vec::Vec<crate::model::TrafficSourceState>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `traffic_sources`.
        ///
        /// To override the contents of this collection use [`set_traffic_sources`](Self::set_traffic_sources).
        ///
        /// <p>Information about the traffic sources.</p>
        pub fn traffic_sources(mut self, input: crate::model::TrafficSourceState) -> Self {
            let mut v = self.traffic_sources.unwrap_or_default();
            v.push(input);
            self.traffic_sources = Some(v);
            self
        }
        /// <p>Information about the traffic sources.</p>
        pub fn set_traffic_sources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrafficSourceState>>,
        ) -> Self {
            self.traffic_sources = input;
            self
        }
        /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTrafficSourcesOutput`](crate::output::DescribeTrafficSourcesOutput).
        pub fn build(self) -> crate::output::DescribeTrafficSourcesOutput {
            crate::output::DescribeTrafficSourcesOutput {
                traffic_sources: self.traffic_sources,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTrafficSourcesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficSourcesOutput`](crate::output::DescribeTrafficSourcesOutput).
    pub fn builder() -> crate::output::describe_traffic_sources_output::Builder {
        crate::output::describe_traffic_sources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTerminationPolicyTypesOutput {
    /// <p>The termination policies supported by Amazon EC2 Auto Scaling: <code>OldestInstance</code>, <code>OldestLaunchConfiguration</code>, <code>NewestInstance</code>, <code>ClosestToNextInstanceHour</code>, <code>Default</code>, <code>OldestLaunchTemplate</code>, and <code>AllocationStrategy</code>.</p>
    #[doc(hidden)]
    pub termination_policy_types: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeTerminationPolicyTypesOutput {
    /// <p>The termination policies supported by Amazon EC2 Auto Scaling: <code>OldestInstance</code>, <code>OldestLaunchConfiguration</code>, <code>NewestInstance</code>, <code>ClosestToNextInstanceHour</code>, <code>Default</code>, <code>OldestLaunchTemplate</code>, and <code>AllocationStrategy</code>.</p>
    pub fn termination_policy_types(&self) -> std::option::Option<&[std::string::String]> {
        self.termination_policy_types.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTerminationPolicyTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTerminationPolicyTypesOutput`](crate::output::DescribeTerminationPolicyTypesOutput).
pub mod describe_termination_policy_types_output {

    /// A builder for [`DescribeTerminationPolicyTypesOutput`](crate::output::DescribeTerminationPolicyTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) termination_policy_types:
            std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `termination_policy_types`.
        ///
        /// To override the contents of this collection use [`set_termination_policy_types`](Self::set_termination_policy_types).
        ///
        /// <p>The termination policies supported by Amazon EC2 Auto Scaling: <code>OldestInstance</code>, <code>OldestLaunchConfiguration</code>, <code>NewestInstance</code>, <code>ClosestToNextInstanceHour</code>, <code>Default</code>, <code>OldestLaunchTemplate</code>, and <code>AllocationStrategy</code>.</p>
        pub fn termination_policy_types(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.termination_policy_types.unwrap_or_default();
            v.push(input.into());
            self.termination_policy_types = Some(v);
            self
        }
        /// <p>The termination policies supported by Amazon EC2 Auto Scaling: <code>OldestInstance</code>, <code>OldestLaunchConfiguration</code>, <code>NewestInstance</code>, <code>ClosestToNextInstanceHour</code>, <code>Default</code>, <code>OldestLaunchTemplate</code>, and <code>AllocationStrategy</code>.</p>
        pub fn set_termination_policy_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.termination_policy_types = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTerminationPolicyTypesOutput`](crate::output::DescribeTerminationPolicyTypesOutput).
        pub fn build(self) -> crate::output::DescribeTerminationPolicyTypesOutput {
            crate::output::DescribeTerminationPolicyTypesOutput {
                termination_policy_types: self.termination_policy_types,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTerminationPolicyTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTerminationPolicyTypesOutput`](crate::output::DescribeTerminationPolicyTypesOutput).
    pub fn builder() -> crate::output::describe_termination_policy_types_output::Builder {
        crate::output::describe_termination_policy_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTagsOutput {
    /// <p>One or more tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeTagsOutput {
    /// <p>One or more tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::TagDescription]> {
        self.tags.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
pub mod describe_tags_output {

    /// A builder for [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>One or more tags.</p>
        pub fn tags(mut self, input: crate::model::TagDescription) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>One or more tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagDescription>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
        pub fn build(self) -> crate::output::DescribeTagsOutput {
            crate::output::DescribeTagsOutput {
                tags: self.tags,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeTagsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTagsOutput`](crate::output::DescribeTagsOutput).
    pub fn builder() -> crate::output::describe_tags_output::Builder {
        crate::output::describe_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeScheduledActionsOutput {
    /// <p>The scheduled actions.</p>
    #[doc(hidden)]
    pub scheduled_update_group_actions:
        std::option::Option<std::vec::Vec<crate::model::ScheduledUpdateGroupAction>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeScheduledActionsOutput {
    /// <p>The scheduled actions.</p>
    pub fn scheduled_update_group_actions(
        &self,
    ) -> std::option::Option<&[crate::model::ScheduledUpdateGroupAction]> {
        self.scheduled_update_group_actions.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeScheduledActionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput).
pub mod describe_scheduled_actions_output {

    /// A builder for [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduled_update_group_actions:
            std::option::Option<std::vec::Vec<crate::model::ScheduledUpdateGroupAction>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `scheduled_update_group_actions`.
        ///
        /// To override the contents of this collection use [`set_scheduled_update_group_actions`](Self::set_scheduled_update_group_actions).
        ///
        /// <p>The scheduled actions.</p>
        pub fn scheduled_update_group_actions(
            mut self,
            input: crate::model::ScheduledUpdateGroupAction,
        ) -> Self {
            let mut v = self.scheduled_update_group_actions.unwrap_or_default();
            v.push(input);
            self.scheduled_update_group_actions = Some(v);
            self
        }
        /// <p>The scheduled actions.</p>
        pub fn set_scheduled_update_group_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScheduledUpdateGroupAction>>,
        ) -> Self {
            self.scheduled_update_group_actions = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput).
        pub fn build(self) -> crate::output::DescribeScheduledActionsOutput {
            crate::output::DescribeScheduledActionsOutput {
                scheduled_update_group_actions: self.scheduled_update_group_actions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeScheduledActionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScheduledActionsOutput`](crate::output::DescribeScheduledActionsOutput).
    pub fn builder() -> crate::output::describe_scheduled_actions_output::Builder {
        crate::output::describe_scheduled_actions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeScalingProcessTypesOutput {
    /// <p>The names of the process types.</p>
    #[doc(hidden)]
    pub processes: std::option::Option<std::vec::Vec<crate::model::ProcessType>>,
    _request_id: Option<String>,
}
impl DescribeScalingProcessTypesOutput {
    /// <p>The names of the process types.</p>
    pub fn processes(&self) -> std::option::Option<&[crate::model::ProcessType]> {
        self.processes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeScalingProcessTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeScalingProcessTypesOutput`](crate::output::DescribeScalingProcessTypesOutput).
pub mod describe_scaling_process_types_output {

    /// A builder for [`DescribeScalingProcessTypesOutput`](crate::output::DescribeScalingProcessTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) processes: std::option::Option<std::vec::Vec<crate::model::ProcessType>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `processes`.
        ///
        /// To override the contents of this collection use [`set_processes`](Self::set_processes).
        ///
        /// <p>The names of the process types.</p>
        pub fn processes(mut self, input: crate::model::ProcessType) -> Self {
            let mut v = self.processes.unwrap_or_default();
            v.push(input);
            self.processes = Some(v);
            self
        }
        /// <p>The names of the process types.</p>
        pub fn set_processes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessType>>,
        ) -> Self {
            self.processes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScalingProcessTypesOutput`](crate::output::DescribeScalingProcessTypesOutput).
        pub fn build(self) -> crate::output::DescribeScalingProcessTypesOutput {
            crate::output::DescribeScalingProcessTypesOutput {
                processes: self.processes,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeScalingProcessTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScalingProcessTypesOutput`](crate::output::DescribeScalingProcessTypesOutput).
    pub fn builder() -> crate::output::describe_scaling_process_types_output::Builder {
        crate::output::describe_scaling_process_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeScalingActivitiesOutput {
    /// <p>The scaling activities. Activities are sorted by start time. Activities still in progress are described first.</p>
    #[doc(hidden)]
    pub activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeScalingActivitiesOutput {
    /// <p>The scaling activities. Activities are sorted by start time. Activities still in progress are described first.</p>
    pub fn activities(&self) -> std::option::Option<&[crate::model::Activity]> {
        self.activities.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeScalingActivitiesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput).
pub mod describe_scaling_activities_output {

    /// A builder for [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) activities: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `activities`.
        ///
        /// To override the contents of this collection use [`set_activities`](Self::set_activities).
        ///
        /// <p>The scaling activities. Activities are sorted by start time. Activities still in progress are described first.</p>
        pub fn activities(mut self, input: crate::model::Activity) -> Self {
            let mut v = self.activities.unwrap_or_default();
            v.push(input);
            self.activities = Some(v);
            self
        }
        /// <p>The scaling activities. Activities are sorted by start time. Activities still in progress are described first.</p>
        pub fn set_activities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Activity>>,
        ) -> Self {
            self.activities = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput).
        pub fn build(self) -> crate::output::DescribeScalingActivitiesOutput {
            crate::output::DescribeScalingActivitiesOutput {
                activities: self.activities,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeScalingActivitiesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeScalingActivitiesOutput`](crate::output::DescribeScalingActivitiesOutput).
    pub fn builder() -> crate::output::describe_scaling_activities_output::Builder {
        crate::output::describe_scaling_activities_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePoliciesOutput {
    /// <p>The scaling policies.</p>
    #[doc(hidden)]
    pub scaling_policies: std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePoliciesOutput {
    /// <p>The scaling policies.</p>
    pub fn scaling_policies(&self) -> std::option::Option<&[crate::model::ScalingPolicy]> {
        self.scaling_policies.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePoliciesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribePoliciesOutput`](crate::output::DescribePoliciesOutput).
pub mod describe_policies_output {

    /// A builder for [`DescribePoliciesOutput`](crate::output::DescribePoliciesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scaling_policies:
            std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `scaling_policies`.
        ///
        /// To override the contents of this collection use [`set_scaling_policies`](Self::set_scaling_policies).
        ///
        /// <p>The scaling policies.</p>
        pub fn scaling_policies(mut self, input: crate::model::ScalingPolicy) -> Self {
            let mut v = self.scaling_policies.unwrap_or_default();
            v.push(input);
            self.scaling_policies = Some(v);
            self
        }
        /// <p>The scaling policies.</p>
        pub fn set_scaling_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>>,
        ) -> Self {
            self.scaling_policies = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribePoliciesOutput`](crate::output::DescribePoliciesOutput).
        pub fn build(self) -> crate::output::DescribePoliciesOutput {
            crate::output::DescribePoliciesOutput {
                scaling_policies: self.scaling_policies,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribePoliciesOutput {
    /// Creates a new builder-style object to manufacture [`DescribePoliciesOutput`](crate::output::DescribePoliciesOutput).
    pub fn builder() -> crate::output::describe_policies_output::Builder {
        crate::output::describe_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNotificationConfigurationsOutput {
    /// <p>The notification configurations.</p>
    #[doc(hidden)]
    pub notification_configurations:
        std::option::Option<std::vec::Vec<crate::model::NotificationConfiguration>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeNotificationConfigurationsOutput {
    /// <p>The notification configurations.</p>
    pub fn notification_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::NotificationConfiguration]> {
        self.notification_configurations.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeNotificationConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeNotificationConfigurationsOutput`](crate::output::DescribeNotificationConfigurationsOutput).
pub mod describe_notification_configurations_output {

    /// A builder for [`DescribeNotificationConfigurationsOutput`](crate::output::DescribeNotificationConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notification_configurations:
            std::option::Option<std::vec::Vec<crate::model::NotificationConfiguration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `notification_configurations`.
        ///
        /// To override the contents of this collection use [`set_notification_configurations`](Self::set_notification_configurations).
        ///
        /// <p>The notification configurations.</p>
        pub fn notification_configurations(
            mut self,
            input: crate::model::NotificationConfiguration,
        ) -> Self {
            let mut v = self.notification_configurations.unwrap_or_default();
            v.push(input);
            self.notification_configurations = Some(v);
            self
        }
        /// <p>The notification configurations.</p>
        pub fn set_notification_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NotificationConfiguration>>,
        ) -> Self {
            self.notification_configurations = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNotificationConfigurationsOutput`](crate::output::DescribeNotificationConfigurationsOutput).
        pub fn build(self) -> crate::output::DescribeNotificationConfigurationsOutput {
            crate::output::DescribeNotificationConfigurationsOutput {
                notification_configurations: self.notification_configurations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeNotificationConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNotificationConfigurationsOutput`](crate::output::DescribeNotificationConfigurationsOutput).
    pub fn builder() -> crate::output::describe_notification_configurations_output::Builder {
        crate::output::describe_notification_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMetricCollectionTypesOutput {
    /// <p>The metrics.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<std::vec::Vec<crate::model::MetricCollectionType>>,
    /// <p>The granularities for the metrics.</p>
    #[doc(hidden)]
    pub granularities: std::option::Option<std::vec::Vec<crate::model::MetricGranularityType>>,
    _request_id: Option<String>,
}
impl DescribeMetricCollectionTypesOutput {
    /// <p>The metrics.</p>
    pub fn metrics(&self) -> std::option::Option<&[crate::model::MetricCollectionType]> {
        self.metrics.as_deref()
    }
    /// <p>The granularities for the metrics.</p>
    pub fn granularities(&self) -> std::option::Option<&[crate::model::MetricGranularityType]> {
        self.granularities.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeMetricCollectionTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeMetricCollectionTypesOutput`](crate::output::DescribeMetricCollectionTypesOutput).
pub mod describe_metric_collection_types_output {

    /// A builder for [`DescribeMetricCollectionTypesOutput`](crate::output::DescribeMetricCollectionTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metrics: std::option::Option<std::vec::Vec<crate::model::MetricCollectionType>>,
        pub(crate) granularities:
            std::option::Option<std::vec::Vec<crate::model::MetricGranularityType>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `metrics`.
        ///
        /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
        ///
        /// <p>The metrics.</p>
        pub fn metrics(mut self, input: crate::model::MetricCollectionType) -> Self {
            let mut v = self.metrics.unwrap_or_default();
            v.push(input);
            self.metrics = Some(v);
            self
        }
        /// <p>The metrics.</p>
        pub fn set_metrics(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricCollectionType>>,
        ) -> Self {
            self.metrics = input;
            self
        }
        /// Appends an item to `granularities`.
        ///
        /// To override the contents of this collection use [`set_granularities`](Self::set_granularities).
        ///
        /// <p>The granularities for the metrics.</p>
        pub fn granularities(mut self, input: crate::model::MetricGranularityType) -> Self {
            let mut v = self.granularities.unwrap_or_default();
            v.push(input);
            self.granularities = Some(v);
            self
        }
        /// <p>The granularities for the metrics.</p>
        pub fn set_granularities(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricGranularityType>>,
        ) -> Self {
            self.granularities = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMetricCollectionTypesOutput`](crate::output::DescribeMetricCollectionTypesOutput).
        pub fn build(self) -> crate::output::DescribeMetricCollectionTypesOutput {
            crate::output::DescribeMetricCollectionTypesOutput {
                metrics: self.metrics,
                granularities: self.granularities,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeMetricCollectionTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMetricCollectionTypesOutput`](crate::output::DescribeMetricCollectionTypesOutput).
    pub fn builder() -> crate::output::describe_metric_collection_types_output::Builder {
        crate::output::describe_metric_collection_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoadBalancerTargetGroupsOutput {
    /// <p>Information about the target groups.</p>
    #[doc(hidden)]
    pub load_balancer_target_groups:
        std::option::Option<std::vec::Vec<crate::model::LoadBalancerTargetGroupState>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLoadBalancerTargetGroupsOutput {
    /// <p>Information about the target groups.</p>
    pub fn load_balancer_target_groups(
        &self,
    ) -> std::option::Option<&[crate::model::LoadBalancerTargetGroupState]> {
        self.load_balancer_target_groups.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLoadBalancerTargetGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLoadBalancerTargetGroupsOutput`](crate::output::DescribeLoadBalancerTargetGroupsOutput).
pub mod describe_load_balancer_target_groups_output {

    /// A builder for [`DescribeLoadBalancerTargetGroupsOutput`](crate::output::DescribeLoadBalancerTargetGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_balancer_target_groups:
            std::option::Option<std::vec::Vec<crate::model::LoadBalancerTargetGroupState>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `load_balancer_target_groups`.
        ///
        /// To override the contents of this collection use [`set_load_balancer_target_groups`](Self::set_load_balancer_target_groups).
        ///
        /// <p>Information about the target groups.</p>
        pub fn load_balancer_target_groups(
            mut self,
            input: crate::model::LoadBalancerTargetGroupState,
        ) -> Self {
            let mut v = self.load_balancer_target_groups.unwrap_or_default();
            v.push(input);
            self.load_balancer_target_groups = Some(v);
            self
        }
        /// <p>Information about the target groups.</p>
        pub fn set_load_balancer_target_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LoadBalancerTargetGroupState>>,
        ) -> Self {
            self.load_balancer_target_groups = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancerTargetGroupsOutput`](crate::output::DescribeLoadBalancerTargetGroupsOutput).
        pub fn build(self) -> crate::output::DescribeLoadBalancerTargetGroupsOutput {
            crate::output::DescribeLoadBalancerTargetGroupsOutput {
                load_balancer_target_groups: self.load_balancer_target_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLoadBalancerTargetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancerTargetGroupsOutput`](crate::output::DescribeLoadBalancerTargetGroupsOutput).
    pub fn builder() -> crate::output::describe_load_balancer_target_groups_output::Builder {
        crate::output::describe_load_balancer_target_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoadBalancersOutput {
    /// <p>The load balancers.</p>
    #[doc(hidden)]
    pub load_balancers: std::option::Option<std::vec::Vec<crate::model::LoadBalancerState>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLoadBalancersOutput {
    /// <p>The load balancers.</p>
    pub fn load_balancers(&self) -> std::option::Option<&[crate::model::LoadBalancerState]> {
        self.load_balancers.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLoadBalancersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput).
pub mod describe_load_balancers_output {

    /// A builder for [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) load_balancers:
            std::option::Option<std::vec::Vec<crate::model::LoadBalancerState>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `load_balancers`.
        ///
        /// To override the contents of this collection use [`set_load_balancers`](Self::set_load_balancers).
        ///
        /// <p>The load balancers.</p>
        pub fn load_balancers(mut self, input: crate::model::LoadBalancerState) -> Self {
            let mut v = self.load_balancers.unwrap_or_default();
            v.push(input);
            self.load_balancers = Some(v);
            self
        }
        /// <p>The load balancers.</p>
        pub fn set_load_balancers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LoadBalancerState>>,
        ) -> Self {
            self.load_balancers = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput).
        pub fn build(self) -> crate::output::DescribeLoadBalancersOutput {
            crate::output::DescribeLoadBalancersOutput {
                load_balancers: self.load_balancers,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLoadBalancersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoadBalancersOutput`](crate::output::DescribeLoadBalancersOutput).
    pub fn builder() -> crate::output::describe_load_balancers_output::Builder {
        crate::output::describe_load_balancers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLifecycleHookTypesOutput {
    /// <p>The lifecycle hook types.</p>
    #[doc(hidden)]
    pub lifecycle_hook_types: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeLifecycleHookTypesOutput {
    /// <p>The lifecycle hook types.</p>
    pub fn lifecycle_hook_types(&self) -> std::option::Option<&[std::string::String]> {
        self.lifecycle_hook_types.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLifecycleHookTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLifecycleHookTypesOutput`](crate::output::DescribeLifecycleHookTypesOutput).
pub mod describe_lifecycle_hook_types_output {

    /// A builder for [`DescribeLifecycleHookTypesOutput`](crate::output::DescribeLifecycleHookTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lifecycle_hook_types: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `lifecycle_hook_types`.
        ///
        /// To override the contents of this collection use [`set_lifecycle_hook_types`](Self::set_lifecycle_hook_types).
        ///
        /// <p>The lifecycle hook types.</p>
        pub fn lifecycle_hook_types(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.lifecycle_hook_types.unwrap_or_default();
            v.push(input.into());
            self.lifecycle_hook_types = Some(v);
            self
        }
        /// <p>The lifecycle hook types.</p>
        pub fn set_lifecycle_hook_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.lifecycle_hook_types = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLifecycleHookTypesOutput`](crate::output::DescribeLifecycleHookTypesOutput).
        pub fn build(self) -> crate::output::DescribeLifecycleHookTypesOutput {
            crate::output::DescribeLifecycleHookTypesOutput {
                lifecycle_hook_types: self.lifecycle_hook_types,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLifecycleHookTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLifecycleHookTypesOutput`](crate::output::DescribeLifecycleHookTypesOutput).
    pub fn builder() -> crate::output::describe_lifecycle_hook_types_output::Builder {
        crate::output::describe_lifecycle_hook_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLifecycleHooksOutput {
    /// <p>The lifecycle hooks for the specified group.</p>
    #[doc(hidden)]
    pub lifecycle_hooks: std::option::Option<std::vec::Vec<crate::model::LifecycleHook>>,
    _request_id: Option<String>,
}
impl DescribeLifecycleHooksOutput {
    /// <p>The lifecycle hooks for the specified group.</p>
    pub fn lifecycle_hooks(&self) -> std::option::Option<&[crate::model::LifecycleHook]> {
        self.lifecycle_hooks.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLifecycleHooksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLifecycleHooksOutput`](crate::output::DescribeLifecycleHooksOutput).
pub mod describe_lifecycle_hooks_output {

    /// A builder for [`DescribeLifecycleHooksOutput`](crate::output::DescribeLifecycleHooksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lifecycle_hooks: std::option::Option<std::vec::Vec<crate::model::LifecycleHook>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `lifecycle_hooks`.
        ///
        /// To override the contents of this collection use [`set_lifecycle_hooks`](Self::set_lifecycle_hooks).
        ///
        /// <p>The lifecycle hooks for the specified group.</p>
        pub fn lifecycle_hooks(mut self, input: crate::model::LifecycleHook) -> Self {
            let mut v = self.lifecycle_hooks.unwrap_or_default();
            v.push(input);
            self.lifecycle_hooks = Some(v);
            self
        }
        /// <p>The lifecycle hooks for the specified group.</p>
        pub fn set_lifecycle_hooks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LifecycleHook>>,
        ) -> Self {
            self.lifecycle_hooks = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLifecycleHooksOutput`](crate::output::DescribeLifecycleHooksOutput).
        pub fn build(self) -> crate::output::DescribeLifecycleHooksOutput {
            crate::output::DescribeLifecycleHooksOutput {
                lifecycle_hooks: self.lifecycle_hooks,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLifecycleHooksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLifecycleHooksOutput`](crate::output::DescribeLifecycleHooksOutput).
    pub fn builder() -> crate::output::describe_lifecycle_hooks_output::Builder {
        crate::output::describe_lifecycle_hooks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLaunchConfigurationsOutput {
    /// <p>The launch configurations.</p>
    #[doc(hidden)]
    pub launch_configurations:
        std::option::Option<std::vec::Vec<crate::model::LaunchConfiguration>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLaunchConfigurationsOutput {
    /// <p>The launch configurations.</p>
    pub fn launch_configurations(
        &self,
    ) -> std::option::Option<&[crate::model::LaunchConfiguration]> {
        self.launch_configurations.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLaunchConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeLaunchConfigurationsOutput`](crate::output::DescribeLaunchConfigurationsOutput).
pub mod describe_launch_configurations_output {

    /// A builder for [`DescribeLaunchConfigurationsOutput`](crate::output::DescribeLaunchConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_configurations:
            std::option::Option<std::vec::Vec<crate::model::LaunchConfiguration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `launch_configurations`.
        ///
        /// To override the contents of this collection use [`set_launch_configurations`](Self::set_launch_configurations).
        ///
        /// <p>The launch configurations.</p>
        pub fn launch_configurations(mut self, input: crate::model::LaunchConfiguration) -> Self {
            let mut v = self.launch_configurations.unwrap_or_default();
            v.push(input);
            self.launch_configurations = Some(v);
            self
        }
        /// <p>The launch configurations.</p>
        pub fn set_launch_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchConfiguration>>,
        ) -> Self {
            self.launch_configurations = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeLaunchConfigurationsOutput`](crate::output::DescribeLaunchConfigurationsOutput).
        pub fn build(self) -> crate::output::DescribeLaunchConfigurationsOutput {
            crate::output::DescribeLaunchConfigurationsOutput {
                launch_configurations: self.launch_configurations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeLaunchConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchConfigurationsOutput`](crate::output::DescribeLaunchConfigurationsOutput).
    pub fn builder() -> crate::output::describe_launch_configurations_output::Builder {
        crate::output::describe_launch_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInstanceRefreshesOutput {
    /// <p>The instance refreshes for the specified group, sorted by creation timestamp in descending order.</p>
    #[doc(hidden)]
    pub instance_refreshes: std::option::Option<std::vec::Vec<crate::model::InstanceRefresh>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeInstanceRefreshesOutput {
    /// <p>The instance refreshes for the specified group, sorted by creation timestamp in descending order.</p>
    pub fn instance_refreshes(&self) -> std::option::Option<&[crate::model::InstanceRefresh]> {
        self.instance_refreshes.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeInstanceRefreshesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeInstanceRefreshesOutput`](crate::output::DescribeInstanceRefreshesOutput).
pub mod describe_instance_refreshes_output {

    /// A builder for [`DescribeInstanceRefreshesOutput`](crate::output::DescribeInstanceRefreshesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_refreshes:
            std::option::Option<std::vec::Vec<crate::model::InstanceRefresh>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instance_refreshes`.
        ///
        /// To override the contents of this collection use [`set_instance_refreshes`](Self::set_instance_refreshes).
        ///
        /// <p>The instance refreshes for the specified group, sorted by creation timestamp in descending order.</p>
        pub fn instance_refreshes(mut self, input: crate::model::InstanceRefresh) -> Self {
            let mut v = self.instance_refreshes.unwrap_or_default();
            v.push(input);
            self.instance_refreshes = Some(v);
            self
        }
        /// <p>The instance refreshes for the specified group, sorted by creation timestamp in descending order.</p>
        pub fn set_instance_refreshes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstanceRefresh>>,
        ) -> Self {
            self.instance_refreshes = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstanceRefreshesOutput`](crate::output::DescribeInstanceRefreshesOutput).
        pub fn build(self) -> crate::output::DescribeInstanceRefreshesOutput {
            crate::output::DescribeInstanceRefreshesOutput {
                instance_refreshes: self.instance_refreshes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeInstanceRefreshesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceRefreshesOutput`](crate::output::DescribeInstanceRefreshesOutput).
    pub fn builder() -> crate::output::describe_instance_refreshes_output::Builder {
        crate::output::describe_instance_refreshes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAutoScalingNotificationTypesOutput {
    /// <p>The notification types.</p>
    #[doc(hidden)]
    pub auto_scaling_notification_types: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeAutoScalingNotificationTypesOutput {
    /// <p>The notification types.</p>
    pub fn auto_scaling_notification_types(&self) -> std::option::Option<&[std::string::String]> {
        self.auto_scaling_notification_types.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAutoScalingNotificationTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAutoScalingNotificationTypesOutput`](crate::output::DescribeAutoScalingNotificationTypesOutput).
pub mod describe_auto_scaling_notification_types_output {

    /// A builder for [`DescribeAutoScalingNotificationTypesOutput`](crate::output::DescribeAutoScalingNotificationTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_notification_types:
            std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `auto_scaling_notification_types`.
        ///
        /// To override the contents of this collection use [`set_auto_scaling_notification_types`](Self::set_auto_scaling_notification_types).
        ///
        /// <p>The notification types.</p>
        pub fn auto_scaling_notification_types(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.auto_scaling_notification_types.unwrap_or_default();
            v.push(input.into());
            self.auto_scaling_notification_types = Some(v);
            self
        }
        /// <p>The notification types.</p>
        pub fn set_auto_scaling_notification_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.auto_scaling_notification_types = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAutoScalingNotificationTypesOutput`](crate::output::DescribeAutoScalingNotificationTypesOutput).
        pub fn build(self) -> crate::output::DescribeAutoScalingNotificationTypesOutput {
            crate::output::DescribeAutoScalingNotificationTypesOutput {
                auto_scaling_notification_types: self.auto_scaling_notification_types,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAutoScalingNotificationTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAutoScalingNotificationTypesOutput`](crate::output::DescribeAutoScalingNotificationTypesOutput).
    pub fn builder() -> crate::output::describe_auto_scaling_notification_types_output::Builder {
        crate::output::describe_auto_scaling_notification_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAutoScalingInstancesOutput {
    /// <p>The instances.</p>
    #[doc(hidden)]
    pub auto_scaling_instances:
        std::option::Option<std::vec::Vec<crate::model::AutoScalingInstanceDetails>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAutoScalingInstancesOutput {
    /// <p>The instances.</p>
    pub fn auto_scaling_instances(
        &self,
    ) -> std::option::Option<&[crate::model::AutoScalingInstanceDetails]> {
        self.auto_scaling_instances.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAutoScalingInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAutoScalingInstancesOutput`](crate::output::DescribeAutoScalingInstancesOutput).
pub mod describe_auto_scaling_instances_output {

    /// A builder for [`DescribeAutoScalingInstancesOutput`](crate::output::DescribeAutoScalingInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_instances:
            std::option::Option<std::vec::Vec<crate::model::AutoScalingInstanceDetails>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `auto_scaling_instances`.
        ///
        /// To override the contents of this collection use [`set_auto_scaling_instances`](Self::set_auto_scaling_instances).
        ///
        /// <p>The instances.</p>
        pub fn auto_scaling_instances(
            mut self,
            input: crate::model::AutoScalingInstanceDetails,
        ) -> Self {
            let mut v = self.auto_scaling_instances.unwrap_or_default();
            v.push(input);
            self.auto_scaling_instances = Some(v);
            self
        }
        /// <p>The instances.</p>
        pub fn set_auto_scaling_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AutoScalingInstanceDetails>>,
        ) -> Self {
            self.auto_scaling_instances = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAutoScalingInstancesOutput`](crate::output::DescribeAutoScalingInstancesOutput).
        pub fn build(self) -> crate::output::DescribeAutoScalingInstancesOutput {
            crate::output::DescribeAutoScalingInstancesOutput {
                auto_scaling_instances: self.auto_scaling_instances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAutoScalingInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAutoScalingInstancesOutput`](crate::output::DescribeAutoScalingInstancesOutput).
    pub fn builder() -> crate::output::describe_auto_scaling_instances_output::Builder {
        crate::output::describe_auto_scaling_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAutoScalingGroupsOutput {
    /// <p>The groups.</p>
    #[doc(hidden)]
    pub auto_scaling_groups: std::option::Option<std::vec::Vec<crate::model::AutoScalingGroup>>,
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAutoScalingGroupsOutput {
    /// <p>The groups.</p>
    pub fn auto_scaling_groups(&self) -> std::option::Option<&[crate::model::AutoScalingGroup]> {
        self.auto_scaling_groups.as_deref()
    }
    /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAutoScalingGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAutoScalingGroupsOutput`](crate::output::DescribeAutoScalingGroupsOutput).
pub mod describe_auto_scaling_groups_output {

    /// A builder for [`DescribeAutoScalingGroupsOutput`](crate::output::DescribeAutoScalingGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_groups:
            std::option::Option<std::vec::Vec<crate::model::AutoScalingGroup>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `auto_scaling_groups`.
        ///
        /// To override the contents of this collection use [`set_auto_scaling_groups`](Self::set_auto_scaling_groups).
        ///
        /// <p>The groups.</p>
        pub fn auto_scaling_groups(mut self, input: crate::model::AutoScalingGroup) -> Self {
            let mut v = self.auto_scaling_groups.unwrap_or_default();
            v.push(input);
            self.auto_scaling_groups = Some(v);
            self
        }
        /// <p>The groups.</p>
        pub fn set_auto_scaling_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AutoScalingGroup>>,
        ) -> Self {
            self.auto_scaling_groups = input;
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the <code>NextToken</code> value when requesting the next set of items. This value is null when there are no more items to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAutoScalingGroupsOutput`](crate::output::DescribeAutoScalingGroupsOutput).
        pub fn build(self) -> crate::output::DescribeAutoScalingGroupsOutput {
            crate::output::DescribeAutoScalingGroupsOutput {
                auto_scaling_groups: self.auto_scaling_groups,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAutoScalingGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAutoScalingGroupsOutput`](crate::output::DescribeAutoScalingGroupsOutput).
    pub fn builder() -> crate::output::describe_auto_scaling_groups_output::Builder {
        crate::output::describe_auto_scaling_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAdjustmentTypesOutput {
    /// <p>The policy adjustment types.</p>
    #[doc(hidden)]
    pub adjustment_types: std::option::Option<std::vec::Vec<crate::model::AdjustmentType>>,
    _request_id: Option<String>,
}
impl DescribeAdjustmentTypesOutput {
    /// <p>The policy adjustment types.</p>
    pub fn adjustment_types(&self) -> std::option::Option<&[crate::model::AdjustmentType]> {
        self.adjustment_types.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAdjustmentTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAdjustmentTypesOutput`](crate::output::DescribeAdjustmentTypesOutput).
pub mod describe_adjustment_types_output {

    /// A builder for [`DescribeAdjustmentTypesOutput`](crate::output::DescribeAdjustmentTypesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) adjustment_types:
            std::option::Option<std::vec::Vec<crate::model::AdjustmentType>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `adjustment_types`.
        ///
        /// To override the contents of this collection use [`set_adjustment_types`](Self::set_adjustment_types).
        ///
        /// <p>The policy adjustment types.</p>
        pub fn adjustment_types(mut self, input: crate::model::AdjustmentType) -> Self {
            let mut v = self.adjustment_types.unwrap_or_default();
            v.push(input);
            self.adjustment_types = Some(v);
            self
        }
        /// <p>The policy adjustment types.</p>
        pub fn set_adjustment_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdjustmentType>>,
        ) -> Self {
            self.adjustment_types = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAdjustmentTypesOutput`](crate::output::DescribeAdjustmentTypesOutput).
        pub fn build(self) -> crate::output::DescribeAdjustmentTypesOutput {
            crate::output::DescribeAdjustmentTypesOutput {
                adjustment_types: self.adjustment_types,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAdjustmentTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAdjustmentTypesOutput`](crate::output::DescribeAdjustmentTypesOutput).
    pub fn builder() -> crate::output::describe_adjustment_types_output::Builder {
        crate::output::describe_adjustment_types_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAccountLimitsOutput {
    /// <p>The maximum number of groups allowed for your account. The default is 200 groups per Region.</p>
    #[doc(hidden)]
    pub max_number_of_auto_scaling_groups: std::option::Option<i32>,
    /// <p>The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.</p>
    #[doc(hidden)]
    pub max_number_of_launch_configurations: std::option::Option<i32>,
    /// <p>The current number of groups for your account.</p>
    #[doc(hidden)]
    pub number_of_auto_scaling_groups: std::option::Option<i32>,
    /// <p>The current number of launch configurations for your account.</p>
    #[doc(hidden)]
    pub number_of_launch_configurations: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl DescribeAccountLimitsOutput {
    /// <p>The maximum number of groups allowed for your account. The default is 200 groups per Region.</p>
    pub fn max_number_of_auto_scaling_groups(&self) -> std::option::Option<i32> {
        self.max_number_of_auto_scaling_groups
    }
    /// <p>The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.</p>
    pub fn max_number_of_launch_configurations(&self) -> std::option::Option<i32> {
        self.max_number_of_launch_configurations
    }
    /// <p>The current number of groups for your account.</p>
    pub fn number_of_auto_scaling_groups(&self) -> std::option::Option<i32> {
        self.number_of_auto_scaling_groups
    }
    /// <p>The current number of launch configurations for your account.</p>
    pub fn number_of_launch_configurations(&self) -> std::option::Option<i32> {
        self.number_of_launch_configurations
    }
}
impl aws_http::request_id::RequestId for DescribeAccountLimitsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput).
pub mod describe_account_limits_output {

    /// A builder for [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) max_number_of_auto_scaling_groups: std::option::Option<i32>,
        pub(crate) max_number_of_launch_configurations: std::option::Option<i32>,
        pub(crate) number_of_auto_scaling_groups: std::option::Option<i32>,
        pub(crate) number_of_launch_configurations: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The maximum number of groups allowed for your account. The default is 200 groups per Region.</p>
        pub fn max_number_of_auto_scaling_groups(mut self, input: i32) -> Self {
            self.max_number_of_auto_scaling_groups = Some(input);
            self
        }
        /// <p>The maximum number of groups allowed for your account. The default is 200 groups per Region.</p>
        pub fn set_max_number_of_auto_scaling_groups(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.max_number_of_auto_scaling_groups = input;
            self
        }
        /// <p>The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.</p>
        pub fn max_number_of_launch_configurations(mut self, input: i32) -> Self {
            self.max_number_of_launch_configurations = Some(input);
            self
        }
        /// <p>The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.</p>
        pub fn set_max_number_of_launch_configurations(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.max_number_of_launch_configurations = input;
            self
        }
        /// <p>The current number of groups for your account.</p>
        pub fn number_of_auto_scaling_groups(mut self, input: i32) -> Self {
            self.number_of_auto_scaling_groups = Some(input);
            self
        }
        /// <p>The current number of groups for your account.</p>
        pub fn set_number_of_auto_scaling_groups(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.number_of_auto_scaling_groups = input;
            self
        }
        /// <p>The current number of launch configurations for your account.</p>
        pub fn number_of_launch_configurations(mut self, input: i32) -> Self {
            self.number_of_launch_configurations = Some(input);
            self
        }
        /// <p>The current number of launch configurations for your account.</p>
        pub fn set_number_of_launch_configurations(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.number_of_launch_configurations = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput).
        pub fn build(self) -> crate::output::DescribeAccountLimitsOutput {
            crate::output::DescribeAccountLimitsOutput {
                max_number_of_auto_scaling_groups: self.max_number_of_auto_scaling_groups,
                max_number_of_launch_configurations: self.max_number_of_launch_configurations,
                number_of_auto_scaling_groups: self.number_of_auto_scaling_groups,
                number_of_launch_configurations: self.number_of_launch_configurations,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeAccountLimitsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountLimitsOutput`](crate::output::DescribeAccountLimitsOutput).
    pub fn builder() -> crate::output::describe_account_limits_output::Builder {
        crate::output::describe_account_limits_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWarmPoolOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteWarmPoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWarmPoolOutput`](crate::output::DeleteWarmPoolOutput).
pub mod delete_warm_pool_output {

    /// A builder for [`DeleteWarmPoolOutput`](crate::output::DeleteWarmPoolOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWarmPoolOutput`](crate::output::DeleteWarmPoolOutput).
        pub fn build(self) -> crate::output::DeleteWarmPoolOutput {
            crate::output::DeleteWarmPoolOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWarmPoolOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWarmPoolOutput`](crate::output::DeleteWarmPoolOutput).
    pub fn builder() -> crate::output::delete_warm_pool_output::Builder {
        crate::output::delete_warm_pool_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTagsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
pub mod delete_tags_output {

    /// A builder for [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
        pub fn build(self) -> crate::output::DeleteTagsOutput {
            crate::output::DeleteTagsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteTagsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTagsOutput`](crate::output::DeleteTagsOutput).
    pub fn builder() -> crate::output::delete_tags_output::Builder {
        crate::output::delete_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteScheduledActionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteScheduledActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput).
pub mod delete_scheduled_action_output {

    /// A builder for [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput).
        pub fn build(self) -> crate::output::DeleteScheduledActionOutput {
            crate::output::DeleteScheduledActionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteScheduledActionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteScheduledActionOutput`](crate::output::DeleteScheduledActionOutput).
    pub fn builder() -> crate::output::delete_scheduled_action_output::Builder {
        crate::output::delete_scheduled_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePolicyOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeletePolicyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeletePolicyOutput`](crate::output::DeletePolicyOutput).
pub mod delete_policy_output {

    /// A builder for [`DeletePolicyOutput`](crate::output::DeletePolicyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeletePolicyOutput`](crate::output::DeletePolicyOutput).
        pub fn build(self) -> crate::output::DeletePolicyOutput {
            crate::output::DeletePolicyOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeletePolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeletePolicyOutput`](crate::output::DeletePolicyOutput).
    pub fn builder() -> crate::output::delete_policy_output::Builder {
        crate::output::delete_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteNotificationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteNotificationConfigurationOutput`](crate::output::DeleteNotificationConfigurationOutput).
pub mod delete_notification_configuration_output {

    /// A builder for [`DeleteNotificationConfigurationOutput`](crate::output::DeleteNotificationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteNotificationConfigurationOutput`](crate::output::DeleteNotificationConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteNotificationConfigurationOutput {
            crate::output::DeleteNotificationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNotificationConfigurationOutput`](crate::output::DeleteNotificationConfigurationOutput).
    pub fn builder() -> crate::output::delete_notification_configuration_output::Builder {
        crate::output::delete_notification_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLifecycleHookOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLifecycleHookOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLifecycleHookOutput`](crate::output::DeleteLifecycleHookOutput).
pub mod delete_lifecycle_hook_output {

    /// A builder for [`DeleteLifecycleHookOutput`](crate::output::DeleteLifecycleHookOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLifecycleHookOutput`](crate::output::DeleteLifecycleHookOutput).
        pub fn build(self) -> crate::output::DeleteLifecycleHookOutput {
            crate::output::DeleteLifecycleHookOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLifecycleHookOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLifecycleHookOutput`](crate::output::DeleteLifecycleHookOutput).
    pub fn builder() -> crate::output::delete_lifecycle_hook_output::Builder {
        crate::output::delete_lifecycle_hook_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLaunchConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLaunchConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteLaunchConfigurationOutput`](crate::output::DeleteLaunchConfigurationOutput).
pub mod delete_launch_configuration_output {

    /// A builder for [`DeleteLaunchConfigurationOutput`](crate::output::DeleteLaunchConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchConfigurationOutput`](crate::output::DeleteLaunchConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteLaunchConfigurationOutput {
            crate::output::DeleteLaunchConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteLaunchConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchConfigurationOutput`](crate::output::DeleteLaunchConfigurationOutput).
    pub fn builder() -> crate::output::delete_launch_configuration_output::Builder {
        crate::output::delete_launch_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAutoScalingGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAutoScalingGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAutoScalingGroupOutput`](crate::output::DeleteAutoScalingGroupOutput).
pub mod delete_auto_scaling_group_output {

    /// A builder for [`DeleteAutoScalingGroupOutput`](crate::output::DeleteAutoScalingGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAutoScalingGroupOutput`](crate::output::DeleteAutoScalingGroupOutput).
        pub fn build(self) -> crate::output::DeleteAutoScalingGroupOutput {
            crate::output::DeleteAutoScalingGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAutoScalingGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAutoScalingGroupOutput`](crate::output::DeleteAutoScalingGroupOutput).
    pub fn builder() -> crate::output::delete_auto_scaling_group_output::Builder {
        crate::output::delete_auto_scaling_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateOrUpdateTagsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateOrUpdateTagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateOrUpdateTagsOutput`](crate::output::CreateOrUpdateTagsOutput).
pub mod create_or_update_tags_output {

    /// A builder for [`CreateOrUpdateTagsOutput`](crate::output::CreateOrUpdateTagsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateOrUpdateTagsOutput`](crate::output::CreateOrUpdateTagsOutput).
        pub fn build(self) -> crate::output::CreateOrUpdateTagsOutput {
            crate::output::CreateOrUpdateTagsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateOrUpdateTagsOutput {
    /// Creates a new builder-style object to manufacture [`CreateOrUpdateTagsOutput`](crate::output::CreateOrUpdateTagsOutput).
    pub fn builder() -> crate::output::create_or_update_tags_output::Builder {
        crate::output::create_or_update_tags_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLaunchConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateLaunchConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateLaunchConfigurationOutput`](crate::output::CreateLaunchConfigurationOutput).
pub mod create_launch_configuration_output {

    /// A builder for [`CreateLaunchConfigurationOutput`](crate::output::CreateLaunchConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchConfigurationOutput`](crate::output::CreateLaunchConfigurationOutput).
        pub fn build(self) -> crate::output::CreateLaunchConfigurationOutput {
            crate::output::CreateLaunchConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateLaunchConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchConfigurationOutput`](crate::output::CreateLaunchConfigurationOutput).
    pub fn builder() -> crate::output::create_launch_configuration_output::Builder {
        crate::output::create_launch_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAutoScalingGroupOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateAutoScalingGroupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateAutoScalingGroupOutput`](crate::output::CreateAutoScalingGroupOutput).
pub mod create_auto_scaling_group_output {

    /// A builder for [`CreateAutoScalingGroupOutput`](crate::output::CreateAutoScalingGroupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAutoScalingGroupOutput`](crate::output::CreateAutoScalingGroupOutput).
        pub fn build(self) -> crate::output::CreateAutoScalingGroupOutput {
            crate::output::CreateAutoScalingGroupOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateAutoScalingGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateAutoScalingGroupOutput`](crate::output::CreateAutoScalingGroupOutput).
    pub fn builder() -> crate::output::create_auto_scaling_group_output::Builder {
        crate::output::create_auto_scaling_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CompleteLifecycleActionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CompleteLifecycleActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CompleteLifecycleActionOutput`](crate::output::CompleteLifecycleActionOutput).
pub mod complete_lifecycle_action_output {

    /// A builder for [`CompleteLifecycleActionOutput`](crate::output::CompleteLifecycleActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CompleteLifecycleActionOutput`](crate::output::CompleteLifecycleActionOutput).
        pub fn build(self) -> crate::output::CompleteLifecycleActionOutput {
            crate::output::CompleteLifecycleActionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CompleteLifecycleActionOutput {
    /// Creates a new builder-style object to manufacture [`CompleteLifecycleActionOutput`](crate::output::CompleteLifecycleActionOutput).
    pub fn builder() -> crate::output::complete_lifecycle_action_output::Builder {
        crate::output::complete_lifecycle_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelInstanceRefreshOutput {
    /// <p>The instance refresh ID.</p>
    #[doc(hidden)]
    pub instance_refresh_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CancelInstanceRefreshOutput {
    /// <p>The instance refresh ID.</p>
    pub fn instance_refresh_id(&self) -> std::option::Option<&str> {
        self.instance_refresh_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelInstanceRefreshOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelInstanceRefreshOutput`](crate::output::CancelInstanceRefreshOutput).
pub mod cancel_instance_refresh_output {

    /// A builder for [`CancelInstanceRefreshOutput`](crate::output::CancelInstanceRefreshOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instance_refresh_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The instance refresh ID.</p>
        pub fn instance_refresh_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.instance_refresh_id = Some(input.into());
            self
        }
        /// <p>The instance refresh ID.</p>
        pub fn set_instance_refresh_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.instance_refresh_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelInstanceRefreshOutput`](crate::output::CancelInstanceRefreshOutput).
        pub fn build(self) -> crate::output::CancelInstanceRefreshOutput {
            crate::output::CancelInstanceRefreshOutput {
                instance_refresh_id: self.instance_refresh_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelInstanceRefreshOutput {
    /// Creates a new builder-style object to manufacture [`CancelInstanceRefreshOutput`](crate::output::CancelInstanceRefreshOutput).
    pub fn builder() -> crate::output::cancel_instance_refresh_output::Builder {
        crate::output::cancel_instance_refresh_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPutScheduledUpdateGroupActionOutput {
    /// <p>The names of the scheduled actions that could not be created or updated, including an error message.</p>
    #[doc(hidden)]
    pub failed_scheduled_update_group_actions:
        std::option::Option<std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>>,
    _request_id: Option<String>,
}
impl BatchPutScheduledUpdateGroupActionOutput {
    /// <p>The names of the scheduled actions that could not be created or updated, including an error message.</p>
    pub fn failed_scheduled_update_group_actions(
        &self,
    ) -> std::option::Option<&[crate::model::FailedScheduledUpdateGroupActionRequest]> {
        self.failed_scheduled_update_group_actions.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchPutScheduledUpdateGroupActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchPutScheduledUpdateGroupActionOutput`](crate::output::BatchPutScheduledUpdateGroupActionOutput).
pub mod batch_put_scheduled_update_group_action_output {

    /// A builder for [`BatchPutScheduledUpdateGroupActionOutput`](crate::output::BatchPutScheduledUpdateGroupActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_scheduled_update_group_actions: std::option::Option<
            std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `failed_scheduled_update_group_actions`.
        ///
        /// To override the contents of this collection use [`set_failed_scheduled_update_group_actions`](Self::set_failed_scheduled_update_group_actions).
        ///
        /// <p>The names of the scheduled actions that could not be created or updated, including an error message.</p>
        pub fn failed_scheduled_update_group_actions(
            mut self,
            input: crate::model::FailedScheduledUpdateGroupActionRequest,
        ) -> Self {
            let mut v = self
                .failed_scheduled_update_group_actions
                .unwrap_or_default();
            v.push(input);
            self.failed_scheduled_update_group_actions = Some(v);
            self
        }
        /// <p>The names of the scheduled actions that could not be created or updated, including an error message.</p>
        pub fn set_failed_scheduled_update_group_actions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>,
            >,
        ) -> Self {
            self.failed_scheduled_update_group_actions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchPutScheduledUpdateGroupActionOutput`](crate::output::BatchPutScheduledUpdateGroupActionOutput).
        pub fn build(self) -> crate::output::BatchPutScheduledUpdateGroupActionOutput {
            crate::output::BatchPutScheduledUpdateGroupActionOutput {
                failed_scheduled_update_group_actions: self.failed_scheduled_update_group_actions,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchPutScheduledUpdateGroupActionOutput {
    /// Creates a new builder-style object to manufacture [`BatchPutScheduledUpdateGroupActionOutput`](crate::output::BatchPutScheduledUpdateGroupActionOutput).
    pub fn builder() -> crate::output::batch_put_scheduled_update_group_action_output::Builder {
        crate::output::batch_put_scheduled_update_group_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteScheduledActionOutput {
    /// <p>The names of the scheduled actions that could not be deleted, including an error message.</p>
    #[doc(hidden)]
    pub failed_scheduled_actions:
        std::option::Option<std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>>,
    _request_id: Option<String>,
}
impl BatchDeleteScheduledActionOutput {
    /// <p>The names of the scheduled actions that could not be deleted, including an error message.</p>
    pub fn failed_scheduled_actions(
        &self,
    ) -> std::option::Option<&[crate::model::FailedScheduledUpdateGroupActionRequest]> {
        self.failed_scheduled_actions.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDeleteScheduledActionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchDeleteScheduledActionOutput`](crate::output::BatchDeleteScheduledActionOutput).
pub mod batch_delete_scheduled_action_output {

    /// A builder for [`BatchDeleteScheduledActionOutput`](crate::output::BatchDeleteScheduledActionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failed_scheduled_actions: std::option::Option<
            std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `failed_scheduled_actions`.
        ///
        /// To override the contents of this collection use [`set_failed_scheduled_actions`](Self::set_failed_scheduled_actions).
        ///
        /// <p>The names of the scheduled actions that could not be deleted, including an error message.</p>
        pub fn failed_scheduled_actions(
            mut self,
            input: crate::model::FailedScheduledUpdateGroupActionRequest,
        ) -> Self {
            let mut v = self.failed_scheduled_actions.unwrap_or_default();
            v.push(input);
            self.failed_scheduled_actions = Some(v);
            self
        }
        /// <p>The names of the scheduled actions that could not be deleted, including an error message.</p>
        pub fn set_failed_scheduled_actions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::FailedScheduledUpdateGroupActionRequest>,
            >,
        ) -> Self {
            self.failed_scheduled_actions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeleteScheduledActionOutput`](crate::output::BatchDeleteScheduledActionOutput).
        pub fn build(self) -> crate::output::BatchDeleteScheduledActionOutput {
            crate::output::BatchDeleteScheduledActionOutput {
                failed_scheduled_actions: self.failed_scheduled_actions,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchDeleteScheduledActionOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteScheduledActionOutput`](crate::output::BatchDeleteScheduledActionOutput).
    pub fn builder() -> crate::output::batch_delete_scheduled_action_output::Builder {
        crate::output::batch_delete_scheduled_action_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachTrafficSourcesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AttachTrafficSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachTrafficSourcesOutput`](crate::output::AttachTrafficSourcesOutput).
pub mod attach_traffic_sources_output {

    /// A builder for [`AttachTrafficSourcesOutput`](crate::output::AttachTrafficSourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachTrafficSourcesOutput`](crate::output::AttachTrafficSourcesOutput).
        pub fn build(self) -> crate::output::AttachTrafficSourcesOutput {
            crate::output::AttachTrafficSourcesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachTrafficSourcesOutput {
    /// Creates a new builder-style object to manufacture [`AttachTrafficSourcesOutput`](crate::output::AttachTrafficSourcesOutput).
    pub fn builder() -> crate::output::attach_traffic_sources_output::Builder {
        crate::output::attach_traffic_sources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachLoadBalancerTargetGroupsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AttachLoadBalancerTargetGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachLoadBalancerTargetGroupsOutput`](crate::output::AttachLoadBalancerTargetGroupsOutput).
pub mod attach_load_balancer_target_groups_output {

    /// A builder for [`AttachLoadBalancerTargetGroupsOutput`](crate::output::AttachLoadBalancerTargetGroupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachLoadBalancerTargetGroupsOutput`](crate::output::AttachLoadBalancerTargetGroupsOutput).
        pub fn build(self) -> crate::output::AttachLoadBalancerTargetGroupsOutput {
            crate::output::AttachLoadBalancerTargetGroupsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachLoadBalancerTargetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`AttachLoadBalancerTargetGroupsOutput`](crate::output::AttachLoadBalancerTargetGroupsOutput).
    pub fn builder() -> crate::output::attach_load_balancer_target_groups_output::Builder {
        crate::output::attach_load_balancer_target_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachLoadBalancersOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AttachLoadBalancersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachLoadBalancersOutput`](crate::output::AttachLoadBalancersOutput).
pub mod attach_load_balancers_output {

    /// A builder for [`AttachLoadBalancersOutput`](crate::output::AttachLoadBalancersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachLoadBalancersOutput`](crate::output::AttachLoadBalancersOutput).
        pub fn build(self) -> crate::output::AttachLoadBalancersOutput {
            crate::output::AttachLoadBalancersOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachLoadBalancersOutput {
    /// Creates a new builder-style object to manufacture [`AttachLoadBalancersOutput`](crate::output::AttachLoadBalancersOutput).
    pub fn builder() -> crate::output::attach_load_balancers_output::Builder {
        crate::output::attach_load_balancers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AttachInstancesOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AttachInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AttachInstancesOutput`](crate::output::AttachInstancesOutput).
pub mod attach_instances_output {

    /// A builder for [`AttachInstancesOutput`](crate::output::AttachInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AttachInstancesOutput`](crate::output::AttachInstancesOutput).
        pub fn build(self) -> crate::output::AttachInstancesOutput {
            crate::output::AttachInstancesOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AttachInstancesOutput {
    /// Creates a new builder-style object to manufacture [`AttachInstancesOutput`](crate::output::AttachInstancesOutput).
    pub fn builder() -> crate::output::attach_instances_output::Builder {
        crate::output::attach_instances_output::Builder::default()
    }
}
