// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_auto_scaling_groups_output_next_token(
    input: &crate::output::DescribeAutoScalingGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_auto_scaling_instances_output_next_token(
    input: &crate::output::DescribeAutoScalingInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_launch_configurations_output_next_token(
    input: &crate::output::DescribeLaunchConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_notification_configurations_output_next_token(
    input: &crate::output::DescribeNotificationConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_policies_output_next_token(
    input: &crate::output::DescribePoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scaling_activities_output_next_token(
    input: &crate::output::DescribeScalingActivitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_scheduled_actions_output_next_token(
    input: &crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_tags_output_next_token(
    input: &crate::output::DescribeTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_auto_scaling_groups_output_auto_scaling_groups(
    input: crate::output::DescribeAutoScalingGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AutoScalingGroup>> {
    let input = match input.auto_scaling_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_auto_scaling_instances_output_auto_scaling_instances(
    input: crate::output::DescribeAutoScalingInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AutoScalingInstanceDetails>> {
    let input = match input.auto_scaling_instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_launch_configurations_output_launch_configurations(
    input: crate::output::DescribeLaunchConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LaunchConfiguration>> {
    let input = match input.launch_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_notification_configurations_output_notification_configurations(
    input: crate::output::DescribeNotificationConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::NotificationConfiguration>> {
    let input = match input.notification_configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_policies_output_scaling_policies(
    input: crate::output::DescribePoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScalingPolicy>> {
    let input = match input.scaling_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scaling_activities_output_activities(
    input: crate::output::DescribeScalingActivitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Activity>> {
    let input = match input.activities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_scheduled_actions_output_scheduled_update_group_actions(
    input: crate::output::DescribeScheduledActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ScheduledUpdateGroupAction>> {
    let input = match input.scheduled_update_group_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_tags_output_tags(
    input: crate::output::DescribeTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TagDescription>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
