// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::record_lifecycle_action_heartbeat::_record_lifecycle_action_heartbeat_output::RecordLifecycleActionHeartbeatOutputBuilder;

pub use crate::operation::record_lifecycle_action_heartbeat::_record_lifecycle_action_heartbeat_input::RecordLifecycleActionHeartbeatInputBuilder;

impl crate::operation::record_lifecycle_action_heartbeat::builders::RecordLifecycleActionHeartbeatInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.record_lifecycle_action_heartbeat();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RecordLifecycleActionHeartbeat`.
///
/// <p>Records a heartbeat for the lifecycle action associated with the specified token or instance. This extends the timeout by the length of time defined using the <code>PutLifecycleHook</code> API call.</p>
/// <p>This step is a part of the procedure for adding a lifecycle hook to an Auto Scaling group:</p>
/// <ol>
/// <li>
/// <p>(Optional) Create a launch template or launch configuration with a user data script that runs while an instance is in a wait state due to a lifecycle hook.</p></li>
/// <li>
/// <p>(Optional) Create a Lambda function and a rule that allows Amazon EventBridge to invoke your Lambda function when an instance is put into a wait state due to a lifecycle hook.</p></li>
/// <li>
/// <p>(Optional) Create a notification target and an IAM role. The target can be either an Amazon SQS queue or an Amazon SNS topic. The role allows Amazon EC2 Auto Scaling to publish lifecycle notifications to the target.</p></li>
/// <li>
/// <p>Create the lifecycle hook. Specify whether the hook is used when the instances launch or terminate.</p></li>
/// <li>
/// <p><b>If you need more time, record the lifecycle action heartbeat to keep the instance in a wait state.</b></p></li>
/// <li>
/// <p>If you finish before the timeout period ends, send a callback by using the <code>CompleteLifecycleAction</code> API call.</p></li>
/// </ol>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html">Amazon EC2 Auto Scaling lifecycle hooks</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RecordLifecycleActionHeartbeatFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::record_lifecycle_action_heartbeat::builders::RecordLifecycleActionHeartbeatInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatOutput,
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
    > for RecordLifecycleActionHeartbeatFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatOutput,
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RecordLifecycleActionHeartbeatFluentBuilder {
    /// Creates a new `RecordLifecycleActionHeartbeat`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RecordLifecycleActionHeartbeat as a reference.
    pub fn as_input(&self) -> &crate::operation::record_lifecycle_action_heartbeat::builders::RecordLifecycleActionHeartbeatInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeat::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeat::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatOutput,
        crate::operation::record_lifecycle_action_heartbeat::RecordLifecycleActionHeartbeatError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_hook_name(input.into());
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn set_lifecycle_hook_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lifecycle_hook_name(input);
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn get_lifecycle_hook_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lifecycle_hook_name()
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_group_name(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_auto_scaling_group_name(input);
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn get_auto_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_auto_scaling_group_name()
    }
    /// <p>A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.</p>
    pub fn lifecycle_action_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.lifecycle_action_token(input.into());
        self
    }
    /// <p>A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.</p>
    pub fn set_lifecycle_action_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_lifecycle_action_token(input);
        self
    }
    /// <p>A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.</p>
    pub fn get_lifecycle_action_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_lifecycle_action_token()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instance_id(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instance_id(input);
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instance_id()
    }
}
