// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::resume_processes::_resume_processes_output::ResumeProcessesOutputBuilder;

pub use crate::operation::resume_processes::_resume_processes_input::ResumeProcessesInputBuilder;

/// Fluent builder constructing a request to `ResumeProcesses`.
///
/// <p>Resumes the specified suspended auto scaling processes, or all suspended process, for the specified Auto Scaling group.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html">Suspending and resuming scaling processes</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ResumeProcessesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::resume_processes::builders::ResumeProcessesInputBuilder,
}
impl ResumeProcessesFluentBuilder {
    /// Creates a new `ResumeProcesses`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::resume_processes::ResumeProcesses,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::resume_processes::ResumeProcessesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::resume_processes::ResumeProcessesOutput,
        aws_smithy_http::result::SdkError<crate::operation::resume_processes::ResumeProcessesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_group_name(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_scaling_group_name(input);
        self
    }
    /// Appends an item to `ScalingProcesses`.
    ///
    /// To override the contents of this collection use [`set_scaling_processes`](Self::set_scaling_processes).
    ///
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    pub fn scaling_processes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_processes(input.into());
        self
    }
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    pub fn set_scaling_processes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_scaling_processes(input);
        self
    }
}
