// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResumeProcessesInput {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    #[doc(hidden)]
    pub scaling_processes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResumeProcessesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    pub fn scaling_processes(&self) -> std::option::Option<&[std::string::String]> {
        self.scaling_processes.as_deref()
    }
}
impl ResumeProcessesInput {
    /// Creates a new builder-style object to manufacture [`ResumeProcessesInput`](crate::operation::resume_processes::ResumeProcessesInput).
    pub fn builder() -> crate::operation::resume_processes::builders::ResumeProcessesInputBuilder {
        crate::operation::resume_processes::builders::ResumeProcessesInputBuilder::default()
    }
}

/// A builder for [`ResumeProcessesInput`](crate::operation::resume_processes::ResumeProcessesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResumeProcessesInputBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) scaling_processes: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResumeProcessesInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// Appends an item to `scaling_processes`.
    ///
    /// To override the contents of this collection use [`set_scaling_processes`](Self::set_scaling_processes).
    ///
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    pub fn scaling_processes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.scaling_processes.unwrap_or_default();
        v.push(input.into());
        self.scaling_processes = Some(v);
        self
    }
    /// <p>One or more of the following processes:</p>
    /// <ul>
    /// <li> <p> <code>Launch</code> </p> </li>
    /// <li> <p> <code>Terminate</code> </p> </li>
    /// <li> <p> <code>AddToLoadBalancer</code> </p> </li>
    /// <li> <p> <code>AlarmNotification</code> </p> </li>
    /// <li> <p> <code>AZRebalance</code> </p> </li>
    /// <li> <p> <code>HealthCheck</code> </p> </li>
    /// <li> <p> <code>InstanceRefresh</code> </p> </li>
    /// <li> <p> <code>ReplaceUnhealthy</code> </p> </li>
    /// <li> <p> <code>ScheduledActions</code> </p> </li>
    /// </ul>
    /// <p>If you omit this property, all processes are specified.</p>
    pub fn set_scaling_processes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.scaling_processes = input;
        self
    }
    /// Consumes the builder and constructs a [`ResumeProcessesInput`](crate::operation::resume_processes::ResumeProcessesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::resume_processes::ResumeProcessesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::resume_processes::ResumeProcessesInput {
            auto_scaling_group_name: self.auto_scaling_group_name,
            scaling_processes: self.scaling_processes,
        })
    }
}
