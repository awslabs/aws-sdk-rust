// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetachTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The unique identifiers of one or more traffic sources you are detaching. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <code>DescribeTrafficSources</code> API call. The instances continue to run.</p>
    #[doc(hidden)]
    pub traffic_sources: std::option::Option<std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
}
impl DetachTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The unique identifiers of one or more traffic sources you are detaching. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <code>DescribeTrafficSources</code> API call. The instances continue to run.</p>
    pub fn traffic_sources(&self) -> std::option::Option<&[crate::types::TrafficSourceIdentifier]> {
        self.traffic_sources.as_deref()
    }
}
impl DetachTrafficSourcesInput {
    /// Creates a new builder-style object to manufacture [`DetachTrafficSourcesInput`](crate::operation::detach_traffic_sources::DetachTrafficSourcesInput).
    pub fn builder(
    ) -> crate::operation::detach_traffic_sources::builders::DetachTrafficSourcesInputBuilder {
        crate::operation::detach_traffic_sources::builders::DetachTrafficSourcesInputBuilder::default()
    }
}

/// A builder for [`DetachTrafficSourcesInput`](crate::operation::detach_traffic_sources::DetachTrafficSourcesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetachTrafficSourcesInputBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) traffic_sources:
        std::option::Option<std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
}
impl DetachTrafficSourcesInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// Appends an item to `traffic_sources`.
    ///
    /// To override the contents of this collection use [`set_traffic_sources`](Self::set_traffic_sources).
    ///
    /// <p>The unique identifiers of one or more traffic sources you are detaching. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <code>DescribeTrafficSources</code> API call. The instances continue to run.</p>
    pub fn traffic_sources(mut self, input: crate::types::TrafficSourceIdentifier) -> Self {
        let mut v = self.traffic_sources.unwrap_or_default();
        v.push(input);
        self.traffic_sources = Some(v);
        self
    }
    /// <p>The unique identifiers of one or more traffic sources you are detaching. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <code>DescribeTrafficSources</code> API call. The instances continue to run.</p>
    pub fn set_traffic_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
    ) -> Self {
        self.traffic_sources = input;
        self
    }
    /// Consumes the builder and constructs a [`DetachTrafficSourcesInput`](crate::operation::detach_traffic_sources::DetachTrafficSourcesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::detach_traffic_sources::DetachTrafficSourcesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::detach_traffic_sources::DetachTrafficSourcesInput {
                auto_scaling_group_name: self.auto_scaling_group_name,
                traffic_sources: self.traffic_sources,
            },
        )
    }
}
