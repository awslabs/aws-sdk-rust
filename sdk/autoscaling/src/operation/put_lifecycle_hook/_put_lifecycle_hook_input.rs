// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutLifecycleHookInput {
    /// <p>The name of the lifecycle hook.</p>
    pub lifecycle_hook_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Auto Scaling group.</p>
    pub auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p>
    /// <ul>
    /// <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li>
    /// <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li>
    /// </ul>
    /// <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub lifecycle_transition: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p>
    /// <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p>
    /// <p>If you specify an empty string, this overrides the current ARN.</p>
    /// <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p>
    /// <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
    pub notification_target_arn: ::std::option::Option<::std::string::String>,
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub notification_metadata: ::std::option::Option<::std::string::String>,
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p>
    pub heartbeat_timeout: ::std::option::Option<i32>,
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub default_result: ::std::option::Option<::std::string::String>,
}
impl PutLifecycleHookInput {
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(&self) -> ::std::option::Option<&str> {
        self.lifecycle_hook_name.as_deref()
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> ::std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p>
    /// <ul>
    /// <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li>
    /// <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li>
    /// </ul>
    /// <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn lifecycle_transition(&self) -> ::std::option::Option<&str> {
        self.lifecycle_transition.as_deref()
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p>
    /// <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p>
    /// <p>If you specify an empty string, this overrides the current ARN.</p>
    /// <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p>
    /// <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
    pub fn notification_target_arn(&self) -> ::std::option::Option<&str> {
        self.notification_target_arn.as_deref()
    }
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn notification_metadata(&self) -> ::std::option::Option<&str> {
        self.notification_metadata.as_deref()
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p>
    pub fn heartbeat_timeout(&self) -> ::std::option::Option<i32> {
        self.heartbeat_timeout
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn default_result(&self) -> ::std::option::Option<&str> {
        self.default_result.as_deref()
    }
}
impl PutLifecycleHookInput {
    /// Creates a new builder-style object to manufacture [`PutLifecycleHookInput`](crate::operation::put_lifecycle_hook::PutLifecycleHookInput).
    pub fn builder() -> crate::operation::put_lifecycle_hook::builders::PutLifecycleHookInputBuilder {
        crate::operation::put_lifecycle_hook::builders::PutLifecycleHookInputBuilder::default()
    }
}

/// A builder for [`PutLifecycleHookInput`](crate::operation::put_lifecycle_hook::PutLifecycleHookInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutLifecycleHookInputBuilder {
    pub(crate) lifecycle_hook_name: ::std::option::Option<::std::string::String>,
    pub(crate) auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) lifecycle_transition: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) notification_target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) notification_metadata: ::std::option::Option<::std::string::String>,
    pub(crate) heartbeat_timeout: ::std::option::Option<i32>,
    pub(crate) default_result: ::std::option::Option<::std::string::String>,
}
impl PutLifecycleHookInputBuilder {
    /// <p>The name of the lifecycle hook.</p>
    /// This field is required.
    pub fn lifecycle_hook_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_hook_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn set_lifecycle_hook_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_hook_name = input;
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn get_lifecycle_hook_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_hook_name
    }
    /// <p>The name of the Auto Scaling group.</p>
    /// This field is required.
    pub fn auto_scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_scaling_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn get_auto_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_scaling_group_name
    }
    /// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p>
    /// <ul>
    /// <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li>
    /// <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li>
    /// </ul>
    /// <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn lifecycle_transition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lifecycle_transition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p>
    /// <ul>
    /// <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li>
    /// <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li>
    /// </ul>
    /// <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn set_lifecycle_transition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lifecycle_transition = input;
        self
    }
    /// <p>The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.</p>
    /// <ul>
    /// <li> <p>To create a lifecycle hook for scale-out events, specify <code>autoscaling:EC2_INSTANCE_LAUNCHING</code>.</p> </li>
    /// <li> <p>To create a lifecycle hook for scale-in events, specify <code>autoscaling:EC2_INSTANCE_TERMINATING</code>.</p> </li>
    /// </ul>
    /// <p>Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn get_lifecycle_transition(&self) -> &::std::option::Option<::std::string::String> {
        &self.lifecycle_transition
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p>
    /// <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p>
    /// <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.</p>
    /// <p>Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p>
    /// <p>If you specify an empty string, this overrides the current ARN.</p>
    /// <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p>
    /// <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
    pub fn notification_target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p>
    /// <p>If you specify an empty string, this overrides the current ARN.</p>
    /// <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p>
    /// <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
    pub fn set_notification_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_target_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue.</p>
    /// <p>If you specify an empty string, this overrides the current ARN.</p>
    /// <p>This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic.</p>
    /// <p>When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: <code>"Event": "autoscaling:TEST_NOTIFICATION"</code>.</p>
    pub fn get_notification_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_target_arn
    }
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn notification_metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn set_notification_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_metadata = input;
        self
    }
    /// <p>Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn get_notification_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_metadata
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p>
    pub fn heartbeat_timeout(mut self, input: i32) -> Self {
        self.heartbeat_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p>
    pub fn set_heartbeat_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.heartbeat_timeout = input;
        self
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from <code>30</code> to <code>7200</code> seconds. The default value is <code>3600</code> seconds (1 hour).</p>
    pub fn get_heartbeat_timeout(&self) -> &::std::option::Option<i32> {
        &self.heartbeat_timeout
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn default_result(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_result = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn set_default_result(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_result = input;
        self
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is <code>ABANDON</code>.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn get_default_result(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_result
    }
    /// Consumes the builder and constructs a [`PutLifecycleHookInput`](crate::operation::put_lifecycle_hook::PutLifecycleHookInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_lifecycle_hook::PutLifecycleHookInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_lifecycle_hook::PutLifecycleHookInput {
            lifecycle_hook_name: self.lifecycle_hook_name,
            auto_scaling_group_name: self.auto_scaling_group_name,
            lifecycle_transition: self.lifecycle_transition,
            role_arn: self.role_arn,
            notification_target_arn: self.notification_target_arn,
            notification_metadata: self.notification_metadata,
            heartbeat_timeout: self.heartbeat_timeout,
            default_result: self.default_result,
        })
    }
}
