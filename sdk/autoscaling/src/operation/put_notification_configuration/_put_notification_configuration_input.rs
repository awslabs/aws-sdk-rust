// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutNotificationConfigurationInput {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
    /// <p>The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the <code>DescribeAutoScalingNotificationTypes</code> API.</p>
    #[doc(hidden)]
    pub notification_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PutNotificationConfigurationInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
    /// <p>The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the <code>DescribeAutoScalingNotificationTypes</code> API.</p>
    pub fn notification_types(&self) -> std::option::Option<&[std::string::String]> {
        self.notification_types.as_deref()
    }
}
impl PutNotificationConfigurationInput {
    /// Creates a new builder-style object to manufacture [`PutNotificationConfigurationInput`](crate::operation::put_notification_configuration::PutNotificationConfigurationInput).
    pub fn builder() -> crate::operation::put_notification_configuration::builders::PutNotificationConfigurationInputBuilder{
        crate::operation::put_notification_configuration::builders::PutNotificationConfigurationInputBuilder::default()
    }
}

/// A builder for [`PutNotificationConfigurationInput`](crate::operation::put_notification_configuration::PutNotificationConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutNotificationConfigurationInputBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) topic_arn: std::option::Option<std::string::String>,
    pub(crate) notification_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PutNotificationConfigurationInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// Appends an item to `notification_types`.
    ///
    /// To override the contents of this collection use [`set_notification_types`](Self::set_notification_types).
    ///
    /// <p>The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the <code>DescribeAutoScalingNotificationTypes</code> API.</p>
    pub fn notification_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.notification_types.unwrap_or_default();
        v.push(input.into());
        self.notification_types = Some(v);
        self
    }
    /// <p>The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the <code>DescribeAutoScalingNotificationTypes</code> API.</p>
    pub fn set_notification_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.notification_types = input;
        self
    }
    /// Consumes the builder and constructs a [`PutNotificationConfigurationInput`](crate::operation::put_notification_configuration::PutNotificationConfigurationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_notification_configuration::PutNotificationConfigurationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_notification_configuration::PutNotificationConfigurationInput {
                auto_scaling_group_name: self.auto_scaling_group_name,
                topic_arn: self.topic_arn,
                notification_types: self.notification_types,
            },
        )
    }
}
