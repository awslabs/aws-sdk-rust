// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPredictiveScalingForecastOutput {
    /// <p>The load forecast.</p>
    pub load_forecast: ::std::option::Option<::std::vec::Vec<crate::types::LoadForecast>>,
    /// <p>The capacity forecast.</p>
    pub capacity_forecast: ::std::option::Option<crate::types::CapacityForecast>,
    /// <p>The time the forecast was made.</p>
    pub update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPredictiveScalingForecastOutput {
    /// <p>The load forecast.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.load_forecast.is_none()`.
    pub fn load_forecast(&self) -> &[crate::types::LoadForecast] {
        self.load_forecast.as_deref().unwrap_or_default()
    }
    /// <p>The capacity forecast.</p>
    pub fn capacity_forecast(&self) -> ::std::option::Option<&crate::types::CapacityForecast> {
        self.capacity_forecast.as_ref()
    }
    /// <p>The time the forecast was made.</p>
    pub fn update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetPredictiveScalingForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPredictiveScalingForecastOutput {
    /// Creates a new builder-style object to manufacture [`GetPredictiveScalingForecastOutput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput).
    pub fn builder() -> crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder {
        crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder::default()
    }
}

/// A builder for [`GetPredictiveScalingForecastOutput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPredictiveScalingForecastOutputBuilder {
    pub(crate) load_forecast: ::std::option::Option<::std::vec::Vec<crate::types::LoadForecast>>,
    pub(crate) capacity_forecast: ::std::option::Option<crate::types::CapacityForecast>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPredictiveScalingForecastOutputBuilder {
    /// Appends an item to `load_forecast`.
    ///
    /// To override the contents of this collection use [`set_load_forecast`](Self::set_load_forecast).
    ///
    /// <p>The load forecast.</p>
    pub fn load_forecast(mut self, input: crate::types::LoadForecast) -> Self {
        let mut v = self.load_forecast.unwrap_or_default();
        v.push(input);
        self.load_forecast = ::std::option::Option::Some(v);
        self
    }
    /// <p>The load forecast.</p>
    pub fn set_load_forecast(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LoadForecast>>) -> Self {
        self.load_forecast = input;
        self
    }
    /// <p>The load forecast.</p>
    pub fn get_load_forecast(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LoadForecast>> {
        &self.load_forecast
    }
    /// <p>The capacity forecast.</p>
    /// This field is required.
    pub fn capacity_forecast(mut self, input: crate::types::CapacityForecast) -> Self {
        self.capacity_forecast = ::std::option::Option::Some(input);
        self
    }
    /// <p>The capacity forecast.</p>
    pub fn set_capacity_forecast(mut self, input: ::std::option::Option<crate::types::CapacityForecast>) -> Self {
        self.capacity_forecast = input;
        self
    }
    /// <p>The capacity forecast.</p>
    pub fn get_capacity_forecast(&self) -> &::std::option::Option<crate::types::CapacityForecast> {
        &self.capacity_forecast
    }
    /// <p>The time the forecast was made.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the forecast was made.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The time the forecast was made.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPredictiveScalingForecastOutput`](crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput).
    pub fn build(self) -> crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput {
        crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput {
            load_forecast: self.load_forecast,
            capacity_forecast: self.capacity_forecast,
            update_time: self.update_time,
            _request_id: self._request_id,
        }
    }
}
