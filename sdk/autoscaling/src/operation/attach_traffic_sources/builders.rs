// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::attach_traffic_sources::_attach_traffic_sources_output::AttachTrafficSourcesOutputBuilder;

pub use crate::operation::attach_traffic_sources::_attach_traffic_sources_input::AttachTrafficSourcesInputBuilder;

/// Fluent builder constructing a request to `AttachTrafficSources`.
///
/// <p> <b>Reserved for use with Amazon VPC Lattice, which is in preview and subject to change. Do not use this API for production workloads. This API is also subject to change.</b> </p>
/// <p>Attaches one or more traffic sources to the specified Auto Scaling group.</p>
/// <p>To describe the traffic sources for an Auto Scaling group, call the <code>DescribeTrafficSources</code> API. To detach a traffic source from the Auto Scaling group, call the <code>DetachTrafficSources</code> API.</p>
/// <p>This operation is additive and does not detach existing traffic sources from the Auto Scaling group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AttachTrafficSourcesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::attach_traffic_sources::builders::AttachTrafficSourcesInputBuilder,
}
impl AttachTrafficSourcesFluentBuilder {
    /// Creates a new `AttachTrafficSources`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::attach_traffic_sources::AttachTrafficSources,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::attach_traffic_sources::AttachTrafficSourcesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::attach_traffic_sources::AttachTrafficSourcesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_group_name(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_scaling_group_name(input);
        self
    }
    /// Appends an item to `TrafficSources`.
    ///
    /// To override the contents of this collection use [`set_traffic_sources`](Self::set_traffic_sources).
    ///
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. Amazon EC2 Auto Scaling registers the running instances with the attached target groups. The target groups receive incoming traffic and route requests to one or more registered targets.</p>
    pub fn traffic_sources(mut self, input: crate::types::TrafficSourceIdentifier) -> Self {
        self.inner = self.inner.traffic_sources(input);
        self
    }
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    /// <p>Currently, you must specify an Amazon Resource Name (ARN) for an existing VPC Lattice target group. Amazon EC2 Auto Scaling registers the running instances with the attached target groups. The target groups receive incoming traffic and route requests to one or more registered targets.</p>
    pub fn set_traffic_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
    ) -> Self {
        self.inner = self.inner.set_traffic_sources(input);
        self
    }
}
