// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AttachTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    pub traffic_sources: ::std::option::Option<::std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
}
impl AttachTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> ::std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.traffic_sources.is_none()`.
    pub fn traffic_sources(&self) -> &[crate::types::TrafficSourceIdentifier] {
        self.traffic_sources.as_deref().unwrap_or_default()
    }
}
impl AttachTrafficSourcesInput {
    /// Creates a new builder-style object to manufacture [`AttachTrafficSourcesInput`](crate::operation::attach_traffic_sources::AttachTrafficSourcesInput).
    pub fn builder() -> crate::operation::attach_traffic_sources::builders::AttachTrafficSourcesInputBuilder {
        crate::operation::attach_traffic_sources::builders::AttachTrafficSourcesInputBuilder::default()
    }
}

/// A builder for [`AttachTrafficSourcesInput`](crate::operation::attach_traffic_sources::AttachTrafficSourcesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AttachTrafficSourcesInputBuilder {
    pub(crate) auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_sources: ::std::option::Option<::std::vec::Vec<crate::types::TrafficSourceIdentifier>>,
}
impl AttachTrafficSourcesInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    /// This field is required.
    pub fn auto_scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_scaling_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn get_auto_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_scaling_group_name
    }
    /// Appends an item to `traffic_sources`.
    ///
    /// To override the contents of this collection use [`set_traffic_sources`](Self::set_traffic_sources).
    ///
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    pub fn traffic_sources(mut self, input: crate::types::TrafficSourceIdentifier) -> Self {
        let mut v = self.traffic_sources.unwrap_or_default();
        v.push(input);
        self.traffic_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    pub fn set_traffic_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TrafficSourceIdentifier>>) -> Self {
        self.traffic_sources = input;
        self
    }
    /// <p>The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.</p>
    pub fn get_traffic_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TrafficSourceIdentifier>> {
        &self.traffic_sources
    }
    /// Consumes the builder and constructs a [`AttachTrafficSourcesInput`](crate::operation::attach_traffic_sources::AttachTrafficSourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::attach_traffic_sources::AttachTrafficSourcesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::attach_traffic_sources::AttachTrafficSourcesInput {
            auto_scaling_group_name: self.auto_scaling_group_name,
            traffic_sources: self.traffic_sources,
        })
    }
}
