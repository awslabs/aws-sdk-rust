// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::detach_load_balancer_target_groups::_detach_load_balancer_target_groups_output::DetachLoadBalancerTargetGroupsOutputBuilder;

pub use crate::operation::detach_load_balancer_target_groups::_detach_load_balancer_target_groups_input::DetachLoadBalancerTargetGroupsInputBuilder;

/// Fluent builder constructing a request to `DetachLoadBalancerTargetGroups`.
///
/// <p>Detaches one or more target groups from the specified Auto Scaling group.</p>
/// <p>When you detach a target group, it enters the <code>Removing</code> state while deregistering the instances in the group. When all instances are deregistered, then you can no longer describe the target group using the <code>DescribeLoadBalancerTargetGroups</code> API call. The instances remain running.</p> <note>
/// <p>You can use this operation to detach target groups that were attached by using <code>AttachLoadBalancerTargetGroups</code>, but not for target groups that were attached by using <code>AttachTrafficSources</code>.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DetachLoadBalancerTargetGroupsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::detach_load_balancer_target_groups::builders::DetachLoadBalancerTargetGroupsInputBuilder
            }
impl DetachLoadBalancerTargetGroupsFluentBuilder {
    /// Creates a new `DetachLoadBalancerTargetGroups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroups, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsOutput, aws_smithy_http::result::SdkError<crate::operation::detach_load_balancer_target_groups::DetachLoadBalancerTargetGroupsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_group_name(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_scaling_group_name(input);
        self
    }
    /// Appends an item to `TargetGroupARNs`.
    ///
    /// To override the contents of this collection use [`set_target_group_ar_ns`](Self::set_target_group_ar_ns).
    ///
    /// <p>The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.</p>
    pub fn target_group_ar_ns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_group_ar_ns(input.into());
        self
    }
    /// <p>The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.</p>
    pub fn set_target_group_ar_ns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_target_group_ar_ns(input);
        self
    }
}
