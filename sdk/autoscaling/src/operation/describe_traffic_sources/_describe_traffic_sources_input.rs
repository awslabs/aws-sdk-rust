// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The traffic source type that you want to describe.</p>
    /// <p>The following lists the valid values:</p>
    /// <ul>
    /// <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li>
    /// <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li>
    /// <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li>
    /// </ul>
    pub traffic_source_type: ::std::option::Option<::std::string::String>,
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to return with this call. The maximum value is <code>50</code>.</p>
    pub max_records: ::std::option::Option<i32>,
}
impl DescribeTrafficSourcesInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> ::std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The traffic source type that you want to describe.</p>
    /// <p>The following lists the valid values:</p>
    /// <ul>
    /// <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li>
    /// <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li>
    /// <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li>
    /// </ul>
    pub fn traffic_source_type(&self) -> ::std::option::Option<&str> {
        self.traffic_source_type.as_deref()
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of items to return with this call. The maximum value is <code>50</code>.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
}
impl DescribeTrafficSourcesInput {
    /// Creates a new builder-style object to manufacture [`DescribeTrafficSourcesInput`](crate::operation::describe_traffic_sources::DescribeTrafficSourcesInput).
    pub fn builder() -> crate::operation::describe_traffic_sources::builders::DescribeTrafficSourcesInputBuilder {
        crate::operation::describe_traffic_sources::builders::DescribeTrafficSourcesInputBuilder::default()
    }
}

/// A builder for [`DescribeTrafficSourcesInput`](crate::operation::describe_traffic_sources::DescribeTrafficSourcesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTrafficSourcesInputBuilder {
    pub(crate) auto_scaling_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) traffic_source_type: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_records: ::std::option::Option<i32>,
}
impl DescribeTrafficSourcesInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    /// This field is required.
    pub fn auto_scaling_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auto_scaling_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn get_auto_scaling_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.auto_scaling_group_name
    }
    /// <p>The traffic source type that you want to describe.</p>
    /// <p>The following lists the valid values:</p>
    /// <ul>
    /// <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li>
    /// <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li>
    /// <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li>
    /// </ul>
    pub fn traffic_source_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.traffic_source_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The traffic source type that you want to describe.</p>
    /// <p>The following lists the valid values:</p>
    /// <ul>
    /// <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li>
    /// <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li>
    /// <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li>
    /// </ul>
    pub fn set_traffic_source_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.traffic_source_type = input;
        self
    }
    /// <p>The traffic source type that you want to describe.</p>
    /// <p>The following lists the valid values:</p>
    /// <ul>
    /// <li> <p> <code>elb</code> if the traffic source is a Classic Load Balancer.</p> </li>
    /// <li> <p> <code>elbv2</code> if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.</p> </li>
    /// <li> <p> <code>vpc-lattice</code> if the traffic source is VPC Lattice.</p> </li>
    /// </ul>
    pub fn get_traffic_source_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.traffic_source_type
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of items to return. (You received this token from a previous call.)</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of items to return with this call. The maximum value is <code>50</code>.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to return with this call. The maximum value is <code>50</code>.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of items to return with this call. The maximum value is <code>50</code>.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// Consumes the builder and constructs a [`DescribeTrafficSourcesInput`](crate::operation::describe_traffic_sources::DescribeTrafficSourcesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_traffic_sources::DescribeTrafficSourcesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_traffic_sources::DescribeTrafficSourcesInput {
            auto_scaling_group_name: self.auto_scaling_group_name,
            traffic_source_type: self.traffic_source_type,
            next_token: self.next_token,
            max_records: self.max_records,
        })
    }
}
