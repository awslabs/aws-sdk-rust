// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutScalingPolicyInput {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the policy.</p>
    #[doc(hidden)]
    pub policy_name: std::option::Option<std::string::String>,
    /// <p>One of the following policy types: </p>
    /// <ul>
    /// <li> <p> <code>TargetTrackingScaling</code> </p> </li>
    /// <li> <p> <code>StepScaling</code> </p> </li>
    /// <li> <p> <code>SimpleScaling</code> (default)</p> </li>
    /// <li> <p> <code>PredictiveScaling</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub policy_type: std::option::Option<std::string::String>,
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    /// <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    #[doc(hidden)]
    pub adjustment_type: std::option::Option<std::string::String>,
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.</p>
    #[doc(hidden)]
    pub min_adjustment_step: std::option::Option<i32>,
    /// <p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note>
    /// <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p>
    /// </note>
    #[doc(hidden)]
    pub min_adjustment_magnitude: std::option::Option<i32>,
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.</p>
    /// <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p>
    #[doc(hidden)]
    pub scaling_adjustment: std::option::Option<i32>,
    /// <p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p>
    /// <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    /// <p>Default: None</p>
    #[doc(hidden)]
    pub cooldown: std::option::Option<i32>,
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    #[doc(hidden)]
    pub metric_aggregation_type: std::option::Option<std::string::String>,
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p>
    /// <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p>
    #[doc(hidden)]
    pub step_adjustments: std::option::Option<std::vec::Vec<crate::types::StepAdjustment>>,
    /// <p> <i>Not needed if the default instance warmup is defined for the group.</i> </p>
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p>
    /// <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note>
    /// <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p>
    /// </note>
    #[doc(hidden)]
    pub estimated_instance_warmup: std::option::Option<i32>,
    /// <p>A target tracking scaling policy. Provides support for predefined or custom metrics.</p>
    /// <p>The following predefined metrics are available:</p>
    /// <ul>
    /// <li> <p> <code>ASGAverageCPUUtilization</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkIn</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkOut</code> </p> </li>
    /// <li> <p> <code>ALBRequestCountPerTarget</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify the <code>ResourceLabel</code> property with the <code>PredefinedMetricSpecification</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    #[doc(hidden)]
    pub target_tracking_configuration:
        std::option::Option<crate::types::TargetTrackingConfiguration>,
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>A predictive scaling policy. Provides support for predefined and custom metrics.</p>
    /// <p>Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    #[doc(hidden)]
    pub predictive_scaling_configuration:
        std::option::Option<crate::types::PredictiveScalingConfiguration>,
}
impl PutScalingPolicyInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The name of the policy.</p>
    pub fn policy_name(&self) -> std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>One of the following policy types: </p>
    /// <ul>
    /// <li> <p> <code>TargetTrackingScaling</code> </p> </li>
    /// <li> <p> <code>StepScaling</code> </p> </li>
    /// <li> <p> <code>SimpleScaling</code> (default)</p> </li>
    /// <li> <p> <code>PredictiveScaling</code> </p> </li>
    /// </ul>
    pub fn policy_type(&self) -> std::option::Option<&str> {
        self.policy_type.as_deref()
    }
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    /// <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn adjustment_type(&self) -> std::option::Option<&str> {
        self.adjustment_type.as_deref()
    }
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.</p>
    pub fn min_adjustment_step(&self) -> std::option::Option<i32> {
        self.min_adjustment_step
    }
    /// <p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note>
    /// <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p>
    /// </note>
    pub fn min_adjustment_magnitude(&self) -> std::option::Option<i32> {
        self.min_adjustment_magnitude
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.</p>
    /// <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p>
    pub fn scaling_adjustment(&self) -> std::option::Option<i32> {
        self.scaling_adjustment
    }
    /// <p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p>
    /// <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    /// <p>Default: None</p>
    pub fn cooldown(&self) -> std::option::Option<i32> {
        self.cooldown
    }
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    pub fn metric_aggregation_type(&self) -> std::option::Option<&str> {
        self.metric_aggregation_type.as_deref()
    }
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p>
    /// <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p>
    pub fn step_adjustments(&self) -> std::option::Option<&[crate::types::StepAdjustment]> {
        self.step_adjustments.as_deref()
    }
    /// <p> <i>Not needed if the default instance warmup is defined for the group.</i> </p>
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p>
    /// <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note>
    /// <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p>
    /// </note>
    pub fn estimated_instance_warmup(&self) -> std::option::Option<i32> {
        self.estimated_instance_warmup
    }
    /// <p>A target tracking scaling policy. Provides support for predefined or custom metrics.</p>
    /// <p>The following predefined metrics are available:</p>
    /// <ul>
    /// <li> <p> <code>ASGAverageCPUUtilization</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkIn</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkOut</code> </p> </li>
    /// <li> <p> <code>ALBRequestCountPerTarget</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify the <code>ResourceLabel</code> property with the <code>PredefinedMetricSpecification</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    pub fn target_tracking_configuration(
        &self,
    ) -> std::option::Option<&crate::types::TargetTrackingConfiguration> {
        self.target_tracking_configuration.as_ref()
    }
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>A predictive scaling policy. Provides support for predefined and custom metrics.</p>
    /// <p>Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    pub fn predictive_scaling_configuration(
        &self,
    ) -> std::option::Option<&crate::types::PredictiveScalingConfiguration> {
        self.predictive_scaling_configuration.as_ref()
    }
}
impl PutScalingPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutScalingPolicyInput`](crate::operation::put_scaling_policy::PutScalingPolicyInput).
    pub fn builder() -> crate::operation::put_scaling_policy::builders::PutScalingPolicyInputBuilder
    {
        crate::operation::put_scaling_policy::builders::PutScalingPolicyInputBuilder::default()
    }
}

/// A builder for [`PutScalingPolicyInput`](crate::operation::put_scaling_policy::PutScalingPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutScalingPolicyInputBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) policy_name: std::option::Option<std::string::String>,
    pub(crate) policy_type: std::option::Option<std::string::String>,
    pub(crate) adjustment_type: std::option::Option<std::string::String>,
    pub(crate) min_adjustment_step: std::option::Option<i32>,
    pub(crate) min_adjustment_magnitude: std::option::Option<i32>,
    pub(crate) scaling_adjustment: std::option::Option<i32>,
    pub(crate) cooldown: std::option::Option<i32>,
    pub(crate) metric_aggregation_type: std::option::Option<std::string::String>,
    pub(crate) step_adjustments: std::option::Option<std::vec::Vec<crate::types::StepAdjustment>>,
    pub(crate) estimated_instance_warmup: std::option::Option<i32>,
    pub(crate) target_tracking_configuration:
        std::option::Option<crate::types::TargetTrackingConfiguration>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) predictive_scaling_configuration:
        std::option::Option<crate::types::PredictiveScalingConfiguration>,
}
impl PutScalingPolicyInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The name of the policy.</p>
    pub fn policy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_name = Some(input.into());
        self
    }
    /// <p>The name of the policy.</p>
    pub fn set_policy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>One of the following policy types: </p>
    /// <ul>
    /// <li> <p> <code>TargetTrackingScaling</code> </p> </li>
    /// <li> <p> <code>StepScaling</code> </p> </li>
    /// <li> <p> <code>SimpleScaling</code> (default)</p> </li>
    /// <li> <p> <code>PredictiveScaling</code> </p> </li>
    /// </ul>
    pub fn policy_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_type = Some(input.into());
        self
    }
    /// <p>One of the following policy types: </p>
    /// <ul>
    /// <li> <p> <code>TargetTrackingScaling</code> </p> </li>
    /// <li> <p> <code>StepScaling</code> </p> </li>
    /// <li> <p> <code>SimpleScaling</code> (default)</p> </li>
    /// <li> <p> <code>PredictiveScaling</code> </p> </li>
    /// </ul>
    pub fn set_policy_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    /// <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn adjustment_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.adjustment_type = Some(input.into());
        self
    }
    /// <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p>
    /// <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_adjustment_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.adjustment_type = input;
        self
    }
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.</p>
    pub fn min_adjustment_step(mut self, input: i32) -> Self {
        self.min_adjustment_step = Some(input);
        self
    }
    /// <p>Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.</p>
    pub fn set_min_adjustment_step(mut self, input: std::option::Option<i32>) -> Self {
        self.min_adjustment_step = input;
        self
    }
    /// <p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note>
    /// <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p>
    /// </note>
    pub fn min_adjustment_magnitude(mut self, input: i32) -> Self {
        self.min_adjustment_magnitude = Some(input);
        self
    }
    /// <p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note>
    /// <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p>
    /// </note>
    pub fn set_min_adjustment_magnitude(mut self, input: std::option::Option<i32>) -> Self {
        self.min_adjustment_magnitude = input;
        self
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.</p>
    /// <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p>
    pub fn scaling_adjustment(mut self, input: i32) -> Self {
        self.scaling_adjustment = Some(input);
        self
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.</p>
    /// <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p>
    pub fn set_scaling_adjustment(mut self, input: std::option::Option<i32>) -> Self {
        self.scaling_adjustment = input;
        self
    }
    /// <p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p>
    /// <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    /// <p>Default: None</p>
    pub fn cooldown(mut self, input: i32) -> Self {
        self.cooldown = Some(input);
        self
    }
    /// <p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p>
    /// <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    /// <p>Default: None</p>
    pub fn set_cooldown(mut self, input: std::option::Option<i32>) -> Self {
        self.cooldown = input;
        self
    }
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    pub fn metric_aggregation_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_aggregation_type = Some(input.into());
        self
    }
    /// <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p>
    /// <p>Valid only if the policy type is <code>StepScaling</code>.</p>
    pub fn set_metric_aggregation_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.metric_aggregation_type = input;
        self
    }
    /// Appends an item to `step_adjustments`.
    ///
    /// To override the contents of this collection use [`set_step_adjustments`](Self::set_step_adjustments).
    ///
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p>
    /// <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p>
    pub fn step_adjustments(mut self, input: crate::types::StepAdjustment) -> Self {
        let mut v = self.step_adjustments.unwrap_or_default();
        v.push(input);
        self.step_adjustments = Some(v);
        self
    }
    /// <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p>
    /// <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p>
    pub fn set_step_adjustments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StepAdjustment>>,
    ) -> Self {
        self.step_adjustments = input;
        self
    }
    /// <p> <i>Not needed if the default instance warmup is defined for the group.</i> </p>
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p>
    /// <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note>
    /// <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p>
    /// </note>
    pub fn estimated_instance_warmup(mut self, input: i32) -> Self {
        self.estimated_instance_warmup = Some(input);
        self
    }
    /// <p> <i>Not needed if the default instance warmup is defined for the group.</i> </p>
    /// <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p>
    /// <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note>
    /// <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p>
    /// </note>
    pub fn set_estimated_instance_warmup(mut self, input: std::option::Option<i32>) -> Self {
        self.estimated_instance_warmup = input;
        self
    }
    /// <p>A target tracking scaling policy. Provides support for predefined or custom metrics.</p>
    /// <p>The following predefined metrics are available:</p>
    /// <ul>
    /// <li> <p> <code>ASGAverageCPUUtilization</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkIn</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkOut</code> </p> </li>
    /// <li> <p> <code>ALBRequestCountPerTarget</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify the <code>ResourceLabel</code> property with the <code>PredefinedMetricSpecification</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    pub fn target_tracking_configuration(
        mut self,
        input: crate::types::TargetTrackingConfiguration,
    ) -> Self {
        self.target_tracking_configuration = Some(input);
        self
    }
    /// <p>A target tracking scaling policy. Provides support for predefined or custom metrics.</p>
    /// <p>The following predefined metrics are available:</p>
    /// <ul>
    /// <li> <p> <code>ASGAverageCPUUtilization</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkIn</code> </p> </li>
    /// <li> <p> <code>ASGAverageNetworkOut</code> </p> </li>
    /// <li> <p> <code>ALBRequestCountPerTarget</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>ALBRequestCountPerTarget</code> for the metric, you must specify the <code>ResourceLabel</code> property with the <code>PredefinedMetricSpecification</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html">TargetTrackingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>TargetTrackingScaling</code>.</p>
    pub fn set_target_tracking_configuration(
        mut self,
        input: std::option::Option<crate::types::TargetTrackingConfiguration>,
    ) -> Self {
        self.target_tracking_configuration = input;
        self
    }
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A predictive scaling policy. Provides support for predefined and custom metrics.</p>
    /// <p>Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    pub fn predictive_scaling_configuration(
        mut self,
        input: crate::types::PredictiveScalingConfiguration,
    ) -> Self {
        self.predictive_scaling_configuration = Some(input);
        self
    }
    /// <p>A predictive scaling policy. Provides support for predefined and custom metrics.</p>
    /// <p>Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html">PredictiveScalingConfiguration</a> in the <i>Amazon EC2 Auto Scaling API Reference</i>.</p>
    /// <p>Required if the policy type is <code>PredictiveScaling</code>.</p>
    pub fn set_predictive_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::PredictiveScalingConfiguration>,
    ) -> Self {
        self.predictive_scaling_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`PutScalingPolicyInput`](crate::operation::put_scaling_policy::PutScalingPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_scaling_policy::PutScalingPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_scaling_policy::PutScalingPolicyInput {
                auto_scaling_group_name: self.auto_scaling_group_name,
                policy_name: self.policy_name,
                policy_type: self.policy_type,
                adjustment_type: self.adjustment_type,
                min_adjustment_step: self.min_adjustment_step,
                min_adjustment_magnitude: self.min_adjustment_magnitude,
                scaling_adjustment: self.scaling_adjustment,
                cooldown: self.cooldown,
                metric_aggregation_type: self.metric_aggregation_type,
                step_adjustments: self.step_adjustments,
                estimated_instance_warmup: self.estimated_instance_warmup,
                target_tracking_configuration: self.target_tracking_configuration,
                enabled: self.enabled,
                predictive_scaling_configuration: self.predictive_scaling_configuration,
            },
        )
    }
}
