// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CompleteLifecycleActionInput {
    /// <p>The name of the lifecycle hook.</p>
    #[doc(hidden)]
    pub lifecycle_hook_name: std::option::Option<std::string::String>,
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.</p>
    #[doc(hidden)]
    pub lifecycle_action_token: std::option::Option<std::string::String>,
    /// <p>The action for the group to take. You can specify either <code>CONTINUE</code> or <code>ABANDON</code>.</p>
    #[doc(hidden)]
    pub lifecycle_action_result: std::option::Option<std::string::String>,
    /// <p>The ID of the instance.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
}
impl CompleteLifecycleActionInput {
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(&self) -> std::option::Option<&str> {
        self.lifecycle_hook_name.as_deref()
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.</p>
    pub fn lifecycle_action_token(&self) -> std::option::Option<&str> {
        self.lifecycle_action_token.as_deref()
    }
    /// <p>The action for the group to take. You can specify either <code>CONTINUE</code> or <code>ABANDON</code>.</p>
    pub fn lifecycle_action_result(&self) -> std::option::Option<&str> {
        self.lifecycle_action_result.as_deref()
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
}
impl CompleteLifecycleActionInput {
    /// Creates a new builder-style object to manufacture [`CompleteLifecycleActionInput`](crate::operation::complete_lifecycle_action::CompleteLifecycleActionInput).
    pub fn builder(
    ) -> crate::operation::complete_lifecycle_action::builders::CompleteLifecycleActionInputBuilder
    {
        crate::operation::complete_lifecycle_action::builders::CompleteLifecycleActionInputBuilder::default()
    }
}

/// A builder for [`CompleteLifecycleActionInput`](crate::operation::complete_lifecycle_action::CompleteLifecycleActionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CompleteLifecycleActionInputBuilder {
    pub(crate) lifecycle_hook_name: std::option::Option<std::string::String>,
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) lifecycle_action_token: std::option::Option<std::string::String>,
    pub(crate) lifecycle_action_result: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
}
impl CompleteLifecycleActionInputBuilder {
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_hook_name = Some(input.into());
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn set_lifecycle_hook_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_hook_name = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.</p>
    pub fn lifecycle_action_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_action_token = Some(input.into());
        self
    }
    /// <p>A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.</p>
    pub fn set_lifecycle_action_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_action_token = input;
        self
    }
    /// <p>The action for the group to take. You can specify either <code>CONTINUE</code> or <code>ABANDON</code>.</p>
    pub fn lifecycle_action_result(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_action_result = Some(input.into());
        self
    }
    /// <p>The action for the group to take. You can specify either <code>CONTINUE</code> or <code>ABANDON</code>.</p>
    pub fn set_lifecycle_action_result(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_action_result = input;
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the instance.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CompleteLifecycleActionInput`](crate::operation::complete_lifecycle_action::CompleteLifecycleActionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::complete_lifecycle_action::CompleteLifecycleActionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::complete_lifecycle_action::CompleteLifecycleActionInput {
                lifecycle_hook_name: self.lifecycle_hook_name,
                auto_scaling_group_name: self.auto_scaling_group_name,
                lifecycle_action_token: self.lifecycle_action_token,
                lifecycle_action_result: self.lifecycle_action_result,
                instance_id: self.instance_id,
            },
        )
    }
}
