// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_instance_refresh::_start_instance_refresh_output::StartInstanceRefreshOutputBuilder;

pub use crate::operation::start_instance_refresh::_start_instance_refresh_input::StartInstanceRefreshInputBuilder;

/// Fluent builder constructing a request to `StartInstanceRefresh`.
///
/// <p>Starts a new instance refresh operation. An instance refresh performs a rolling replacement of all or some instances in an Auto Scaling group. Each instance is terminated first and then replaced, which temporarily reduces the capacity available within your Auto Scaling group.</p>
/// <p>This operation is part of the <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh.html">instance refresh feature</a> in Amazon EC2 Auto Scaling, which helps you update instances in your Auto Scaling group. This feature is helpful, for example, when you have a new AMI or a new user data script. You just need to create a new launch template that specifies the new AMI or user data script. Then start an instance refresh to immediately begin the process of updating instances in the group. </p>
/// <p>If the call succeeds, it creates a new instance refresh request with a unique ID that you can use to track its progress. To query its status, call the <code>DescribeInstanceRefreshes</code> API. To describe the instance refreshes that have already run, call the <code>DescribeInstanceRefreshes</code> API. To cancel an instance refresh operation in progress, use the <code>CancelInstanceRefresh</code> API. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartInstanceRefreshFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_instance_refresh::builders::StartInstanceRefreshInputBuilder,
}
impl StartInstanceRefreshFluentBuilder {
    /// Creates a new `StartInstanceRefresh`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_instance_refresh::StartInstanceRefresh,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_instance_refresh::StartInstanceRefreshError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_instance_refresh::StartInstanceRefreshOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_instance_refresh::StartInstanceRefreshError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_group_name(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_auto_scaling_group_name(input);
        self
    }
    /// <p>The strategy to use for the instance refresh. The only valid value is <code>Rolling</code>.</p>
    /// <p>A rolling update helps you update your instances gradually. A rolling update can fail due to failed health checks or if instances are on standby or are protected from scale in. If the rolling update process fails, any instances that are replaced are not rolled back to their previous configuration. </p>
    pub fn strategy(mut self, input: crate::types::RefreshStrategy) -> Self {
        self.inner = self.inner.strategy(input);
        self
    }
    /// <p>The strategy to use for the instance refresh. The only valid value is <code>Rolling</code>.</p>
    /// <p>A rolling update helps you update your instances gradually. A rolling update can fail due to failed health checks or if instances are on standby or are protected from scale in. If the rolling update process fails, any instances that are replaced are not rolled back to their previous configuration. </p>
    pub fn set_strategy(
        mut self,
        input: std::option::Option<crate::types::RefreshStrategy>,
    ) -> Self {
        self.inner = self.inner.set_strategy(input);
        self
    }
    /// <p>The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.</p>
    /// <p>Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. </p> <note>
    /// <p>When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the <code>SkipMatching</code> property in preferences. If it's enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and version. This can help you reduce the number of replacements that are required to apply updates. </p>
    /// </note>
    pub fn desired_configuration(mut self, input: crate::types::DesiredConfiguration) -> Self {
        self.inner = self.inner.desired_configuration(input);
        self
    }
    /// <p>The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template.</p>
    /// <p>Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. </p> <note>
    /// <p>When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the <code>SkipMatching</code> property in preferences. If it's enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and version. This can help you reduce the number of replacements that are required to apply updates. </p>
    /// </note>
    pub fn set_desired_configuration(
        mut self,
        input: std::option::Option<crate::types::DesiredConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_desired_configuration(input);
        self
    }
    /// <p>Set of preferences associated with the instance refresh request. If not provided, the default values are used.</p>
    pub fn preferences(mut self, input: crate::types::RefreshPreferences) -> Self {
        self.inner = self.inner.preferences(input);
        self
    }
    /// <p>Set of preferences associated with the instance refresh request. If not provided, the default values are used.</p>
    pub fn set_preferences(
        mut self,
        input: std::option::Option<crate::types::RefreshPreferences>,
    ) -> Self {
        self.inner = self.inner.set_preferences(input);
        self
    }
}
