// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableMetricsCollectionInput {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>Identifies the metrics to enable.</p>
    /// <p>You can specify one or more of the following metrics:</p>
    /// <ul>
    /// <li> <p> <code>GroupMinSize</code> </p> </li>
    /// <li> <p> <code>GroupMaxSize</code> </p> </li>
    /// <li> <p> <code>GroupDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupInServiceInstances</code> </p> </li>
    /// <li> <p> <code>GroupPendingInstances</code> </p> </li>
    /// <li> <p> <code>GroupStandbyInstances</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingInstances</code> </p> </li>
    /// <li> <p> <code>GroupTotalInstances</code> </p> </li>
    /// <li> <p> <code>GroupInServiceCapacity</code> </p> </li>
    /// <li> <p> <code>GroupPendingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupStandbyCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTotalCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.</p>
    #[doc(hidden)]
    pub granularity: std::option::Option<std::string::String>,
}
impl EnableMetricsCollectionInput {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>Identifies the metrics to enable.</p>
    /// <p>You can specify one or more of the following metrics:</p>
    /// <ul>
    /// <li> <p> <code>GroupMinSize</code> </p> </li>
    /// <li> <p> <code>GroupMaxSize</code> </p> </li>
    /// <li> <p> <code>GroupDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupInServiceInstances</code> </p> </li>
    /// <li> <p> <code>GroupPendingInstances</code> </p> </li>
    /// <li> <p> <code>GroupStandbyInstances</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingInstances</code> </p> </li>
    /// <li> <p> <code>GroupTotalInstances</code> </p> </li>
    /// <li> <p> <code>GroupInServiceCapacity</code> </p> </li>
    /// <li> <p> <code>GroupPendingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupStandbyCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTotalCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn metrics(&self) -> std::option::Option<&[std::string::String]> {
        self.metrics.as_deref()
    }
    /// <p>The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.</p>
    pub fn granularity(&self) -> std::option::Option<&str> {
        self.granularity.as_deref()
    }
}
impl EnableMetricsCollectionInput {
    /// Creates a new builder-style object to manufacture [`EnableMetricsCollectionInput`](crate::operation::enable_metrics_collection::EnableMetricsCollectionInput).
    pub fn builder(
    ) -> crate::operation::enable_metrics_collection::builders::EnableMetricsCollectionInputBuilder
    {
        crate::operation::enable_metrics_collection::builders::EnableMetricsCollectionInputBuilder::default()
    }
}

/// A builder for [`EnableMetricsCollectionInput`](crate::operation::enable_metrics_collection::EnableMetricsCollectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnableMetricsCollectionInputBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) metrics: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) granularity: std::option::Option<std::string::String>,
}
impl EnableMetricsCollectionInputBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>Identifies the metrics to enable.</p>
    /// <p>You can specify one or more of the following metrics:</p>
    /// <ul>
    /// <li> <p> <code>GroupMinSize</code> </p> </li>
    /// <li> <p> <code>GroupMaxSize</code> </p> </li>
    /// <li> <p> <code>GroupDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupInServiceInstances</code> </p> </li>
    /// <li> <p> <code>GroupPendingInstances</code> </p> </li>
    /// <li> <p> <code>GroupStandbyInstances</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingInstances</code> </p> </li>
    /// <li> <p> <code>GroupTotalInstances</code> </p> </li>
    /// <li> <p> <code>GroupInServiceCapacity</code> </p> </li>
    /// <li> <p> <code>GroupPendingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupStandbyCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTotalCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn metrics(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input.into());
        self.metrics = Some(v);
        self
    }
    /// <p>Identifies the metrics to enable.</p>
    /// <p>You can specify one or more of the following metrics:</p>
    /// <ul>
    /// <li> <p> <code>GroupMinSize</code> </p> </li>
    /// <li> <p> <code>GroupMaxSize</code> </p> </li>
    /// <li> <p> <code>GroupDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupInServiceInstances</code> </p> </li>
    /// <li> <p> <code>GroupPendingInstances</code> </p> </li>
    /// <li> <p> <code>GroupStandbyInstances</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingInstances</code> </p> </li>
    /// <li> <p> <code>GroupTotalInstances</code> </p> </li>
    /// <li> <p> <code>GroupInServiceCapacity</code> </p> </li>
    /// <li> <p> <code>GroupPendingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupStandbyCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>GroupTotalCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolWarmedCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolPendingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTerminatingCapacity</code> </p> </li>
    /// <li> <p> <code>WarmPoolTotalCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolDesiredCapacity</code> </p> </li>
    /// <li> <p> <code>GroupAndWarmPoolTotalCapacity</code> </p> </li>
    /// </ul>
    /// <p>If you specify <code>Granularity</code> and don't specify any metrics, all metrics are enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-cloudwatch-monitoring.html#as-group-metrics">Auto Scaling group metrics</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.</p>
    pub fn granularity(mut self, input: impl Into<std::string::String>) -> Self {
        self.granularity = Some(input.into());
        self
    }
    /// <p>The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is <code>1Minute</code>.</p>
    pub fn set_granularity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`EnableMetricsCollectionInput`](crate::operation::enable_metrics_collection::EnableMetricsCollectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::enable_metrics_collection::EnableMetricsCollectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::enable_metrics_collection::EnableMetricsCollectionInput {
                auto_scaling_group_name: self.auto_scaling_group_name,
                metrics: self.metrics,
                granularity: self.granularity,
            },
        )
    }
}
