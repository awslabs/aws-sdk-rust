// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAdjustmentTypesOutput {
    /// <p>The policy adjustment types.</p>
    pub adjustment_types: ::std::option::Option<::std::vec::Vec<crate::types::AdjustmentType>>,
    _request_id: Option<String>,
}
impl DescribeAdjustmentTypesOutput {
    /// <p>The policy adjustment types.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.adjustment_types.is_none()`.
    pub fn adjustment_types(&self) -> &[crate::types::AdjustmentType] {
        self.adjustment_types.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeAdjustmentTypesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAdjustmentTypesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAdjustmentTypesOutput`](crate::operation::describe_adjustment_types::DescribeAdjustmentTypesOutput).
    pub fn builder() -> crate::operation::describe_adjustment_types::builders::DescribeAdjustmentTypesOutputBuilder {
        crate::operation::describe_adjustment_types::builders::DescribeAdjustmentTypesOutputBuilder::default()
    }
}

/// A builder for [`DescribeAdjustmentTypesOutput`](crate::operation::describe_adjustment_types::DescribeAdjustmentTypesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAdjustmentTypesOutputBuilder {
    pub(crate) adjustment_types: ::std::option::Option<::std::vec::Vec<crate::types::AdjustmentType>>,
    _request_id: Option<String>,
}
impl DescribeAdjustmentTypesOutputBuilder {
    /// Appends an item to `adjustment_types`.
    ///
    /// To override the contents of this collection use [`set_adjustment_types`](Self::set_adjustment_types).
    ///
    /// <p>The policy adjustment types.</p>
    pub fn adjustment_types(mut self, input: crate::types::AdjustmentType) -> Self {
        let mut v = self.adjustment_types.unwrap_or_default();
        v.push(input);
        self.adjustment_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The policy adjustment types.</p>
    pub fn set_adjustment_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdjustmentType>>) -> Self {
        self.adjustment_types = input;
        self
    }
    /// <p>The policy adjustment types.</p>
    pub fn get_adjustment_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdjustmentType>> {
        &self.adjustment_types
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAdjustmentTypesOutput`](crate::operation::describe_adjustment_types::DescribeAdjustmentTypesOutput).
    pub fn build(self) -> crate::operation::describe_adjustment_types::DescribeAdjustmentTypesOutput {
        crate::operation::describe_adjustment_types::DescribeAdjustmentTypesOutput {
            adjustment_types: self.adjustment_types,
            _request_id: self._request_id,
        }
    }
}
