// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_auto_scaling_groups_output_correct_errors(
    mut builder: crate::operation::describe_auto_scaling_groups::builders::DescribeAutoScalingGroupsOutputBuilder,
) -> crate::operation::describe_auto_scaling_groups::builders::DescribeAutoScalingGroupsOutputBuilder {
    if builder.auto_scaling_groups.is_none() {
        builder.auto_scaling_groups = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_launch_configurations_output_correct_errors(
    mut builder: crate::operation::describe_launch_configurations::builders::DescribeLaunchConfigurationsOutputBuilder,
) -> crate::operation::describe_launch_configurations::builders::DescribeLaunchConfigurationsOutputBuilder {
    if builder.launch_configurations.is_none() {
        builder.launch_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_notification_configurations_output_correct_errors(
    mut builder: crate::operation::describe_notification_configurations::builders::DescribeNotificationConfigurationsOutputBuilder,
) -> crate::operation::describe_notification_configurations::builders::DescribeNotificationConfigurationsOutputBuilder {
    if builder.notification_configurations.is_none() {
        builder.notification_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_scaling_activities_output_correct_errors(
    mut builder: crate::operation::describe_scaling_activities::builders::DescribeScalingActivitiesOutputBuilder,
) -> crate::operation::describe_scaling_activities::builders::DescribeScalingActivitiesOutputBuilder {
    if builder.activities.is_none() {
        builder.activities = Some(Default::default())
    }
    builder
}

pub(crate) fn get_predictive_scaling_forecast_output_correct_errors(
    mut builder: crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder,
) -> crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder {
    if builder.load_forecast.is_none() {
        builder.load_forecast = Some(Default::default())
    }
    if builder.capacity_forecast.is_none() {
        builder.capacity_forecast = {
            let builder = crate::types::builders::CapacityForecastBuilder::default();
            Some(crate::serde_util::capacity_forecast_correct_errors(builder).build())
        }
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn capacity_forecast_correct_errors(
    mut builder: crate::types::builders::CapacityForecastBuilder,
) -> crate::types::builders::CapacityForecastBuilder {
    if builder.timestamps.is_none() {
        builder.timestamps = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn activity_correct_errors(mut builder: crate::types::builders::ActivityBuilder) -> crate::types::builders::ActivityBuilder {
    if builder.activity_id.is_none() {
        builder.activity_id = Some(Default::default())
    }
    if builder.auto_scaling_group_name.is_none() {
        builder.auto_scaling_group_name = Some(Default::default())
    }
    if builder.cause.is_none() {
        builder.cause = Some(Default::default())
    }
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScalingActivityStatusCode>().ok()
    }
    builder
}

pub(crate) fn auto_scaling_group_correct_errors(
    mut builder: crate::types::builders::AutoScalingGroupBuilder,
) -> crate::types::builders::AutoScalingGroupBuilder {
    if builder.auto_scaling_group_name.is_none() {
        builder.auto_scaling_group_name = Some(Default::default())
    }
    if builder.min_size.is_none() {
        builder.min_size = Some(Default::default())
    }
    if builder.max_size.is_none() {
        builder.max_size = Some(Default::default())
    }
    if builder.desired_capacity.is_none() {
        builder.desired_capacity = Some(Default::default())
    }
    if builder.default_cooldown.is_none() {
        builder.default_cooldown = Some(Default::default())
    }
    if builder.availability_zones.is_none() {
        builder.availability_zones = Some(Default::default())
    }
    if builder.health_check_type.is_none() {
        builder.health_check_type = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn auto_scaling_instance_details_correct_errors(
    mut builder: crate::types::builders::AutoScalingInstanceDetailsBuilder,
) -> crate::types::builders::AutoScalingInstanceDetailsBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.auto_scaling_group_name.is_none() {
        builder.auto_scaling_group_name = Some(Default::default())
    }
    if builder.availability_zone.is_none() {
        builder.availability_zone = Some(Default::default())
    }
    if builder.lifecycle_state.is_none() {
        builder.lifecycle_state = Some(Default::default())
    }
    if builder.health_status.is_none() {
        builder.health_status = Some(Default::default())
    }
    if builder.protected_from_scale_in.is_none() {
        builder.protected_from_scale_in = Some(Default::default())
    }
    builder
}

pub(crate) fn failed_scheduled_update_group_action_request_correct_errors(
    mut builder: crate::types::builders::FailedScheduledUpdateGroupActionRequestBuilder,
) -> crate::types::builders::FailedScheduledUpdateGroupActionRequestBuilder {
    if builder.scheduled_action_name.is_none() {
        builder.scheduled_action_name = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_correct_errors(mut builder: crate::types::builders::InstanceBuilder) -> crate::types::builders::InstanceBuilder {
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.availability_zone.is_none() {
        builder.availability_zone = Some(Default::default())
    }
    if builder.lifecycle_state.is_none() {
        builder.lifecycle_state = "no value was set".parse::<crate::types::LifecycleState>().ok()
    }
    if builder.health_status.is_none() {
        builder.health_status = Some(Default::default())
    }
    if builder.protected_from_scale_in.is_none() {
        builder.protected_from_scale_in = Some(Default::default())
    }
    builder
}

pub(crate) fn launch_configuration_correct_errors(
    mut builder: crate::types::builders::LaunchConfigurationBuilder,
) -> crate::types::builders::LaunchConfigurationBuilder {
    if builder.launch_configuration_name.is_none() {
        builder.launch_configuration_name = Some(Default::default())
    }
    if builder.image_id.is_none() {
        builder.image_id = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn load_forecast_correct_errors(mut builder: crate::types::builders::LoadForecastBuilder) -> crate::types::builders::LoadForecastBuilder {
    if builder.timestamps.is_none() {
        builder.timestamps = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    if builder.metric_specification.is_none() {
        builder.metric_specification = {
            let builder = crate::types::builders::PredictiveScalingMetricSpecificationBuilder::default();
            Some(crate::serde_util::predictive_scaling_metric_specification_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn process_type_correct_errors(mut builder: crate::types::builders::ProcessTypeBuilder) -> crate::types::builders::ProcessTypeBuilder {
    if builder.process_name.is_none() {
        builder.process_name = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_scaling_configuration_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingConfigurationBuilder,
) -> crate::types::builders::PredictiveScalingConfigurationBuilder {
    if builder.metric_specifications.is_none() {
        builder.metric_specifications = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_scaling_metric_specification_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingMetricSpecificationBuilder,
) -> crate::types::builders::PredictiveScalingMetricSpecificationBuilder {
    if builder.target_value.is_none() {
        builder.target_value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_configuration_correct_errors(
    mut builder: crate::types::builders::TargetTrackingConfigurationBuilder,
) -> crate::types::builders::TargetTrackingConfigurationBuilder {
    if builder.target_value.is_none() {
        builder.target_value = Some(Default::default())
    }
    builder
}

pub(crate) fn block_device_mapping_correct_errors(
    mut builder: crate::types::builders::BlockDeviceMappingBuilder,
) -> crate::types::builders::BlockDeviceMappingBuilder {
    if builder.device_name.is_none() {
        builder.device_name = Some(Default::default())
    }
    builder
}

pub(crate) fn predefined_metric_specification_correct_errors(
    mut builder: crate::types::builders::PredefinedMetricSpecificationBuilder,
) -> crate::types::builders::PredefinedMetricSpecificationBuilder {
    if builder.predefined_metric_type.is_none() {
        builder.predefined_metric_type = "no value was set".parse::<crate::types::MetricType>().ok()
    }
    builder
}

pub(crate) fn predictive_scaling_customized_capacity_metric_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingCustomizedCapacityMetricBuilder,
) -> crate::types::builders::PredictiveScalingCustomizedCapacityMetricBuilder {
    if builder.metric_data_queries.is_none() {
        builder.metric_data_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_scaling_customized_load_metric_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingCustomizedLoadMetricBuilder,
) -> crate::types::builders::PredictiveScalingCustomizedLoadMetricBuilder {
    if builder.metric_data_queries.is_none() {
        builder.metric_data_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_scaling_customized_scaling_metric_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingCustomizedScalingMetricBuilder,
) -> crate::types::builders::PredictiveScalingCustomizedScalingMetricBuilder {
    if builder.metric_data_queries.is_none() {
        builder.metric_data_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn predictive_scaling_predefined_load_metric_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingPredefinedLoadMetricBuilder,
) -> crate::types::builders::PredictiveScalingPredefinedLoadMetricBuilder {
    if builder.predefined_metric_type.is_none() {
        builder.predefined_metric_type = "no value was set".parse::<crate::types::PredefinedLoadMetricType>().ok()
    }
    builder
}

pub(crate) fn predictive_scaling_predefined_metric_pair_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingPredefinedMetricPairBuilder,
) -> crate::types::builders::PredictiveScalingPredefinedMetricPairBuilder {
    if builder.predefined_metric_type.is_none() {
        builder.predefined_metric_type = "no value was set".parse::<crate::types::PredefinedMetricPairType>().ok()
    }
    builder
}

pub(crate) fn predictive_scaling_predefined_scaling_metric_correct_errors(
    mut builder: crate::types::builders::PredictiveScalingPredefinedScalingMetricBuilder,
) -> crate::types::builders::PredictiveScalingPredefinedScalingMetricBuilder {
    if builder.predefined_metric_type.is_none() {
        builder.predefined_metric_type = "no value was set".parse::<crate::types::PredefinedScalingMetricType>().ok()
    }
    builder
}

pub(crate) fn step_adjustment_correct_errors(
    mut builder: crate::types::builders::StepAdjustmentBuilder,
) -> crate::types::builders::StepAdjustmentBuilder {
    if builder.scaling_adjustment.is_none() {
        builder.scaling_adjustment = Some(Default::default())
    }
    builder
}

pub(crate) fn traffic_source_identifier_correct_errors(
    mut builder: crate::types::builders::TrafficSourceIdentifierBuilder,
) -> crate::types::builders::TrafficSourceIdentifierBuilder {
    if builder.identifier.is_none() {
        builder.identifier = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_data_query_correct_errors(
    mut builder: crate::types::builders::MetricDataQueryBuilder,
) -> crate::types::builders::MetricDataQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_dimension_correct_errors(
    mut builder: crate::types::builders::MetricDimensionBuilder,
) -> crate::types::builders::MetricDimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_metric_data_query_correct_errors(
    mut builder: crate::types::builders::TargetTrackingMetricDataQueryBuilder,
) -> crate::types::builders::TargetTrackingMetricDataQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn instance_requirements_correct_errors(
    mut builder: crate::types::builders::InstanceRequirementsBuilder,
) -> crate::types::builders::InstanceRequirementsBuilder {
    if builder.v_cpu_count.is_none() {
        builder.v_cpu_count = {
            let builder = crate::types::builders::VCpuCountRequestBuilder::default();
            Some(crate::serde_util::v_cpu_count_request_correct_errors(builder).build())
        }
    }
    if builder.memory_mib.is_none() {
        builder.memory_mib = {
            let builder = crate::types::builders::MemoryMiBRequestBuilder::default();
            Some(crate::serde_util::memory_mib_request_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn metric_stat_correct_errors(mut builder: crate::types::builders::MetricStatBuilder) -> crate::types::builders::MetricStatBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::MetricBuilder::default();
            Some(crate::serde_util::metric_correct_errors(builder).build())
        }
    }
    if builder.stat.is_none() {
        builder.stat = Some(Default::default())
    }
    builder
}

pub(crate) fn target_tracking_metric_stat_correct_errors(
    mut builder: crate::types::builders::TargetTrackingMetricStatBuilder,
) -> crate::types::builders::TargetTrackingMetricStatBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::MetricBuilder::default();
            Some(crate::serde_util::metric_correct_errors(builder).build())
        }
    }
    if builder.stat.is_none() {
        builder.stat = Some(Default::default())
    }
    builder
}

pub(crate) fn memory_mib_request_correct_errors(
    mut builder: crate::types::builders::MemoryMiBRequestBuilder,
) -> crate::types::builders::MemoryMiBRequestBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_correct_errors(mut builder: crate::types::builders::MetricBuilder) -> crate::types::builders::MetricBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn v_cpu_count_request_correct_errors(
    mut builder: crate::types::builders::VCpuCountRequestBuilder,
) -> crate::types::builders::VCpuCountRequestBuilder {
    if builder.min.is_none() {
        builder.min = Some(Default::default())
    }
    builder
}
