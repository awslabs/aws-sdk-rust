// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_update_group_action_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledUpdateGroupActionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ScheduledActionName");
    if let Some(var_2) = &input.scheduled_action_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("StartTime");
    if let Some(var_4) = &input.start_time {
        scope_3.date_time(var_4, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("EndTime");
    if let Some(var_6) = &input.end_time {
        scope_5.date_time(var_6, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Recurrence");
    if let Some(var_8) = &input.recurrence {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MinSize");
    if let Some(var_10) = &input.min_size {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MaxSize");
    if let Some(var_12) = &input.max_size {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DesiredCapacity");
    if let Some(var_14) = &input.desired_capacity {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("TimeZone");
    if let Some(var_16) = &input.time_zone {
        scope_15.string(var_16);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("LaunchTemplateId");
    if let Some(var_18) = &input.launch_template_id {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("LaunchTemplateName");
    if let Some(var_20) = &input.launch_template_name {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("Version");
    if let Some(var_22) = &input.version {
        scope_21.string(var_22);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_mixed_instances_policy(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MixedInstancesPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("LaunchTemplate");
    if let Some(var_24) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template(scope_23, var_24)?;
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("InstancesDistribution");
    if let Some(var_26) = &input.instances_distribution {
        crate::query_ser::serialize_structure_crate_model_instances_distribution(scope_25, var_26)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_lifecycle_hook_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LifecycleHookSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("LifecycleHookName");
    if let Some(var_28) = &input.lifecycle_hook_name {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("LifecycleTransition");
    if let Some(var_30) = &input.lifecycle_transition {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("NotificationMetadata");
    if let Some(var_32) = &input.notification_metadata {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("HeartbeatTimeout");
    if let Some(var_34) = &input.heartbeat_timeout {
        scope_33.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_34).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("DefaultResult");
    if let Some(var_36) = &input.default_result {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("NotificationTargetARN");
    if let Some(var_38) = &input.notification_target_arn {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("RoleARN");
    if let Some(var_40) = &input.role_arn {
        scope_39.string(var_40);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("ResourceId");
    if let Some(var_42) = &input.resource_id {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("ResourceType");
    if let Some(var_44) = &input.resource_type {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("Key");
    if let Some(var_46) = &input.key {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("Value");
    if let Some(var_48) = &input.value {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("PropagateAtLaunch");
    if let Some(var_50) = &input.propagate_at_launch {
        scope_49.boolean(*var_50);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("VirtualName");
    if let Some(var_52) = &input.virtual_name {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("DeviceName");
    if let Some(var_54) = &input.device_name {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("Ebs");
    if let Some(var_56) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs(scope_55, var_56)?;
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("NoDevice");
    if let Some(var_58) = &input.no_device {
        scope_57.boolean(*var_58);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("Enabled");
    if let Some(var_60) = &input.enabled {
        scope_59.boolean(*var_60);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("HttpTokens");
    if let Some(var_62) = &input.http_tokens {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_64) = &input.http_put_response_hop_limit {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("HttpEndpoint");
    if let Some(var_66) = &input.http_endpoint {
        scope_65.string(var_66.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("Name");
    if let Some(var_68) = &input.name {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("Values");
    if let Some(var_70) = &input.values {
        let mut list_72 = scope_69.start_list(false, None);
        for item_71 in var_70 {
            #[allow(unused_mut)]
            let mut entry_73 = list_72.entry();
            entry_73.string(item_71);
        }
        list_72.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_step_adjustment(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StepAdjustment,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("MetricIntervalLowerBound");
    if let Some(var_75) = &input.metric_interval_lower_bound {
        scope_74.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_75).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("MetricIntervalUpperBound");
    if let Some(var_77) = &input.metric_interval_upper_bound {
        scope_76.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_77).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("ScalingAdjustment");
    if let Some(var_79) = &input.scaling_adjustment {
        scope_78.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_79).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_tracking_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetTrackingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("PredefinedMetricSpecification");
    if let Some(var_81) = &input.predefined_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predefined_metric_specification(
            scope_80, var_81,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("CustomizedMetricSpecification");
    if let Some(var_83) = &input.customized_metric_specification {
        crate::query_ser::serialize_structure_crate_model_customized_metric_specification(
            scope_82, var_83,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("TargetValue");
    if let Some(var_85) = &input.target_value {
        scope_84.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_85).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_86 = writer.prefix("DisableScaleIn");
    if let Some(var_87) = &input.disable_scale_in {
        scope_86.boolean(*var_87);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_88 = writer.prefix("MetricSpecifications");
    if let Some(var_89) = &input.metric_specifications {
        let mut list_91 = scope_88.start_list(false, None);
        for item_90 in var_89 {
            #[allow(unused_mut)]
            let mut entry_92 = list_91.entry();
            crate::query_ser::serialize_structure_crate_model_predictive_scaling_metric_specification(entry_92, item_90)?;
        }
        list_91.finish();
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Mode");
    if let Some(var_94) = &input.mode {
        scope_93.string(var_94.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("SchedulingBufferTime");
    if let Some(var_96) = &input.scheduling_buffer_time {
        scope_95.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_96).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("MaxCapacityBreachBehavior");
    if let Some(var_98) = &input.max_capacity_breach_behavior {
        scope_97.string(var_98.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("MaxCapacityBuffer");
    if let Some(var_100) = &input.max_capacity_buffer {
        scope_99.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_100).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_desired_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DesiredConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("LaunchTemplate");
    if let Some(var_102) = &input.launch_template {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_101, var_102,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_104) = &input.mixed_instances_policy {
        crate::query_ser::serialize_structure_crate_model_mixed_instances_policy(
            scope_103, var_104,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_refresh_preferences(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RefreshPreferences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("MinHealthyPercentage");
    if let Some(var_106) = &input.min_healthy_percentage {
        scope_105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("InstanceWarmup");
    if let Some(var_108) = &input.instance_warmup {
        scope_107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("CheckpointPercentages");
    if let Some(var_110) = &input.checkpoint_percentages {
        let mut list_112 = scope_109.start_list(false, None);
        for item_111 in var_110 {
            #[allow(unused_mut)]
            let mut entry_113 = list_112.entry();
            entry_113.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_111).into()),
            );
        }
        list_112.finish();
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("CheckpointDelay");
    if let Some(var_115) = &input.checkpoint_delay {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("SkipMatching");
    if let Some(var_117) = &input.skip_matching {
        scope_116.boolean(*var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_119) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_118, var_119,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("Overrides");
    if let Some(var_121) = &input.overrides {
        let mut list_123 = scope_120.start_list(false, None);
        for item_122 in var_121 {
            #[allow(unused_mut)]
            let mut entry_124 = list_123.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_124, item_122,
            )?;
        }
        list_123.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instances_distribution(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstancesDistribution,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_126) = &input.on_demand_allocation_strategy {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("OnDemandBaseCapacity");
    if let Some(var_128) = &input.on_demand_base_capacity {
        scope_127.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_128).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("OnDemandPercentageAboveBaseCapacity");
    if let Some(var_130) = &input.on_demand_percentage_above_base_capacity {
        scope_129.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_130).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("SpotAllocationStrategy");
    if let Some(var_132) = &input.spot_allocation_strategy {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("SpotInstancePools");
    if let Some(var_134) = &input.spot_instance_pools {
        scope_133.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("SpotMaxPrice");
    if let Some(var_136) = &input.spot_max_price {
        scope_135.string(var_136);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ebs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("SnapshotId");
    if let Some(var_138) = &input.snapshot_id {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("VolumeSize");
    if let Some(var_140) = &input.volume_size {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("VolumeType");
    if let Some(var_142) = &input.volume_type {
        scope_141.string(var_142);
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DeleteOnTermination");
    if let Some(var_144) = &input.delete_on_termination {
        scope_143.boolean(*var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("Iops");
    if let Some(var_146) = &input.iops {
        scope_145.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_146).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Encrypted");
    if let Some(var_148) = &input.encrypted {
        scope_147.boolean(*var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("Throughput");
    if let Some(var_150) = &input.throughput {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predefined_metric_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredefinedMetricSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PredefinedMetricType");
    if let Some(var_152) = &input.predefined_metric_type {
        scope_151.string(var_152.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("ResourceLabel");
    if let Some(var_154) = &input.resource_label {
        scope_153.string(var_154);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_customized_metric_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CustomizedMetricSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("MetricName");
    if let Some(var_156) = &input.metric_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Namespace");
    if let Some(var_158) = &input.namespace {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("Dimensions");
    if let Some(var_160) = &input.dimensions {
        let mut list_162 = scope_159.start_list(false, None);
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            crate::query_ser::serialize_structure_crate_model_metric_dimension(
                entry_163, item_161,
            )?;
        }
        list_162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("Statistic");
    if let Some(var_165) = &input.statistic {
        scope_164.string(var_165.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("Unit");
    if let Some(var_167) = &input.unit {
        scope_166.string(var_167);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_metric_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingMetricSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("TargetValue");
    if let Some(var_169) = &input.target_value {
        scope_168.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("PredefinedMetricPairSpecification");
    if let Some(var_171) = &input.predefined_metric_pair_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_predefined_metric_pair(scope_170, var_171)?;
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("PredefinedScalingMetricSpecification");
    if let Some(var_173) = &input.predefined_scaling_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_predefined_scaling_metric(scope_172, var_173)?;
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("PredefinedLoadMetricSpecification");
    if let Some(var_175) = &input.predefined_load_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_predefined_load_metric(scope_174, var_175)?;
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("CustomizedScalingMetricSpecification");
    if let Some(var_177) = &input.customized_scaling_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_customized_scaling_metric(scope_176, var_177)?;
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("CustomizedLoadMetricSpecification");
    if let Some(var_179) = &input.customized_load_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_customized_load_metric(scope_178, var_179)?;
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("CustomizedCapacityMetricSpecification");
    if let Some(var_181) = &input.customized_capacity_metric_specification {
        crate::query_ser::serialize_structure_crate_model_predictive_scaling_customized_capacity_metric(scope_180, var_181)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("InstanceType");
    if let Some(var_183) = &input.instance_type {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("WeightedCapacity");
    if let Some(var_185) = &input.weighted_capacity {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_187) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_specification(
            scope_186, var_187,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("InstanceRequirements");
    if let Some(var_189) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_188, var_189,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_metric_dimension(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("Name");
    if let Some(var_191) = &input.name {
        scope_190.string(var_191);
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("Value");
    if let Some(var_193) = &input.value {
        scope_192.string(var_193);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_predefined_metric_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingPredefinedMetricPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("PredefinedMetricType");
    if let Some(var_195) = &input.predefined_metric_type {
        scope_194.string(var_195.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("ResourceLabel");
    if let Some(var_197) = &input.resource_label {
        scope_196.string(var_197);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_predefined_scaling_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingPredefinedScalingMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("PredefinedMetricType");
    if let Some(var_199) = &input.predefined_metric_type {
        scope_198.string(var_199.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("ResourceLabel");
    if let Some(var_201) = &input.resource_label {
        scope_200.string(var_201);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_predefined_load_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingPredefinedLoadMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("PredefinedMetricType");
    if let Some(var_203) = &input.predefined_metric_type {
        scope_202.string(var_203.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("ResourceLabel");
    if let Some(var_205) = &input.resource_label {
        scope_204.string(var_205);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_customized_scaling_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingCustomizedScalingMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("MetricDataQueries");
    if let Some(var_207) = &input.metric_data_queries {
        let mut list_209 = scope_206.start_list(false, None);
        for item_208 in var_207 {
            #[allow(unused_mut)]
            let mut entry_210 = list_209.entry();
            crate::query_ser::serialize_structure_crate_model_metric_data_query(
                entry_210, item_208,
            )?;
        }
        list_209.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_customized_load_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingCustomizedLoadMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("MetricDataQueries");
    if let Some(var_212) = &input.metric_data_queries {
        let mut list_214 = scope_211.start_list(false, None);
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            crate::query_ser::serialize_structure_crate_model_metric_data_query(
                entry_215, item_213,
            )?;
        }
        list_214.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_predictive_scaling_customized_capacity_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PredictiveScalingCustomizedCapacityMetric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("MetricDataQueries");
    if let Some(var_217) = &input.metric_data_queries {
        let mut list_219 = scope_216.start_list(false, None);
        for item_218 in var_217 {
            #[allow(unused_mut)]
            let mut entry_220 = list_219.entry();
            crate::query_ser::serialize_structure_crate_model_metric_data_query(
                entry_220, item_218,
            )?;
        }
        list_219.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("VCpuCount");
    if let Some(var_222) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_request(scope_221, var_222)?;
    }
    #[allow(unused_mut)]
    let mut scope_223 = writer.prefix("MemoryMiB");
    if let Some(var_224) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_223, var_224)?;
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("CpuManufacturers");
    if let Some(var_226) = &input.cpu_manufacturers {
        let mut list_228 = scope_225.start_list(false, None);
        for item_227 in var_226 {
            #[allow(unused_mut)]
            let mut entry_229 = list_228.entry();
            entry_229.string(item_227.as_str());
        }
        list_228.finish();
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_231) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_230, var_231,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("ExcludedInstanceTypes");
    if let Some(var_233) = &input.excluded_instance_types {
        let mut list_235 = scope_232.start_list(false, None);
        for item_234 in var_233 {
            #[allow(unused_mut)]
            let mut entry_236 = list_235.entry();
            entry_236.string(item_234);
        }
        list_235.finish();
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("InstanceGenerations");
    if let Some(var_238) = &input.instance_generations {
        let mut list_240 = scope_237.start_list(false, None);
        for item_239 in var_238 {
            #[allow(unused_mut)]
            let mut entry_241 = list_240.entry();
            entry_241.string(item_239.as_str());
        }
        list_240.finish();
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_243) = &input.spot_max_price_percentage_over_lowest_price {
        scope_242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_245) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_244.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_245).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("BareMetal");
    if let Some(var_247) = &input.bare_metal {
        scope_246.string(var_247.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("BurstablePerformance");
    if let Some(var_249) = &input.burstable_performance {
        scope_248.string(var_249.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("RequireHibernateSupport");
    if let Some(var_251) = &input.require_hibernate_support {
        scope_250.boolean(*var_251);
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_253) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_252, var_253,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LocalStorage");
    if let Some(var_255) = &input.local_storage {
        scope_254.string(var_255.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_256 = writer.prefix("LocalStorageTypes");
    if let Some(var_257) = &input.local_storage_types {
        let mut list_259 = scope_256.start_list(false, None);
        for item_258 in var_257 {
            #[allow(unused_mut)]
            let mut entry_260 = list_259.entry();
            entry_260.string(item_258.as_str());
        }
        list_259.finish();
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_262) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_261, var_262,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_264) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("AcceleratorTypes");
    if let Some(var_266) = &input.accelerator_types {
        let mut list_268 = scope_265.start_list(false, None);
        for item_267 in var_266 {
            #[allow(unused_mut)]
            let mut entry_269 = list_268.entry();
            entry_269.string(item_267.as_str());
        }
        list_268.finish();
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("AcceleratorCount");
    if let Some(var_271) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_270, var_271,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("AcceleratorManufacturers");
    if let Some(var_273) = &input.accelerator_manufacturers {
        let mut list_275 = scope_272.start_list(false, None);
        for item_274 in var_273 {
            #[allow(unused_mut)]
            let mut entry_276 = list_275.entry();
            entry_276.string(item_274.as_str());
        }
        list_275.finish();
    }
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("AcceleratorNames");
    if let Some(var_278) = &input.accelerator_names {
        let mut list_280 = scope_277.start_list(false, None);
        for item_279 in var_278 {
            #[allow(unused_mut)]
            let mut entry_281 = list_280.entry();
            entry_281.string(item_279.as_str());
        }
        list_280.finish();
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_283) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_282, var_283,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_metric_data_query(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MetricDataQuery,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("Id");
    if let Some(var_285) = &input.id {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("Expression");
    if let Some(var_287) = &input.expression {
        scope_286.string(var_287);
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("MetricStat");
    if let Some(var_289) = &input.metric_stat {
        crate::query_ser::serialize_structure_crate_model_metric_stat(scope_288, var_289)?;
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("Label");
    if let Some(var_291) = &input.label {
        scope_290.string(var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("ReturnData");
    if let Some(var_293) = &input.return_data {
        scope_292.boolean(*var_293);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("Min");
    if let Some(var_295) = &input.min {
        scope_294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Max");
    if let Some(var_297) = &input.max {
        scope_296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_297).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Min");
    if let Some(var_299) = &input.min {
        scope_298.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Max");
    if let Some(var_301) = &input.max {
        scope_300.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_301).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("Min");
    if let Some(var_303) = &input.min {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("Max");
    if let Some(var_305) = &input.max {
        scope_304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_305).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("Min");
    if let Some(var_307) = &input.min {
        scope_306.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_307).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("Max");
    if let Some(var_309) = &input.max {
        scope_308.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_309).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("Min");
    if let Some(var_311) = &input.min {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_311).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Max");
    if let Some(var_313) = &input.max {
        scope_312.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_313).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Min");
    if let Some(var_315) = &input.min {
        scope_314.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_315).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Max");
    if let Some(var_317) = &input.max {
        scope_316.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Min");
    if let Some(var_319) = &input.min {
        scope_318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_319).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("Max");
    if let Some(var_321) = &input.max {
        scope_320.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("Min");
    if let Some(var_323) = &input.min {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("Max");
    if let Some(var_325) = &input.max {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_metric_stat(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MetricStat,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("Metric");
    if let Some(var_327) = &input.metric {
        crate::query_ser::serialize_structure_crate_model_metric(scope_326, var_327)?;
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("Stat");
    if let Some(var_329) = &input.stat {
        scope_328.string(var_329);
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("Unit");
    if let Some(var_331) = &input.unit {
        scope_330.string(var_331);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_metric(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Metric,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("Namespace");
    if let Some(var_333) = &input.namespace {
        scope_332.string(var_333);
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("MetricName");
    if let Some(var_335) = &input.metric_name {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("Dimensions");
    if let Some(var_337) = &input.dimensions {
        let mut list_339 = scope_336.start_list(false, None);
        for item_338 in var_337 {
            #[allow(unused_mut)]
            let mut entry_340 = list_339.entry();
            crate::query_ser::serialize_structure_crate_model_metric_dimension(
                entry_340, item_338,
            )?;
        }
        list_339.finish();
    }
    Ok(())
}
