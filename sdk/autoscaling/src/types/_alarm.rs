// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an alarm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Alarm {
    /// <p>The name of the alarm.</p>
    #[doc(hidden)]
    pub alarm_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    #[doc(hidden)]
    pub alarm_arn: std::option::Option<std::string::String>,
}
impl Alarm {
    /// <p>The name of the alarm.</p>
    pub fn alarm_name(&self) -> std::option::Option<&str> {
        self.alarm_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    pub fn alarm_arn(&self) -> std::option::Option<&str> {
        self.alarm_arn.as_deref()
    }
}
impl Alarm {
    /// Creates a new builder-style object to manufacture [`Alarm`](crate::types::Alarm).
    pub fn builder() -> crate::types::builders::AlarmBuilder {
        crate::types::builders::AlarmBuilder::default()
    }
}

/// A builder for [`Alarm`](crate::types::Alarm).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlarmBuilder {
    pub(crate) alarm_name: std::option::Option<std::string::String>,
    pub(crate) alarm_arn: std::option::Option<std::string::String>,
}
impl AlarmBuilder {
    /// <p>The name of the alarm.</p>
    pub fn alarm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_name = Some(input.into());
        self
    }
    /// <p>The name of the alarm.</p>
    pub fn set_alarm_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    pub fn alarm_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alarm.</p>
    pub fn set_alarm_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Alarm`](crate::types::Alarm).
    pub fn build(self) -> crate::types::Alarm {
        crate::types::Alarm {
            alarm_name: self.alarm_name,
            alarm_arn: self.alarm_arn,
        }
    }
}
