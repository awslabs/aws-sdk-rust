// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the minimum and maximum for the <code>NetworkInterfaceCount</code> object when you specify <code>InstanceRequirements</code> for an Auto Scaling group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterfaceCountRequest {
    /// <p>The minimum number of network interfaces.</p>
    #[doc(hidden)]
    pub min: std::option::Option<i32>,
    /// <p>The maximum number of network interfaces.</p>
    #[doc(hidden)]
    pub max: std::option::Option<i32>,
}
impl NetworkInterfaceCountRequest {
    /// <p>The minimum number of network interfaces.</p>
    pub fn min(&self) -> std::option::Option<i32> {
        self.min
    }
    /// <p>The maximum number of network interfaces.</p>
    pub fn max(&self) -> std::option::Option<i32> {
        self.max
    }
}
impl NetworkInterfaceCountRequest {
    /// Creates a new builder-style object to manufacture [`NetworkInterfaceCountRequest`](crate::types::NetworkInterfaceCountRequest).
    pub fn builder() -> crate::types::builders::NetworkInterfaceCountRequestBuilder {
        crate::types::builders::NetworkInterfaceCountRequestBuilder::default()
    }
}

/// A builder for [`NetworkInterfaceCountRequest`](crate::types::NetworkInterfaceCountRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfaceCountRequestBuilder {
    pub(crate) min: std::option::Option<i32>,
    pub(crate) max: std::option::Option<i32>,
}
impl NetworkInterfaceCountRequestBuilder {
    /// <p>The minimum number of network interfaces.</p>
    pub fn min(mut self, input: i32) -> Self {
        self.min = Some(input);
        self
    }
    /// <p>The minimum number of network interfaces.</p>
    pub fn set_min(mut self, input: std::option::Option<i32>) -> Self {
        self.min = input;
        self
    }
    /// <p>The maximum number of network interfaces.</p>
    pub fn max(mut self, input: i32) -> Self {
        self.max = Some(input);
        self
    }
    /// <p>The maximum number of network interfaces.</p>
    pub fn set_max(mut self, input: std::option::Option<i32>) -> Self {
        self.max = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterfaceCountRequest`](crate::types::NetworkInterfaceCountRequest).
    pub fn build(self) -> crate::types::NetworkInterfaceCountRequest {
        crate::types::NetworkInterfaceCountRequest {
            min: self.min,
            max: self.max,
        }
    }
}
