// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a lifecycle hook. A lifecycle hook lets you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LifecycleHook {
    /// <p>The name of the lifecycle hook.</p>
    #[doc(hidden)]
    pub lifecycle_hook_name: std::option::Option<std::string::String>,
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The lifecycle transition.</p>
    /// <p>Valid values: <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> | <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p>
    #[doc(hidden)]
    pub lifecycle_transition: std::option::Option<std::string::String>,
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.</p>
    #[doc(hidden)]
    pub notification_target_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    #[doc(hidden)]
    pub notification_metadata: std::option::Option<std::string::String>,
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> property.</p>
    #[doc(hidden)]
    pub heartbeat_timeout: std::option::Option<i32>,
    /// <p>The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is smaller.</p>
    #[doc(hidden)]
    pub global_timeout: std::option::Option<i32>,
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    #[doc(hidden)]
    pub default_result: std::option::Option<std::string::String>,
}
impl LifecycleHook {
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(&self) -> std::option::Option<&str> {
        self.lifecycle_hook_name.as_deref()
    }
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The lifecycle transition.</p>
    /// <p>Valid values: <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> | <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p>
    pub fn lifecycle_transition(&self) -> std::option::Option<&str> {
        self.lifecycle_transition.as_deref()
    }
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.</p>
    pub fn notification_target_arn(&self) -> std::option::Option<&str> {
        self.notification_target_arn.as_deref()
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn notification_metadata(&self) -> std::option::Option<&str> {
        self.notification_metadata.as_deref()
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> property.</p>
    pub fn heartbeat_timeout(&self) -> std::option::Option<i32> {
        self.heartbeat_timeout
    }
    /// <p>The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is smaller.</p>
    pub fn global_timeout(&self) -> std::option::Option<i32> {
        self.global_timeout
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn default_result(&self) -> std::option::Option<&str> {
        self.default_result.as_deref()
    }
}
impl LifecycleHook {
    /// Creates a new builder-style object to manufacture [`LifecycleHook`](crate::types::LifecycleHook).
    pub fn builder() -> crate::types::builders::LifecycleHookBuilder {
        crate::types::builders::LifecycleHookBuilder::default()
    }
}

/// A builder for [`LifecycleHook`](crate::types::LifecycleHook).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LifecycleHookBuilder {
    pub(crate) lifecycle_hook_name: std::option::Option<std::string::String>,
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) lifecycle_transition: std::option::Option<std::string::String>,
    pub(crate) notification_target_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) notification_metadata: std::option::Option<std::string::String>,
    pub(crate) heartbeat_timeout: std::option::Option<i32>,
    pub(crate) global_timeout: std::option::Option<i32>,
    pub(crate) default_result: std::option::Option<std::string::String>,
}
impl LifecycleHookBuilder {
    /// <p>The name of the lifecycle hook.</p>
    pub fn lifecycle_hook_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_hook_name = Some(input.into());
        self
    }
    /// <p>The name of the lifecycle hook.</p>
    pub fn set_lifecycle_hook_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_hook_name = input;
        self
    }
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group for the lifecycle hook.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The lifecycle transition.</p>
    /// <p>Valid values: <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> | <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p>
    pub fn lifecycle_transition(mut self, input: impl Into<std::string::String>) -> Self {
        self.lifecycle_transition = Some(input.into());
        self
    }
    /// <p>The lifecycle transition.</p>
    /// <p>Valid values: <code>autoscaling:EC2_INSTANCE_LAUNCHING</code> | <code>autoscaling:EC2_INSTANCE_TERMINATING</code> </p>
    pub fn set_lifecycle_transition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.lifecycle_transition = input;
        self
    }
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.</p>
    pub fn notification_target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_target_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.</p>
    pub fn set_notification_target_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_target_arn = input;
        self
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn notification_metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_metadata = Some(input.into());
        self
    }
    /// <p>Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.</p>
    pub fn set_notification_metadata(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_metadata = input;
        self
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> property.</p>
    pub fn heartbeat_timeout(mut self, input: i32) -> Self {
        self.heartbeat_timeout = Some(input);
        self
    }
    /// <p>The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the <code>DefaultResult</code> property.</p>
    pub fn set_heartbeat_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.heartbeat_timeout = input;
        self
    }
    /// <p>The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is smaller.</p>
    pub fn global_timeout(mut self, input: i32) -> Self {
        self.global_timeout = Some(input);
        self
    }
    /// <p>The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times <code>HeartbeatTimeout</code>, whichever is smaller.</p>
    pub fn set_global_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.global_timeout = input;
        self
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn default_result(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_result = Some(input.into());
        self
    }
    /// <p>The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs.</p>
    /// <p>Valid values: <code>CONTINUE</code> | <code>ABANDON</code> </p>
    pub fn set_default_result(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_result = input;
        self
    }
    /// Consumes the builder and constructs a [`LifecycleHook`](crate::types::LifecycleHook).
    pub fn build(self) -> crate::types::LifecycleHook {
        crate::types::LifecycleHook {
            lifecycle_hook_name: self.lifecycle_hook_name,
            auto_scaling_group_name: self.auto_scaling_group_name,
            lifecycle_transition: self.lifecycle_transition,
            notification_target_arn: self.notification_target_arn,
            role_arn: self.role_arn,
            notification_metadata: self.notification_metadata,
            heartbeat_timeout: self.heartbeat_timeout,
            global_timeout: self.global_timeout,
            default_result: self.default_result,
        }
    }
}
