// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes information used to create a step adjustment for a step scaling policy.</p>
/// <p>For the following examples, suppose that you have an alarm with a breach threshold of 50:</p>
/// <ul>
/// <li> <p>To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.</p> </li>
/// <li> <p>To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.</p> </li>
/// </ul>
/// <p>There are a few rules for the step adjustments for your step policy:</p>
/// <ul>
/// <li> <p>The ranges of your step adjustments can't overlap or have a gap.</p> </li>
/// <li> <p>At most, one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.</p> </li>
/// <li> <p>At most, one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.</p> </li>
/// <li> <p>The upper and lower bound can't be null in the same step adjustment.</p> </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps">Step adjustments</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StepAdjustment {
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
    pub metric_interval_lower_bound: ::std::option::Option<f64>,
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p>
    /// <p>The upper bound must be greater than the lower bound.</p>
    pub metric_interval_upper_bound: ::std::option::Option<f64>,
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p>
    pub scaling_adjustment: ::std::option::Option<i32>,
}
impl StepAdjustment {
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
    pub fn metric_interval_lower_bound(&self) -> ::std::option::Option<f64> {
        self.metric_interval_lower_bound
    }
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p>
    /// <p>The upper bound must be greater than the lower bound.</p>
    pub fn metric_interval_upper_bound(&self) -> ::std::option::Option<f64> {
        self.metric_interval_upper_bound
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p>
    pub fn scaling_adjustment(&self) -> ::std::option::Option<i32> {
        self.scaling_adjustment
    }
}
impl StepAdjustment {
    /// Creates a new builder-style object to manufacture [`StepAdjustment`](crate::types::StepAdjustment).
    pub fn builder() -> crate::types::builders::StepAdjustmentBuilder {
        crate::types::builders::StepAdjustmentBuilder::default()
    }
}

/// A builder for [`StepAdjustment`](crate::types::StepAdjustment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StepAdjustmentBuilder {
    pub(crate) metric_interval_lower_bound: ::std::option::Option<f64>,
    pub(crate) metric_interval_upper_bound: ::std::option::Option<f64>,
    pub(crate) scaling_adjustment: ::std::option::Option<i32>,
}
impl StepAdjustmentBuilder {
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
    pub fn metric_interval_lower_bound(mut self, input: f64) -> Self {
        self.metric_interval_lower_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
    pub fn set_metric_interval_lower_bound(mut self, input: ::std::option::Option<f64>) -> Self {
        self.metric_interval_lower_bound = input;
        self
    }
    /// <p>The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.</p>
    pub fn get_metric_interval_lower_bound(&self) -> &::std::option::Option<f64> {
        &self.metric_interval_lower_bound
    }
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p>
    /// <p>The upper bound must be greater than the lower bound.</p>
    pub fn metric_interval_upper_bound(mut self, input: f64) -> Self {
        self.metric_interval_upper_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p>
    /// <p>The upper bound must be greater than the lower bound.</p>
    pub fn set_metric_interval_upper_bound(mut self, input: ::std::option::Option<f64>) -> Self {
        self.metric_interval_upper_bound = input;
        self
    }
    /// <p>The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.</p>
    /// <p>The upper bound must be greater than the lower bound.</p>
    pub fn get_metric_interval_upper_bound(&self) -> &::std::option::Option<f64> {
        &self.metric_interval_upper_bound
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p>
    /// This field is required.
    pub fn scaling_adjustment(mut self, input: i32) -> Self {
        self.scaling_adjustment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p>
    pub fn set_scaling_adjustment(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scaling_adjustment = input;
        self
    }
    /// <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.</p>
    pub fn get_scaling_adjustment(&self) -> &::std::option::Option<i32> {
        &self.scaling_adjustment
    }
    /// Consumes the builder and constructs a [`StepAdjustment`](crate::types::StepAdjustment).
    pub fn build(self) -> crate::types::StepAdjustment {
        crate::types::StepAdjustment {
            metric_interval_lower_bound: self.metric_interval_lower_bound,
            metric_interval_upper_bound: self.metric_interval_upper_bound,
            scaling_adjustment: self.scaling_adjustment,
        }
    }
}
