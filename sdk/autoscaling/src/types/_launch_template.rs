// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this structure to specify the launch templates and instance types (overrides) for a mixed instances policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LaunchTemplate {
    /// <p>The launch template.</p>
    #[doc(hidden)]
    pub launch_template_specification:
        std::option::Option<crate::types::LaunchTemplateSpecification>,
    /// <p>Any properties that you specify override the same properties in the launch template.</p>
    #[doc(hidden)]
    pub overrides: std::option::Option<std::vec::Vec<crate::types::LaunchTemplateOverrides>>,
}
impl LaunchTemplate {
    /// <p>The launch template.</p>
    pub fn launch_template_specification(
        &self,
    ) -> std::option::Option<&crate::types::LaunchTemplateSpecification> {
        self.launch_template_specification.as_ref()
    }
    /// <p>Any properties that you specify override the same properties in the launch template.</p>
    pub fn overrides(&self) -> std::option::Option<&[crate::types::LaunchTemplateOverrides]> {
        self.overrides.as_deref()
    }
}
impl LaunchTemplate {
    /// Creates a new builder-style object to manufacture [`LaunchTemplate`](crate::types::LaunchTemplate).
    pub fn builder() -> crate::types::builders::LaunchTemplateBuilder {
        crate::types::builders::LaunchTemplateBuilder::default()
    }
}

/// A builder for [`LaunchTemplate`](crate::types::LaunchTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchTemplateBuilder {
    pub(crate) launch_template_specification:
        std::option::Option<crate::types::LaunchTemplateSpecification>,
    pub(crate) overrides: std::option::Option<std::vec::Vec<crate::types::LaunchTemplateOverrides>>,
}
impl LaunchTemplateBuilder {
    /// <p>The launch template.</p>
    pub fn launch_template_specification(
        mut self,
        input: crate::types::LaunchTemplateSpecification,
    ) -> Self {
        self.launch_template_specification = Some(input);
        self
    }
    /// <p>The launch template.</p>
    pub fn set_launch_template_specification(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateSpecification>,
    ) -> Self {
        self.launch_template_specification = input;
        self
    }
    /// Appends an item to `overrides`.
    ///
    /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
    ///
    /// <p>Any properties that you specify override the same properties in the launch template.</p>
    pub fn overrides(mut self, input: crate::types::LaunchTemplateOverrides) -> Self {
        let mut v = self.overrides.unwrap_or_default();
        v.push(input);
        self.overrides = Some(v);
        self
    }
    /// <p>Any properties that you specify override the same properties in the launch template.</p>
    pub fn set_overrides(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LaunchTemplateOverrides>>,
    ) -> Self {
        self.overrides = input;
        self
    }
    /// Consumes the builder and constructs a [`LaunchTemplate`](crate::types::LaunchTemplate).
    pub fn build(self) -> crate::types::LaunchTemplate {
        crate::types::LaunchTemplate {
            launch_template_specification: self.launch_template_specification,
            overrides: self.overrides,
        }
    }
}
