// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an instance refresh for an Auto Scaling group. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceRefresh {
    /// <p>The instance refresh ID.</p>
    #[doc(hidden)]
    pub instance_refresh_id: std::option::Option<std::string::String>,
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The current status for the instance refresh operation:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code> - The request was created, but the operation has not started.</p> </li>
    /// <li> <p> <code>InProgress</code> - The operation is in progress.</p> </li>
    /// <li> <p> <code>Successful</code> - The operation completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The operation failed to complete. You can troubleshoot using the status reason and the scaling activities. </p> </li>
    /// <li> <p> <code>Cancelling</code> - An ongoing operation is being cancelled. Cancellation does not roll back any replacements that have already been completed, but it prevents new replacements from being started. </p> </li>
    /// <li> <p> <code>Cancelled</code> - The operation is cancelled. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::InstanceRefreshStatus>,
    /// <p>Provides more details about the current status of the instance refresh. </p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>The date and time at which the instance refresh began.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time at which the instance refresh ended.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.</p>
    #[doc(hidden)]
    pub percentage_complete: std::option::Option<i32>,
    /// <p>The number of instances remaining to update before the instance refresh is complete.</p>
    #[doc(hidden)]
    pub instances_to_update: std::option::Option<i32>,
    /// <p>Additional progress details for an Auto Scaling group that has a warm pool.</p>
    #[doc(hidden)]
    pub progress_details: std::option::Option<crate::types::InstanceRefreshProgressDetails>,
    /// <p>Describes the preferences for an instance refresh.</p>
    #[doc(hidden)]
    pub preferences: std::option::Option<crate::types::RefreshPreferences>,
    /// <p>Describes the specific update you want to deploy.</p>
    #[doc(hidden)]
    pub desired_configuration: std::option::Option<crate::types::DesiredConfiguration>,
}
impl InstanceRefresh {
    /// <p>The instance refresh ID.</p>
    pub fn instance_refresh_id(&self) -> std::option::Option<&str> {
        self.instance_refresh_id.as_deref()
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The current status for the instance refresh operation:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code> - The request was created, but the operation has not started.</p> </li>
    /// <li> <p> <code>InProgress</code> - The operation is in progress.</p> </li>
    /// <li> <p> <code>Successful</code> - The operation completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The operation failed to complete. You can troubleshoot using the status reason and the scaling activities. </p> </li>
    /// <li> <p> <code>Cancelling</code> - An ongoing operation is being cancelled. Cancellation does not roll back any replacements that have already been completed, but it prevents new replacements from being started. </p> </li>
    /// <li> <p> <code>Cancelled</code> - The operation is cancelled. </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::InstanceRefreshStatus> {
        self.status.as_ref()
    }
    /// <p>Provides more details about the current status of the instance refresh. </p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The date and time at which the instance refresh began.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The date and time at which the instance refresh ended.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.</p>
    pub fn percentage_complete(&self) -> std::option::Option<i32> {
        self.percentage_complete
    }
    /// <p>The number of instances remaining to update before the instance refresh is complete.</p>
    pub fn instances_to_update(&self) -> std::option::Option<i32> {
        self.instances_to_update
    }
    /// <p>Additional progress details for an Auto Scaling group that has a warm pool.</p>
    pub fn progress_details(
        &self,
    ) -> std::option::Option<&crate::types::InstanceRefreshProgressDetails> {
        self.progress_details.as_ref()
    }
    /// <p>Describes the preferences for an instance refresh.</p>
    pub fn preferences(&self) -> std::option::Option<&crate::types::RefreshPreferences> {
        self.preferences.as_ref()
    }
    /// <p>Describes the specific update you want to deploy.</p>
    pub fn desired_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DesiredConfiguration> {
        self.desired_configuration.as_ref()
    }
}
impl InstanceRefresh {
    /// Creates a new builder-style object to manufacture [`InstanceRefresh`](crate::types::InstanceRefresh).
    pub fn builder() -> crate::types::builders::InstanceRefreshBuilder {
        crate::types::builders::InstanceRefreshBuilder::default()
    }
}

/// A builder for [`InstanceRefresh`](crate::types::InstanceRefresh).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceRefreshBuilder {
    pub(crate) instance_refresh_id: std::option::Option<std::string::String>,
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::InstanceRefreshStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) percentage_complete: std::option::Option<i32>,
    pub(crate) instances_to_update: std::option::Option<i32>,
    pub(crate) progress_details: std::option::Option<crate::types::InstanceRefreshProgressDetails>,
    pub(crate) preferences: std::option::Option<crate::types::RefreshPreferences>,
    pub(crate) desired_configuration: std::option::Option<crate::types::DesiredConfiguration>,
}
impl InstanceRefreshBuilder {
    /// <p>The instance refresh ID.</p>
    pub fn instance_refresh_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_refresh_id = Some(input.into());
        self
    }
    /// <p>The instance refresh ID.</p>
    pub fn set_instance_refresh_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.instance_refresh_id = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The current status for the instance refresh operation:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code> - The request was created, but the operation has not started.</p> </li>
    /// <li> <p> <code>InProgress</code> - The operation is in progress.</p> </li>
    /// <li> <p> <code>Successful</code> - The operation completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The operation failed to complete. You can troubleshoot using the status reason and the scaling activities. </p> </li>
    /// <li> <p> <code>Cancelling</code> - An ongoing operation is being cancelled. Cancellation does not roll back any replacements that have already been completed, but it prevents new replacements from being started. </p> </li>
    /// <li> <p> <code>Cancelled</code> - The operation is cancelled. </p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::InstanceRefreshStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status for the instance refresh operation:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code> - The request was created, but the operation has not started.</p> </li>
    /// <li> <p> <code>InProgress</code> - The operation is in progress.</p> </li>
    /// <li> <p> <code>Successful</code> - The operation completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The operation failed to complete. You can troubleshoot using the status reason and the scaling activities. </p> </li>
    /// <li> <p> <code>Cancelling</code> - An ongoing operation is being cancelled. Cancellation does not roll back any replacements that have already been completed, but it prevents new replacements from being started. </p> </li>
    /// <li> <p> <code>Cancelled</code> - The operation is cancelled. </p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::InstanceRefreshStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Provides more details about the current status of the instance refresh. </p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>Provides more details about the current status of the instance refresh. </p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The date and time at which the instance refresh began.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The date and time at which the instance refresh began.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The date and time at which the instance refresh ended.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The date and time at which the instance refresh ended.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.</p>
    pub fn percentage_complete(mut self, input: i32) -> Self {
        self.percentage_complete = Some(input);
        self
    }
    /// <p>The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.</p>
    pub fn set_percentage_complete(mut self, input: std::option::Option<i32>) -> Self {
        self.percentage_complete = input;
        self
    }
    /// <p>The number of instances remaining to update before the instance refresh is complete.</p>
    pub fn instances_to_update(mut self, input: i32) -> Self {
        self.instances_to_update = Some(input);
        self
    }
    /// <p>The number of instances remaining to update before the instance refresh is complete.</p>
    pub fn set_instances_to_update(mut self, input: std::option::Option<i32>) -> Self {
        self.instances_to_update = input;
        self
    }
    /// <p>Additional progress details for an Auto Scaling group that has a warm pool.</p>
    pub fn progress_details(mut self, input: crate::types::InstanceRefreshProgressDetails) -> Self {
        self.progress_details = Some(input);
        self
    }
    /// <p>Additional progress details for an Auto Scaling group that has a warm pool.</p>
    pub fn set_progress_details(
        mut self,
        input: std::option::Option<crate::types::InstanceRefreshProgressDetails>,
    ) -> Self {
        self.progress_details = input;
        self
    }
    /// <p>Describes the preferences for an instance refresh.</p>
    pub fn preferences(mut self, input: crate::types::RefreshPreferences) -> Self {
        self.preferences = Some(input);
        self
    }
    /// <p>Describes the preferences for an instance refresh.</p>
    pub fn set_preferences(
        mut self,
        input: std::option::Option<crate::types::RefreshPreferences>,
    ) -> Self {
        self.preferences = input;
        self
    }
    /// <p>Describes the specific update you want to deploy.</p>
    pub fn desired_configuration(mut self, input: crate::types::DesiredConfiguration) -> Self {
        self.desired_configuration = Some(input);
        self
    }
    /// <p>Describes the specific update you want to deploy.</p>
    pub fn set_desired_configuration(
        mut self,
        input: std::option::Option<crate::types::DesiredConfiguration>,
    ) -> Self {
        self.desired_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceRefresh`](crate::types::InstanceRefresh).
    pub fn build(self) -> crate::types::InstanceRefresh {
        crate::types::InstanceRefresh {
            instance_refresh_id: self.instance_refresh_id,
            auto_scaling_group_name: self.auto_scaling_group_name,
            status: self.status,
            status_reason: self.status_reason,
            start_time: self.start_time,
            end_time: self.end_time,
            percentage_complete: self.percentage_complete,
            instances_to_update: self.instances_to_update,
            progress_details: self.progress_details,
            preferences: self.preferences,
            desired_configuration: self.desired_configuration,
        }
    }
}
