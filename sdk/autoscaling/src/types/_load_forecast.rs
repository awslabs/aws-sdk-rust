// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>GetPredictiveScalingForecast</code> call returns the load forecast for a predictive scaling policy. This structure includes the data points for that load forecast, along with the timestamps of those data points and the metric specification. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoadForecast {
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    /// <p>The values of the data points.</p>
    pub values: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>The metric specification for the load forecast.</p>
    pub metric_specification: ::std::option::Option<crate::types::PredictiveScalingMetricSpecification>,
}
impl LoadForecast {
    /// <p>The timestamps for the data points, in UTC format.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.timestamps.is_none()`.
    pub fn timestamps(&self) -> &[::aws_smithy_types::DateTime] {
        self.timestamps.as_deref().unwrap_or_default()
    }
    /// <p>The values of the data points.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[f64] {
        self.values.as_deref().unwrap_or_default()
    }
    /// <p>The metric specification for the load forecast.</p>
    pub fn metric_specification(&self) -> ::std::option::Option<&crate::types::PredictiveScalingMetricSpecification> {
        self.metric_specification.as_ref()
    }
}
impl LoadForecast {
    /// Creates a new builder-style object to manufacture [`LoadForecast`](crate::types::LoadForecast).
    pub fn builder() -> crate::types::builders::LoadForecastBuilder {
        crate::types::builders::LoadForecastBuilder::default()
    }
}

/// A builder for [`LoadForecast`](crate::types::LoadForecast).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoadForecastBuilder {
    pub(crate) timestamps: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) metric_specification: ::std::option::Option<crate::types::PredictiveScalingMetricSpecification>,
}
impl LoadForecastBuilder {
    /// Appends an item to `timestamps`.
    ///
    /// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
    ///
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn timestamps(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        let mut v = self.timestamps.unwrap_or_default();
        v.push(input);
        self.timestamps = ::std::option::Option::Some(v);
        self
    }
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn set_timestamps(mut self, input: ::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>>) -> Self {
        self.timestamps = input;
        self
    }
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn get_timestamps(&self) -> &::std::option::Option<::std::vec::Vec<::aws_smithy_types::DateTime>> {
        &self.timestamps
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of the data points.</p>
    pub fn values(mut self, input: f64) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values of the data points.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values of the data points.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.values
    }
    /// <p>The metric specification for the load forecast.</p>
    /// This field is required.
    pub fn metric_specification(mut self, input: crate::types::PredictiveScalingMetricSpecification) -> Self {
        self.metric_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The metric specification for the load forecast.</p>
    pub fn set_metric_specification(mut self, input: ::std::option::Option<crate::types::PredictiveScalingMetricSpecification>) -> Self {
        self.metric_specification = input;
        self
    }
    /// <p>The metric specification for the load forecast.</p>
    pub fn get_metric_specification(&self) -> &::std::option::Option<crate::types::PredictiveScalingMetricSpecification> {
        &self.metric_specification
    }
    /// Consumes the builder and constructs a [`LoadForecast`](crate::types::LoadForecast).
    pub fn build(self) -> crate::types::LoadForecast {
        crate::types::LoadForecast {
            timestamps: self.timestamps,
            values: self.values,
            metric_specification: self.metric_specification,
        }
    }
}
