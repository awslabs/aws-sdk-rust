// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a customized capacity metric for a predictive scaling policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictiveScalingCustomizedCapacityMetric {
    /// <p>One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data. </p>
    pub metric_data_queries: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>,
}
impl PredictiveScalingCustomizedCapacityMetric {
    /// <p>One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_data_queries.is_none()`.
    pub fn metric_data_queries(&self) -> &[crate::types::MetricDataQuery] {
        self.metric_data_queries.as_deref().unwrap_or_default()
    }
}
impl PredictiveScalingCustomizedCapacityMetric {
    /// Creates a new builder-style object to manufacture [`PredictiveScalingCustomizedCapacityMetric`](crate::types::PredictiveScalingCustomizedCapacityMetric).
    pub fn builder() -> crate::types::builders::PredictiveScalingCustomizedCapacityMetricBuilder {
        crate::types::builders::PredictiveScalingCustomizedCapacityMetricBuilder::default()
    }
}

/// A builder for [`PredictiveScalingCustomizedCapacityMetric`](crate::types::PredictiveScalingCustomizedCapacityMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredictiveScalingCustomizedCapacityMetricBuilder {
    pub(crate) metric_data_queries: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>,
}
impl PredictiveScalingCustomizedCapacityMetricBuilder {
    /// Appends an item to `metric_data_queries`.
    ///
    /// To override the contents of this collection use [`set_metric_data_queries`](Self::set_metric_data_queries).
    ///
    /// <p>One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data. </p>
    pub fn metric_data_queries(mut self, input: crate::types::MetricDataQuery) -> Self {
        let mut v = self.metric_data_queries.unwrap_or_default();
        v.push(input);
        self.metric_data_queries = ::std::option::Option::Some(v);
        self
    }
    /// <p>One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data. </p>
    pub fn set_metric_data_queries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>>) -> Self {
        self.metric_data_queries = input;
        self
    }
    /// <p>One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data. </p>
    pub fn get_metric_data_queries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricDataQuery>> {
        &self.metric_data_queries
    }
    /// Consumes the builder and constructs a [`PredictiveScalingCustomizedCapacityMetric`](crate::types::PredictiveScalingCustomizedCapacityMetric).
    pub fn build(self) -> crate::types::PredictiveScalingCustomizedCapacityMetric {
        crate::types::PredictiveScalingCustomizedCapacityMetric {
            metric_data_queries: self.metric_data_queries,
        }
    }
}
