// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the state of a traffic source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TrafficSourceState {
    /// <p>The unique identifier of the traffic source. Currently, this is the Amazon Resource Name (ARN) for a VPC Lattice target group.</p>
    #[doc(hidden)]
    pub traffic_source: std::option::Option<std::string::String>,
    /// <p>The following are the possible states for a VPC Lattice target group:</p>
    /// <ul>
    /// <li> <p> <code>Adding</code> - The Auto Scaling instances are being registered with the target group.</p> </li>
    /// <li> <p> <code>Added</code> - All Auto Scaling instances are registered with the target group.</p> </li>
    /// <li> <p> <code>InService</code> - At least one Auto Scaling instance passed the <code>VPC_LATTICE</code> health check.</p> </li>
    /// <li> <p> <code>Removing</code> - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, VPC Lattice waits for in-flight requests to complete before deregistering the instances.</p> </li>
    /// <li> <p> <code>Removed</code> - All Auto Scaling instances are deregistered from the target group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
}
impl TrafficSourceState {
    /// <p>The unique identifier of the traffic source. Currently, this is the Amazon Resource Name (ARN) for a VPC Lattice target group.</p>
    pub fn traffic_source(&self) -> std::option::Option<&str> {
        self.traffic_source.as_deref()
    }
    /// <p>The following are the possible states for a VPC Lattice target group:</p>
    /// <ul>
    /// <li> <p> <code>Adding</code> - The Auto Scaling instances are being registered with the target group.</p> </li>
    /// <li> <p> <code>Added</code> - All Auto Scaling instances are registered with the target group.</p> </li>
    /// <li> <p> <code>InService</code> - At least one Auto Scaling instance passed the <code>VPC_LATTICE</code> health check.</p> </li>
    /// <li> <p> <code>Removing</code> - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, VPC Lattice waits for in-flight requests to complete before deregistering the instances.</p> </li>
    /// <li> <p> <code>Removed</code> - All Auto Scaling instances are deregistered from the target group.</p> </li>
    /// </ul>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl TrafficSourceState {
    /// Creates a new builder-style object to manufacture [`TrafficSourceState`](crate::types::TrafficSourceState).
    pub fn builder() -> crate::types::builders::TrafficSourceStateBuilder {
        crate::types::builders::TrafficSourceStateBuilder::default()
    }
}

/// A builder for [`TrafficSourceState`](crate::types::TrafficSourceState).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TrafficSourceStateBuilder {
    pub(crate) traffic_source: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
}
impl TrafficSourceStateBuilder {
    /// <p>The unique identifier of the traffic source. Currently, this is the Amazon Resource Name (ARN) for a VPC Lattice target group.</p>
    pub fn traffic_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.traffic_source = Some(input.into());
        self
    }
    /// <p>The unique identifier of the traffic source. Currently, this is the Amazon Resource Name (ARN) for a VPC Lattice target group.</p>
    pub fn set_traffic_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.traffic_source = input;
        self
    }
    /// <p>The following are the possible states for a VPC Lattice target group:</p>
    /// <ul>
    /// <li> <p> <code>Adding</code> - The Auto Scaling instances are being registered with the target group.</p> </li>
    /// <li> <p> <code>Added</code> - All Auto Scaling instances are registered with the target group.</p> </li>
    /// <li> <p> <code>InService</code> - At least one Auto Scaling instance passed the <code>VPC_LATTICE</code> health check.</p> </li>
    /// <li> <p> <code>Removing</code> - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, VPC Lattice waits for in-flight requests to complete before deregistering the instances.</p> </li>
    /// <li> <p> <code>Removed</code> - All Auto Scaling instances are deregistered from the target group.</p> </li>
    /// </ul>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The following are the possible states for a VPC Lattice target group:</p>
    /// <ul>
    /// <li> <p> <code>Adding</code> - The Auto Scaling instances are being registered with the target group.</p> </li>
    /// <li> <p> <code>Added</code> - All Auto Scaling instances are registered with the target group.</p> </li>
    /// <li> <p> <code>InService</code> - At least one Auto Scaling instance passed the <code>VPC_LATTICE</code> health check.</p> </li>
    /// <li> <p> <code>Removing</code> - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, VPC Lattice waits for in-flight requests to complete before deregistering the instances.</p> </li>
    /// <li> <p> <code>Removed</code> - All Auto Scaling instances are deregistered from the target group.</p> </li>
    /// </ul>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`TrafficSourceState`](crate::types::TrafficSourceState).
    pub fn build(self) -> crate::types::TrafficSourceState {
        crate::types::TrafficSourceState {
            traffic_source: self.traffic_source,
            state: self.state,
        }
    }
}
