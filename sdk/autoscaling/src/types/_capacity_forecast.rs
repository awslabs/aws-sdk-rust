// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>GetPredictiveScalingForecast</code> call returns the capacity forecast for a predictive scaling policy. This structure includes the data points for that capacity forecast, along with the timestamps of those data points. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CapacityForecast {
    /// <p>The timestamps for the data points, in UTC format.</p>
    #[doc(hidden)]
    pub timestamps: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
    /// <p>The values of the data points.</p>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<f64>>,
}
impl CapacityForecast {
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn timestamps(&self) -> std::option::Option<&[aws_smithy_types::DateTime]> {
        self.timestamps.as_deref()
    }
    /// <p>The values of the data points.</p>
    pub fn values(&self) -> std::option::Option<&[f64]> {
        self.values.as_deref()
    }
}
impl CapacityForecast {
    /// Creates a new builder-style object to manufacture [`CapacityForecast`](crate::types::CapacityForecast).
    pub fn builder() -> crate::types::builders::CapacityForecastBuilder {
        crate::types::builders::CapacityForecastBuilder::default()
    }
}

/// A builder for [`CapacityForecast`](crate::types::CapacityForecast).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CapacityForecastBuilder {
    pub(crate) timestamps: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
    pub(crate) values: std::option::Option<std::vec::Vec<f64>>,
}
impl CapacityForecastBuilder {
    /// Appends an item to `timestamps`.
    ///
    /// To override the contents of this collection use [`set_timestamps`](Self::set_timestamps).
    ///
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn timestamps(mut self, input: aws_smithy_types::DateTime) -> Self {
        let mut v = self.timestamps.unwrap_or_default();
        v.push(input);
        self.timestamps = Some(v);
        self
    }
    /// <p>The timestamps for the data points, in UTC format.</p>
    pub fn set_timestamps(
        mut self,
        input: std::option::Option<std::vec::Vec<aws_smithy_types::DateTime>>,
    ) -> Self {
        self.timestamps = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values of the data points.</p>
    pub fn values(mut self, input: f64) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input);
        self.values = Some(v);
        self
    }
    /// <p>The values of the data points.</p>
    pub fn set_values(mut self, input: std::option::Option<std::vec::Vec<f64>>) -> Self {
        self.values = input;
        self
    }
    /// Consumes the builder and constructs a [`CapacityForecast`](crate::types::CapacityForecast).
    pub fn build(self) -> crate::types::CapacityForecast {
        crate::types::CapacityForecast {
            timestamps: self.timestamps,
            values: self.values,
        }
    }
}
