// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a tag for an Auto Scaling group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Tag {
    /// <p>The name of the Auto Scaling group.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource. The only supported value is <code>auto-scaling-group</code>.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The tag key.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The tag value.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether the tag is added to new instances as they are launched in the group.</p>
    pub propagate_at_launch: ::std::option::Option<bool>,
}
impl Tag {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The type of resource. The only supported value is <code>auto-scaling-group</code>.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The tag key.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The tag value.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Determines whether the tag is added to new instances as they are launched in the group.</p>
    pub fn propagate_at_launch(&self) -> ::std::option::Option<bool> {
        self.propagate_at_launch
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::types::Tag).
    pub fn builder() -> crate::types::builders::TagBuilder {
        crate::types::builders::TagBuilder::default()
    }
}

/// A builder for [`Tag`](crate::types::Tag).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagBuilder {
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) propagate_at_launch: ::std::option::Option<bool>,
}
impl TagBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The type of resource. The only supported value is <code>auto-scaling-group</code>.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of resource. The only supported value is <code>auto-scaling-group</code>.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource. The only supported value is <code>auto-scaling-group</code>.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The tag key.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag key.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The tag key.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The tag value.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tag value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The tag value.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>Determines whether the tag is added to new instances as they are launched in the group.</p>
    pub fn propagate_at_launch(mut self, input: bool) -> Self {
        self.propagate_at_launch = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether the tag is added to new instances as they are launched in the group.</p>
    pub fn set_propagate_at_launch(mut self, input: ::std::option::Option<bool>) -> Self {
        self.propagate_at_launch = input;
        self
    }
    /// <p>Determines whether the tag is added to new instances as they are launched in the group.</p>
    pub fn get_propagate_at_launch(&self) -> &::std::option::Option<bool> {
        &self.propagate_at_launch
    }
    /// Consumes the builder and constructs a [`Tag`](crate::types::Tag).
    pub fn build(self) -> crate::types::Tag {
        crate::types::Tag {
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            key: self.key,
            value: self.value,
            propagate_at_launch: self.propagate_at_launch,
        }
    }
}
