// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the preferences for an instance refresh.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RefreshPreferences {
    /// <p>The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.</p>
    /// <p>Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time. </p>
    pub min_healthy_percentage: ::std::option::Option<i32>,
    /// <p>A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the <code>InService</code> state.</p>
    /// <p>This property is not required for normal usage. Instead, use the <code>DefaultInstanceWarmup</code> property of the Auto Scaling group. The <code>InstanceWarmup</code> and <code>DefaultInstanceWarmup</code> properties work the same way. Only specify this property if you must override the <code>DefaultInstanceWarmup</code> property. </p>
    /// <p> If you do not specify this property, the instance warmup by default is the value of the <code>DefaultInstanceWarmup</code> property, if defined (which is recommended in all cases), or the <code>HealthCheckGracePeriod</code> property otherwise.</p>
    pub instance_warmup: ::std::option::Option<i32>,
    /// <p>(Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be <code>100</code>.</p>
    /// <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding checkpoints to an instance refresh</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub checkpoint_percentages: ::std::option::Option<::std::vec::Vec<i32>>,
    /// <p>(Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for <code>CheckpointPercentages</code>. If you specify a value for <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    pub checkpoint_delay: ::std::option::Option<i32>,
    /// <p>(Optional) Indicates whether skip matching is enabled. If enabled (<code>true</code>), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is <code>false</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html">Use an instance refresh with skip matching</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub skip_matching: ::std::option::Option<bool>,
    /// <p>(Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is <code>false</code>.</p>
    /// <p>A rollback is not supported in the following situations: </p>
    /// <ul>
    /// <li> <p>There is no desired configuration specified for the instance refresh.</p> </li>
    /// <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li>
    /// <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html">Undo changes with a rollback</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub auto_rollback: ::std::option::Option<bool>,
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. </p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Refresh
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling replaces instances that are protected from scale in.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub scale_in_protected_instances: ::std::option::Option<crate::types::ScaleInProtectedInstances>,
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in <code>Standby</code> state are found.</p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Terminate
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling terminates instances that are in <code>Standby</code>.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are in <code>Standby</code> and continues to replace instances that are in the <code>InService</code> state.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub standby_instances: ::std::option::Option<crate::types::StandbyInstances>,
    /// <p>(Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.</p>
    pub alarm_specification: ::std::option::Option<crate::types::AlarmSpecification>,
}
impl RefreshPreferences {
    /// <p>The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.</p>
    /// <p>Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time. </p>
    pub fn min_healthy_percentage(&self) -> ::std::option::Option<i32> {
        self.min_healthy_percentage
    }
    /// <p>A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the <code>InService</code> state.</p>
    /// <p>This property is not required for normal usage. Instead, use the <code>DefaultInstanceWarmup</code> property of the Auto Scaling group. The <code>InstanceWarmup</code> and <code>DefaultInstanceWarmup</code> properties work the same way. Only specify this property if you must override the <code>DefaultInstanceWarmup</code> property. </p>
    /// <p> If you do not specify this property, the instance warmup by default is the value of the <code>DefaultInstanceWarmup</code> property, if defined (which is recommended in all cases), or the <code>HealthCheckGracePeriod</code> property otherwise.</p>
    pub fn instance_warmup(&self) -> ::std::option::Option<i32> {
        self.instance_warmup
    }
    /// <p>(Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be <code>100</code>.</p>
    /// <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding checkpoints to an instance refresh</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.checkpoint_percentages.is_none()`.
    pub fn checkpoint_percentages(&self) -> &[i32] {
        self.checkpoint_percentages.as_deref().unwrap_or_default()
    }
    /// <p>(Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for <code>CheckpointPercentages</code>. If you specify a value for <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    pub fn checkpoint_delay(&self) -> ::std::option::Option<i32> {
        self.checkpoint_delay
    }
    /// <p>(Optional) Indicates whether skip matching is enabled. If enabled (<code>true</code>), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is <code>false</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html">Use an instance refresh with skip matching</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn skip_matching(&self) -> ::std::option::Option<bool> {
        self.skip_matching
    }
    /// <p>(Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is <code>false</code>.</p>
    /// <p>A rollback is not supported in the following situations: </p>
    /// <ul>
    /// <li> <p>There is no desired configuration specified for the instance refresh.</p> </li>
    /// <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li>
    /// <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html">Undo changes with a rollback</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn auto_rollback(&self) -> ::std::option::Option<bool> {
        self.auto_rollback
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. </p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Refresh
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling replaces instances that are protected from scale in.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn scale_in_protected_instances(&self) -> ::std::option::Option<&crate::types::ScaleInProtectedInstances> {
        self.scale_in_protected_instances.as_ref()
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in <code>Standby</code> state are found.</p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Terminate
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling terminates instances that are in <code>Standby</code>.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are in <code>Standby</code> and continues to replace instances that are in the <code>InService</code> state.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn standby_instances(&self) -> ::std::option::Option<&crate::types::StandbyInstances> {
        self.standby_instances.as_ref()
    }
    /// <p>(Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.</p>
    pub fn alarm_specification(&self) -> ::std::option::Option<&crate::types::AlarmSpecification> {
        self.alarm_specification.as_ref()
    }
}
impl RefreshPreferences {
    /// Creates a new builder-style object to manufacture [`RefreshPreferences`](crate::types::RefreshPreferences).
    pub fn builder() -> crate::types::builders::RefreshPreferencesBuilder {
        crate::types::builders::RefreshPreferencesBuilder::default()
    }
}

/// A builder for [`RefreshPreferences`](crate::types::RefreshPreferences).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RefreshPreferencesBuilder {
    pub(crate) min_healthy_percentage: ::std::option::Option<i32>,
    pub(crate) instance_warmup: ::std::option::Option<i32>,
    pub(crate) checkpoint_percentages: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) checkpoint_delay: ::std::option::Option<i32>,
    pub(crate) skip_matching: ::std::option::Option<bool>,
    pub(crate) auto_rollback: ::std::option::Option<bool>,
    pub(crate) scale_in_protected_instances: ::std::option::Option<crate::types::ScaleInProtectedInstances>,
    pub(crate) standby_instances: ::std::option::Option<crate::types::StandbyInstances>,
    pub(crate) alarm_specification: ::std::option::Option<crate::types::AlarmSpecification>,
}
impl RefreshPreferencesBuilder {
    /// <p>The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.</p>
    /// <p>Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time. </p>
    pub fn min_healthy_percentage(mut self, input: i32) -> Self {
        self.min_healthy_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.</p>
    /// <p>Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time. </p>
    pub fn set_min_healthy_percentage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.min_healthy_percentage = input;
        self
    }
    /// <p>The amount of capacity in the Auto Scaling group that must pass your group's health checks to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group (rounded up to the nearest integer). The default is <code>90</code>.</p>
    /// <p>Setting the minimum healthy percentage to 100 percent limits the rate of replacement to one instance at a time. In contrast, setting it to 0 percent has the effect of replacing all instances at the same time. </p>
    pub fn get_min_healthy_percentage(&self) -> &::std::option::Option<i32> {
        &self.min_healthy_percentage
    }
    /// <p>A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the <code>InService</code> state.</p>
    /// <p>This property is not required for normal usage. Instead, use the <code>DefaultInstanceWarmup</code> property of the Auto Scaling group. The <code>InstanceWarmup</code> and <code>DefaultInstanceWarmup</code> properties work the same way. Only specify this property if you must override the <code>DefaultInstanceWarmup</code> property. </p>
    /// <p> If you do not specify this property, the instance warmup by default is the value of the <code>DefaultInstanceWarmup</code> property, if defined (which is recommended in all cases), or the <code>HealthCheckGracePeriod</code> property otherwise.</p>
    pub fn instance_warmup(mut self, input: i32) -> Self {
        self.instance_warmup = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the <code>InService</code> state.</p>
    /// <p>This property is not required for normal usage. Instead, use the <code>DefaultInstanceWarmup</code> property of the Auto Scaling group. The <code>InstanceWarmup</code> and <code>DefaultInstanceWarmup</code> properties work the same way. Only specify this property if you must override the <code>DefaultInstanceWarmup</code> property. </p>
    /// <p> If you do not specify this property, the instance warmup by default is the value of the <code>DefaultInstanceWarmup</code> property, if defined (which is recommended in all cases), or the <code>HealthCheckGracePeriod</code> property otherwise.</p>
    pub fn set_instance_warmup(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_warmup = input;
        self
    }
    /// <p>A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the <code>InService</code> state.</p>
    /// <p>This property is not required for normal usage. Instead, use the <code>DefaultInstanceWarmup</code> property of the Auto Scaling group. The <code>InstanceWarmup</code> and <code>DefaultInstanceWarmup</code> properties work the same way. Only specify this property if you must override the <code>DefaultInstanceWarmup</code> property. </p>
    /// <p> If you do not specify this property, the instance warmup by default is the value of the <code>DefaultInstanceWarmup</code> property, if defined (which is recommended in all cases), or the <code>HealthCheckGracePeriod</code> property otherwise.</p>
    pub fn get_instance_warmup(&self) -> &::std::option::Option<i32> {
        &self.instance_warmup
    }
    /// Appends an item to `checkpoint_percentages`.
    ///
    /// To override the contents of this collection use [`set_checkpoint_percentages`](Self::set_checkpoint_percentages).
    ///
    /// <p>(Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be <code>100</code>.</p>
    /// <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding checkpoints to an instance refresh</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn checkpoint_percentages(mut self, input: i32) -> Self {
        let mut v = self.checkpoint_percentages.unwrap_or_default();
        v.push(input);
        self.checkpoint_percentages = ::std::option::Option::Some(v);
        self
    }
    /// <p>(Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be <code>100</code>.</p>
    /// <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding checkpoints to an instance refresh</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_checkpoint_percentages(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.checkpoint_percentages = input;
        self
    }
    /// <p>(Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be <code>100</code>.</p>
    /// <p>For usage examples, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html">Adding checkpoints to an instance refresh</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn get_checkpoint_percentages(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.checkpoint_percentages
    }
    /// <p>(Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for <code>CheckpointPercentages</code>. If you specify a value for <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    pub fn checkpoint_delay(mut self, input: i32) -> Self {
        self.checkpoint_delay = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for <code>CheckpointPercentages</code>. If you specify a value for <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    pub fn set_checkpoint_delay(mut self, input: ::std::option::Option<i32>) -> Self {
        self.checkpoint_delay = input;
        self
    }
    /// <p>(Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for <code>CheckpointPercentages</code>. If you specify a value for <code>CheckpointPercentages</code> and not for <code>CheckpointDelay</code>, the <code>CheckpointDelay</code> defaults to <code>3600</code> (1 hour). </p>
    pub fn get_checkpoint_delay(&self) -> &::std::option::Option<i32> {
        &self.checkpoint_delay
    }
    /// <p>(Optional) Indicates whether skip matching is enabled. If enabled (<code>true</code>), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is <code>false</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html">Use an instance refresh with skip matching</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn skip_matching(mut self, input: bool) -> Self {
        self.skip_matching = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Optional) Indicates whether skip matching is enabled. If enabled (<code>true</code>), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is <code>false</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html">Use an instance refresh with skip matching</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_skip_matching(mut self, input: ::std::option::Option<bool>) -> Self {
        self.skip_matching = input;
        self
    }
    /// <p>(Optional) Indicates whether skip matching is enabled. If enabled (<code>true</code>), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is <code>false</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html">Use an instance refresh with skip matching</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn get_skip_matching(&self) -> &::std::option::Option<bool> {
        &self.skip_matching
    }
    /// <p>(Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is <code>false</code>.</p>
    /// <p>A rollback is not supported in the following situations: </p>
    /// <ul>
    /// <li> <p>There is no desired configuration specified for the instance refresh.</p> </li>
    /// <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li>
    /// <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html">Undo changes with a rollback</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn auto_rollback(mut self, input: bool) -> Self {
        self.auto_rollback = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is <code>false</code>.</p>
    /// <p>A rollback is not supported in the following situations: </p>
    /// <ul>
    /// <li> <p>There is no desired configuration specified for the instance refresh.</p> </li>
    /// <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li>
    /// <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html">Undo changes with a rollback</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn set_auto_rollback(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_rollback = input;
        self
    }
    /// <p>(Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is <code>false</code>.</p>
    /// <p>A rollback is not supported in the following situations: </p>
    /// <ul>
    /// <li> <p>There is no desired configuration specified for the instance refresh.</p> </li>
    /// <li> <p>The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the <code>ImageId</code> property.</p> </li>
    /// <li> <p>The Auto Scaling group uses the launch template's <code>$Latest</code> or <code>$Default</code> version.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html">Undo changes with a rollback</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
    pub fn get_auto_rollback(&self) -> &::std::option::Option<bool> {
        &self.auto_rollback
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. </p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Refresh
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling replaces instances that are protected from scale in.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn scale_in_protected_instances(mut self, input: crate::types::ScaleInProtectedInstances) -> Self {
        self.scale_in_protected_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. </p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Refresh
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling replaces instances that are protected from scale in.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn set_scale_in_protected_instances(mut self, input: ::std::option::Option<crate::types::ScaleInProtectedInstances>) -> Self {
        self.scale_in_protected_instances = input;
        self
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. </p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Refresh
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling replaces instances that are protected from scale in.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn get_scale_in_protected_instances(&self) -> &::std::option::Option<crate::types::ScaleInProtectedInstances> {
        &self.scale_in_protected_instances
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in <code>Standby</code> state are found.</p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Terminate
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling terminates instances that are in <code>Standby</code>.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are in <code>Standby</code> and continues to replace instances that are in the <code>InService</code> state.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn standby_instances(mut self, input: crate::types::StandbyInstances) -> Self {
        self.standby_instances = ::std::option::Option::Some(input);
        self
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in <code>Standby</code> state are found.</p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Terminate
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling terminates instances that are in <code>Standby</code>.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are in <code>Standby</code> and continues to replace instances that are in the <code>InService</code> state.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn set_standby_instances(mut self, input: ::std::option::Option<crate::types::StandbyInstances>) -> Self {
        self.standby_instances = input;
        self
    }
    /// <p>Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in <code>Standby</code> state are found.</p>
    /// <p>The following lists the valid values:</p>
    /// <dl>
    /// <dt>
    /// Terminate
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling terminates instances that are in <code>Standby</code>.</p>
    /// </dd>
    /// <dt>
    /// Ignore
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling ignores instances that are in <code>Standby</code> and continues to replace instances that are in the <code>InService</code> state.</p>
    /// </dd>
    /// <dt>
    /// Wait (default)
    /// </dt>
    /// <dd>
    /// <p>Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.</p>
    /// </dd>
    /// </dl>
    pub fn get_standby_instances(&self) -> &::std::option::Option<crate::types::StandbyInstances> {
        &self.standby_instances
    }
    /// <p>(Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.</p>
    pub fn alarm_specification(mut self, input: crate::types::AlarmSpecification) -> Self {
        self.alarm_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.</p>
    pub fn set_alarm_specification(mut self, input: ::std::option::Option<crate::types::AlarmSpecification>) -> Self {
        self.alarm_specification = input;
        self
    }
    /// <p>(Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.</p>
    pub fn get_alarm_specification(&self) -> &::std::option::Option<crate::types::AlarmSpecification> {
        &self.alarm_specification
    }
    /// Consumes the builder and constructs a [`RefreshPreferences`](crate::types::RefreshPreferences).
    pub fn build(self) -> crate::types::RefreshPreferences {
        crate::types::RefreshPreferences {
            min_healthy_percentage: self.min_healthy_percentage,
            instance_warmup: self.instance_warmup,
            checkpoint_percentages: self.checkpoint_percentages,
            checkpoint_delay: self.checkpoint_delay,
            skip_matching: self.skip_matching,
            auto_rollback: self.auto_rollback,
            scale_in_protected_instances: self.scale_in_protected_instances,
            standby_instances: self.standby_instances,
            alarm_specification: self.alarm_specification,
        }
    }
}
