// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a notification.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotificationConfiguration {
    /// <p>The name of the Auto Scaling group.</p>
    #[doc(hidden)]
    pub auto_scaling_group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
    /// <p>One of the following event notification types:</p>
    /// <ul>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:TEST_NOTIFICATION</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub notification_type: std::option::Option<std::string::String>,
}
impl NotificationConfiguration {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(&self) -> std::option::Option<&str> {
        self.auto_scaling_group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
    /// <p>One of the following event notification types:</p>
    /// <ul>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:TEST_NOTIFICATION</code> </p> </li>
    /// </ul>
    pub fn notification_type(&self) -> std::option::Option<&str> {
        self.notification_type.as_deref()
    }
}
impl NotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`NotificationConfiguration`](crate::types::NotificationConfiguration).
    pub fn builder() -> crate::types::builders::NotificationConfigurationBuilder {
        crate::types::builders::NotificationConfigurationBuilder::default()
    }
}

/// A builder for [`NotificationConfiguration`](crate::types::NotificationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NotificationConfigurationBuilder {
    pub(crate) auto_scaling_group_name: std::option::Option<std::string::String>,
    pub(crate) topic_arn: std::option::Option<std::string::String>,
    pub(crate) notification_type: std::option::Option<std::string::String>,
}
impl NotificationConfigurationBuilder {
    /// <p>The name of the Auto Scaling group.</p>
    pub fn auto_scaling_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.auto_scaling_group_name = Some(input.into());
        self
    }
    /// <p>The name of the Auto Scaling group.</p>
    pub fn set_auto_scaling_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.auto_scaling_group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// <p>One of the following event notification types:</p>
    /// <ul>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:TEST_NOTIFICATION</code> </p> </li>
    /// </ul>
    pub fn notification_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_type = Some(input.into());
        self
    }
    /// <p>One of the following event notification types:</p>
    /// <ul>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_LAUNCH_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE</code> </p> </li>
    /// <li> <p> <code>autoscaling:EC2_INSTANCE_TERMINATE_ERROR</code> </p> </li>
    /// <li> <p> <code>autoscaling:TEST_NOTIFICATION</code> </p> </li>
    /// </ul>
    pub fn set_notification_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_type = input;
        self
    }
    /// Consumes the builder and constructs a [`NotificationConfiguration`](crate::types::NotificationConfiguration).
    pub fn build(self) -> crate::types::NotificationConfiguration {
        crate::types::NotificationConfiguration {
            auto_scaling_group_name: self.auto_scaling_group_name,
            topic_arn: self.topic_arn,
            notification_type: self.notification_type,
        }
    }
}
