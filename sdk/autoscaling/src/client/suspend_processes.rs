// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SuspendProcesses`](crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_scaling_group_name(impl Into<String>)`](crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder::auto_scaling_group_name) / [`set_auto_scaling_group_name(Option<String>)`](crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder::set_auto_scaling_group_name):<br>required: **true**<br><p>The name of the Auto Scaling group.</p><br>
    ///   - [`scaling_processes(impl Into<String>)`](crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder::scaling_processes) / [`set_scaling_processes(Option<Vec::<String>>)`](crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder::set_scaling_processes):<br>required: **false**<br><p>One or more of the following processes:</p>  <ul>   <li> <p> <code>Launch</code> </p> </li>   <li> <p> <code>Terminate</code> </p> </li>   <li> <p> <code>AddToLoadBalancer</code> </p> </li>   <li> <p> <code>AlarmNotification</code> </p> </li>   <li> <p> <code>AZRebalance</code> </p> </li>   <li> <p> <code>HealthCheck</code> </p> </li>   <li> <p> <code>InstanceRefresh</code> </p> </li>   <li> <p> <code>ReplaceUnhealthy</code> </p> </li>   <li> <p> <code>ScheduledActions</code> </p> </li>  </ul>  <p>If you omit this property, all processes are specified.</p><br>
    /// - On success, responds with [`SuspendProcessesOutput`](crate::operation::suspend_processes::SuspendProcessesOutput)
    /// - On failure, responds with [`SdkError<SuspendProcessesError>`](crate::operation::suspend_processes::SuspendProcessesError)
    pub fn suspend_processes(&self) -> crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder {
        crate::operation::suspend_processes::builders::SuspendProcessesFluentBuilder::new(self.handle.clone())
    }
}
