// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateAutoScalingGroup`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_scaling_group_name(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::auto_scaling_group_name) / [`set_auto_scaling_group_name(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_auto_scaling_group_name):<br>required: **true**<br><p>The name of the Auto Scaling group.</p><br>
    ///   - [`launch_configuration_name(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::launch_configuration_name) / [`set_launch_configuration_name(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_launch_configuration_name):<br>required: **false**<br><p>The name of the launch configuration. If you specify <code>LaunchConfigurationName</code> in your update request, you can't specify <code>LaunchTemplate</code> or <code>MixedInstancesPolicy</code>.</p><br>
    ///   - [`launch_template(LaunchTemplateSpecification)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::launch_template) / [`set_launch_template(Option<LaunchTemplateSpecification>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_launch_template):<br>required: **false**<br><p>The launch template and version to use to specify the updates. If you specify <code>LaunchTemplate</code> in your update request, you can't specify <code>LaunchConfigurationName</code> or <code>MixedInstancesPolicy</code>.</p><br>
    ///   - [`mixed_instances_policy(MixedInstancesPolicy)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::mixed_instances_policy) / [`set_mixed_instances_policy(Option<MixedInstancesPolicy>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_mixed_instances_policy):<br>required: **false**<br><p>The mixed instances policy. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html">Auto Scaling groups with multiple instance types and purchase options</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`min_size(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::min_size) / [`set_min_size(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_min_size):<br>required: **false**<br><p>The minimum size of the Auto Scaling group.</p><br>
    ///   - [`max_size(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::max_size) / [`set_max_size(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_max_size):<br>required: **false**<br><p>The maximum size of the Auto Scaling group.</p> <note>   <p>With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above <code>MaxSize</code> to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above <code>MaxSize</code> by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).</p>  </note><br>
    ///   - [`desired_capacity(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::desired_capacity) / [`set_desired_capacity(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_desired_capacity):<br>required: **false**<br><p>The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.</p><br>
    ///   - [`default_cooldown(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::default_cooldown) / [`set_default_cooldown(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_default_cooldown):<br>required: **false**<br><p> <i>Only needed if you use simple scaling policies.</i> </p>  <p>The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`availability_zones(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::availability_zones) / [`set_availability_zones(Option<Vec::<String>>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_availability_zones):<br>required: **false**<br><p>One or more Availability Zones for the group.</p><br>
    ///   - [`health_check_type(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::health_check_type) / [`set_health_check_type(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_health_check_type):<br>required: **false**<br><p>A comma-separated value string of one or more health check types.</p>  <p>The valid values are <code>EC2</code>, <code>ELB</code>, and <code>VPC_LATTICE</code>. <code>EC2</code> is the default health check and cannot be disabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html">Health checks for Auto Scaling instances</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>  <p>Only specify <code>EC2</code> if you must clear a value that was previously set.</p><br>
    ///   - [`health_check_grace_period(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::health_check_grace_period) / [`set_health_check_grace_period(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_health_check_grace_period):<br>required: **false**<br><p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the <code>InService</code> state. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html">Set the health check grace period for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`placement_group(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::placement_group) / [`set_placement_group(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_placement_group):<br>required: **false**<br><p>The name of an existing placement group into which to launch your instances. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html">Placement groups</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <note>   <p>A <i>cluster</i> placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group. </p>  </note><br>
    ///   - [`vpc_zone_identifier(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::vpc_zone_identifier) / [`set_vpc_zone_identifier(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_vpc_zone_identifier):<br>required: **false**<br><p>A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify <code>VPCZoneIdentifier</code> with <code>AvailabilityZones</code>, the subnets that you specify must reside in those Availability Zones.</p><br>
    ///   - [`termination_policies(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::termination_policies) / [`set_termination_policies(Option<Vec::<String>>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_termination_policies):<br>required: **false**<br><p>A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html">Work with Amazon EC2 Auto Scaling termination policies</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>  <p>Valid values: <code>Default</code> | <code>AllocationStrategy</code> | <code>ClosestToNextInstanceHour</code> | <code>NewestInstance</code> | <code>OldestInstance</code> | <code>OldestLaunchConfiguration</code> | <code>OldestLaunchTemplate</code> | <code>arn:aws:lambda:region:account-id:function:my-function:my-alias</code> </p><br>
    ///   - [`new_instances_protected_from_scale_in(bool)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::new_instances_protected_from_scale_in) / [`set_new_instances_protected_from_scale_in(Option<bool>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_new_instances_protected_from_scale_in):<br>required: **false**<br><p>Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html">Using instance scale-in protection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`service_linked_role_arn(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::service_linked_role_arn) / [`set_service_linked_role_arn(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_service_linked_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html">Service-linked roles</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`max_instance_lifetime(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::max_instance_lifetime) / [`set_max_instance_lifetime(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_max_instance_lifetime):<br>required: **false**<br><p>The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html">Replacing Auto Scaling instances based on maximum instance lifetime</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`capacity_rebalance(bool)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::capacity_rebalance) / [`set_capacity_rebalance(Option<bool>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_capacity_rebalance):<br>required: **false**<br><p>Enables or disables Capacity Rebalancing. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html">Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p><br>
    ///   - [`context(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::context) / [`set_context(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_context):<br>required: **false**<br><p>Reserved.</p><br>
    ///   - [`desired_capacity_type(impl Into<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::desired_capacity_type) / [`set_desired_capacity_type(Option<String>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_desired_capacity_type):<br>required: **false**<br><p>The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports <code>DesiredCapacityType</code> for attribute-based instance type selection only. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html">Creating an Auto Scaling group using attribute-based instance type selection</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>  <p>By default, Amazon EC2 Auto Scaling specifies <code>units</code>, which translates into number of instances.</p>  <p>Valid values: <code>units</code> | <code>vcpu</code> | <code>memory-mib</code> </p><br>
    ///   - [`default_instance_warmup(i32)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::default_instance_warmup) / [`set_default_instance_warmup(Option<i32>)`](crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::set_default_instance_warmup):<br>required: **false**<br><p>The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the <code>InService</code> state. </p>  <p>During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html">Set the default instance warmup for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <important>   <p>To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, <i>even if it is set to 0 seconds</i>. To remove a value that you previously set, include the property but specify <code>-1</code> for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of <code>0</code> or other nominal value.</p>  </important><br>
    /// - On success, responds with [`UpdateAutoScalingGroupOutput`](crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupOutput)
    /// - On failure, responds with [`SdkError<UpdateAutoScalingGroupError>`](crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupError)
    pub fn update_auto_scaling_group(&self) -> crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder {
        crate::operation::update_auto_scaling_group::builders::UpdateAutoScalingGroupFluentBuilder::new(self.handle.clone())
    }
}
