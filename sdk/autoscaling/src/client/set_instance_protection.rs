// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SetInstanceProtection`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`instance_ids(Vec<String>)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::instance_ids) / [`set_instance_ids(Option<Vec<String>>)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::set_instance_ids): <p>One or more instance IDs. You can specify up to 50 instances.</p>
    ///   - [`auto_scaling_group_name(impl Into<String>)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::auto_scaling_group_name) / [`set_auto_scaling_group_name(Option<String>)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::set_auto_scaling_group_name): <p>The name of the Auto Scaling group.</p>
    ///   - [`protected_from_scale_in(bool)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::protected_from_scale_in) / [`set_protected_from_scale_in(Option<bool>)`](crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::set_protected_from_scale_in): <p>Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.</p>
    /// - On success, responds with [`SetInstanceProtectionOutput`](crate::operation::set_instance_protection::SetInstanceProtectionOutput)
    /// - On failure, responds with [`SdkError<SetInstanceProtectionError>`](crate::operation::set_instance_protection::SetInstanceProtectionError)
    pub fn set_instance_protection(
        &self,
    ) -> crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder
    {
        crate::operation::set_instance_protection::builders::SetInstanceProtectionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
