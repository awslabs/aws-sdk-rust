// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_predictive_scaling_forecast_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput,
    crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceContention" => crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::ResourceContentionFault({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceContentionFaultBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_resource_contention_fault::de_resource_contention_fault_xml_err(response.body().as_ref(), output).map_err(crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_predictive_scaling_forecast_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastOutput,
    crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_predictive_scaling_forecast::de_get_predictive_scaling_forecast(response.body().as_ref(), output).map_err(crate::operation::get_predictive_scaling_forecast::GetPredictiveScalingForecastError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_predictive_scaling_forecast(inp: &[u8], mut builder: crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder) -> Result<crate::operation::get_predictive_scaling_forecast::builders::GetPredictiveScalingForecastOutputBuilder, aws_smithy_xml::decode::XmlDecodeError>{
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("GetPredictiveScalingForecastResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected GetPredictiveScalingForecastResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetPredictiveScalingForecastResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected GetPredictiveScalingForecastResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("LoadForecast") /* LoadForecast com.amazonaws.autoscaling.synthetic#GetPredictiveScalingForecastOutput$LoadForecast */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_load_forecasts::de_load_forecasts(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_load_forecast(var_1);
            }
            ,
            s if s.matches("CapacityForecast") /* CapacityForecast com.amazonaws.autoscaling.synthetic#GetPredictiveScalingForecastOutput$CapacityForecast */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_capacity_forecast::de_capacity_forecast(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_capacity_forecast(var_2);
            }
            ,
            s if s.matches("UpdateTime") /* UpdateTime com.amazonaws.autoscaling.synthetic#GetPredictiveScalingForecastOutput$UpdateTime */ =>  {
                let var_3 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.autoscaling#TimestampType`)"))
                        ?
                    )
                ;
                builder = builder.set_update_time(var_3);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected GetPredictiveScalingForecastResult tag",
        ));
    };
    Ok(builder)
}
