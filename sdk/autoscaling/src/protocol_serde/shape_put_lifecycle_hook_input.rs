// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_lifecycle_hook_input_input(
    input: &crate::operation::put_lifecycle_hook::PutLifecycleHookInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "PutLifecycleHook", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("LifecycleHookName");
    if let Some(var_2) = &input.lifecycle_hook_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AutoScalingGroupName");
    if let Some(var_4) = &input.auto_scaling_group_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("LifecycleTransition");
    if let Some(var_6) = &input.lifecycle_transition {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RoleARN");
    if let Some(var_8) = &input.role_arn {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("NotificationTargetARN");
    if let Some(var_10) = &input.notification_target_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("NotificationMetadata");
    if let Some(var_12) = &input.notification_metadata {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("HeartbeatTimeout");
    if let Some(var_14) = &input.heartbeat_timeout {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DefaultResult");
    if let Some(var_16) = &input.default_result {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
