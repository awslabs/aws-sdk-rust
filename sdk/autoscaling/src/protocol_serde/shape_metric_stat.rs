// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_metric_stat(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::MetricStat,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Metric");
    if let Some(var_2) = &input.metric {
        crate::protocol_serde::shape_metric::ser_metric(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Stat");
    if let Some(var_4) = &input.stat {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Unit");
    if let Some(var_6) = &input.unit {
        scope_5.string(var_6);
    }
    Ok(())
}

pub fn de_metric_stat(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::MetricStat, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MetricStat::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Metric") /* Metric com.amazonaws.autoscaling#MetricStat$Metric */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_metric::de_metric(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metric(var_7);
            }
            ,
            s if s.matches("Stat") /* Stat com.amazonaws.autoscaling#MetricStat$Stat */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stat(var_8);
            }
            ,
            s if s.matches("Unit") /* Unit com.amazonaws.autoscaling#MetricStat$Unit */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_unit(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
