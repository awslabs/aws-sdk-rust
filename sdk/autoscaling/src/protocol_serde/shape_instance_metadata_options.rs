// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_instance_metadata_options(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::InstanceMetadataOptions,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("HttpTokens");
    if let Some(var_2) = &input.http_tokens {
        scope_1.string(var_2.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_4) = &input.http_put_response_hop_limit {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("HttpEndpoint");
    if let Some(var_6) = &input.http_endpoint {
        scope_5.string(var_6.as_str());
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_instance_metadata_options(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceMetadataOptions, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceMetadataOptions::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("HttpTokens") /* HttpTokens com.amazonaws.autoscaling#InstanceMetadataOptions$HttpTokens */ =>  {
                let var_7 =
                    Some(
                        Result::<crate::types::InstanceMetadataHttpTokensState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataHttpTokensState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_tokens(var_7);
            }
            ,
            s if s.matches("HttpPutResponseHopLimit") /* HttpPutResponseHopLimit com.amazonaws.autoscaling#InstanceMetadataOptions$HttpPutResponseHopLimit */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#InstanceMetadataHttpPutResponseHopLimit`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_http_put_response_hop_limit(var_8);
            }
            ,
            s if s.matches("HttpEndpoint") /* HttpEndpoint com.amazonaws.autoscaling#InstanceMetadataOptions$HttpEndpoint */ =>  {
                let var_9 =
                    Some(
                        Result::<crate::types::InstanceMetadataEndpointState, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceMetadataEndpointState::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_http_endpoint(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
