// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_instance_refresh(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InstanceRefresh, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InstanceRefresh::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("InstanceRefreshId") /* InstanceRefreshId com.amazonaws.autoscaling#InstanceRefresh$InstanceRefreshId */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_instance_refresh_id(var_1);
            }
            ,
            s if s.matches("AutoScalingGroupName") /* AutoScalingGroupName com.amazonaws.autoscaling#InstanceRefresh$AutoScalingGroupName */ =>  {
                let var_2 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_auto_scaling_group_name(var_2);
            }
            ,
            s if s.matches("Status") /* Status com.amazonaws.autoscaling#InstanceRefresh$Status */ =>  {
                let var_3 =
                    Some(
                        Result::<crate::types::InstanceRefreshStatus, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::InstanceRefreshStatus::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_status(var_3);
            }
            ,
            s if s.matches("StatusReason") /* StatusReason com.amazonaws.autoscaling#InstanceRefresh$StatusReason */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_status_reason(var_4);
            }
            ,
            s if s.matches("StartTime") /* StartTime com.amazonaws.autoscaling#InstanceRefresh$StartTime */ =>  {
                let var_5 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.autoscaling#TimestampType`)"))
                        ?
                    )
                ;
                builder = builder.set_start_time(var_5);
            }
            ,
            s if s.matches("EndTime") /* EndTime com.amazonaws.autoscaling#InstanceRefresh$EndTime */ =>  {
                let var_6 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.autoscaling#TimestampType`)"))
                        ?
                    )
                ;
                builder = builder.set_end_time(var_6);
            }
            ,
            s if s.matches("PercentageComplete") /* PercentageComplete com.amazonaws.autoscaling#InstanceRefresh$PercentageComplete */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#IntPercent`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_percentage_complete(var_7);
            }
            ,
            s if s.matches("InstancesToUpdate") /* InstancesToUpdate com.amazonaws.autoscaling#InstanceRefresh$InstancesToUpdate */ =>  {
                let var_8 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#InstancesToUpdate`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instances_to_update(var_8);
            }
            ,
            s if s.matches("ProgressDetails") /* ProgressDetails com.amazonaws.autoscaling#InstanceRefresh$ProgressDetails */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_instance_refresh_progress_details::de_instance_refresh_progress_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_progress_details(var_9);
            }
            ,
            s if s.matches("Preferences") /* Preferences com.amazonaws.autoscaling#InstanceRefresh$Preferences */ =>  {
                let var_10 =
                    Some(
                        crate::protocol_serde::shape_refresh_preferences::de_refresh_preferences(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_preferences(var_10);
            }
            ,
            s if s.matches("DesiredConfiguration") /* DesiredConfiguration com.amazonaws.autoscaling#InstanceRefresh$DesiredConfiguration */ =>  {
                let var_11 =
                    Some(
                        crate::protocol_serde::shape_desired_configuration::de_desired_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_desired_configuration(var_11);
            }
            ,
            s if s.matches("RollbackDetails") /* RollbackDetails com.amazonaws.autoscaling#InstanceRefresh$RollbackDetails */ =>  {
                let var_12 =
                    Some(
                        crate::protocol_serde::shape_rollback_details::de_rollback_details(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_rollback_details(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
