// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_launch_configuration_input_input(
    input: &crate::operation::create_launch_configuration::CreateLaunchConfigurationInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateLaunchConfiguration", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("LaunchConfigurationName");
    if let Some(var_2) = &input.launch_configuration_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ImageId");
    if let Some(var_4) = &input.image_id {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("KeyName");
    if let Some(var_6) = &input.key_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("SecurityGroups");
    if let Some(var_8) = &input.security_groups {
        let mut list_10 = scope_7.start_list(false, None);
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            entry_11.string(item_9);
        }
        list_10.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("ClassicLinkVPCId");
    if let Some(var_13) = &input.classic_link_vpc_id {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ClassicLinkVPCSecurityGroups");
    if let Some(var_15) = &input.classic_link_vpc_security_groups {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("UserData");
    if let Some(var_20) = &input.user_data {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceId");
    if let Some(var_22) = &input.instance_id {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("InstanceType");
    if let Some(var_24) = &input.instance_type {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("KernelId");
    if let Some(var_26) = &input.kernel_id {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("RamdiskId");
    if let Some(var_28) = &input.ramdisk_id {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("BlockDeviceMappings");
    if let Some(var_30) = &input.block_device_mappings {
        let mut list_32 = scope_29.start_list(false, None);
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            crate::protocol_serde::shape_block_device_mapping::ser_block_device_mapping(entry_33, item_31)?;
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("InstanceMonitoring");
    if let Some(var_35) = &input.instance_monitoring {
        crate::protocol_serde::shape_instance_monitoring::ser_instance_monitoring(scope_34, var_35)?;
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("SpotPrice");
    if let Some(var_37) = &input.spot_price {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("IamInstanceProfile");
    if let Some(var_39) = &input.iam_instance_profile {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("EbsOptimized");
    if let Some(var_41) = &input.ebs_optimized {
        scope_40.boolean(*var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_43) = &input.associate_public_ip_address {
        scope_42.boolean(*var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("PlacementTenancy");
    if let Some(var_45) = &input.placement_tenancy {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("MetadataOptions");
    if let Some(var_47) = &input.metadata_options {
        crate::protocol_serde::shape_instance_metadata_options::ser_instance_metadata_options(scope_46, var_47)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
