// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_auto_scaling_group_input_input(
    input: &crate::operation::update_auto_scaling_group::UpdateAutoScalingGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AutoScalingGroupName");
    if let Some(var_2) = &input.auto_scaling_group_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("LaunchConfigurationName");
    if let Some(var_4) = &input.launch_configuration_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("LaunchTemplate");
    if let Some(var_6) = &input.launch_template {
        crate::protocol_serde::shape_launch_template_specification::ser_launch_template_specification(scope_5, var_6)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_8) = &input.mixed_instances_policy {
        crate::protocol_serde::shape_mixed_instances_policy::ser_mixed_instances_policy(
            scope_7, var_8,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MinSize");
    if let Some(var_10) = &input.min_size {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MaxSize");
    if let Some(var_12) = &input.max_size {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DesiredCapacity");
    if let Some(var_14) = &input.desired_capacity {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DefaultCooldown");
    if let Some(var_16) = &input.default_cooldown {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("AvailabilityZones");
    if let Some(var_18) = &input.availability_zones {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("HealthCheckType");
    if let Some(var_23) = &input.health_check_type {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_25) = &input.health_check_grace_period {
        scope_24.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("PlacementGroup");
    if let Some(var_27) = &input.placement_group {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_29) = &input.vpc_zone_identifier {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("TerminationPolicies");
    if let Some(var_31) = &input.termination_policies {
        let mut list_33 = scope_30.start_list(false, None);
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            entry_34.string(item_32);
        }
        list_33.finish();
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_36) = &input.new_instances_protected_from_scale_in {
        scope_35.boolean(*var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_38) = &input.service_linked_role_arn {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_40) = &input.max_instance_lifetime {
        scope_39.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("CapacityRebalance");
    if let Some(var_42) = &input.capacity_rebalance {
        scope_41.boolean(*var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("Context");
    if let Some(var_44) = &input.context {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("DesiredCapacityType");
    if let Some(var_46) = &input.desired_capacity_type {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("DefaultInstanceWarmup");
    if let Some(var_48) = &input.default_instance_warmup {
        scope_47.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
