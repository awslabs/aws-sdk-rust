// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_predictive_scaling_configuration(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::PredictiveScalingConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("MetricSpecifications");
    if let Some(var_2) = &input.metric_specifications {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            crate::protocol_serde::shape_predictive_scaling_metric_specification::ser_predictive_scaling_metric_specification(entry_5, item_3)?;
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("Mode");
    if let Some(var_7) = &input.mode {
        scope_6.string(var_7.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("SchedulingBufferTime");
    if let Some(var_9) = &input.scheduling_buffer_time {
        scope_8.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("MaxCapacityBreachBehavior");
    if let Some(var_11) = &input.max_capacity_breach_behavior {
        scope_10.string(var_11.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("MaxCapacityBuffer");
    if let Some(var_13) = &input.max_capacity_buffer {
        scope_12.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_predictive_scaling_configuration(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PredictiveScalingConfiguration, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PredictiveScalingConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MetricSpecifications") /* MetricSpecifications com.amazonaws.autoscaling#PredictiveScalingConfiguration$MetricSpecifications */ =>  {
                let var_14 =
                    Some(
                        crate::protocol_serde::shape_predictive_scaling_metric_specifications::de_predictive_scaling_metric_specifications(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metric_specifications(var_14);
            }
            ,
            s if s.matches("Mode") /* Mode com.amazonaws.autoscaling#PredictiveScalingConfiguration$Mode */ =>  {
                let var_15 =
                    Some(
                        Result::<crate::types::PredictiveScalingMode, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PredictiveScalingMode::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_mode(var_15);
            }
            ,
            s if s.matches("SchedulingBufferTime") /* SchedulingBufferTime com.amazonaws.autoscaling#PredictiveScalingConfiguration$SchedulingBufferTime */ =>  {
                let var_16 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#PredictiveScalingSchedulingBufferTime`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_scheduling_buffer_time(var_16);
            }
            ,
            s if s.matches("MaxCapacityBreachBehavior") /* MaxCapacityBreachBehavior com.amazonaws.autoscaling#PredictiveScalingConfiguration$MaxCapacityBreachBehavior */ =>  {
                let var_17 =
                    Some(
                        Result::<crate::types::PredictiveScalingMaxCapacityBreachBehavior, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::PredictiveScalingMaxCapacityBreachBehavior::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_max_capacity_breach_behavior(var_17);
            }
            ,
            s if s.matches("MaxCapacityBuffer") /* MaxCapacityBuffer com.amazonaws.autoscaling#PredictiveScalingConfiguration$MaxCapacityBuffer */ =>  {
                let var_18 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#PredictiveScalingMaxCapacityBuffer`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_max_capacity_buffer(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::predictive_scaling_configuration_correct_errors(builder).build())
}
