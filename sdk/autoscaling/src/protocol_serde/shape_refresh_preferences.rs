// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_refresh_preferences(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::RefreshPreferences,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("MinHealthyPercentage");
    if let Some(var_2) = &input.min_healthy_percentage {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("InstanceWarmup");
    if let Some(var_4) = &input.instance_warmup {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("CheckpointPercentages");
    if let Some(var_6) = &input.checkpoint_percentages {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_7).into()),
            );
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("CheckpointDelay");
    if let Some(var_11) = &input.checkpoint_delay {
        scope_10.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("SkipMatching");
    if let Some(var_13) = &input.skip_matching {
        scope_12.boolean(*var_13);
    }
    Ok(())
}

pub fn de_refresh_preferences(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::RefreshPreferences, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::RefreshPreferences::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("MinHealthyPercentage") /* MinHealthyPercentage com.amazonaws.autoscaling#RefreshPreferences$MinHealthyPercentage */ =>  {
                let var_14 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#IntPercent`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_min_healthy_percentage(var_14);
            }
            ,
            s if s.matches("InstanceWarmup") /* InstanceWarmup com.amazonaws.autoscaling#RefreshPreferences$InstanceWarmup */ =>  {
                let var_15 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#RefreshInstanceWarmup`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_instance_warmup(var_15);
            }
            ,
            s if s.matches("CheckpointPercentages") /* CheckpointPercentages com.amazonaws.autoscaling#RefreshPreferences$CheckpointPercentages */ =>  {
                let var_16 =
                    Some(
                        crate::protocol_serde::shape_checkpoint_percentages::de_checkpoint_percentages(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_checkpoint_percentages(var_16);
            }
            ,
            s if s.matches("CheckpointDelay") /* CheckpointDelay com.amazonaws.autoscaling#RefreshPreferences$CheckpointDelay */ =>  {
                let var_17 =
                    Some(
                         {
                            <i32 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.autoscaling#CheckpointDelay`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_checkpoint_delay(var_17);
            }
            ,
            s if s.matches("SkipMatching") /* SkipMatching com.amazonaws.autoscaling#RefreshPreferences$SkipMatching */ =>  {
                let var_18 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.autoscaling#SkipMatching`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_skip_matching(var_18);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
