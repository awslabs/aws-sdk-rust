// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_scaling_policy_input_input(
    input: &crate::operation::put_scaling_policy::PutScalingPolicyInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "PutScalingPolicy", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AutoScalingGroupName");
    if let Some(var_2) = &input.auto_scaling_group_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("PolicyName");
    if let Some(var_4) = &input.policy_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("PolicyType");
    if let Some(var_6) = &input.policy_type {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("AdjustmentType");
    if let Some(var_8) = &input.adjustment_type {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MinAdjustmentStep");
    if let Some(var_10) = &input.min_adjustment_step {
        scope_9.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MinAdjustmentMagnitude");
    if let Some(var_12) = &input.min_adjustment_magnitude {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("ScalingAdjustment");
    if let Some(var_14) = &input.scaling_adjustment {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Cooldown");
    if let Some(var_16) = &input.cooldown {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("MetricAggregationType");
    if let Some(var_18) = &input.metric_aggregation_type {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("StepAdjustments");
    if let Some(var_20) = &input.step_adjustments {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            crate::protocol_serde::shape_step_adjustment::ser_step_adjustment(entry_23, item_21)?;
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("EstimatedInstanceWarmup");
    if let Some(var_25) = &input.estimated_instance_warmup {
        scope_24.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("TargetTrackingConfiguration");
    if let Some(var_27) = &input.target_tracking_configuration {
        crate::protocol_serde::shape_target_tracking_configuration::ser_target_tracking_configuration(scope_26, var_27)?;
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("Enabled");
    if let Some(var_29) = &input.enabled {
        scope_28.boolean(*var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("PredictiveScalingConfiguration");
    if let Some(var_31) = &input.predictive_scaling_configuration {
        crate::protocol_serde::shape_predictive_scaling_configuration::ser_predictive_scaling_configuration(scope_30, var_31)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
