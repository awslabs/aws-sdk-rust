// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_auto_scaling_group_input_input(
    input: &crate::operation::create_auto_scaling_group::CreateAutoScalingGroupInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "CreateAutoScalingGroup", "2011-01-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AutoScalingGroupName");
    if let Some(var_2) = &input.auto_scaling_group_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("LaunchConfigurationName");
    if let Some(var_4) = &input.launch_configuration_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("LaunchTemplate");
    if let Some(var_6) = &input.launch_template {
        crate::protocol_serde::shape_launch_template_specification::ser_launch_template_specification(scope_5, var_6)?;
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("MixedInstancesPolicy");
    if let Some(var_8) = &input.mixed_instances_policy {
        crate::protocol_serde::shape_mixed_instances_policy::ser_mixed_instances_policy(scope_7, var_8)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("InstanceId");
    if let Some(var_10) = &input.instance_id {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("MinSize");
    if let Some(var_12) = &input.min_size {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("MaxSize");
    if let Some(var_14) = &input.max_size {
        scope_13.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("DesiredCapacity");
    if let Some(var_16) = &input.desired_capacity {
        scope_15.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("DefaultCooldown");
    if let Some(var_18) = &input.default_cooldown {
        scope_17.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("AvailabilityZones");
    if let Some(var_20) = &input.availability_zones {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("LoadBalancerNames");
    if let Some(var_25) = &input.load_balancer_names {
        let mut list_27 = scope_24.start_list(false, None);
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            entry_28.string(item_26);
        }
        list_27.finish();
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("TargetGroupARNs");
    if let Some(var_30) = &input.target_group_arns {
        let mut list_32 = scope_29.start_list(false, None);
        for item_31 in var_30 {
            #[allow(unused_mut)]
            let mut entry_33 = list_32.entry();
            entry_33.string(item_31);
        }
        list_32.finish();
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("HealthCheckType");
    if let Some(var_35) = &input.health_check_type {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("HealthCheckGracePeriod");
    if let Some(var_37) = &input.health_check_grace_period {
        scope_36.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("PlacementGroup");
    if let Some(var_39) = &input.placement_group {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("VPCZoneIdentifier");
    if let Some(var_41) = &input.vpc_zone_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("TerminationPolicies");
    if let Some(var_43) = &input.termination_policies {
        let mut list_45 = scope_42.start_list(false, None);
        for item_44 in var_43 {
            #[allow(unused_mut)]
            let mut entry_46 = list_45.entry();
            entry_46.string(item_44);
        }
        list_45.finish();
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("NewInstancesProtectedFromScaleIn");
    if let Some(var_48) = &input.new_instances_protected_from_scale_in {
        scope_47.boolean(*var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("CapacityRebalance");
    if let Some(var_50) = &input.capacity_rebalance {
        scope_49.boolean(*var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("LifecycleHookSpecificationList");
    if let Some(var_52) = &input.lifecycle_hook_specification_list {
        let mut list_54 = scope_51.start_list(false, None);
        for item_53 in var_52 {
            #[allow(unused_mut)]
            let mut entry_55 = list_54.entry();
            crate::protocol_serde::shape_lifecycle_hook_specification::ser_lifecycle_hook_specification(entry_55, item_53)?;
        }
        list_54.finish();
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, None);
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ServiceLinkedRoleARN");
    if let Some(var_62) = &input.service_linked_role_arn {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("MaxInstanceLifetime");
    if let Some(var_64) = &input.max_instance_lifetime {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("Context");
    if let Some(var_66) = &input.context {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("DesiredCapacityType");
    if let Some(var_68) = &input.desired_capacity_type {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("DefaultInstanceWarmup");
    if let Some(var_70) = &input.default_instance_warmup {
        scope_69.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_70).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("TrafficSources");
    if let Some(var_72) = &input.traffic_sources {
        let mut list_74 = scope_71.start_list(false, None);
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            crate::protocol_serde::shape_traffic_source_identifier::ser_traffic_source_identifier(entry_75, item_73)?;
        }
        list_74.finish();
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
