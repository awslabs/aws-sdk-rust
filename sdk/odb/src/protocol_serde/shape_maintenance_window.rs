// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_maintenance_window(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MaintenanceWindow,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.custom_action_timeout_in_mins {
        object.key("customActionTimeoutInMins").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.days_of_week {
        let mut array_3 = object.key("daysOfWeek").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_day_of_week::ser_day_of_week(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.hours_of_day {
        let mut array_7 = object.key("hoursOfDay").start_array();
        for item_8 in var_6 {
            {
                array_7.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_8).into()),
                );
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.is_custom_action_timeout_enabled {
        object.key("isCustomActionTimeoutEnabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.lead_time_in_weeks {
        object.key("leadTimeInWeeks").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.months {
        let mut array_12 = object.key("months").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_month::ser_month(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.patching_mode {
        object.key("patchingMode").string(var_15.as_str());
    }
    if let Some(var_16) = &input.preference {
        object.key("preference").string(var_16.as_str());
    }
    if let Some(var_17) = &input.skip_ru {
        object.key("skipRu").boolean(*var_17);
    }
    if let Some(var_18) = &input.weeks_of_month {
        let mut array_19 = object.key("weeksOfMonth").start_array();
        for item_20 in var_18 {
            {
                array_19.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_20).into()),
                );
            }
        }
        array_19.finish();
    }
    Ok(())
}

pub(crate) fn de_maintenance_window<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::MaintenanceWindow>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MaintenanceWindowBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "customActionTimeoutInMins" => {
                            builder = builder.set_custom_action_timeout_in_mins(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "daysOfWeek" => {
                            builder = builder.set_days_of_week(crate::protocol_serde::shape_days_of_week::de_days_of_week(tokens)?);
                        }
                        "hoursOfDay" => {
                            builder = builder.set_hours_of_day(crate::protocol_serde::shape_hours_of_day::de_hours_of_day(tokens)?);
                        }
                        "isCustomActionTimeoutEnabled" => {
                            builder = builder
                                .set_is_custom_action_timeout_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "leadTimeInWeeks" => {
                            builder = builder.set_lead_time_in_weeks(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "months" => {
                            builder = builder.set_months(crate::protocol_serde::shape_months::de_months(tokens)?);
                        }
                        "patchingMode" => {
                            builder = builder.set_patching_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PatchingModeType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "preference" => {
                            builder = builder.set_preference(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PreferenceType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "skipRu" => {
                            builder = builder.set_skip_ru(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "weeksOfMonth" => {
                            builder = builder.set_weeks_of_month(crate::protocol_serde::shape_weeks_of_month::de_weeks_of_month(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
