// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cloud_autonomous_vm_cluster_output_output_correct_errors(
    mut builder: crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterOutputBuilder,
) -> crate::operation::create_cloud_autonomous_vm_cluster::builders::CreateCloudAutonomousVmClusterOutputBuilder {
    if builder.cloud_autonomous_vm_cluster_id.is_none() {
        builder.cloud_autonomous_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cloud_exadata_infrastructure_output_output_correct_errors(
    mut builder: crate::operation::create_cloud_exadata_infrastructure::builders::CreateCloudExadataInfrastructureOutputBuilder,
) -> crate::operation::create_cloud_exadata_infrastructure::builders::CreateCloudExadataInfrastructureOutputBuilder {
    if builder.cloud_exadata_infrastructure_id.is_none() {
        builder.cloud_exadata_infrastructure_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_cloud_vm_cluster_output_output_correct_errors(
    mut builder: crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterOutputBuilder,
) -> crate::operation::create_cloud_vm_cluster::builders::CreateCloudVmClusterOutputBuilder {
    if builder.cloud_vm_cluster_id.is_none() {
        builder.cloud_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_odb_network_output_output_correct_errors(
    mut builder: crate::operation::create_odb_network::builders::CreateOdbNetworkOutputBuilder,
) -> crate::operation::create_odb_network::builders::CreateOdbNetworkOutputBuilder {
    if builder.odb_network_id.is_none() {
        builder.odb_network_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_odb_peering_connection_output_output_correct_errors(
    mut builder: crate::operation::create_odb_peering_connection::builders::CreateOdbPeeringConnectionOutputBuilder,
) -> crate::operation::create_odb_peering_connection::builders::CreateOdbPeeringConnectionOutputBuilder {
    if builder.odb_peering_connection_id.is_none() {
        builder.odb_peering_connection_id = Some(Default::default())
    }
    builder
}

pub(crate) fn list_autonomous_virtual_machines_output_output_correct_errors(
    mut builder: crate::operation::list_autonomous_virtual_machines::builders::ListAutonomousVirtualMachinesOutputBuilder,
) -> crate::operation::list_autonomous_virtual_machines::builders::ListAutonomousVirtualMachinesOutputBuilder {
    if builder.autonomous_virtual_machines.is_none() {
        builder.autonomous_virtual_machines = Some(Default::default())
    }
    builder
}

pub(crate) fn list_cloud_autonomous_vm_clusters_output_output_correct_errors(
    mut builder: crate::operation::list_cloud_autonomous_vm_clusters::builders::ListCloudAutonomousVmClustersOutputBuilder,
) -> crate::operation::list_cloud_autonomous_vm_clusters::builders::ListCloudAutonomousVmClustersOutputBuilder {
    if builder.cloud_autonomous_vm_clusters.is_none() {
        builder.cloud_autonomous_vm_clusters = Some(Default::default())
    }
    builder
}

pub(crate) fn list_cloud_exadata_infrastructures_output_output_correct_errors(
    mut builder: crate::operation::list_cloud_exadata_infrastructures::builders::ListCloudExadataInfrastructuresOutputBuilder,
) -> crate::operation::list_cloud_exadata_infrastructures::builders::ListCloudExadataInfrastructuresOutputBuilder {
    if builder.cloud_exadata_infrastructures.is_none() {
        builder.cloud_exadata_infrastructures = Some(Default::default())
    }
    builder
}

pub(crate) fn list_cloud_vm_clusters_output_output_correct_errors(
    mut builder: crate::operation::list_cloud_vm_clusters::builders::ListCloudVmClustersOutputBuilder,
) -> crate::operation::list_cloud_vm_clusters::builders::ListCloudVmClustersOutputBuilder {
    if builder.cloud_vm_clusters.is_none() {
        builder.cloud_vm_clusters = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_nodes_output_output_correct_errors(
    mut builder: crate::operation::list_db_nodes::builders::ListDbNodesOutputBuilder,
) -> crate::operation::list_db_nodes::builders::ListDbNodesOutputBuilder {
    if builder.db_nodes.is_none() {
        builder.db_nodes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_servers_output_output_correct_errors(
    mut builder: crate::operation::list_db_servers::builders::ListDbServersOutputBuilder,
) -> crate::operation::list_db_servers::builders::ListDbServersOutputBuilder {
    if builder.db_servers.is_none() {
        builder.db_servers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_db_system_shapes_output_output_correct_errors(
    mut builder: crate::operation::list_db_system_shapes::builders::ListDbSystemShapesOutputBuilder,
) -> crate::operation::list_db_system_shapes::builders::ListDbSystemShapesOutputBuilder {
    if builder.db_system_shapes.is_none() {
        builder.db_system_shapes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_gi_versions_output_output_correct_errors(
    mut builder: crate::operation::list_gi_versions::builders::ListGiVersionsOutputBuilder,
) -> crate::operation::list_gi_versions::builders::ListGiVersionsOutputBuilder {
    if builder.gi_versions.is_none() {
        builder.gi_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_odb_networks_output_output_correct_errors(
    mut builder: crate::operation::list_odb_networks::builders::ListOdbNetworksOutputBuilder,
) -> crate::operation::list_odb_networks::builders::ListOdbNetworksOutputBuilder {
    if builder.odb_networks.is_none() {
        builder.odb_networks = Some(Default::default())
    }
    builder
}

pub(crate) fn list_odb_peering_connections_output_output_correct_errors(
    mut builder: crate::operation::list_odb_peering_connections::builders::ListOdbPeeringConnectionsOutputBuilder,
) -> crate::operation::list_odb_peering_connections::builders::ListOdbPeeringConnectionsOutputBuilder {
    if builder.odb_peering_connections.is_none() {
        builder.odb_peering_connections = Some(Default::default())
    }
    builder
}

pub(crate) fn list_system_versions_output_output_correct_errors(
    mut builder: crate::operation::list_system_versions::builders::ListSystemVersionsOutputBuilder,
) -> crate::operation::list_system_versions::builders::ListSystemVersionsOutputBuilder {
    if builder.system_versions.is_none() {
        builder.system_versions = Some(Default::default())
    }
    builder
}

pub(crate) fn reboot_db_node_output_output_correct_errors(
    mut builder: crate::operation::reboot_db_node::builders::RebootDbNodeOutputBuilder,
) -> crate::operation::reboot_db_node::builders::RebootDbNodeOutputBuilder {
    if builder.db_node_id.is_none() {
        builder.db_node_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_db_node_output_output_correct_errors(
    mut builder: crate::operation::start_db_node::builders::StartDbNodeOutputBuilder,
) -> crate::operation::start_db_node::builders::StartDbNodeOutputBuilder {
    if builder.db_node_id.is_none() {
        builder.db_node_id = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_db_node_output_output_correct_errors(
    mut builder: crate::operation::stop_db_node::builders::StopDbNodeOutputBuilder,
) -> crate::operation::stop_db_node::builders::StopDbNodeOutputBuilder {
    if builder.db_node_id.is_none() {
        builder.db_node_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_cloud_exadata_infrastructure_output_output_correct_errors(
    mut builder: crate::operation::update_cloud_exadata_infrastructure::builders::UpdateCloudExadataInfrastructureOutputBuilder,
) -> crate::operation::update_cloud_exadata_infrastructure::builders::UpdateCloudExadataInfrastructureOutputBuilder {
    if builder.cloud_exadata_infrastructure_id.is_none() {
        builder.cloud_exadata_infrastructure_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_odb_network_output_output_correct_errors(
    mut builder: crate::operation::update_odb_network::builders::UpdateOdbNetworkOutputBuilder,
) -> crate::operation::update_odb_network::builders::UpdateOdbNetworkOutputBuilder {
    if builder.odb_network_id.is_none() {
        builder.odb_network_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_odb_peering_connection_output_output_correct_errors(
    mut builder: crate::operation::update_odb_peering_connection::builders::UpdateOdbPeeringConnectionOutputBuilder,
) -> crate::operation::update_odb_peering_connection::builders::UpdateOdbPeeringConnectionOutputBuilder {
    if builder.odb_peering_connection_id.is_none() {
        builder.odb_peering_connection_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_autonomous_vm_cluster_correct_errors(
    mut builder: crate::types::builders::CloudAutonomousVmClusterBuilder,
) -> crate::types::builders::CloudAutonomousVmClusterBuilder {
    if builder.cloud_autonomous_vm_cluster_id.is_none() {
        builder.cloud_autonomous_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_exadata_infrastructure_correct_errors(
    mut builder: crate::types::builders::CloudExadataInfrastructureBuilder,
) -> crate::types::builders::CloudExadataInfrastructureBuilder {
    if builder.cloud_exadata_infrastructure_id.is_none() {
        builder.cloud_exadata_infrastructure_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_vm_cluster_correct_errors(
    mut builder: crate::types::builders::CloudVmClusterBuilder,
) -> crate::types::builders::CloudVmClusterBuilder {
    if builder.cloud_vm_cluster_id.is_none() {
        builder.cloud_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn odb_network_correct_errors(mut builder: crate::types::builders::OdbNetworkBuilder) -> crate::types::builders::OdbNetworkBuilder {
    if builder.odb_network_id.is_none() {
        builder.odb_network_id = Some(Default::default())
    }
    builder
}

pub(crate) fn odb_peering_connection_correct_errors(
    mut builder: crate::types::builders::OdbPeeringConnectionBuilder,
) -> crate::types::builders::OdbPeeringConnectionBuilder {
    if builder.odb_peering_connection_id.is_none() {
        builder.odb_peering_connection_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_autonomous_vm_cluster_summary_correct_errors(
    mut builder: crate::types::builders::CloudAutonomousVmClusterSummaryBuilder,
) -> crate::types::builders::CloudAutonomousVmClusterSummaryBuilder {
    if builder.cloud_autonomous_vm_cluster_id.is_none() {
        builder.cloud_autonomous_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_exadata_infrastructure_summary_correct_errors(
    mut builder: crate::types::builders::CloudExadataInfrastructureSummaryBuilder,
) -> crate::types::builders::CloudExadataInfrastructureSummaryBuilder {
    if builder.cloud_exadata_infrastructure_id.is_none() {
        builder.cloud_exadata_infrastructure_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_vm_cluster_summary_correct_errors(
    mut builder: crate::types::builders::CloudVmClusterSummaryBuilder,
) -> crate::types::builders::CloudVmClusterSummaryBuilder {
    if builder.cloud_vm_cluster_id.is_none() {
        builder.cloud_vm_cluster_id = Some(Default::default())
    }
    builder
}

pub(crate) fn odb_network_summary_correct_errors(
    mut builder: crate::types::builders::OdbNetworkSummaryBuilder,
) -> crate::types::builders::OdbNetworkSummaryBuilder {
    if builder.odb_network_id.is_none() {
        builder.odb_network_id = Some(Default::default())
    }
    builder
}

pub(crate) fn odb_peering_connection_summary_correct_errors(
    mut builder: crate::types::builders::OdbPeeringConnectionSummaryBuilder,
) -> crate::types::builders::OdbPeeringConnectionSummaryBuilder {
    if builder.odb_peering_connection_id.is_none() {
        builder.odb_peering_connection_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
