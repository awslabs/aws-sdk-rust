// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A peering connection between an ODB network and either another ODB network or a customer-owned VPC.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OdbPeeringConnection {
    /// <p>The unique identifier of the ODB peering connection. A sample ID is <code>odbpcx-abcdefgh12345678</code>.</p>
    pub odb_peering_connection_id: ::std::string::String,
    /// <p>The display name of the ODB peering connection.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the ODB peering connection.</p>
    pub status: ::std::option::Option<crate::types::ResourceStatus>,
    /// <p>The reason for the current status of the ODB peering connection.</p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ODB peering connection.</p>
    /// <p>Example: <code>arn:aws:odb:us-east-1:123456789012:odb-peering-connection/odbpcx-abcdefgh12345678</code></p>
    pub odb_peering_connection_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the ODB network that initiated the peering connection.</p>
    pub odb_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the peer network.</p>
    pub peer_network_arn: ::std::option::Option<::std::string::String>,
    /// <p>The type of the ODB peering connection.</p>
    /// <p>Valid Values: <code>ODB-VPC | ODB-ODB</code></p>
    pub odb_peering_connection_type: ::std::option::Option<::std::string::String>,
    /// <p>The CIDR blocks associated with the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection.</p>
    pub peer_network_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The timestamp when the ODB peering connection was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The percentage progress of the ODB peering connection creation or deletion.</p>
    pub percent_progress: ::std::option::Option<f32>,
}
impl OdbPeeringConnection {
    /// <p>The unique identifier of the ODB peering connection. A sample ID is <code>odbpcx-abcdefgh12345678</code>.</p>
    pub fn odb_peering_connection_id(&self) -> &str {
        use std::ops::Deref;
        self.odb_peering_connection_id.deref()
    }
    /// <p>The display name of the ODB peering connection.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The status of the ODB peering connection.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>The reason for the current status of the ODB peering connection.</p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB peering connection.</p>
    /// <p>Example: <code>arn:aws:odb:us-east-1:123456789012:odb-peering-connection/odbpcx-abcdefgh12345678</code></p>
    pub fn odb_peering_connection_arn(&self) -> ::std::option::Option<&str> {
        self.odb_peering_connection_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network that initiated the peering connection.</p>
    pub fn odb_network_arn(&self) -> ::std::option::Option<&str> {
        self.odb_network_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the peer network.</p>
    pub fn peer_network_arn(&self) -> ::std::option::Option<&str> {
        self.peer_network_arn.as_deref()
    }
    /// <p>The type of the ODB peering connection.</p>
    /// <p>Valid Values: <code>ODB-VPC | ODB-ODB</code></p>
    pub fn odb_peering_connection_type(&self) -> ::std::option::Option<&str> {
        self.odb_peering_connection_type.as_deref()
    }
    /// <p>The CIDR blocks associated with the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peer_network_cidrs.is_none()`.
    pub fn peer_network_cidrs(&self) -> &[::std::string::String] {
        self.peer_network_cidrs.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp when the ODB peering connection was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The percentage progress of the ODB peering connection creation or deletion.</p>
    pub fn percent_progress(&self) -> ::std::option::Option<f32> {
        self.percent_progress
    }
}
impl OdbPeeringConnection {
    /// Creates a new builder-style object to manufacture [`OdbPeeringConnection`](crate::types::OdbPeeringConnection).
    pub fn builder() -> crate::types::builders::OdbPeeringConnectionBuilder {
        crate::types::builders::OdbPeeringConnectionBuilder::default()
    }
}

/// A builder for [`OdbPeeringConnection`](crate::types::OdbPeeringConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OdbPeeringConnectionBuilder {
    pub(crate) odb_peering_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) odb_peering_connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) odb_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) peer_network_arn: ::std::option::Option<::std::string::String>,
    pub(crate) odb_peering_connection_type: ::std::option::Option<::std::string::String>,
    pub(crate) peer_network_cidrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) percent_progress: ::std::option::Option<f32>,
}
impl OdbPeeringConnectionBuilder {
    /// <p>The unique identifier of the ODB peering connection. A sample ID is <code>odbpcx-abcdefgh12345678</code>.</p>
    /// This field is required.
    pub fn odb_peering_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_peering_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the ODB peering connection. A sample ID is <code>odbpcx-abcdefgh12345678</code>.</p>
    pub fn set_odb_peering_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_peering_connection_id = input;
        self
    }
    /// <p>The unique identifier of the ODB peering connection. A sample ID is <code>odbpcx-abcdefgh12345678</code>.</p>
    pub fn get_odb_peering_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_peering_connection_id
    }
    /// <p>The display name of the ODB peering connection.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The display name of the ODB peering connection.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The display name of the ODB peering connection.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The status of the ODB peering connection.</p>
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ODB peering connection.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ODB peering connection.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// <p>The reason for the current status of the ODB peering connection.</p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason for the current status of the ODB peering connection.</p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The reason for the current status of the ODB peering connection.</p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB peering connection.</p>
    /// <p>Example: <code>arn:aws:odb:us-east-1:123456789012:odb-peering-connection/odbpcx-abcdefgh12345678</code></p>
    pub fn odb_peering_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_peering_connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB peering connection.</p>
    /// <p>Example: <code>arn:aws:odb:us-east-1:123456789012:odb-peering-connection/odbpcx-abcdefgh12345678</code></p>
    pub fn set_odb_peering_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_peering_connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB peering connection.</p>
    /// <p>Example: <code>arn:aws:odb:us-east-1:123456789012:odb-peering-connection/odbpcx-abcdefgh12345678</code></p>
    pub fn get_odb_peering_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_peering_connection_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network that initiated the peering connection.</p>
    pub fn odb_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network that initiated the peering connection.</p>
    pub fn set_odb_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the ODB network that initiated the peering connection.</p>
    pub fn get_odb_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_network_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the peer network.</p>
    pub fn peer_network_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.peer_network_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the peer network.</p>
    pub fn set_peer_network_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.peer_network_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the peer network.</p>
    pub fn get_peer_network_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.peer_network_arn
    }
    /// <p>The type of the ODB peering connection.</p>
    /// <p>Valid Values: <code>ODB-VPC | ODB-ODB</code></p>
    pub fn odb_peering_connection_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_peering_connection_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the ODB peering connection.</p>
    /// <p>Valid Values: <code>ODB-VPC | ODB-ODB</code></p>
    pub fn set_odb_peering_connection_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_peering_connection_type = input;
        self
    }
    /// <p>The type of the ODB peering connection.</p>
    /// <p>Valid Values: <code>ODB-VPC | ODB-ODB</code></p>
    pub fn get_odb_peering_connection_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_peering_connection_type
    }
    /// Appends an item to `peer_network_cidrs`.
    ///
    /// To override the contents of this collection use [`set_peer_network_cidrs`](Self::set_peer_network_cidrs).
    ///
    /// <p>The CIDR blocks associated with the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection.</p>
    pub fn peer_network_cidrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peer_network_cidrs.unwrap_or_default();
        v.push(input.into());
        self.peer_network_cidrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The CIDR blocks associated with the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection.</p>
    pub fn set_peer_network_cidrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peer_network_cidrs = input;
        self
    }
    /// <p>The CIDR blocks associated with the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection.</p>
    pub fn get_peer_network_cidrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peer_network_cidrs
    }
    /// <p>The timestamp when the ODB peering connection was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the ODB peering connection was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp when the ODB peering connection was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The percentage progress of the ODB peering connection creation or deletion.</p>
    pub fn percent_progress(mut self, input: f32) -> Self {
        self.percent_progress = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage progress of the ODB peering connection creation or deletion.</p>
    pub fn set_percent_progress(mut self, input: ::std::option::Option<f32>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>The percentage progress of the ODB peering connection creation or deletion.</p>
    pub fn get_percent_progress(&self) -> &::std::option::Option<f32> {
        &self.percent_progress
    }
    /// Consumes the builder and constructs a [`OdbPeeringConnection`](crate::types::OdbPeeringConnection).
    /// This method will fail if any of the following fields are not set:
    /// - [`odb_peering_connection_id`](crate::types::builders::OdbPeeringConnectionBuilder::odb_peering_connection_id)
    pub fn build(self) -> ::std::result::Result<crate::types::OdbPeeringConnection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OdbPeeringConnection {
            odb_peering_connection_id: self.odb_peering_connection_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "odb_peering_connection_id",
                    "odb_peering_connection_id was not specified but it is required when building OdbPeeringConnection",
                )
            })?,
            display_name: self.display_name,
            status: self.status,
            status_reason: self.status_reason,
            odb_peering_connection_arn: self.odb_peering_connection_arn,
            odb_network_arn: self.odb_network_arn,
            peer_network_arn: self.peer_network_arn,
            odb_peering_connection_type: self.odb_peering_connection_type,
            peer_network_cidrs: self.peer_network_cidrs,
            created_at: self.created_at,
            percent_progress: self.percent_progress,
        })
    }
}
