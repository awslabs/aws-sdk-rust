// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOdbPeeringConnectionInput {
    /// <p>The identifier of the Oracle Database@Amazon Web Services peering connection to update.</p>
    pub odb_peering_connection_id: ::std::option::Option<::std::string::String>,
    /// <p>A new display name for the peering connection.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of CIDR blocks to add to the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection. The CIDR blocks must not overlap with existing CIDR blocks in the Oracle Database@Amazon Web Services network.</p>
    pub peer_network_cidrs_to_be_added: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of CIDR blocks to remove from the peering connection. The CIDR blocks must currently exist in the peering connection.</p>
    pub peer_network_cidrs_to_be_removed: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateOdbPeeringConnectionInput {
    /// <p>The identifier of the Oracle Database@Amazon Web Services peering connection to update.</p>
    pub fn odb_peering_connection_id(&self) -> ::std::option::Option<&str> {
        self.odb_peering_connection_id.as_deref()
    }
    /// <p>A new display name for the peering connection.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>A list of CIDR blocks to add to the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection. The CIDR blocks must not overlap with existing CIDR blocks in the Oracle Database@Amazon Web Services network.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peer_network_cidrs_to_be_added.is_none()`.
    pub fn peer_network_cidrs_to_be_added(&self) -> &[::std::string::String] {
        self.peer_network_cidrs_to_be_added.as_deref().unwrap_or_default()
    }
    /// <p>A list of CIDR blocks to remove from the peering connection. The CIDR blocks must currently exist in the peering connection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.peer_network_cidrs_to_be_removed.is_none()`.
    pub fn peer_network_cidrs_to_be_removed(&self) -> &[::std::string::String] {
        self.peer_network_cidrs_to_be_removed.as_deref().unwrap_or_default()
    }
}
impl UpdateOdbPeeringConnectionInput {
    /// Creates a new builder-style object to manufacture [`UpdateOdbPeeringConnectionInput`](crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionInput).
    pub fn builder() -> crate::operation::update_odb_peering_connection::builders::UpdateOdbPeeringConnectionInputBuilder {
        crate::operation::update_odb_peering_connection::builders::UpdateOdbPeeringConnectionInputBuilder::default()
    }
}

/// A builder for [`UpdateOdbPeeringConnectionInput`](crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateOdbPeeringConnectionInputBuilder {
    pub(crate) odb_peering_connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) peer_network_cidrs_to_be_added: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) peer_network_cidrs_to_be_removed: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateOdbPeeringConnectionInputBuilder {
    /// <p>The identifier of the Oracle Database@Amazon Web Services peering connection to update.</p>
    /// This field is required.
    pub fn odb_peering_connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.odb_peering_connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Oracle Database@Amazon Web Services peering connection to update.</p>
    pub fn set_odb_peering_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.odb_peering_connection_id = input;
        self
    }
    /// <p>The identifier of the Oracle Database@Amazon Web Services peering connection to update.</p>
    pub fn get_odb_peering_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.odb_peering_connection_id
    }
    /// <p>A new display name for the peering connection.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new display name for the peering connection.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A new display name for the peering connection.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Appends an item to `peer_network_cidrs_to_be_added`.
    ///
    /// To override the contents of this collection use [`set_peer_network_cidrs_to_be_added`](Self::set_peer_network_cidrs_to_be_added).
    ///
    /// <p>A list of CIDR blocks to add to the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection. The CIDR blocks must not overlap with existing CIDR blocks in the Oracle Database@Amazon Web Services network.</p>
    pub fn peer_network_cidrs_to_be_added(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peer_network_cidrs_to_be_added.unwrap_or_default();
        v.push(input.into());
        self.peer_network_cidrs_to_be_added = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of CIDR blocks to add to the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection. The CIDR blocks must not overlap with existing CIDR blocks in the Oracle Database@Amazon Web Services network.</p>
    pub fn set_peer_network_cidrs_to_be_added(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peer_network_cidrs_to_be_added = input;
        self
    }
    /// <p>A list of CIDR blocks to add to the peering connection. These CIDR blocks define the IP address ranges that can communicate through the peering connection. The CIDR blocks must not overlap with existing CIDR blocks in the Oracle Database@Amazon Web Services network.</p>
    pub fn get_peer_network_cidrs_to_be_added(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peer_network_cidrs_to_be_added
    }
    /// Appends an item to `peer_network_cidrs_to_be_removed`.
    ///
    /// To override the contents of this collection use [`set_peer_network_cidrs_to_be_removed`](Self::set_peer_network_cidrs_to_be_removed).
    ///
    /// <p>A list of CIDR blocks to remove from the peering connection. The CIDR blocks must currently exist in the peering connection.</p>
    pub fn peer_network_cidrs_to_be_removed(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.peer_network_cidrs_to_be_removed.unwrap_or_default();
        v.push(input.into());
        self.peer_network_cidrs_to_be_removed = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of CIDR blocks to remove from the peering connection. The CIDR blocks must currently exist in the peering connection.</p>
    pub fn set_peer_network_cidrs_to_be_removed(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.peer_network_cidrs_to_be_removed = input;
        self
    }
    /// <p>A list of CIDR blocks to remove from the peering connection. The CIDR blocks must currently exist in the peering connection.</p>
    pub fn get_peer_network_cidrs_to_be_removed(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.peer_network_cidrs_to_be_removed
    }
    /// Consumes the builder and constructs a [`UpdateOdbPeeringConnectionInput`](crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionInput {
            odb_peering_connection_id: self.odb_peering_connection_id,
            display_name: self.display_name,
            peer_network_cidrs_to_be_added: self.peer_network_cidrs_to_be_added,
            peer_network_cidrs_to_be_removed: self.peer_network_cidrs_to_be_removed,
        })
    }
}
