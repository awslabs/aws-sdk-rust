// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this action. Make sure you have the required permissions and try again.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Occurs when a conflict with the current status of your resource. Fix any inconsistencies with your resource and try again.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Occurs when there is an internal failure in the Oracle Database@Amazon Web Services service. Wait and try again.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The operation tried to access a resource that doesn't exist. Make sure you provided the correct resource and try again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You have exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request has failed validation because it is missing required fields or has invalid inputs.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError> for Error {
    fn from(err: crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError) -> Self {
        match err {
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::accept_marketplace_registration::AcceptMarketplaceRegistrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError> for Error {
    fn from(err: crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError) -> Self {
        match err {
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_cloud_autonomous_vm_cluster::CreateCloudAutonomousVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError> for Error {
    fn from(err: crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError) -> Self {
        match err {
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_cloud_exadata_infrastructure::CreateCloudExadataInfrastructureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError> for Error {
    fn from(err: crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError) -> Self {
        match err {
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_cloud_vm_cluster::CreateCloudVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_odb_network::CreateOdbNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_odb_network::CreateOdbNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_odb_network::CreateOdbNetworkError> for Error {
    fn from(err: crate::operation::create_odb_network::CreateOdbNetworkError) -> Self {
        match err {
            crate::operation::create_odb_network::CreateOdbNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_odb_network::CreateOdbNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_odb_network::CreateOdbNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_odb_network::CreateOdbNetworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_odb_network::CreateOdbNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_odb_network::CreateOdbNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_odb_network::CreateOdbNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError> for Error {
    fn from(err: crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError) -> Self {
        match err {
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_odb_peering_connection::CreateOdbPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError> for Error {
    fn from(err: crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError) -> Self {
        match err {
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_cloud_autonomous_vm_cluster::DeleteCloudAutonomousVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError> for Error {
    fn from(err: crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError) -> Self {
        match err {
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_cloud_exadata_infrastructure::DeleteCloudExadataInfrastructureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError> for Error {
    fn from(err: crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError) -> Self {
        match err {
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_cloud_vm_cluster::DeleteCloudVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_odb_network::DeleteOdbNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_odb_network::DeleteOdbNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_odb_network::DeleteOdbNetworkError> for Error {
    fn from(err: crate::operation::delete_odb_network::DeleteOdbNetworkError) -> Self {
        match err {
            crate::operation::delete_odb_network::DeleteOdbNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_odb_network::DeleteOdbNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_odb_network::DeleteOdbNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_odb_network::DeleteOdbNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_odb_network::DeleteOdbNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_odb_network::DeleteOdbNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError> for Error {
    fn from(err: crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError) -> Self {
        match err {
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_odb_peering_connection::DeleteOdbPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError> for Error {
    fn from(err: crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError) -> Self {
        match err {
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_cloud_autonomous_vm_cluster::GetCloudAutonomousVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError> for Error {
    fn from(err: crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError) -> Self {
        match err {
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_cloud_exadata_infrastructure::GetCloudExadataInfrastructureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError>
    for Error
{
    fn from(
        err: crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError,
    ) -> Self {
        match err {
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_cloud_exadata_infrastructure_unallocated_resources::GetCloudExadataInfrastructureUnallocatedResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError> for Error {
    fn from(err: crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError) -> Self {
        match err {
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_cloud_vm_cluster::GetCloudVmClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_db_node::GetDbNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_db_node::GetDbNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_db_node::GetDbNodeError> for Error {
    fn from(err: crate::operation::get_db_node::GetDbNodeError) -> Self {
        match err {
            crate::operation::get_db_node::GetDbNodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_db_node::GetDbNodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_db_node::GetDbNodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_db_node::GetDbNodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_db_node::GetDbNodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_db_node::GetDbNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_db_server::GetDbServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_db_server::GetDbServerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_db_server::GetDbServerError> for Error {
    fn from(err: crate::operation::get_db_server::GetDbServerError) -> Self {
        match err {
            crate::operation::get_db_server::GetDbServerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_db_server::GetDbServerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_db_server::GetDbServerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_db_server::GetDbServerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_db_server::GetDbServerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_db_server::GetDbServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError> for Error {
    fn from(err: crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError) -> Self {
        match err {
            crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_oci_onboarding_status::GetOciOnboardingStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_odb_network::GetOdbNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_odb_network::GetOdbNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_odb_network::GetOdbNetworkError> for Error {
    fn from(err: crate::operation::get_odb_network::GetOdbNetworkError) -> Self {
        match err {
            crate::operation::get_odb_network::GetOdbNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_odb_network::GetOdbNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_odb_network::GetOdbNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_odb_network::GetOdbNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_odb_network::GetOdbNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_odb_network::GetOdbNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError> for Error {
    fn from(err: crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError) -> Self {
        match err {
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_odb_peering_connection::GetOdbPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initialize_service::InitializeServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initialize_service::InitializeServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::initialize_service::InitializeServiceError> for Error {
    fn from(err: crate::operation::initialize_service::InitializeServiceError) -> Self {
        match err {
            crate::operation::initialize_service::InitializeServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::initialize_service::InitializeServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::initialize_service::InitializeServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::initialize_service::InitializeServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::initialize_service::InitializeServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError> for Error {
    fn from(err: crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError) -> Self {
        match err {
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_autonomous_virtual_machines::ListAutonomousVirtualMachinesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError> for Error {
    fn from(err: crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError) -> Self {
        match err {
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_cloud_autonomous_vm_clusters::ListCloudAutonomousVmClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError> for Error {
    fn from(err: crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError) -> Self {
        match err {
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_cloud_exadata_infrastructures::ListCloudExadataInfrastructuresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError> for Error {
    fn from(err: crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError) -> Self {
        match err {
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_cloud_vm_clusters::ListCloudVmClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_nodes::ListDbNodesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_nodes::ListDbNodesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_db_nodes::ListDbNodesError> for Error {
    fn from(err: crate::operation::list_db_nodes::ListDbNodesError) -> Self {
        match err {
            crate::operation::list_db_nodes::ListDbNodesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_db_nodes::ListDbNodesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_db_nodes::ListDbNodesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_db_nodes::ListDbNodesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_db_nodes::ListDbNodesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_db_nodes::ListDbNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_servers::ListDbServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_servers::ListDbServersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_db_servers::ListDbServersError> for Error {
    fn from(err: crate::operation::list_db_servers::ListDbServersError) -> Self {
        match err {
            crate::operation::list_db_servers::ListDbServersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_db_servers::ListDbServersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_db_servers::ListDbServersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_db_servers::ListDbServersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_db_servers::ListDbServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_db_servers::ListDbServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_system_shapes::ListDbSystemShapesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_db_system_shapes::ListDbSystemShapesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_db_system_shapes::ListDbSystemShapesError> for Error {
    fn from(err: crate::operation::list_db_system_shapes::ListDbSystemShapesError) -> Self {
        match err {
            crate::operation::list_db_system_shapes::ListDbSystemShapesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_db_system_shapes::ListDbSystemShapesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_db_system_shapes::ListDbSystemShapesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_db_system_shapes::ListDbSystemShapesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_db_system_shapes::ListDbSystemShapesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gi_versions::ListGiVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_gi_versions::ListGiVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_gi_versions::ListGiVersionsError> for Error {
    fn from(err: crate::operation::list_gi_versions::ListGiVersionsError) -> Self {
        match err {
            crate::operation::list_gi_versions::ListGiVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_gi_versions::ListGiVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_gi_versions::ListGiVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_gi_versions::ListGiVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_gi_versions::ListGiVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_odb_networks::ListOdbNetworksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_odb_networks::ListOdbNetworksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_odb_networks::ListOdbNetworksError> for Error {
    fn from(err: crate::operation::list_odb_networks::ListOdbNetworksError) -> Self {
        match err {
            crate::operation::list_odb_networks::ListOdbNetworksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_odb_networks::ListOdbNetworksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_odb_networks::ListOdbNetworksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_odb_networks::ListOdbNetworksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_odb_networks::ListOdbNetworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError> for Error {
    fn from(err: crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError) -> Self {
        match err {
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_odb_peering_connections::ListOdbPeeringConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_system_versions::ListSystemVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_system_versions::ListSystemVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_system_versions::ListSystemVersionsError> for Error {
    fn from(err: crate::operation::list_system_versions::ListSystemVersionsError) -> Self {
        match err {
            crate::operation::list_system_versions::ListSystemVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_system_versions::ListSystemVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_system_versions::ListSystemVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_system_versions::ListSystemVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_system_versions::ListSystemVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_system_versions::ListSystemVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_node::RebootDbNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_node::RebootDbNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reboot_db_node::RebootDbNodeError> for Error {
    fn from(err: crate::operation::reboot_db_node::RebootDbNodeError) -> Self {
        match err {
            crate::operation::reboot_db_node::RebootDbNodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reboot_db_node::RebootDbNodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reboot_db_node::RebootDbNodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reboot_db_node::RebootDbNodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reboot_db_node::RebootDbNodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reboot_db_node::RebootDbNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_node::StartDbNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_node::StartDbNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_db_node::StartDbNodeError> for Error {
    fn from(err: crate::operation::start_db_node::StartDbNodeError) -> Self {
        match err {
            crate::operation::start_db_node::StartDbNodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_db_node::StartDbNodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_db_node::StartDbNodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_db_node::StartDbNodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_db_node::StartDbNodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_db_node::StartDbNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_node::StopDbNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_node::StopDbNodeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_db_node::StopDbNodeError> for Error {
    fn from(err: crate::operation::stop_db_node::StopDbNodeError) -> Self {
        match err {
            crate::operation::stop_db_node::StopDbNodeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_db_node::StopDbNodeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_db_node::StopDbNodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_db_node::StopDbNodeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_db_node::StopDbNodeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_db_node::StopDbNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError> for Error {
    fn from(err: crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError) -> Self {
        match err {
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_cloud_exadata_infrastructure::UpdateCloudExadataInfrastructureError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_odb_network::UpdateOdbNetworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_odb_network::UpdateOdbNetworkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_odb_network::UpdateOdbNetworkError> for Error {
    fn from(err: crate::operation::update_odb_network::UpdateOdbNetworkError) -> Self {
        match err {
            crate::operation::update_odb_network::UpdateOdbNetworkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_odb_network::UpdateOdbNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError> for Error {
    fn from(err: crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError) -> Self {
        match err {
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_odb_peering_connection::UpdateOdbPeeringConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
