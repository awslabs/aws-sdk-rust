// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchUpdateDetectorInput {
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub detectors: ::std::option::Option<::std::vec::Vec<crate::types::UpdateDetectorRequest>>,
}
impl BatchUpdateDetectorInput {
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.detectors.is_none()`.
    pub fn detectors(&self) -> &[crate::types::UpdateDetectorRequest] {
        self.detectors.as_deref().unwrap_or_default()
    }
}
impl BatchUpdateDetectorInput {
    /// Creates a new builder-style object to manufacture [`BatchUpdateDetectorInput`](crate::operation::batch_update_detector::BatchUpdateDetectorInput).
    pub fn builder() -> crate::operation::batch_update_detector::builders::BatchUpdateDetectorInputBuilder {
        crate::operation::batch_update_detector::builders::BatchUpdateDetectorInputBuilder::default()
    }
}

/// A builder for [`BatchUpdateDetectorInput`](crate::operation::batch_update_detector::BatchUpdateDetectorInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchUpdateDetectorInputBuilder {
    pub(crate) detectors: ::std::option::Option<::std::vec::Vec<crate::types::UpdateDetectorRequest>>,
}
impl BatchUpdateDetectorInputBuilder {
    /// Appends an item to `detectors`.
    ///
    /// To override the contents of this collection use [`set_detectors`](Self::set_detectors).
    ///
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub fn detectors(mut self, input: crate::types::UpdateDetectorRequest) -> Self {
        let mut v = self.detectors.unwrap_or_default();
        v.push(input);
        self.detectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub fn set_detectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateDetectorRequest>>) -> Self {
        self.detectors = input;
        self
    }
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub fn get_detectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateDetectorRequest>> {
        &self.detectors
    }
    /// Consumes the builder and constructs a [`BatchUpdateDetectorInput`](crate::operation::batch_update_detector::BatchUpdateDetectorInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_update_detector::BatchUpdateDetectorInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_update_detector::BatchUpdateDetectorInput { detectors: self.detectors })
    }
}
