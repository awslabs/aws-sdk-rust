// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `BatchAcknowledgeAlarm`.
///
/// <p>Acknowledges one or more alarms. The alarms change to the <code>ACKNOWLEDGED</code> state after you acknowledge them.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchAcknowledgeAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_acknowledge_alarm_input::Builder,
}
impl BatchAcknowledgeAlarm {
    /// Creates a new `BatchAcknowledgeAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchAcknowledgeAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchAcknowledgeAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchAcknowledgeAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchAcknowledgeAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `acknowledgeActionRequests`.
    ///
    /// To override the contents of this collection use [`set_acknowledge_action_requests`](Self::set_acknowledge_action_requests).
    ///
    /// <p>The list of acknowledge action requests. You can specify up to 10 requests per operation.</p>
    pub fn acknowledge_action_requests(
        mut self,
        input: crate::model::AcknowledgeAlarmActionRequest,
    ) -> Self {
        self.inner = self.inner.acknowledge_action_requests(input);
        self
    }
    /// <p>The list of acknowledge action requests. You can specify up to 10 requests per operation.</p>
    pub fn set_acknowledge_action_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::AcknowledgeAlarmActionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_acknowledge_action_requests(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchDeleteDetector`.
///
/// <p>Deletes one or more detectors that were created. When a detector is deleted, its state will be cleared and the detector will be removed from the list of detectors. The deleted detector will no longer appear if referenced in the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_ListDetectors.html">ListDetectors</a> API call.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteDetector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_delete_detector_input::Builder,
}
impl BatchDeleteDetector {
    /// Creates a new `BatchDeleteDetector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDeleteDetector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchDeleteDetectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDeleteDetectorOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchDeleteDetectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `detectors`.
    ///
    /// To override the contents of this collection use [`set_detectors`](Self::set_detectors).
    ///
    /// <p>The list of one or more detectors to be deleted.</p>
    pub fn detectors(mut self, input: crate::model::DeleteDetectorRequest) -> Self {
        self.inner = self.inner.detectors(input);
        self
    }
    /// <p>The list of one or more detectors to be deleted.</p>
    pub fn set_detectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DeleteDetectorRequest>>,
    ) -> Self {
        self.inner = self.inner.set_detectors(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchDisableAlarm`.
///
/// <p>Disables one or more alarms. The alarms change to the <code>DISABLED</code> state after you disable them.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisableAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_disable_alarm_input::Builder,
}
impl BatchDisableAlarm {
    /// Creates a new `BatchDisableAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchDisableAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchDisableAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchDisableAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchDisableAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `disableActionRequests`.
    ///
    /// To override the contents of this collection use [`set_disable_action_requests`](Self::set_disable_action_requests).
    ///
    /// <p>The list of disable action requests. You can specify up to 10 requests per operation.</p>
    pub fn disable_action_requests(
        mut self,
        input: crate::model::DisableAlarmActionRequest,
    ) -> Self {
        self.inner = self.inner.disable_action_requests(input);
        self
    }
    /// <p>The list of disable action requests. You can specify up to 10 requests per operation.</p>
    pub fn set_disable_action_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::DisableAlarmActionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_disable_action_requests(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchEnableAlarm`.
///
/// <p>Enables one or more alarms. The alarms change to the <code>NORMAL</code> state after you enable them.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchEnableAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_enable_alarm_input::Builder,
}
impl BatchEnableAlarm {
    /// Creates a new `BatchEnableAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchEnableAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchEnableAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchEnableAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchEnableAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `enableActionRequests`.
    ///
    /// To override the contents of this collection use [`set_enable_action_requests`](Self::set_enable_action_requests).
    ///
    /// <p>The list of enable action requests. You can specify up to 10 requests per operation.</p>
    pub fn enable_action_requests(mut self, input: crate::model::EnableAlarmActionRequest) -> Self {
        self.inner = self.inner.enable_action_requests(input);
        self
    }
    /// <p>The list of enable action requests. You can specify up to 10 requests per operation.</p>
    pub fn set_enable_action_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::EnableAlarmActionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_enable_action_requests(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchPutMessage`.
///
/// <p>Sends a set of messages to the IoT Events system. Each message payload is transformed into the input you specify (<code>"inputName"</code>) and ingested into any detectors that monitor that input. If multiple messages are sent, the order in which the messages are processed isn't guaranteed. To guarantee ordering, you must send messages one at a time and wait for a successful response.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchPutMessage {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_put_message_input::Builder,
}
impl BatchPutMessage {
    /// Creates a new `BatchPutMessage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchPutMessage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchPutMessageError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchPutMessageOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchPutMessageError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `messages`.
    ///
    /// To override the contents of this collection use [`set_messages`](Self::set_messages).
    ///
    /// <p>The list of messages to send. Each message has the following format: <code>'{ "messageId": "string", "inputName": "string", "payload": "string"}'</code> </p>
    pub fn messages(mut self, input: crate::model::Message) -> Self {
        self.inner = self.inner.messages(input);
        self
    }
    /// <p>The list of messages to send. Each message has the following format: <code>'{ "messageId": "string", "inputName": "string", "payload": "string"}'</code> </p>
    pub fn set_messages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Message>>,
    ) -> Self {
        self.inner = self.inner.set_messages(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchResetAlarm`.
///
/// <p>Resets one or more alarms. The alarms return to the <code>NORMAL</code> state after you reset them.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchResetAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_reset_alarm_input::Builder,
}
impl BatchResetAlarm {
    /// Creates a new `BatchResetAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchResetAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchResetAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchResetAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchResetAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `resetActionRequests`.
    ///
    /// To override the contents of this collection use [`set_reset_action_requests`](Self::set_reset_action_requests).
    ///
    /// <p>The list of reset action requests. You can specify up to 10 requests per operation.</p>
    pub fn reset_action_requests(mut self, input: crate::model::ResetAlarmActionRequest) -> Self {
        self.inner = self.inner.reset_action_requests(input);
        self
    }
    /// <p>The list of reset action requests. You can specify up to 10 requests per operation.</p>
    pub fn set_reset_action_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ResetAlarmActionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_reset_action_requests(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchSnoozeAlarm`.
///
/// <p>Changes one or more alarms to the snooze mode. The alarms change to the <code>SNOOZE_DISABLED</code> state after you set them to the snooze mode.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchSnoozeAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_snooze_alarm_input::Builder,
}
impl BatchSnoozeAlarm {
    /// Creates a new `BatchSnoozeAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchSnoozeAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchSnoozeAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchSnoozeAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchSnoozeAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `snoozeActionRequests`.
    ///
    /// To override the contents of this collection use [`set_snooze_action_requests`](Self::set_snooze_action_requests).
    ///
    /// <p>The list of snooze action requests. You can specify up to 10 requests per operation.</p>
    pub fn snooze_action_requests(mut self, input: crate::model::SnoozeAlarmActionRequest) -> Self {
        self.inner = self.inner.snooze_action_requests(input);
        self
    }
    /// <p>The list of snooze action requests. You can specify up to 10 requests per operation.</p>
    pub fn set_snooze_action_requests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SnoozeAlarmActionRequest>>,
    ) -> Self {
        self.inner = self.inner.set_snooze_action_requests(input);
        self
    }
}

/// Fluent builder constructing a request to `BatchUpdateDetector`.
///
/// <p>Updates the state, variable values, and timer settings of one or more detectors (instances) of a specified detector model.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdateDetector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::batch_update_detector_input::Builder,
}
impl BatchUpdateDetector {
    /// Creates a new `BatchUpdateDetector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::BatchUpdateDetector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::BatchUpdateDetectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::BatchUpdateDetectorOutput,
        aws_smithy_http::result::SdkError<crate::error::BatchUpdateDetectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `detectors`.
    ///
    /// To override the contents of this collection use [`set_detectors`](Self::set_detectors).
    ///
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub fn detectors(mut self, input: crate::model::UpdateDetectorRequest) -> Self {
        self.inner = self.inner.detectors(input);
        self
    }
    /// <p>The list of detectors (instances) to update, along with the values to update.</p>
    pub fn set_detectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::UpdateDetectorRequest>>,
    ) -> Self {
        self.inner = self.inner.set_detectors(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeAlarm`.
///
/// <p>Retrieves information about an alarm.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlarm {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_alarm_input::Builder,
}
impl DescribeAlarm {
    /// Creates a new `DescribeAlarm`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeAlarm,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeAlarmError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeAlarmOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeAlarmError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alarm_model_name(input.into());
        self
    }
    /// <p>The name of the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alarm_model_name(input);
        self
    }
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    pub fn key_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.key_value(input.into());
        self
    }
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    pub fn set_key_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_key_value(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeDetector`.
///
/// <p>Returns information about the specified detector (instance).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDetector {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_detector_input::Builder,
}
impl DescribeDetector {
    /// Creates a new `DescribeDetector`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeDetector,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeDetectorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeDetectorOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeDetectorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the detector model whose detectors (instances) you want information about.</p>
    pub fn detector_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.detector_model_name(input.into());
        self
    }
    /// <p>The name of the detector model whose detectors (instances) you want information about.</p>
    pub fn set_detector_model_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_detector_model_name(input);
        self
    }
    /// <p>A filter used to limit results to detectors (instances) created because of the given key ID.</p>
    pub fn key_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.key_value(input.into());
        self
    }
    /// <p>A filter used to limit results to detectors (instances) created because of the given key ID.</p>
    pub fn set_key_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_key_value(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAlarms`.
///
/// <p>Lists one or more alarms. The operation returns only the metadata associated with each alarm.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAlarms {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_alarms_input::Builder,
}
impl ListAlarms {
    /// Creates a new `ListAlarms`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAlarms,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAlarmsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAlarmsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAlarmsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.alarm_model_name(input.into());
        self
    }
    /// <p>The name of the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_alarm_model_name(input);
        self
    }
    /// <p>The token that you can use to return the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token that you can use to return the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListDetectors`.
///
/// <p>Lists detectors (the instances of a detector model).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDetectors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_detectors_input::Builder,
}
impl ListDetectors {
    /// Creates a new `ListDetectors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListDetectors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListDetectorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListDetectorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListDetectorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the detector model whose detectors (instances) are listed.</p>
    pub fn detector_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.detector_model_name(input.into());
        self
    }
    /// <p>The name of the detector model whose detectors (instances) are listed.</p>
    pub fn set_detector_model_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_detector_model_name(input);
        self
    }
    /// <p>A filter that limits results to those detectors (instances) in the given state.</p>
    pub fn state_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.state_name(input.into());
        self
    }
    /// <p>A filter that limits results to those detectors (instances) in the given state.</p>
    pub fn set_state_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_state_name(input);
        self
    }
    /// <p>The token that you can use to return the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token that you can use to return the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to be returned per request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
