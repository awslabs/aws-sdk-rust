// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>An internal failure occurred.</p>
    InternalFailureException(crate::types::error::InternalFailureException),
    /// <p>The request was invalid.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The request could not be completed due to throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError> for Error {
    fn from(err: crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError) -> Self {
        match err {
            crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_acknowledge_alarm::BatchAcknowledgeAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_detector::BatchDeleteDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_detector::BatchDeleteDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_detector::BatchDeleteDetectorError> for Error {
    fn from(err: crate::operation::batch_delete_detector::BatchDeleteDetectorError) -> Self {
        match err {
            crate::operation::batch_delete_detector::BatchDeleteDetectorError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_delete_detector::BatchDeleteDetectorError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_delete_detector::BatchDeleteDetectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_delete_detector::BatchDeleteDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_detector::BatchDeleteDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_disable_alarm::BatchDisableAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_disable_alarm::BatchDisableAlarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_disable_alarm::BatchDisableAlarmError> for Error {
    fn from(err: crate::operation::batch_disable_alarm::BatchDisableAlarmError) -> Self {
        match err {
            crate::operation::batch_disable_alarm::BatchDisableAlarmError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::batch_disable_alarm::BatchDisableAlarmError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_disable_alarm::BatchDisableAlarmError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_disable_alarm::BatchDisableAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_disable_alarm::BatchDisableAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_enable_alarm::BatchEnableAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_enable_alarm::BatchEnableAlarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_enable_alarm::BatchEnableAlarmError> for Error {
    fn from(err: crate::operation::batch_enable_alarm::BatchEnableAlarmError) -> Self {
        match err {
            crate::operation::batch_enable_alarm::BatchEnableAlarmError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::batch_enable_alarm::BatchEnableAlarmError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_enable_alarm::BatchEnableAlarmError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_enable_alarm::BatchEnableAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_enable_alarm::BatchEnableAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_message::BatchPutMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_put_message::BatchPutMessageError> for Error {
    fn from(err: crate::operation::batch_put_message::BatchPutMessageError) -> Self {
        match err {
            crate::operation::batch_put_message::BatchPutMessageError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::batch_put_message::BatchPutMessageError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_put_message::BatchPutMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_put_message::BatchPutMessageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_put_message::BatchPutMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_reset_alarm::BatchResetAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_reset_alarm::BatchResetAlarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_reset_alarm::BatchResetAlarmError> for Error {
    fn from(err: crate::operation::batch_reset_alarm::BatchResetAlarmError) -> Self {
        match err {
            crate::operation::batch_reset_alarm::BatchResetAlarmError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::batch_reset_alarm::BatchResetAlarmError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_reset_alarm::BatchResetAlarmError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_reset_alarm::BatchResetAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_reset_alarm::BatchResetAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError> for Error {
    fn from(err: crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError) -> Self {
        match err {
            crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_snooze_alarm::BatchSnoozeAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_detector::BatchUpdateDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_update_detector::BatchUpdateDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_update_detector::BatchUpdateDetectorError> for Error {
    fn from(err: crate::operation::batch_update_detector::BatchUpdateDetectorError) -> Self {
        match err {
            crate::operation::batch_update_detector::BatchUpdateDetectorError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::batch_update_detector::BatchUpdateDetectorError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::batch_update_detector::BatchUpdateDetectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::batch_update_detector::BatchUpdateDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_detector::BatchUpdateDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_alarm::DescribeAlarmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_alarm::DescribeAlarmError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_alarm::DescribeAlarmError> for Error {
    fn from(err: crate::operation::describe_alarm::DescribeAlarmError) -> Self {
        match err {
            crate::operation::describe_alarm::DescribeAlarmError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_alarm::DescribeAlarmError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_alarm::DescribeAlarmError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_alarm::DescribeAlarmError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_alarm::DescribeAlarmError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_alarm::DescribeAlarmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector::DescribeDetectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_detector::DescribeDetectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_detector::DescribeDetectorError> for Error {
    fn from(err: crate::operation::describe_detector::DescribeDetectorError) -> Self {
        match err {
            crate::operation::describe_detector::DescribeDetectorError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_detector::DescribeDetectorError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_detector::DescribeDetectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_detector::DescribeDetectorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_detector::DescribeDetectorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_detector::DescribeDetectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarms::ListAlarmsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_alarms::ListAlarmsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_alarms::ListAlarmsError> for Error {
    fn from(err: crate::operation::list_alarms::ListAlarmsError) -> Self {
        match err {
            crate::operation::list_alarms::ListAlarmsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_alarms::ListAlarmsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_alarms::ListAlarmsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_alarms::ListAlarmsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_alarms::ListAlarmsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_alarms::ListAlarmsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detectors::ListDetectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_detectors::ListDetectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_detectors::ListDetectorsError> for Error {
    fn from(err: crate::operation::list_detectors::ListDetectorsError) -> Self {
        match err {
            crate::operation::list_detectors::ListDetectorsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_detectors::ListDetectorsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_detectors::ListDetectorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_detectors::ListDetectorsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_detectors::ListDetectorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_detectors::ListDetectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::InternalFailureException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
