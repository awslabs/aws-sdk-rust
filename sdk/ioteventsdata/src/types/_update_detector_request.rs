// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information used to update the detector (instance).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDetectorRequest {
    /// <p>The ID to assign to the detector update <code>"message"</code>. Each <code>"messageId"</code> must be unique within each batch sent.</p>
    pub message_id: ::std::string::String,
    /// <p>The name of the detector model that created the detectors (instances).</p>
    pub detector_model_name: ::std::string::String,
    /// <p>The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).</p>
    pub key_value: ::std::option::Option<::std::string::String>,
    /// <p>The new state, variable values, and timer settings of the detector (instance).</p>
    pub state: ::std::option::Option<crate::types::DetectorStateDefinition>,
}
impl UpdateDetectorRequest {
    /// <p>The ID to assign to the detector update <code>"message"</code>. Each <code>"messageId"</code> must be unique within each batch sent.</p>
    pub fn message_id(&self) -> &str {
        use std::ops::Deref;
        self.message_id.deref()
    }
    /// <p>The name of the detector model that created the detectors (instances).</p>
    pub fn detector_model_name(&self) -> &str {
        use std::ops::Deref;
        self.detector_model_name.deref()
    }
    /// <p>The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).</p>
    pub fn key_value(&self) -> ::std::option::Option<&str> {
        self.key_value.as_deref()
    }
    /// <p>The new state, variable values, and timer settings of the detector (instance).</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::DetectorStateDefinition> {
        self.state.as_ref()
    }
}
impl UpdateDetectorRequest {
    /// Creates a new builder-style object to manufacture [`UpdateDetectorRequest`](crate::types::UpdateDetectorRequest).
    pub fn builder() -> crate::types::builders::UpdateDetectorRequestBuilder {
        crate::types::builders::UpdateDetectorRequestBuilder::default()
    }
}

/// A builder for [`UpdateDetectorRequest`](crate::types::UpdateDetectorRequest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDetectorRequestBuilder {
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) detector_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) key_value: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::DetectorStateDefinition>,
}
impl UpdateDetectorRequestBuilder {
    /// <p>The ID to assign to the detector update <code>"message"</code>. Each <code>"messageId"</code> must be unique within each batch sent.</p>
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID to assign to the detector update <code>"message"</code>. Each <code>"messageId"</code> must be unique within each batch sent.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The ID to assign to the detector update <code>"message"</code>. Each <code>"messageId"</code> must be unique within each batch sent.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>The name of the detector model that created the detectors (instances).</p>
    /// This field is required.
    pub fn detector_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detector_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the detector model that created the detectors (instances).</p>
    pub fn set_detector_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detector_model_name = input;
        self
    }
    /// <p>The name of the detector model that created the detectors (instances).</p>
    pub fn get_detector_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.detector_model_name
    }
    /// <p>The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).</p>
    pub fn key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).</p>
    pub fn set_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_value = input;
        self
    }
    /// <p>The value of the input key attribute (identifying the device or system) that caused the creation of this detector (instance).</p>
    pub fn get_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_value
    }
    /// <p>The new state, variable values, and timer settings of the detector (instance).</p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::DetectorStateDefinition) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new state, variable values, and timer settings of the detector (instance).</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::DetectorStateDefinition>) -> Self {
        self.state = input;
        self
    }
    /// <p>The new state, variable values, and timer settings of the detector (instance).</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::DetectorStateDefinition> {
        &self.state
    }
    /// Consumes the builder and constructs a [`UpdateDetectorRequest`](crate::types::UpdateDetectorRequest).
    /// This method will fail if any of the following fields are not set:
    /// - [`message_id`](crate::types::builders::UpdateDetectorRequestBuilder::message_id)
    /// - [`detector_model_name`](crate::types::builders::UpdateDetectorRequestBuilder::detector_model_name)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateDetectorRequest, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateDetectorRequest {
            message_id: self.message_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message_id",
                    "message_id was not specified but it is required when building UpdateDetectorRequest",
                )
            })?,
            detector_model_name: self.detector_model_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "detector_model_name",
                    "detector_model_name was not specified but it is required when building UpdateDetectorRequest",
                )
            })?,
            key_value: self.key_value,
            state: self.state,
        })
    }
}
