// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The new setting of a timer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimerDefinition {
    /// <p>The name of the timer.</p>
    pub name: ::std::string::String,
    /// <p>The new setting of the timer (the number of seconds before the timer elapses).</p>
    pub seconds: i32,
}
impl TimerDefinition {
    /// <p>The name of the timer.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The new setting of the timer (the number of seconds before the timer elapses).</p>
    pub fn seconds(&self) -> i32 {
        self.seconds
    }
}
impl TimerDefinition {
    /// Creates a new builder-style object to manufacture [`TimerDefinition`](crate::types::TimerDefinition).
    pub fn builder() -> crate::types::builders::TimerDefinitionBuilder {
        crate::types::builders::TimerDefinitionBuilder::default()
    }
}

/// A builder for [`TimerDefinition`](crate::types::TimerDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimerDefinitionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) seconds: ::std::option::Option<i32>,
}
impl TimerDefinitionBuilder {
    /// <p>The name of the timer.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the timer.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the timer.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The new setting of the timer (the number of seconds before the timer elapses).</p>
    /// This field is required.
    pub fn seconds(mut self, input: i32) -> Self {
        self.seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new setting of the timer (the number of seconds before the timer elapses).</p>
    pub fn set_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.seconds = input;
        self
    }
    /// <p>The new setting of the timer (the number of seconds before the timer elapses).</p>
    pub fn get_seconds(&self) -> &::std::option::Option<i32> {
        &self.seconds
    }
    /// Consumes the builder and constructs a [`TimerDefinition`](crate::types::TimerDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TimerDefinitionBuilder::name)
    /// - [`seconds`](crate::types::builders::TimerDefinitionBuilder::seconds)
    pub fn build(self) -> ::std::result::Result<crate::types::TimerDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TimerDefinition {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TimerDefinition",
                )
            })?,
            seconds: self.seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "seconds",
                    "seconds was not specified but it is required when building TimerDefinition",
                )
            })?,
        })
    }
}
