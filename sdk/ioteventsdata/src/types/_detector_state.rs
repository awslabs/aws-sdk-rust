// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the current state of the detector instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectorState {
    /// <p>The name of the state.</p>
    pub state_name: ::std::string::String,
    /// <p>The current values of the detector's variables.</p>
    pub variables: ::std::vec::Vec<crate::types::Variable>,
    /// <p>The current state of the detector's timers.</p>
    pub timers: ::std::vec::Vec<crate::types::Timer>,
}
impl DetectorState {
    /// <p>The name of the state.</p>
    pub fn state_name(&self) -> &str {
        use std::ops::Deref;
        self.state_name.deref()
    }
    /// <p>The current values of the detector's variables.</p>
    pub fn variables(&self) -> &[crate::types::Variable] {
        use std::ops::Deref;
        self.variables.deref()
    }
    /// <p>The current state of the detector's timers.</p>
    pub fn timers(&self) -> &[crate::types::Timer] {
        use std::ops::Deref;
        self.timers.deref()
    }
}
impl DetectorState {
    /// Creates a new builder-style object to manufacture [`DetectorState`](crate::types::DetectorState).
    pub fn builder() -> crate::types::builders::DetectorStateBuilder {
        crate::types::builders::DetectorStateBuilder::default()
    }
}

/// A builder for [`DetectorState`](crate::types::DetectorState).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectorStateBuilder {
    pub(crate) state_name: ::std::option::Option<::std::string::String>,
    pub(crate) variables: ::std::option::Option<::std::vec::Vec<crate::types::Variable>>,
    pub(crate) timers: ::std::option::Option<::std::vec::Vec<crate::types::Timer>>,
}
impl DetectorStateBuilder {
    /// <p>The name of the state.</p>
    /// This field is required.
    pub fn state_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the state.</p>
    pub fn set_state_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_name = input;
        self
    }
    /// <p>The name of the state.</p>
    pub fn get_state_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_name
    }
    /// Appends an item to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>The current values of the detector's variables.</p>
    pub fn variables(mut self, input: crate::types::Variable) -> Self {
        let mut v = self.variables.unwrap_or_default();
        v.push(input);
        self.variables = ::std::option::Option::Some(v);
        self
    }
    /// <p>The current values of the detector's variables.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Variable>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>The current values of the detector's variables.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Variable>> {
        &self.variables
    }
    /// Appends an item to `timers`.
    ///
    /// To override the contents of this collection use [`set_timers`](Self::set_timers).
    ///
    /// <p>The current state of the detector's timers.</p>
    pub fn timers(mut self, input: crate::types::Timer) -> Self {
        let mut v = self.timers.unwrap_or_default();
        v.push(input);
        self.timers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The current state of the detector's timers.</p>
    pub fn set_timers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Timer>>) -> Self {
        self.timers = input;
        self
    }
    /// <p>The current state of the detector's timers.</p>
    pub fn get_timers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Timer>> {
        &self.timers
    }
    /// Consumes the builder and constructs a [`DetectorState`](crate::types::DetectorState).
    /// This method will fail if any of the following fields are not set:
    /// - [`state_name`](crate::types::builders::DetectorStateBuilder::state_name)
    /// - [`variables`](crate::types::builders::DetectorStateBuilder::variables)
    /// - [`timers`](crate::types::builders::DetectorStateBuilder::timers)
    pub fn build(self) -> ::std::result::Result<crate::types::DetectorState, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DetectorState {
            state_name: self.state_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state_name",
                    "state_name was not specified but it is required when building DetectorState",
                )
            })?,
            variables: self.variables.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variables",
                    "variables was not specified but it is required when building DetectorState",
                )
            })?,
            timers: self.timers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timers",
                    "timers was not specified but it is required when building DetectorState",
                )
            })?,
        })
    }
}
