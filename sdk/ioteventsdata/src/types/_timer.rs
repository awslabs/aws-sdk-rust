// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current state of a timer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Timer {
    /// <p>The name of the timer.</p>
    pub name: ::std::string::String,
    /// <p>The expiration time for the timer.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
}
impl Timer {
    /// <p>The name of the timer.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The expiration time for the timer.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
}
impl Timer {
    /// Creates a new builder-style object to manufacture [`Timer`](crate::types::Timer).
    pub fn builder() -> crate::types::builders::TimerBuilder {
        crate::types::builders::TimerBuilder::default()
    }
}

/// A builder for [`Timer`](crate::types::Timer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimerBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TimerBuilder {
    /// <p>The name of the timer.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the timer.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the timer.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The expiration time for the timer.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration time for the timer.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The expiration time for the timer.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Consumes the builder and constructs a [`Timer`](crate::types::Timer).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TimerBuilder::name)
    /// - [`timestamp`](crate::types::builders::TimerBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::Timer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Timer {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Timer",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building Timer",
                )
            })?,
        })
    }
}
