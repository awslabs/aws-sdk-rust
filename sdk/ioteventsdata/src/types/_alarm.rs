// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an alarm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Alarm {
    /// <p>The name of the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_name: std::option::Option<std::string::String>,
    /// <p>The version of the alarm model.</p>
    #[doc(hidden)]
    pub alarm_model_version: std::option::Option<std::string::String>,
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    #[doc(hidden)]
    pub key_value: std::option::Option<std::string::String>,
    /// <p>Contains information about the current state of the alarm.</p>
    #[doc(hidden)]
    pub alarm_state: std::option::Option<crate::types::AlarmState>,
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<i32>,
    /// <p>The time the alarm was created, in the Unix epoch format.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time the alarm was last updated, in the Unix epoch format.</p>
    #[doc(hidden)]
    pub last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Alarm {
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(&self) -> std::option::Option<&str> {
        self.alarm_model_name.as_deref()
    }
    /// <p>The version of the alarm model.</p>
    pub fn alarm_model_version(&self) -> std::option::Option<&str> {
        self.alarm_model_version.as_deref()
    }
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    pub fn key_value(&self) -> std::option::Option<&str> {
        self.key_value.as_deref()
    }
    /// <p>Contains information about the current state of the alarm.</p>
    pub fn alarm_state(&self) -> std::option::Option<&crate::types::AlarmState> {
        self.alarm_state.as_ref()
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(&self) -> std::option::Option<i32> {
        self.severity
    }
    /// <p>The time the alarm was created, in the Unix epoch format.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time the alarm was last updated, in the Unix epoch format.</p>
    pub fn last_update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
}
impl Alarm {
    /// Creates a new builder-style object to manufacture [`Alarm`](crate::types::Alarm).
    pub fn builder() -> crate::types::builders::AlarmBuilder {
        crate::types::builders::AlarmBuilder::default()
    }
}

/// A builder for [`Alarm`](crate::types::Alarm).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AlarmBuilder {
    pub(crate) alarm_model_name: std::option::Option<std::string::String>,
    pub(crate) alarm_model_version: std::option::Option<std::string::String>,
    pub(crate) key_value: std::option::Option<std::string::String>,
    pub(crate) alarm_state: std::option::Option<crate::types::AlarmState>,
    pub(crate) severity: std::option::Option<i32>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl AlarmBuilder {
    /// <p>The name of the alarm model.</p>
    pub fn alarm_model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_name = Some(input.into());
        self
    }
    /// <p>The name of the alarm model.</p>
    pub fn set_alarm_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alarm_model_name = input;
        self
    }
    /// <p>The version of the alarm model.</p>
    pub fn alarm_model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_model_version = Some(input.into());
        self
    }
    /// <p>The version of the alarm model.</p>
    pub fn set_alarm_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.alarm_model_version = input;
        self
    }
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    pub fn key_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_value = Some(input.into());
        self
    }
    /// <p>The value of the key used as a filter to select only the alarms associated with the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key">key</a>.</p>
    pub fn set_key_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_value = input;
        self
    }
    /// <p>Contains information about the current state of the alarm.</p>
    pub fn alarm_state(mut self, input: crate::types::AlarmState) -> Self {
        self.alarm_state = Some(input);
        self
    }
    /// <p>Contains information about the current state of the alarm.</p>
    pub fn set_alarm_state(mut self, input: std::option::Option<crate::types::AlarmState>) -> Self {
        self.alarm_state = input;
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn severity(mut self, input: i32) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>A non-negative integer that reflects the severity level of the alarm.</p>
    pub fn set_severity(mut self, input: std::option::Option<i32>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The time the alarm was created, in the Unix epoch format.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time the alarm was created, in the Unix epoch format.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the alarm was last updated, in the Unix epoch format.</p>
    pub fn last_update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_update_time = Some(input);
        self
    }
    /// <p>The time the alarm was last updated, in the Unix epoch format.</p>
    pub fn set_last_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Alarm`](crate::types::Alarm).
    pub fn build(self) -> crate::types::Alarm {
        crate::types::Alarm {
            alarm_model_name: self.alarm_model_name,
            alarm_model_version: self.alarm_model_version,
            key_value: self.key_value,
            alarm_state: self.alarm_state,
            severity: self.severity,
            creation_time: self.creation_time,
            last_update_time: self.last_update_time,
        }
    }
}
