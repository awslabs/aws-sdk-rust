// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information of alarm state changes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StateChangeConfiguration {
    /// <p>The trigger type. If the value is <code>SNOOZE_TIMEOUT</code>, the snooze duration ends and the alarm automatically changes to the <code>NORMAL</code> state.</p>
    #[doc(hidden)]
    pub trigger_type: std::option::Option<crate::types::TriggerType>,
}
impl StateChangeConfiguration {
    /// <p>The trigger type. If the value is <code>SNOOZE_TIMEOUT</code>, the snooze duration ends and the alarm automatically changes to the <code>NORMAL</code> state.</p>
    pub fn trigger_type(&self) -> std::option::Option<&crate::types::TriggerType> {
        self.trigger_type.as_ref()
    }
}
impl StateChangeConfiguration {
    /// Creates a new builder-style object to manufacture [`StateChangeConfiguration`](crate::types::StateChangeConfiguration).
    pub fn builder() -> crate::types::builders::StateChangeConfigurationBuilder {
        crate::types::builders::StateChangeConfigurationBuilder::default()
    }
}

/// A builder for [`StateChangeConfiguration`](crate::types::StateChangeConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StateChangeConfigurationBuilder {
    pub(crate) trigger_type: std::option::Option<crate::types::TriggerType>,
}
impl StateChangeConfigurationBuilder {
    /// <p>The trigger type. If the value is <code>SNOOZE_TIMEOUT</code>, the snooze duration ends and the alarm automatically changes to the <code>NORMAL</code> state.</p>
    pub fn trigger_type(mut self, input: crate::types::TriggerType) -> Self {
        self.trigger_type = Some(input);
        self
    }
    /// <p>The trigger type. If the value is <code>SNOOZE_TIMEOUT</code>, the snooze duration ends and the alarm automatically changes to the <code>NORMAL</code> state.</p>
    pub fn set_trigger_type(
        mut self,
        input: std::option::Option<crate::types::TriggerType>,
    ) -> Self {
        self.trigger_type = input;
        self
    }
    /// Consumes the builder and constructs a [`StateChangeConfiguration`](crate::types::StateChangeConfiguration).
    pub fn build(self) -> crate::types::StateChangeConfiguration {
        crate::types::StateChangeConfiguration {
            trigger_type: self.trigger_type,
        }
    }
}
