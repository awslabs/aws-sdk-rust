// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information of a snooze action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnoozeActionConfiguration {
    /// <p>The snooze time in seconds. The alarm automatically changes to the <code>NORMAL</code> state after this duration.</p>
    #[doc(hidden)]
    pub snooze_duration: std::option::Option<i32>,
    /// <p>The note that you can leave when you snooze the alarm.</p>
    #[doc(hidden)]
    pub note: std::option::Option<std::string::String>,
}
impl SnoozeActionConfiguration {
    /// <p>The snooze time in seconds. The alarm automatically changes to the <code>NORMAL</code> state after this duration.</p>
    pub fn snooze_duration(&self) -> std::option::Option<i32> {
        self.snooze_duration
    }
    /// <p>The note that you can leave when you snooze the alarm.</p>
    pub fn note(&self) -> std::option::Option<&str> {
        self.note.as_deref()
    }
}
impl SnoozeActionConfiguration {
    /// Creates a new builder-style object to manufacture [`SnoozeActionConfiguration`](crate::types::SnoozeActionConfiguration).
    pub fn builder() -> crate::types::builders::SnoozeActionConfigurationBuilder {
        crate::types::builders::SnoozeActionConfigurationBuilder::default()
    }
}

/// A builder for [`SnoozeActionConfiguration`](crate::types::SnoozeActionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnoozeActionConfigurationBuilder {
    pub(crate) snooze_duration: std::option::Option<i32>,
    pub(crate) note: std::option::Option<std::string::String>,
}
impl SnoozeActionConfigurationBuilder {
    /// <p>The snooze time in seconds. The alarm automatically changes to the <code>NORMAL</code> state after this duration.</p>
    pub fn snooze_duration(mut self, input: i32) -> Self {
        self.snooze_duration = Some(input);
        self
    }
    /// <p>The snooze time in seconds. The alarm automatically changes to the <code>NORMAL</code> state after this duration.</p>
    pub fn set_snooze_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.snooze_duration = input;
        self
    }
    /// <p>The note that you can leave when you snooze the alarm.</p>
    pub fn note(mut self, input: impl Into<std::string::String>) -> Self {
        self.note = Some(input.into());
        self
    }
    /// <p>The note that you can leave when you snooze the alarm.</p>
    pub fn set_note(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.note = input;
        self
    }
    /// Consumes the builder and constructs a [`SnoozeActionConfiguration`](crate::types::SnoozeActionConfiguration).
    pub fn build(self) -> crate::types::SnoozeActionConfiguration {
        crate::types::SnoozeActionConfiguration {
            snooze_duration: self.snooze_duration,
            note: self.note,
        }
    }
}
