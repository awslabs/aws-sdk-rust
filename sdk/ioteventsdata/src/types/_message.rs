// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Message {
    /// <p>The ID to assign to the message. Within each batch sent, each <code>"messageId"</code> must be unique.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    /// <p>The name of the input into which the message payload is transformed.</p>
    #[doc(hidden)]
    pub input_name: std::option::Option<std::string::String>,
    /// <p>The payload of the message. This can be a JSON string or a Base-64-encoded string representing binary data (in which case you must decode it).</p>
    #[doc(hidden)]
    pub payload: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The timestamp associated with the message.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<crate::types::TimestampValue>,
}
impl Message {
    /// <p>The ID to assign to the message. Within each batch sent, each <code>"messageId"</code> must be unique.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The name of the input into which the message payload is transformed.</p>
    pub fn input_name(&self) -> std::option::Option<&str> {
        self.input_name.as_deref()
    }
    /// <p>The payload of the message. This can be a JSON string or a Base-64-encoded string representing binary data (in which case you must decode it).</p>
    pub fn payload(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.payload.as_ref()
    }
    /// <p>The timestamp associated with the message.</p>
    pub fn timestamp(&self) -> std::option::Option<&crate::types::TimestampValue> {
        self.timestamp.as_ref()
    }
}
impl Message {
    /// Creates a new builder-style object to manufacture [`Message`](crate::types::Message).
    pub fn builder() -> crate::types::builders::MessageBuilder {
        crate::types::builders::MessageBuilder::default()
    }
}

/// A builder for [`Message`](crate::types::Message).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageBuilder {
    pub(crate) message_id: std::option::Option<std::string::String>,
    pub(crate) input_name: std::option::Option<std::string::String>,
    pub(crate) payload: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) timestamp: std::option::Option<crate::types::TimestampValue>,
}
impl MessageBuilder {
    /// <p>The ID to assign to the message. Within each batch sent, each <code>"messageId"</code> must be unique.</p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The ID to assign to the message. Within each batch sent, each <code>"messageId"</code> must be unique.</p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The name of the input into which the message payload is transformed.</p>
    pub fn input_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_name = Some(input.into());
        self
    }
    /// <p>The name of the input into which the message payload is transformed.</p>
    pub fn set_input_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_name = input;
        self
    }
    /// <p>The payload of the message. This can be a JSON string or a Base-64-encoded string representing binary data (in which case you must decode it).</p>
    pub fn payload(mut self, input: aws_smithy_types::Blob) -> Self {
        self.payload = Some(input);
        self
    }
    /// <p>The payload of the message. This can be a JSON string or a Base-64-encoded string representing binary data (in which case you must decode it).</p>
    pub fn set_payload(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.payload = input;
        self
    }
    /// <p>The timestamp associated with the message.</p>
    pub fn timestamp(mut self, input: crate::types::TimestampValue) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The timestamp associated with the message.</p>
    pub fn set_timestamp(
        mut self,
        input: std::option::Option<crate::types::TimestampValue>,
    ) -> Self {
        self.timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`Message`](crate::types::Message).
    pub fn build(self) -> crate::types::Message {
        crate::types::Message {
            message_id: self.message_id,
            input_name: self.input_name,
            payload: self.payload,
            timestamp: self.timestamp,
        }
    }
}
