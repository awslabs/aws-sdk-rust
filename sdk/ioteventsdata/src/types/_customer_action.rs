// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the action that you can take to respond to the alarm.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomerAction {
    /// <p>The name of the action. The action name can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SNOOZE</code> - When you snooze the alarm, the alarm state changes to <code>SNOOZE_DISABLED</code>.</p> </li>
    /// <li> <p> <code>ENABLE</code> - When you enable the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// <li> <p> <code>DISABLE</code> - When you disable the alarm, the alarm state changes to <code>DISABLED</code>.</p> </li>
    /// <li> <p> <code>ACKNOWLEDGE</code> - When you acknowledge the alarm, the alarm state changes to <code>ACKNOWLEDGED</code>.</p> </li>
    /// <li> <p> <code>RESET</code> - When you reset the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// </ul>
    /// <p>For more information, see the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html">AlarmState</a> API.</p>
    #[doc(hidden)]
    pub action_name: std::option::Option<crate::types::CustomerActionName>,
    /// <p>Contains the configuration information of a snooze action.</p>
    #[doc(hidden)]
    pub snooze_action_configuration: std::option::Option<crate::types::SnoozeActionConfiguration>,
    /// <p>Contains the configuration information of an enable action.</p>
    #[doc(hidden)]
    pub enable_action_configuration: std::option::Option<crate::types::EnableActionConfiguration>,
    /// <p>Contains the configuration information of a disable action.</p>
    #[doc(hidden)]
    pub disable_action_configuration: std::option::Option<crate::types::DisableActionConfiguration>,
    /// <p>Contains the configuration information of an acknowledge action.</p>
    #[doc(hidden)]
    pub acknowledge_action_configuration:
        std::option::Option<crate::types::AcknowledgeActionConfiguration>,
    /// <p>Contains the configuration information of a reset action.</p>
    #[doc(hidden)]
    pub reset_action_configuration: std::option::Option<crate::types::ResetActionConfiguration>,
}
impl CustomerAction {
    /// <p>The name of the action. The action name can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SNOOZE</code> - When you snooze the alarm, the alarm state changes to <code>SNOOZE_DISABLED</code>.</p> </li>
    /// <li> <p> <code>ENABLE</code> - When you enable the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// <li> <p> <code>DISABLE</code> - When you disable the alarm, the alarm state changes to <code>DISABLED</code>.</p> </li>
    /// <li> <p> <code>ACKNOWLEDGE</code> - When you acknowledge the alarm, the alarm state changes to <code>ACKNOWLEDGED</code>.</p> </li>
    /// <li> <p> <code>RESET</code> - When you reset the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// </ul>
    /// <p>For more information, see the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html">AlarmState</a> API.</p>
    pub fn action_name(&self) -> std::option::Option<&crate::types::CustomerActionName> {
        self.action_name.as_ref()
    }
    /// <p>Contains the configuration information of a snooze action.</p>
    pub fn snooze_action_configuration(
        &self,
    ) -> std::option::Option<&crate::types::SnoozeActionConfiguration> {
        self.snooze_action_configuration.as_ref()
    }
    /// <p>Contains the configuration information of an enable action.</p>
    pub fn enable_action_configuration(
        &self,
    ) -> std::option::Option<&crate::types::EnableActionConfiguration> {
        self.enable_action_configuration.as_ref()
    }
    /// <p>Contains the configuration information of a disable action.</p>
    pub fn disable_action_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DisableActionConfiguration> {
        self.disable_action_configuration.as_ref()
    }
    /// <p>Contains the configuration information of an acknowledge action.</p>
    pub fn acknowledge_action_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AcknowledgeActionConfiguration> {
        self.acknowledge_action_configuration.as_ref()
    }
    /// <p>Contains the configuration information of a reset action.</p>
    pub fn reset_action_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ResetActionConfiguration> {
        self.reset_action_configuration.as_ref()
    }
}
impl CustomerAction {
    /// Creates a new builder-style object to manufacture [`CustomerAction`](crate::types::CustomerAction).
    pub fn builder() -> crate::types::builders::CustomerActionBuilder {
        crate::types::builders::CustomerActionBuilder::default()
    }
}

/// A builder for [`CustomerAction`](crate::types::CustomerAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomerActionBuilder {
    pub(crate) action_name: std::option::Option<crate::types::CustomerActionName>,
    pub(crate) snooze_action_configuration:
        std::option::Option<crate::types::SnoozeActionConfiguration>,
    pub(crate) enable_action_configuration:
        std::option::Option<crate::types::EnableActionConfiguration>,
    pub(crate) disable_action_configuration:
        std::option::Option<crate::types::DisableActionConfiguration>,
    pub(crate) acknowledge_action_configuration:
        std::option::Option<crate::types::AcknowledgeActionConfiguration>,
    pub(crate) reset_action_configuration:
        std::option::Option<crate::types::ResetActionConfiguration>,
}
impl CustomerActionBuilder {
    /// <p>The name of the action. The action name can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SNOOZE</code> - When you snooze the alarm, the alarm state changes to <code>SNOOZE_DISABLED</code>.</p> </li>
    /// <li> <p> <code>ENABLE</code> - When you enable the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// <li> <p> <code>DISABLE</code> - When you disable the alarm, the alarm state changes to <code>DISABLED</code>.</p> </li>
    /// <li> <p> <code>ACKNOWLEDGE</code> - When you acknowledge the alarm, the alarm state changes to <code>ACKNOWLEDGED</code>.</p> </li>
    /// <li> <p> <code>RESET</code> - When you reset the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// </ul>
    /// <p>For more information, see the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html">AlarmState</a> API.</p>
    pub fn action_name(mut self, input: crate::types::CustomerActionName) -> Self {
        self.action_name = Some(input);
        self
    }
    /// <p>The name of the action. The action name can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>SNOOZE</code> - When you snooze the alarm, the alarm state changes to <code>SNOOZE_DISABLED</code>.</p> </li>
    /// <li> <p> <code>ENABLE</code> - When you enable the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// <li> <p> <code>DISABLE</code> - When you disable the alarm, the alarm state changes to <code>DISABLED</code>.</p> </li>
    /// <li> <p> <code>ACKNOWLEDGE</code> - When you acknowledge the alarm, the alarm state changes to <code>ACKNOWLEDGED</code>.</p> </li>
    /// <li> <p> <code>RESET</code> - When you reset the alarm, the alarm state changes to <code>NORMAL</code>.</p> </li>
    /// </ul>
    /// <p>For more information, see the <a href="https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_AlarmState.html">AlarmState</a> API.</p>
    pub fn set_action_name(
        mut self,
        input: std::option::Option<crate::types::CustomerActionName>,
    ) -> Self {
        self.action_name = input;
        self
    }
    /// <p>Contains the configuration information of a snooze action.</p>
    pub fn snooze_action_configuration(
        mut self,
        input: crate::types::SnoozeActionConfiguration,
    ) -> Self {
        self.snooze_action_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of a snooze action.</p>
    pub fn set_snooze_action_configuration(
        mut self,
        input: std::option::Option<crate::types::SnoozeActionConfiguration>,
    ) -> Self {
        self.snooze_action_configuration = input;
        self
    }
    /// <p>Contains the configuration information of an enable action.</p>
    pub fn enable_action_configuration(
        mut self,
        input: crate::types::EnableActionConfiguration,
    ) -> Self {
        self.enable_action_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of an enable action.</p>
    pub fn set_enable_action_configuration(
        mut self,
        input: std::option::Option<crate::types::EnableActionConfiguration>,
    ) -> Self {
        self.enable_action_configuration = input;
        self
    }
    /// <p>Contains the configuration information of a disable action.</p>
    pub fn disable_action_configuration(
        mut self,
        input: crate::types::DisableActionConfiguration,
    ) -> Self {
        self.disable_action_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of a disable action.</p>
    pub fn set_disable_action_configuration(
        mut self,
        input: std::option::Option<crate::types::DisableActionConfiguration>,
    ) -> Self {
        self.disable_action_configuration = input;
        self
    }
    /// <p>Contains the configuration information of an acknowledge action.</p>
    pub fn acknowledge_action_configuration(
        mut self,
        input: crate::types::AcknowledgeActionConfiguration,
    ) -> Self {
        self.acknowledge_action_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of an acknowledge action.</p>
    pub fn set_acknowledge_action_configuration(
        mut self,
        input: std::option::Option<crate::types::AcknowledgeActionConfiguration>,
    ) -> Self {
        self.acknowledge_action_configuration = input;
        self
    }
    /// <p>Contains the configuration information of a reset action.</p>
    pub fn reset_action_configuration(
        mut self,
        input: crate::types::ResetActionConfiguration,
    ) -> Self {
        self.reset_action_configuration = Some(input);
        self
    }
    /// <p>Contains the configuration information of a reset action.</p>
    pub fn set_reset_action_configuration(
        mut self,
        input: std::option::Option<crate::types::ResetActionConfiguration>,
    ) -> Self {
        self.reset_action_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomerAction`](crate::types::CustomerAction).
    pub fn build(self) -> crate::types::CustomerAction {
        crate::types::CustomerAction {
            action_name: self.action_name,
            snooze_action_configuration: self.snooze_action_configuration,
            enable_action_configuration: self.enable_action_configuration,
            disable_action_configuration: self.disable_action_configuration,
            acknowledge_action_configuration: self.acknowledge_action_configuration,
            reset_action_configuration: self.reset_action_configuration,
        }
    }
}
