// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information needed to compare two values with a comparison operator.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimpleRuleEvaluation {
    /// <p>The value of the input property, on the left side of the comparison operator.</p>
    #[doc(hidden)]
    pub input_property_value: std::option::Option<std::string::String>,
    /// <p>The comparison operator.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::ComparisonOperator>,
    /// <p>The threshold value, on the right side of the comparison operator.</p>
    #[doc(hidden)]
    pub threshold_value: std::option::Option<std::string::String>,
}
impl SimpleRuleEvaluation {
    /// <p>The value of the input property, on the left side of the comparison operator.</p>
    pub fn input_property_value(&self) -> std::option::Option<&str> {
        self.input_property_value.as_deref()
    }
    /// <p>The comparison operator.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::ComparisonOperator> {
        self.operator.as_ref()
    }
    /// <p>The threshold value, on the right side of the comparison operator.</p>
    pub fn threshold_value(&self) -> std::option::Option<&str> {
        self.threshold_value.as_deref()
    }
}
impl SimpleRuleEvaluation {
    /// Creates a new builder-style object to manufacture [`SimpleRuleEvaluation`](crate::types::SimpleRuleEvaluation).
    pub fn builder() -> crate::types::builders::SimpleRuleEvaluationBuilder {
        crate::types::builders::SimpleRuleEvaluationBuilder::default()
    }
}

/// A builder for [`SimpleRuleEvaluation`](crate::types::SimpleRuleEvaluation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimpleRuleEvaluationBuilder {
    pub(crate) input_property_value: std::option::Option<std::string::String>,
    pub(crate) operator: std::option::Option<crate::types::ComparisonOperator>,
    pub(crate) threshold_value: std::option::Option<std::string::String>,
}
impl SimpleRuleEvaluationBuilder {
    /// <p>The value of the input property, on the left side of the comparison operator.</p>
    pub fn input_property_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_property_value = Some(input.into());
        self
    }
    /// <p>The value of the input property, on the left side of the comparison operator.</p>
    pub fn set_input_property_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.input_property_value = input;
        self
    }
    /// <p>The comparison operator.</p>
    pub fn operator(mut self, input: crate::types::ComparisonOperator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>The comparison operator.</p>
    pub fn set_operator(
        mut self,
        input: std::option::Option<crate::types::ComparisonOperator>,
    ) -> Self {
        self.operator = input;
        self
    }
    /// <p>The threshold value, on the right side of the comparison operator.</p>
    pub fn threshold_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.threshold_value = Some(input.into());
        self
    }
    /// <p>The threshold value, on the right side of the comparison operator.</p>
    pub fn set_threshold_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.threshold_value = input;
        self
    }
    /// Consumes the builder and constructs a [`SimpleRuleEvaluation`](crate::types::SimpleRuleEvaluation).
    pub fn build(self) -> crate::types::SimpleRuleEvaluation {
        crate::types::SimpleRuleEvaluation {
            input_property_value: self.input_property_value,
            operator: self.operator,
            threshold_value: self.threshold_value,
        }
    }
}
