// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Acknowledges one or more alarms. The alarms change to the <code>ACKNOWLEDGED</code> state
/// after you acknowledge them.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchAcknowledgeAlarm {
    _private: (),
}
impl BatchAcknowledgeAlarm {
    /// Creates a new builder-style object to manufacture [`BatchAcknowledgeAlarmInput`](crate::input::BatchAcknowledgeAlarmInput)
    pub fn builder() -> crate::input::batch_acknowledge_alarm_input::Builder {
        crate::input::batch_acknowledge_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchAcknowledgeAlarm {
    type Output = std::result::Result<
        crate::output::BatchAcknowledgeAlarmOutput,
        crate::error::BatchAcknowledgeAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_batch_acknowledge_alarm_error(response)
        } else {
            crate::operation_deser::parse_batch_acknowledge_alarm_response(response)
        }
    }
}

/// <p>Disables one or more alarms. The alarms change to the <code>DISABLED</code> state after
/// you disable them.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisableAlarm {
    _private: (),
}
impl BatchDisableAlarm {
    /// Creates a new builder-style object to manufacture [`BatchDisableAlarmInput`](crate::input::BatchDisableAlarmInput)
    pub fn builder() -> crate::input::batch_disable_alarm_input::Builder {
        crate::input::batch_disable_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDisableAlarm {
    type Output = std::result::Result<
        crate::output::BatchDisableAlarmOutput,
        crate::error::BatchDisableAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_batch_disable_alarm_error(response)
        } else {
            crate::operation_deser::parse_batch_disable_alarm_response(response)
        }
    }
}

/// <p>Enables one or more alarms. The alarms change to the <code>NORMAL</code> state after you
/// enable them.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchEnableAlarm {
    _private: (),
}
impl BatchEnableAlarm {
    /// Creates a new builder-style object to manufacture [`BatchEnableAlarmInput`](crate::input::BatchEnableAlarmInput)
    pub fn builder() -> crate::input::batch_enable_alarm_input::Builder {
        crate::input::batch_enable_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchEnableAlarm {
    type Output = std::result::Result<
        crate::output::BatchEnableAlarmOutput,
        crate::error::BatchEnableAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_batch_enable_alarm_error(response)
        } else {
            crate::operation_deser::parse_batch_enable_alarm_response(response)
        }
    }
}

/// <p>Sends a set of messages to the AWS IoT Events system. Each message payload is transformed into
/// the input you specify (<code>"inputName"</code>) and ingested into any detectors that monitor
/// that input. If multiple messages are sent, the order in which the messages are processed isn't
/// guaranteed. To guarantee ordering, you must send messages one at a time and wait for a
/// successful response.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchPutMessage {
    _private: (),
}
impl BatchPutMessage {
    /// Creates a new builder-style object to manufacture [`BatchPutMessageInput`](crate::input::BatchPutMessageInput)
    pub fn builder() -> crate::input::batch_put_message_input::Builder {
        crate::input::batch_put_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchPutMessage {
    type Output = std::result::Result<
        crate::output::BatchPutMessageOutput,
        crate::error::BatchPutMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_put_message_error(response)
        } else {
            crate::operation_deser::parse_batch_put_message_response(response)
        }
    }
}

/// <p>Resets one or more alarms. The alarms return to the <code>NORMAL</code> state after you
/// reset them.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchResetAlarm {
    _private: (),
}
impl BatchResetAlarm {
    /// Creates a new builder-style object to manufacture [`BatchResetAlarmInput`](crate::input::BatchResetAlarmInput)
    pub fn builder() -> crate::input::batch_reset_alarm_input::Builder {
        crate::input::batch_reset_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchResetAlarm {
    type Output = std::result::Result<
        crate::output::BatchResetAlarmOutput,
        crate::error::BatchResetAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_batch_reset_alarm_error(response)
        } else {
            crate::operation_deser::parse_batch_reset_alarm_response(response)
        }
    }
}

/// <p>Changes one or more alarms to the snooze mode. The alarms change to the
/// <code>SNOOZE_DISABLED</code> state after you set them to the snooze mode.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchSnoozeAlarm {
    _private: (),
}
impl BatchSnoozeAlarm {
    /// Creates a new builder-style object to manufacture [`BatchSnoozeAlarmInput`](crate::input::BatchSnoozeAlarmInput)
    pub fn builder() -> crate::input::batch_snooze_alarm_input::Builder {
        crate::input::batch_snooze_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchSnoozeAlarm {
    type Output = std::result::Result<
        crate::output::BatchSnoozeAlarmOutput,
        crate::error::BatchSnoozeAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_batch_snooze_alarm_error(response)
        } else {
            crate::operation_deser::parse_batch_snooze_alarm_response(response)
        }
    }
}

/// <p>Updates the state, variable values, and timer settings of one or more detectors
/// (instances) of a specified detector model.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchUpdateDetector {
    _private: (),
}
impl BatchUpdateDetector {
    /// Creates a new builder-style object to manufacture [`BatchUpdateDetectorInput`](crate::input::BatchUpdateDetectorInput)
    pub fn builder() -> crate::input::batch_update_detector_input::Builder {
        crate::input::batch_update_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchUpdateDetector {
    type Output = std::result::Result<
        crate::output::BatchUpdateDetectorOutput,
        crate::error::BatchUpdateDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_update_detector_error(response)
        } else {
            crate::operation_deser::parse_batch_update_detector_response(response)
        }
    }
}

/// <p>Retrieves information about an alarm.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeAlarm {
    _private: (),
}
impl DescribeAlarm {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmInput`](crate::input::DescribeAlarmInput)
    pub fn builder() -> crate::input::describe_alarm_input::Builder {
        crate::input::describe_alarm_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeAlarm {
    type Output =
        std::result::Result<crate::output::DescribeAlarmOutput, crate::error::DescribeAlarmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_alarm_error(response)
        } else {
            crate::operation_deser::parse_describe_alarm_response(response)
        }
    }
}

/// <p>Returns information about the specified detector (instance).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDetector {
    _private: (),
}
impl DescribeDetector {
    /// Creates a new builder-style object to manufacture [`DescribeDetectorInput`](crate::input::DescribeDetectorInput)
    pub fn builder() -> crate::input::describe_detector_input::Builder {
        crate::input::describe_detector_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDetector {
    type Output = std::result::Result<
        crate::output::DescribeDetectorOutput,
        crate::error::DescribeDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_detector_error(response)
        } else {
            crate::operation_deser::parse_describe_detector_response(response)
        }
    }
}

/// <p>Lists one or more alarms. The operation returns only the metadata associated with each
/// alarm.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAlarms {
    _private: (),
}
impl ListAlarms {
    /// Creates a new builder-style object to manufacture [`ListAlarmsInput`](crate::input::ListAlarmsInput)
    pub fn builder() -> crate::input::list_alarms_input::Builder {
        crate::input::list_alarms_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAlarms {
    type Output =
        std::result::Result<crate::output::ListAlarmsOutput, crate::error::ListAlarmsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_alarms_error(response)
        } else {
            crate::operation_deser::parse_list_alarms_response(response)
        }
    }
}

/// <p>Lists detectors (the instances of a detector model).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDetectors {
    _private: (),
}
impl ListDetectors {
    /// Creates a new builder-style object to manufacture [`ListDetectorsInput`](crate::input::ListDetectorsInput)
    pub fn builder() -> crate::input::list_detectors_input::Builder {
        crate::input::list_detectors_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDetectors {
    type Output =
        std::result::Result<crate::output::ListDetectorsOutput, crate::error::ListDetectorsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_detectors_error(response)
        } else {
            crate::operation_deser::parse_list_detectors_response(response)
        }
    }
}
