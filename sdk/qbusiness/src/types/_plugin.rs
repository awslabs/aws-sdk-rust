// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an Amazon Q Business plugin and its configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Plugin {
    /// <p>The identifier of the plugin.</p>
    pub plugin_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the plugin.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the plugin.</p>
    pub r#type: ::std::option::Option<crate::types::PluginType>,
    /// <p>The plugin server URL used for configuration.</p>
    pub server_url: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the plugin.</p>
    pub state: ::std::option::Option<crate::types::PluginState>,
    /// <p>The timestamp for when the plugin was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl Plugin {
    /// <p>The identifier of the plugin.</p>
    pub fn plugin_id(&self) -> ::std::option::Option<&str> {
        self.plugin_id.as_deref()
    }
    /// <p>The name of the plugin.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The type of the plugin.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PluginType> {
        self.r#type.as_ref()
    }
    /// <p>The plugin server URL used for configuration.</p>
    pub fn server_url(&self) -> ::std::option::Option<&str> {
        self.server_url.as_deref()
    }
    /// <p>The current status of the plugin.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::PluginState> {
        self.state.as_ref()
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl Plugin {
    /// Creates a new builder-style object to manufacture [`Plugin`](crate::types::Plugin).
    pub fn builder() -> crate::types::builders::PluginBuilder {
        crate::types::builders::PluginBuilder::default()
    }
}

/// A builder for [`Plugin`](crate::types::Plugin).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PluginBuilder {
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PluginType>,
    pub(crate) server_url: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::PluginState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl PluginBuilder {
    /// <p>The identifier of the plugin.</p>
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// <p>The name of the plugin.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the plugin.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the plugin.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The type of the plugin.</p>
    pub fn r#type(mut self, input: crate::types::PluginType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PluginType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PluginType> {
        &self.r#type
    }
    /// <p>The plugin server URL used for configuration.</p>
    pub fn server_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The plugin server URL used for configuration.</p>
    pub fn set_server_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_url = input;
        self
    }
    /// <p>The plugin server URL used for configuration.</p>
    pub fn get_server_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_url
    }
    /// <p>The current status of the plugin.</p>
    pub fn state(mut self, input: crate::types::PluginState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the plugin.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PluginState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current status of the plugin.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PluginState> {
        &self.state
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`Plugin`](crate::types::Plugin).
    pub fn build(self) -> crate::types::Plugin {
        crate::types::Plugin {
            plugin_id: self.plugin_id,
            display_name: self.display_name,
            r#type: self.r#type,
            server_url: self.server_url,
            state: self.state,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
