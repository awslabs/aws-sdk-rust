// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The target document attribute or metadata field you want to alter when ingesting documents into Amazon Q Business.</p>
/// <p>For example, you can delete all customer identification numbers associated with the documents, stored in the document metadata field called 'Customer_ID' by setting the target key as 'Customer_ID' and the deletion flag to <code>TRUE</code>. This removes all customer ID values in the field 'Customer_ID'. This would scrub personally identifiable information from each document's metadata.</p>
/// <p>Amazon Q Business can't create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using <a href="https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeTarget.html"> <code>DocumentAttributeTarget</code> </a>. Amazon Q Business will then map your newly created document attribute to your index field.</p>
/// <p>You can also use this with <a href="https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeCondition.html"> <code>DocumentAttributeCondition</code> </a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAttributeTarget {
    /// <p>The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub key: ::std::string::String,
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub value: ::std::option::Option<crate::types::DocumentAttributeValue>,
    /// <p><code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>.</p>
    pub attribute_value_operator: ::std::option::Option<crate::types::AttributeValueOperator>,
}
impl DocumentAttributeTarget {
    /// <p>The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::DocumentAttributeValue> {
        self.value.as_ref()
    }
    /// <p><code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>.</p>
    pub fn attribute_value_operator(&self) -> ::std::option::Option<&crate::types::AttributeValueOperator> {
        self.attribute_value_operator.as_ref()
    }
}
impl DocumentAttributeTarget {
    /// Creates a new builder-style object to manufacture [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
    pub fn builder() -> crate::types::builders::DocumentAttributeTargetBuilder {
        crate::types::builders::DocumentAttributeTargetBuilder::default()
    }
}

/// A builder for [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentAttributeTargetBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<crate::types::DocumentAttributeValue>,
    pub(crate) attribute_value_operator: ::std::option::Option<crate::types::AttributeValueOperator>,
}
impl DocumentAttributeTargetBuilder {
    /// <p>The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn value(mut self, input: crate::types::DocumentAttributeValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::DocumentAttributeValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::DocumentAttributeValue> {
        &self.value
    }
    /// <p><code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>.</p>
    pub fn attribute_value_operator(mut self, input: crate::types::AttributeValueOperator) -> Self {
        self.attribute_value_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p><code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>.</p>
    pub fn set_attribute_value_operator(mut self, input: ::std::option::Option<crate::types::AttributeValueOperator>) -> Self {
        self.attribute_value_operator = input;
        self
    }
    /// <p><code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>.</p>
    pub fn get_attribute_value_operator(&self) -> &::std::option::Option<crate::types::AttributeValueOperator> {
        &self.attribute_value_operator
    }
    /// Consumes the builder and constructs a [`DocumentAttributeTarget`](crate::types::DocumentAttributeTarget).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::DocumentAttributeTargetBuilder::key)
    pub fn build(self) -> ::std::result::Result<crate::types::DocumentAttributeTarget, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocumentAttributeTarget {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building DocumentAttributeTarget",
                )
            })?,
            value: self.value,
            attribute_value_operator: self.attribute_value_operator,
        })
    }
}
