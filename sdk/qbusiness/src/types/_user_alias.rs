// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Aliases attached to a user id within an Amazon Q Business application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserAlias {
    /// <p>The identifier of the index that the user aliases are associated with.</p>
    pub index_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the data source that the user aliases are associated with.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user id associated with the user aliases.</p>
    pub user_id: ::std::string::String,
}
impl UserAlias {
    /// <p>The identifier of the index that the user aliases are associated with.</p>
    pub fn index_id(&self) -> ::std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifier of the data source that the user aliases are associated with.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>The identifier of the user id associated with the user aliases.</p>
    pub fn user_id(&self) -> &str {
        use std::ops::Deref;
        self.user_id.deref()
    }
}
impl UserAlias {
    /// Creates a new builder-style object to manufacture [`UserAlias`](crate::types::UserAlias).
    pub fn builder() -> crate::types::builders::UserAliasBuilder {
        crate::types::builders::UserAliasBuilder::default()
    }
}

/// A builder for [`UserAlias`](crate::types::UserAlias).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserAliasBuilder {
    pub(crate) index_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl UserAliasBuilder {
    /// <p>The identifier of the index that the user aliases are associated with.</p>
    pub fn index_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the index that the user aliases are associated with.</p>
    pub fn set_index_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the index that the user aliases are associated with.</p>
    pub fn get_index_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_id
    }
    /// <p>The identifier of the data source that the user aliases are associated with.</p>
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source that the user aliases are associated with.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the data source that the user aliases are associated with.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>The identifier of the user id associated with the user aliases.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user id associated with the user aliases.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user id associated with the user aliases.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`UserAlias`](crate::types::UserAlias).
    /// This method will fail if any of the following fields are not set:
    /// - [`user_id`](crate::types::builders::UserAliasBuilder::user_id)
    pub fn build(self) -> ::std::result::Result<crate::types::UserAlias, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserAlias {
            index_id: self.index_id,
            data_source_id: self.data_source_id,
            user_id: self.user_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id",
                    "user_id was not specified but it is required when building UserAlias",
                )
            })?,
        })
    }
}
