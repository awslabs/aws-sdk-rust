// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Guardrail rules for an Amazon Q Business application. Amazon Q Business supports only one rule at a time.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Rule {
    /// <p>Users and groups to be included in a rule.</p>
    pub included_users_and_groups: ::std::option::Option<crate::types::UsersAndGroups>,
    /// <p>Users and groups to be excluded from a rule.</p>
    pub excluded_users_and_groups: ::std::option::Option<crate::types::UsersAndGroups>,
    /// <p>The type of rule.</p>
    pub rule_type: crate::types::RuleType,
    /// <p>The configuration information for a rule.</p>
    pub rule_configuration: ::std::option::Option<crate::types::RuleConfiguration>,
}
impl Rule {
    /// <p>Users and groups to be included in a rule.</p>
    pub fn included_users_and_groups(&self) -> ::std::option::Option<&crate::types::UsersAndGroups> {
        self.included_users_and_groups.as_ref()
    }
    /// <p>Users and groups to be excluded from a rule.</p>
    pub fn excluded_users_and_groups(&self) -> ::std::option::Option<&crate::types::UsersAndGroups> {
        self.excluded_users_and_groups.as_ref()
    }
    /// <p>The type of rule.</p>
    pub fn rule_type(&self) -> &crate::types::RuleType {
        &self.rule_type
    }
    /// <p>The configuration information for a rule.</p>
    pub fn rule_configuration(&self) -> ::std::option::Option<&crate::types::RuleConfiguration> {
        self.rule_configuration.as_ref()
    }
}
impl Rule {
    /// Creates a new builder-style object to manufacture [`Rule`](crate::types::Rule).
    pub fn builder() -> crate::types::builders::RuleBuilder {
        crate::types::builders::RuleBuilder::default()
    }
}

/// A builder for [`Rule`](crate::types::Rule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RuleBuilder {
    pub(crate) included_users_and_groups: ::std::option::Option<crate::types::UsersAndGroups>,
    pub(crate) excluded_users_and_groups: ::std::option::Option<crate::types::UsersAndGroups>,
    pub(crate) rule_type: ::std::option::Option<crate::types::RuleType>,
    pub(crate) rule_configuration: ::std::option::Option<crate::types::RuleConfiguration>,
}
impl RuleBuilder {
    /// <p>Users and groups to be included in a rule.</p>
    pub fn included_users_and_groups(mut self, input: crate::types::UsersAndGroups) -> Self {
        self.included_users_and_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>Users and groups to be included in a rule.</p>
    pub fn set_included_users_and_groups(mut self, input: ::std::option::Option<crate::types::UsersAndGroups>) -> Self {
        self.included_users_and_groups = input;
        self
    }
    /// <p>Users and groups to be included in a rule.</p>
    pub fn get_included_users_and_groups(&self) -> &::std::option::Option<crate::types::UsersAndGroups> {
        &self.included_users_and_groups
    }
    /// <p>Users and groups to be excluded from a rule.</p>
    pub fn excluded_users_and_groups(mut self, input: crate::types::UsersAndGroups) -> Self {
        self.excluded_users_and_groups = ::std::option::Option::Some(input);
        self
    }
    /// <p>Users and groups to be excluded from a rule.</p>
    pub fn set_excluded_users_and_groups(mut self, input: ::std::option::Option<crate::types::UsersAndGroups>) -> Self {
        self.excluded_users_and_groups = input;
        self
    }
    /// <p>Users and groups to be excluded from a rule.</p>
    pub fn get_excluded_users_and_groups(&self) -> &::std::option::Option<crate::types::UsersAndGroups> {
        &self.excluded_users_and_groups
    }
    /// <p>The type of rule.</p>
    /// This field is required.
    pub fn rule_type(mut self, input: crate::types::RuleType) -> Self {
        self.rule_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of rule.</p>
    pub fn set_rule_type(mut self, input: ::std::option::Option<crate::types::RuleType>) -> Self {
        self.rule_type = input;
        self
    }
    /// <p>The type of rule.</p>
    pub fn get_rule_type(&self) -> &::std::option::Option<crate::types::RuleType> {
        &self.rule_type
    }
    /// <p>The configuration information for a rule.</p>
    pub fn rule_configuration(mut self, input: crate::types::RuleConfiguration) -> Self {
        self.rule_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information for a rule.</p>
    pub fn set_rule_configuration(mut self, input: ::std::option::Option<crate::types::RuleConfiguration>) -> Self {
        self.rule_configuration = input;
        self
    }
    /// <p>The configuration information for a rule.</p>
    pub fn get_rule_configuration(&self) -> &::std::option::Option<crate::types::RuleConfiguration> {
        &self.rule_configuration
    }
    /// Consumes the builder and constructs a [`Rule`](crate::types::Rule).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_type`](crate::types::builders::RuleBuilder::rule_type)
    pub fn build(self) -> ::std::result::Result<crate::types::Rule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Rule {
            included_users_and_groups: self.included_users_and_groups,
            excluded_users_and_groups: self.excluded_users_and_groups,
            rule_type: self.rule_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_type",
                    "rule_type was not specified but it is required when building Rule",
                )
            })?,
            rule_configuration: self.rule_configuration,
        })
    }
}
