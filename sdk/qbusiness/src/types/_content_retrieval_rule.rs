// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Rules for retrieving content from data sources connected to a Amazon Q Business application for a specific topic control configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentRetrievalRule {
    /// <p>Specifies data sources in a Amazon Q Business application to use for content generation.</p>
    pub eligible_data_sources: ::std::option::Option<::std::vec::Vec<crate::types::EligibleDataSource>>,
}
impl ContentRetrievalRule {
    /// <p>Specifies data sources in a Amazon Q Business application to use for content generation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.eligible_data_sources.is_none()`.
    pub fn eligible_data_sources(&self) -> &[crate::types::EligibleDataSource] {
        self.eligible_data_sources.as_deref().unwrap_or_default()
    }
}
impl ContentRetrievalRule {
    /// Creates a new builder-style object to manufacture [`ContentRetrievalRule`](crate::types::ContentRetrievalRule).
    pub fn builder() -> crate::types::builders::ContentRetrievalRuleBuilder {
        crate::types::builders::ContentRetrievalRuleBuilder::default()
    }
}

/// A builder for [`ContentRetrievalRule`](crate::types::ContentRetrievalRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContentRetrievalRuleBuilder {
    pub(crate) eligible_data_sources: ::std::option::Option<::std::vec::Vec<crate::types::EligibleDataSource>>,
}
impl ContentRetrievalRuleBuilder {
    /// Appends an item to `eligible_data_sources`.
    ///
    /// To override the contents of this collection use [`set_eligible_data_sources`](Self::set_eligible_data_sources).
    ///
    /// <p>Specifies data sources in a Amazon Q Business application to use for content generation.</p>
    pub fn eligible_data_sources(mut self, input: crate::types::EligibleDataSource) -> Self {
        let mut v = self.eligible_data_sources.unwrap_or_default();
        v.push(input);
        self.eligible_data_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies data sources in a Amazon Q Business application to use for content generation.</p>
    pub fn set_eligible_data_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EligibleDataSource>>) -> Self {
        self.eligible_data_sources = input;
        self
    }
    /// <p>Specifies data sources in a Amazon Q Business application to use for content generation.</p>
    pub fn get_eligible_data_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EligibleDataSource>> {
        &self.eligible_data_sources
    }
    /// Consumes the builder and constructs a [`ContentRetrievalRule`](crate::types::ContentRetrievalRule).
    pub fn build(self) -> crate::types::ContentRetrievalRule {
        crate::types::ContentRetrievalRule {
            eligible_data_sources: self.eligible_data_sources,
        }
    }
}
