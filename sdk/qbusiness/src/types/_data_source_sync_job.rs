// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an Amazon Q Business data source connector synchronization job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceSyncJob {
    /// <p>The identifier of a data source synchronization job.</p>
    pub execution_id: ::std::option::Option<::std::string::String>,
    /// <p>The Unix time stamp when the data source synchronization job started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp when the synchronization job completed.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub status: ::std::option::Option<crate::types::DataSourceSyncJobStatus>,
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub data_source_error_code: ::std::option::Option<::std::string::String>,
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub metrics: ::std::option::Option<crate::types::DataSourceSyncJobMetrics>,
}
impl DataSourceSyncJob {
    /// <p>The identifier of a data source synchronization job.</p>
    pub fn execution_id(&self) -> ::std::option::Option<&str> {
        self.execution_id.as_deref()
    }
    /// <p>The Unix time stamp when the data source synchronization job started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The Unix timestamp when the synchronization job completed.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DataSourceSyncJobStatus> {
        self.status.as_ref()
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn data_source_error_code(&self) -> ::std::option::Option<&str> {
        self.data_source_error_code.as_deref()
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn metrics(&self) -> ::std::option::Option<&crate::types::DataSourceSyncJobMetrics> {
        self.metrics.as_ref()
    }
}
impl DataSourceSyncJob {
    /// Creates a new builder-style object to manufacture [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
    pub fn builder() -> crate::types::builders::DataSourceSyncJobBuilder {
        crate::types::builders::DataSourceSyncJobBuilder::default()
    }
}

/// A builder for [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSourceSyncJobBuilder {
    pub(crate) execution_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::DataSourceSyncJobStatus>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) data_source_error_code: ::std::option::Option<::std::string::String>,
    pub(crate) metrics: ::std::option::Option<crate::types::DataSourceSyncJobMetrics>,
}
impl DataSourceSyncJobBuilder {
    /// <p>The identifier of a data source synchronization job.</p>
    pub fn execution_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a data source synchronization job.</p>
    pub fn set_execution_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_id = input;
        self
    }
    /// <p>The identifier of a data source synchronization job.</p>
    pub fn get_execution_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_id
    }
    /// <p>The Unix time stamp when the data source synchronization job started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix time stamp when the data source synchronization job started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The Unix time stamp when the data source synchronization job started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The Unix timestamp when the synchronization job completed.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the synchronization job completed.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The Unix timestamp when the synchronization job completed.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn status(mut self, input: crate::types::DataSourceSyncJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DataSourceSyncJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the synchronization job. When the <code>Status</code> field is set to <code>SUCCEEDED</code>, the synchronization job is done. If the status code is <code>FAILED</code>, the <code>ErrorCode</code> and <code>ErrorMessage</code> fields give you the reason for the failure.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DataSourceSyncJobStatus> {
        &self.status
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>If the <code>Status</code> field is set to <code>FAILED</code>, the <code>ErrorCode</code> field indicates the reason the synchronization failed.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn data_source_error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn set_data_source_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_error_code = input;
        self
    }
    /// <p>If the reason that the synchronization failed is due to an error with the underlying data source, this field contains a code that identifies the error.</p>
    pub fn get_data_source_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_error_code
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn metrics(mut self, input: crate::types::DataSourceSyncJobMetrics) -> Self {
        self.metrics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn set_metrics(mut self, input: ::std::option::Option<crate::types::DataSourceSyncJobMetrics>) -> Self {
        self.metrics = input;
        self
    }
    /// <p>Maps a batch delete document request to a specific data source sync job. This is optional and should only be supplied when documents are deleted by a data source connector.</p>
    pub fn get_metrics(&self) -> &::std::option::Option<crate::types::DataSourceSyncJobMetrics> {
        &self.metrics
    }
    /// Consumes the builder and constructs a [`DataSourceSyncJob`](crate::types::DataSourceSyncJob).
    pub fn build(self) -> crate::types::DataSourceSyncJob {
        crate::types::DataSourceSyncJob {
            execution_id: self.execution_id,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            error: self.error,
            data_source_error_code: self.data_source_error_code,
            metrics: self.metrics,
        }
    }
}
