// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Maps a batch delete document request to a specific Amazon Q Business data source connector sync job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceSyncJobMetrics {
    /// <p>The current count of documents added from the data source during the data source sync.</p>
    pub documents_added: ::std::option::Option<::std::string::String>,
    /// <p>The current count of documents modified in the data source during the data source sync.</p>
    pub documents_modified: ::std::option::Option<::std::string::String>,
    /// <p>The current count of documents deleted from the data source during the data source sync.</p>
    pub documents_deleted: ::std::option::Option<::std::string::String>,
    /// <p>The current count of documents that failed to sync from the data source during the data source sync.</p>
    pub documents_failed: ::std::option::Option<::std::string::String>,
    /// <p>The current count of documents crawled by the ongoing sync job in the data source.</p>
    pub documents_scanned: ::std::option::Option<::std::string::String>,
}
impl DataSourceSyncJobMetrics {
    /// <p>The current count of documents added from the data source during the data source sync.</p>
    pub fn documents_added(&self) -> ::std::option::Option<&str> {
        self.documents_added.as_deref()
    }
    /// <p>The current count of documents modified in the data source during the data source sync.</p>
    pub fn documents_modified(&self) -> ::std::option::Option<&str> {
        self.documents_modified.as_deref()
    }
    /// <p>The current count of documents deleted from the data source during the data source sync.</p>
    pub fn documents_deleted(&self) -> ::std::option::Option<&str> {
        self.documents_deleted.as_deref()
    }
    /// <p>The current count of documents that failed to sync from the data source during the data source sync.</p>
    pub fn documents_failed(&self) -> ::std::option::Option<&str> {
        self.documents_failed.as_deref()
    }
    /// <p>The current count of documents crawled by the ongoing sync job in the data source.</p>
    pub fn documents_scanned(&self) -> ::std::option::Option<&str> {
        self.documents_scanned.as_deref()
    }
}
impl DataSourceSyncJobMetrics {
    /// Creates a new builder-style object to manufacture [`DataSourceSyncJobMetrics`](crate::types::DataSourceSyncJobMetrics).
    pub fn builder() -> crate::types::builders::DataSourceSyncJobMetricsBuilder {
        crate::types::builders::DataSourceSyncJobMetricsBuilder::default()
    }
}

/// A builder for [`DataSourceSyncJobMetrics`](crate::types::DataSourceSyncJobMetrics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataSourceSyncJobMetricsBuilder {
    pub(crate) documents_added: ::std::option::Option<::std::string::String>,
    pub(crate) documents_modified: ::std::option::Option<::std::string::String>,
    pub(crate) documents_deleted: ::std::option::Option<::std::string::String>,
    pub(crate) documents_failed: ::std::option::Option<::std::string::String>,
    pub(crate) documents_scanned: ::std::option::Option<::std::string::String>,
}
impl DataSourceSyncJobMetricsBuilder {
    /// <p>The current count of documents added from the data source during the data source sync.</p>
    pub fn documents_added(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documents_added = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current count of documents added from the data source during the data source sync.</p>
    pub fn set_documents_added(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documents_added = input;
        self
    }
    /// <p>The current count of documents added from the data source during the data source sync.</p>
    pub fn get_documents_added(&self) -> &::std::option::Option<::std::string::String> {
        &self.documents_added
    }
    /// <p>The current count of documents modified in the data source during the data source sync.</p>
    pub fn documents_modified(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documents_modified = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current count of documents modified in the data source during the data source sync.</p>
    pub fn set_documents_modified(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documents_modified = input;
        self
    }
    /// <p>The current count of documents modified in the data source during the data source sync.</p>
    pub fn get_documents_modified(&self) -> &::std::option::Option<::std::string::String> {
        &self.documents_modified
    }
    /// <p>The current count of documents deleted from the data source during the data source sync.</p>
    pub fn documents_deleted(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documents_deleted = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current count of documents deleted from the data source during the data source sync.</p>
    pub fn set_documents_deleted(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documents_deleted = input;
        self
    }
    /// <p>The current count of documents deleted from the data source during the data source sync.</p>
    pub fn get_documents_deleted(&self) -> &::std::option::Option<::std::string::String> {
        &self.documents_deleted
    }
    /// <p>The current count of documents that failed to sync from the data source during the data source sync.</p>
    pub fn documents_failed(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documents_failed = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current count of documents that failed to sync from the data source during the data source sync.</p>
    pub fn set_documents_failed(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documents_failed = input;
        self
    }
    /// <p>The current count of documents that failed to sync from the data source during the data source sync.</p>
    pub fn get_documents_failed(&self) -> &::std::option::Option<::std::string::String> {
        &self.documents_failed
    }
    /// <p>The current count of documents crawled by the ongoing sync job in the data source.</p>
    pub fn documents_scanned(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documents_scanned = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current count of documents crawled by the ongoing sync job in the data source.</p>
    pub fn set_documents_scanned(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documents_scanned = input;
        self
    }
    /// <p>The current count of documents crawled by the ongoing sync job in the data source.</p>
    pub fn get_documents_scanned(&self) -> &::std::option::Option<::std::string::String> {
        &self.documents_scanned
    }
    /// Consumes the builder and constructs a [`DataSourceSyncJobMetrics`](crate::types::DataSourceSyncJobMetrics).
    pub fn build(self) -> crate::types::DataSourceSyncJobMetrics {
        crate::types::DataSourceSyncJobMetrics {
            documents_added: self.documents_added,
            documents_modified: self.documents_modified,
            documents_deleted: self.documents_deleted,
            documents_failed: self.documents_failed,
            documents_scanned: self.documents_scanned,
        }
    }
}
