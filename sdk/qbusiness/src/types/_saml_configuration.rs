// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the SAML 2.0 compliant identity provider (IdP) configuration information Amazon Q Business needs to deploy a Amazon Q Business web experience.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SamlConfiguration {
    /// <p>The metadata XML that your IdP generated.</p>
    pub metadata_xml: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of an IAM role assumed by users when they authenticate into their Amazon Q Business web experience, containing the relevant Amazon Q Business permissions for conversing with Amazon Q Business.</p>
    pub role_arn: ::std::string::String,
    /// <p>The user attribute name in your IdP that maps to the user email.</p>
    pub user_id_attribute: ::std::string::String,
    /// <p>The group attribute name in your IdP that maps to user groups.</p>
    pub user_group_attribute: ::std::option::Option<::std::string::String>,
}
impl SamlConfiguration {
    /// <p>The metadata XML that your IdP generated.</p>
    pub fn metadata_xml(&self) -> &str {
        use std::ops::Deref;
        self.metadata_xml.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role assumed by users when they authenticate into their Amazon Q Business web experience, containing the relevant Amazon Q Business permissions for conversing with Amazon Q Business.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>The user attribute name in your IdP that maps to the user email.</p>
    pub fn user_id_attribute(&self) -> &str {
        use std::ops::Deref;
        self.user_id_attribute.deref()
    }
    /// <p>The group attribute name in your IdP that maps to user groups.</p>
    pub fn user_group_attribute(&self) -> ::std::option::Option<&str> {
        self.user_group_attribute.as_deref()
    }
}
impl SamlConfiguration {
    /// Creates a new builder-style object to manufacture [`SamlConfiguration`](crate::types::SamlConfiguration).
    pub fn builder() -> crate::types::builders::SamlConfigurationBuilder {
        crate::types::builders::SamlConfigurationBuilder::default()
    }
}

/// A builder for [`SamlConfiguration`](crate::types::SamlConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SamlConfigurationBuilder {
    pub(crate) metadata_xml: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) user_id_attribute: ::std::option::Option<::std::string::String>,
    pub(crate) user_group_attribute: ::std::option::Option<::std::string::String>,
}
impl SamlConfigurationBuilder {
    /// <p>The metadata XML that your IdP generated.</p>
    /// This field is required.
    pub fn metadata_xml(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata_xml = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata XML that your IdP generated.</p>
    pub fn set_metadata_xml(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata_xml = input;
        self
    }
    /// <p>The metadata XML that your IdP generated.</p>
    pub fn get_metadata_xml(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata_xml
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role assumed by users when they authenticate into their Amazon Q Business web experience, containing the relevant Amazon Q Business permissions for conversing with Amazon Q Business.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role assumed by users when they authenticate into their Amazon Q Business web experience, containing the relevant Amazon Q Business permissions for conversing with Amazon Q Business.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role assumed by users when they authenticate into their Amazon Q Business web experience, containing the relevant Amazon Q Business permissions for conversing with Amazon Q Business.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The user attribute name in your IdP that maps to the user email.</p>
    /// This field is required.
    pub fn user_id_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user attribute name in your IdP that maps to the user email.</p>
    pub fn set_user_id_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id_attribute = input;
        self
    }
    /// <p>The user attribute name in your IdP that maps to the user email.</p>
    pub fn get_user_id_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id_attribute
    }
    /// <p>The group attribute name in your IdP that maps to user groups.</p>
    pub fn user_group_attribute(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_group_attribute = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group attribute name in your IdP that maps to user groups.</p>
    pub fn set_user_group_attribute(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_group_attribute = input;
        self
    }
    /// <p>The group attribute name in your IdP that maps to user groups.</p>
    pub fn get_user_group_attribute(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_group_attribute
    }
    /// Consumes the builder and constructs a [`SamlConfiguration`](crate::types::SamlConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`metadata_xml`](crate::types::builders::SamlConfigurationBuilder::metadata_xml)
    /// - [`role_arn`](crate::types::builders::SamlConfigurationBuilder::role_arn)
    /// - [`user_id_attribute`](crate::types::builders::SamlConfigurationBuilder::user_id_attribute)
    pub fn build(self) -> ::std::result::Result<crate::types::SamlConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SamlConfiguration {
            metadata_xml: self.metadata_xml.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata_xml",
                    "metadata_xml was not specified but it is required when building SamlConfiguration",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building SamlConfiguration",
                )
            })?,
            user_id_attribute: self.user_id_attribute.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "user_id_attribute",
                    "user_id_attribute was not specified but it is required when building SamlConfiguration",
                )
            })?,
            user_group_attribute: self.user_group_attribute,
        })
    }
}
