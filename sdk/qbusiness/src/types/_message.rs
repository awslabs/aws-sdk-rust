// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A message in an Amazon Q Business web experience.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Message {
    /// <p>The identifier of the Amazon Q Business web experience message.</p>
    pub message_id: ::std::option::Option<::std::string::String>,
    /// <p>The content of the Amazon Q Business web experience message.</p>
    pub body: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the first Amazon Q Business web experience message.</p>
    pub time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of Amazon Q Business message, whether <code>HUMAN</code> or <code>AI</code> generated.</p>
    pub r#type: ::std::option::Option<crate::types::MessageType>,
    /// <p>A file directly uploaded into an Amazon Q Business web experience chat.</p>
    pub attachments: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentOutput>>,
    /// <p>The source documents used to generate Amazon Q Business web experience message.</p>
    pub source_attribution: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    /// <p>An output event that Amazon Q Business returns to an user who wants to perform a plugin action during a non-streaming chat conversation. It contains information about the selected action with a list of possible user input fields, some pre-populated by Amazon Q Business.</p>
    pub action_review: ::std::option::Option<crate::types::ActionReview>,
    /// <p>Performs an Amazon Q Business plugin action during a non-streaming chat conversation.</p>
    pub action_execution: ::std::option::Option<crate::types::ActionExecution>,
}
impl Message {
    /// <p>The identifier of the Amazon Q Business web experience message.</p>
    pub fn message_id(&self) -> ::std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The content of the Amazon Q Business web experience message.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The timestamp of the first Amazon Q Business web experience message.</p>
    pub fn time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.time.as_ref()
    }
    /// <p>The type of Amazon Q Business message, whether <code>HUMAN</code> or <code>AI</code> generated.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::MessageType> {
        self.r#type.as_ref()
    }
    /// <p>A file directly uploaded into an Amazon Q Business web experience chat.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachments.is_none()`.
    pub fn attachments(&self) -> &[crate::types::AttachmentOutput] {
        self.attachments.as_deref().unwrap_or_default()
    }
    /// <p>The source documents used to generate Amazon Q Business web experience message.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_attribution.is_none()`.
    pub fn source_attribution(&self) -> &[::std::option::Option<crate::types::SourceAttribution>] {
        self.source_attribution.as_deref().unwrap_or_default()
    }
    /// <p>An output event that Amazon Q Business returns to an user who wants to perform a plugin action during a non-streaming chat conversation. It contains information about the selected action with a list of possible user input fields, some pre-populated by Amazon Q Business.</p>
    pub fn action_review(&self) -> ::std::option::Option<&crate::types::ActionReview> {
        self.action_review.as_ref()
    }
    /// <p>Performs an Amazon Q Business plugin action during a non-streaming chat conversation.</p>
    pub fn action_execution(&self) -> ::std::option::Option<&crate::types::ActionExecution> {
        self.action_execution.as_ref()
    }
}
impl Message {
    /// Creates a new builder-style object to manufacture [`Message`](crate::types::Message).
    pub fn builder() -> crate::types::builders::MessageBuilder {
        crate::types::builders::MessageBuilder::default()
    }
}

/// A builder for [`Message`](crate::types::Message).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MessageBuilder {
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::std::string::String>,
    pub(crate) time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::MessageType>,
    pub(crate) attachments: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentOutput>>,
    pub(crate) source_attribution: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    pub(crate) action_review: ::std::option::Option<crate::types::ActionReview>,
    pub(crate) action_execution: ::std::option::Option<crate::types::ActionExecution>,
}
impl MessageBuilder {
    /// <p>The identifier of the Amazon Q Business web experience message.</p>
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business web experience message.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business web experience message.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>The content of the Amazon Q Business web experience message.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the Amazon Q Business web experience message.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The content of the Amazon Q Business web experience message.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// <p>The timestamp of the first Amazon Q Business web experience message.</p>
    pub fn time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the first Amazon Q Business web experience message.</p>
    pub fn set_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.time = input;
        self
    }
    /// <p>The timestamp of the first Amazon Q Business web experience message.</p>
    pub fn get_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.time
    }
    /// <p>The type of Amazon Q Business message, whether <code>HUMAN</code> or <code>AI</code> generated.</p>
    pub fn r#type(mut self, input: crate::types::MessageType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Amazon Q Business message, whether <code>HUMAN</code> or <code>AI</code> generated.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MessageType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of Amazon Q Business message, whether <code>HUMAN</code> or <code>AI</code> generated.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MessageType> {
        &self.r#type
    }
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>A file directly uploaded into an Amazon Q Business web experience chat.</p>
    pub fn attachments(mut self, input: crate::types::AttachmentOutput) -> Self {
        let mut v = self.attachments.unwrap_or_default();
        v.push(input);
        self.attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>A file directly uploaded into an Amazon Q Business web experience chat.</p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentOutput>>) -> Self {
        self.attachments = input;
        self
    }
    /// <p>A file directly uploaded into an Amazon Q Business web experience chat.</p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachmentOutput>> {
        &self.attachments
    }
    /// Appends an item to `source_attribution`.
    ///
    /// To override the contents of this collection use [`set_source_attribution`](Self::set_source_attribution).
    ///
    /// <p>The source documents used to generate Amazon Q Business web experience message.</p>
    pub fn source_attribution(mut self, input: ::std::option::Option<crate::types::SourceAttribution>) -> Self {
        let mut v = self.source_attribution.unwrap_or_default();
        v.push(input);
        self.source_attribution = ::std::option::Option::Some(v);
        self
    }
    /// <p>The source documents used to generate Amazon Q Business web experience message.</p>
    pub fn set_source_attribution(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>>,
    ) -> Self {
        self.source_attribution = input;
        self
    }
    /// <p>The source documents used to generate Amazon Q Business web experience message.</p>
    pub fn get_source_attribution(&self) -> &::std::option::Option<::std::vec::Vec<::std::option::Option<crate::types::SourceAttribution>>> {
        &self.source_attribution
    }
    /// <p>An output event that Amazon Q Business returns to an user who wants to perform a plugin action during a non-streaming chat conversation. It contains information about the selected action with a list of possible user input fields, some pre-populated by Amazon Q Business.</p>
    pub fn action_review(mut self, input: crate::types::ActionReview) -> Self {
        self.action_review = ::std::option::Option::Some(input);
        self
    }
    /// <p>An output event that Amazon Q Business returns to an user who wants to perform a plugin action during a non-streaming chat conversation. It contains information about the selected action with a list of possible user input fields, some pre-populated by Amazon Q Business.</p>
    pub fn set_action_review(mut self, input: ::std::option::Option<crate::types::ActionReview>) -> Self {
        self.action_review = input;
        self
    }
    /// <p>An output event that Amazon Q Business returns to an user who wants to perform a plugin action during a non-streaming chat conversation. It contains information about the selected action with a list of possible user input fields, some pre-populated by Amazon Q Business.</p>
    pub fn get_action_review(&self) -> &::std::option::Option<crate::types::ActionReview> {
        &self.action_review
    }
    /// <p>Performs an Amazon Q Business plugin action during a non-streaming chat conversation.</p>
    pub fn action_execution(mut self, input: crate::types::ActionExecution) -> Self {
        self.action_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>Performs an Amazon Q Business plugin action during a non-streaming chat conversation.</p>
    pub fn set_action_execution(mut self, input: ::std::option::Option<crate::types::ActionExecution>) -> Self {
        self.action_execution = input;
        self
    }
    /// <p>Performs an Amazon Q Business plugin action during a non-streaming chat conversation.</p>
    pub fn get_action_execution(&self) -> &::std::option::Option<crate::types::ActionExecution> {
        &self.action_execution
    }
    /// Consumes the builder and constructs a [`Message`](crate::types::Message).
    pub fn build(self) -> crate::types::Message {
        crate::types::Message {
            message_id: self.message_id,
            body: self.body,
            time: self.time,
            r#type: self.r#type,
            attachments: self.attachments,
            source_attribution: self.source_attribution,
            action_review: self.action_review,
            action_execution: self.action_execution,
        }
    }
}
