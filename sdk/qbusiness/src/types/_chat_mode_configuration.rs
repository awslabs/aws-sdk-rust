// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for Amazon Q Business conversation modes.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum ChatModeConfiguration {
    /// <p>Configuration information required to invoke chat in <code>PLUGIN_MODE</code>.</p>
    PluginConfiguration(crate::types::PluginConfiguration),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ChatModeConfiguration {
    #[allow(irrefutable_let_patterns)]
    /// Tries to convert the enum instance into [`PluginConfiguration`](crate::types::ChatModeConfiguration::PluginConfiguration), extracting the inner [`PluginConfiguration`](crate::types::PluginConfiguration).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_plugin_configuration(&self) -> ::std::result::Result<&crate::types::PluginConfiguration, &Self> {
        if let ChatModeConfiguration::PluginConfiguration(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`PluginConfiguration`](crate::types::ChatModeConfiguration::PluginConfiguration).
    pub fn is_plugin_configuration(&self) -> bool {
        self.as_plugin_configuration().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
