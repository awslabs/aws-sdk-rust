// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information for an Amazon Q Business web experience.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebExperience {
    /// <p>The identifier of your Amazon Q Business web experience.</p>
    pub web_experience_id: ::std::option::Option<::std::string::String>,
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Unix timestamp when your Amazon Q Business web experience was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The endpoint URLs for your Amazon Q Business web experience. The URLs are unique and fully hosted by Amazon Web Services.</p>
    pub default_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The status of your Amazon Q Business web experience.</p>
    pub status: ::std::option::Option<crate::types::WebExperienceStatus>,
}
impl WebExperience {
    /// <p>The identifier of your Amazon Q Business web experience.</p>
    pub fn web_experience_id(&self) -> ::std::option::Option<&str> {
        self.web_experience_id.as_deref()
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The Unix timestamp when your Amazon Q Business web experience was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The endpoint URLs for your Amazon Q Business web experience. The URLs are unique and fully hosted by Amazon Web Services.</p>
    pub fn default_endpoint(&self) -> ::std::option::Option<&str> {
        self.default_endpoint.as_deref()
    }
    /// <p>The status of your Amazon Q Business web experience.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::WebExperienceStatus> {
        self.status.as_ref()
    }
}
impl WebExperience {
    /// Creates a new builder-style object to manufacture [`WebExperience`](crate::types::WebExperience).
    pub fn builder() -> crate::types::builders::WebExperienceBuilder {
        crate::types::builders::WebExperienceBuilder::default()
    }
}

/// A builder for [`WebExperience`](crate::types::WebExperience).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WebExperienceBuilder {
    pub(crate) web_experience_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) default_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WebExperienceStatus>,
}
impl WebExperienceBuilder {
    /// <p>The identifier of your Amazon Q Business web experience.</p>
    pub fn web_experience_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_experience_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of your Amazon Q Business web experience.</p>
    pub fn set_web_experience_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_experience_id = input;
        self
    }
    /// <p>The identifier of your Amazon Q Business web experience.</p>
    pub fn get_web_experience_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_experience_id
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The Unix timestamp when the Amazon Q Business application was last updated.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The Unix timestamp when your Amazon Q Business web experience was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Unix timestamp when your Amazon Q Business web experience was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The Unix timestamp when your Amazon Q Business web experience was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p>The endpoint URLs for your Amazon Q Business web experience. The URLs are unique and fully hosted by Amazon Web Services.</p>
    pub fn default_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URLs for your Amazon Q Business web experience. The URLs are unique and fully hosted by Amazon Web Services.</p>
    pub fn set_default_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_endpoint = input;
        self
    }
    /// <p>The endpoint URLs for your Amazon Q Business web experience. The URLs are unique and fully hosted by Amazon Web Services.</p>
    pub fn get_default_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_endpoint
    }
    /// <p>The status of your Amazon Q Business web experience.</p>
    pub fn status(mut self, input: crate::types::WebExperienceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your Amazon Q Business web experience.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WebExperienceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of your Amazon Q Business web experience.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WebExperienceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`WebExperience`](crate::types::WebExperience).
    pub fn build(self) -> crate::types::WebExperience {
        crate::types::WebExperience {
            web_experience_id: self.web_experience_id,
            created_at: self.created_at,
            updated_at: self.updated_at,
            default_endpoint: self.default_endpoint,
            status: self.status,
        }
    }
}
