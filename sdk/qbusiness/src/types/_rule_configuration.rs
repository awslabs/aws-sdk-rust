// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides configuration information about a rule.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum RuleConfiguration {
    /// <p>A rule for configuring how Amazon Q Business responds when it encounters a a blocked topic.</p>
    ContentBlockerRule(crate::types::ContentBlockerRule),
    /// <p>Rules for retrieving content from data sources connected to a Amazon Q Business application for a specific topic control configuration.</p>
    ContentRetrievalRule(crate::types::ContentRetrievalRule),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl RuleConfiguration {
    /// Tries to convert the enum instance into [`ContentBlockerRule`](crate::types::RuleConfiguration::ContentBlockerRule), extracting the inner [`ContentBlockerRule`](crate::types::ContentBlockerRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_content_blocker_rule(&self) -> ::std::result::Result<&crate::types::ContentBlockerRule, &Self> {
        if let RuleConfiguration::ContentBlockerRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ContentBlockerRule`](crate::types::RuleConfiguration::ContentBlockerRule).
    pub fn is_content_blocker_rule(&self) -> bool {
        self.as_content_blocker_rule().is_ok()
    }
    /// Tries to convert the enum instance into [`ContentRetrievalRule`](crate::types::RuleConfiguration::ContentRetrievalRule), extracting the inner [`ContentRetrievalRule`](crate::types::ContentRetrievalRule).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_content_retrieval_rule(&self) -> ::std::result::Result<&crate::types::ContentRetrievalRule, &Self> {
        if let RuleConfiguration::ContentRetrievalRule(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`ContentRetrievalRule`](crate::types::RuleConfiguration::ContentRetrievalRule).
    pub fn is_content_retrieval_rule(&self) -> bool {
        self.as_content_retrieval_rule().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
