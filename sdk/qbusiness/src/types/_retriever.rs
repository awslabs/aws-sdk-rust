// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information for the retriever used for your Amazon Q Business application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Retriever {
    /// <p>The identifier of the Amazon Q Business application using the retriever.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the retriever used by your Amazon Q Business application.</p>
    pub retriever_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of your retriever.</p>
    pub r#type: ::std::option::Option<crate::types::RetrieverType>,
    /// <p>The status of your retriever.</p>
    pub status: ::std::option::Option<crate::types::RetrieverStatus>,
    /// <p>The name of your retriever.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
}
impl Retriever {
    /// <p>The identifier of the Amazon Q Business application using the retriever.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the retriever used by your Amazon Q Business application.</p>
    pub fn retriever_id(&self) -> ::std::option::Option<&str> {
        self.retriever_id.as_deref()
    }
    /// <p>The type of your retriever.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RetrieverType> {
        self.r#type.as_ref()
    }
    /// <p>The status of your retriever.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::RetrieverStatus> {
        self.status.as_ref()
    }
    /// <p>The name of your retriever.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
}
impl Retriever {
    /// Creates a new builder-style object to manufacture [`Retriever`](crate::types::Retriever).
    pub fn builder() -> crate::types::builders::RetrieverBuilder {
        crate::types::builders::RetrieverBuilder::default()
    }
}

/// A builder for [`Retriever`](crate::types::Retriever).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RetrieverBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) retriever_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RetrieverType>,
    pub(crate) status: ::std::option::Option<crate::types::RetrieverStatus>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
}
impl RetrieverBuilder {
    /// <p>The identifier of the Amazon Q Business application using the retriever.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application using the retriever.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application using the retriever.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the retriever used by your Amazon Q Business application.</p>
    pub fn retriever_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retriever_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the retriever used by your Amazon Q Business application.</p>
    pub fn set_retriever_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retriever_id = input;
        self
    }
    /// <p>The identifier of the retriever used by your Amazon Q Business application.</p>
    pub fn get_retriever_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.retriever_id
    }
    /// <p>The type of your retriever.</p>
    pub fn r#type(mut self, input: crate::types::RetrieverType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of your retriever.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RetrieverType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of your retriever.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RetrieverType> {
        &self.r#type
    }
    /// <p>The status of your retriever.</p>
    pub fn status(mut self, input: crate::types::RetrieverStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of your retriever.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RetrieverStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of your retriever.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RetrieverStatus> {
        &self.status
    }
    /// <p>The name of your retriever.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your retriever.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of your retriever.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// Consumes the builder and constructs a [`Retriever`](crate::types::Retriever).
    pub fn build(self) -> crate::types::Retriever {
        crate::types::Retriever {
            application_id: self.application_id,
            retriever_id: self.retriever_id,
            r#type: self.r#type,
            status: self.status,
            display_name: self.display_name,
        }
    }
}
