// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The creator mode specific admin controls configured for an Amazon Q Business application. Determines whether an end user can generate LLM-only responses when they use the web experience.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a> and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AppliedCreatorModeConfiguration {
    /// <p>Information about whether creator mode is enabled or disabled for an Amazon Q Business application.</p>
    pub creator_mode_control: crate::types::CreatorModeControl,
}
impl AppliedCreatorModeConfiguration {
    /// <p>Information about whether creator mode is enabled or disabled for an Amazon Q Business application.</p>
    pub fn creator_mode_control(&self) -> &crate::types::CreatorModeControl {
        &self.creator_mode_control
    }
}
impl AppliedCreatorModeConfiguration {
    /// Creates a new builder-style object to manufacture [`AppliedCreatorModeConfiguration`](crate::types::AppliedCreatorModeConfiguration).
    pub fn builder() -> crate::types::builders::AppliedCreatorModeConfigurationBuilder {
        crate::types::builders::AppliedCreatorModeConfigurationBuilder::default()
    }
}

/// A builder for [`AppliedCreatorModeConfiguration`](crate::types::AppliedCreatorModeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AppliedCreatorModeConfigurationBuilder {
    pub(crate) creator_mode_control: ::std::option::Option<crate::types::CreatorModeControl>,
}
impl AppliedCreatorModeConfigurationBuilder {
    /// <p>Information about whether creator mode is enabled or disabled for an Amazon Q Business application.</p>
    /// This field is required.
    pub fn creator_mode_control(mut self, input: crate::types::CreatorModeControl) -> Self {
        self.creator_mode_control = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether creator mode is enabled or disabled for an Amazon Q Business application.</p>
    pub fn set_creator_mode_control(mut self, input: ::std::option::Option<crate::types::CreatorModeControl>) -> Self {
        self.creator_mode_control = input;
        self
    }
    /// <p>Information about whether creator mode is enabled or disabled for an Amazon Q Business application.</p>
    pub fn get_creator_mode_control(&self) -> &::std::option::Option<crate::types::CreatorModeControl> {
        &self.creator_mode_control
    }
    /// Consumes the builder and constructs a [`AppliedCreatorModeConfiguration`](crate::types::AppliedCreatorModeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`creator_mode_control`](crate::types::builders::AppliedCreatorModeConfigurationBuilder::creator_mode_control)
    pub fn build(self) -> ::std::result::Result<crate::types::AppliedCreatorModeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AppliedCreatorModeConfiguration {
            creator_mode_control: self.creator_mode_control.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creator_mode_control",
                    "creator_mode_control was not specified but it is required when building AppliedCreatorModeConfiguration",
                )
            })?,
        })
    }
}
