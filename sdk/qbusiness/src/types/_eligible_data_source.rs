// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The identifier of the data source Amazon Q Business will generate responses from.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EligibleDataSource {
    /// <p>The identifier of the index the data source is attached to.</p>
    pub index_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the data source.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
}
impl EligibleDataSource {
    /// <p>The identifier of the index the data source is attached to.</p>
    pub fn index_id(&self) -> ::std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifier of the data source.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl EligibleDataSource {
    /// Creates a new builder-style object to manufacture [`EligibleDataSource`](crate::types::EligibleDataSource).
    pub fn builder() -> crate::types::builders::EligibleDataSourceBuilder {
        crate::types::builders::EligibleDataSourceBuilder::default()
    }
}

/// A builder for [`EligibleDataSource`](crate::types::EligibleDataSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EligibleDataSourceBuilder {
    pub(crate) index_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
}
impl EligibleDataSourceBuilder {
    /// <p>The identifier of the index the data source is attached to.</p>
    pub fn index_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the index the data source is attached to.</p>
    pub fn set_index_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the index the data source is attached to.</p>
    pub fn get_index_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_id
    }
    /// <p>The identifier of the data source.</p>
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the data source.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// Consumes the builder and constructs a [`EligibleDataSource`](crate::types::EligibleDataSource).
    pub fn build(self) -> crate::types::EligibleDataSource {
        crate::types::EligibleDataSource {
            index_id: self.index_id,
            data_source_id: self.data_source_id,
        }
    }
}
