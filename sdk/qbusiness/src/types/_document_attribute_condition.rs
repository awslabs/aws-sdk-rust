// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The condition used for the target document attribute or metadata field when ingesting documents into Amazon Q Business. You use this with <a href="https://docs.aws.amazon.com/amazonq/latest/api-reference/API_DocumentAttributeTarget.html"> <code>DocumentAttributeTarget</code> </a> to apply the condition.</p>
/// <p>For example, you can create the 'Department' target field and have it prefill department names associated with the documents based on information in the 'Source_URI' field. Set the condition that if the 'Source_URI' field contains 'financial' in its URI value, then prefill the target field 'Department' with the target value 'Finance' for the document.</p>
/// <p>Amazon Q Business can't create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using <code>DocumentAttributeTarget</code>. Amazon Q Business then will map your newly created metadata field to your index field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DocumentAttributeCondition {
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Q Business currently doesn't support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub key: ::std::string::String,
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub operator: crate::types::DocumentEnrichmentConditionOperator,
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub value: ::std::option::Option<crate::types::DocumentAttributeValue>,
}
impl DocumentAttributeCondition {
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Q Business currently doesn't support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn operator(&self) -> &crate::types::DocumentEnrichmentConditionOperator {
        &self.operator
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::DocumentAttributeValue> {
        self.value.as_ref()
    }
}
impl DocumentAttributeCondition {
    /// Creates a new builder-style object to manufacture [`DocumentAttributeCondition`](crate::types::DocumentAttributeCondition).
    pub fn builder() -> crate::types::builders::DocumentAttributeConditionBuilder {
        crate::types::builders::DocumentAttributeConditionBuilder::default()
    }
}

/// A builder for [`DocumentAttributeCondition`](crate::types::DocumentAttributeCondition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DocumentAttributeConditionBuilder {
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) operator: ::std::option::Option<crate::types::DocumentEnrichmentConditionOperator>,
    pub(crate) value: ::std::option::Option<crate::types::DocumentAttributeValue>,
}
impl DocumentAttributeConditionBuilder {
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Q Business currently doesn't support <code>_document_body</code> as an attribute key used for the condition.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Q Business currently doesn't support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Q Business currently doesn't support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::DocumentEnrichmentConditionOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::DocumentEnrichmentConditionOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The identifier of the document attribute used for the condition.</p>
    /// <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p>
    /// <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::DocumentEnrichmentConditionOperator> {
        &self.operator
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn value(mut self, input: crate::types::DocumentAttributeValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::DocumentAttributeValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of a document attribute. You can only provide one value for a document attribute.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::DocumentAttributeValue> {
        &self.value
    }
    /// Consumes the builder and constructs a [`DocumentAttributeCondition`](crate::types::DocumentAttributeCondition).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::DocumentAttributeConditionBuilder::key)
    /// - [`operator`](crate::types::builders::DocumentAttributeConditionBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::DocumentAttributeCondition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DocumentAttributeCondition {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building DocumentAttributeCondition",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building DocumentAttributeCondition",
                )
            })?,
            value: self.value,
        })
    }
}
