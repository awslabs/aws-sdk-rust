// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of documents that could not be removed from an Amazon Q Business index. Each entry contains an error message that indicates why the document couldn't be removed from the index.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailedDocument {
    /// <p>The identifier of the document that couldn't be removed from the Amazon Q Business index.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>An explanation for why the document couldn't be removed from the index.</p>
    pub error: ::std::option::Option<crate::types::ErrorDetail>,
    /// <p>The identifier of the Amazon Q Business data source connector that contains the failed document.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
}
impl FailedDocument {
    /// <p>The identifier of the document that couldn't be removed from the Amazon Q Business index.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An explanation for why the document couldn't be removed from the index.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::ErrorDetail> {
        self.error.as_ref()
    }
    /// <p>The identifier of the Amazon Q Business data source connector that contains the failed document.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl FailedDocument {
    /// Creates a new builder-style object to manufacture [`FailedDocument`](crate::types::FailedDocument).
    pub fn builder() -> crate::types::builders::FailedDocumentBuilder {
        crate::types::builders::FailedDocumentBuilder::default()
    }
}

/// A builder for [`FailedDocument`](crate::types::FailedDocument).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailedDocumentBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::ErrorDetail>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
}
impl FailedDocumentBuilder {
    /// <p>The identifier of the document that couldn't be removed from the Amazon Q Business index.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the document that couldn't be removed from the Amazon Q Business index.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the document that couldn't be removed from the Amazon Q Business index.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>An explanation for why the document couldn't be removed from the index.</p>
    pub fn error(mut self, input: crate::types::ErrorDetail) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>An explanation for why the document couldn't be removed from the index.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::ErrorDetail>) -> Self {
        self.error = input;
        self
    }
    /// <p>An explanation for why the document couldn't be removed from the index.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::ErrorDetail> {
        &self.error
    }
    /// <p>The identifier of the Amazon Q Business data source connector that contains the failed document.</p>
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business data source connector that contains the failed document.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business data source connector that contains the failed document.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// Consumes the builder and constructs a [`FailedDocument`](crate::types::FailedDocument).
    pub fn build(self) -> crate::types::FailedDocument {
        crate::types::FailedDocument {
            id: self.id,
            error: self.error,
            data_source_id: self.data_source_id,
        }
    }
}
