// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetPluginOutput {
    /// <p>The identifier of the application which contains the plugin.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the plugin.</p>
    pub plugin_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the plugin.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the plugin.</p>
    pub r#type: ::std::option::Option<crate::types::PluginType>,
    /// <p>The source URL used for plugin configuration.</p>
    pub server_url: ::std::option::Option<::std::string::String>,
    /// <p>Authentication configuration information for an Amazon Q Business plugin.</p>
    pub auth_configuration: ::std::option::Option<crate::types::PluginAuthConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of the role with permission to access resources needed to create the plugin.</p>
    pub plugin_arn: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the plugin.</p>
    pub state: ::std::option::Option<crate::types::PluginState>,
    /// <p>The timestamp for when the plugin was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPluginOutput {
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the plugin.</p>
    pub fn plugin_id(&self) -> ::std::option::Option<&str> {
        self.plugin_id.as_deref()
    }
    /// <p>The name of the plugin.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The type of the plugin.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::PluginType> {
        self.r#type.as_ref()
    }
    /// <p>The source URL used for plugin configuration.</p>
    pub fn server_url(&self) -> ::std::option::Option<&str> {
        self.server_url.as_deref()
    }
    /// <p>Authentication configuration information for an Amazon Q Business plugin.</p>
    pub fn auth_configuration(&self) -> ::std::option::Option<&crate::types::PluginAuthConfiguration> {
        self.auth_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the role with permission to access resources needed to create the plugin.</p>
    pub fn plugin_arn(&self) -> ::std::option::Option<&str> {
        self.plugin_arn.as_deref()
    }
    /// <p>The current state of the plugin.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::PluginState> {
        self.state.as_ref()
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetPluginOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPluginOutput {
    /// Creates a new builder-style object to manufacture [`GetPluginOutput`](crate::operation::get_plugin::GetPluginOutput).
    pub fn builder() -> crate::operation::get_plugin::builders::GetPluginOutputBuilder {
        crate::operation::get_plugin::builders::GetPluginOutputBuilder::default()
    }
}

/// A builder for [`GetPluginOutput`](crate::operation::get_plugin::GetPluginOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetPluginOutputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) plugin_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::PluginType>,
    pub(crate) server_url: ::std::option::Option<::std::string::String>,
    pub(crate) auth_configuration: ::std::option::Option<crate::types::PluginAuthConfiguration>,
    pub(crate) plugin_arn: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::PluginState>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPluginOutputBuilder {
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the application which contains the plugin.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the plugin.</p>
    pub fn plugin_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn set_plugin_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_id = input;
        self
    }
    /// <p>The identifier of the plugin.</p>
    pub fn get_plugin_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_id
    }
    /// <p>The name of the plugin.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the plugin.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of the plugin.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The type of the plugin.</p>
    pub fn r#type(mut self, input: crate::types::PluginType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PluginType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the plugin.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PluginType> {
        &self.r#type
    }
    /// <p>The source URL used for plugin configuration.</p>
    pub fn server_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The source URL used for plugin configuration.</p>
    pub fn set_server_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_url = input;
        self
    }
    /// <p>The source URL used for plugin configuration.</p>
    pub fn get_server_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_url
    }
    /// <p>Authentication configuration information for an Amazon Q Business plugin.</p>
    pub fn auth_configuration(mut self, input: crate::types::PluginAuthConfiguration) -> Self {
        self.auth_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Authentication configuration information for an Amazon Q Business plugin.</p>
    pub fn set_auth_configuration(mut self, input: ::std::option::Option<crate::types::PluginAuthConfiguration>) -> Self {
        self.auth_configuration = input;
        self
    }
    /// <p>Authentication configuration information for an Amazon Q Business plugin.</p>
    pub fn get_auth_configuration(&self) -> &::std::option::Option<crate::types::PluginAuthConfiguration> {
        &self.auth_configuration
    }
    /// <p>The Amazon Resource Name (ARN) of the role with permission to access resources needed to create the plugin.</p>
    pub fn plugin_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.plugin_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role with permission to access resources needed to create the plugin.</p>
    pub fn set_plugin_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.plugin_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the role with permission to access resources needed to create the plugin.</p>
    pub fn get_plugin_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.plugin_arn
    }
    /// <p>The current state of the plugin.</p>
    pub fn state(mut self, input: crate::types::PluginState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the plugin.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::PluginState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The current state of the plugin.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::PluginState> {
        &self.state
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp for when the plugin was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp for when the plugin was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPluginOutput`](crate::operation::get_plugin::GetPluginOutput).
    pub fn build(self) -> crate::operation::get_plugin::GetPluginOutput {
        crate::operation::get_plugin::GetPluginOutput {
            application_id: self.application_id,
            plugin_id: self.plugin_id,
            display_name: self.display_name,
            r#type: self.r#type,
            server_url: self.server_url,
            auth_configuration: self.auth_configuration,
            plugin_arn: self.plugin_arn,
            state: self.state,
            created_at: self.created_at,
            updated_at: self.updated_at,
            _request_id: self._request_id,
        }
    }
}
