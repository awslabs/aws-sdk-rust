// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_chat_controls_configuration::_update_chat_controls_configuration_output::UpdateChatControlsConfigurationOutputBuilder;

pub use crate::operation::update_chat_controls_configuration::_update_chat_controls_configuration_input::UpdateChatControlsConfigurationInputBuilder;

impl crate::operation::update_chat_controls_configuration::builders::UpdateChatControlsConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_chat_controls_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateChatControlsConfiguration`.
///
/// <p>Updates an set of chat controls configured for an existing Amazon Q Business application.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateChatControlsConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_chat_controls_configuration::builders::UpdateChatControlsConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationOutput,
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
    > for UpdateChatControlsConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationOutput,
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateChatControlsConfigurationFluentBuilder {
    /// Creates a new `UpdateChatControlsConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateChatControlsConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::update_chat_controls_configuration::builders::UpdateChatControlsConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_chat_controls_configuration::UpdateChatControlsConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationOutput,
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn response_scope(mut self, input: crate::types::ResponseScope) -> Self {
        self.inner = self.inner.response_scope(input);
        self
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn set_response_scope(mut self, input: ::std::option::Option<crate::types::ResponseScope>) -> Self {
        self.inner = self.inner.set_response_scope(input);
        self
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn get_response_scope(&self) -> &::std::option::Option<crate::types::ResponseScope> {
        self.inner.get_response_scope()
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn blocked_phrases_configuration_update(mut self, input: crate::types::BlockedPhrasesConfigurationUpdate) -> Self {
        self.inner = self.inner.blocked_phrases_configuration_update(input);
        self
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn set_blocked_phrases_configuration_update(mut self, input: ::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate>) -> Self {
        self.inner = self.inner.set_blocked_phrases_configuration_update(input);
        self
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn get_blocked_phrases_configuration_update(&self) -> &::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate> {
        self.inner.get_blocked_phrases_configuration_update()
    }
    ///
    /// Appends an item to `topicConfigurationsToCreateOrUpdate`.
    ///
    /// To override the contents of this collection use [`set_topic_configurations_to_create_or_update`](Self::set_topic_configurations_to_create_or_update).
    ///
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn topic_configurations_to_create_or_update(mut self, input: crate::types::TopicConfiguration) -> Self {
        self.inner = self.inner.topic_configurations_to_create_or_update(input);
        self
    }
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn set_topic_configurations_to_create_or_update(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    ) -> Self {
        self.inner = self.inner.set_topic_configurations_to_create_or_update(input);
        self
    }
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn get_topic_configurations_to_create_or_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>> {
        self.inner.get_topic_configurations_to_create_or_update()
    }
    ///
    /// Appends an item to `topicConfigurationsToDelete`.
    ///
    /// To override the contents of this collection use [`set_topic_configurations_to_delete`](Self::set_topic_configurations_to_delete).
    ///
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn topic_configurations_to_delete(mut self, input: crate::types::TopicConfiguration) -> Self {
        self.inner = self.inner.topic_configurations_to_delete(input);
        self
    }
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn set_topic_configurations_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>) -> Self {
        self.inner = self.inner.set_topic_configurations_to_delete(input);
        self
    }
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn get_topic_configurations_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>> {
        self.inner.get_topic_configurations_to_delete()
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn creator_mode_configuration(mut self, input: crate::types::CreatorModeConfiguration) -> Self {
        self.inner = self.inner.creator_mode_configuration(input);
        self
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn set_creator_mode_configuration(mut self, input: ::std::option::Option<crate::types::CreatorModeConfiguration>) -> Self {
        self.inner = self.inner.set_creator_mode_configuration(input);
        self
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn get_creator_mode_configuration(&self) -> &::std::option::Option<crate::types::CreatorModeConfiguration> {
        self.inner.get_creator_mode_configuration()
    }
}
