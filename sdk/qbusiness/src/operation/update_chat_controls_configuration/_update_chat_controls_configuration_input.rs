// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateChatControlsConfigurationInput {
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub response_scope: ::std::option::Option<crate::types::ResponseScope>,
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub blocked_phrases_configuration_update: ::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate>,
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub topic_configurations_to_create_or_update: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub topic_configurations_to_delete: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub creator_mode_configuration: ::std::option::Option<crate::types::CreatorModeConfiguration>,
}
impl UpdateChatControlsConfigurationInput {
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn response_scope(&self) -> ::std::option::Option<&crate::types::ResponseScope> {
        self.response_scope.as_ref()
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn blocked_phrases_configuration_update(&self) -> ::std::option::Option<&crate::types::BlockedPhrasesConfigurationUpdate> {
        self.blocked_phrases_configuration_update.as_ref()
    }
    /// <p>The configured topic specific chat controls you want to update.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topic_configurations_to_create_or_update.is_none()`.
    pub fn topic_configurations_to_create_or_update(&self) -> &[crate::types::TopicConfiguration] {
        self.topic_configurations_to_create_or_update.as_deref().unwrap_or_default()
    }
    /// <p>The configured topic specific chat controls you want to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topic_configurations_to_delete.is_none()`.
    pub fn topic_configurations_to_delete(&self) -> &[crate::types::TopicConfiguration] {
        self.topic_configurations_to_delete.as_deref().unwrap_or_default()
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn creator_mode_configuration(&self) -> ::std::option::Option<&crate::types::CreatorModeConfiguration> {
        self.creator_mode_configuration.as_ref()
    }
}
impl UpdateChatControlsConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateChatControlsConfigurationInput`](crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput).
    pub fn builder() -> crate::operation::update_chat_controls_configuration::builders::UpdateChatControlsConfigurationInputBuilder {
        crate::operation::update_chat_controls_configuration::builders::UpdateChatControlsConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateChatControlsConfigurationInput`](crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateChatControlsConfigurationInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) response_scope: ::std::option::Option<crate::types::ResponseScope>,
    pub(crate) blocked_phrases_configuration_update: ::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate>,
    pub(crate) topic_configurations_to_create_or_update: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    pub(crate) topic_configurations_to_delete: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    pub(crate) creator_mode_configuration: ::std::option::Option<crate::types::CreatorModeConfiguration>,
}
impl UpdateChatControlsConfigurationInputBuilder {
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the application for which the chat controls are configured.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify the request to update a Amazon Q Business application chat configuration.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn response_scope(mut self, input: crate::types::ResponseScope) -> Self {
        self.response_scope = ::std::option::Option::Some(input);
        self
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn set_response_scope(mut self, input: ::std::option::Option<crate::types::ResponseScope>) -> Self {
        self.response_scope = input;
        self
    }
    /// <p>The response scope configured for your application. This determines whether your application uses its retrieval augmented generation (RAG) system to generate answers only from your enterprise data, or also uses the large language models (LLM) knowledge to respons to end user questions in chat.</p>
    pub fn get_response_scope(&self) -> &::std::option::Option<crate::types::ResponseScope> {
        &self.response_scope
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn blocked_phrases_configuration_update(mut self, input: crate::types::BlockedPhrasesConfigurationUpdate) -> Self {
        self.blocked_phrases_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn set_blocked_phrases_configuration_update(mut self, input: ::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate>) -> Self {
        self.blocked_phrases_configuration_update = input;
        self
    }
    /// <p>The phrases blocked from chat by your chat control configuration.</p>
    pub fn get_blocked_phrases_configuration_update(&self) -> &::std::option::Option<crate::types::BlockedPhrasesConfigurationUpdate> {
        &self.blocked_phrases_configuration_update
    }
    /// Appends an item to `topic_configurations_to_create_or_update`.
    ///
    /// To override the contents of this collection use [`set_topic_configurations_to_create_or_update`](Self::set_topic_configurations_to_create_or_update).
    ///
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn topic_configurations_to_create_or_update(mut self, input: crate::types::TopicConfiguration) -> Self {
        let mut v = self.topic_configurations_to_create_or_update.unwrap_or_default();
        v.push(input);
        self.topic_configurations_to_create_or_update = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn set_topic_configurations_to_create_or_update(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>,
    ) -> Self {
        self.topic_configurations_to_create_or_update = input;
        self
    }
    /// <p>The configured topic specific chat controls you want to update.</p>
    pub fn get_topic_configurations_to_create_or_update(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>> {
        &self.topic_configurations_to_create_or_update
    }
    /// Appends an item to `topic_configurations_to_delete`.
    ///
    /// To override the contents of this collection use [`set_topic_configurations_to_delete`](Self::set_topic_configurations_to_delete).
    ///
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn topic_configurations_to_delete(mut self, input: crate::types::TopicConfiguration) -> Self {
        let mut v = self.topic_configurations_to_delete.unwrap_or_default();
        v.push(input);
        self.topic_configurations_to_delete = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn set_topic_configurations_to_delete(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>>) -> Self {
        self.topic_configurations_to_delete = input;
        self
    }
    /// <p>The configured topic specific chat controls you want to delete.</p>
    pub fn get_topic_configurations_to_delete(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TopicConfiguration>> {
        &self.topic_configurations_to_delete
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn creator_mode_configuration(mut self, input: crate::types::CreatorModeConfiguration) -> Self {
        self.creator_mode_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn set_creator_mode_configuration(mut self, input: ::std::option::Option<crate::types::CreatorModeConfiguration>) -> Self {
        self.creator_mode_configuration = input;
        self
    }
    /// <p>The configuration details for <code>CREATOR_MODE</code>.</p>
    pub fn get_creator_mode_configuration(&self) -> &::std::option::Option<crate::types::CreatorModeConfiguration> {
        &self.creator_mode_configuration
    }
    /// Consumes the builder and constructs a [`UpdateChatControlsConfigurationInput`](crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationInput {
                application_id: self.application_id,
                client_token: self.client_token,
                response_scope: self.response_scope,
                blocked_phrases_configuration_update: self.blocked_phrases_configuration_update,
                topic_configurations_to_create_or_update: self.topic_configurations_to_create_or_update,
                topic_configurations_to_delete: self.topic_configurations_to_delete,
                creator_mode_configuration: self.creator_mode_configuration,
            },
        )
    }
}
