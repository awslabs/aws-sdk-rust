// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutFeedbackInput {
    /// <p>The identifier of the application associated with the feedback.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user giving the feedback.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the conversation the feedback is attached to.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the chat message that the feedback was given for.</p>
    pub message_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp for when the feedback was recorded.</p>
    pub message_copied_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The feedback usefulness value given by the user to the chat message.</p>
    pub message_usefulness: ::std::option::Option<crate::types::MessageUsefulnessFeedback>,
}
impl PutFeedbackInput {
    /// <p>The identifier of the application associated with the feedback.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the user giving the feedback.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The identifier of the conversation the feedback is attached to.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of the chat message that the feedback was given for.</p>
    pub fn message_id(&self) -> ::std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The timestamp for when the feedback was recorded.</p>
    pub fn message_copied_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.message_copied_at.as_ref()
    }
    /// <p>The feedback usefulness value given by the user to the chat message.</p>
    pub fn message_usefulness(&self) -> ::std::option::Option<&crate::types::MessageUsefulnessFeedback> {
        self.message_usefulness.as_ref()
    }
}
impl PutFeedbackInput {
    /// Creates a new builder-style object to manufacture [`PutFeedbackInput`](crate::operation::put_feedback::PutFeedbackInput).
    pub fn builder() -> crate::operation::put_feedback::builders::PutFeedbackInputBuilder {
        crate::operation::put_feedback::builders::PutFeedbackInputBuilder::default()
    }
}

/// A builder for [`PutFeedbackInput`](crate::operation::put_feedback::PutFeedbackInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutFeedbackInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_copied_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) message_usefulness: ::std::option::Option<crate::types::MessageUsefulnessFeedback>,
}
impl PutFeedbackInputBuilder {
    /// <p>The identifier of the application associated with the feedback.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the application associated with the feedback.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the application associated with the feedback.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the user giving the feedback.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user giving the feedback.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user giving the feedback.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The identifier of the conversation the feedback is attached to.</p>
    /// This field is required.
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the conversation the feedback is attached to.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the conversation the feedback is attached to.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of the chat message that the feedback was given for.</p>
    /// This field is required.
    pub fn message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the chat message that the feedback was given for.</p>
    pub fn set_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The identifier of the chat message that the feedback was given for.</p>
    pub fn get_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_id
    }
    /// <p>The timestamp for when the feedback was recorded.</p>
    pub fn message_copied_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.message_copied_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the feedback was recorded.</p>
    pub fn set_message_copied_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.message_copied_at = input;
        self
    }
    /// <p>The timestamp for when the feedback was recorded.</p>
    pub fn get_message_copied_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.message_copied_at
    }
    /// <p>The feedback usefulness value given by the user to the chat message.</p>
    pub fn message_usefulness(mut self, input: crate::types::MessageUsefulnessFeedback) -> Self {
        self.message_usefulness = ::std::option::Option::Some(input);
        self
    }
    /// <p>The feedback usefulness value given by the user to the chat message.</p>
    pub fn set_message_usefulness(mut self, input: ::std::option::Option<crate::types::MessageUsefulnessFeedback>) -> Self {
        self.message_usefulness = input;
        self
    }
    /// <p>The feedback usefulness value given by the user to the chat message.</p>
    pub fn get_message_usefulness(&self) -> &::std::option::Option<crate::types::MessageUsefulnessFeedback> {
        &self.message_usefulness
    }
    /// Consumes the builder and constructs a [`PutFeedbackInput`](crate::operation::put_feedback::PutFeedbackInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::put_feedback::PutFeedbackInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_feedback::PutFeedbackInput {
            application_id: self.application_id,
            user_id: self.user_id,
            conversation_id: self.conversation_id,
            message_id: self.message_id,
            message_copied_at: self.message_copied_at,
            message_usefulness: self.message_usefulness,
        })
    }
}
