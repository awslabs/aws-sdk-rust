// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRetrieverInput {
    /// <p>The identifier of your Amazon Q Business application.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of retriever you are using.</p>
    pub r#type: ::std::option::Option<crate::types::RetrieverType>,
    /// <p>The name of your retriever.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Provides information on how the retriever used for your Amazon Q Business application is configured.</p>
    pub configuration: ::std::option::Option<crate::types::RetrieverConfiguration>,
    /// <p>The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A token that you provide to identify the request to create your Amazon Q Business application retriever.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRetrieverInput {
    /// <p>The identifier of your Amazon Q Business application.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The type of retriever you are using.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::RetrieverType> {
        self.r#type.as_ref()
    }
    /// <p>The name of your retriever.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Provides information on how the retriever used for your Amazon Q Business application is configured.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::RetrieverConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business application retriever.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateRetrieverInput {
    /// Creates a new builder-style object to manufacture [`CreateRetrieverInput`](crate::operation::create_retriever::CreateRetrieverInput).
    pub fn builder() -> crate::operation::create_retriever::builders::CreateRetrieverInputBuilder {
        crate::operation::create_retriever::builders::CreateRetrieverInputBuilder::default()
    }
}

/// A builder for [`CreateRetrieverInput`](crate::operation::create_retriever::CreateRetrieverInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRetrieverInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RetrieverType>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::RetrieverConfiguration>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateRetrieverInputBuilder {
    /// <p>The identifier of your Amazon Q Business application.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of your Amazon Q Business application.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of your Amazon Q Business application.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The type of retriever you are using.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RetrieverType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of retriever you are using.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RetrieverType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of retriever you are using.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RetrieverType> {
        &self.r#type
    }
    /// <p>The name of your retriever.</p>
    /// This field is required.
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your retriever.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The name of your retriever.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Provides information on how the retriever used for your Amazon Q Business application is configured.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::RetrieverConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides information on how the retriever used for your Amazon Q Business application is configured.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::RetrieverConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Provides information on how the retriever used for your Amazon Q Business application is configured.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::RetrieverConfiguration> {
        &self.configuration
    }
    /// <p>The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of an IAM role used by Amazon Q Business to access the basic authentication credentials stored in a Secrets Manager secret.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business application retriever.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business application retriever.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business application retriever.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of key-value pairs that identify or categorize the retriever. You can also use tags to help control access to the retriever. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateRetrieverInput`](crate::operation::create_retriever::CreateRetrieverInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_retriever::CreateRetrieverInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_retriever::CreateRetrieverInput {
            application_id: self.application_id,
            r#type: self.r#type,
            display_name: self.display_name,
            configuration: self.configuration,
            role_arn: self.role_arn,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
