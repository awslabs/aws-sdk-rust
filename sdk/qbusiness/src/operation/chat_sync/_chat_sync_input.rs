// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ChatSyncInput {
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user attached to the chat input.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub user_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A end user message in a conversation.</p>
    pub user_message: ::std::option::Option<::std::string::String>,
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub attachments: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>>,
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub action_execution: ::std::option::Option<crate::types::ActionExecution>,
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub conversation_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub parent_message_id: ::std::option::Option<::std::string::String>,
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub chat_mode: ::std::option::Option<crate::types::ChatMode>,
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub chat_mode_configuration: ::std::option::Option<crate::types::ChatModeConfiguration>,
    /// <p>A token that you provide to identify a chat request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl ChatSyncInput {
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_groups.is_none()`.
    pub fn user_groups(&self) -> &[::std::string::String] {
        self.user_groups.as_deref().unwrap_or_default()
    }
    /// <p>A end user message in a conversation.</p>
    pub fn user_message(&self) -> ::std::option::Option<&str> {
        self.user_message.as_deref()
    }
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attachments.is_none()`.
    pub fn attachments(&self) -> &[crate::types::AttachmentInput] {
        self.attachments.as_deref().unwrap_or_default()
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn action_execution(&self) -> ::std::option::Option<&crate::types::ActionExecution> {
        self.action_execution.as_ref()
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(&self) -> ::std::option::Option<&str> {
        self.conversation_id.as_deref()
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn parent_message_id(&self) -> ::std::option::Option<&str> {
        self.parent_message_id.as_deref()
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(&self) -> ::std::option::Option<&crate::types::AttributeFilter> {
        self.attribute_filter.as_ref()
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode(&self) -> ::std::option::Option<&crate::types::ChatMode> {
        self.chat_mode.as_ref()
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn chat_mode_configuration(&self) -> ::std::option::Option<&crate::types::ChatModeConfiguration> {
        self.chat_mode_configuration.as_ref()
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl ChatSyncInput {
    /// Creates a new builder-style object to manufacture [`ChatSyncInput`](crate::operation::chat_sync::ChatSyncInput).
    pub fn builder() -> crate::operation::chat_sync::builders::ChatSyncInputBuilder {
        crate::operation::chat_sync::builders::ChatSyncInputBuilder::default()
    }
}

/// A builder for [`ChatSyncInput`](crate::operation::chat_sync::ChatSyncInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ChatSyncInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_message: ::std::option::Option<::std::string::String>,
    pub(crate) attachments: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>>,
    pub(crate) action_execution: ::std::option::Option<crate::types::ActionExecution>,
    pub(crate) conversation_id: ::std::option::Option<::std::string::String>,
    pub(crate) parent_message_id: ::std::option::Option<::std::string::String>,
    pub(crate) attribute_filter: ::std::option::Option<crate::types::AttributeFilter>,
    pub(crate) chat_mode: ::std::option::Option<crate::types::ChatMode>,
    pub(crate) chat_mode_configuration: ::std::option::Option<crate::types::ChatModeConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl ChatSyncInputBuilder {
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Appends an item to `user_groups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn user_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_groups.unwrap_or_default();
        v.push(input.into());
        self.user_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_groups = input;
        self
    }
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_groups
    }
    /// <p>A end user message in a conversation.</p>
    pub fn user_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A end user message in a conversation.</p>
    pub fn set_user_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_message = input;
        self
    }
    /// <p>A end user message in a conversation.</p>
    pub fn get_user_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_message
    }
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn attachments(mut self, input: crate::types::AttachmentInput) -> Self {
        let mut v = self.attachments.unwrap_or_default();
        v.push(input);
        self.attachments = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>>) -> Self {
        self.attachments = input;
        self
    }
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>> {
        &self.attachments
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn action_execution(mut self, input: crate::types::ActionExecution) -> Self {
        self.action_execution = ::std::option::Option::Some(input);
        self
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn set_action_execution(mut self, input: ::std::option::Option<crate::types::ActionExecution>) -> Self {
        self.action_execution = input;
        self
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn get_action_execution(&self) -> &::std::option::Option<crate::types::ActionExecution> {
        &self.action_execution
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conversation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conversation_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.conversation_id
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn parent_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parent_message_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn set_parent_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parent_message_id = input;
        self
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn get_parent_message_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.parent_message_id
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.attribute_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.attribute_filter = input;
        self
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        &self.attribute_filter
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode(mut self, input: crate::types::ChatMode) -> Self {
        self.chat_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn set_chat_mode(mut self, input: ::std::option::Option<crate::types::ChatMode>) -> Self {
        self.chat_mode = input;
        self
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn get_chat_mode(&self) -> &::std::option::Option<crate::types::ChatMode> {
        &self.chat_mode
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn chat_mode_configuration(mut self, input: crate::types::ChatModeConfiguration) -> Self {
        self.chat_mode_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn set_chat_mode_configuration(mut self, input: ::std::option::Option<crate::types::ChatModeConfiguration>) -> Self {
        self.chat_mode_configuration = input;
        self
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn get_chat_mode_configuration(&self) -> &::std::option::Option<crate::types::ChatModeConfiguration> {
        &self.chat_mode_configuration
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`ChatSyncInput`](crate::operation::chat_sync::ChatSyncInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::chat_sync::ChatSyncInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::chat_sync::ChatSyncInput {
            application_id: self.application_id,
            user_id: self.user_id,
            user_groups: self.user_groups,
            user_message: self.user_message,
            attachments: self.attachments,
            action_execution: self.action_execution,
            conversation_id: self.conversation_id,
            parent_message_id: self.parent_message_id,
            attribute_filter: self.attribute_filter,
            chat_mode: self.chat_mode,
            chat_mode_configuration: self.chat_mode_configuration,
            client_token: self.client_token,
        })
    }
}
