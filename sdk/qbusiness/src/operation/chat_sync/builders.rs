// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::chat_sync::_chat_sync_output::ChatSyncOutputBuilder;

pub use crate::operation::chat_sync::_chat_sync_input::ChatSyncInputBuilder;

impl crate::operation::chat_sync::builders::ChatSyncInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::chat_sync::ChatSyncOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::chat_sync::ChatSyncError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.chat_sync();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ChatSync`.
///
/// <p>Starts or continues a non-streaming Amazon Q Business conversation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ChatSyncFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::chat_sync::builders::ChatSyncInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::chat_sync::ChatSyncOutput, crate::operation::chat_sync::ChatSyncError>
    for ChatSyncFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::chat_sync::ChatSyncOutput, crate::operation::chat_sync::ChatSyncError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ChatSyncFluentBuilder {
    /// Creates a new `ChatSync`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ChatSync as a reference.
    pub fn as_input(&self) -> &crate::operation::chat_sync::builders::ChatSyncInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::chat_sync::ChatSyncOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::chat_sync::ChatSyncError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::chat_sync::ChatSync::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::chat_sync::ChatSync::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<crate::operation::chat_sync::ChatSyncOutput, crate::operation::chat_sync::ChatSyncError, Self>
    {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_id(input);
        self
    }
    /// <p>The identifier of the Amazon Q Business application linked to the Amazon Q Business conversation.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_id()
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_id(input.into());
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_id(input);
        self
    }
    /// <p>The identifier of the user attached to the chat input.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_id()
    }
    ///
    /// Appends an item to `userGroups`.
    ///
    /// To override the contents of this collection use [`set_user_groups`](Self::set_user_groups).
    ///
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn user_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_groups(input.into());
        self
    }
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn set_user_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_user_groups(input);
        self
    }
    /// <p>The groups that a user associated with the chat input belongs to.</p>
    pub fn get_user_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_user_groups()
    }
    /// <p>A end user message in a conversation.</p>
    pub fn user_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_message(input.into());
        self
    }
    /// <p>A end user message in a conversation.</p>
    pub fn set_user_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_message(input);
        self
    }
    /// <p>A end user message in a conversation.</p>
    pub fn get_user_message(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_message()
    }
    ///
    /// Appends an item to `attachments`.
    ///
    /// To override the contents of this collection use [`set_attachments`](Self::set_attachments).
    ///
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn attachments(mut self, input: crate::types::AttachmentInput) -> Self {
        self.inner = self.inner.attachments(input);
        self
    }
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn set_attachments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>>) -> Self {
        self.inner = self.inner.set_attachments(input);
        self
    }
    /// <p>A list of files uploaded directly during chat. You can upload a maximum of 5 files of upto 10 MB each.</p>
    pub fn get_attachments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AttachmentInput>> {
        self.inner.get_attachments()
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn action_execution(mut self, input: crate::types::ActionExecution) -> Self {
        self.inner = self.inner.action_execution(input);
        self
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn set_action_execution(mut self, input: ::std::option::Option<crate::types::ActionExecution>) -> Self {
        self.inner = self.inner.set_action_execution(input);
        self
    }
    /// <p>A request from an end user to perform an Amazon Q Business plugin action.</p>
    pub fn get_action_execution(&self) -> &::std::option::Option<crate::types::ActionExecution> {
        self.inner.get_action_execution()
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn conversation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.conversation_id(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn set_conversation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_conversation_id(input);
        self
    }
    /// <p>The identifier of the Amazon Q Business conversation.</p>
    pub fn get_conversation_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_conversation_id()
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn parent_message_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.parent_message_id(input.into());
        self
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn set_parent_message_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_parent_message_id(input);
        self
    }
    /// <p>The identifier of the previous end user text input message in a conversation.</p>
    pub fn get_parent_message_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_parent_message_id()
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn attribute_filter(mut self, input: crate::types::AttributeFilter) -> Self {
        self.inner = self.inner.attribute_filter(input);
        self
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn set_attribute_filter(mut self, input: ::std::option::Option<crate::types::AttributeFilter>) -> Self {
        self.inner = self.inner.set_attribute_filter(input);
        self
    }
    /// <p>Enables filtering of Amazon Q Business web experience responses based on document attributes or metadata fields.</p>
    pub fn get_attribute_filter(&self) -> &::std::option::Option<crate::types::AttributeFilter> {
        self.inner.get_attribute_filter()
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn chat_mode(mut self, input: crate::types::ChatMode) -> Self {
        self.inner = self.inner.chat_mode(input);
        self
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn set_chat_mode(mut self, input: ::std::option::Option<crate::types::ChatMode>) -> Self {
        self.inner = self.inner.set_chat_mode(input);
        self
    }
    /// <p>The chat modes available in an Amazon Q Business web experience.</p>
    /// <ul>
    /// <li>
    /// <p><code>RETRIEVAL_MODE</code> - The default chat mode for an Amazon Q Business application. When this mode is enabled, Amazon Q Business generates responses only from data sources connected to an Amazon Q Business application.</p></li>
    /// <li>
    /// <p><code>CREATOR_MODE</code> - By selecting this mode, users can choose to generate responses only from the LLM knowledge, without consulting connected data sources, for a chat request.</p></li>
    /// <li>
    /// <p><code>PLUGIN_MODE</code> - By selecting this mode, users can choose to use plugins in chat.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/guardrails.html">Admin controls and guardrails</a>, <a href="https://docs.aws.amazon.com/amazonq/latest/qbusiness-ug/plugins.html">Plugins</a>, and <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/using-web-experience.html#chat-source-scope">Conversation settings</a>.</p>
    pub fn get_chat_mode(&self) -> &::std::option::Option<crate::types::ChatMode> {
        self.inner.get_chat_mode()
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn chat_mode_configuration(mut self, input: crate::types::ChatModeConfiguration) -> Self {
        self.inner = self.inner.chat_mode_configuration(input);
        self
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn set_chat_mode_configuration(mut self, input: ::std::option::Option<crate::types::ChatModeConfiguration>) -> Self {
        self.inner = self.inner.set_chat_mode_configuration(input);
        self
    }
    /// <p>The chat mode configuration for an Amazon Q Business application.</p>
    pub fn get_chat_mode_configuration(&self) -> &::std::option::Option<crate::types::ChatModeConfiguration> {
        self.inner.get_chat_mode_configuration()
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that you provide to identify a chat request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
