// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUserInput {
    /// <p>The identifier of the application for which the user mapping will be created.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The user emails attached to a user mapping.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The list of user aliases in the mapping.</p>
    pub user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>,
    /// <p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateUserInput {
    /// <p>The identifier of the application for which the user mapping will be created.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The user emails attached to a user mapping.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The list of user aliases in the mapping.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_aliases.is_none()`.
    pub fn user_aliases(&self) -> &[crate::types::UserAlias] {
        self.user_aliases.as_deref().unwrap_or_default()
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateUserInput {
    /// Creates a new builder-style object to manufacture [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn builder() -> crate::operation::create_user::builders::CreateUserInputBuilder {
        crate::operation::create_user::builders::CreateUserInputBuilder::default()
    }
}

/// A builder for [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateUserInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_aliases: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateUserInputBuilder {
    /// <p>The identifier of the application for which the user mapping will be created.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the application for which the user mapping will be created.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the application for which the user mapping will be created.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The user emails attached to a user mapping.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user emails attached to a user mapping.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The user emails attached to a user mapping.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Appends an item to `user_aliases`.
    ///
    /// To override the contents of this collection use [`set_user_aliases`](Self::set_user_aliases).
    ///
    /// <p>The list of user aliases in the mapping.</p>
    pub fn user_aliases(mut self, input: crate::types::UserAlias) -> Self {
        let mut v = self.user_aliases.unwrap_or_default();
        v.push(input);
        self.user_aliases = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of user aliases in the mapping.</p>
    pub fn set_user_aliases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserAlias>>) -> Self {
        self.user_aliases = input;
        self
    }
    /// <p>The list of user aliases in the mapping.</p>
    pub fn get_user_aliases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserAlias>> {
        &self.user_aliases
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateUserInput`](crate::operation::create_user::CreateUserInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_user::CreateUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_user::CreateUserInput {
            application_id: self.application_id,
            user_id: self.user_id,
            user_aliases: self.user_aliases,
            client_token: self.client_token,
        })
    }
}
