// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDataSourceInput {
    /// <p>The identifier of the Amazon Q Business application the data source is attached to.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the index attached to the data source connector.</p>
    pub index_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the data source connector.</p>
    pub data_source_id: ::std::option::Option<::std::string::String>,
    /// <p>A name of the data source connector.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Provides the configuration information for an Amazon Q Business data source.</p>
    pub configuration: ::std::option::Option<::aws_smithy_types::Document>,
    /// <p>Provides configuration information needed to connect to an Amazon VPC (Virtual Private Cloud).</p>
    pub vpc_configuration: ::std::option::Option<crate::types::DataSourceVpcConfiguration>,
    /// <p>The description of the data source connector.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The chosen update frequency for your data source.</p>
    pub sync_schedule: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html">Custom document enrichment</a>.</p>
    pub document_enrichment_configuration: ::std::option::Option<crate::types::DocumentEnrichmentConfiguration>,
}
impl UpdateDataSourceInput {
    /// <p>The identifier of the Amazon Q Business application the data source is attached to.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the index attached to the data source connector.</p>
    pub fn index_id(&self) -> ::std::option::Option<&str> {
        self.index_id.as_deref()
    }
    /// <p>The identifier of the data source connector.</p>
    pub fn data_source_id(&self) -> ::std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>A name of the data source connector.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Provides the configuration information for an Amazon Q Business data source.</p>
    pub fn configuration(&self) -> ::std::option::Option<&::aws_smithy_types::Document> {
        self.configuration.as_ref()
    }
    /// <p>Provides configuration information needed to connect to an Amazon VPC (Virtual Private Cloud).</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::DataSourceVpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>The description of the data source connector.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The chosen update frequency for your data source.</p>
    pub fn sync_schedule(&self) -> ::std::option::Option<&str> {
        self.sync_schedule.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html">Custom document enrichment</a>.</p>
    pub fn document_enrichment_configuration(&self) -> ::std::option::Option<&crate::types::DocumentEnrichmentConfiguration> {
        self.document_enrichment_configuration.as_ref()
    }
}
impl UpdateDataSourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateDataSourceInput`](crate::operation::update_data_source::UpdateDataSourceInput).
    pub fn builder() -> crate::operation::update_data_source::builders::UpdateDataSourceInputBuilder {
        crate::operation::update_data_source::builders::UpdateDataSourceInputBuilder::default()
    }
}

/// A builder for [`UpdateDataSourceInput`](crate::operation::update_data_source::UpdateDataSourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDataSourceInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) index_id: ::std::option::Option<::std::string::String>,
    pub(crate) data_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<::aws_smithy_types::Document>,
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::DataSourceVpcConfiguration>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) sync_schedule: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) document_enrichment_configuration: ::std::option::Option<crate::types::DocumentEnrichmentConfiguration>,
}
impl UpdateDataSourceInputBuilder {
    /// <p>The identifier of the Amazon Q Business application the data source is attached to.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application the data source is attached to.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application the data source is attached to.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the index attached to the data source connector.</p>
    /// This field is required.
    pub fn index_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.index_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the index attached to the data source connector.</p>
    pub fn set_index_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.index_id = input;
        self
    }
    /// <p>The identifier of the index attached to the data source connector.</p>
    pub fn get_index_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.index_id
    }
    /// <p>The identifier of the data source connector.</p>
    /// This field is required.
    pub fn data_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the data source connector.</p>
    pub fn set_data_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>The identifier of the data source connector.</p>
    pub fn get_data_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source_id
    }
    /// <p>A name of the data source connector.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name of the data source connector.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>A name of the data source connector.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Provides the configuration information for an Amazon Q Business data source.</p>
    pub fn configuration(mut self, input: ::aws_smithy_types::Document) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the configuration information for an Amazon Q Business data source.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<::aws_smithy_types::Document>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Provides the configuration information for an Amazon Q Business data source.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<::aws_smithy_types::Document> {
        &self.configuration
    }
    /// <p>Provides configuration information needed to connect to an Amazon VPC (Virtual Private Cloud).</p>
    pub fn vpc_configuration(mut self, input: crate::types::DataSourceVpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides configuration information needed to connect to an Amazon VPC (Virtual Private Cloud).</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceVpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>Provides configuration information needed to connect to an Amazon VPC (Virtual Private Cloud).</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::DataSourceVpcConfiguration> {
        &self.vpc_configuration
    }
    /// <p>The description of the data source connector.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the data source connector.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the data source connector.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The chosen update frequency for your data source.</p>
    pub fn sync_schedule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sync_schedule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The chosen update frequency for your data source.</p>
    pub fn set_sync_schedule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sync_schedule = input;
        self
    }
    /// <p>The chosen update frequency for your data source.</p>
    pub fn get_sync_schedule(&self) -> &::std::option::Option<::std::string::String> {
        &self.sync_schedule
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source and required resources.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html">Custom document enrichment</a>.</p>
    pub fn document_enrichment_configuration(mut self, input: crate::types::DocumentEnrichmentConfiguration) -> Self {
        self.document_enrichment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html">Custom document enrichment</a>.</p>
    pub fn set_document_enrichment_configuration(mut self, input: ::std::option::Option<crate::types::DocumentEnrichmentConfiguration>) -> Self {
        self.document_enrichment_configuration = input;
        self
    }
    /// <p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/custom-document-enrichment.html">Custom document enrichment</a>.</p>
    pub fn get_document_enrichment_configuration(&self) -> &::std::option::Option<crate::types::DocumentEnrichmentConfiguration> {
        &self.document_enrichment_configuration
    }
    /// Consumes the builder and constructs a [`UpdateDataSourceInput`](crate::operation::update_data_source::UpdateDataSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_data_source::UpdateDataSourceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_data_source::UpdateDataSourceInput {
            application_id: self.application_id,
            index_id: self.index_id,
            data_source_id: self.data_source_id,
            display_name: self.display_name,
            configuration: self.configuration,
            vpc_configuration: self.vpc_configuration,
            description: self.description,
            sync_schedule: self.sync_schedule,
            role_arn: self.role_arn,
            document_enrichment_configuration: self.document_enrichment_configuration,
        })
    }
}
