// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWebExperienceInput {
    /// <p>The identifier of the Amazon Q Business application attached to the web experience.</p>
    pub application_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Amazon Q Business web experience.</p>
    pub web_experience_id: ::std::option::Option<::std::string::String>,
    /// <p>The authentication configuration of the Amazon Q Business web experience.</p>
    pub authentication_configuration: ::std::option::Option<crate::types::WebExperienceAuthConfiguration>,
    /// <p>The title of the Amazon Q Business web experience.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>The subtitle of the Amazon Q Business web experience.</p>
    pub subtitle: ::std::option::Option<::std::string::String>,
    /// <p>A customized welcome message for an end user in an Amazon Q Business web experience.</p>
    pub welcome_message: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether sample prompts are enabled in the web experience for an end user.</p>
    pub sample_prompts_control_mode: ::std::option::Option<crate::types::WebExperienceSamplePromptsControlMode>,
}
impl UpdateWebExperienceInput {
    /// <p>The identifier of the Amazon Q Business application attached to the web experience.</p>
    pub fn application_id(&self) -> ::std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The identifier of the Amazon Q Business web experience.</p>
    pub fn web_experience_id(&self) -> ::std::option::Option<&str> {
        self.web_experience_id.as_deref()
    }
    /// <p>The authentication configuration of the Amazon Q Business web experience.</p>
    pub fn authentication_configuration(&self) -> ::std::option::Option<&crate::types::WebExperienceAuthConfiguration> {
        self.authentication_configuration.as_ref()
    }
    /// <p>The title of the Amazon Q Business web experience.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The subtitle of the Amazon Q Business web experience.</p>
    pub fn subtitle(&self) -> ::std::option::Option<&str> {
        self.subtitle.as_deref()
    }
    /// <p>A customized welcome message for an end user in an Amazon Q Business web experience.</p>
    pub fn welcome_message(&self) -> ::std::option::Option<&str> {
        self.welcome_message.as_deref()
    }
    /// <p>Determines whether sample prompts are enabled in the web experience for an end user.</p>
    pub fn sample_prompts_control_mode(&self) -> ::std::option::Option<&crate::types::WebExperienceSamplePromptsControlMode> {
        self.sample_prompts_control_mode.as_ref()
    }
}
impl UpdateWebExperienceInput {
    /// Creates a new builder-style object to manufacture [`UpdateWebExperienceInput`](crate::operation::update_web_experience::UpdateWebExperienceInput).
    pub fn builder() -> crate::operation::update_web_experience::builders::UpdateWebExperienceInputBuilder {
        crate::operation::update_web_experience::builders::UpdateWebExperienceInputBuilder::default()
    }
}

/// A builder for [`UpdateWebExperienceInput`](crate::operation::update_web_experience::UpdateWebExperienceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWebExperienceInputBuilder {
    pub(crate) application_id: ::std::option::Option<::std::string::String>,
    pub(crate) web_experience_id: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_configuration: ::std::option::Option<crate::types::WebExperienceAuthConfiguration>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) subtitle: ::std::option::Option<::std::string::String>,
    pub(crate) welcome_message: ::std::option::Option<::std::string::String>,
    pub(crate) sample_prompts_control_mode: ::std::option::Option<crate::types::WebExperienceSamplePromptsControlMode>,
}
impl UpdateWebExperienceInputBuilder {
    /// <p>The identifier of the Amazon Q Business application attached to the web experience.</p>
    /// This field is required.
    pub fn application_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business application attached to the web experience.</p>
    pub fn set_application_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business application attached to the web experience.</p>
    pub fn get_application_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_id
    }
    /// <p>The identifier of the Amazon Q Business web experience.</p>
    /// This field is required.
    pub fn web_experience_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.web_experience_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Amazon Q Business web experience.</p>
    pub fn set_web_experience_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.web_experience_id = input;
        self
    }
    /// <p>The identifier of the Amazon Q Business web experience.</p>
    pub fn get_web_experience_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.web_experience_id
    }
    /// <p>The authentication configuration of the Amazon Q Business web experience.</p>
    pub fn authentication_configuration(mut self, input: crate::types::WebExperienceAuthConfiguration) -> Self {
        self.authentication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication configuration of the Amazon Q Business web experience.</p>
    pub fn set_authentication_configuration(mut self, input: ::std::option::Option<crate::types::WebExperienceAuthConfiguration>) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// <p>The authentication configuration of the Amazon Q Business web experience.</p>
    pub fn get_authentication_configuration(&self) -> &::std::option::Option<crate::types::WebExperienceAuthConfiguration> {
        &self.authentication_configuration
    }
    /// <p>The title of the Amazon Q Business web experience.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the Amazon Q Business web experience.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the Amazon Q Business web experience.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The subtitle of the Amazon Q Business web experience.</p>
    pub fn subtitle(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subtitle = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subtitle of the Amazon Q Business web experience.</p>
    pub fn set_subtitle(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subtitle = input;
        self
    }
    /// <p>The subtitle of the Amazon Q Business web experience.</p>
    pub fn get_subtitle(&self) -> &::std::option::Option<::std::string::String> {
        &self.subtitle
    }
    /// <p>A customized welcome message for an end user in an Amazon Q Business web experience.</p>
    pub fn welcome_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.welcome_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customized welcome message for an end user in an Amazon Q Business web experience.</p>
    pub fn set_welcome_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.welcome_message = input;
        self
    }
    /// <p>A customized welcome message for an end user in an Amazon Q Business web experience.</p>
    pub fn get_welcome_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.welcome_message
    }
    /// <p>Determines whether sample prompts are enabled in the web experience for an end user.</p>
    pub fn sample_prompts_control_mode(mut self, input: crate::types::WebExperienceSamplePromptsControlMode) -> Self {
        self.sample_prompts_control_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether sample prompts are enabled in the web experience for an end user.</p>
    pub fn set_sample_prompts_control_mode(mut self, input: ::std::option::Option<crate::types::WebExperienceSamplePromptsControlMode>) -> Self {
        self.sample_prompts_control_mode = input;
        self
    }
    /// <p>Determines whether sample prompts are enabled in the web experience for an end user.</p>
    pub fn get_sample_prompts_control_mode(&self) -> &::std::option::Option<crate::types::WebExperienceSamplePromptsControlMode> {
        &self.sample_prompts_control_mode
    }
    /// Consumes the builder and constructs a [`UpdateWebExperienceInput`](crate::operation::update_web_experience::UpdateWebExperienceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_web_experience::UpdateWebExperienceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_web_experience::UpdateWebExperienceInput {
            application_id: self.application_id,
            web_experience_id: self.web_experience_id,
            authentication_configuration: self.authentication_configuration,
            title: self.title,
            subtitle: self.subtitle,
            welcome_message: self.welcome_message,
            sample_prompts_control_mode: self.sample_prompts_control_mode,
        })
    }
}
