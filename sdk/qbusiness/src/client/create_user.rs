// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateUser`](crate::operation::create_user::builders::CreateUserFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_application_id):<br>required: **true**<br><p>The identifier of the application for which the user mapping will be created.</p><br>
    ///   - [`user_id(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_user_id):<br>required: **true**<br><p>The user emails attached to a user mapping.</p><br>
    ///   - [`user_aliases(UserAlias)`](crate::operation::create_user::builders::CreateUserFluentBuilder::user_aliases) / [`set_user_aliases(Option<Vec::<UserAlias>>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_user_aliases):<br>required: **false**<br><p>The list of user aliases in the mapping.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_user::builders::CreateUserFluentBuilder::set_client_token):<br>required: **false**<br><p>A token that you provide to identify the request to create your Amazon Q Business user mapping.</p><br>
    /// - On success, responds with [`CreateUserOutput`](crate::operation::create_user::CreateUserOutput)
    /// - On failure, responds with [`SdkError<CreateUserError>`](crate::operation::create_user::CreateUserError)
    pub fn create_user(&self) -> crate::operation::create_user::builders::CreateUserFluentBuilder {
        crate::operation::create_user::builders::CreateUserFluentBuilder::new(self.handle.clone())
    }
}
