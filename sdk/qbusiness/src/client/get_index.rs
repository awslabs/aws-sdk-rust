// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetIndex`](crate::operation::get_index::builders::GetIndexFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_id(impl Into<String>)`](crate::operation::get_index::builders::GetIndexFluentBuilder::application_id) / [`set_application_id(Option<String>)`](crate::operation::get_index::builders::GetIndexFluentBuilder::set_application_id):<br>required: **true**<br><p>The identifier of the Amazon Q Business application connected to the index.</p><br>
    ///   - [`index_id(impl Into<String>)`](crate::operation::get_index::builders::GetIndexFluentBuilder::index_id) / [`set_index_id(Option<String>)`](crate::operation::get_index::builders::GetIndexFluentBuilder::set_index_id):<br>required: **true**<br><p>The identifier of the Amazon Q Business index you want information on.</p><br>
    /// - On success, responds with [`GetIndexOutput`](crate::operation::get_index::GetIndexOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::operation::get_index::GetIndexOutput::application_id): <p>The identifier of the Amazon Q Business application associated with the index.</p>
    ///   - [`index_id(Option<String>)`](crate::operation::get_index::GetIndexOutput::index_id): <p>The identifier of the Amazon Q Business index.</p>
    ///   - [`display_name(Option<String>)`](crate::operation::get_index::GetIndexOutput::display_name): <p>The name of the Amazon Q Business index.</p>
    ///   - [`index_arn(Option<String>)`](crate::operation::get_index::GetIndexOutput::index_arn): <p>The Amazon Resource Name (ARN) of the Amazon Q Business index.</p>
    ///   - [`status(Option<IndexStatus>)`](crate::operation::get_index::GetIndexOutput::status): <p>The current status of the index. When the value is <code>ACTIVE</code>, the index is ready for use. If the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field contains a message that explains why.</p>
    ///   - [`description(Option<String>)`](crate::operation::get_index::GetIndexOutput::description): <p>The description for the Amazon Q Business index.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::get_index::GetIndexOutput::created_at): <p>The Unix timestamp when the Amazon Q Business index was created.</p>
    ///   - [`updated_at(Option<DateTime>)`](crate::operation::get_index::GetIndexOutput::updated_at): <p>The Unix timestamp when the Amazon Q Business index was last updated.</p>
    ///   - [`capacity_configuration(Option<IndexCapacityConfiguration>)`](crate::operation::get_index::GetIndexOutput::capacity_configuration): <p>The storage capacity units chosen for your Amazon Q Business index.</p>
    ///   - [`document_attribute_configurations(Option<Vec::<DocumentAttributeConfiguration>>)`](crate::operation::get_index::GetIndexOutput::document_attribute_configurations): <p>Configuration information for document attributes or metadata. Document metadata are fields associated with your documents. For example, the company department name associated with each document. For more information, see <a href="https://docs.aws.amazon.com/amazonq/latest/business-use-dg/doc-attributes-types.html#doc-attributes">Understanding document attributes</a>.</p>
    ///   - [`error(Option<ErrorDetail>)`](crate::operation::get_index::GetIndexOutput::error): <p>When the <code>Status</code> field value is <code>FAILED</code>, the <code>ErrorMessage</code> field contains a message that explains why.</p>
    ///   - [`index_statistics(Option<IndexStatistics>)`](crate::operation::get_index::GetIndexOutput::index_statistics): <p>Provides information about the number of documents indexed.</p>
    /// - On failure, responds with [`SdkError<GetIndexError>`](crate::operation::get_index::GetIndexError)
    pub fn get_index(&self) -> crate::operation::get_index::builders::GetIndexFluentBuilder {
        crate::operation::get_index::builders::GetIndexFluentBuilder::new(self.handle.clone())
    }
}
