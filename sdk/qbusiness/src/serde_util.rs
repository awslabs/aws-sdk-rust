// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn license_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::LicenseNotFoundExceptionBuilder,
) -> crate::types::error::builders::LicenseNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn applied_creator_mode_configuration_correct_errors(
    mut builder: crate::types::builders::AppliedCreatorModeConfigurationBuilder,
) -> crate::types::builders::AppliedCreatorModeConfigurationBuilder {
    if builder.creator_mode_control.is_none() {
        builder.creator_mode_control = "no value was set".parse::<crate::types::CreatorModeControl>().ok()
    }
    builder
}

pub(crate) fn data_source_vpc_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceVpcConfigurationBuilder,
) -> crate::types::builders::DataSourceVpcConfigurationBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn basic_auth_configuration_correct_errors(
    mut builder: crate::types::builders::BasicAuthConfigurationBuilder,
) -> crate::types::builders::BasicAuthConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kendra_index_configuration_correct_errors(
    mut builder: crate::types::builders::KendraIndexConfigurationBuilder,
) -> crate::types::builders::KendraIndexConfigurationBuilder {
    if builder.index_id.is_none() {
        builder.index_id = Some(Default::default())
    }
    builder
}

pub(crate) fn native_index_configuration_correct_errors(
    mut builder: crate::types::builders::NativeIndexConfigurationBuilder,
) -> crate::types::builders::NativeIndexConfigurationBuilder {
    if builder.index_id.is_none() {
        builder.index_id = Some(Default::default())
    }
    builder
}

pub(crate) fn o_auth2_client_credential_configuration_correct_errors(
    mut builder: crate::types::builders::OAuth2ClientCredentialConfigurationBuilder,
) -> crate::types::builders::OAuth2ClientCredentialConfigurationBuilder {
    if builder.secret_arn.is_none() {
        builder.secret_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn saml_configuration_correct_errors(
    mut builder: crate::types::builders::SamlConfigurationBuilder,
) -> crate::types::builders::SamlConfigurationBuilder {
    if builder.metadata_xml.is_none() {
        builder.metadata_xml = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.user_id_attribute.is_none() {
        builder.user_id_attribute = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn topic_configuration_correct_errors(
    mut builder: crate::types::builders::TopicConfigurationBuilder,
) -> crate::types::builders::TopicConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn user_alias_correct_errors(mut builder: crate::types::builders::UserAliasBuilder) -> crate::types::builders::UserAliasBuilder {
    if builder.user_id.is_none() {
        builder.user_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn action_execution_correct_errors(
    mut builder: crate::types::builders::ActionExecutionBuilder,
) -> crate::types::builders::ActionExecutionBuilder {
    if builder.plugin_id.is_none() {
        builder.plugin_id = Some(Default::default())
    }
    if builder.payload.is_none() {
        builder.payload = Some(Default::default())
    }
    if builder.payload_field_name_separator.is_none() {
        builder.payload_field_name_separator = Some(Default::default())
    }
    builder
}

pub(crate) fn document_attribute_condition_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeConditionBuilder,
) -> crate::types::builders::DocumentAttributeConditionBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.operator.is_none() {
        builder.operator = "no value was set".parse::<crate::types::DocumentEnrichmentConditionOperator>().ok()
    }
    builder
}

pub(crate) fn document_attribute_target_correct_errors(
    mut builder: crate::types::builders::DocumentAttributeTargetBuilder,
) -> crate::types::builders::DocumentAttributeTargetBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn rule_correct_errors(mut builder: crate::types::builders::RuleBuilder) -> crate::types::builders::RuleBuilder {
    if builder.rule_type.is_none() {
        builder.rule_type = "no value was set".parse::<crate::types::RuleType>().ok()
    }
    builder
}

pub(crate) fn action_execution_payload_field_correct_errors(
    mut builder: crate::types::builders::ActionExecutionPayloadFieldBuilder,
) -> crate::types::builders::ActionExecutionPayloadFieldBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn date_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::DateAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::DateAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn number_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::NumberAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::NumberAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn string_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::StringAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::StringAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}

pub(crate) fn string_list_attribute_boosting_configuration_correct_errors(
    mut builder: crate::types::builders::StringListAttributeBoostingConfigurationBuilder,
) -> crate::types::builders::StringListAttributeBoostingConfigurationBuilder {
    if builder.boosting_level.is_none() {
        builder.boosting_level = "no value was set".parse::<crate::types::DocumentAttributeBoostingLevel>().ok()
    }
    builder
}
