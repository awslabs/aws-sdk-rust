// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_attribute_filter(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AttributeFilter,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.and_all_filters {
        let mut array_2 = object.key("andAllFilters").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.or_all_filters {
        let mut array_6 = object.key("orAllFilters").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.not_filter {
        #[allow(unused_mut)]
        let mut object_10 = object.key("notFilter").start_object();
        crate::protocol_serde::shape_attribute_filter::ser_attribute_filter(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.equals_to {
        #[allow(unused_mut)]
        let mut object_12 = object.key("equalsTo").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.contains_all {
        #[allow(unused_mut)]
        let mut object_14 = object.key("containsAll").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.contains_any {
        #[allow(unused_mut)]
        let mut object_16 = object.key("containsAny").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.greater_than {
        #[allow(unused_mut)]
        let mut object_18 = object.key("greaterThan").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.greater_than_or_equals {
        #[allow(unused_mut)]
        let mut object_20 = object.key("greaterThanOrEquals").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.less_than {
        #[allow(unused_mut)]
        let mut object_22 = object.key("lessThan").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.less_than_or_equals {
        #[allow(unused_mut)]
        let mut object_24 = object.key("lessThanOrEquals").start_object();
        crate::protocol_serde::shape_document_attribute::ser_document_attribute(&mut object_24, var_23)?;
        object_24.finish();
    }
    Ok(())
}

pub(crate) fn de_attribute_filter<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AttributeFilter>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AttributeFilterBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "andAllFilters" => {
                            builder = builder.set_and_all_filters(crate::protocol_serde::shape_attribute_filters::de_attribute_filters(tokens)?);
                        }
                        "orAllFilters" => {
                            builder = builder.set_or_all_filters(crate::protocol_serde::shape_attribute_filters::de_attribute_filters(tokens)?);
                        }
                        "notFilter" => {
                            builder =
                                builder.set_not_filter(crate::protocol_serde::shape_attribute_filter::de_attribute_filter(tokens)?.map(Box::new));
                        }
                        "equalsTo" => {
                            builder = builder.set_equals_to(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "containsAll" => {
                            builder = builder.set_contains_all(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "containsAny" => {
                            builder = builder.set_contains_any(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "greaterThan" => {
                            builder = builder.set_greater_than(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "greaterThanOrEquals" => {
                            builder =
                                builder.set_greater_than_or_equals(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "lessThan" => {
                            builder = builder.set_less_than(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        "lessThanOrEquals" => {
                            builder =
                                builder.set_less_than_or_equals(crate::protocol_serde::shape_document_attribute::de_document_attribute(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
