// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have access to perform this action. Make sure you have the required permission policies and user accounts and try again.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>You are trying to perform an action that conflicts with the current status of your resource. Fix any inconsistences with your resources and try again.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An issue occurred with the internal server used for your Amazon Q Business service. Wait some minutes and try again, or contact <a href="http://aws.amazon.com/contact-us/">Support</a> for help.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>You don't have permissions to perform the action because your license is inactive. Ask your admin to activate your license and try again after your licence is active.</p>
    LicenseNotFoundException(crate::types::error::LicenseNotFoundException),
    /// <p>The resource you want to use doesnâ€™t exist. Make sure you have provided the correct resource and try again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You have exceeded the set limits for your Amazon Q Business service.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to throttling. Reduce the number of requests and try again.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input doesn't meet the constraints set by the Amazon Q Business service. Provide the correct input and try again.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::LicenseNotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::LicenseNotFoundException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_document::BatchDeleteDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_delete_document::BatchDeleteDocumentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_delete_document::BatchDeleteDocumentError> for Error {
    fn from(err: crate::operation::batch_delete_document::BatchDeleteDocumentError) -> Self {
        match err {
            crate::operation::batch_delete_document::BatchDeleteDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_document::BatchDeleteDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_document::BatchPutDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_put_document::BatchPutDocumentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::batch_put_document::BatchPutDocumentError> for Error {
    fn from(err: crate::operation::batch_put_document::BatchPutDocumentError) -> Self {
        match err {
            crate::operation::batch_put_document::BatchPutDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::batch_put_document::BatchPutDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_put_document::BatchPutDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::chat_sync::ChatSyncError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::chat_sync::ChatSyncError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::chat_sync::ChatSyncError> for Error {
    fn from(err: crate::operation::chat_sync::ChatSyncError) -> Self {
        match err {
            crate::operation::chat_sync::ChatSyncError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::chat_sync::ChatSyncError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::chat_sync::ChatSyncError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::chat_sync::ChatSyncError::LicenseNotFoundException(inner) => Error::LicenseNotFoundException(inner),
            crate::operation::chat_sync::ChatSyncError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::chat_sync::ChatSyncError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::chat_sync::ChatSyncError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::chat_sync::ChatSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_application::CreateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_application::CreateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_application::CreateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_application::CreateApplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_application::CreateApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_application::CreateApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_source::CreateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_source::CreateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_index::CreateIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_index::CreateIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_index::CreateIndexError> for Error {
    fn from(err: crate::operation::create_index::CreateIndexError) -> Self {
        match err {
            crate::operation::create_index::CreateIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_index::CreateIndexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_index::CreateIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_index::CreateIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_index::CreateIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_index::CreateIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_index::CreateIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_index::CreateIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_plugin::CreatePluginError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_plugin::CreatePluginError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_plugin::CreatePluginError> for Error {
    fn from(err: crate::operation::create_plugin::CreatePluginError) -> Self {
        match err {
            crate::operation::create_plugin::CreatePluginError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_plugin::CreatePluginError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_plugin::CreatePluginError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_plugin::CreatePluginError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_plugin::CreatePluginError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_plugin::CreatePluginError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_plugin::CreatePluginError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_plugin::CreatePluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_retriever::CreateRetrieverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_retriever::CreateRetrieverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_retriever::CreateRetrieverError> for Error {
    fn from(err: crate::operation::create_retriever::CreateRetrieverError) -> Self {
        match err {
            crate::operation::create_retriever::CreateRetrieverError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_retriever::CreateRetrieverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_retriever::CreateRetrieverError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_retriever::CreateRetrieverError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_retriever::CreateRetrieverError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_retriever::CreateRetrieverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_retriever::CreateRetrieverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_retriever::CreateRetrieverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_user::CreateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_user::CreateUserError> for Error {
    fn from(err: crate::operation::create_user::CreateUserError) -> Self {
        match err {
            crate::operation::create_user::CreateUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_user::CreateUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_user::CreateUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_user::CreateUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_user::CreateUserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_user::CreateUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_user::CreateUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_user::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_web_experience::CreateWebExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_web_experience::CreateWebExperienceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_web_experience::CreateWebExperienceError> for Error {
    fn from(err: crate::operation::create_web_experience::CreateWebExperienceError) -> Self {
        match err {
            crate::operation::create_web_experience::CreateWebExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_web_experience::CreateWebExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_web_experience::CreateWebExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_web_experience::CreateWebExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_web_experience::CreateWebExperienceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_web_experience::CreateWebExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_web_experience::CreateWebExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_web_experience::CreateWebExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_application::DeleteApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_application::DeleteApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_application::DeleteApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError> for Error {
    fn from(err: crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError) -> Self {
        match err {
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_chat_controls_configuration::DeleteChatControlsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_conversation::DeleteConversationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_conversation::DeleteConversationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_conversation::DeleteConversationError> for Error {
    fn from(err: crate::operation::delete_conversation::DeleteConversationError) -> Self {
        match err {
            crate::operation::delete_conversation::DeleteConversationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_conversation::DeleteConversationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_conversation::DeleteConversationError::LicenseNotFoundException(inner) => Error::LicenseNotFoundException(inner),
            crate::operation::delete_conversation::DeleteConversationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_conversation::DeleteConversationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_conversation::DeleteConversationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_conversation::DeleteConversationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_group::DeleteGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_group::DeleteGroupError> for Error {
    fn from(err: crate::operation::delete_group::DeleteGroupError) -> Self {
        match err {
            crate::operation::delete_group::DeleteGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_group::DeleteGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_group::DeleteGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_group::DeleteGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_group::DeleteGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_group::DeleteGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_group::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_index::DeleteIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_index::DeleteIndexError> for Error {
    fn from(err: crate::operation::delete_index::DeleteIndexError) -> Self {
        match err {
            crate::operation::delete_index::DeleteIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_index::DeleteIndexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_index::DeleteIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_index::DeleteIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_index::DeleteIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_index::DeleteIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_index::DeleteIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_plugin::DeletePluginError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_plugin::DeletePluginError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_plugin::DeletePluginError> for Error {
    fn from(err: crate::operation::delete_plugin::DeletePluginError) -> Self {
        match err {
            crate::operation::delete_plugin::DeletePluginError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_plugin::DeletePluginError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_plugin::DeletePluginError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_plugin::DeletePluginError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_plugin::DeletePluginError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_plugin::DeletePluginError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_plugin::DeletePluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_retriever::DeleteRetrieverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_retriever::DeleteRetrieverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_retriever::DeleteRetrieverError> for Error {
    fn from(err: crate::operation::delete_retriever::DeleteRetrieverError) -> Self {
        match err {
            crate::operation::delete_retriever::DeleteRetrieverError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_retriever::DeleteRetrieverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_user::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_user::DeleteUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_user::DeleteUserError> for Error {
    fn from(err: crate::operation::delete_user::DeleteUserError) -> Self {
        match err {
            crate::operation::delete_user::DeleteUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_user::DeleteUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_user::DeleteUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_user::DeleteUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_user::DeleteUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_user::DeleteUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_user::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_web_experience::DeleteWebExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_web_experience::DeleteWebExperienceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_web_experience::DeleteWebExperienceError> for Error {
    fn from(err: crate::operation::delete_web_experience::DeleteWebExperienceError) -> Self {
        match err {
            crate::operation::delete_web_experience::DeleteWebExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_web_experience::DeleteWebExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_web_experience::DeleteWebExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_web_experience::DeleteWebExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_web_experience::DeleteWebExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_web_experience::DeleteWebExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_web_experience::DeleteWebExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_application::GetApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_application::GetApplicationError> for Error {
    fn from(err: crate::operation::get_application::GetApplicationError) -> Self {
        match err {
            crate::operation::get_application::GetApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_application::GetApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_application::GetApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_application::GetApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_application::GetApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_application::GetApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError> for Error {
    fn from(err: crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError) -> Self {
        match err {
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_chat_controls_configuration::GetChatControlsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source::GetDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source::GetDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source::GetDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group::GetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_group::GetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_group::GetGroupError> for Error {
    fn from(err: crate::operation::get_group::GetGroupError) -> Self {
        match err {
            crate::operation::get_group::GetGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_group::GetGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_group::GetGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_group::GetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_group::GetGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_group::GetGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_group::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_index::GetIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_index::GetIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_index::GetIndexError> for Error {
    fn from(err: crate::operation::get_index::GetIndexError) -> Self {
        match err {
            crate::operation::get_index::GetIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_index::GetIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_index::GetIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_index::GetIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_index::GetIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_index::GetIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_plugin::GetPluginError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_plugin::GetPluginError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_plugin::GetPluginError> for Error {
    fn from(err: crate::operation::get_plugin::GetPluginError) -> Self {
        match err {
            crate::operation::get_plugin::GetPluginError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_plugin::GetPluginError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_plugin::GetPluginError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_plugin::GetPluginError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_plugin::GetPluginError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_plugin::GetPluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_retriever::GetRetrieverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_retriever::GetRetrieverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_retriever::GetRetrieverError> for Error {
    fn from(err: crate::operation::get_retriever::GetRetrieverError) -> Self {
        match err {
            crate::operation::get_retriever::GetRetrieverError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_retriever::GetRetrieverError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_retriever::GetRetrieverError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_retriever::GetRetrieverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_retriever::GetRetrieverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_retriever::GetRetrieverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user::GetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_user::GetUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_user::GetUserError> for Error {
    fn from(err: crate::operation::get_user::GetUserError) -> Self {
        match err {
            crate::operation::get_user::GetUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_user::GetUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_user::GetUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_user::GetUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_user::GetUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_user::GetUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_user::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_web_experience::GetWebExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_web_experience::GetWebExperienceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_web_experience::GetWebExperienceError> for Error {
    fn from(err: crate::operation::get_web_experience::GetWebExperienceError) -> Self {
        match err {
            crate::operation::get_web_experience::GetWebExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_web_experience::GetWebExperienceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_web_experience::GetWebExperienceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_web_experience::GetWebExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_web_experience::GetWebExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_web_experience::GetWebExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_applications::ListApplicationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_applications::ListApplicationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_applications::ListApplicationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_conversations::ListConversationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_conversations::ListConversationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_conversations::ListConversationsError> for Error {
    fn from(err: crate::operation::list_conversations::ListConversationsError) -> Self {
        match err {
            crate::operation::list_conversations::ListConversationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_conversations::ListConversationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_conversations::ListConversationsError::LicenseNotFoundException(inner) => Error::LicenseNotFoundException(inner),
            crate::operation::list_conversations::ListConversationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_conversations::ListConversationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_conversations::ListConversationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_conversations::ListConversationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError> for Error {
    fn from(err: crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError) -> Self {
        match err {
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_data_source_sync_jobs::ListDataSourceSyncJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_documents::ListDocumentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_documents::ListDocumentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_documents::ListDocumentsError> for Error {
    fn from(err: crate::operation::list_documents::ListDocumentsError) -> Self {
        match err {
            crate::operation::list_documents::ListDocumentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_documents::ListDocumentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_documents::ListDocumentsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_documents::ListDocumentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_documents::ListDocumentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_documents::ListDocumentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_groups::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_groups::ListGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_groups::ListGroupsError> for Error {
    fn from(err: crate::operation::list_groups::ListGroupsError) -> Self {
        match err {
            crate::operation::list_groups::ListGroupsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_groups::ListGroupsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_groups::ListGroupsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_groups::ListGroupsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_groups::ListGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_groups::ListGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_groups::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_indices::ListIndicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_indices::ListIndicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_indices::ListIndicesError> for Error {
    fn from(err: crate::operation::list_indices::ListIndicesError) -> Self {
        match err {
            crate::operation::list_indices::ListIndicesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_indices::ListIndicesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_indices::ListIndicesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_indices::ListIndicesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_indices::ListIndicesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_indices::ListIndicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_messages::ListMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_messages::ListMessagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_messages::ListMessagesError> for Error {
    fn from(err: crate::operation::list_messages::ListMessagesError) -> Self {
        match err {
            crate::operation::list_messages::ListMessagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_messages::ListMessagesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_messages::ListMessagesError::LicenseNotFoundException(inner) => Error::LicenseNotFoundException(inner),
            crate::operation::list_messages::ListMessagesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_messages::ListMessagesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_messages::ListMessagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_messages::ListMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_plugins::ListPluginsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_plugins::ListPluginsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_plugins::ListPluginsError> for Error {
    fn from(err: crate::operation::list_plugins::ListPluginsError) -> Self {
        match err {
            crate::operation::list_plugins::ListPluginsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_plugins::ListPluginsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_plugins::ListPluginsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_plugins::ListPluginsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_plugins::ListPluginsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_plugins::ListPluginsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_retrievers::ListRetrieversError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_retrievers::ListRetrieversError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_retrievers::ListRetrieversError> for Error {
    fn from(err: crate::operation::list_retrievers::ListRetrieversError) -> Self {
        match err {
            crate::operation::list_retrievers::ListRetrieversError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_retrievers::ListRetrieversError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_retrievers::ListRetrieversError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_retrievers::ListRetrieversError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_retrievers::ListRetrieversError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_retrievers::ListRetrieversError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_web_experiences::ListWebExperiencesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_web_experiences::ListWebExperiencesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_web_experiences::ListWebExperiencesError> for Error {
    fn from(err: crate::operation::list_web_experiences::ListWebExperiencesError) -> Self {
        match err {
            crate::operation::list_web_experiences::ListWebExperiencesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_web_experiences::ListWebExperiencesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_web_experiences::ListWebExperiencesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_web_experiences::ListWebExperiencesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_web_experiences::ListWebExperiencesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_web_experiences::ListWebExperiencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_feedback::PutFeedbackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_feedback::PutFeedbackError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_feedback::PutFeedbackError> for Error {
    fn from(err: crate::operation::put_feedback::PutFeedbackError) -> Self {
        match err {
            crate::operation::put_feedback::PutFeedbackError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_feedback::PutFeedbackError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_feedback::PutFeedbackError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_feedback::PutFeedbackError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_feedback::PutFeedbackError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_feedback::PutFeedbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_group::PutGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_group::PutGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::put_group::PutGroupError> for Error {
    fn from(err: crate::operation::put_group::PutGroupError) -> Self {
        match err {
            crate::operation::put_group::PutGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_group::PutGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_group::PutGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_group::PutGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_group::PutGroupError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_group::PutGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_group::PutGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_group::PutGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError> for Error {
    fn from(err: crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError) -> Self {
        match err {
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_data_source_sync_job::StartDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError> for Error {
    fn from(err: crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError) -> Self {
        match err {
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_data_source_sync_job::StopDataSourceSyncJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_application::UpdateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_application::UpdateApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_application::UpdateApplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError> for Error {
    fn from(err: crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError) -> Self {
        match err {
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_chat_controls_configuration::UpdateChatControlsConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_index::UpdateIndexError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_index::UpdateIndexError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_index::UpdateIndexError> for Error {
    fn from(err: crate::operation::update_index::UpdateIndexError) -> Self {
        match err {
            crate::operation::update_index::UpdateIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_index::UpdateIndexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_index::UpdateIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_index::UpdateIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_index::UpdateIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_index::UpdateIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_index::UpdateIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_index::UpdateIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_plugin::UpdatePluginError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_plugin::UpdatePluginError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_plugin::UpdatePluginError> for Error {
    fn from(err: crate::operation::update_plugin::UpdatePluginError) -> Self {
        match err {
            crate::operation::update_plugin::UpdatePluginError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_plugin::UpdatePluginError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_plugin::UpdatePluginError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_plugin::UpdatePluginError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_plugin::UpdatePluginError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_plugin::UpdatePluginError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_plugin::UpdatePluginError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_plugin::UpdatePluginError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_retriever::UpdateRetrieverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_retriever::UpdateRetrieverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_retriever::UpdateRetrieverError> for Error {
    fn from(err: crate::operation::update_retriever::UpdateRetrieverError) -> Self {
        match err {
            crate::operation::update_retriever::UpdateRetrieverError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_retriever::UpdateRetrieverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_retriever::UpdateRetrieverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_user::UpdateUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_user::UpdateUserError> for Error {
    fn from(err: crate::operation::update_user::UpdateUserError) -> Self {
        match err {
            crate::operation::update_user::UpdateUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_user::UpdateUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_user::UpdateUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_user::UpdateUserError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_user::UpdateUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_user::UpdateUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_user::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_web_experience::UpdateWebExperienceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_web_experience::UpdateWebExperienceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_web_experience::UpdateWebExperienceError> for Error {
    fn from(err: crate::operation::update_web_experience::UpdateWebExperienceError) -> Self {
        match err {
            crate::operation::update_web_experience::UpdateWebExperienceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_web_experience::UpdateWebExperienceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_web_experience::UpdateWebExperienceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_web_experience::UpdateWebExperienceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_web_experience::UpdateWebExperienceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_web_experience::UpdateWebExperienceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_web_experience::UpdateWebExperienceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::LicenseNotFoundException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::LicenseNotFoundException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
