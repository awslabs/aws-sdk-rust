// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `RetentionPeriod`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let retentionperiod = unimplemented!();
/// match retentionperiod {
///     RetentionPeriod::EighteenMonths => { /* ... */ },
///     RetentionPeriod::EightYears => { /* ... */ },
///     RetentionPeriod::FiveYears => { /* ... */ },
///     RetentionPeriod::FourYears => { /* ... */ },
///     RetentionPeriod::NineMonths => { /* ... */ },
///     RetentionPeriod::NineYears => { /* ... */ },
///     RetentionPeriod::OneYear => { /* ... */ },
///     RetentionPeriod::Permanent => { /* ... */ },
///     RetentionPeriod::SevenYears => { /* ... */ },
///     RetentionPeriod::SixMonths => { /* ... */ },
///     RetentionPeriod::SixYears => { /* ... */ },
///     RetentionPeriod::TenYears => { /* ... */ },
///     RetentionPeriod::ThirtyMonths => { /* ... */ },
///     RetentionPeriod::ThreeMonths => { /* ... */ },
///     RetentionPeriod::ThreeYears => { /* ... */ },
///     RetentionPeriod::TwoYears => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `retentionperiod` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RetentionPeriod::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RetentionPeriod::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RetentionPeriod::NewFeature` is defined.
/// Specifically, when `retentionperiod` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RetentionPeriod::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum RetentionPeriod {
    #[allow(missing_docs)] // documentation missing in model
    EighteenMonths,
    #[allow(missing_docs)] // documentation missing in model
    EightYears,
    #[allow(missing_docs)] // documentation missing in model
    FiveYears,
    #[allow(missing_docs)] // documentation missing in model
    FourYears,
    #[allow(missing_docs)] // documentation missing in model
    NineMonths,
    #[allow(missing_docs)] // documentation missing in model
    NineYears,
    #[allow(missing_docs)] // documentation missing in model
    OneYear,
    #[allow(missing_docs)] // documentation missing in model
    Permanent,
    #[allow(missing_docs)] // documentation missing in model
    SevenYears,
    #[allow(missing_docs)] // documentation missing in model
    SixMonths,
    #[allow(missing_docs)] // documentation missing in model
    SixYears,
    #[allow(missing_docs)] // documentation missing in model
    TenYears,
    #[allow(missing_docs)] // documentation missing in model
    ThirtyMonths,
    #[allow(missing_docs)] // documentation missing in model
    ThreeMonths,
    #[allow(missing_docs)] // documentation missing in model
    ThreeYears,
    #[allow(missing_docs)] // documentation missing in model
    TwoYears,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for RetentionPeriod {
    fn from(s: &str) -> Self {
        match s {
            "EIGHTEEN_MONTHS" => RetentionPeriod::EighteenMonths,
            "EIGHT_YEARS" => RetentionPeriod::EightYears,
            "FIVE_YEARS" => RetentionPeriod::FiveYears,
            "FOUR_YEARS" => RetentionPeriod::FourYears,
            "NINE_MONTHS" => RetentionPeriod::NineMonths,
            "NINE_YEARS" => RetentionPeriod::NineYears,
            "ONE_YEAR" => RetentionPeriod::OneYear,
            "PERMANENT" => RetentionPeriod::Permanent,
            "SEVEN_YEARS" => RetentionPeriod::SevenYears,
            "SIX_MONTHS" => RetentionPeriod::SixMonths,
            "SIX_YEARS" => RetentionPeriod::SixYears,
            "TEN_YEARS" => RetentionPeriod::TenYears,
            "THIRTY_MONTHS" => RetentionPeriod::ThirtyMonths,
            "THREE_MONTHS" => RetentionPeriod::ThreeMonths,
            "THREE_YEARS" => RetentionPeriod::ThreeYears,
            "TWO_YEARS" => RetentionPeriod::TwoYears,
            other => RetentionPeriod::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for RetentionPeriod {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(RetentionPeriod::from(s))
    }
}
impl RetentionPeriod {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RetentionPeriod::EighteenMonths => "EIGHTEEN_MONTHS",
            RetentionPeriod::EightYears => "EIGHT_YEARS",
            RetentionPeriod::FiveYears => "FIVE_YEARS",
            RetentionPeriod::FourYears => "FOUR_YEARS",
            RetentionPeriod::NineMonths => "NINE_MONTHS",
            RetentionPeriod::NineYears => "NINE_YEARS",
            RetentionPeriod::OneYear => "ONE_YEAR",
            RetentionPeriod::Permanent => "PERMANENT",
            RetentionPeriod::SevenYears => "SEVEN_YEARS",
            RetentionPeriod::SixMonths => "SIX_MONTHS",
            RetentionPeriod::SixYears => "SIX_YEARS",
            RetentionPeriod::TenYears => "TEN_YEARS",
            RetentionPeriod::ThirtyMonths => "THIRTY_MONTHS",
            RetentionPeriod::ThreeMonths => "THREE_MONTHS",
            RetentionPeriod::ThreeYears => "THREE_YEARS",
            RetentionPeriod::TwoYears => "TWO_YEARS",
            RetentionPeriod::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "EIGHTEEN_MONTHS",
            "EIGHT_YEARS",
            "FIVE_YEARS",
            "FOUR_YEARS",
            "NINE_MONTHS",
            "NINE_YEARS",
            "ONE_YEAR",
            "PERMANENT",
            "SEVEN_YEARS",
            "SIX_MONTHS",
            "SIX_YEARS",
            "TEN_YEARS",
            "THIRTY_MONTHS",
            "THREE_MONTHS",
            "THREE_YEARS",
            "TWO_YEARS",
        ]
    }
}
impl ::std::convert::AsRef<str> for RetentionPeriod {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl RetentionPeriod {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for RetentionPeriod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            RetentionPeriod::EighteenMonths => write!(f, "EIGHTEEN_MONTHS"),
            RetentionPeriod::EightYears => write!(f, "EIGHT_YEARS"),
            RetentionPeriod::FiveYears => write!(f, "FIVE_YEARS"),
            RetentionPeriod::FourYears => write!(f, "FOUR_YEARS"),
            RetentionPeriod::NineMonths => write!(f, "NINE_MONTHS"),
            RetentionPeriod::NineYears => write!(f, "NINE_YEARS"),
            RetentionPeriod::OneYear => write!(f, "ONE_YEAR"),
            RetentionPeriod::Permanent => write!(f, "PERMANENT"),
            RetentionPeriod::SevenYears => write!(f, "SEVEN_YEARS"),
            RetentionPeriod::SixMonths => write!(f, "SIX_MONTHS"),
            RetentionPeriod::SixYears => write!(f, "SIX_YEARS"),
            RetentionPeriod::TenYears => write!(f, "TEN_YEARS"),
            RetentionPeriod::ThirtyMonths => write!(f, "THIRTY_MONTHS"),
            RetentionPeriod::ThreeMonths => write!(f, "THREE_MONTHS"),
            RetentionPeriod::ThreeYears => write!(f, "THREE_YEARS"),
            RetentionPeriod::TwoYears => write!(f, "TWO_YEARS"),
            RetentionPeriod::Unknown(value) => write!(f, "{value}"),
        }
    }
}
