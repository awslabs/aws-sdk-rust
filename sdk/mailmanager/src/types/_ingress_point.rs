// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure of an ingress endpoint resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngressPoint {
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub ingress_point_name: ::std::string::String,
    /// <p>The identifier of the ingress endpoint resource.</p>
    pub ingress_point_id: ::std::string::String,
    /// <p>The status of the ingress endpoint resource.</p>
    pub status: crate::types::IngressPointStatus,
    /// <p>The type of ingress endpoint resource.</p>
    pub r#type: crate::types::IngressPointType,
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub a_record: ::std::option::Option<::std::string::String>,
}
impl IngressPoint {
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn ingress_point_name(&self) -> &str {
        use std::ops::Deref;
        self.ingress_point_name.deref()
    }
    /// <p>The identifier of the ingress endpoint resource.</p>
    pub fn ingress_point_id(&self) -> &str {
        use std::ops::Deref;
        self.ingress_point_id.deref()
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn status(&self) -> &crate::types::IngressPointStatus {
        &self.status
    }
    /// <p>The type of ingress endpoint resource.</p>
    pub fn r#type(&self) -> &crate::types::IngressPointType {
        &self.r#type
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn a_record(&self) -> ::std::option::Option<&str> {
        self.a_record.as_deref()
    }
}
impl IngressPoint {
    /// Creates a new builder-style object to manufacture [`IngressPoint`](crate::types::IngressPoint).
    pub fn builder() -> crate::types::builders::IngressPointBuilder {
        crate::types::builders::IngressPointBuilder::default()
    }
}

/// A builder for [`IngressPoint`](crate::types::IngressPoint).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct IngressPointBuilder {
    pub(crate) ingress_point_name: ::std::option::Option<::std::string::String>,
    pub(crate) ingress_point_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::IngressPointStatus>,
    pub(crate) r#type: ::std::option::Option<crate::types::IngressPointType>,
    pub(crate) a_record: ::std::option::Option<::std::string::String>,
}
impl IngressPointBuilder {
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    /// This field is required.
    pub fn ingress_point_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn set_ingress_point_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_name = input;
        self
    }
    /// <p>A user friendly name for the ingress endpoint resource.</p>
    pub fn get_ingress_point_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_name
    }
    /// <p>The identifier of the ingress endpoint resource.</p>
    /// This field is required.
    pub fn ingress_point_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ingress_point_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the ingress endpoint resource.</p>
    pub fn set_ingress_point_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ingress_point_id = input;
        self
    }
    /// <p>The identifier of the ingress endpoint resource.</p>
    pub fn get_ingress_point_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ingress_point_id
    }
    /// <p>The status of the ingress endpoint resource.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::IngressPointStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IngressPointStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the ingress endpoint resource.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IngressPointStatus> {
        &self.status
    }
    /// <p>The type of ingress endpoint resource.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::IngressPointType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of ingress endpoint resource.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::IngressPointType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of ingress endpoint resource.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::IngressPointType> {
        &self.r#type
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn a_record(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.a_record = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn set_a_record(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.a_record = input;
        self
    }
    /// <p>The DNS A Record that identifies your ingress endpoint. Configure your DNS Mail Exchange (MX) record with this value to route emails to Mail Manager.</p>
    pub fn get_a_record(&self) -> &::std::option::Option<::std::string::String> {
        &self.a_record
    }
    /// Consumes the builder and constructs a [`IngressPoint`](crate::types::IngressPoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`ingress_point_name`](crate::types::builders::IngressPointBuilder::ingress_point_name)
    /// - [`ingress_point_id`](crate::types::builders::IngressPointBuilder::ingress_point_id)
    /// - [`status`](crate::types::builders::IngressPointBuilder::status)
    /// - [`r#type`](crate::types::builders::IngressPointBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::IngressPoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngressPoint {
            ingress_point_name: self.ingress_point_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingress_point_name",
                    "ingress_point_name was not specified but it is required when building IngressPoint",
                )
            })?,
            ingress_point_id: self.ingress_point_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ingress_point_id",
                    "ingress_point_id was not specified but it is required when building IngressPoint",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building IngressPoint",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building IngressPoint",
                )
            })?,
            a_record: self.a_record,
        })
    }
}
