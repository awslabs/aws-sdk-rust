// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_rule_action(
    object_12: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RuleAction,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::RuleAction::Drop(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_12.key("Drop").start_object();
            crate::protocol_serde::shape_drop_action::ser_drop_action(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::RuleAction::Relay(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_12.key("Relay").start_object();
            crate::protocol_serde::shape_relay_action::ser_relay_action(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::RuleAction::Archive(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_12.key("Archive").start_object();
            crate::protocol_serde::shape_archive_action::ser_archive_action(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::RuleAction::WriteToS3(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_12.key("WriteToS3").start_object();
            crate::protocol_serde::shape_s3_action::ser_s3_action(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::RuleAction::Send(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_12.key("Send").start_object();
            crate::protocol_serde::shape_send_action::ser_send_action(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::RuleAction::AddHeader(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_12.key("AddHeader").start_object();
            crate::protocol_serde::shape_add_header_action::ser_add_header_action(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::RuleAction::ReplaceRecipient(inner) => {
            #[allow(unused_mut)]
            let mut object_7 = object_12.key("ReplaceRecipient").start_object();
            crate::protocol_serde::shape_replace_recipient_action::ser_replace_recipient_action(&mut object_7, inner)?;
            object_7.finish();
        }
        crate::types::RuleAction::DeliverToMailbox(inner) => {
            #[allow(unused_mut)]
            let mut object_8 = object_12.key("DeliverToMailbox").start_object();
            crate::protocol_serde::shape_deliver_to_mailbox_action::ser_deliver_to_mailbox_action(&mut object_8, inner)?;
            object_8.finish();
        }
        crate::types::RuleAction::DeliverToQBusiness(inner) => {
            #[allow(unused_mut)]
            let mut object_9 = object_12.key("DeliverToQBusiness").start_object();
            crate::protocol_serde::shape_deliver_to_q_business_action::ser_deliver_to_q_business_action(&mut object_9, inner)?;
            object_9.finish();
        }
        crate::types::RuleAction::PublishToSns(inner) => {
            #[allow(unused_mut)]
            let mut object_10 = object_12.key("PublishToSns").start_object();
            crate::protocol_serde::shape_sns_action::ser_sns_action(&mut object_10, inner)?;
            object_10.finish();
        }
        crate::types::RuleAction::Unknown => return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant("RuleAction")),
    }
    Ok(())
}

pub(crate) fn de_rule_action<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::RuleAction>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "Drop" => Some(crate::types::RuleAction::Drop(
                            crate::protocol_serde::shape_drop_action::de_drop_action(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'Drop' cannot be null"))?,
                        )),
                        "Relay" => Some(crate::types::RuleAction::Relay(
                            crate::protocol_serde::shape_relay_action::de_relay_action(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'Relay' cannot be null"))?,
                        )),
                        "Archive" => Some(crate::types::RuleAction::Archive(
                            crate::protocol_serde::shape_archive_action::de_archive_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'Archive' cannot be null")
                            })?,
                        )),
                        "WriteToS3" => Some(crate::types::RuleAction::WriteToS3(
                            crate::protocol_serde::shape_s3_action::de_s3_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'WriteToS3' cannot be null")
                            })?,
                        )),
                        "Send" => Some(crate::types::RuleAction::Send(
                            crate::protocol_serde::shape_send_action::de_send_action(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'Send' cannot be null"))?,
                        )),
                        "AddHeader" => Some(crate::types::RuleAction::AddHeader(
                            crate::protocol_serde::shape_add_header_action::de_add_header_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'AddHeader' cannot be null")
                            })?,
                        )),
                        "ReplaceRecipient" => Some(crate::types::RuleAction::ReplaceRecipient(
                            crate::protocol_serde::shape_replace_recipient_action::de_replace_recipient_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'ReplaceRecipient' cannot be null")
                            })?,
                        )),
                        "DeliverToMailbox" => Some(crate::types::RuleAction::DeliverToMailbox(
                            crate::protocol_serde::shape_deliver_to_mailbox_action::de_deliver_to_mailbox_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'DeliverToMailbox' cannot be null")
                            })?,
                        )),
                        "DeliverToQBusiness" => Some(crate::types::RuleAction::DeliverToQBusiness(
                            crate::protocol_serde::shape_deliver_to_q_business_action::de_deliver_to_q_business_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'DeliverToQBusiness' cannot be null")
                            })?,
                        )),
                        "PublishToSns" => Some(crate::types::RuleAction::PublishToSns(
                            crate::protocol_serde::shape_sns_action::de_sns_action(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'PublishToSns' cannot be null")
                            })?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::RuleAction::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
