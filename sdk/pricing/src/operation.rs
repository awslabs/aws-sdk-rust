// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Returns the metadata for one service or a list of the metadata for all services. Use
/// this without a service code to get the service codes for all services.
/// Use it with a service code, such as <code>AmazonEC2</code>, to get information specific to
/// that service, such as the attribute
/// names available for that service. For example, some of the attribute names available for EC2 are
/// <code>volumeType</code>, <code>maxIopsVolume</code>, <code>operation</code>,
/// <code>locationType</code>, and <code>instanceCapacity10xlarge</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeServices {
    _private: (),
}
impl DescribeServices {
    /// Creates a new builder-style object to manufacture [`DescribeServicesInput`](crate::input::DescribeServicesInput)
    pub fn builder() -> crate::input::describe_services_input::Builder {
        crate::input::describe_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeServices {
    type Output = std::result::Result<
        crate::output::DescribeServicesOutput,
        crate::error::DescribeServicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_services_error(response)
        } else {
            crate::operation_deser::parse_describe_services_response(response)
        }
    }
}

/// <p>Returns a list of attribute values. Attibutes are similar to the details
/// in a Price List API offer file. For a list of available attributes, see
/// <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/reading-an-offer.html#pps-defs">Offer File Definitions</a>
/// in the <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-what-is.html">AWS Billing and Cost Management User Guide</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAttributeValues {
    _private: (),
}
impl GetAttributeValues {
    /// Creates a new builder-style object to manufacture [`GetAttributeValuesInput`](crate::input::GetAttributeValuesInput)
    pub fn builder() -> crate::input::get_attribute_values_input::Builder {
        crate::input::get_attribute_values_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAttributeValues {
    type Output = std::result::Result<
        crate::output::GetAttributeValuesOutput,
        crate::error::GetAttributeValuesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_attribute_values_error(response)
        } else {
            crate::operation_deser::parse_get_attribute_values_response(response)
        }
    }
}

/// <p>Returns a list of all products that match the filter criteria.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetProducts {
    _private: (),
}
impl GetProducts {
    /// Creates a new builder-style object to manufacture [`GetProductsInput`](crate::input::GetProductsInput)
    pub fn builder() -> crate::input::get_products_input::Builder {
        crate::input::get_products_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetProducts {
    type Output =
        std::result::Result<crate::output::GetProductsOutput, crate::error::GetProductsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_products_error(response)
        } else {
            crate::operation_deser::parse_get_products_response(response)
        }
    }
}
