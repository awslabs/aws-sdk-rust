#![allow(deprecated)]
#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
#![allow(clippy::vec_init_then_push)]
#![allow(clippy::type_complexity)]
#![allow(clippy::needless_return)]
#![allow(clippy::derive_partial_eq_without_eq)]
#![allow(rustdoc::bare_urls)]
#![warn(missing_docs)]
//! <p>Amazon Web Services Price List API is a centralized and convenient way to
//! programmatically query Amazon Web Services for services, products, and pricing information. The Amazon Web Services Price List
//! uses standardized product attributes such as <code>Location</code>, <code>Storage
//! Class</code>, and <code>Operating System</code>, and provides prices at the SKU
//! level. You can use the Amazon Web Services Price List to build cost control and scenario planning tools, reconcile
//! billing data, forecast future spend for budgeting purposes, and provide cost benefit
//! analysis that compare your internal workloads with Amazon Web Services.</p>
//! <p>Use <code>GetServices</code> without a service code to retrieve the service codes for all AWS services, then
//! <code>GetServices</code> with a service code to retrieve the attribute names for
//! that service. After you have the service code and attribute names, you can use <code>GetAttributeValues</code>
//! to see what values are available for an attribute. With the service code and an attribute name and value,
//! you can use <code>GetProducts</code> to find specific products that you're interested in, such as
//! an <code>AmazonEC2</code> instance, with a <code>Provisioned IOPS</code>
//! <code>volumeType</code>.</p>
//! <p>Service Endpoint</p>
//! <p>Amazon Web Services Price List service API provides the following two endpoints:</p>
//! <ul>
//! <li>
//! <p>https://api.pricing.us-east-1.amazonaws.com</p>
//! </li>
//! <li>
//! <p>https://api.pricing.ap-south-1.amazonaws.com</p>
//! </li>
//! </ul>
//!
//! # Crate Organization
//!
//! The entry point for most customers will be [`Client`]. [`Client`] exposes one method for each API offered
//! by the service.
//!
//! Some APIs require complex or nested arguments. These exist in [`model`](crate::model).
//!
//! Lastly, errors that can be returned by the service are contained within [`error`]. [`Error`] defines a meta
//! error encompassing all possible errors that can be returned by the service.
//!
//! The other modules within this crate are not required for normal usage.

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

#[doc(inline)]
pub use config::Config;

pub use aws_credential_types::Credentials;

pub use aws_types::region::Region;

pub(crate) static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("pricing", crate::PKG_VERSION);

pub use aws_types::app_name::AppName;

pub use aws_smithy_http::endpoint::Endpoint;

/// Crate version number.
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");

/// Client and fluent builders for calling the service.
pub mod client;

/// Configuration for the service.
pub mod config;

/// Endpoint resolution functionality
pub mod endpoint;

/// All error types that operations can return. Documentation on these types is copied from the model.
pub mod error;

mod error_meta;

/// Input structures for operations. Documentation on these types is copied from the model.
pub mod input;

/// Data structures used by operation inputs/outputs. Documentation on these types is copied from the model.
pub mod model;

/// All operations that this crate can perform.
pub mod operation;

/// Output structures for operations. Documentation on these types is copied from the model.
pub mod output;

/// Data primitives referenced by other data types.
pub mod types;

pub mod middleware;

mod no_credentials;

/// Paginators for the service
pub mod paginator;

/// Generated accessors for nested fields
mod lens;

pub(crate) mod protocol_serde;

/// Endpoints standard library functions
mod endpoint_lib;

mod json_errors;

#[doc(inline)]
pub use client::Client;
