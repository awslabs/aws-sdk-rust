// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeServicesInput {
    /// <p>The code for the service whose information you want to retrieve, such as <code>AmazonEC2</code>. You can use the <code>ServiceCode</code> to filter the results in a <code>GetProducts</code> call. To retrieve a list of all services, leave this blank.</p>
    pub service_code: ::std::option::Option<::std::string::String>,
    /// <p>The format version that you want the response to be in.</p>
    /// <p>Valid values are: <code>aws_v1</code> </p>
    pub format_version: ::std::option::Option<::std::string::String>,
    /// <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results that you want returned in the response.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribeServicesInput {
    /// <p>The code for the service whose information you want to retrieve, such as <code>AmazonEC2</code>. You can use the <code>ServiceCode</code> to filter the results in a <code>GetProducts</code> call. To retrieve a list of all services, leave this blank.</p>
    pub fn service_code(&self) -> ::std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The format version that you want the response to be in.</p>
    /// <p>Valid values are: <code>aws_v1</code> </p>
    pub fn format_version(&self) -> ::std::option::Option<&str> {
        self.format_version.as_deref()
    }
    /// <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results that you want returned in the response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribeServicesInput {
    /// Creates a new builder-style object to manufacture [`DescribeServicesInput`](crate::operation::describe_services::DescribeServicesInput).
    pub fn builder() -> crate::operation::describe_services::builders::DescribeServicesInputBuilder {
        crate::operation::describe_services::builders::DescribeServicesInputBuilder::default()
    }
}

/// A builder for [`DescribeServicesInput`](crate::operation::describe_services::DescribeServicesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeServicesInputBuilder {
    pub(crate) service_code: ::std::option::Option<::std::string::String>,
    pub(crate) format_version: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribeServicesInputBuilder {
    /// <p>The code for the service whose information you want to retrieve, such as <code>AmazonEC2</code>. You can use the <code>ServiceCode</code> to filter the results in a <code>GetProducts</code> call. To retrieve a list of all services, leave this blank.</p>
    pub fn service_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code for the service whose information you want to retrieve, such as <code>AmazonEC2</code>. You can use the <code>ServiceCode</code> to filter the results in a <code>GetProducts</code> call. To retrieve a list of all services, leave this blank.</p>
    pub fn set_service_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The code for the service whose information you want to retrieve, such as <code>AmazonEC2</code>. You can use the <code>ServiceCode</code> to filter the results in a <code>GetProducts</code> call. To retrieve a list of all services, leave this blank.</p>
    pub fn get_service_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_code
    }
    /// <p>The format version that you want the response to be in.</p>
    /// <p>Valid values are: <code>aws_v1</code> </p>
    pub fn format_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.format_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The format version that you want the response to be in.</p>
    /// <p>Valid values are: <code>aws_v1</code> </p>
    pub fn set_format_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.format_version = input;
        self
    }
    /// <p>The format version that you want the response to be in.</p>
    /// <p>Valid values are: <code>aws_v1</code> </p>
    pub fn get_format_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.format_version
    }
    /// <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results that you want to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results that you want returned in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that you want returned in the response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that you want returned in the response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribeServicesInput`](crate::operation::describe_services::DescribeServicesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_services::DescribeServicesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_services::DescribeServicesInput {
            service_code: self.service_code,
            format_version: self.format_version,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
