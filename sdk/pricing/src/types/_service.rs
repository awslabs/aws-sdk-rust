// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata for a service, such as the service code and available attribute names.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Service {
    /// <p>The code for the Amazon Web Services service.</p>
    #[doc(hidden)]
    pub service_code: std::option::Option<std::string::String>,
    /// <p>The attributes that are available for this service.</p>
    #[doc(hidden)]
    pub attribute_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Service {
    /// <p>The code for the Amazon Web Services service.</p>
    pub fn service_code(&self) -> std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The attributes that are available for this service.</p>
    pub fn attribute_names(&self) -> std::option::Option<&[std::string::String]> {
        self.attribute_names.as_deref()
    }
}
impl Service {
    /// Creates a new builder-style object to manufacture [`Service`](crate::types::Service).
    pub fn builder() -> crate::types::builders::ServiceBuilder {
        crate::types::builders::ServiceBuilder::default()
    }
}

/// A builder for [`Service`](crate::types::Service).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceBuilder {
    pub(crate) service_code: std::option::Option<std::string::String>,
    pub(crate) attribute_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ServiceBuilder {
    /// <p>The code for the Amazon Web Services service.</p>
    pub fn service_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_code = Some(input.into());
        self
    }
    /// <p>The code for the Amazon Web Services service.</p>
    pub fn set_service_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// Appends an item to `attribute_names`.
    ///
    /// To override the contents of this collection use [`set_attribute_names`](Self::set_attribute_names).
    ///
    /// <p>The attributes that are available for this service.</p>
    pub fn attribute_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.attribute_names.unwrap_or_default();
        v.push(input.into());
        self.attribute_names = Some(v);
        self
    }
    /// <p>The attributes that are available for this service.</p>
    pub fn set_attribute_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.attribute_names = input;
        self
    }
    /// Consumes the builder and constructs a [`Service`](crate::types::Service).
    pub fn build(self) -> crate::types::Service {
        crate::types::Service {
            service_code: self.service_code,
            attribute_names: self.attribute_names,
        }
    }
}
