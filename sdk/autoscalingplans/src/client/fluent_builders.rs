// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `CreateScalingPlan`.
///
/// <p>Creates a scaling plan. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateScalingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_scaling_plan_input::Builder,
}
impl CreateScalingPlan {
    /// Creates a new `CreateScalingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateScalingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateScalingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateScalingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateScalingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags. You can create one scaling plan per application source.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn application_source(mut self, input: crate::model::ApplicationSource) -> Self {
        self.inner = self.inner.application_source(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags. You can create one scaling plan per application source.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_application_source(
        mut self,
        input: std::option::Option<crate::model::ApplicationSource>,
    ) -> Self {
        self.inner = self.inner.set_application_source(input);
        self
    }
    /// Appends an item to `ScalingInstructions`.
    ///
    /// To override the contents of this collection use [`set_scaling_instructions`](Self::set_scaling_instructions).
    ///
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn scaling_instructions(mut self, input: crate::model::ScalingInstruction) -> Self {
        self.inner = self.inner.scaling_instructions(input);
        self
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_scaling_instructions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ScalingInstruction>>,
    ) -> Self {
        self.inner = self.inner.set_scaling_instructions(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteScalingPlan`.
///
/// <p>Deletes the specified scaling plan.</p>
/// <p>Deleting a scaling plan deletes the underlying <code>ScalingInstruction</code> for all of the scalable resources that are covered by the plan.</p>
/// <p>If the plan has launched resources or has scaling activities in progress, you must delete those resources separately.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteScalingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_scaling_plan_input::Builder,
}
impl DeleteScalingPlan {
    /// Creates a new `DeleteScalingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteScalingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteScalingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteScalingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteScalingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeScalingPlanResources`.
///
/// <p>Describes the scalable resources in the specified scaling plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScalingPlanResources {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_scaling_plan_resources_input::Builder,
}
impl DescribeScalingPlanResources {
    /// Creates a new `DescribeScalingPlanResources`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeScalingPlanResources,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlanResourcesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeScalingPlanResourcesOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlanResourcesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
    /// <p>The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeScalingPlans`.
///
/// <p>Describes one or more of your scaling plans.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScalingPlans {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_scaling_plans_input::Builder,
}
impl DescribeScalingPlans {
    /// Creates a new `DescribeScalingPlans`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeScalingPlans,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlansError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeScalingPlansOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlansError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ScalingPlanNames`.
    ///
    /// To override the contents of this collection use [`set_scaling_plan_names`](Self::set_scaling_plan_names).
    ///
    /// <p>The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.</p>
    pub fn scaling_plan_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_names(input.into());
        self
    }
    /// <p>The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.</p>
    pub fn set_scaling_plan_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_names(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p> <note>
    /// <p>If you specify a scaling plan version, you must also specify a scaling plan name.</p>
    /// </note>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p> <note>
    /// <p>If you specify a scaling plan version, you must also specify a scaling plan name.</p>
    /// </note>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
    /// Appends an item to `ApplicationSources`.
    ///
    /// To override the contents of this collection use [`set_application_sources`](Self::set_application_sources).
    ///
    /// <p>The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.</p>
    pub fn application_sources(mut self, input: crate::model::ApplicationSource) -> Self {
        self.inner = self.inner.application_sources(input);
        self
    }
    /// <p>The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.</p>
    pub fn set_application_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ApplicationSource>>,
    ) -> Self {
        self.inner = self.inner.set_application_sources(input);
        self
    }
    /// <p>The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `GetScalingPlanResourceForecastData`.
///
/// <p>Retrieves the forecast data for a scalable resource.</p>
/// <p>Capacity forecasts are represented as predicted values, or data points, that are calculated using historical data points from a specified CloudWatch load metric. Data points are available for up to 56 days. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetScalingPlanResourceForecastData {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_scaling_plan_resource_forecast_data_input::Builder,
}
impl GetScalingPlanResourceForecastData {
    /// Creates a new `GetScalingPlanResourceForecastData`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetScalingPlanResourceForecastData,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetScalingPlanResourceForecastDataError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetScalingPlanResourceForecastDataOutput,
        aws_smithy_http::result::SdkError<crate::error::GetScalingPlanResourceForecastDataError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub fn service_namespace(mut self, input: crate::model::ServiceNamespace) -> Self {
        self.inner = self.inner.service_namespace(input);
        self
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub fn set_service_namespace(
        mut self,
        input: std::option::Option<crate::model::ServiceNamespace>,
    ) -> Self {
        self.inner = self.inner.set_service_namespace(input);
        self
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_id(input.into());
        self
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_id(input);
        self
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub fn scalable_dimension(mut self, input: crate::model::ScalableDimension) -> Self {
        self.inner = self.inner.scalable_dimension(input);
        self
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub fn set_scalable_dimension(
        mut self,
        input: std::option::Option<crate::model::ScalableDimension>,
    ) -> Self {
        self.inner = self.inner.set_scalable_dimension(input);
        self
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub fn forecast_data_type(mut self, input: crate::model::ForecastDataType) -> Self {
        self.inner = self.inner.forecast_data_type(input);
        self
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub fn set_forecast_data_type(
        mut self,
        input: std::option::Option<crate::model::ForecastDataType>,
    ) -> Self {
        self.inner = self.inner.set_forecast_data_type(input);
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateScalingPlan`.
///
/// <p>Updates the specified scaling plan.</p>
/// <p>You cannot update a scaling plan if it is in the process of being created, updated, or deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateScalingPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_scaling_plan_input::Builder,
}
impl UpdateScalingPlan {
    /// Creates a new `UpdateScalingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateScalingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateScalingPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateScalingPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateScalingPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn application_source(mut self, input: crate::model::ApplicationSource) -> Self {
        self.inner = self.inner.application_source(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_application_source(
        mut self,
        input: std::option::Option<crate::model::ApplicationSource>,
    ) -> Self {
        self.inner = self.inner.set_application_source(input);
        self
    }
    /// Appends an item to `ScalingInstructions`.
    ///
    /// To override the contents of this collection use [`set_scaling_instructions`](Self::set_scaling_instructions).
    ///
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn scaling_instructions(mut self, input: crate::model::ScalingInstruction) -> Self {
        self.inner = self.inner.scaling_instructions(input);
        self
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_scaling_instructions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::ScalingInstruction>>,
    ) -> Self {
        self.inner = self.inner.set_scaling_instructions(input);
        self
    }
}
