// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetScalingPlanResourceForecastDataInput {
    /// <p>The name of the scaling plan.</p>
    pub scaling_plan_name: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub scaling_plan_version: ::std::option::Option<i64>,
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub service_namespace: ::std::option::Option<crate::types::ServiceNamespace>,
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub scalable_dimension: ::std::option::Option<crate::types::ScalableDimension>,
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub forecast_data_type: ::std::option::Option<crate::types::ForecastDataType>,
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetScalingPlanResourceForecastDataInput {
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(&self) -> ::std::option::Option<&str> {
        self.scaling_plan_name.as_deref()
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn scaling_plan_version(&self) -> ::std::option::Option<i64> {
        self.scaling_plan_version
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub fn service_namespace(&self) -> ::std::option::Option<&crate::types::ServiceNamespace> {
        self.service_namespace.as_ref()
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub fn scalable_dimension(&self) -> ::std::option::Option<&crate::types::ScalableDimension> {
        self.scalable_dimension.as_ref()
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub fn forecast_data_type(&self) -> ::std::option::Option<&crate::types::ForecastDataType> {
        self.forecast_data_type.as_ref()
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl GetScalingPlanResourceForecastDataInput {
    /// Creates a new builder-style object to manufacture [`GetScalingPlanResourceForecastDataInput`](crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput).
    pub fn builder() -> crate::operation::get_scaling_plan_resource_forecast_data::builders::GetScalingPlanResourceForecastDataInputBuilder {
        crate::operation::get_scaling_plan_resource_forecast_data::builders::GetScalingPlanResourceForecastDataInputBuilder::default()
    }
}

/// A builder for [`GetScalingPlanResourceForecastDataInput`](crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetScalingPlanResourceForecastDataInputBuilder {
    pub(crate) scaling_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_plan_version: ::std::option::Option<i64>,
    pub(crate) service_namespace: ::std::option::Option<crate::types::ServiceNamespace>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) scalable_dimension: ::std::option::Option<crate::types::ScalableDimension>,
    pub(crate) forecast_data_type: ::std::option::Option<crate::types::ForecastDataType>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl GetScalingPlanResourceForecastDataInputBuilder {
    /// <p>The name of the scaling plan.</p>
    /// This field is required.
    pub fn scaling_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scaling_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scaling_plan_name = input;
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn get_scaling_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scaling_plan_name
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    /// This field is required.
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.scaling_plan_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn set_scaling_plan_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scaling_plan_version = input;
        self
    }
    /// <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    pub fn get_scaling_plan_version(&self) -> &::std::option::Option<i64> {
        &self.scaling_plan_version
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    /// This field is required.
    pub fn service_namespace(mut self, input: crate::types::ServiceNamespace) -> Self {
        self.service_namespace = ::std::option::Option::Some(input);
        self
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub fn set_service_namespace(mut self, input: ::std::option::Option<crate::types::ServiceNamespace>) -> Self {
        self.service_namespace = input;
        self
    }
    /// <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    pub fn get_service_namespace(&self) -> &::std::option::Option<crate::types::ServiceNamespace> {
        &self.service_namespace
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    /// This field is required.
    pub fn scalable_dimension(mut self, input: crate::types::ScalableDimension) -> Self {
        self.scalable_dimension = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub fn set_scalable_dimension(mut self, input: ::std::option::Option<crate::types::ScalableDimension>) -> Self {
        self.scalable_dimension = input;
        self
    }
    /// <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    pub fn get_scalable_dimension(&self) -> &::std::option::Option<crate::types::ScalableDimension> {
        &self.scalable_dimension
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn forecast_data_type(mut self, input: crate::types::ForecastDataType) -> Self {
        self.forecast_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub fn set_forecast_data_type(mut self, input: ::std::option::Option<crate::types::ForecastDataType>) -> Self {
        self.forecast_data_type = input;
        self
    }
    /// <p>The type of forecast data to get.</p>
    /// <ul>
    /// <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>
    /// <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>
    /// <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>
    /// <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>
    /// </ul>
    pub fn get_forecast_data_type(&self) -> &::std::option::Option<crate::types::ForecastDataType> {
        &self.forecast_data_type
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    /// This field is required.
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    /// This field is required.
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>
    /// <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// Consumes the builder and constructs a [`GetScalingPlanResourceForecastDataInput`](crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput {
                scaling_plan_name: self.scaling_plan_name,
                scaling_plan_version: self.scaling_plan_version,
                service_namespace: self.service_namespace,
                resource_id: self.resource_id,
                scalable_dimension: self.scalable_dimension,
                forecast_data_type: self.forecast_data_type,
                start_time: self.start_time,
                end_time: self.end_time,
            },
        )
    }
}
