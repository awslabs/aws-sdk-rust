// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_scaling_plan::_update_scaling_plan_output::UpdateScalingPlanOutputBuilder;

pub use crate::operation::update_scaling_plan::_update_scaling_plan_input::UpdateScalingPlanInputBuilder;

/// Fluent builder constructing a request to `UpdateScalingPlan`.
///
/// <p>Updates the specified scaling plan.</p>
/// <p>You cannot update a scaling plan if it is in the process of being created, updated, or deleted.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateScalingPlanFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_scaling_plan::builders::UpdateScalingPlanInputBuilder,
}
impl UpdateScalingPlanFluentBuilder {
    /// Creates a new `UpdateScalingPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_scaling_plan::UpdateScalingPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_scaling_plan::UpdateScalingPlanError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_scaling_plan::UpdateScalingPlanOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_scaling_plan::UpdateScalingPlanError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.scaling_plan_name(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_scaling_plan_name(input);
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.inner = self.inner.scaling_plan_version(input);
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn set_scaling_plan_version(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_scaling_plan_version(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn application_source(mut self, input: crate::types::ApplicationSource) -> Self {
        self.inner = self.inner.application_source(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_application_source(
        mut self,
        input: std::option::Option<crate::types::ApplicationSource>,
    ) -> Self {
        self.inner = self.inner.set_application_source(input);
        self
    }
    /// Appends an item to `ScalingInstructions`.
    ///
    /// To override the contents of this collection use [`set_scaling_instructions`](Self::set_scaling_instructions).
    ///
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn scaling_instructions(mut self, input: crate::types::ScalingInstruction) -> Self {
        self.inner = self.inner.scaling_instructions(input);
        self
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_scaling_instructions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ScalingInstruction>>,
    ) -> Self {
        self.inner = self.inner.set_scaling_instructions(input);
        self
    }
}
