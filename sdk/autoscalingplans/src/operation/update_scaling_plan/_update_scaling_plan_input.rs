// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateScalingPlanInput {
    /// <p>The name of the scaling plan.</p>
    pub scaling_plan_name: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub scaling_plan_version: ::std::option::Option<i64>,
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub application_source: ::std::option::Option<crate::types::ApplicationSource>,
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub scaling_instructions: ::std::option::Option<::std::vec::Vec<crate::types::ScalingInstruction>>,
}
impl UpdateScalingPlanInput {
    /// <p>The name of the scaling plan.</p>
    pub fn scaling_plan_name(&self) -> ::std::option::Option<&str> {
        self.scaling_plan_name.as_deref()
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn scaling_plan_version(&self) -> ::std::option::Option<i64> {
        self.scaling_plan_version
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn application_source(&self) -> ::std::option::Option<&crate::types::ApplicationSource> {
        self.application_source.as_ref()
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.scaling_instructions.is_none()`.
    pub fn scaling_instructions(&self) -> &[crate::types::ScalingInstruction] {
        self.scaling_instructions.as_deref().unwrap_or_default()
    }
}
impl UpdateScalingPlanInput {
    /// Creates a new builder-style object to manufacture [`UpdateScalingPlanInput`](crate::operation::update_scaling_plan::UpdateScalingPlanInput).
    pub fn builder() -> crate::operation::update_scaling_plan::builders::UpdateScalingPlanInputBuilder {
        crate::operation::update_scaling_plan::builders::UpdateScalingPlanInputBuilder::default()
    }
}

/// A builder for [`UpdateScalingPlanInput`](crate::operation::update_scaling_plan::UpdateScalingPlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateScalingPlanInputBuilder {
    pub(crate) scaling_plan_name: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_plan_version: ::std::option::Option<i64>,
    pub(crate) application_source: ::std::option::Option<crate::types::ApplicationSource>,
    pub(crate) scaling_instructions: ::std::option::Option<::std::vec::Vec<crate::types::ScalingInstruction>>,
}
impl UpdateScalingPlanInputBuilder {
    /// <p>The name of the scaling plan.</p>
    /// This field is required.
    pub fn scaling_plan_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scaling_plan_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn set_scaling_plan_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scaling_plan_name = input;
        self
    }
    /// <p>The name of the scaling plan.</p>
    pub fn get_scaling_plan_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.scaling_plan_name
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    /// This field is required.
    pub fn scaling_plan_version(mut self, input: i64) -> Self {
        self.scaling_plan_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn set_scaling_plan_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scaling_plan_version = input;
        self
    }
    /// <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    pub fn get_scaling_plan_version(&self) -> &::std::option::Option<i64> {
        &self.scaling_plan_version
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn application_source(mut self, input: crate::types::ApplicationSource) -> Self {
        self.application_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_application_source(mut self, input: ::std::option::Option<crate::types::ApplicationSource>) -> Self {
        self.application_source = input;
        self
    }
    /// <p>A CloudFormation stack or set of tags.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn get_application_source(&self) -> &::std::option::Option<crate::types::ApplicationSource> {
        &self.application_source
    }
    /// Appends an item to `scaling_instructions`.
    ///
    /// To override the contents of this collection use [`set_scaling_instructions`](Self::set_scaling_instructions).
    ///
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn scaling_instructions(mut self, input: crate::types::ScalingInstruction) -> Self {
        let mut v = self.scaling_instructions.unwrap_or_default();
        v.push(input);
        self.scaling_instructions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn set_scaling_instructions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScalingInstruction>>) -> Self {
        self.scaling_instructions = input;
        self
    }
    /// <p>The scaling instructions.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    pub fn get_scaling_instructions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScalingInstruction>> {
        &self.scaling_instructions
    }
    /// Consumes the builder and constructs a [`UpdateScalingPlanInput`](crate::operation::update_scaling_plan::UpdateScalingPlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_scaling_plan::UpdateScalingPlanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_scaling_plan::UpdateScalingPlanInput {
            scaling_plan_name: self.scaling_plan_name,
            scaling_plan_version: self.scaling_plan_version,
            application_source: self.application_source,
            scaling_instructions: self.scaling_instructions,
        })
    }
}
