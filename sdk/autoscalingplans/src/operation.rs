// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a scaling plan. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateScalingPlan {
    _private: (),
}
impl CreateScalingPlan {
    /// Creates a new builder-style object to manufacture [`CreateScalingPlanInput`](crate::input::CreateScalingPlanInput)
    pub fn builder() -> crate::input::create_scaling_plan_input::Builder {
        crate::input::create_scaling_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateScalingPlan {
    type Output = std::result::Result<
        crate::output::CreateScalingPlanOutput,
        crate::error::CreateScalingPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_scaling_plan_error(response)
        } else {
            crate::operation_deser::parse_create_scaling_plan_response(response)
        }
    }
}

/// <p>Deletes the specified scaling plan.</p>
/// <p>Deleting a scaling plan deletes the underlying <a>ScalingInstruction</a> for
/// all of the scalable resources that are covered by the plan.</p>
/// <p>If the plan has launched resources or has scaling activities in progress, you must
/// delete those resources separately.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteScalingPlan {
    _private: (),
}
impl DeleteScalingPlan {
    /// Creates a new builder-style object to manufacture [`DeleteScalingPlanInput`](crate::input::DeleteScalingPlanInput)
    pub fn builder() -> crate::input::delete_scaling_plan_input::Builder {
        crate::input::delete_scaling_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteScalingPlan {
    type Output = std::result::Result<
        crate::output::DeleteScalingPlanOutput,
        crate::error::DeleteScalingPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_scaling_plan_error(response)
        } else {
            crate::operation_deser::parse_delete_scaling_plan_response(response)
        }
    }
}

/// <p>Describes the scalable resources in the specified scaling plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScalingPlanResources {
    _private: (),
}
impl DescribeScalingPlanResources {
    /// Creates a new builder-style object to manufacture [`DescribeScalingPlanResourcesInput`](crate::input::DescribeScalingPlanResourcesInput)
    pub fn builder() -> crate::input::describe_scaling_plan_resources_input::Builder {
        crate::input::describe_scaling_plan_resources_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeScalingPlanResources {
    type Output = std::result::Result<
        crate::output::DescribeScalingPlanResourcesOutput,
        crate::error::DescribeScalingPlanResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_scaling_plan_resources_error(response)
        } else {
            crate::operation_deser::parse_describe_scaling_plan_resources_response(response)
        }
    }
}

/// <p>Describes one or more of your scaling plans.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeScalingPlans {
    _private: (),
}
impl DescribeScalingPlans {
    /// Creates a new builder-style object to manufacture [`DescribeScalingPlansInput`](crate::input::DescribeScalingPlansInput)
    pub fn builder() -> crate::input::describe_scaling_plans_input::Builder {
        crate::input::describe_scaling_plans_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeScalingPlans {
    type Output = std::result::Result<
        crate::output::DescribeScalingPlansOutput,
        crate::error::DescribeScalingPlansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_scaling_plans_error(response)
        } else {
            crate::operation_deser::parse_describe_scaling_plans_response(response)
        }
    }
}

/// <p>Retrieves the forecast data for a scalable resource.</p>
/// <p>Capacity forecasts are represented as predicted values, or data points, that are
/// calculated using historical data points from a specified CloudWatch load metric. Data points are
/// available for up to 56 days. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetScalingPlanResourceForecastData {
    _private: (),
}
impl GetScalingPlanResourceForecastData {
    /// Creates a new builder-style object to manufacture [`GetScalingPlanResourceForecastDataInput`](crate::input::GetScalingPlanResourceForecastDataInput)
    pub fn builder() -> crate::input::get_scaling_plan_resource_forecast_data_input::Builder {
        crate::input::get_scaling_plan_resource_forecast_data_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetScalingPlanResourceForecastData {
    type Output = std::result::Result<
        crate::output::GetScalingPlanResourceForecastDataOutput,
        crate::error::GetScalingPlanResourceForecastDataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_scaling_plan_resource_forecast_data_error(response)
        } else {
            crate::operation_deser::parse_get_scaling_plan_resource_forecast_data_response(response)
        }
    }
}

/// <p>Updates the specified scaling plan.</p>
/// <p>You cannot update a scaling plan if it is in the process of being created, updated, or
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateScalingPlan {
    _private: (),
}
impl UpdateScalingPlan {
    /// Creates a new builder-style object to manufacture [`UpdateScalingPlanInput`](crate::input::UpdateScalingPlanInput)
    pub fn builder() -> crate::input::update_scaling_plan_input::Builder {
        crate::input::update_scaling_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateScalingPlan {
    type Output = std::result::Result<
        crate::output::UpdateScalingPlanOutput,
        crate::error::UpdateScalingPlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_scaling_plan_error(response)
        } else {
            crate::operation_deser::parse_update_scaling_plan_response(response)
        }
    }
}
