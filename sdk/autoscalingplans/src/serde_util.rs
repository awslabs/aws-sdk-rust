// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_scaling_plan_output_correct_errors(
    mut builder: crate::operation::create_scaling_plan::builders::CreateScalingPlanOutputBuilder,
) -> crate::operation::create_scaling_plan::builders::CreateScalingPlanOutputBuilder {
    if builder.scaling_plan_version.is_none() {
        builder.scaling_plan_version = Some(Default::default())
    }
    builder
}

pub(crate) fn get_scaling_plan_resource_forecast_data_output_correct_errors(
    mut builder: crate::operation::get_scaling_plan_resource_forecast_data::builders::GetScalingPlanResourceForecastDataOutputBuilder,
) -> crate::operation::get_scaling_plan_resource_forecast_data::builders::GetScalingPlanResourceForecastDataOutputBuilder {
    if builder.datapoints.is_none() {
        builder.datapoints = Some(Default::default())
    }
    builder
}

pub(crate) fn scaling_plan_correct_errors(mut builder: crate::types::builders::ScalingPlanBuilder) -> crate::types::builders::ScalingPlanBuilder {
    if builder.scaling_plan_name.is_none() {
        builder.scaling_plan_name = Some(Default::default())
    }
    if builder.scaling_plan_version.is_none() {
        builder.scaling_plan_version = Some(Default::default())
    }
    if builder.application_source.is_none() {
        builder.application_source = {
            let builder = crate::types::builders::ApplicationSourceBuilder::default();
            Some(builder.build())
        }
    }
    if builder.scaling_instructions.is_none() {
        builder.scaling_instructions = Some(Default::default())
    }
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::ScalingPlanStatusCode>().ok()
    }
    builder
}

pub(crate) fn scaling_plan_resource_correct_errors(
    mut builder: crate::types::builders::ScalingPlanResourceBuilder,
) -> crate::types::builders::ScalingPlanResourceBuilder {
    if builder.scaling_plan_name.is_none() {
        builder.scaling_plan_name = Some(Default::default())
    }
    if builder.scaling_plan_version.is_none() {
        builder.scaling_plan_version = Some(Default::default())
    }
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.scalable_dimension.is_none() {
        builder.scalable_dimension = "no value was set".parse::<crate::types::ScalableDimension>().ok()
    }
    if builder.scaling_status_code.is_none() {
        builder.scaling_status_code = "no value was set".parse::<crate::types::ScalingStatusCode>().ok()
    }
    builder
}

pub(crate) fn scaling_instruction_correct_errors(
    mut builder: crate::types::builders::ScalingInstructionBuilder,
) -> crate::types::builders::ScalingInstructionBuilder {
    if builder.service_namespace.is_none() {
        builder.service_namespace = "no value was set".parse::<crate::types::ServiceNamespace>().ok()
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.scalable_dimension.is_none() {
        builder.scalable_dimension = "no value was set".parse::<crate::types::ScalableDimension>().ok()
    }
    if builder.min_capacity.is_none() {
        builder.min_capacity = Some(Default::default())
    }
    if builder.max_capacity.is_none() {
        builder.max_capacity = Some(Default::default())
    }
    if builder.target_tracking_configurations.is_none() {
        builder.target_tracking_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn scaling_policy_correct_errors(
    mut builder: crate::types::builders::ScalingPolicyBuilder,
) -> crate::types::builders::ScalingPolicyBuilder {
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    builder
}

pub(crate) fn customized_load_metric_specification_correct_errors(
    mut builder: crate::types::builders::CustomizedLoadMetricSpecificationBuilder,
) -> crate::types::builders::CustomizedLoadMetricSpecificationBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.statistic.is_none() {
        builder.statistic = "no value was set".parse::<crate::types::MetricStatistic>().ok()
    }
    builder
}

pub(crate) fn predefined_load_metric_specification_correct_errors(
    mut builder: crate::types::builders::PredefinedLoadMetricSpecificationBuilder,
) -> crate::types::builders::PredefinedLoadMetricSpecificationBuilder {
    if builder.predefined_load_metric_type.is_none() {
        builder.predefined_load_metric_type = "no value was set".parse::<crate::types::LoadMetricType>().ok()
    }
    builder
}

pub(crate) fn target_tracking_configuration_correct_errors(
    mut builder: crate::types::builders::TargetTrackingConfigurationBuilder,
) -> crate::types::builders::TargetTrackingConfigurationBuilder {
    if builder.target_value.is_none() {
        builder.target_value = Some(Default::default())
    }
    builder
}

pub(crate) fn customized_scaling_metric_specification_correct_errors(
    mut builder: crate::types::builders::CustomizedScalingMetricSpecificationBuilder,
) -> crate::types::builders::CustomizedScalingMetricSpecificationBuilder {
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.statistic.is_none() {
        builder.statistic = "no value was set".parse::<crate::types::MetricStatistic>().ok()
    }
    builder
}

pub(crate) fn predefined_scaling_metric_specification_correct_errors(
    mut builder: crate::types::builders::PredefinedScalingMetricSpecificationBuilder,
) -> crate::types::builders::PredefinedScalingMetricSpecificationBuilder {
    if builder.predefined_scaling_metric_type.is_none() {
        builder.predefined_scaling_metric_type = "no value was set".parse::<crate::types::ScalingMetricType>().ok()
    }
    builder
}

pub(crate) fn metric_dimension_correct_errors(
    mut builder: crate::types::builders::MetricDimensionBuilder,
) -> crate::types::builders::MetricDimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
