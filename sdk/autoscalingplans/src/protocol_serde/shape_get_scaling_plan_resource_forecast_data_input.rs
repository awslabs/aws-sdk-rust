// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_scaling_plan_resource_forecast_data_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_scaling_plan_resource_forecast_data::GetScalingPlanResourceForecastDataInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.scaling_plan_name {
        object.key("ScalingPlanName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.scaling_plan_version {
        object.key("ScalingPlanVersion").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.service_namespace {
        object.key("ServiceNamespace").string(var_3.as_str());
    }
    if let Some(var_4) = &input.resource_id {
        object.key("ResourceId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.scalable_dimension {
        object.key("ScalableDimension").string(var_5.as_str());
    }
    if let Some(var_6) = &input.forecast_data_type {
        object.key("ForecastDataType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_7, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_8) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}
