// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a scaling policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScalingPolicy {
    /// <p>The name of the scaling policy.</p>
    pub policy_name: ::std::string::String,
    /// <p>The type of scaling policy.</p>
    pub policy_type: crate::types::PolicyType,
    /// <p>The target tracking scaling policy. Includes support for predefined or customized metrics.</p>
    pub target_tracking_configuration: ::std::option::Option<crate::types::TargetTrackingConfiguration>,
}
impl ScalingPolicy {
    /// <p>The name of the scaling policy.</p>
    pub fn policy_name(&self) -> &str {
        use std::ops::Deref;
        self.policy_name.deref()
    }
    /// <p>The type of scaling policy.</p>
    pub fn policy_type(&self) -> &crate::types::PolicyType {
        &self.policy_type
    }
    /// <p>The target tracking scaling policy. Includes support for predefined or customized metrics.</p>
    pub fn target_tracking_configuration(&self) -> ::std::option::Option<&crate::types::TargetTrackingConfiguration> {
        self.target_tracking_configuration.as_ref()
    }
}
impl ScalingPolicy {
    /// Creates a new builder-style object to manufacture [`ScalingPolicy`](crate::types::ScalingPolicy).
    pub fn builder() -> crate::types::builders::ScalingPolicyBuilder {
        crate::types::builders::ScalingPolicyBuilder::default()
    }
}

/// A builder for [`ScalingPolicy`](crate::types::ScalingPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScalingPolicyBuilder {
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) policy_type: ::std::option::Option<crate::types::PolicyType>,
    pub(crate) target_tracking_configuration: ::std::option::Option<crate::types::TargetTrackingConfiguration>,
}
impl ScalingPolicyBuilder {
    /// <p>The name of the scaling policy.</p>
    /// This field is required.
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the scaling policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the scaling policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The type of scaling policy.</p>
    /// This field is required.
    pub fn policy_type(mut self, input: crate::types::PolicyType) -> Self {
        self.policy_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of scaling policy.</p>
    pub fn set_policy_type(mut self, input: ::std::option::Option<crate::types::PolicyType>) -> Self {
        self.policy_type = input;
        self
    }
    /// <p>The type of scaling policy.</p>
    pub fn get_policy_type(&self) -> &::std::option::Option<crate::types::PolicyType> {
        &self.policy_type
    }
    /// <p>The target tracking scaling policy. Includes support for predefined or customized metrics.</p>
    pub fn target_tracking_configuration(mut self, input: crate::types::TargetTrackingConfiguration) -> Self {
        self.target_tracking_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target tracking scaling policy. Includes support for predefined or customized metrics.</p>
    pub fn set_target_tracking_configuration(mut self, input: ::std::option::Option<crate::types::TargetTrackingConfiguration>) -> Self {
        self.target_tracking_configuration = input;
        self
    }
    /// <p>The target tracking scaling policy. Includes support for predefined or customized metrics.</p>
    pub fn get_target_tracking_configuration(&self) -> &::std::option::Option<crate::types::TargetTrackingConfiguration> {
        &self.target_tracking_configuration
    }
    /// Consumes the builder and constructs a [`ScalingPolicy`](crate::types::ScalingPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_name`](crate::types::builders::ScalingPolicyBuilder::policy_name)
    /// - [`policy_type`](crate::types::builders::ScalingPolicyBuilder::policy_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ScalingPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScalingPolicy {
            policy_name: self.policy_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_name",
                    "policy_name was not specified but it is required when building ScalingPolicy",
                )
            })?,
            policy_type: self.policy_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_type",
                    "policy_type was not specified but it is required when building ScalingPolicy",
                )
            })?,
            target_tracking_configuration: self.target_tracking_configuration,
        })
    }
}
