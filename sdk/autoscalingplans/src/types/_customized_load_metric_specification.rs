// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a CloudWatch metric of your choosing that can be used for predictive scaling. </p>
/// <p>For predictive scaling to work with a customized load metric specification, AWS Auto Scaling needs access to the <code>Sum</code> and <code>Average</code> statistics that CloudWatch computes from metric data.</p>
/// <p>When you choose a load metric, make sure that the required <code>Sum</code> and <code>Average</code> statistics for your metric are available in CloudWatch and that they provide relevant data for predictive scaling. The <code>Sum</code> statistic must represent the total load on the resource, and the <code>Average</code> statistic must represent the average load per capacity unit of the resource. For example, there is a metric that counts the number of requests processed by your Auto Scaling group. If the <code>Sum</code> statistic represents the total request count processed by the group, then the <code>Average</code> statistic for the specified metric must represent the average request count processed by each instance of the group. </p>
/// <p>If you publish your own metrics, you can aggregate the data points at a given interval and then publish the aggregated data points to CloudWatch. Before AWS Auto Scaling generates the forecast, it sums up all the metric data points that occurred within each hour to match the granularity period that is used in the forecast (60 minutes).</p>
/// <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
/// <p>After creating your scaling plan, you can use the AWS Auto Scaling console to visualize forecasts for the specified metric. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/userguide/gs-create-scaling-plan.html#gs-view-resource">View Scaling Information for a Resource</a> in the <i>AWS Auto Scaling User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomizedLoadMetricSpecification {
    /// <p>The name of the metric.</p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The namespace of the metric.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.</p>
    #[doc(hidden)]
    pub dimensions: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
    /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
    #[doc(hidden)]
    pub statistic: std::option::Option<crate::types::MetricStatistic>,
    /// <p>The unit of the metric.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
}
impl CustomizedLoadMetricSpecification {
    /// <p>The name of the metric.</p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The namespace of the metric.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.</p>
    pub fn dimensions(&self) -> std::option::Option<&[crate::types::MetricDimension]> {
        self.dimensions.as_deref()
    }
    /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
    pub fn statistic(&self) -> std::option::Option<&crate::types::MetricStatistic> {
        self.statistic.as_ref()
    }
    /// <p>The unit of the metric.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl CustomizedLoadMetricSpecification {
    /// Creates a new builder-style object to manufacture [`CustomizedLoadMetricSpecification`](crate::types::CustomizedLoadMetricSpecification).
    pub fn builder() -> crate::types::builders::CustomizedLoadMetricSpecificationBuilder {
        crate::types::builders::CustomizedLoadMetricSpecificationBuilder::default()
    }
}

/// A builder for [`CustomizedLoadMetricSpecification`](crate::types::CustomizedLoadMetricSpecification).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomizedLoadMetricSpecificationBuilder {
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) dimensions: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
    pub(crate) statistic: std::option::Option<crate::types::MetricStatistic>,
    pub(crate) unit: std::option::Option<std::string::String>,
}
impl CustomizedLoadMetricSpecificationBuilder {
    /// <p>The name of the metric.</p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The namespace of the metric.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the metric.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.</p>
    pub fn dimensions(mut self, input: crate::types::MetricDimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = Some(v);
        self
    }
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized load metric specification.</p>
    pub fn set_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricDimension>>,
    ) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
    pub fn statistic(mut self, input: crate::types::MetricStatistic) -> Self {
        self.statistic = Some(input);
        self
    }
    /// <p>The statistic of the metric. The only valid value is <code>Sum</code>.</p>
    pub fn set_statistic(
        mut self,
        input: std::option::Option<crate::types::MetricStatistic>,
    ) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The unit of the metric.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The unit of the metric.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomizedLoadMetricSpecification`](crate::types::CustomizedLoadMetricSpecification).
    pub fn build(self) -> crate::types::CustomizedLoadMetricSpecification {
        crate::types::CustomizedLoadMetricSpecification {
            metric_name: self.metric_name,
            namespace: self.namespace,
            dimensions: self.dimensions,
            statistic: self.statistic,
            unit: self.unit,
        }
    }
}
