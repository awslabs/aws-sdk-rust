// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a CloudWatch metric of your choosing that can be used for dynamic scaling as part of a target tracking scaling policy. </p>
/// <p>To create your customized scaling metric specification:</p>
/// <ul>
/// <li> <p>Add values for each required parameter from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html">Publish Custom Metrics</a> in the <i>Amazon CloudWatch User Guide</i>.</p> </li>
/// <li> <p>Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases. </p> </li>
/// </ul>
/// <p>For information about terminology, available metrics, or how to publish new metrics, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html">Amazon CloudWatch Concepts</a> in the <i>Amazon CloudWatch User Guide</i>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomizedScalingMetricSpecification {
    /// <p>The name of the metric.</p>
    pub metric_name: ::std::string::String,
    /// <p>The namespace of the metric.</p>
    pub namespace: ::std::string::String,
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<crate::types::MetricDimension>>,
    /// <p>The statistic of the metric.</p>
    pub statistic: crate::types::MetricStatistic,
    /// <p>The unit of the metric. </p>
    pub unit: ::std::option::Option<::std::string::String>,
}
impl CustomizedScalingMetricSpecification {
    /// <p>The name of the metric.</p>
    pub fn metric_name(&self) -> &str {
        use std::ops::Deref;
        self.metric_name.deref()
    }
    /// <p>The namespace of the metric.</p>
    pub fn namespace(&self) -> &str {
        use std::ops::Deref;
        self.namespace.deref()
    }
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[crate::types::MetricDimension] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The statistic of the metric.</p>
    pub fn statistic(&self) -> &crate::types::MetricStatistic {
        &self.statistic
    }
    /// <p>The unit of the metric. </p>
    pub fn unit(&self) -> ::std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl CustomizedScalingMetricSpecification {
    /// Creates a new builder-style object to manufacture [`CustomizedScalingMetricSpecification`](crate::types::CustomizedScalingMetricSpecification).
    pub fn builder() -> crate::types::builders::CustomizedScalingMetricSpecificationBuilder {
        crate::types::builders::CustomizedScalingMetricSpecificationBuilder::default()
    }
}

/// A builder for [`CustomizedScalingMetricSpecification`](crate::types::CustomizedScalingMetricSpecification).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomizedScalingMetricSpecificationBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::MetricDimension>>,
    pub(crate) statistic: ::std::option::Option<crate::types::MetricStatistic>,
    pub(crate) unit: ::std::option::Option<::std::string::String>,
}
impl CustomizedScalingMetricSpecificationBuilder {
    /// <p>The name of the metric.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The name of the metric.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p>The namespace of the metric.</p>
    /// This field is required.
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the metric.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the metric.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>
    pub fn dimensions(mut self, input: crate::types::MetricDimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricDimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>The dimensions of the metric.</p>
    /// <p>Conditional: If you published your metric with dimensions, you must specify the same dimensions in your customized scaling metric specification.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricDimension>> {
        &self.dimensions
    }
    /// <p>The statistic of the metric.</p>
    /// This field is required.
    pub fn statistic(mut self, input: crate::types::MetricStatistic) -> Self {
        self.statistic = ::std::option::Option::Some(input);
        self
    }
    /// <p>The statistic of the metric.</p>
    pub fn set_statistic(mut self, input: ::std::option::Option<crate::types::MetricStatistic>) -> Self {
        self.statistic = input;
        self
    }
    /// <p>The statistic of the metric.</p>
    pub fn get_statistic(&self) -> &::std::option::Option<crate::types::MetricStatistic> {
        &self.statistic
    }
    /// <p>The unit of the metric. </p>
    pub fn unit(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.unit = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unit of the metric. </p>
    pub fn set_unit(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The unit of the metric. </p>
    pub fn get_unit(&self) -> &::std::option::Option<::std::string::String> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`CustomizedScalingMetricSpecification`](crate::types::CustomizedScalingMetricSpecification).
    /// This method will fail if any of the following fields are not set:
    /// - [`metric_name`](crate::types::builders::CustomizedScalingMetricSpecificationBuilder::metric_name)
    /// - [`namespace`](crate::types::builders::CustomizedScalingMetricSpecificationBuilder::namespace)
    /// - [`statistic`](crate::types::builders::CustomizedScalingMetricSpecificationBuilder::statistic)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::CustomizedScalingMetricSpecification, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomizedScalingMetricSpecification {
            metric_name: self.metric_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_name",
                    "metric_name was not specified but it is required when building CustomizedScalingMetricSpecification",
                )
            })?,
            namespace: self.namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "namespace",
                    "namespace was not specified but it is required when building CustomizedScalingMetricSpecification",
                )
            })?,
            dimensions: self.dimensions,
            statistic: self.statistic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statistic",
                    "statistic was not specified but it is required when building CustomizedScalingMetricSpecification",
                )
            })?,
            unit: self.unit,
        })
    }
}
