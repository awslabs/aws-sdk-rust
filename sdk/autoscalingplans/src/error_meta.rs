// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Concurrent updates caused an exception, for example, if you request an update to a scaling plan that already has a pending update.</p>
    ConcurrentUpdateException(crate::error::ConcurrentUpdateException),
    /// <p>The service encountered an internal error.</p>
    InternalServiceException(crate::error::InternalServiceException),
    /// <p>The token provided is not valid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>Your account exceeded a limit. This exception is thrown when a per-account resource limit is exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The specified object could not be found.</p>
    ObjectNotFoundException(crate::error::ObjectNotFoundException),
    /// <p>An exception was thrown for a validation issue. Review the parameters provided.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentUpdateException(inner) => inner.fmt(f),
            Error::InternalServiceException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ObjectNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateScalingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateScalingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateScalingPlanError> for Error {
    fn from(err: crate::error::CreateScalingPlanError) -> Self {
        match err {
            crate::error::CreateScalingPlanError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::CreateScalingPlanError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::CreateScalingPlanError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateScalingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateScalingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteScalingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteScalingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteScalingPlanError> for Error {
    fn from(err: crate::error::DeleteScalingPlanError) -> Self {
        match err {
            crate::error::DeleteScalingPlanError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DeleteScalingPlanError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DeleteScalingPlanError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::DeleteScalingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteScalingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlanResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlanResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingPlanResourcesError> for Error {
    fn from(err: crate::error::DescribeScalingPlanResourcesError) -> Self {
        match err {
            crate::error::DescribeScalingPlanResourcesError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScalingPlanResourcesError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalingPlanResourcesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScalingPlanResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScalingPlanResourcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlansError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeScalingPlansError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeScalingPlansError> for Error {
    fn from(err: crate::error::DescribeScalingPlansError) -> Self {
        match err {
            crate::error::DescribeScalingPlansError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::DescribeScalingPlansError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::DescribeScalingPlansError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeScalingPlansError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeScalingPlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetScalingPlanResourceForecastDataError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetScalingPlanResourceForecastDataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetScalingPlanResourceForecastDataError> for Error {
    fn from(err: crate::error::GetScalingPlanResourceForecastDataError) -> Self {
        match err {
            crate::error::GetScalingPlanResourceForecastDataError::InternalServiceException(
                inner,
            ) => Error::InternalServiceException(inner),
            crate::error::GetScalingPlanResourceForecastDataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetScalingPlanResourceForecastDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateScalingPlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateScalingPlanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateScalingPlanError> for Error {
    fn from(err: crate::error::UpdateScalingPlanError) -> Self {
        match err {
            crate::error::UpdateScalingPlanError::ConcurrentUpdateException(inner) => {
                Error::ConcurrentUpdateException(inner)
            }
            crate::error::UpdateScalingPlanError::InternalServiceException(inner) => {
                Error::InternalServiceException(inner)
            }
            crate::error::UpdateScalingPlanError::ObjectNotFoundException(inner) => {
                Error::ObjectNotFoundException(inner)
            }
            crate::error::UpdateScalingPlanError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateScalingPlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentUpdateException(e) => e.request_id(),
            Self::InternalServiceException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ObjectNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
