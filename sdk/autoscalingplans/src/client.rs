// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Auto Scaling Plans
///
/// Client for invoking operations on AWS Auto Scaling Plans. Each operation on AWS Auto Scaling Plans is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_autoscalingplans::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_autoscalingplans::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_autoscalingplans::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateScalingPlan`](crate::client::fluent_builders::CreateScalingPlan) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_name(impl Into<String>)`](crate::client::fluent_builders::CreateScalingPlan::scaling_plan_name) / [`set_scaling_plan_name(Option<String>)`](crate::client::fluent_builders::CreateScalingPlan::set_scaling_plan_name): <p>The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.</p>
    ///   - [`application_source(ApplicationSource)`](crate::client::fluent_builders::CreateScalingPlan::application_source) / [`set_application_source(Option<ApplicationSource>)`](crate::client::fluent_builders::CreateScalingPlan::set_application_source): <p>A CloudFormation stack or set of tags. You can create one scaling plan per application source.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    ///   - [`scaling_instructions(Vec<ScalingInstruction>)`](crate::client::fluent_builders::CreateScalingPlan::scaling_instructions) / [`set_scaling_instructions(Option<Vec<ScalingInstruction>>)`](crate::client::fluent_builders::CreateScalingPlan::set_scaling_instructions): <p>The scaling instructions.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    /// - On success, responds with [`CreateScalingPlanOutput`](crate::output::CreateScalingPlanOutput) with field(s):
    ///   - [`scaling_plan_version(Option<i64>)`](crate::output::CreateScalingPlanOutput::scaling_plan_version): <p>The version number of the scaling plan. This value is always <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    /// - On failure, responds with [`SdkError<CreateScalingPlanError>`](crate::error::CreateScalingPlanError)
    pub fn create_scaling_plan(&self) -> crate::client::fluent_builders::CreateScalingPlan {
        crate::client::fluent_builders::CreateScalingPlan::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteScalingPlan`](crate::client::fluent_builders::DeleteScalingPlan) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_name(impl Into<String>)`](crate::client::fluent_builders::DeleteScalingPlan::scaling_plan_name) / [`set_scaling_plan_name(Option<String>)`](crate::client::fluent_builders::DeleteScalingPlan::set_scaling_plan_name): <p>The name of the scaling plan.</p>
    ///   - [`scaling_plan_version(i64)`](crate::client::fluent_builders::DeleteScalingPlan::scaling_plan_version) / [`set_scaling_plan_version(Option<i64>)`](crate::client::fluent_builders::DeleteScalingPlan::set_scaling_plan_version): <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    /// - On success, responds with [`DeleteScalingPlanOutput`](crate::output::DeleteScalingPlanOutput)

    /// - On failure, responds with [`SdkError<DeleteScalingPlanError>`](crate::error::DeleteScalingPlanError)
    pub fn delete_scaling_plan(&self) -> crate::client::fluent_builders::DeleteScalingPlan {
        crate::client::fluent_builders::DeleteScalingPlan::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeScalingPlanResources`](crate::client::fluent_builders::DescribeScalingPlanResources) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_name(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPlanResources::scaling_plan_name) / [`set_scaling_plan_name(Option<String>)`](crate::client::fluent_builders::DescribeScalingPlanResources::set_scaling_plan_name): <p>The name of the scaling plan.</p>
    ///   - [`scaling_plan_version(i64)`](crate::client::fluent_builders::DescribeScalingPlanResources::scaling_plan_version) / [`set_scaling_plan_version(Option<i64>)`](crate::client::fluent_builders::DescribeScalingPlanResources::set_scaling_plan_version): <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeScalingPlanResources::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeScalingPlanResources::set_max_results): <p>The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPlanResources::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeScalingPlanResources::set_next_token): <p>The token for the next set of results.</p>
    /// - On success, responds with [`DescribeScalingPlanResourcesOutput`](crate::output::DescribeScalingPlanResourcesOutput) with field(s):
    ///   - [`scaling_plan_resources(Option<Vec<ScalingPlanResource>>)`](crate::output::DescribeScalingPlanResourcesOutput::scaling_plan_resources): <p>Information about the scalable resources.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeScalingPlanResourcesOutput::next_token): <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeScalingPlanResourcesError>`](crate::error::DescribeScalingPlanResourcesError)
    pub fn describe_scaling_plan_resources(
        &self,
    ) -> crate::client::fluent_builders::DescribeScalingPlanResources {
        crate::client::fluent_builders::DescribeScalingPlanResources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeScalingPlans`](crate::client::fluent_builders::DescribeScalingPlans) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_names(Vec<String>)`](crate::client::fluent_builders::DescribeScalingPlans::scaling_plan_names) / [`set_scaling_plan_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeScalingPlans::set_scaling_plan_names): <p>The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.</p>
    ///   - [`scaling_plan_version(i64)`](crate::client::fluent_builders::DescribeScalingPlans::scaling_plan_version) / [`set_scaling_plan_version(Option<i64>)`](crate::client::fluent_builders::DescribeScalingPlans::set_scaling_plan_version): <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p> <note>   <p>If you specify a scaling plan version, you must also specify a scaling plan name.</p>  </note>
    ///   - [`application_sources(Vec<ApplicationSource>)`](crate::client::fluent_builders::DescribeScalingPlans::application_sources) / [`set_application_sources(Option<Vec<ApplicationSource>>)`](crate::client::fluent_builders::DescribeScalingPlans::set_application_sources): <p>The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeScalingPlans::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeScalingPlans::set_max_results): <p>The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeScalingPlans::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeScalingPlans::set_next_token): <p>The token for the next set of results.</p>
    /// - On success, responds with [`DescribeScalingPlansOutput`](crate::output::DescribeScalingPlansOutput) with field(s):
    ///   - [`scaling_plans(Option<Vec<ScalingPlan>>)`](crate::output::DescribeScalingPlansOutput::scaling_plans): <p>Information about the scaling plans.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeScalingPlansOutput::next_token): <p>The token required to get the next set of results. This value is <code>null</code> if there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<DescribeScalingPlansError>`](crate::error::DescribeScalingPlansError)
    pub fn describe_scaling_plans(&self) -> crate::client::fluent_builders::DescribeScalingPlans {
        crate::client::fluent_builders::DescribeScalingPlans::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetScalingPlanResourceForecastData`](crate::client::fluent_builders::GetScalingPlanResourceForecastData) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_name(impl Into<String>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::scaling_plan_name) / [`set_scaling_plan_name(Option<String>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_scaling_plan_name): <p>The name of the scaling plan.</p>
    ///   - [`scaling_plan_version(i64)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::scaling_plan_version) / [`set_scaling_plan_version(Option<i64>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_scaling_plan_version): <p>The version number of the scaling plan. Currently, the only valid value is <code>1</code>.</p>
    ///   - [`service_namespace(ServiceNamespace)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::service_namespace) / [`set_service_namespace(Option<ServiceNamespace>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_service_namespace): <p>The namespace of the AWS service. The only valid value is <code>autoscaling</code>. </p>
    ///   - [`resource_id(impl Into<String>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::resource_id) / [`set_resource_id(Option<String>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_resource_id): <p>The ID of the resource. This string consists of a prefix (<code>autoScalingGroup</code>) followed by the name of a specified Auto Scaling group (<code>my-asg</code>). Example: <code>autoScalingGroup/my-asg</code>. </p>
    ///   - [`scalable_dimension(ScalableDimension)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::scalable_dimension) / [`set_scalable_dimension(Option<ScalableDimension>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_scalable_dimension): <p>The scalable dimension for the resource. The only valid value is <code>autoscaling:autoScalingGroup:DesiredCapacity</code>. </p>
    ///   - [`forecast_data_type(ForecastDataType)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::forecast_data_type) / [`set_forecast_data_type(Option<ForecastDataType>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_forecast_data_type): <p>The type of forecast data to get.</p>  <ul>   <li> <p> <code>LoadForecast</code>: The load metric forecast. </p> </li>   <li> <p> <code>CapacityForecast</code>: The capacity forecast. </p> </li>   <li> <p> <code>ScheduledActionMinCapacity</code>: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.</p> </li>   <li> <p> <code>ScheduledActionMaxCapacity</code>: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.</p> </li>  </ul>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_start_time): <p>The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. </p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::GetScalingPlanResourceForecastData::set_end_time): <p>The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days. </p>  <p>Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.</p>
    /// - On success, responds with [`GetScalingPlanResourceForecastDataOutput`](crate::output::GetScalingPlanResourceForecastDataOutput) with field(s):
    ///   - [`datapoints(Option<Vec<Datapoint>>)`](crate::output::GetScalingPlanResourceForecastDataOutput::datapoints): <p>The data points to return.</p>
    /// - On failure, responds with [`SdkError<GetScalingPlanResourceForecastDataError>`](crate::error::GetScalingPlanResourceForecastDataError)
    pub fn get_scaling_plan_resource_forecast_data(
        &self,
    ) -> crate::client::fluent_builders::GetScalingPlanResourceForecastData {
        crate::client::fluent_builders::GetScalingPlanResourceForecastData::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateScalingPlan`](crate::client::fluent_builders::UpdateScalingPlan) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`scaling_plan_name(impl Into<String>)`](crate::client::fluent_builders::UpdateScalingPlan::scaling_plan_name) / [`set_scaling_plan_name(Option<String>)`](crate::client::fluent_builders::UpdateScalingPlan::set_scaling_plan_name): <p>The name of the scaling plan.</p>
    ///   - [`scaling_plan_version(i64)`](crate::client::fluent_builders::UpdateScalingPlan::scaling_plan_version) / [`set_scaling_plan_version(Option<i64>)`](crate::client::fluent_builders::UpdateScalingPlan::set_scaling_plan_version): <p>The version number of the scaling plan. The only valid value is <code>1</code>. Currently, you cannot have multiple scaling plan versions.</p>
    ///   - [`application_source(ApplicationSource)`](crate::client::fluent_builders::UpdateScalingPlan::application_source) / [`set_application_source(Option<ApplicationSource>)`](crate::client::fluent_builders::UpdateScalingPlan::set_application_source): <p>A CloudFormation stack or set of tags.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ApplicationSource.html">ApplicationSource</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    ///   - [`scaling_instructions(Vec<ScalingInstruction>)`](crate::client::fluent_builders::UpdateScalingPlan::scaling_instructions) / [`set_scaling_instructions(Option<Vec<ScalingInstruction>>)`](crate::client::fluent_builders::UpdateScalingPlan::set_scaling_instructions): <p>The scaling instructions.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_ScalingInstruction.html">ScalingInstruction</a> in the <i>AWS Auto Scaling API Reference</i>.</p>
    /// - On success, responds with [`UpdateScalingPlanOutput`](crate::output::UpdateScalingPlanOutput)

    /// - On failure, responds with [`SdkError<UpdateScalingPlanError>`](crate::error::UpdateScalingPlanError)
    pub fn update_scaling_plan(&self) -> crate::client::fluent_builders::UpdateScalingPlan {
        crate::client::fluent_builders::UpdateScalingPlan::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
