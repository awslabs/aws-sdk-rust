// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_inbound_external_link_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"REJECTED","comparator":"stringEquals"}}
pub(crate) fn match_get_inbound_external_link_5ce51eaa16eea4f17(
    _result: ::std::result::Result<
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REJECTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_inbound_external_link_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_inbound_external_link_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ISOLATED","comparator":"stringEquals"}}
pub(crate) fn match_get_inbound_external_link_358421f14bfd10851(
    _result: ::std::result::Result<
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
        &crate::operation::get_inbound_external_link::GetInboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_inbound_external_link::GetInboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ISOLATED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACCEPTED","comparator":"stringEquals"}}
pub(crate) fn match_get_link_483c014a416def08d(
    _result: ::std::result::Result<&crate::operation::get_link::GetLinkOutput, &crate::operation::get_link::GetLinkError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_link::GetLinkOutput) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACCEPTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"REJECTED","comparator":"stringEquals"}}
pub(crate) fn match_get_link_5ce51eaa16eea4f17(
    _result: ::std::result::Result<&crate::operation::get_link::GetLinkOutput, &crate::operation::get_link::GetLinkError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_link::GetLinkOutput) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REJECTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_link_f9c483f08ce8cb218(
    _result: ::std::result::Result<&crate::operation::get_link::GetLinkOutput, &crate::operation::get_link::GetLinkError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_link::GetLinkOutput) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_link_8edac4c36e2a37f69(
    _result: ::std::result::Result<&crate::operation::get_link::GetLinkOutput, &crate::operation::get_link::GetLinkError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_link::GetLinkOutput) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_link_a0b9c099115634691(
    _result: ::std::result::Result<&crate::operation::get_link::GetLinkOutput, &crate::operation::get_link::GetLinkError>,
) -> bool {
    fn path_traversal<'a>(_output: &'a crate::operation::get_link::GetLinkOutput) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_outbound_external_link_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"REJECTED","comparator":"stringEquals"}}
pub(crate) fn match_get_outbound_external_link_5ce51eaa16eea4f17(
    _result: ::std::result::Result<
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "REJECTED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"FAILED","comparator":"stringEquals"}}
pub(crate) fn match_get_outbound_external_link_f9c483f08ce8cb218(
    _result: ::std::result::Result<
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "FAILED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_outbound_external_link_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ISOLATED","comparator":"stringEquals"}}
pub(crate) fn match_get_outbound_external_link_358421f14bfd10851(
    _result: ::std::result::Result<
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        &crate::operation::get_outbound_external_link::GetOutboundExternalLinkError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
    ) -> ::std::option::Option<&'a crate::types::LinkStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ISOLATED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_requester_gateway_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
        &crate::operation::get_requester_gateway::GetRequesterGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::RequesterGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_requester_gateway_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
        &crate::operation::get_requester_gateway::GetRequesterGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::RequesterGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ERROR","comparator":"stringEquals"}}
pub(crate) fn match_get_requester_gateway_fee4c6887d4203a96(
    _result: ::std::result::Result<
        &crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
        &crate::operation::get_requester_gateway::GetRequesterGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_requester_gateway::GetRequesterGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::RequesterGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ERROR";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ACTIVE","comparator":"stringEquals"}}
pub(crate) fn match_get_responder_gateway_a0b9c099115634691(
    _result: ::std::result::Result<
        &crate::operation::get_responder_gateway::GetResponderGatewayOutput,
        &crate::operation::get_responder_gateway::GetResponderGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_responder_gateway::GetResponderGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::ResponderGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ACTIVE";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"DELETED","comparator":"stringEquals"}}
pub(crate) fn match_get_responder_gateway_8edac4c36e2a37f69(
    _result: ::std::result::Result<
        &crate::operation::get_responder_gateway::GetResponderGatewayOutput,
        &crate::operation::get_responder_gateway::GetResponderGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_responder_gateway::GetResponderGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::ResponderGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "DELETED";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}

/// Matcher union: {"output":{"path":"status","expected":"ERROR","comparator":"stringEquals"}}
pub(crate) fn match_get_responder_gateway_fee4c6887d4203a96(
    _result: ::std::result::Result<
        &crate::operation::get_responder_gateway::GetResponderGatewayOutput,
        &crate::operation::get_responder_gateway::GetResponderGatewayError,
    >,
) -> bool {
    fn path_traversal<'a>(
        _output: &'a crate::operation::get_responder_gateway::GetResponderGatewayOutput,
    ) -> ::std::option::Option<&'a crate::types::ResponderGatewayStatus> {
        let _fld_1 = &_output.status;
        ::std::option::Option::Some(_fld_1)
    }
    _result
        .as_ref()
        .ok()
        .and_then(|output| path_traversal(output))
        .map(|value| {
            let _tmp_2 = value.as_str();
            let right = "ERROR";
            let _cmp_1 = _tmp_2 == right;
            _cmp_1
        })
        .unwrap_or_default()
}
