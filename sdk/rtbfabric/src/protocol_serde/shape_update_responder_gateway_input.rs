// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_responder_gateway_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_responder_gateway::UpdateResponderGatewayInput,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain_name {
        object.key("domainName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.managed_endpoint_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("managedEndpointConfiguration").start_object();
        crate::protocol_serde::shape_managed_endpoint_configuration::ser_managed_endpoint_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.port {
        object.key("port").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.protocol {
        object.key("protocol").string(var_7.as_str());
    }
    if let Some(var_8) = &input.trust_store_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("trustStoreConfiguration").start_object();
        crate::protocol_serde::shape_trust_store_configuration::ser_trust_store_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
