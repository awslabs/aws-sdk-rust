// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The request could not be completed because you do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be completed because of a conflict in the current state of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request could not be completed because of an internal server error. Try your call again.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request could not be completed because the resource does not exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request could not be completed because you exceeded a service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The request could not be completed because it fails satisfy the constraints specified by the service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_link::AcceptLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::accept_link::AcceptLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::accept_link::AcceptLinkError> for Error {
    fn from(err: crate::operation::accept_link::AcceptLinkError) -> Self {
        match err {
            crate::operation::accept_link::AcceptLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::accept_link::AcceptLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::accept_link::AcceptLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::accept_link::AcceptLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_link::AcceptLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::accept_link::AcceptLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::accept_link::AcceptLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_inbound_external_link::CreateInboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_inbound_external_link::CreateInboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_inbound_external_link::CreateInboundExternalLinkError> for Error {
    fn from(err: crate::operation::create_inbound_external_link::CreateInboundExternalLinkError) -> Self {
        match err {
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_inbound_external_link::CreateInboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_link::CreateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_link::CreateLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_link::CreateLinkError> for Error {
    fn from(err: crate::operation::create_link::CreateLinkError) -> Self {
        match err {
            crate::operation::create_link::CreateLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_link::CreateLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_link::CreateLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_link::CreateLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_link::CreateLinkError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_link::CreateLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_link::CreateLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_link::CreateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError> for Error {
    fn from(err: crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError) -> Self {
        match err {
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_outbound_external_link::CreateOutboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_requester_gateway::CreateRequesterGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_requester_gateway::CreateRequesterGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_requester_gateway::CreateRequesterGatewayError> for Error {
    fn from(err: crate::operation::create_requester_gateway::CreateRequesterGatewayError) -> Self {
        match err {
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_requester_gateway::CreateRequesterGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_responder_gateway::CreateResponderGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_responder_gateway::CreateResponderGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_responder_gateway::CreateResponderGatewayError> for Error {
    fn from(err: crate::operation::create_responder_gateway::CreateResponderGatewayError) -> Self {
        match err {
            crate::operation::create_responder_gateway::CreateResponderGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_responder_gateway::CreateResponderGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_responder_gateway::CreateResponderGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_responder_gateway::CreateResponderGatewayError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_responder_gateway::CreateResponderGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_responder_gateway::CreateResponderGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_responder_gateway::CreateResponderGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError> for Error {
    fn from(err: crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError) -> Self {
        match err {
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_inbound_external_link::DeleteInboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_link::DeleteLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_link::DeleteLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_link::DeleteLinkError> for Error {
    fn from(err: crate::operation::delete_link::DeleteLinkError) -> Self {
        match err {
            crate::operation::delete_link::DeleteLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_link::DeleteLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_link::DeleteLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_link::DeleteLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_link::DeleteLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_link::DeleteLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_link::DeleteLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError> for Error {
    fn from(err: crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError) -> Self {
        match err {
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_requester_gateway::DeleteRequesterGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_requester_gateway::DeleteRequesterGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_requester_gateway::DeleteRequesterGatewayError> for Error {
    fn from(err: crate::operation::delete_requester_gateway::DeleteRequesterGatewayError) -> Self {
        match err {
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_requester_gateway::DeleteRequesterGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_responder_gateway::DeleteResponderGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_responder_gateway::DeleteResponderGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_responder_gateway::DeleteResponderGatewayError> for Error {
    fn from(err: crate::operation::delete_responder_gateway::DeleteResponderGatewayError) -> Self {
        match err {
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_responder_gateway::DeleteResponderGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_inbound_external_link::GetInboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_inbound_external_link::GetInboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_inbound_external_link::GetInboundExternalLinkError> for Error {
    fn from(err: crate::operation::get_inbound_external_link::GetInboundExternalLinkError) -> Self {
        match err {
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_inbound_external_link::GetInboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_link::GetLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_link::GetLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_link::GetLinkError> for Error {
    fn from(err: crate::operation::get_link::GetLinkError) -> Self {
        match err {
            crate::operation::get_link::GetLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_link::GetLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_link::GetLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_link::GetLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_link::GetLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_link::GetLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_link::GetLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outbound_external_link::GetOutboundExternalLinkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outbound_external_link::GetOutboundExternalLinkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_outbound_external_link::GetOutboundExternalLinkError> for Error {
    fn from(err: crate::operation::get_outbound_external_link::GetOutboundExternalLinkError) -> Self {
        match err {
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_outbound_external_link::GetOutboundExternalLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_requester_gateway::GetRequesterGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_requester_gateway::GetRequesterGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_requester_gateway::GetRequesterGatewayError> for Error {
    fn from(err: crate::operation::get_requester_gateway::GetRequesterGatewayError) -> Self {
        match err {
            crate::operation::get_requester_gateway::GetRequesterGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_requester_gateway::GetRequesterGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_requester_gateway::GetRequesterGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_requester_gateway::GetRequesterGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_requester_gateway::GetRequesterGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_requester_gateway::GetRequesterGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_responder_gateway::GetResponderGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_responder_gateway::GetResponderGatewayError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_responder_gateway::GetResponderGatewayError> for Error {
    fn from(err: crate::operation::get_responder_gateway::GetResponderGatewayError) -> Self {
        match err {
            crate::operation::get_responder_gateway::GetResponderGatewayError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_responder_gateway::GetResponderGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_responder_gateway::GetResponderGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_responder_gateway::GetResponderGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_responder_gateway::GetResponderGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_responder_gateway::GetResponderGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_links::ListLinksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_links::ListLinksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_links::ListLinksError> for Error {
    fn from(err: crate::operation::list_links::ListLinksError) -> Self {
        match err {
            crate::operation::list_links::ListLinksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_links::ListLinksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_links::ListLinksError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_links::ListLinksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_links::ListLinksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_links::ListLinksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_requester_gateways::ListRequesterGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_requester_gateways::ListRequesterGatewaysError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_requester_gateways::ListRequesterGatewaysError> for Error {
    fn from(err: crate::operation::list_requester_gateways::ListRequesterGatewaysError) -> Self {
        match err {
            crate::operation::list_requester_gateways::ListRequesterGatewaysError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_requester_gateways::ListRequesterGatewaysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_requester_gateways::ListRequesterGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_responder_gateways::ListResponderGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_responder_gateways::ListResponderGatewaysError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_responder_gateways::ListResponderGatewaysError> for Error {
    fn from(err: crate::operation::list_responder_gateways::ListResponderGatewaysError) -> Self {
        match err {
            crate::operation::list_responder_gateways::ListResponderGatewaysError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_responder_gateways::ListResponderGatewaysError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_responder_gateways::ListResponderGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_link::RejectLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reject_link::RejectLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reject_link::RejectLinkError> for Error {
    fn from(err: crate::operation::reject_link::RejectLinkError) -> Self {
        match err {
            crate::operation::reject_link::RejectLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reject_link::RejectLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reject_link::RejectLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reject_link::RejectLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_link::RejectLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reject_link::RejectLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reject_link::RejectLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_link::UpdateLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_link::UpdateLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_link::UpdateLinkError> for Error {
    fn from(err: crate::operation::update_link::UpdateLinkError) -> Self {
        match err {
            crate::operation::update_link::UpdateLinkError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_link::UpdateLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_link::UpdateLinkError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_link::UpdateLinkError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_link::UpdateLinkError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_link::UpdateLinkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_link::UpdateLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_link_module_flow::UpdateLinkModuleFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_link_module_flow::UpdateLinkModuleFlowError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_link_module_flow::UpdateLinkModuleFlowError> for Error {
    fn from(err: crate::operation::update_link_module_flow::UpdateLinkModuleFlowError) -> Self {
        match err {
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_link_module_flow::UpdateLinkModuleFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_requester_gateway::UpdateRequesterGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_requester_gateway::UpdateRequesterGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_requester_gateway::UpdateRequesterGatewayError> for Error {
    fn from(err: crate::operation::update_requester_gateway::UpdateRequesterGatewayError) -> Self {
        match err {
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_requester_gateway::UpdateRequesterGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_responder_gateway::UpdateResponderGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_responder_gateway::UpdateResponderGatewayError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_responder_gateway::UpdateResponderGatewayError> for Error {
    fn from(err: crate::operation::update_responder_gateway::UpdateResponderGatewayError) -> Self {
        match err {
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_responder_gateway::UpdateResponderGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<O, E> ::std::convert::From<::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>> for Error
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::waiters::error::WaiterError<O, E>) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            meta: ::std::default::Default::default(),
            source: err.into(),
        })
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
