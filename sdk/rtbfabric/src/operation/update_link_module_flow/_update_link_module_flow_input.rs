// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLinkModuleFlowInput {
    /// <p>The unique client token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the gateway.</p>
    pub gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the link.</p>
    pub link_id: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of a module.</p>
    pub modules: ::std::option::Option<::std::vec::Vec<crate::types::ModuleConfiguration>>,
}
impl UpdateLinkModuleFlowInput {
    /// <p>The unique client token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn gateway_id(&self) -> ::std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p>The unique identifier of the link.</p>
    pub fn link_id(&self) -> ::std::option::Option<&str> {
        self.link_id.as_deref()
    }
    /// <p>The configuration of a module.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.modules.is_none()`.
    pub fn modules(&self) -> &[crate::types::ModuleConfiguration] {
        self.modules.as_deref().unwrap_or_default()
    }
}
impl UpdateLinkModuleFlowInput {
    /// Creates a new builder-style object to manufacture [`UpdateLinkModuleFlowInput`](crate::operation::update_link_module_flow::UpdateLinkModuleFlowInput).
    pub fn builder() -> crate::operation::update_link_module_flow::builders::UpdateLinkModuleFlowInputBuilder {
        crate::operation::update_link_module_flow::builders::UpdateLinkModuleFlowInputBuilder::default()
    }
}

/// A builder for [`UpdateLinkModuleFlowInput`](crate::operation::update_link_module_flow::UpdateLinkModuleFlowInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateLinkModuleFlowInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) link_id: ::std::option::Option<::std::string::String>,
    pub(crate) modules: ::std::option::Option<::std::vec::Vec<crate::types::ModuleConfiguration>>,
}
impl UpdateLinkModuleFlowInputBuilder {
    /// <p>The unique client token.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the gateway.</p>
    /// This field is required.
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p>The unique identifier of the link.</p>
    /// This field is required.
    pub fn link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the link.</p>
    pub fn set_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link_id = input;
        self
    }
    /// <p>The unique identifier of the link.</p>
    pub fn get_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.link_id
    }
    /// Appends an item to `modules`.
    ///
    /// To override the contents of this collection use [`set_modules`](Self::set_modules).
    ///
    /// <p>The configuration of a module.</p>
    pub fn modules(mut self, input: crate::types::ModuleConfiguration) -> Self {
        let mut v = self.modules.unwrap_or_default();
        v.push(input);
        self.modules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration of a module.</p>
    pub fn set_modules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ModuleConfiguration>>) -> Self {
        self.modules = input;
        self
    }
    /// <p>The configuration of a module.</p>
    pub fn get_modules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ModuleConfiguration>> {
        &self.modules
    }
    /// Consumes the builder and constructs a [`UpdateLinkModuleFlowInput`](crate::operation::update_link_module_flow::UpdateLinkModuleFlowInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_link_module_flow::UpdateLinkModuleFlowInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_link_module_flow::UpdateLinkModuleFlowInput {
            client_token: self.client_token,
            gateway_id: self.gateway_id,
            link_id: self.link_id,
            modules: self.modules,
        })
    }
}
