// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateResponderGatewayInput {
    /// <p>The domain name for the responder gateway.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The networking port to use.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The networking protocol to use.</p>
    pub protocol: ::std::option::Option<crate::types::Protocol>,
    /// <p>The configuration of the trust store.</p>
    pub trust_store_configuration: ::std::option::Option<crate::types::TrustStoreConfiguration>,
    /// <p>The configuration for the managed endpoint.</p>
    pub managed_endpoint_configuration: ::std::option::Option<crate::types::ManagedEndpointConfiguration>,
    /// <p>The unique client token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the gateway.</p>
    pub gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>An optional description for the responder gateway.</p>
    pub description: ::std::option::Option<::std::string::String>,
}
impl UpdateResponderGatewayInput {
    /// <p>The domain name for the responder gateway.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The networking port to use.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The networking protocol to use.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::Protocol> {
        self.protocol.as_ref()
    }
    /// <p>The configuration of the trust store.</p>
    pub fn trust_store_configuration(&self) -> ::std::option::Option<&crate::types::TrustStoreConfiguration> {
        self.trust_store_configuration.as_ref()
    }
    /// <p>The configuration for the managed endpoint.</p>
    pub fn managed_endpoint_configuration(&self) -> ::std::option::Option<&crate::types::ManagedEndpointConfiguration> {
        self.managed_endpoint_configuration.as_ref()
    }
    /// <p>The unique client token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn gateway_id(&self) -> ::std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p>An optional description for the responder gateway.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateResponderGatewayInput {
    /// Creates a new builder-style object to manufacture [`UpdateResponderGatewayInput`](crate::operation::update_responder_gateway::UpdateResponderGatewayInput).
    pub fn builder() -> crate::operation::update_responder_gateway::builders::UpdateResponderGatewayInputBuilder {
        crate::operation::update_responder_gateway::builders::UpdateResponderGatewayInputBuilder::default()
    }
}

/// A builder for [`UpdateResponderGatewayInput`](crate::operation::update_responder_gateway::UpdateResponderGatewayInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct UpdateResponderGatewayInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::Protocol>,
    pub(crate) trust_store_configuration: ::std::option::Option<crate::types::TrustStoreConfiguration>,
    pub(crate) managed_endpoint_configuration: ::std::option::Option<crate::types::ManagedEndpointConfiguration>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
}
impl UpdateResponderGatewayInputBuilder {
    /// <p>The domain name for the responder gateway.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name for the responder gateway.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name for the responder gateway.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The networking port to use.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The networking port to use.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The networking port to use.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The networking protocol to use.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::Protocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The networking protocol to use.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::Protocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The networking protocol to use.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::Protocol> {
        &self.protocol
    }
    /// <p>The configuration of the trust store.</p>
    pub fn trust_store_configuration(mut self, input: crate::types::TrustStoreConfiguration) -> Self {
        self.trust_store_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the trust store.</p>
    pub fn set_trust_store_configuration(mut self, input: ::std::option::Option<crate::types::TrustStoreConfiguration>) -> Self {
        self.trust_store_configuration = input;
        self
    }
    /// <p>The configuration of the trust store.</p>
    pub fn get_trust_store_configuration(&self) -> &::std::option::Option<crate::types::TrustStoreConfiguration> {
        &self.trust_store_configuration
    }
    /// <p>The configuration for the managed endpoint.</p>
    pub fn managed_endpoint_configuration(mut self, input: crate::types::ManagedEndpointConfiguration) -> Self {
        self.managed_endpoint_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the managed endpoint.</p>
    pub fn set_managed_endpoint_configuration(mut self, input: ::std::option::Option<crate::types::ManagedEndpointConfiguration>) -> Self {
        self.managed_endpoint_configuration = input;
        self
    }
    /// <p>The configuration for the managed endpoint.</p>
    pub fn get_managed_endpoint_configuration(&self) -> &::std::option::Option<crate::types::ManagedEndpointConfiguration> {
        &self.managed_endpoint_configuration
    }
    /// <p>The unique client token.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the gateway.</p>
    /// This field is required.
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p>An optional description for the responder gateway.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description for the responder gateway.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description for the responder gateway.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Consumes the builder and constructs a [`UpdateResponderGatewayInput`](crate::operation::update_responder_gateway::UpdateResponderGatewayInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_responder_gateway::UpdateResponderGatewayInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_responder_gateway::UpdateResponderGatewayInput {
            domain_name: self.domain_name,
            port: self.port,
            protocol: self.protocol,
            trust_store_configuration: self.trust_store_configuration,
            managed_endpoint_configuration: self.managed_endpoint_configuration,
            client_token: self.client_token,
            gateway_id: self.gateway_id,
            description: self.description,
        })
    }
}
