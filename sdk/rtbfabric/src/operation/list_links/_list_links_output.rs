// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLinksOutput {
    /// <p>Information about created links.</p>
    pub links: ::std::option::Option<::std::vec::Vec<crate::types::ListLinksResponseStructure>>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLinksOutput {
    /// <p>Information about created links.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.links.is_none()`.
    pub fn links(&self) -> &[crate::types::ListLinksResponseStructure] {
        self.links.as_deref().unwrap_or_default()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListLinksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLinksOutput {
    /// Creates a new builder-style object to manufacture [`ListLinksOutput`](crate::operation::list_links::ListLinksOutput).
    pub fn builder() -> crate::operation::list_links::builders::ListLinksOutputBuilder {
        crate::operation::list_links::builders::ListLinksOutputBuilder::default()
    }
}

/// A builder for [`ListLinksOutput`](crate::operation::list_links::ListLinksOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListLinksOutputBuilder {
    pub(crate) links: ::std::option::Option<::std::vec::Vec<crate::types::ListLinksResponseStructure>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListLinksOutputBuilder {
    /// Appends an item to `links`.
    ///
    /// To override the contents of this collection use [`set_links`](Self::set_links).
    ///
    /// <p>Information about created links.</p>
    pub fn links(mut self, input: crate::types::ListLinksResponseStructure) -> Self {
        let mut v = self.links.unwrap_or_default();
        v.push(input);
        self.links = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about created links.</p>
    pub fn set_links(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListLinksResponseStructure>>) -> Self {
        self.links = input;
        self
    }
    /// <p>Information about created links.</p>
    pub fn get_links(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListLinksResponseStructure>> {
        &self.links
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListLinksOutput`](crate::operation::list_links::ListLinksOutput).
    pub fn build(self) -> crate::operation::list_links::ListLinksOutput {
        crate::operation::list_links::ListLinksOutput {
            links: self.links,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
