// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRequesterGatewaysOutput {
    /// <p>The unique identifier of the gateways.</p>
    pub gateway_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRequesterGatewaysOutput {
    /// <p>The unique identifier of the gateways.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateway_ids.is_none()`.
    pub fn gateway_ids(&self) -> &[::std::string::String] {
        self.gateway_ids.as_deref().unwrap_or_default()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for ListRequesterGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRequesterGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`ListRequesterGatewaysOutput`](crate::operation::list_requester_gateways::ListRequesterGatewaysOutput).
    pub fn builder() -> crate::operation::list_requester_gateways::builders::ListRequesterGatewaysOutputBuilder {
        crate::operation::list_requester_gateways::builders::ListRequesterGatewaysOutputBuilder::default()
    }
}

/// A builder for [`ListRequesterGatewaysOutput`](crate::operation::list_requester_gateways::ListRequesterGatewaysOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ListRequesterGatewaysOutputBuilder {
    pub(crate) gateway_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListRequesterGatewaysOutputBuilder {
    /// Appends an item to `gateway_ids`.
    ///
    /// To override the contents of this collection use [`set_gateway_ids`](Self::set_gateway_ids).
    ///
    /// <p>The unique identifier of the gateways.</p>
    pub fn gateway_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.gateway_ids.unwrap_or_default();
        v.push(input.into());
        self.gateway_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifier of the gateways.</p>
    pub fn set_gateway_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.gateway_ids = input;
        self
    }
    /// <p>The unique identifier of the gateways.</p>
    pub fn get_gateway_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.gateway_ids
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken error</i>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRequesterGatewaysOutput`](crate::operation::list_requester_gateways::ListRequesterGatewaysOutput).
    pub fn build(self) -> crate::operation::list_requester_gateways::ListRequesterGatewaysOutput {
        crate::operation::list_requester_gateways::ListRequesterGatewaysOutput {
            gateway_ids: self.gateway_ids,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
