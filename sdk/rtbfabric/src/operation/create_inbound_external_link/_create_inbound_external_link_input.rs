// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateInboundExternalLinkInput {
    /// <p>The unique client token.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the gateway.</p>
    pub gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>Attributes of the link.</p>
    pub attributes: ::std::option::Option<crate::types::LinkAttributes>,
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateInboundExternalLinkInput {
    /// <p>The unique client token.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn gateway_id(&self) -> ::std::option::Option<&str> {
        self.gateway_id.as_deref()
    }
    /// <p>Attributes of the link.</p>
    pub fn attributes(&self) -> ::std::option::Option<&crate::types::LinkAttributes> {
        self.attributes.as_ref()
    }
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateInboundExternalLinkInput {
    /// Creates a new builder-style object to manufacture [`CreateInboundExternalLinkInput`](crate::operation::create_inbound_external_link::CreateInboundExternalLinkInput).
    pub fn builder() -> crate::operation::create_inbound_external_link::builders::CreateInboundExternalLinkInputBuilder {
        crate::operation::create_inbound_external_link::builders::CreateInboundExternalLinkInputBuilder::default()
    }
}

/// A builder for [`CreateInboundExternalLinkInput`](crate::operation::create_inbound_external_link::CreateInboundExternalLinkInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateInboundExternalLinkInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) attributes: ::std::option::Option<crate::types::LinkAttributes>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateInboundExternalLinkInputBuilder {
    /// <p>The unique client token.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique client token.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The unique client token.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The unique identifier of the gateway.</p>
    /// This field is required.
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p>Attributes of the link.</p>
    pub fn attributes(mut self, input: crate::types::LinkAttributes) -> Self {
        self.attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Attributes of the link.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<crate::types::LinkAttributes>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>Attributes of the link.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<crate::types::LinkAttributes> {
        &self.attributes
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of the key-value pairs of the tag or tags to assign to the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateInboundExternalLinkInput`](crate::operation::create_inbound_external_link::CreateInboundExternalLinkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_inbound_external_link::CreateInboundExternalLinkInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_inbound_external_link::CreateInboundExternalLinkInput {
            client_token: self.client_token,
            gateway_id: self.gateway_id,
            attributes: self.attributes,
            tags: self.tags,
        })
    }
}
