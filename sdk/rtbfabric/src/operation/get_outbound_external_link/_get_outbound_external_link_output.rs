// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetOutboundExternalLinkOutput {
    /// <p>The unique identifier of the gateway.</p>
    pub gateway_id: ::std::string::String,
    /// <p>The unique identifier of the link.</p>
    pub link_id: ::std::string::String,
    /// <p>The status of the request.</p>
    pub status: crate::types::LinkStatus,
    /// <p>The public endpoint for the link.</p>
    pub public_endpoint: ::std::string::String,
    /// <p>The timestamp of when the outbound external link was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp of when the outbound external link was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A map of the key-value pairs for the tag or tags assigned to the specified resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetOutboundExternalLinkOutput {
    /// <p>The unique identifier of the gateway.</p>
    pub fn gateway_id(&self) -> &str {
        use std::ops::Deref;
        self.gateway_id.deref()
    }
    /// <p>The unique identifier of the link.</p>
    pub fn link_id(&self) -> &str {
        use std::ops::Deref;
        self.link_id.deref()
    }
    /// <p>The status of the request.</p>
    pub fn status(&self) -> &crate::types::LinkStatus {
        &self.status
    }
    /// <p>The public endpoint for the link.</p>
    pub fn public_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.public_endpoint.deref()
    }
    /// <p>The timestamp of when the outbound external link was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The timestamp of when the outbound external link was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>A map of the key-value pairs for the tag or tags assigned to the specified resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetOutboundExternalLinkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOutboundExternalLinkOutput {
    /// Creates a new builder-style object to manufacture [`GetOutboundExternalLinkOutput`](crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput).
    pub fn builder() -> crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder {
        crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder::default()
    }
}

/// A builder for [`GetOutboundExternalLinkOutput`](crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetOutboundExternalLinkOutputBuilder {
    pub(crate) gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) link_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::LinkStatus>,
    pub(crate) public_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl GetOutboundExternalLinkOutputBuilder {
    /// <p>The unique identifier of the gateway.</p>
    /// This field is required.
    pub fn gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The unique identifier of the gateway.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.gateway_id
    }
    /// <p>The unique identifier of the link.</p>
    /// This field is required.
    pub fn link_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.link_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the link.</p>
    pub fn set_link_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.link_id = input;
        self
    }
    /// <p>The unique identifier of the link.</p>
    pub fn get_link_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.link_id
    }
    /// <p>The status of the request.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::LinkStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::LinkStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::LinkStatus> {
        &self.status
    }
    /// <p>The public endpoint for the link.</p>
    /// This field is required.
    pub fn public_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public endpoint for the link.</p>
    pub fn set_public_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_endpoint = input;
        self
    }
    /// <p>The public endpoint for the link.</p>
    pub fn get_public_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_endpoint
    }
    /// <p>The timestamp of when the outbound external link was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the outbound external link was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The timestamp of when the outbound external link was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The timestamp of when the outbound external link was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the outbound external link was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The timestamp of when the outbound external link was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of the key-value pairs for the tag or tags assigned to the specified resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of the key-value pairs for the tag or tags assigned to the specified resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map of the key-value pairs for the tag or tags assigned to the specified resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetOutboundExternalLinkOutput`](crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`gateway_id`](crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder::gateway_id)
    /// - [`link_id`](crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder::link_id)
    /// - [`status`](crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder::status)
    /// - [`public_endpoint`](crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder::public_endpoint)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_outbound_external_link::GetOutboundExternalLinkOutput {
            gateway_id: self.gateway_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "gateway_id",
                    "gateway_id was not specified but it is required when building GetOutboundExternalLinkOutput",
                )
            })?,
            link_id: self.link_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "link_id",
                    "link_id was not specified but it is required when building GetOutboundExternalLinkOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetOutboundExternalLinkOutput",
                )
            })?,
            public_endpoint: self.public_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "public_endpoint",
                    "public_endpoint was not specified but it is required when building GetOutboundExternalLinkOutput",
                )
            })?,
            created_at: self.created_at,
            updated_at: self.updated_at,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
