// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn accept_link_output_output_correct_errors(
    mut builder: crate::operation::accept_link::builders::AcceptLinkOutputBuilder,
) -> crate::operation::accept_link::builders::AcceptLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.peer_gateway_id.is_none() {
        builder.peer_gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_inbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::create_inbound_external_link::builders::CreateInboundExternalLinkOutputBuilder,
) -> crate::operation::create_inbound_external_link::builders::CreateInboundExternalLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn create_link_output_output_correct_errors(
    mut builder: crate::operation::create_link::builders::CreateLinkOutputBuilder,
) -> crate::operation::create_link::builders::CreateLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.peer_gateway_id.is_none() {
        builder.peer_gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_outbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::create_outbound_external_link::builders::CreateOutboundExternalLinkOutputBuilder,
) -> crate::operation::create_outbound_external_link::builders::CreateOutboundExternalLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn create_requester_gateway_output_output_correct_errors(
    mut builder: crate::operation::create_requester_gateway::builders::CreateRequesterGatewayOutputBuilder,
) -> crate::operation::create_requester_gateway::builders::CreateRequesterGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RequesterGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn create_responder_gateway_output_output_correct_errors(
    mut builder: crate::operation::create_responder_gateway::builders::CreateResponderGatewayOutputBuilder,
) -> crate::operation::create_responder_gateway::builders::CreateResponderGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResponderGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn delete_inbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::delete_inbound_external_link::builders::DeleteInboundExternalLinkOutputBuilder,
) -> crate::operation::delete_inbound_external_link::builders::DeleteInboundExternalLinkOutputBuilder {
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn delete_link_output_output_correct_errors(
    mut builder: crate::operation::delete_link::builders::DeleteLinkOutputBuilder,
) -> crate::operation::delete_link::builders::DeleteLinkOutputBuilder {
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn delete_outbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkOutputBuilder,
) -> crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkOutputBuilder {
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn delete_requester_gateway_output_output_correct_errors(
    mut builder: crate::operation::delete_requester_gateway::builders::DeleteRequesterGatewayOutputBuilder,
) -> crate::operation::delete_requester_gateway::builders::DeleteRequesterGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RequesterGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn delete_responder_gateway_output_output_correct_errors(
    mut builder: crate::operation::delete_responder_gateway::builders::DeleteResponderGatewayOutputBuilder,
) -> crate::operation::delete_responder_gateway::builders::DeleteResponderGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResponderGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn get_inbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::get_inbound_external_link::builders::GetInboundExternalLinkOutputBuilder,
) -> crate::operation::get_inbound_external_link::builders::GetInboundExternalLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    builder
}

pub(crate) fn get_link_output_output_correct_errors(
    mut builder: crate::operation::get_link::builders::GetLinkOutputBuilder,
) -> crate::operation::get_link::builders::GetLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.peer_gateway_id.is_none() {
        builder.peer_gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_outbound_external_link_output_output_correct_errors(
    mut builder: crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder,
) -> crate::operation::get_outbound_external_link::builders::GetOutboundExternalLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.public_endpoint.is_none() {
        builder.public_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn get_requester_gateway_output_output_correct_errors(
    mut builder: crate::operation::get_requester_gateway::builders::GetRequesterGatewayOutputBuilder,
) -> crate::operation::get_requester_gateway::builders::GetRequesterGatewayOutputBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RequesterGatewayStatus>().ok()
    }
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_responder_gateway_output_output_correct_errors(
    mut builder: crate::operation::get_responder_gateway::builders::GetResponderGatewayOutputBuilder,
) -> crate::operation::get_responder_gateway::builders::GetResponderGatewayOutputBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResponderGatewayStatus>().ok()
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::Protocol>().ok()
    }
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    builder
}

pub(crate) fn reject_link_output_output_correct_errors(
    mut builder: crate::operation::reject_link::builders::RejectLinkOutputBuilder,
) -> crate::operation::reject_link::builders::RejectLinkOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.peer_gateway_id.is_none() {
        builder.peer_gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_link_output_output_correct_errors(
    mut builder: crate::operation::update_link::builders::UpdateLinkOutputBuilder,
) -> crate::operation::update_link::builders::UpdateLinkOutputBuilder {
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn update_link_module_flow_output_output_correct_errors(
    mut builder: crate::operation::update_link_module_flow::builders::UpdateLinkModuleFlowOutputBuilder,
) -> crate::operation::update_link_module_flow::builders::UpdateLinkModuleFlowOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    builder
}

pub(crate) fn update_requester_gateway_output_output_correct_errors(
    mut builder: crate::operation::update_requester_gateway::builders::UpdateRequesterGatewayOutputBuilder,
) -> crate::operation::update_requester_gateway::builders::UpdateRequesterGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RequesterGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn update_responder_gateway_output_output_correct_errors(
    mut builder: crate::operation::update_responder_gateway::builders::UpdateResponderGatewayOutputBuilder,
) -> crate::operation::update_responder_gateway::builders::UpdateResponderGatewayOutputBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResponderGatewayStatus>().ok()
    }
    builder
}

pub(crate) fn link_log_settings_correct_errors(
    mut builder: crate::types::builders::LinkLogSettingsBuilder,
) -> crate::types::builders::LinkLogSettingsBuilder {
    if builder.application_logs.is_none() {
        builder.application_logs = {
            let builder = crate::types::builders::LinkApplicationLogConfigurationBuilder::default();
            Some(crate::serde_util::link_application_log_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn trust_store_configuration_correct_errors(
    mut builder: crate::types::builders::TrustStoreConfigurationBuilder,
) -> crate::types::builders::TrustStoreConfigurationBuilder {
    if builder.certificate_authority_certificates.is_none() {
        builder.certificate_authority_certificates = Some(Default::default())
    }
    builder
}

pub(crate) fn auto_scaling_groups_configuration_correct_errors(
    mut builder: crate::types::builders::AutoScalingGroupsConfigurationBuilder,
) -> crate::types::builders::AutoScalingGroupsConfigurationBuilder {
    if builder.auto_scaling_group_names.is_none() {
        builder.auto_scaling_group_names = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn eks_endpoints_configuration_correct_errors(
    mut builder: crate::types::builders::EksEndpointsConfigurationBuilder,
) -> crate::types::builders::EksEndpointsConfigurationBuilder {
    if builder.endpoints_resource_name.is_none() {
        builder.endpoints_resource_name = Some(Default::default())
    }
    if builder.endpoints_resource_namespace.is_none() {
        builder.endpoints_resource_namespace = Some(Default::default())
    }
    if builder.cluster_api_server_endpoint_uri.is_none() {
        builder.cluster_api_server_endpoint_uri = Some(Default::default())
    }
    if builder.cluster_api_server_ca_certificate_chain.is_none() {
        builder.cluster_api_server_ca_certificate_chain = Some(Default::default())
    }
    if builder.cluster_name.is_none() {
        builder.cluster_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn link_application_log_configuration_correct_errors(
    mut builder: crate::types::builders::LinkApplicationLogConfigurationBuilder,
) -> crate::types::builders::LinkApplicationLogConfigurationBuilder {
    if builder.sampling.is_none() {
        builder.sampling = {
            let builder = crate::types::builders::LinkApplicationLogSamplingBuilder::default();
            crate::serde_util::link_application_log_sampling_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_links_response_structure_correct_errors(
    mut builder: crate::types::builders::ListLinksResponseStructureBuilder,
) -> crate::types::builders::ListLinksResponseStructureBuilder {
    if builder.gateway_id.is_none() {
        builder.gateway_id = Some(Default::default())
    }
    if builder.peer_gateway_id.is_none() {
        builder.peer_gateway_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LinkStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.link_id.is_none() {
        builder.link_id = Some(Default::default())
    }
    builder
}

pub(crate) fn module_configuration_correct_errors(
    mut builder: crate::types::builders::ModuleConfigurationBuilder,
) -> crate::types::builders::ModuleConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn link_application_log_sampling_correct_errors(
    mut builder: crate::types::builders::LinkApplicationLogSamplingBuilder,
) -> crate::types::builders::LinkApplicationLogSamplingBuilder {
    if builder.error_log.is_none() {
        builder.error_log = Some(Default::default())
    }
    if builder.filter_log.is_none() {
        builder.filter_log = Some(Default::default())
    }
    builder
}

pub(crate) fn responder_error_masking_for_http_code_correct_errors(
    mut builder: crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder,
) -> crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder {
    if builder.http_code.is_none() {
        builder.http_code = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::ResponderErrorMaskingAction>().ok()
    }
    if builder.logging_types.is_none() {
        builder.logging_types = Some(Default::default())
    }
    builder
}

pub(crate) fn open_rtb_attribute_module_parameters_correct_errors(
    mut builder: crate::types::builders::OpenRtbAttributeModuleParametersBuilder,
) -> crate::types::builders::OpenRtbAttributeModuleParametersBuilder {
    if builder.filter_type.is_none() {
        builder.filter_type = "no value was set".parse::<crate::types::FilterType>().ok()
    }
    if builder.filter_configuration.is_none() {
        builder.filter_configuration = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = Some(crate::types::Action::Unknown)
    }
    if builder.holdback_percentage.is_none() {
        builder.holdback_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_correct_errors(mut builder: crate::types::builders::FilterBuilder) -> crate::types::builders::FilterBuilder {
    if builder.criteria.is_none() {
        builder.criteria = Some(Default::default())
    }
    builder
}

pub(crate) fn header_tag_action_correct_errors(
    mut builder: crate::types::builders::HeaderTagActionBuilder,
) -> crate::types::builders::HeaderTagActionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_criterion_correct_errors(
    mut builder: crate::types::builders::FilterCriterionBuilder,
) -> crate::types::builders::FilterCriterionBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}
