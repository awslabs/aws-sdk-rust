// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteOutboundExternalLink`](crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`gateway_id(impl Into<String>)`](crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder::gateway_id) / [`set_gateway_id(Option<String>)`](crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder::set_gateway_id):<br>required: **true**<br><p>The unique identifier of the gateway.</p><br>
    ///   - [`link_id(impl Into<String>)`](crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder::link_id) / [`set_link_id(Option<String>)`](crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder::set_link_id):<br>required: **true**<br><p>The unique identifier of the link.</p><br>
    /// - On success, responds with [`DeleteOutboundExternalLinkOutput`](crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkOutput) with field(s):
    ///   - [`link_id(String)`](crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkOutput::link_id): <p>The unique identifier of the link.</p>
    ///   - [`status(LinkStatus)`](crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkOutput::status): <p>The status of the request.</p>
    /// - On failure, responds with [`SdkError<DeleteOutboundExternalLinkError>`](crate::operation::delete_outbound_external_link::DeleteOutboundExternalLinkError)
    pub fn delete_outbound_external_link(
        &self,
    ) -> crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder {
        crate::operation::delete_outbound_external_link::builders::DeleteOutboundExternalLinkFluentBuilder::new(self.handle.clone())
    }
}
