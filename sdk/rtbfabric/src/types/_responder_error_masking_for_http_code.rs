// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the masking for HTTP error codes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResponderErrorMaskingForHttpCode {
    /// <p>The HTTP error code.</p>
    pub http_code: ::std::string::String,
    /// <p>The action for the error..</p>
    pub action: crate::types::ResponderErrorMaskingAction,
    /// <p>The error log type.</p>
    pub logging_types: ::std::vec::Vec<crate::types::ResponderErrorMaskingLoggingType>,
    /// <p>The percentage of response logging.</p>
    pub response_logging_percentage: ::std::option::Option<f32>,
}
impl ResponderErrorMaskingForHttpCode {
    /// <p>The HTTP error code.</p>
    pub fn http_code(&self) -> &str {
        use std::ops::Deref;
        self.http_code.deref()
    }
    /// <p>The action for the error..</p>
    pub fn action(&self) -> &crate::types::ResponderErrorMaskingAction {
        &self.action
    }
    /// <p>The error log type.</p>
    pub fn logging_types(&self) -> &[crate::types::ResponderErrorMaskingLoggingType] {
        use std::ops::Deref;
        self.logging_types.deref()
    }
    /// <p>The percentage of response logging.</p>
    pub fn response_logging_percentage(&self) -> ::std::option::Option<f32> {
        self.response_logging_percentage
    }
}
impl ResponderErrorMaskingForHttpCode {
    /// Creates a new builder-style object to manufacture [`ResponderErrorMaskingForHttpCode`](crate::types::ResponderErrorMaskingForHttpCode).
    pub fn builder() -> crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder {
        crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder::default()
    }
}

/// A builder for [`ResponderErrorMaskingForHttpCode`](crate::types::ResponderErrorMaskingForHttpCode).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ResponderErrorMaskingForHttpCodeBuilder {
    pub(crate) http_code: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::ResponderErrorMaskingAction>,
    pub(crate) logging_types: ::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingLoggingType>>,
    pub(crate) response_logging_percentage: ::std::option::Option<f32>,
}
impl ResponderErrorMaskingForHttpCodeBuilder {
    /// <p>The HTTP error code.</p>
    /// This field is required.
    pub fn http_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.http_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP error code.</p>
    pub fn set_http_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.http_code = input;
        self
    }
    /// <p>The HTTP error code.</p>
    pub fn get_http_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.http_code
    }
    /// <p>The action for the error..</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::ResponderErrorMaskingAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action for the error..</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::ResponderErrorMaskingAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action for the error..</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::ResponderErrorMaskingAction> {
        &self.action
    }
    /// Appends an item to `logging_types`.
    ///
    /// To override the contents of this collection use [`set_logging_types`](Self::set_logging_types).
    ///
    /// <p>The error log type.</p>
    pub fn logging_types(mut self, input: crate::types::ResponderErrorMaskingLoggingType) -> Self {
        let mut v = self.logging_types.unwrap_or_default();
        v.push(input);
        self.logging_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The error log type.</p>
    pub fn set_logging_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingLoggingType>>) -> Self {
        self.logging_types = input;
        self
    }
    /// <p>The error log type.</p>
    pub fn get_logging_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingLoggingType>> {
        &self.logging_types
    }
    /// <p>The percentage of response logging.</p>
    pub fn response_logging_percentage(mut self, input: f32) -> Self {
        self.response_logging_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of response logging.</p>
    pub fn set_response_logging_percentage(mut self, input: ::std::option::Option<f32>) -> Self {
        self.response_logging_percentage = input;
        self
    }
    /// <p>The percentage of response logging.</p>
    pub fn get_response_logging_percentage(&self) -> &::std::option::Option<f32> {
        &self.response_logging_percentage
    }
    /// Consumes the builder and constructs a [`ResponderErrorMaskingForHttpCode`](crate::types::ResponderErrorMaskingForHttpCode).
    /// This method will fail if any of the following fields are not set:
    /// - [`http_code`](crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder::http_code)
    /// - [`action`](crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder::action)
    /// - [`logging_types`](crate::types::builders::ResponderErrorMaskingForHttpCodeBuilder::logging_types)
    pub fn build(self) -> ::std::result::Result<crate::types::ResponderErrorMaskingForHttpCode, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ResponderErrorMaskingForHttpCode {
            http_code: self.http_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "http_code",
                    "http_code was not specified but it is required when building ResponderErrorMaskingForHttpCode",
                )
            })?,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building ResponderErrorMaskingForHttpCode",
                )
            })?,
            logging_types: self.logging_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "logging_types",
                    "logging_types was not specified but it is required when building ResponderErrorMaskingForHttpCode",
                )
            })?,
            response_logging_percentage: self.response_logging_percentage,
        })
    }
}
