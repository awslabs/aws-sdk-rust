// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters of a rate limit.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RateLimiterModuleParameters {
    /// <p>The transactions per second rate limit.</p>
    pub tps: ::std::option::Option<f32>,
}
impl RateLimiterModuleParameters {
    /// <p>The transactions per second rate limit.</p>
    pub fn tps(&self) -> ::std::option::Option<f32> {
        self.tps
    }
}
impl RateLimiterModuleParameters {
    /// Creates a new builder-style object to manufacture [`RateLimiterModuleParameters`](crate::types::RateLimiterModuleParameters).
    pub fn builder() -> crate::types::builders::RateLimiterModuleParametersBuilder {
        crate::types::builders::RateLimiterModuleParametersBuilder::default()
    }
}

/// A builder for [`RateLimiterModuleParameters`](crate::types::RateLimiterModuleParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct RateLimiterModuleParametersBuilder {
    pub(crate) tps: ::std::option::Option<f32>,
}
impl RateLimiterModuleParametersBuilder {
    /// <p>The transactions per second rate limit.</p>
    pub fn tps(mut self, input: f32) -> Self {
        self.tps = ::std::option::Option::Some(input);
        self
    }
    /// <p>The transactions per second rate limit.</p>
    pub fn set_tps(mut self, input: ::std::option::Option<f32>) -> Self {
        self.tps = input;
        self
    }
    /// <p>The transactions per second rate limit.</p>
    pub fn get_tps(&self) -> &::std::option::Option<f32> {
        &self.tps
    }
    /// Consumes the builder and constructs a [`RateLimiterModuleParameters`](crate::types::RateLimiterModuleParameters).
    pub fn build(self) -> crate::types::RateLimiterModuleParameters {
        crate::types::RateLimiterModuleParameters { tps: self.tps }
    }
}
