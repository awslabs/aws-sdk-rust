// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the parameters of an open RTB attribute module.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OpenRtbAttributeModuleParameters {
    /// <p>The filter type.</p>
    pub filter_type: crate::types::FilterType,
    /// <p>Describes the configuration of a filter.</p>
    pub filter_configuration: ::std::vec::Vec<crate::types::Filter>,
    /// <p>Describes a bid action.</p>
    pub action: ::std::option::Option<crate::types::Action>,
    /// <p>The hold back percentage.</p>
    pub holdback_percentage: f32,
}
impl OpenRtbAttributeModuleParameters {
    /// <p>The filter type.</p>
    pub fn filter_type(&self) -> &crate::types::FilterType {
        &self.filter_type
    }
    /// <p>Describes the configuration of a filter.</p>
    pub fn filter_configuration(&self) -> &[crate::types::Filter] {
        use std::ops::Deref;
        self.filter_configuration.deref()
    }
    /// <p>Describes a bid action.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::Action> {
        self.action.as_ref()
    }
    /// <p>The hold back percentage.</p>
    pub fn holdback_percentage(&self) -> f32 {
        self.holdback_percentage
    }
}
impl OpenRtbAttributeModuleParameters {
    /// Creates a new builder-style object to manufacture [`OpenRtbAttributeModuleParameters`](crate::types::OpenRtbAttributeModuleParameters).
    pub fn builder() -> crate::types::builders::OpenRtbAttributeModuleParametersBuilder {
        crate::types::builders::OpenRtbAttributeModuleParametersBuilder::default()
    }
}

/// A builder for [`OpenRtbAttributeModuleParameters`](crate::types::OpenRtbAttributeModuleParameters).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct OpenRtbAttributeModuleParametersBuilder {
    pub(crate) filter_type: ::std::option::Option<crate::types::FilterType>,
    pub(crate) filter_configuration: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) action: ::std::option::Option<crate::types::Action>,
    pub(crate) holdback_percentage: ::std::option::Option<f32>,
}
impl OpenRtbAttributeModuleParametersBuilder {
    /// <p>The filter type.</p>
    /// This field is required.
    pub fn filter_type(mut self, input: crate::types::FilterType) -> Self {
        self.filter_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The filter type.</p>
    pub fn set_filter_type(mut self, input: ::std::option::Option<crate::types::FilterType>) -> Self {
        self.filter_type = input;
        self
    }
    /// <p>The filter type.</p>
    pub fn get_filter_type(&self) -> &::std::option::Option<crate::types::FilterType> {
        &self.filter_type
    }
    /// Appends an item to `filter_configuration`.
    ///
    /// To override the contents of this collection use [`set_filter_configuration`](Self::set_filter_configuration).
    ///
    /// <p>Describes the configuration of a filter.</p>
    pub fn filter_configuration(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filter_configuration.unwrap_or_default();
        v.push(input);
        self.filter_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the configuration of a filter.</p>
    pub fn set_filter_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filter_configuration = input;
        self
    }
    /// <p>Describes the configuration of a filter.</p>
    pub fn get_filter_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filter_configuration
    }
    /// <p>Describes a bid action.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes a bid action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.action = input;
        self
    }
    /// <p>Describes a bid action.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        &self.action
    }
    /// <p>The hold back percentage.</p>
    /// This field is required.
    pub fn holdback_percentage(mut self, input: f32) -> Self {
        self.holdback_percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hold back percentage.</p>
    pub fn set_holdback_percentage(mut self, input: ::std::option::Option<f32>) -> Self {
        self.holdback_percentage = input;
        self
    }
    /// <p>The hold back percentage.</p>
    pub fn get_holdback_percentage(&self) -> &::std::option::Option<f32> {
        &self.holdback_percentage
    }
    /// Consumes the builder and constructs a [`OpenRtbAttributeModuleParameters`](crate::types::OpenRtbAttributeModuleParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter_type`](crate::types::builders::OpenRtbAttributeModuleParametersBuilder::filter_type)
    /// - [`filter_configuration`](crate::types::builders::OpenRtbAttributeModuleParametersBuilder::filter_configuration)
    /// - [`holdback_percentage`](crate::types::builders::OpenRtbAttributeModuleParametersBuilder::holdback_percentage)
    pub fn build(self) -> ::std::result::Result<crate::types::OpenRtbAttributeModuleParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OpenRtbAttributeModuleParameters {
            filter_type: self.filter_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_type",
                    "filter_type was not specified but it is required when building OpenRtbAttributeModuleParameters",
                )
            })?,
            filter_configuration: self.filter_configuration.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_configuration",
                    "filter_configuration was not specified but it is required when building OpenRtbAttributeModuleParameters",
                )
            })?,
            action: self.action,
            holdback_percentage: self.holdback_percentage.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "holdback_percentage",
                    "holdback_percentage was not specified but it is required when building OpenRtbAttributeModuleParameters",
                )
            })?,
        })
    }
}
