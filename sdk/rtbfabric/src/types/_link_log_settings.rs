// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the settings for a link log.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinkLogSettings {
    /// <p>Describes the configuration of a link application log.</p>
    pub application_logs: ::std::option::Option<crate::types::LinkApplicationLogConfiguration>,
}
impl LinkLogSettings {
    /// <p>Describes the configuration of a link application log.</p>
    pub fn application_logs(&self) -> ::std::option::Option<&crate::types::LinkApplicationLogConfiguration> {
        self.application_logs.as_ref()
    }
}
impl LinkLogSettings {
    /// Creates a new builder-style object to manufacture [`LinkLogSettings`](crate::types::LinkLogSettings).
    pub fn builder() -> crate::types::builders::LinkLogSettingsBuilder {
        crate::types::builders::LinkLogSettingsBuilder::default()
    }
}

/// A builder for [`LinkLogSettings`](crate::types::LinkLogSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinkLogSettingsBuilder {
    pub(crate) application_logs: ::std::option::Option<crate::types::LinkApplicationLogConfiguration>,
}
impl LinkLogSettingsBuilder {
    /// <p>Describes the configuration of a link application log.</p>
    /// This field is required.
    pub fn application_logs(mut self, input: crate::types::LinkApplicationLogConfiguration) -> Self {
        self.application_logs = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the configuration of a link application log.</p>
    pub fn set_application_logs(mut self, input: ::std::option::Option<crate::types::LinkApplicationLogConfiguration>) -> Self {
        self.application_logs = input;
        self
    }
    /// <p>Describes the configuration of a link application log.</p>
    pub fn get_application_logs(&self) -> &::std::option::Option<crate::types::LinkApplicationLogConfiguration> {
        &self.application_logs
    }
    /// Consumes the builder and constructs a [`LinkLogSettings`](crate::types::LinkLogSettings).
    pub fn build(self) -> crate::types::LinkLogSettings {
        crate::types::LinkLogSettings {
            application_logs: self.application_logs,
        }
    }
}
