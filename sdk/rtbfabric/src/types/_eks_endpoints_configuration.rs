// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of an Amazon Elastic Kubernetes Service endpoint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EksEndpointsConfiguration {
    /// <p>The name of the endpoint resource.</p>
    pub endpoints_resource_name: ::std::string::String,
    /// <p>The namespace of the endpoint resource.</p>
    pub endpoints_resource_namespace: ::std::string::String,
    /// <p>The URI of the cluster API server endpoint.</p>
    pub cluster_api_server_endpoint_uri: ::std::string::String,
    /// <p>The CA certificate chain of the cluster API server.</p>
    pub cluster_api_server_ca_certificate_chain: ::std::string::String,
    /// <p>The name of the cluster.</p>
    pub cluster_name: ::std::string::String,
    /// <p>The role ARN for the cluster.</p>
    pub role_arn: ::std::string::String,
}
impl EksEndpointsConfiguration {
    /// <p>The name of the endpoint resource.</p>
    pub fn endpoints_resource_name(&self) -> &str {
        use std::ops::Deref;
        self.endpoints_resource_name.deref()
    }
    /// <p>The namespace of the endpoint resource.</p>
    pub fn endpoints_resource_namespace(&self) -> &str {
        use std::ops::Deref;
        self.endpoints_resource_namespace.deref()
    }
    /// <p>The URI of the cluster API server endpoint.</p>
    pub fn cluster_api_server_endpoint_uri(&self) -> &str {
        use std::ops::Deref;
        self.cluster_api_server_endpoint_uri.deref()
    }
    /// <p>The CA certificate chain of the cluster API server.</p>
    pub fn cluster_api_server_ca_certificate_chain(&self) -> &str {
        use std::ops::Deref;
        self.cluster_api_server_ca_certificate_chain.deref()
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(&self) -> &str {
        use std::ops::Deref;
        self.cluster_name.deref()
    }
    /// <p>The role ARN for the cluster.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
}
impl ::std::fmt::Debug for EksEndpointsConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EksEndpointsConfiguration");
        formatter.field("endpoints_resource_name", &self.endpoints_resource_name);
        formatter.field("endpoints_resource_namespace", &self.endpoints_resource_namespace);
        formatter.field("cluster_api_server_endpoint_uri", &self.cluster_api_server_endpoint_uri);
        formatter.field("cluster_api_server_ca_certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("cluster_name", &self.cluster_name);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
impl EksEndpointsConfiguration {
    /// Creates a new builder-style object to manufacture [`EksEndpointsConfiguration`](crate::types::EksEndpointsConfiguration).
    pub fn builder() -> crate::types::builders::EksEndpointsConfigurationBuilder {
        crate::types::builders::EksEndpointsConfigurationBuilder::default()
    }
}

/// A builder for [`EksEndpointsConfiguration`](crate::types::EksEndpointsConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct EksEndpointsConfigurationBuilder {
    pub(crate) endpoints_resource_name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints_resource_namespace: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_api_server_endpoint_uri: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_api_server_ca_certificate_chain: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl EksEndpointsConfigurationBuilder {
    /// <p>The name of the endpoint resource.</p>
    /// This field is required.
    pub fn endpoints_resource_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoints_resource_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the endpoint resource.</p>
    pub fn set_endpoints_resource_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoints_resource_name = input;
        self
    }
    /// <p>The name of the endpoint resource.</p>
    pub fn get_endpoints_resource_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoints_resource_name
    }
    /// <p>The namespace of the endpoint resource.</p>
    /// This field is required.
    pub fn endpoints_resource_namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoints_resource_namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the endpoint resource.</p>
    pub fn set_endpoints_resource_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoints_resource_namespace = input;
        self
    }
    /// <p>The namespace of the endpoint resource.</p>
    pub fn get_endpoints_resource_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoints_resource_namespace
    }
    /// <p>The URI of the cluster API server endpoint.</p>
    /// This field is required.
    pub fn cluster_api_server_endpoint_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_api_server_endpoint_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the cluster API server endpoint.</p>
    pub fn set_cluster_api_server_endpoint_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_api_server_endpoint_uri = input;
        self
    }
    /// <p>The URI of the cluster API server endpoint.</p>
    pub fn get_cluster_api_server_endpoint_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_api_server_endpoint_uri
    }
    /// <p>The CA certificate chain of the cluster API server.</p>
    /// This field is required.
    pub fn cluster_api_server_ca_certificate_chain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_api_server_ca_certificate_chain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CA certificate chain of the cluster API server.</p>
    pub fn set_cluster_api_server_ca_certificate_chain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_api_server_ca_certificate_chain = input;
        self
    }
    /// <p>The CA certificate chain of the cluster API server.</p>
    pub fn get_cluster_api_server_ca_certificate_chain(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_api_server_ca_certificate_chain
    }
    /// <p>The name of the cluster.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>The role ARN for the cluster.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The role ARN for the cluster.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The role ARN for the cluster.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`EksEndpointsConfiguration`](crate::types::EksEndpointsConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoints_resource_name`](crate::types::builders::EksEndpointsConfigurationBuilder::endpoints_resource_name)
    /// - [`endpoints_resource_namespace`](crate::types::builders::EksEndpointsConfigurationBuilder::endpoints_resource_namespace)
    /// - [`cluster_api_server_endpoint_uri`](crate::types::builders::EksEndpointsConfigurationBuilder::cluster_api_server_endpoint_uri)
    /// - [`cluster_api_server_ca_certificate_chain`](crate::types::builders::EksEndpointsConfigurationBuilder::cluster_api_server_ca_certificate_chain)
    /// - [`cluster_name`](crate::types::builders::EksEndpointsConfigurationBuilder::cluster_name)
    /// - [`role_arn`](crate::types::builders::EksEndpointsConfigurationBuilder::role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::EksEndpointsConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EksEndpointsConfiguration {
            endpoints_resource_name: self.endpoints_resource_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoints_resource_name",
                    "endpoints_resource_name was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
            endpoints_resource_namespace: self.endpoints_resource_namespace.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoints_resource_namespace",
                    "endpoints_resource_namespace was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
            cluster_api_server_endpoint_uri: self.cluster_api_server_endpoint_uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_api_server_endpoint_uri",
                    "cluster_api_server_endpoint_uri was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
            cluster_api_server_ca_certificate_chain: self.cluster_api_server_ca_certificate_chain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_api_server_ca_certificate_chain",
                    "cluster_api_server_ca_certificate_chain was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
            cluster_name: self.cluster_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cluster_name",
                    "cluster_name was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building EksEndpointsConfiguration",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EksEndpointsConfigurationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EksEndpointsConfigurationBuilder");
        formatter.field("endpoints_resource_name", &self.endpoints_resource_name);
        formatter.field("endpoints_resource_namespace", &self.endpoints_resource_namespace);
        formatter.field("cluster_api_server_endpoint_uri", &self.cluster_api_server_endpoint_uri);
        formatter.field("cluster_api_server_ca_certificate_chain", &"*** Sensitive Data Redacted ***");
        formatter.field("cluster_name", &self.cluster_name);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
