// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a link application log sample.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinkApplicationLogSampling {
    /// <p>An error log entry.</p>
    pub error_log: f64,
    /// <p>A filter log entry.</p>
    pub filter_log: f64,
}
impl LinkApplicationLogSampling {
    /// <p>An error log entry.</p>
    pub fn error_log(&self) -> f64 {
        self.error_log
    }
    /// <p>A filter log entry.</p>
    pub fn filter_log(&self) -> f64 {
        self.filter_log
    }
}
impl LinkApplicationLogSampling {
    /// Creates a new builder-style object to manufacture [`LinkApplicationLogSampling`](crate::types::LinkApplicationLogSampling).
    pub fn builder() -> crate::types::builders::LinkApplicationLogSamplingBuilder {
        crate::types::builders::LinkApplicationLogSamplingBuilder::default()
    }
}

/// A builder for [`LinkApplicationLogSampling`](crate::types::LinkApplicationLogSampling).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinkApplicationLogSamplingBuilder {
    pub(crate) error_log: ::std::option::Option<f64>,
    pub(crate) filter_log: ::std::option::Option<f64>,
}
impl LinkApplicationLogSamplingBuilder {
    /// <p>An error log entry.</p>
    /// This field is required.
    pub fn error_log(mut self, input: f64) -> Self {
        self.error_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>An error log entry.</p>
    pub fn set_error_log(mut self, input: ::std::option::Option<f64>) -> Self {
        self.error_log = input;
        self
    }
    /// <p>An error log entry.</p>
    pub fn get_error_log(&self) -> &::std::option::Option<f64> {
        &self.error_log
    }
    /// <p>A filter log entry.</p>
    /// This field is required.
    pub fn filter_log(mut self, input: f64) -> Self {
        self.filter_log = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter log entry.</p>
    pub fn set_filter_log(mut self, input: ::std::option::Option<f64>) -> Self {
        self.filter_log = input;
        self
    }
    /// <p>A filter log entry.</p>
    pub fn get_filter_log(&self) -> &::std::option::Option<f64> {
        &self.filter_log
    }
    /// Consumes the builder and constructs a [`LinkApplicationLogSampling`](crate::types::LinkApplicationLogSampling).
    /// This method will fail if any of the following fields are not set:
    /// - [`error_log`](crate::types::builders::LinkApplicationLogSamplingBuilder::error_log)
    /// - [`filter_log`](crate::types::builders::LinkApplicationLogSamplingBuilder::filter_log)
    pub fn build(self) -> ::std::result::Result<crate::types::LinkApplicationLogSampling, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LinkApplicationLogSampling {
            error_log: self.error_log.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "error_log",
                    "error_log was not specified but it is required when building LinkApplicationLogSampling",
                )
            })?,
            filter_log: self.filter_log.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter_log",
                    "filter_log was not specified but it is required when building LinkApplicationLogSampling",
                )
            })?,
        })
    }
}
