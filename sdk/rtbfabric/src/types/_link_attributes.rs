// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the attributes of a link.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinkAttributes {
    /// <p>Describes the masking for HTTP error codes.</p>
    pub responder_error_masking: ::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingForHttpCode>>,
    /// <p>The customer-provided unique identifier of the link.</p>
    pub customer_provided_id: ::std::option::Option<::std::string::String>,
}
impl LinkAttributes {
    /// <p>Describes the masking for HTTP error codes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.responder_error_masking.is_none()`.
    pub fn responder_error_masking(&self) -> &[crate::types::ResponderErrorMaskingForHttpCode] {
        self.responder_error_masking.as_deref().unwrap_or_default()
    }
    /// <p>The customer-provided unique identifier of the link.</p>
    pub fn customer_provided_id(&self) -> ::std::option::Option<&str> {
        self.customer_provided_id.as_deref()
    }
}
impl LinkAttributes {
    /// Creates a new builder-style object to manufacture [`LinkAttributes`](crate::types::LinkAttributes).
    pub fn builder() -> crate::types::builders::LinkAttributesBuilder {
        crate::types::builders::LinkAttributesBuilder::default()
    }
}

/// A builder for [`LinkAttributes`](crate::types::LinkAttributes).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct LinkAttributesBuilder {
    pub(crate) responder_error_masking: ::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingForHttpCode>>,
    pub(crate) customer_provided_id: ::std::option::Option<::std::string::String>,
}
impl LinkAttributesBuilder {
    /// Appends an item to `responder_error_masking`.
    ///
    /// To override the contents of this collection use [`set_responder_error_masking`](Self::set_responder_error_masking).
    ///
    /// <p>Describes the masking for HTTP error codes.</p>
    pub fn responder_error_masking(mut self, input: crate::types::ResponderErrorMaskingForHttpCode) -> Self {
        let mut v = self.responder_error_masking.unwrap_or_default();
        v.push(input);
        self.responder_error_masking = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the masking for HTTP error codes.</p>
    pub fn set_responder_error_masking(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingForHttpCode>>,
    ) -> Self {
        self.responder_error_masking = input;
        self
    }
    /// <p>Describes the masking for HTTP error codes.</p>
    pub fn get_responder_error_masking(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ResponderErrorMaskingForHttpCode>> {
        &self.responder_error_masking
    }
    /// <p>The customer-provided unique identifier of the link.</p>
    pub fn customer_provided_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_provided_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer-provided unique identifier of the link.</p>
    pub fn set_customer_provided_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_provided_id = input;
        self
    }
    /// <p>The customer-provided unique identifier of the link.</p>
    pub fn get_customer_provided_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_provided_id
    }
    /// Consumes the builder and constructs a [`LinkAttributes`](crate::types::LinkAttributes).
    pub fn build(self) -> crate::types::LinkAttributes {
        crate::types::LinkAttributes {
            responder_error_masking: self.responder_error_masking,
            customer_provided_id: self.customer_provided_id,
        }
    }
}
