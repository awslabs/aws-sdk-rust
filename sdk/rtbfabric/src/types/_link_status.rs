// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LinkStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let linkstatus = unimplemented!();
/// match linkstatus {
///     LinkStatus::Accepted => { /* ... */ },
///     LinkStatus::Active => { /* ... */ },
///     LinkStatus::Deleted => { /* ... */ },
///     LinkStatus::Failed => { /* ... */ },
///     LinkStatus::Isolated => { /* ... */ },
///     LinkStatus::PendingCreation => { /* ... */ },
///     LinkStatus::PendingDeletion => { /* ... */ },
///     LinkStatus::PendingIsolation => { /* ... */ },
///     LinkStatus::PendingRequest => { /* ... */ },
///     LinkStatus::PendingRestoration => { /* ... */ },
///     LinkStatus::PendingUpdate => { /* ... */ },
///     LinkStatus::Rejected => { /* ... */ },
///     LinkStatus::Requested => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `linkstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LinkStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LinkStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LinkStatus::NewFeature` is defined.
/// Specifically, when `linkstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LinkStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum LinkStatus {
    #[allow(missing_docs)] // documentation missing in model
    Accepted,
    #[allow(missing_docs)] // documentation missing in model
    Active,
    #[allow(missing_docs)] // documentation missing in model
    Deleted,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Isolated,
    #[allow(missing_docs)] // documentation missing in model
    PendingCreation,
    #[allow(missing_docs)] // documentation missing in model
    PendingDeletion,
    #[allow(missing_docs)] // documentation missing in model
    PendingIsolation,
    #[allow(missing_docs)] // documentation missing in model
    PendingRequest,
    #[allow(missing_docs)] // documentation missing in model
    PendingRestoration,
    #[allow(missing_docs)] // documentation missing in model
    PendingUpdate,
    #[allow(missing_docs)] // documentation missing in model
    Rejected,
    #[allow(missing_docs)] // documentation missing in model
    Requested,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for LinkStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACCEPTED" => LinkStatus::Accepted,
            "ACTIVE" => LinkStatus::Active,
            "DELETED" => LinkStatus::Deleted,
            "FAILED" => LinkStatus::Failed,
            "ISOLATED" => LinkStatus::Isolated,
            "PENDING_CREATION" => LinkStatus::PendingCreation,
            "PENDING_DELETION" => LinkStatus::PendingDeletion,
            "PENDING_ISOLATION" => LinkStatus::PendingIsolation,
            "PENDING_REQUEST" => LinkStatus::PendingRequest,
            "PENDING_RESTORATION" => LinkStatus::PendingRestoration,
            "PENDING_UPDATE" => LinkStatus::PendingUpdate,
            "REJECTED" => LinkStatus::Rejected,
            "REQUESTED" => LinkStatus::Requested,
            other => LinkStatus::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for LinkStatus {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(LinkStatus::from(s))
    }
}
impl LinkStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LinkStatus::Accepted => "ACCEPTED",
            LinkStatus::Active => "ACTIVE",
            LinkStatus::Deleted => "DELETED",
            LinkStatus::Failed => "FAILED",
            LinkStatus::Isolated => "ISOLATED",
            LinkStatus::PendingCreation => "PENDING_CREATION",
            LinkStatus::PendingDeletion => "PENDING_DELETION",
            LinkStatus::PendingIsolation => "PENDING_ISOLATION",
            LinkStatus::PendingRequest => "PENDING_REQUEST",
            LinkStatus::PendingRestoration => "PENDING_RESTORATION",
            LinkStatus::PendingUpdate => "PENDING_UPDATE",
            LinkStatus::Rejected => "REJECTED",
            LinkStatus::Requested => "REQUESTED",
            LinkStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCEPTED",
            "ACTIVE",
            "DELETED",
            "FAILED",
            "ISOLATED",
            "PENDING_CREATION",
            "PENDING_DELETION",
            "PENDING_ISOLATION",
            "PENDING_REQUEST",
            "PENDING_RESTORATION",
            "PENDING_UPDATE",
            "REJECTED",
            "REQUESTED",
        ]
    }
}
impl ::std::convert::AsRef<str> for LinkStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl LinkStatus {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for LinkStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            LinkStatus::Accepted => write!(f, "ACCEPTED"),
            LinkStatus::Active => write!(f, "ACTIVE"),
            LinkStatus::Deleted => write!(f, "DELETED"),
            LinkStatus::Failed => write!(f, "FAILED"),
            LinkStatus::Isolated => write!(f, "ISOLATED"),
            LinkStatus::PendingCreation => write!(f, "PENDING_CREATION"),
            LinkStatus::PendingDeletion => write!(f, "PENDING_DELETION"),
            LinkStatus::PendingIsolation => write!(f, "PENDING_ISOLATION"),
            LinkStatus::PendingRequest => write!(f, "PENDING_REQUEST"),
            LinkStatus::PendingRestoration => write!(f, "PENDING_RESTORATION"),
            LinkStatus::PendingUpdate => write!(f, "PENDING_UPDATE"),
            LinkStatus::Rejected => write!(f, "REJECTED"),
            LinkStatus::Requested => write!(f, "REQUESTED"),
            LinkStatus::Unknown(value) => write!(f, "{value}"),
        }
    }
}
