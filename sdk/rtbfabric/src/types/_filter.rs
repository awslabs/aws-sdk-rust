// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Filter {
    /// <p>Describes the criteria for a filter.</p>
    pub criteria: ::std::vec::Vec<crate::types::FilterCriterion>,
}
impl Filter {
    /// <p>Describes the criteria for a filter.</p>
    pub fn criteria(&self) -> &[crate::types::FilterCriterion] {
        use std::ops::Deref;
        self.criteria.deref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FilterBuilder {
    pub(crate) criteria: ::std::option::Option<::std::vec::Vec<crate::types::FilterCriterion>>,
}
impl FilterBuilder {
    /// Appends an item to `criteria`.
    ///
    /// To override the contents of this collection use [`set_criteria`](Self::set_criteria).
    ///
    /// <p>Describes the criteria for a filter.</p>
    pub fn criteria(mut self, input: crate::types::FilterCriterion) -> Self {
        let mut v = self.criteria.unwrap_or_default();
        v.push(input);
        self.criteria = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the criteria for a filter.</p>
    pub fn set_criteria(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterCriterion>>) -> Self {
        self.criteria = input;
        self
    }
    /// <p>Describes the criteria for a filter.</p>
    pub fn get_criteria(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterCriterion>> {
        &self.criteria
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    /// This method will fail if any of the following fields are not set:
    /// - [`criteria`](crate::types::builders::FilterBuilder::criteria)
    pub fn build(self) -> ::std::result::Result<crate::types::Filter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Filter {
            criteria: self.criteria.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "criteria",
                    "criteria was not specified but it is required when building Filter",
                )
            })?,
        })
    }
}
