// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a module.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModuleConfiguration {
    /// <p>The version of the module.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The name of the module.</p>
    pub name: ::std::string::String,
    /// <p>The dependencies of the module.</p>
    pub depends_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Describes the parameters of a module.</p>
    pub module_parameters: ::std::option::Option<crate::types::ModuleParameters>,
}
impl ModuleConfiguration {
    /// <p>The version of the module.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The name of the module.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The dependencies of the module.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.depends_on.is_none()`.
    pub fn depends_on(&self) -> &[::std::string::String] {
        self.depends_on.as_deref().unwrap_or_default()
    }
    /// <p>Describes the parameters of a module.</p>
    pub fn module_parameters(&self) -> ::std::option::Option<&crate::types::ModuleParameters> {
        self.module_parameters.as_ref()
    }
}
impl ModuleConfiguration {
    /// Creates a new builder-style object to manufacture [`ModuleConfiguration`](crate::types::ModuleConfiguration).
    pub fn builder() -> crate::types::builders::ModuleConfigurationBuilder {
        crate::types::builders::ModuleConfigurationBuilder::default()
    }
}

/// A builder for [`ModuleConfiguration`](crate::types::ModuleConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ModuleConfigurationBuilder {
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) depends_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) module_parameters: ::std::option::Option<crate::types::ModuleParameters>,
}
impl ModuleConfigurationBuilder {
    /// <p>The version of the module.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the module.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the module.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The name of the module.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the module.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the module.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `depends_on`.
    ///
    /// To override the contents of this collection use [`set_depends_on`](Self::set_depends_on).
    ///
    /// <p>The dependencies of the module.</p>
    pub fn depends_on(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.depends_on.unwrap_or_default();
        v.push(input.into());
        self.depends_on = ::std::option::Option::Some(v);
        self
    }
    /// <p>The dependencies of the module.</p>
    pub fn set_depends_on(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.depends_on = input;
        self
    }
    /// <p>The dependencies of the module.</p>
    pub fn get_depends_on(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.depends_on
    }
    /// <p>Describes the parameters of a module.</p>
    pub fn module_parameters(mut self, input: crate::types::ModuleParameters) -> Self {
        self.module_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the parameters of a module.</p>
    pub fn set_module_parameters(mut self, input: ::std::option::Option<crate::types::ModuleParameters>) -> Self {
        self.module_parameters = input;
        self
    }
    /// <p>Describes the parameters of a module.</p>
    pub fn get_module_parameters(&self) -> &::std::option::Option<crate::types::ModuleParameters> {
        &self.module_parameters
    }
    /// Consumes the builder and constructs a [`ModuleConfiguration`](crate::types::ModuleConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ModuleConfigurationBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ModuleConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ModuleConfiguration {
            version: self.version,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ModuleConfiguration",
                )
            })?,
            depends_on: self.depends_on,
            module_parameters: self.module_parameters,
        })
    }
}
