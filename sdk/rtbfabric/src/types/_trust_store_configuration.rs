// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration of a trust store.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TrustStoreConfiguration {
    /// <p>The certificate authority certificate.</p>
    pub certificate_authority_certificates: ::std::vec::Vec<::std::string::String>,
}
impl TrustStoreConfiguration {
    /// <p>The certificate authority certificate.</p>
    pub fn certificate_authority_certificates(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.certificate_authority_certificates.deref()
    }
}
impl TrustStoreConfiguration {
    /// Creates a new builder-style object to manufacture [`TrustStoreConfiguration`](crate::types::TrustStoreConfiguration).
    pub fn builder() -> crate::types::builders::TrustStoreConfigurationBuilder {
        crate::types::builders::TrustStoreConfigurationBuilder::default()
    }
}

/// A builder for [`TrustStoreConfiguration`](crate::types::TrustStoreConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TrustStoreConfigurationBuilder {
    pub(crate) certificate_authority_certificates: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TrustStoreConfigurationBuilder {
    /// Appends an item to `certificate_authority_certificates`.
    ///
    /// To override the contents of this collection use [`set_certificate_authority_certificates`](Self::set_certificate_authority_certificates).
    ///
    /// <p>The certificate authority certificate.</p>
    pub fn certificate_authority_certificates(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.certificate_authority_certificates.unwrap_or_default();
        v.push(input.into());
        self.certificate_authority_certificates = ::std::option::Option::Some(v);
        self
    }
    /// <p>The certificate authority certificate.</p>
    pub fn set_certificate_authority_certificates(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.certificate_authority_certificates = input;
        self
    }
    /// <p>The certificate authority certificate.</p>
    pub fn get_certificate_authority_certificates(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.certificate_authority_certificates
    }
    /// Consumes the builder and constructs a [`TrustStoreConfiguration`](crate::types::TrustStoreConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`certificate_authority_certificates`](crate::types::builders::TrustStoreConfigurationBuilder::certificate_authority_certificates)
    pub fn build(self) -> ::std::result::Result<crate::types::TrustStoreConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TrustStoreConfiguration {
            certificate_authority_certificates: self.certificate_authority_certificates.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_authority_certificates",
                    "certificate_authority_certificates was not specified but it is required when building TrustStoreConfiguration",
                )
            })?,
        })
    }
}
