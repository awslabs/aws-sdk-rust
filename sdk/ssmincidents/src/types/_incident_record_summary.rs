// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details describing an incident record.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IncidentRecordSummary {
    /// <p>The Amazon Resource Name (ARN) of the incident.</p>
    pub arn: ::std::string::String,
    /// <p>The title of the incident. This value is either provided by the response plan or overwritten on creation.</p>
    pub title: ::std::string::String,
    /// <p>The current status of the incident.</p>
    pub status: crate::types::IncidentRecordStatus,
    /// <p>Defines the impact to customers and applications.</p>
    pub impact: i32,
    /// <p>The time the incident was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The time the incident was resolved.</p>
    pub resolved_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>What caused Incident Manager to create the incident.</p>
    pub incident_record_source: ::std::option::Option<crate::types::IncidentRecordSource>,
}
impl IncidentRecordSummary {
    /// <p>The Amazon Resource Name (ARN) of the incident.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The title of the incident. This value is either provided by the response plan or overwritten on creation.</p>
    pub fn title(&self) -> &str {
        use std::ops::Deref;
        self.title.deref()
    }
    /// <p>The current status of the incident.</p>
    pub fn status(&self) -> &crate::types::IncidentRecordStatus {
        &self.status
    }
    /// <p>Defines the impact to customers and applications.</p>
    pub fn impact(&self) -> i32 {
        self.impact
    }
    /// <p>The time the incident was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The time the incident was resolved.</p>
    pub fn resolved_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.resolved_time.as_ref()
    }
    /// <p>What caused Incident Manager to create the incident.</p>
    pub fn incident_record_source(&self) -> ::std::option::Option<&crate::types::IncidentRecordSource> {
        self.incident_record_source.as_ref()
    }
}
impl IncidentRecordSummary {
    /// Creates a new builder-style object to manufacture [`IncidentRecordSummary`](crate::types::IncidentRecordSummary).
    pub fn builder() -> crate::types::builders::IncidentRecordSummaryBuilder {
        crate::types::builders::IncidentRecordSummaryBuilder::default()
    }
}

/// A builder for [`IncidentRecordSummary`](crate::types::IncidentRecordSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IncidentRecordSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::IncidentRecordStatus>,
    pub(crate) impact: ::std::option::Option<i32>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resolved_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) incident_record_source: ::std::option::Option<crate::types::IncidentRecordSource>,
}
impl IncidentRecordSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the incident.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The title of the incident. This value is either provided by the response plan or overwritten on creation.</p>
    /// This field is required.
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The title of the incident. This value is either provided by the response plan or overwritten on creation.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The title of the incident. This value is either provided by the response plan or overwritten on creation.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>The current status of the incident.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::IncidentRecordStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the incident.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IncidentRecordStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the incident.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IncidentRecordStatus> {
        &self.status
    }
    /// <p>Defines the impact to customers and applications.</p>
    /// This field is required.
    pub fn impact(mut self, input: i32) -> Self {
        self.impact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the impact to customers and applications.</p>
    pub fn set_impact(mut self, input: ::std::option::Option<i32>) -> Self {
        self.impact = input;
        self
    }
    /// <p>Defines the impact to customers and applications.</p>
    pub fn get_impact(&self) -> &::std::option::Option<i32> {
        &self.impact
    }
    /// <p>The time the incident was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the incident was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the incident was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time the incident was resolved.</p>
    pub fn resolved_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.resolved_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the incident was resolved.</p>
    pub fn set_resolved_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.resolved_time = input;
        self
    }
    /// <p>The time the incident was resolved.</p>
    pub fn get_resolved_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.resolved_time
    }
    /// <p>What caused Incident Manager to create the incident.</p>
    /// This field is required.
    pub fn incident_record_source(mut self, input: crate::types::IncidentRecordSource) -> Self {
        self.incident_record_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>What caused Incident Manager to create the incident.</p>
    pub fn set_incident_record_source(mut self, input: ::std::option::Option<crate::types::IncidentRecordSource>) -> Self {
        self.incident_record_source = input;
        self
    }
    /// <p>What caused Incident Manager to create the incident.</p>
    pub fn get_incident_record_source(&self) -> &::std::option::Option<crate::types::IncidentRecordSource> {
        &self.incident_record_source
    }
    /// Consumes the builder and constructs a [`IncidentRecordSummary`](crate::types::IncidentRecordSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::IncidentRecordSummaryBuilder::arn)
    /// - [`title`](crate::types::builders::IncidentRecordSummaryBuilder::title)
    /// - [`status`](crate::types::builders::IncidentRecordSummaryBuilder::status)
    /// - [`impact`](crate::types::builders::IncidentRecordSummaryBuilder::impact)
    /// - [`creation_time`](crate::types::builders::IncidentRecordSummaryBuilder::creation_time)
    pub fn build(self) -> ::std::result::Result<crate::types::IncidentRecordSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IncidentRecordSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building IncidentRecordSummary",
                )
            })?,
            title: self.title.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "title",
                    "title was not specified but it is required when building IncidentRecordSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building IncidentRecordSummary",
                )
            })?,
            impact: self.impact.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "impact",
                    "impact was not specified but it is required when building IncidentRecordSummary",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building IncidentRecordSummary",
                )
            })?,
            resolved_time: self.resolved_time,
            incident_record_source: self.incident_record_source,
        })
    }
}
