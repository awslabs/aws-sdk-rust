// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter the selection by using a condition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Filter {
    /// <p>The key that you're filtering on.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The condition accepts before or after a specified time, equal to a string, or equal to an integer.</p>
    #[doc(hidden)]
    pub condition: std::option::Option<crate::types::Condition>,
}
impl Filter {
    /// <p>The key that you're filtering on.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The condition accepts before or after a specified time, equal to a string, or equal to an integer.</p>
    pub fn condition(&self) -> std::option::Option<&crate::types::Condition> {
        self.condition.as_ref()
    }
}
impl Filter {
    /// Creates a new builder-style object to manufacture [`Filter`](crate::types::Filter).
    pub fn builder() -> crate::types::builders::FilterBuilder {
        crate::types::builders::FilterBuilder::default()
    }
}

/// A builder for [`Filter`](crate::types::Filter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FilterBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) condition: std::option::Option<crate::types::Condition>,
}
impl FilterBuilder {
    /// <p>The key that you're filtering on.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The key that you're filtering on.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The condition accepts before or after a specified time, equal to a string, or equal to an integer.</p>
    pub fn condition(mut self, input: crate::types::Condition) -> Self {
        self.condition = Some(input);
        self
    }
    /// <p>The condition accepts before or after a specified time, equal to a string, or equal to an integer.</p>
    pub fn set_condition(mut self, input: std::option::Option<crate::types::Condition>) -> Self {
        self.condition = input;
        self
    }
    /// Consumes the builder and constructs a [`Filter`](crate::types::Filter).
    pub fn build(self) -> crate::types::Filter {
        crate::types::Filter {
            key: self.key,
            condition: self.condition,
        }
    }
}
