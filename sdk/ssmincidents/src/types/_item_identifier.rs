// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details and type of a related item.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ItemIdentifier {
    /// <p>Details about the related item.</p>
    #[doc(hidden)]
    pub value: std::option::Option<crate::types::ItemValue>,
    /// <p>The type of related item. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ItemType>,
}
impl ItemIdentifier {
    /// <p>Details about the related item.</p>
    pub fn value(&self) -> std::option::Option<&crate::types::ItemValue> {
        self.value.as_ref()
    }
    /// <p>The type of related item. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ItemType> {
        self.r#type.as_ref()
    }
}
impl ItemIdentifier {
    /// Creates a new builder-style object to manufacture [`ItemIdentifier`](crate::types::ItemIdentifier).
    pub fn builder() -> crate::types::builders::ItemIdentifierBuilder {
        crate::types::builders::ItemIdentifierBuilder::default()
    }
}

/// A builder for [`ItemIdentifier`](crate::types::ItemIdentifier).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ItemIdentifierBuilder {
    pub(crate) value: std::option::Option<crate::types::ItemValue>,
    pub(crate) r#type: std::option::Option<crate::types::ItemType>,
}
impl ItemIdentifierBuilder {
    /// <p>Details about the related item.</p>
    pub fn value(mut self, input: crate::types::ItemValue) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>Details about the related item.</p>
    pub fn set_value(mut self, input: std::option::Option<crate::types::ItemValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The type of related item. </p>
    pub fn r#type(mut self, input: crate::types::ItemType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of related item. </p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ItemType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`ItemIdentifier`](crate::types::ItemIdentifier).
    pub fn build(self) -> crate::types::ItemIdentifier {
        crate::types::ItemIdentifier {
            value: self.value,
            r#type: self.r#type,
        }
    }
}
