// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details used when updating the replication set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum UpdateReplicationSetAction {
    /// <p>Details about the Amazon Web Services Region that you're adding to the replication set.</p>
    AddRegionAction(crate::types::AddRegionAction),
    /// <p>Details about the Amazon Web Services Region that you're deleting to the replication set.</p>
    DeleteRegionAction(crate::types::DeleteRegionAction),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl UpdateReplicationSetAction {
    /// Tries to convert the enum instance into [`AddRegionAction`](crate::types::UpdateReplicationSetAction::AddRegionAction), extracting the inner [`AddRegionAction`](crate::types::AddRegionAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_add_region_action(
        &self,
    ) -> std::result::Result<&crate::types::AddRegionAction, &Self> {
        if let UpdateReplicationSetAction::AddRegionAction(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AddRegionAction`](crate::types::UpdateReplicationSetAction::AddRegionAction).
    pub fn is_add_region_action(&self) -> bool {
        self.as_add_region_action().is_ok()
    }
    /// Tries to convert the enum instance into [`DeleteRegionAction`](crate::types::UpdateReplicationSetAction::DeleteRegionAction), extracting the inner [`DeleteRegionAction`](crate::types::DeleteRegionAction).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_delete_region_action(
        &self,
    ) -> std::result::Result<&crate::types::DeleteRegionAction, &Self> {
        if let UpdateReplicationSetAction::DeleteRegionAction(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`DeleteRegionAction`](crate::types::UpdateReplicationSetAction::DeleteRegionAction).
    pub fn is_delete_region_action(&self) -> bool {
        self.as_delete_region_action().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
