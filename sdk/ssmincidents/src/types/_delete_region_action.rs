// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the information about the Amazon Web Services Region you're deleting from your replication set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRegionAction {
    /// <p>The name of the Amazon Web Services Region you're deleting from the replication set.</p>
    #[doc(hidden)]
    pub region_name: std::option::Option<std::string::String>,
}
impl DeleteRegionAction {
    /// <p>The name of the Amazon Web Services Region you're deleting from the replication set.</p>
    pub fn region_name(&self) -> std::option::Option<&str> {
        self.region_name.as_deref()
    }
}
impl DeleteRegionAction {
    /// Creates a new builder-style object to manufacture [`DeleteRegionAction`](crate::types::DeleteRegionAction).
    pub fn builder() -> crate::types::builders::DeleteRegionActionBuilder {
        crate::types::builders::DeleteRegionActionBuilder::default()
    }
}

/// A builder for [`DeleteRegionAction`](crate::types::DeleteRegionAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteRegionActionBuilder {
    pub(crate) region_name: std::option::Option<std::string::String>,
}
impl DeleteRegionActionBuilder {
    /// <p>The name of the Amazon Web Services Region you're deleting from the replication set.</p>
    pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.region_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services Region you're deleting from the replication set.</p>
    pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteRegionAction`](crate::types::DeleteRegionAction).
    pub fn build(self) -> crate::types::DeleteRegionAction {
        crate::types::DeleteRegionAction {
            region_name: self.region_name,
        }
    }
}
