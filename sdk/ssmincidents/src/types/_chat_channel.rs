// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Chatbot chat channel used for collaboration during an incident.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ChatChannel {
    /// <p>The Amazon SNS targets that Chatbot uses to notify the chat channel of updates to an incident. You can also make updates to the incident through the chat channel by using the Amazon SNS topics. </p>
    ChatbotSns(std::vec::Vec<std::string::String>),
    /// <p>Used to remove the chat channel from an incident record or response plan.</p>
    Empty(crate::types::EmptyChatChannel),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ChatChannel {
    /// Tries to convert the enum instance into [`ChatbotSns`](crate::types::ChatChannel::ChatbotSns), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_chatbot_sns(
        &self,
    ) -> std::result::Result<&std::vec::Vec<std::string::String>, &Self> {
        if let ChatChannel::ChatbotSns(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`ChatbotSns`](crate::types::ChatChannel::ChatbotSns).
    pub fn is_chatbot_sns(&self) -> bool {
        self.as_chatbot_sns().is_ok()
    }
    /// Tries to convert the enum instance into [`Empty`](crate::types::ChatChannel::Empty), extracting the inner [`EmptyChatChannel`](crate::types::EmptyChatChannel).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_empty(&self) -> std::result::Result<&crate::types::EmptyChatChannel, &Self> {
        if let ChatChannel::Empty(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Empty`](crate::types::ChatChannel::Empty).
    pub fn is_empty(&self) -> bool {
        self.as_empty().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
