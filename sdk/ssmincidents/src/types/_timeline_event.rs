// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A significant event that happened during the incident. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimelineEvent {
    /// <p>The Amazon Resource Name (ARN) of the incident that the event occurred during.</p>
    #[doc(hidden)]
    pub incident_record_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the timeline event.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The time that the event occurred.</p>
    #[doc(hidden)]
    pub event_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the timeline event was last updated.</p>
    #[doc(hidden)]
    pub event_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of event that occurred. Currently Incident Manager supports only the <code>Custom Event</code> type.</p>
    #[doc(hidden)]
    pub event_type: std::option::Option<std::string::String>,
    /// <p>A short description of the event.</p>
    #[doc(hidden)]
    pub event_data: std::option::Option<std::string::String>,
    /// <p>A list of references in a <code>TimelineEvent</code>.</p>
    #[doc(hidden)]
    pub event_references: std::option::Option<std::vec::Vec<crate::types::EventReference>>,
}
impl TimelineEvent {
    /// <p>The Amazon Resource Name (ARN) of the incident that the event occurred during.</p>
    pub fn incident_record_arn(&self) -> std::option::Option<&str> {
        self.incident_record_arn.as_deref()
    }
    /// <p>The ID of the timeline event.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The time that the event occurred.</p>
    pub fn event_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>The time that the timeline event was last updated.</p>
    pub fn event_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.event_updated_time.as_ref()
    }
    /// <p>The type of event that occurred. Currently Incident Manager supports only the <code>Custom Event</code> type.</p>
    pub fn event_type(&self) -> std::option::Option<&str> {
        self.event_type.as_deref()
    }
    /// <p>A short description of the event.</p>
    pub fn event_data(&self) -> std::option::Option<&str> {
        self.event_data.as_deref()
    }
    /// <p>A list of references in a <code>TimelineEvent</code>.</p>
    pub fn event_references(&self) -> std::option::Option<&[crate::types::EventReference]> {
        self.event_references.as_deref()
    }
}
impl TimelineEvent {
    /// Creates a new builder-style object to manufacture [`TimelineEvent`](crate::types::TimelineEvent).
    pub fn builder() -> crate::types::builders::TimelineEventBuilder {
        crate::types::builders::TimelineEventBuilder::default()
    }
}

/// A builder for [`TimelineEvent`](crate::types::TimelineEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimelineEventBuilder {
    pub(crate) incident_record_arn: std::option::Option<std::string::String>,
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) event_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) event_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) event_type: std::option::Option<std::string::String>,
    pub(crate) event_data: std::option::Option<std::string::String>,
    pub(crate) event_references: std::option::Option<std::vec::Vec<crate::types::EventReference>>,
}
impl TimelineEventBuilder {
    /// <p>The Amazon Resource Name (ARN) of the incident that the event occurred during.</p>
    pub fn incident_record_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.incident_record_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident that the event occurred during.</p>
    pub fn set_incident_record_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.incident_record_arn = input;
        self
    }
    /// <p>The ID of the timeline event.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>The ID of the timeline event.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The time that the event occurred.</p>
    pub fn event_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.event_time = Some(input);
        self
    }
    /// <p>The time that the event occurred.</p>
    pub fn set_event_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The time that the timeline event was last updated.</p>
    pub fn event_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.event_updated_time = Some(input);
        self
    }
    /// <p>The time that the timeline event was last updated.</p>
    pub fn set_event_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.event_updated_time = input;
        self
    }
    /// <p>The type of event that occurred. Currently Incident Manager supports only the <code>Custom Event</code> type.</p>
    pub fn event_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_type = Some(input.into());
        self
    }
    /// <p>The type of event that occurred. Currently Incident Manager supports only the <code>Custom Event</code> type.</p>
    pub fn set_event_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>A short description of the event.</p>
    pub fn event_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_data = Some(input.into());
        self
    }
    /// <p>A short description of the event.</p>
    pub fn set_event_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_data = input;
        self
    }
    /// Appends an item to `event_references`.
    ///
    /// To override the contents of this collection use [`set_event_references`](Self::set_event_references).
    ///
    /// <p>A list of references in a <code>TimelineEvent</code>.</p>
    pub fn event_references(mut self, input: crate::types::EventReference) -> Self {
        let mut v = self.event_references.unwrap_or_default();
        v.push(input);
        self.event_references = Some(v);
        self
    }
    /// <p>A list of references in a <code>TimelineEvent</code>.</p>
    pub fn set_event_references(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EventReference>>,
    ) -> Self {
        self.event_references = input;
        self
    }
    /// Consumes the builder and constructs a [`TimelineEvent`](crate::types::TimelineEvent).
    pub fn build(self) -> crate::types::TimelineEvent {
        crate::types::TimelineEvent {
            incident_record_arn: self.incident_record_arn,
            event_id: self.event_id,
            event_time: self.event_time,
            event_updated_time: self.event_updated_time,
            event_type: self.event_type,
            event_data: self.event_data,
            event_references: self.event_references,
        }
    }
}
