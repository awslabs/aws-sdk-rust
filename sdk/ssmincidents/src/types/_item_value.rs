// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a related item.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ItemValue {
    /// <p>The Amazon Resource Name (ARN) of the related item, if the related item is an Amazon resource.</p>
    Arn(std::string::String),
    /// <p>The metric definition, if the related item is a metric in Amazon CloudWatch.</p>
    MetricDefinition(std::string::String),
    /// <p>Details about an incident that is associated with a PagerDuty incident.</p>
    PagerDutyIncidentDetail(crate::types::PagerDutyIncidentDetail),
    /// <p>The URL, if the related item is a non-Amazon Web Services resource.</p>
    Url(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ItemValue {
    /// Tries to convert the enum instance into [`Arn`](crate::types::ItemValue::Arn), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_arn(&self) -> std::result::Result<&std::string::String, &Self> {
        if let ItemValue::Arn(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Arn`](crate::types::ItemValue::Arn).
    pub fn is_arn(&self) -> bool {
        self.as_arn().is_ok()
    }
    /// Tries to convert the enum instance into [`MetricDefinition`](crate::types::ItemValue::MetricDefinition), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_metric_definition(&self) -> std::result::Result<&std::string::String, &Self> {
        if let ItemValue::MetricDefinition(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`MetricDefinition`](crate::types::ItemValue::MetricDefinition).
    pub fn is_metric_definition(&self) -> bool {
        self.as_metric_definition().is_ok()
    }
    /// Tries to convert the enum instance into [`PagerDutyIncidentDetail`](crate::types::ItemValue::PagerDutyIncidentDetail), extracting the inner [`PagerDutyIncidentDetail`](crate::types::PagerDutyIncidentDetail).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_pager_duty_incident_detail(
        &self,
    ) -> std::result::Result<&crate::types::PagerDutyIncidentDetail, &Self> {
        if let ItemValue::PagerDutyIncidentDetail(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`PagerDutyIncidentDetail`](crate::types::ItemValue::PagerDutyIncidentDetail).
    pub fn is_pager_duty_incident_detail(&self) -> bool {
        self.as_pager_duty_incident_detail().is_ok()
    }
    /// Tries to convert the enum instance into [`Url`](crate::types::ItemValue::Url), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_url(&self) -> std::result::Result<&std::string::String, &Self> {
        if let ItemValue::Url(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Url`](crate::types::ItemValue::Url).
    pub fn is_url(&self) -> bool {
        self.as_url().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
