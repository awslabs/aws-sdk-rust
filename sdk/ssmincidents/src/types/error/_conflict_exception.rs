// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updating or deleting a resource causes an inconsistent state.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConflictException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// The identifier of the requested resource
    #[doc(hidden)]
    pub resource_identifier: std::option::Option<std::string::String>,
    /// The resource type
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// If present in the output, the operation can be retried after this time
    #[doc(hidden)]
    pub retry_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl ConflictException {
    /// The identifier of the requested resource
    pub fn resource_identifier(&self) -> std::option::Option<&str> {
        self.resource_identifier.as_deref()
    }
    /// The resource type
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// If present in the output, the operation can be retried after this time
    pub fn retry_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.retry_after.as_ref()
    }
}
impl ConflictException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConflictException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConflictException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for ConflictException {}
impl aws_http::request_id::RequestId for crate::types::error::ConflictException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for ConflictException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl ConflictException {
    /// Creates a new builder-style object to manufacture [`ConflictException`](crate::types::error::ConflictException).
    pub fn builder() -> crate::types::error::builders::ConflictExceptionBuilder {
        crate::types::error::builders::ConflictExceptionBuilder::default()
    }
}

/// A builder for [`ConflictException`](crate::types::error::ConflictException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConflictExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) resource_identifier: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) retry_after: std::option::Option<aws_smithy_types::DateTime>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl ConflictExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// The identifier of the requested resource
    pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_identifier = Some(input.into());
        self
    }
    /// The identifier of the requested resource
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_identifier = input;
        self
    }
    /// The resource type
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// The resource type
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// If present in the output, the operation can be retried after this time
    pub fn retry_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.retry_after = Some(input);
        self
    }
    /// If present in the output, the operation can be retried after this time
    pub fn set_retry_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.retry_after = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`ConflictException`](crate::types::error::ConflictException).
    pub fn build(self) -> crate::types::error::ConflictException {
        crate::types::error::ConflictException {
            message: self.message,
            resource_identifier: self.resource_identifier,
            resource_type: self.resource_type,
            retry_after: self.retry_after,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
