// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the PagerDuty incident associated with an incident created by an Incident Manager response plan.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PagerDutyIncidentDetail {
    /// <p>The ID of the incident associated with the PagerDuty service for the response plan.</p>
    pub id: ::std::string::String,
    /// <p>Indicates whether to resolve the PagerDuty incident when you resolve the associated Incident Manager incident.</p>
    pub auto_resolve: ::std::option::Option<bool>,
    /// <p>The ID of the Amazon Web Services Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.</p>
    pub secret_id: ::std::option::Option<::std::string::String>,
}
impl PagerDutyIncidentDetail {
    /// <p>The ID of the incident associated with the PagerDuty service for the response plan.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Indicates whether to resolve the PagerDuty incident when you resolve the associated Incident Manager incident.</p>
    pub fn auto_resolve(&self) -> ::std::option::Option<bool> {
        self.auto_resolve
    }
    /// <p>The ID of the Amazon Web Services Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.</p>
    pub fn secret_id(&self) -> ::std::option::Option<&str> {
        self.secret_id.as_deref()
    }
}
impl PagerDutyIncidentDetail {
    /// Creates a new builder-style object to manufacture [`PagerDutyIncidentDetail`](crate::types::PagerDutyIncidentDetail).
    pub fn builder() -> crate::types::builders::PagerDutyIncidentDetailBuilder {
        crate::types::builders::PagerDutyIncidentDetailBuilder::default()
    }
}

/// A builder for [`PagerDutyIncidentDetail`](crate::types::PagerDutyIncidentDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PagerDutyIncidentDetailBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) auto_resolve: ::std::option::Option<bool>,
    pub(crate) secret_id: ::std::option::Option<::std::string::String>,
}
impl PagerDutyIncidentDetailBuilder {
    /// <p>The ID of the incident associated with the PagerDuty service for the response plan.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the incident associated with the PagerDuty service for the response plan.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the incident associated with the PagerDuty service for the response plan.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Indicates whether to resolve the PagerDuty incident when you resolve the associated Incident Manager incident.</p>
    pub fn auto_resolve(mut self, input: bool) -> Self {
        self.auto_resolve = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to resolve the PagerDuty incident when you resolve the associated Incident Manager incident.</p>
    pub fn set_auto_resolve(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_resolve = input;
        self
    }
    /// <p>Indicates whether to resolve the PagerDuty incident when you resolve the associated Incident Manager incident.</p>
    pub fn get_auto_resolve(&self) -> &::std::option::Option<bool> {
        &self.auto_resolve
    }
    /// <p>The ID of the Amazon Web Services Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.</p>
    pub fn secret_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.</p>
    pub fn set_secret_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services Secrets Manager secret that stores your PagerDuty key, either a General Access REST API Key or User Token REST API Key, and other user credentials.</p>
    pub fn get_secret_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_id
    }
    /// Consumes the builder and constructs a [`PagerDutyIncidentDetail`](crate::types::PagerDutyIncidentDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::PagerDutyIncidentDetailBuilder::id)
    pub fn build(self) -> ::std::result::Result<crate::types::PagerDutyIncidentDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PagerDutyIncidentDetail {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building PagerDutyIncidentDetail",
                )
            })?,
            auto_resolve: self.auto_resolve,
            secret_id: self.secret_id,
        })
    }
}
