// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>A replication set replicates and encrypts your data to the provided Regions with the
/// provided KMS key. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationSet {
    _private: (),
}
impl CreateReplicationSet {
    /// Creates a new builder-style object to manufacture [`CreateReplicationSetInput`](crate::input::CreateReplicationSetInput)
    pub fn builder() -> crate::input::create_replication_set_input::Builder {
        crate::input::create_replication_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateReplicationSet {
    type Output = std::result::Result<
        crate::output::CreateReplicationSetOutput,
        crate::error::CreateReplicationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_replication_set_error(response)
        } else {
            crate::operation_deser::parse_create_replication_set_response(response)
        }
    }
}

/// <p>Creates a response plan that automates the initial response to incidents. A response
/// plan engages contacts, starts chat channel collaboration, and
/// initiates
/// runbooks at the beginning of an incident.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateResponsePlan {
    _private: (),
}
impl CreateResponsePlan {
    /// Creates a new builder-style object to manufacture [`CreateResponsePlanInput`](crate::input::CreateResponsePlanInput)
    pub fn builder() -> crate::input::create_response_plan_input::Builder {
        crate::input::create_response_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateResponsePlan {
    type Output = std::result::Result<
        crate::output::CreateResponsePlanOutput,
        crate::error::CreateResponsePlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_response_plan_error(response)
        } else {
            crate::operation_deser::parse_create_response_plan_response(response)
        }
    }
}

/// <p>Creates a custom timeline event on the incident details page of an incident record.
/// Timeline events are automatically created by Incident Manager, marking key moment during an
/// incident. You can create custom timeline events to mark important events that are
/// automatically detected by Incident Manager.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTimelineEvent {
    _private: (),
}
impl CreateTimelineEvent {
    /// Creates a new builder-style object to manufacture [`CreateTimelineEventInput`](crate::input::CreateTimelineEventInput)
    pub fn builder() -> crate::input::create_timeline_event_input::Builder {
        crate::input::create_timeline_event_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTimelineEvent {
    type Output = std::result::Result<
        crate::output::CreateTimelineEventOutput,
        crate::error::CreateTimelineEventError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_timeline_event_error(response)
        } else {
            crate::operation_deser::parse_create_timeline_event_response(response)
        }
    }
}

/// <p>Delete an incident record from Incident Manager. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteIncidentRecord {
    _private: (),
}
impl DeleteIncidentRecord {
    /// Creates a new builder-style object to manufacture [`DeleteIncidentRecordInput`](crate::input::DeleteIncidentRecordInput)
    pub fn builder() -> crate::input::delete_incident_record_input::Builder {
        crate::input::delete_incident_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteIncidentRecord {
    type Output = std::result::Result<
        crate::output::DeleteIncidentRecordOutput,
        crate::error::DeleteIncidentRecordError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_incident_record_error(response)
        } else {
            crate::operation_deser::parse_delete_incident_record_response(response)
        }
    }
}

/// <p>Deletes all Regions in your replication set. Deleting the replication set deletes all
/// Incident Manager data.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReplicationSet {
    _private: (),
}
impl DeleteReplicationSet {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationSetInput`](crate::input::DeleteReplicationSetInput)
    pub fn builder() -> crate::input::delete_replication_set_input::Builder {
        crate::input::delete_replication_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReplicationSet {
    type Output = std::result::Result<
        crate::output::DeleteReplicationSetOutput,
        crate::error::DeleteReplicationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_replication_set_error(response)
        } else {
            crate::operation_deser::parse_delete_replication_set_response(response)
        }
    }
}

/// <p>Deletes the resource policy that
/// AWS
/// Resource Access Manager uses to share your Incident Manager resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteResourcePolicy {
    _private: (),
}
impl DeleteResourcePolicy {
    /// Creates a new builder-style object to manufacture [`DeleteResourcePolicyInput`](crate::input::DeleteResourcePolicyInput)
    pub fn builder() -> crate::input::delete_resource_policy_input::Builder {
        crate::input::delete_resource_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteResourcePolicy {
    type Output = std::result::Result<
        crate::output::DeleteResourcePolicyOutput,
        crate::error::DeleteResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_resource_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_resource_policy_response(response)
        }
    }
}

/// <p>Deletes the specified response plan. Deleting a response plan stops all linked
/// CloudWatch alarms and EventBridge events from creating an incident with this response
/// plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteResponsePlan {
    _private: (),
}
impl DeleteResponsePlan {
    /// Creates a new builder-style object to manufacture [`DeleteResponsePlanInput`](crate::input::DeleteResponsePlanInput)
    pub fn builder() -> crate::input::delete_response_plan_input::Builder {
        crate::input::delete_response_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteResponsePlan {
    type Output = std::result::Result<
        crate::output::DeleteResponsePlanOutput,
        crate::error::DeleteResponsePlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_response_plan_error(response)
        } else {
            crate::operation_deser::parse_delete_response_plan_response(response)
        }
    }
}

/// <p>Deletes a timeline event from an incident.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTimelineEvent {
    _private: (),
}
impl DeleteTimelineEvent {
    /// Creates a new builder-style object to manufacture [`DeleteTimelineEventInput`](crate::input::DeleteTimelineEventInput)
    pub fn builder() -> crate::input::delete_timeline_event_input::Builder {
        crate::input::delete_timeline_event_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTimelineEvent {
    type Output = std::result::Result<
        crate::output::DeleteTimelineEventOutput,
        crate::error::DeleteTimelineEventError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_timeline_event_error(response)
        } else {
            crate::operation_deser::parse_delete_timeline_event_response(response)
        }
    }
}

/// <p>Returns the details of the specified incident record.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIncidentRecord {
    _private: (),
}
impl GetIncidentRecord {
    /// Creates a new builder-style object to manufacture [`GetIncidentRecordInput`](crate::input::GetIncidentRecordInput)
    pub fn builder() -> crate::input::get_incident_record_input::Builder {
        crate::input::get_incident_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetIncidentRecord {
    type Output = std::result::Result<
        crate::output::GetIncidentRecordOutput,
        crate::error::GetIncidentRecordError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_incident_record_error(response)
        } else {
            crate::operation_deser::parse_get_incident_record_response(response)
        }
    }
}

/// <p>Retrieve your Incident Manager replication set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetReplicationSet {
    _private: (),
}
impl GetReplicationSet {
    /// Creates a new builder-style object to manufacture [`GetReplicationSetInput`](crate::input::GetReplicationSetInput)
    pub fn builder() -> crate::input::get_replication_set_input::Builder {
        crate::input::get_replication_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetReplicationSet {
    type Output = std::result::Result<
        crate::output::GetReplicationSetOutput,
        crate::error::GetReplicationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_replication_set_error(response)
        } else {
            crate::operation_deser::parse_get_replication_set_response(response)
        }
    }
}

/// <p>Retrieves the resource policies attached to the specified response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourcePolicies {
    _private: (),
}
impl GetResourcePolicies {
    /// Creates a new builder-style object to manufacture [`GetResourcePoliciesInput`](crate::input::GetResourcePoliciesInput)
    pub fn builder() -> crate::input::get_resource_policies_input::Builder {
        crate::input::get_resource_policies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourcePolicies {
    type Output = std::result::Result<
        crate::output::GetResourcePoliciesOutput,
        crate::error::GetResourcePoliciesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_policies_error(response)
        } else {
            crate::operation_deser::parse_get_resource_policies_response(response)
        }
    }
}

/// <p>Retrieves the details of the specified response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResponsePlan {
    _private: (),
}
impl GetResponsePlan {
    /// Creates a new builder-style object to manufacture [`GetResponsePlanInput`](crate::input::GetResponsePlanInput)
    pub fn builder() -> crate::input::get_response_plan_input::Builder {
        crate::input::get_response_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResponsePlan {
    type Output = std::result::Result<
        crate::output::GetResponsePlanOutput,
        crate::error::GetResponsePlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_response_plan_error(response)
        } else {
            crate::operation_deser::parse_get_response_plan_response(response)
        }
    }
}

/// <p>Retrieves a timeline event based on its ID and incident record.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTimelineEvent {
    _private: (),
}
impl GetTimelineEvent {
    /// Creates a new builder-style object to manufacture [`GetTimelineEventInput`](crate::input::GetTimelineEventInput)
    pub fn builder() -> crate::input::get_timeline_event_input::Builder {
        crate::input::get_timeline_event_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetTimelineEvent {
    type Output = std::result::Result<
        crate::output::GetTimelineEventOutput,
        crate::error::GetTimelineEventError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_timeline_event_error(response)
        } else {
            crate::operation_deser::parse_get_timeline_event_response(response)
        }
    }
}

/// <p>Lists all incident records in your account. Use this command to retrieve the Amazon
/// Resource Name (ARN) of the incident record you want to update. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListIncidentRecords {
    _private: (),
}
impl ListIncidentRecords {
    /// Creates a new builder-style object to manufacture [`ListIncidentRecordsInput`](crate::input::ListIncidentRecordsInput)
    pub fn builder() -> crate::input::list_incident_records_input::Builder {
        crate::input::list_incident_records_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListIncidentRecords {
    type Output = std::result::Result<
        crate::output::ListIncidentRecordsOutput,
        crate::error::ListIncidentRecordsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_incident_records_error(response)
        } else {
            crate::operation_deser::parse_list_incident_records_response(response)
        }
    }
}

/// <p>List all related items for an incident record.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRelatedItems {
    _private: (),
}
impl ListRelatedItems {
    /// Creates a new builder-style object to manufacture [`ListRelatedItemsInput`](crate::input::ListRelatedItemsInput)
    pub fn builder() -> crate::input::list_related_items_input::Builder {
        crate::input::list_related_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRelatedItems {
    type Output = std::result::Result<
        crate::output::ListRelatedItemsOutput,
        crate::error::ListRelatedItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_related_items_error(response)
        } else {
            crate::operation_deser::parse_list_related_items_response(response)
        }
    }
}

/// <p>Lists details about the replication set configured in your account. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListReplicationSets {
    _private: (),
}
impl ListReplicationSets {
    /// Creates a new builder-style object to manufacture [`ListReplicationSetsInput`](crate::input::ListReplicationSetsInput)
    pub fn builder() -> crate::input::list_replication_sets_input::Builder {
        crate::input::list_replication_sets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListReplicationSets {
    type Output = std::result::Result<
        crate::output::ListReplicationSetsOutput,
        crate::error::ListReplicationSetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_replication_sets_error(response)
        } else {
            crate::operation_deser::parse_list_replication_sets_response(response)
        }
    }
}

/// <p>Lists all response plans in your account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListResponsePlans {
    _private: (),
}
impl ListResponsePlans {
    /// Creates a new builder-style object to manufacture [`ListResponsePlansInput`](crate::input::ListResponsePlansInput)
    pub fn builder() -> crate::input::list_response_plans_input::Builder {
        crate::input::list_response_plans_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListResponsePlans {
    type Output = std::result::Result<
        crate::output::ListResponsePlansOutput,
        crate::error::ListResponsePlansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_response_plans_error(response)
        } else {
            crate::operation_deser::parse_list_response_plans_response(response)
        }
    }
}

/// <p>Lists the tags that are attached to the specified response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Lists timeline events of the specified incident record.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTimelineEvents {
    _private: (),
}
impl ListTimelineEvents {
    /// Creates a new builder-style object to manufacture [`ListTimelineEventsInput`](crate::input::ListTimelineEventsInput)
    pub fn builder() -> crate::input::list_timeline_events_input::Builder {
        crate::input::list_timeline_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTimelineEvents {
    type Output = std::result::Result<
        crate::output::ListTimelineEventsOutput,
        crate::error::ListTimelineEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_timeline_events_error(response)
        } else {
            crate::operation_deser::parse_list_timeline_events_response(response)
        }
    }
}

/// <p>Adds a resource policy to the specified response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutResourcePolicy {
    _private: (),
}
impl PutResourcePolicy {
    /// Creates a new builder-style object to manufacture [`PutResourcePolicyInput`](crate::input::PutResourcePolicyInput)
    pub fn builder() -> crate::input::put_resource_policy_input::Builder {
        crate::input::put_resource_policy_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutResourcePolicy {
    type Output = std::result::Result<
        crate::output::PutResourcePolicyOutput,
        crate::error::PutResourcePolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_resource_policy_error(response)
        } else {
            crate::operation_deser::parse_put_resource_policy_response(response)
        }
    }
}

/// <p>Used to start an incident from CloudWatch alarms, EventBridge events, or manually. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartIncident {
    _private: (),
}
impl StartIncident {
    /// Creates a new builder-style object to manufacture [`StartIncidentInput`](crate::input::StartIncidentInput)
    pub fn builder() -> crate::input::start_incident_input::Builder {
        crate::input::start_incident_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartIncident {
    type Output =
        std::result::Result<crate::output::StartIncidentOutput, crate::error::StartIncidentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_incident_error(response)
        } else {
            crate::operation_deser::parse_start_incident_response(response)
        }
    }
}

/// <p>Adds a tag to a response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes a tag from a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Update deletion protection to either allow or deny deletion of the final Region in a
/// replication set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDeletionProtection {
    _private: (),
}
impl UpdateDeletionProtection {
    /// Creates a new builder-style object to manufacture [`UpdateDeletionProtectionInput`](crate::input::UpdateDeletionProtectionInput)
    pub fn builder() -> crate::input::update_deletion_protection_input::Builder {
        crate::input::update_deletion_protection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDeletionProtection {
    type Output = std::result::Result<
        crate::output::UpdateDeletionProtectionOutput,
        crate::error::UpdateDeletionProtectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_deletion_protection_error(response)
        } else {
            crate::operation_deser::parse_update_deletion_protection_response(response)
        }
    }
}

/// <p>Update the details of an incident record. You can use this action to update an
/// incident record from the defined chat channel. For more information about using actions
/// in chat channels, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/chat.html#chat-interact">Interacting through chat</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIncidentRecord {
    _private: (),
}
impl UpdateIncidentRecord {
    /// Creates a new builder-style object to manufacture [`UpdateIncidentRecordInput`](crate::input::UpdateIncidentRecordInput)
    pub fn builder() -> crate::input::update_incident_record_input::Builder {
        crate::input::update_incident_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateIncidentRecord {
    type Output = std::result::Result<
        crate::output::UpdateIncidentRecordOutput,
        crate::error::UpdateIncidentRecordError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_incident_record_error(response)
        } else {
            crate::operation_deser::parse_update_incident_record_response(response)
        }
    }
}

/// <p>Add or remove related items from the related items tab of an incident record.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRelatedItems {
    _private: (),
}
impl UpdateRelatedItems {
    /// Creates a new builder-style object to manufacture [`UpdateRelatedItemsInput`](crate::input::UpdateRelatedItemsInput)
    pub fn builder() -> crate::input::update_related_items_input::Builder {
        crate::input::update_related_items_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRelatedItems {
    type Output = std::result::Result<
        crate::output::UpdateRelatedItemsOutput,
        crate::error::UpdateRelatedItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_related_items_error(response)
        } else {
            crate::operation_deser::parse_update_related_items_response(response)
        }
    }
}

/// <p>Add or delete Regions from your replication set.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateReplicationSet {
    _private: (),
}
impl UpdateReplicationSet {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationSetInput`](crate::input::UpdateReplicationSetInput)
    pub fn builder() -> crate::input::update_replication_set_input::Builder {
        crate::input::update_replication_set_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateReplicationSet {
    type Output = std::result::Result<
        crate::output::UpdateReplicationSetOutput,
        crate::error::UpdateReplicationSetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_replication_set_error(response)
        } else {
            crate::operation_deser::parse_update_replication_set_response(response)
        }
    }
}

/// <p>Updates the specified response plan.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResponsePlan {
    _private: (),
}
impl UpdateResponsePlan {
    /// Creates a new builder-style object to manufacture [`UpdateResponsePlanInput`](crate::input::UpdateResponsePlanInput)
    pub fn builder() -> crate::input::update_response_plan_input::Builder {
        crate::input::update_response_plan_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateResponsePlan {
    type Output = std::result::Result<
        crate::output::UpdateResponsePlanOutput,
        crate::error::UpdateResponsePlanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_response_plan_error(response)
        } else {
            crate::operation_deser::parse_update_response_plan_response(response)
        }
    }
}

/// <p>Updates a timeline event. You can update events of type <code>Custom
/// Event</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTimelineEvent {
    _private: (),
}
impl UpdateTimelineEvent {
    /// Creates a new builder-style object to manufacture [`UpdateTimelineEventInput`](crate::input::UpdateTimelineEventInput)
    pub fn builder() -> crate::input::update_timeline_event_input::Builder {
        crate::input::update_timeline_event_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTimelineEvent {
    type Output = std::result::Result<
        crate::output::UpdateTimelineEventOutput,
        crate::error::UpdateTimelineEventError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_update_timeline_event_error(response)
        } else {
            crate::operation_deser::parse_update_timeline_event_response(response)
        }
    }
}
