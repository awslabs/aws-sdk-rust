// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTimelineEventOutput {}
impl std::fmt::Debug for UpdateTimelineEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTimelineEventOutput");
        formatter.finish()
    }
}
/// See [`UpdateTimelineEventOutput`](crate::output::UpdateTimelineEventOutput)
pub mod update_timeline_event_output {
    /// A builder for [`UpdateTimelineEventOutput`](crate::output::UpdateTimelineEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateTimelineEventOutput`](crate::output::UpdateTimelineEventOutput)
        pub fn build(self) -> crate::output::UpdateTimelineEventOutput {
            crate::output::UpdateTimelineEventOutput {}
        }
    }
}
impl UpdateTimelineEventOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTimelineEventOutput`](crate::output::UpdateTimelineEventOutput)
    pub fn builder() -> crate::output::update_timeline_event_output::Builder {
        crate::output::update_timeline_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateResponsePlanOutput {}
impl std::fmt::Debug for UpdateResponsePlanOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateResponsePlanOutput");
        formatter.finish()
    }
}
/// See [`UpdateResponsePlanOutput`](crate::output::UpdateResponsePlanOutput)
pub mod update_response_plan_output {
    /// A builder for [`UpdateResponsePlanOutput`](crate::output::UpdateResponsePlanOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateResponsePlanOutput`](crate::output::UpdateResponsePlanOutput)
        pub fn build(self) -> crate::output::UpdateResponsePlanOutput {
            crate::output::UpdateResponsePlanOutput {}
        }
    }
}
impl UpdateResponsePlanOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResponsePlanOutput`](crate::output::UpdateResponsePlanOutput)
    pub fn builder() -> crate::output::update_response_plan_output::Builder {
        crate::output::update_response_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateReplicationSetOutput {}
impl std::fmt::Debug for UpdateReplicationSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateReplicationSetOutput");
        formatter.finish()
    }
}
/// See [`UpdateReplicationSetOutput`](crate::output::UpdateReplicationSetOutput)
pub mod update_replication_set_output {
    /// A builder for [`UpdateReplicationSetOutput`](crate::output::UpdateReplicationSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateReplicationSetOutput`](crate::output::UpdateReplicationSetOutput)
        pub fn build(self) -> crate::output::UpdateReplicationSetOutput {
            crate::output::UpdateReplicationSetOutput {}
        }
    }
}
impl UpdateReplicationSetOutput {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationSetOutput`](crate::output::UpdateReplicationSetOutput)
    pub fn builder() -> crate::output::update_replication_set_output::Builder {
        crate::output::update_replication_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateRelatedItemsOutput {}
impl std::fmt::Debug for UpdateRelatedItemsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateRelatedItemsOutput");
        formatter.finish()
    }
}
/// See [`UpdateRelatedItemsOutput`](crate::output::UpdateRelatedItemsOutput)
pub mod update_related_items_output {
    /// A builder for [`UpdateRelatedItemsOutput`](crate::output::UpdateRelatedItemsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateRelatedItemsOutput`](crate::output::UpdateRelatedItemsOutput)
        pub fn build(self) -> crate::output::UpdateRelatedItemsOutput {
            crate::output::UpdateRelatedItemsOutput {}
        }
    }
}
impl UpdateRelatedItemsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRelatedItemsOutput`](crate::output::UpdateRelatedItemsOutput)
    pub fn builder() -> crate::output::update_related_items_output::Builder {
        crate::output::update_related_items_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIncidentRecordOutput {}
impl std::fmt::Debug for UpdateIncidentRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateIncidentRecordOutput");
        formatter.finish()
    }
}
/// See [`UpdateIncidentRecordOutput`](crate::output::UpdateIncidentRecordOutput)
pub mod update_incident_record_output {
    /// A builder for [`UpdateIncidentRecordOutput`](crate::output::UpdateIncidentRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateIncidentRecordOutput`](crate::output::UpdateIncidentRecordOutput)
        pub fn build(self) -> crate::output::UpdateIncidentRecordOutput {
            crate::output::UpdateIncidentRecordOutput {}
        }
    }
}
impl UpdateIncidentRecordOutput {
    /// Creates a new builder-style object to manufacture [`UpdateIncidentRecordOutput`](crate::output::UpdateIncidentRecordOutput)
    pub fn builder() -> crate::output::update_incident_record_output::Builder {
        crate::output::update_incident_record_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDeletionProtectionOutput {}
impl std::fmt::Debug for UpdateDeletionProtectionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDeletionProtectionOutput");
        formatter.finish()
    }
}
/// See [`UpdateDeletionProtectionOutput`](crate::output::UpdateDeletionProtectionOutput)
pub mod update_deletion_protection_output {
    /// A builder for [`UpdateDeletionProtectionOutput`](crate::output::UpdateDeletionProtectionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDeletionProtectionOutput`](crate::output::UpdateDeletionProtectionOutput)
        pub fn build(self) -> crate::output::UpdateDeletionProtectionOutput {
            crate::output::UpdateDeletionProtectionOutput {}
        }
    }
}
impl UpdateDeletionProtectionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDeletionProtectionOutput`](crate::output::UpdateDeletionProtectionOutput)
    pub fn builder() -> crate::output::update_deletion_protection_output::Builder {
        crate::output::update_deletion_protection_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartIncidentOutput {
    /// <p>The ARN of the newly created incident record.</p>
    pub incident_record_arn: std::option::Option<std::string::String>,
}
impl StartIncidentOutput {
    /// <p>The ARN of the newly created incident record.</p>
    pub fn incident_record_arn(&self) -> std::option::Option<&str> {
        self.incident_record_arn.as_deref()
    }
}
impl std::fmt::Debug for StartIncidentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartIncidentOutput");
        formatter.field("incident_record_arn", &self.incident_record_arn);
        formatter.finish()
    }
}
/// See [`StartIncidentOutput`](crate::output::StartIncidentOutput)
pub mod start_incident_output {
    /// A builder for [`StartIncidentOutput`](crate::output::StartIncidentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) incident_record_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the newly created incident record.</p>
        pub fn incident_record_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.incident_record_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the newly created incident record.</p>
        pub fn set_incident_record_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.incident_record_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`StartIncidentOutput`](crate::output::StartIncidentOutput)
        pub fn build(self) -> crate::output::StartIncidentOutput {
            crate::output::StartIncidentOutput {
                incident_record_arn: self.incident_record_arn,
            }
        }
    }
}
impl StartIncidentOutput {
    /// Creates a new builder-style object to manufacture [`StartIncidentOutput`](crate::output::StartIncidentOutput)
    pub fn builder() -> crate::output::start_incident_output::Builder {
        crate::output::start_incident_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutResourcePolicyOutput {
    /// <p>The ID of the resource policy.</p>
    pub policy_id: std::option::Option<std::string::String>,
}
impl PutResourcePolicyOutput {
    /// <p>The ID of the resource policy.</p>
    pub fn policy_id(&self) -> std::option::Option<&str> {
        self.policy_id.as_deref()
    }
}
impl std::fmt::Debug for PutResourcePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutResourcePolicyOutput");
        formatter.field("policy_id", &self.policy_id);
        formatter.finish()
    }
}
/// See [`PutResourcePolicyOutput`](crate::output::PutResourcePolicyOutput)
pub mod put_resource_policy_output {
    /// A builder for [`PutResourcePolicyOutput`](crate::output::PutResourcePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the resource policy.</p>
        pub fn policy_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_id = Some(input.into());
            self
        }
        /// <p>The ID of the resource policy.</p>
        pub fn set_policy_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy_id = input;
            self
        }
        /// Consumes the builder and constructs a [`PutResourcePolicyOutput`](crate::output::PutResourcePolicyOutput)
        pub fn build(self) -> crate::output::PutResourcePolicyOutput {
            crate::output::PutResourcePolicyOutput {
                policy_id: self.policy_id,
            }
        }
    }
}
impl PutResourcePolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutResourcePolicyOutput`](crate::output::PutResourcePolicyOutput)
    pub fn builder() -> crate::output::put_resource_policy_output::Builder {
        crate::output::put_resource_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTimelineEventsOutput {
    /// <p>Details about each event that occurred during the incident.</p>
    pub event_summaries: std::option::Option<std::vec::Vec<crate::model::EventSummary>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTimelineEventsOutput {
    /// <p>Details about each event that occurred during the incident.</p>
    pub fn event_summaries(&self) -> std::option::Option<&[crate::model::EventSummary]> {
        self.event_summaries.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListTimelineEventsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTimelineEventsOutput");
        formatter.field("event_summaries", &self.event_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTimelineEventsOutput`](crate::output::ListTimelineEventsOutput)
pub mod list_timeline_events_output {
    /// A builder for [`ListTimelineEventsOutput`](crate::output::ListTimelineEventsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_summaries: std::option::Option<std::vec::Vec<crate::model::EventSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `event_summaries`.
        ///
        /// To override the contents of this collection use [`set_event_summaries`](Self::set_event_summaries).
        ///
        /// <p>Details about each event that occurred during the incident.</p>
        pub fn event_summaries(mut self, input: crate::model::EventSummary) -> Self {
            let mut v = self.event_summaries.unwrap_or_default();
            v.push(input);
            self.event_summaries = Some(v);
            self
        }
        /// <p>Details about each event that occurred during the incident.</p>
        pub fn set_event_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventSummary>>,
        ) -> Self {
            self.event_summaries = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTimelineEventsOutput`](crate::output::ListTimelineEventsOutput)
        pub fn build(self) -> crate::output::ListTimelineEventsOutput {
            crate::output::ListTimelineEventsOutput {
                event_summaries: self.event_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTimelineEventsOutput {
    /// Creates a new builder-style object to manufacture [`ListTimelineEventsOutput`](crate::output::ListTimelineEventsOutput)
    pub fn builder() -> crate::output::list_timeline_events_output::Builder {
        crate::output::list_timeline_events_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tags for the response plan.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of tags for the response plan.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags for the response plan.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A list of tags for the response plan.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResponsePlansOutput {
    /// <p>Details of each response plan.</p>
    pub response_plan_summaries:
        std::option::Option<std::vec::Vec<crate::model::ResponsePlanSummary>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListResponsePlansOutput {
    /// <p>Details of each response plan.</p>
    pub fn response_plan_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ResponsePlanSummary]> {
        self.response_plan_summaries.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListResponsePlansOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResponsePlansOutput");
        formatter.field("response_plan_summaries", &self.response_plan_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResponsePlansOutput`](crate::output::ListResponsePlansOutput)
pub mod list_response_plans_output {
    /// A builder for [`ListResponsePlansOutput`](crate::output::ListResponsePlansOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) response_plan_summaries:
            std::option::Option<std::vec::Vec<crate::model::ResponsePlanSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `response_plan_summaries`.
        ///
        /// To override the contents of this collection use [`set_response_plan_summaries`](Self::set_response_plan_summaries).
        ///
        /// <p>Details of each response plan.</p>
        pub fn response_plan_summaries(mut self, input: crate::model::ResponsePlanSummary) -> Self {
            let mut v = self.response_plan_summaries.unwrap_or_default();
            v.push(input);
            self.response_plan_summaries = Some(v);
            self
        }
        /// <p>Details of each response plan.</p>
        pub fn set_response_plan_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResponsePlanSummary>>,
        ) -> Self {
            self.response_plan_summaries = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResponsePlansOutput`](crate::output::ListResponsePlansOutput)
        pub fn build(self) -> crate::output::ListResponsePlansOutput {
            crate::output::ListResponsePlansOutput {
                response_plan_summaries: self.response_plan_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResponsePlansOutput {
    /// Creates a new builder-style object to manufacture [`ListResponsePlansOutput`](crate::output::ListResponsePlansOutput)
    pub fn builder() -> crate::output::list_response_plans_output::Builder {
        crate::output::list_response_plans_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListReplicationSetsOutput {
    /// <p>The Amazon Resource Name (ARN) of the list replication set.</p>
    pub replication_set_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListReplicationSetsOutput {
    /// <p>The Amazon Resource Name (ARN) of the list replication set.</p>
    pub fn replication_set_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.replication_set_arns.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListReplicationSetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListReplicationSetsOutput");
        formatter.field("replication_set_arns", &self.replication_set_arns);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListReplicationSetsOutput`](crate::output::ListReplicationSetsOutput)
pub mod list_replication_sets_output {
    /// A builder for [`ListReplicationSetsOutput`](crate::output::ListReplicationSetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_set_arns: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `replication_set_arns`.
        ///
        /// To override the contents of this collection use [`set_replication_set_arns`](Self::set_replication_set_arns).
        ///
        /// <p>The Amazon Resource Name (ARN) of the list replication set.</p>
        pub fn replication_set_arns(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.replication_set_arns.unwrap_or_default();
            v.push(input.into());
            self.replication_set_arns = Some(v);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the list replication set.</p>
        pub fn set_replication_set_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.replication_set_arns = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListReplicationSetsOutput`](crate::output::ListReplicationSetsOutput)
        pub fn build(self) -> crate::output::ListReplicationSetsOutput {
            crate::output::ListReplicationSetsOutput {
                replication_set_arns: self.replication_set_arns,
                next_token: self.next_token,
            }
        }
    }
}
impl ListReplicationSetsOutput {
    /// Creates a new builder-style object to manufacture [`ListReplicationSetsOutput`](crate::output::ListReplicationSetsOutput)
    pub fn builder() -> crate::output::list_replication_sets_output::Builder {
        crate::output::list_replication_sets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListRelatedItemsOutput {
    /// <p>Details about each related item.</p>
    pub related_items: std::option::Option<std::vec::Vec<crate::model::RelatedItem>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListRelatedItemsOutput {
    /// <p>Details about each related item.</p>
    pub fn related_items(&self) -> std::option::Option<&[crate::model::RelatedItem]> {
        self.related_items.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListRelatedItemsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListRelatedItemsOutput");
        formatter.field("related_items", &self.related_items);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListRelatedItemsOutput`](crate::output::ListRelatedItemsOutput)
pub mod list_related_items_output {
    /// A builder for [`ListRelatedItemsOutput`](crate::output::ListRelatedItemsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) related_items: std::option::Option<std::vec::Vec<crate::model::RelatedItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `related_items`.
        ///
        /// To override the contents of this collection use [`set_related_items`](Self::set_related_items).
        ///
        /// <p>Details about each related item.</p>
        pub fn related_items(mut self, input: crate::model::RelatedItem) -> Self {
            let mut v = self.related_items.unwrap_or_default();
            v.push(input);
            self.related_items = Some(v);
            self
        }
        /// <p>Details about each related item.</p>
        pub fn set_related_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RelatedItem>>,
        ) -> Self {
            self.related_items = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListRelatedItemsOutput`](crate::output::ListRelatedItemsOutput)
        pub fn build(self) -> crate::output::ListRelatedItemsOutput {
            crate::output::ListRelatedItemsOutput {
                related_items: self.related_items,
                next_token: self.next_token,
            }
        }
    }
}
impl ListRelatedItemsOutput {
    /// Creates a new builder-style object to manufacture [`ListRelatedItemsOutput`](crate::output::ListRelatedItemsOutput)
    pub fn builder() -> crate::output::list_related_items_output::Builder {
        crate::output::list_related_items_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListIncidentRecordsOutput {
    /// <p>The details of each listed incident record.</p>
    pub incident_record_summaries:
        std::option::Option<std::vec::Vec<crate::model::IncidentRecordSummary>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListIncidentRecordsOutput {
    /// <p>The details of each listed incident record.</p>
    pub fn incident_record_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::IncidentRecordSummary]> {
        self.incident_record_summaries.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListIncidentRecordsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListIncidentRecordsOutput");
        formatter.field("incident_record_summaries", &self.incident_record_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListIncidentRecordsOutput`](crate::output::ListIncidentRecordsOutput)
pub mod list_incident_records_output {
    /// A builder for [`ListIncidentRecordsOutput`](crate::output::ListIncidentRecordsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) incident_record_summaries:
            std::option::Option<std::vec::Vec<crate::model::IncidentRecordSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `incident_record_summaries`.
        ///
        /// To override the contents of this collection use [`set_incident_record_summaries`](Self::set_incident_record_summaries).
        ///
        /// <p>The details of each listed incident record.</p>
        pub fn incident_record_summaries(
            mut self,
            input: crate::model::IncidentRecordSummary,
        ) -> Self {
            let mut v = self.incident_record_summaries.unwrap_or_default();
            v.push(input);
            self.incident_record_summaries = Some(v);
            self
        }
        /// <p>The details of each listed incident record.</p>
        pub fn set_incident_record_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IncidentRecordSummary>>,
        ) -> Self {
            self.incident_record_summaries = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListIncidentRecordsOutput`](crate::output::ListIncidentRecordsOutput)
        pub fn build(self) -> crate::output::ListIncidentRecordsOutput {
            crate::output::ListIncidentRecordsOutput {
                incident_record_summaries: self.incident_record_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListIncidentRecordsOutput {
    /// Creates a new builder-style object to manufacture [`ListIncidentRecordsOutput`](crate::output::ListIncidentRecordsOutput)
    pub fn builder() -> crate::output::list_incident_records_output::Builder {
        crate::output::list_incident_records_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTimelineEventOutput {
    /// <p>Details about the timeline event.</p>
    pub event: std::option::Option<crate::model::TimelineEvent>,
}
impl GetTimelineEventOutput {
    /// <p>Details about the timeline event.</p>
    pub fn event(&self) -> std::option::Option<&crate::model::TimelineEvent> {
        self.event.as_ref()
    }
}
impl std::fmt::Debug for GetTimelineEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTimelineEventOutput");
        formatter.field("event", &self.event);
        formatter.finish()
    }
}
/// See [`GetTimelineEventOutput`](crate::output::GetTimelineEventOutput)
pub mod get_timeline_event_output {
    /// A builder for [`GetTimelineEventOutput`](crate::output::GetTimelineEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event: std::option::Option<crate::model::TimelineEvent>,
    }
    impl Builder {
        /// <p>Details about the timeline event.</p>
        pub fn event(mut self, input: crate::model::TimelineEvent) -> Self {
            self.event = Some(input);
            self
        }
        /// <p>Details about the timeline event.</p>
        pub fn set_event(
            mut self,
            input: std::option::Option<crate::model::TimelineEvent>,
        ) -> Self {
            self.event = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTimelineEventOutput`](crate::output::GetTimelineEventOutput)
        pub fn build(self) -> crate::output::GetTimelineEventOutput {
            crate::output::GetTimelineEventOutput { event: self.event }
        }
    }
}
impl GetTimelineEventOutput {
    /// Creates a new builder-style object to manufacture [`GetTimelineEventOutput`](crate::output::GetTimelineEventOutput)
    pub fn builder() -> crate::output::get_timeline_event_output::Builder {
        crate::output::get_timeline_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetResponsePlanOutput {
    /// <p>The ARN of the response plan.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The short format name of the response plan. The name can't contain spaces.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The long format name of the response plan. Can contain spaces.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>Details used to create the incident when using this response plan.</p>
    pub incident_template: std::option::Option<crate::model::IncidentTemplate>,
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    pub chat_channel: std::option::Option<crate::model::ChatChannel>,
    /// <p>The contacts and escalation plans that the response plan engages during an incident.</p>
    pub engagements: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The actions that this response plan takes at the beginning of the incident.</p>
    pub actions: std::option::Option<std::vec::Vec<crate::model::Action>>,
}
impl GetResponsePlanOutput {
    /// <p>The ARN of the response plan.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The short format name of the response plan. The name can't contain spaces.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The long format name of the response plan. Can contain spaces.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Details used to create the incident when using this response plan.</p>
    pub fn incident_template(&self) -> std::option::Option<&crate::model::IncidentTemplate> {
        self.incident_template.as_ref()
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    pub fn chat_channel(&self) -> std::option::Option<&crate::model::ChatChannel> {
        self.chat_channel.as_ref()
    }
    /// <p>The contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn engagements(&self) -> std::option::Option<&std::vec::Vec<std::string::String>> {
        self.engagements.as_ref()
    }
    /// <p>The actions that this response plan takes at the beginning of the incident.</p>
    pub fn actions(&self) -> std::option::Option<&[crate::model::Action]> {
        self.actions.as_deref()
    }
}
impl std::fmt::Debug for GetResponsePlanOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetResponsePlanOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("display_name", &self.display_name);
        formatter.field("incident_template", &self.incident_template);
        formatter.field("chat_channel", &self.chat_channel);
        formatter.field("engagements", &self.engagements);
        formatter.field("actions", &self.actions);
        formatter.finish()
    }
}
/// See [`GetResponsePlanOutput`](crate::output::GetResponsePlanOutput)
pub mod get_response_plan_output {
    /// A builder for [`GetResponsePlanOutput`](crate::output::GetResponsePlanOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) incident_template: std::option::Option<crate::model::IncidentTemplate>,
        pub(crate) chat_channel: std::option::Option<crate::model::ChatChannel>,
        pub(crate) engagements: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) actions: std::option::Option<std::vec::Vec<crate::model::Action>>,
    }
    impl Builder {
        /// <p>The ARN of the response plan.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the response plan.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The short format name of the response plan. The name can't contain spaces.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The short format name of the response plan. The name can't contain spaces.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The long format name of the response plan. Can contain spaces.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        /// <p>The long format name of the response plan. Can contain spaces.</p>
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>Details used to create the incident when using this response plan.</p>
        pub fn incident_template(mut self, input: crate::model::IncidentTemplate) -> Self {
            self.incident_template = Some(input);
            self
        }
        /// <p>Details used to create the incident when using this response plan.</p>
        pub fn set_incident_template(
            mut self,
            input: std::option::Option<crate::model::IncidentTemplate>,
        ) -> Self {
            self.incident_template = input;
            self
        }
        /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
        pub fn chat_channel(mut self, input: crate::model::ChatChannel) -> Self {
            self.chat_channel = Some(input);
            self
        }
        /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
        pub fn set_chat_channel(
            mut self,
            input: std::option::Option<crate::model::ChatChannel>,
        ) -> Self {
            self.chat_channel = input;
            self
        }
        /// <p>The contacts and escalation plans that the response plan engages during an incident.</p>
        pub fn engagements(mut self, input: std::vec::Vec<std::string::String>) -> Self {
            self.engagements = Some(input);
            self
        }
        /// <p>The contacts and escalation plans that the response plan engages during an incident.</p>
        pub fn set_engagements(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.engagements = input;
            self
        }
        /// Appends an item to `actions`.
        ///
        /// To override the contents of this collection use [`set_actions`](Self::set_actions).
        ///
        /// <p>The actions that this response plan takes at the beginning of the incident.</p>
        pub fn actions(mut self, input: crate::model::Action) -> Self {
            let mut v = self.actions.unwrap_or_default();
            v.push(input);
            self.actions = Some(v);
            self
        }
        /// <p>The actions that this response plan takes at the beginning of the incident.</p>
        pub fn set_actions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Action>>,
        ) -> Self {
            self.actions = input;
            self
        }
        /// Consumes the builder and constructs a [`GetResponsePlanOutput`](crate::output::GetResponsePlanOutput)
        pub fn build(self) -> crate::output::GetResponsePlanOutput {
            crate::output::GetResponsePlanOutput {
                arn: self.arn,
                name: self.name,
                display_name: self.display_name,
                incident_template: self.incident_template,
                chat_channel: self.chat_channel,
                engagements: self.engagements,
                actions: self.actions,
            }
        }
    }
}
impl GetResponsePlanOutput {
    /// Creates a new builder-style object to manufacture [`GetResponsePlanOutput`](crate::output::GetResponsePlanOutput)
    pub fn builder() -> crate::output::get_response_plan_output::Builder {
        crate::output::get_response_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetResourcePoliciesOutput {
    /// <p>Details about the resource policy attached to the response plan.</p>
    pub resource_policies: std::option::Option<std::vec::Vec<crate::model::ResourcePolicy>>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl GetResourcePoliciesOutput {
    /// <p>Details about the resource policy attached to the response plan.</p>
    pub fn resource_policies(&self) -> std::option::Option<&[crate::model::ResourcePolicy]> {
        self.resource_policies.as_deref()
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for GetResourcePoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetResourcePoliciesOutput");
        formatter.field("resource_policies", &self.resource_policies);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetResourcePoliciesOutput`](crate::output::GetResourcePoliciesOutput)
pub mod get_resource_policies_output {
    /// A builder for [`GetResourcePoliciesOutput`](crate::output::GetResourcePoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_policies:
            std::option::Option<std::vec::Vec<crate::model::ResourcePolicy>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `resource_policies`.
        ///
        /// To override the contents of this collection use [`set_resource_policies`](Self::set_resource_policies).
        ///
        /// <p>Details about the resource policy attached to the response plan.</p>
        pub fn resource_policies(mut self, input: crate::model::ResourcePolicy) -> Self {
            let mut v = self.resource_policies.unwrap_or_default();
            v.push(input);
            self.resource_policies = Some(v);
            self
        }
        /// <p>Details about the resource policy attached to the response plan.</p>
        pub fn set_resource_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourcePolicy>>,
        ) -> Self {
            self.resource_policies = input;
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token to continue to the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetResourcePoliciesOutput`](crate::output::GetResourcePoliciesOutput)
        pub fn build(self) -> crate::output::GetResourcePoliciesOutput {
            crate::output::GetResourcePoliciesOutput {
                resource_policies: self.resource_policies,
                next_token: self.next_token,
            }
        }
    }
}
impl GetResourcePoliciesOutput {
    /// Creates a new builder-style object to manufacture [`GetResourcePoliciesOutput`](crate::output::GetResourcePoliciesOutput)
    pub fn builder() -> crate::output::get_resource_policies_output::Builder {
        crate::output::get_resource_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetReplicationSetOutput {
    /// <p>Details of the replication set.</p>
    pub replication_set: std::option::Option<crate::model::ReplicationSet>,
}
impl GetReplicationSetOutput {
    /// <p>Details of the replication set.</p>
    pub fn replication_set(&self) -> std::option::Option<&crate::model::ReplicationSet> {
        self.replication_set.as_ref()
    }
}
impl std::fmt::Debug for GetReplicationSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetReplicationSetOutput");
        formatter.field("replication_set", &self.replication_set);
        formatter.finish()
    }
}
/// See [`GetReplicationSetOutput`](crate::output::GetReplicationSetOutput)
pub mod get_replication_set_output {
    /// A builder for [`GetReplicationSetOutput`](crate::output::GetReplicationSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) replication_set: std::option::Option<crate::model::ReplicationSet>,
    }
    impl Builder {
        /// <p>Details of the replication set.</p>
        pub fn replication_set(mut self, input: crate::model::ReplicationSet) -> Self {
            self.replication_set = Some(input);
            self
        }
        /// <p>Details of the replication set.</p>
        pub fn set_replication_set(
            mut self,
            input: std::option::Option<crate::model::ReplicationSet>,
        ) -> Self {
            self.replication_set = input;
            self
        }
        /// Consumes the builder and constructs a [`GetReplicationSetOutput`](crate::output::GetReplicationSetOutput)
        pub fn build(self) -> crate::output::GetReplicationSetOutput {
            crate::output::GetReplicationSetOutput {
                replication_set: self.replication_set,
            }
        }
    }
}
impl GetReplicationSetOutput {
    /// Creates a new builder-style object to manufacture [`GetReplicationSetOutput`](crate::output::GetReplicationSetOutput)
    pub fn builder() -> crate::output::get_replication_set_output::Builder {
        crate::output::get_replication_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIncidentRecordOutput {
    /// <p>Details the structure of the incident record.</p>
    pub incident_record: std::option::Option<crate::model::IncidentRecord>,
}
impl GetIncidentRecordOutput {
    /// <p>Details the structure of the incident record.</p>
    pub fn incident_record(&self) -> std::option::Option<&crate::model::IncidentRecord> {
        self.incident_record.as_ref()
    }
}
impl std::fmt::Debug for GetIncidentRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetIncidentRecordOutput");
        formatter.field("incident_record", &self.incident_record);
        formatter.finish()
    }
}
/// See [`GetIncidentRecordOutput`](crate::output::GetIncidentRecordOutput)
pub mod get_incident_record_output {
    /// A builder for [`GetIncidentRecordOutput`](crate::output::GetIncidentRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) incident_record: std::option::Option<crate::model::IncidentRecord>,
    }
    impl Builder {
        /// <p>Details the structure of the incident record.</p>
        pub fn incident_record(mut self, input: crate::model::IncidentRecord) -> Self {
            self.incident_record = Some(input);
            self
        }
        /// <p>Details the structure of the incident record.</p>
        pub fn set_incident_record(
            mut self,
            input: std::option::Option<crate::model::IncidentRecord>,
        ) -> Self {
            self.incident_record = input;
            self
        }
        /// Consumes the builder and constructs a [`GetIncidentRecordOutput`](crate::output::GetIncidentRecordOutput)
        pub fn build(self) -> crate::output::GetIncidentRecordOutput {
            crate::output::GetIncidentRecordOutput {
                incident_record: self.incident_record,
            }
        }
    }
}
impl GetIncidentRecordOutput {
    /// Creates a new builder-style object to manufacture [`GetIncidentRecordOutput`](crate::output::GetIncidentRecordOutput)
    pub fn builder() -> crate::output::get_incident_record_output::Builder {
        crate::output::get_incident_record_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTimelineEventOutput {}
impl std::fmt::Debug for DeleteTimelineEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTimelineEventOutput");
        formatter.finish()
    }
}
/// See [`DeleteTimelineEventOutput`](crate::output::DeleteTimelineEventOutput)
pub mod delete_timeline_event_output {
    /// A builder for [`DeleteTimelineEventOutput`](crate::output::DeleteTimelineEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteTimelineEventOutput`](crate::output::DeleteTimelineEventOutput)
        pub fn build(self) -> crate::output::DeleteTimelineEventOutput {
            crate::output::DeleteTimelineEventOutput {}
        }
    }
}
impl DeleteTimelineEventOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTimelineEventOutput`](crate::output::DeleteTimelineEventOutput)
    pub fn builder() -> crate::output::delete_timeline_event_output::Builder {
        crate::output::delete_timeline_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteResponsePlanOutput {}
impl std::fmt::Debug for DeleteResponsePlanOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteResponsePlanOutput");
        formatter.finish()
    }
}
/// See [`DeleteResponsePlanOutput`](crate::output::DeleteResponsePlanOutput)
pub mod delete_response_plan_output {
    /// A builder for [`DeleteResponsePlanOutput`](crate::output::DeleteResponsePlanOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteResponsePlanOutput`](crate::output::DeleteResponsePlanOutput)
        pub fn build(self) -> crate::output::DeleteResponsePlanOutput {
            crate::output::DeleteResponsePlanOutput {}
        }
    }
}
impl DeleteResponsePlanOutput {
    /// Creates a new builder-style object to manufacture [`DeleteResponsePlanOutput`](crate::output::DeleteResponsePlanOutput)
    pub fn builder() -> crate::output::delete_response_plan_output::Builder {
        crate::output::delete_response_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteResourcePolicyOutput {}
impl std::fmt::Debug for DeleteResourcePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteResourcePolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteResourcePolicyOutput`](crate::output::DeleteResourcePolicyOutput)
pub mod delete_resource_policy_output {
    /// A builder for [`DeleteResourcePolicyOutput`](crate::output::DeleteResourcePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteResourcePolicyOutput`](crate::output::DeleteResourcePolicyOutput)
        pub fn build(self) -> crate::output::DeleteResourcePolicyOutput {
            crate::output::DeleteResourcePolicyOutput {}
        }
    }
}
impl DeleteResourcePolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteResourcePolicyOutput`](crate::output::DeleteResourcePolicyOutput)
    pub fn builder() -> crate::output::delete_resource_policy_output::Builder {
        crate::output::delete_resource_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteReplicationSetOutput {}
impl std::fmt::Debug for DeleteReplicationSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteReplicationSetOutput");
        formatter.finish()
    }
}
/// See [`DeleteReplicationSetOutput`](crate::output::DeleteReplicationSetOutput)
pub mod delete_replication_set_output {
    /// A builder for [`DeleteReplicationSetOutput`](crate::output::DeleteReplicationSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteReplicationSetOutput`](crate::output::DeleteReplicationSetOutput)
        pub fn build(self) -> crate::output::DeleteReplicationSetOutput {
            crate::output::DeleteReplicationSetOutput {}
        }
    }
}
impl DeleteReplicationSetOutput {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationSetOutput`](crate::output::DeleteReplicationSetOutput)
    pub fn builder() -> crate::output::delete_replication_set_output::Builder {
        crate::output::delete_replication_set_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteIncidentRecordOutput {}
impl std::fmt::Debug for DeleteIncidentRecordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteIncidentRecordOutput");
        formatter.finish()
    }
}
/// See [`DeleteIncidentRecordOutput`](crate::output::DeleteIncidentRecordOutput)
pub mod delete_incident_record_output {
    /// A builder for [`DeleteIncidentRecordOutput`](crate::output::DeleteIncidentRecordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteIncidentRecordOutput`](crate::output::DeleteIncidentRecordOutput)
        pub fn build(self) -> crate::output::DeleteIncidentRecordOutput {
            crate::output::DeleteIncidentRecordOutput {}
        }
    }
}
impl DeleteIncidentRecordOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIncidentRecordOutput`](crate::output::DeleteIncidentRecordOutput)
    pub fn builder() -> crate::output::delete_incident_record_output::Builder {
        crate::output::delete_incident_record_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTimelineEventOutput {
    /// <p>The ARN of the incident record that you added the event to.</p>
    pub incident_record_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the event for easy reference later. </p>
    pub event_id: std::option::Option<std::string::String>,
}
impl CreateTimelineEventOutput {
    /// <p>The ARN of the incident record that you added the event to.</p>
    pub fn incident_record_arn(&self) -> std::option::Option<&str> {
        self.incident_record_arn.as_deref()
    }
    /// <p>The ID of the event for easy reference later. </p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
}
impl std::fmt::Debug for CreateTimelineEventOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTimelineEventOutput");
        formatter.field("incident_record_arn", &self.incident_record_arn);
        formatter.field("event_id", &self.event_id);
        formatter.finish()
    }
}
/// See [`CreateTimelineEventOutput`](crate::output::CreateTimelineEventOutput)
pub mod create_timeline_event_output {
    /// A builder for [`CreateTimelineEventOutput`](crate::output::CreateTimelineEventOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) incident_record_arn: std::option::Option<std::string::String>,
        pub(crate) event_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the incident record that you added the event to.</p>
        pub fn incident_record_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.incident_record_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the incident record that you added the event to.</p>
        pub fn set_incident_record_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.incident_record_arn = input;
            self
        }
        /// <p>The ID of the event for easy reference later. </p>
        pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.event_id = Some(input.into());
            self
        }
        /// <p>The ID of the event for easy reference later. </p>
        pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.event_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateTimelineEventOutput`](crate::output::CreateTimelineEventOutput)
        pub fn build(self) -> crate::output::CreateTimelineEventOutput {
            crate::output::CreateTimelineEventOutput {
                incident_record_arn: self.incident_record_arn,
                event_id: self.event_id,
            }
        }
    }
}
impl CreateTimelineEventOutput {
    /// Creates a new builder-style object to manufacture [`CreateTimelineEventOutput`](crate::output::CreateTimelineEventOutput)
    pub fn builder() -> crate::output::create_timeline_event_output::Builder {
        crate::output::create_timeline_event_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateResponsePlanOutput {
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl CreateResponsePlanOutput {
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for CreateResponsePlanOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateResponsePlanOutput");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateResponsePlanOutput`](crate::output::CreateResponsePlanOutput)
pub mod create_response_plan_output {
    /// A builder for [`CreateResponsePlanOutput`](crate::output::CreateResponsePlanOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateResponsePlanOutput`](crate::output::CreateResponsePlanOutput)
        pub fn build(self) -> crate::output::CreateResponsePlanOutput {
            crate::output::CreateResponsePlanOutput { arn: self.arn }
        }
    }
}
impl CreateResponsePlanOutput {
    /// Creates a new builder-style object to manufacture [`CreateResponsePlanOutput`](crate::output::CreateResponsePlanOutput)
    pub fn builder() -> crate::output::create_response_plan_output::Builder {
        crate::output::create_response_plan_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateReplicationSetOutput {
    /// <p>The Amazon Resource Name (ARN) of the replication set. </p>
    pub arn: std::option::Option<std::string::String>,
}
impl CreateReplicationSetOutput {
    /// <p>The Amazon Resource Name (ARN) of the replication set. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for CreateReplicationSetOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateReplicationSetOutput");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateReplicationSetOutput`](crate::output::CreateReplicationSetOutput)
pub mod create_replication_set_output {
    /// A builder for [`CreateReplicationSetOutput`](crate::output::CreateReplicationSetOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the replication set. </p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the replication set. </p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateReplicationSetOutput`](crate::output::CreateReplicationSetOutput)
        pub fn build(self) -> crate::output::CreateReplicationSetOutput {
            crate::output::CreateReplicationSetOutput { arn: self.arn }
        }
    }
}
impl CreateReplicationSetOutput {
    /// Creates a new builder-style object to manufacture [`CreateReplicationSetOutput`](crate::output::CreateReplicationSetOutput)
    pub fn builder() -> crate::output::create_replication_set_output::Builder {
        crate::output::create_replication_set_output::Builder::default()
    }
}
