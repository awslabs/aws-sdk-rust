// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = "no value was set".parse::<crate::types::ServiceCode>().ok()
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = "no value was set".parse::<crate::types::ServiceCode>().ok()
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_replication_set_output_correct_errors(
    mut builder: crate::operation::create_replication_set::builders::CreateReplicationSetOutputBuilder,
) -> crate::operation::create_replication_set::builders::CreateReplicationSetOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_response_plan_output_correct_errors(
    mut builder: crate::operation::create_response_plan::builders::CreateResponsePlanOutputBuilder,
) -> crate::operation::create_response_plan::builders::CreateResponsePlanOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_timeline_event_output_correct_errors(
    mut builder: crate::operation::create_timeline_event::builders::CreateTimelineEventOutputBuilder,
) -> crate::operation::create_timeline_event::builders::CreateTimelineEventOutputBuilder {
    if builder.incident_record_arn.is_none() {
        builder.incident_record_arn = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_incident_record_output_correct_errors(
    mut builder: crate::operation::get_incident_record::builders::GetIncidentRecordOutputBuilder,
) -> crate::operation::get_incident_record::builders::GetIncidentRecordOutputBuilder {
    if builder.incident_record.is_none() {
        builder.incident_record = {
            let builder = crate::types::builders::IncidentRecordBuilder::default();
            crate::serde_util::incident_record_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_replication_set_output_correct_errors(
    mut builder: crate::operation::get_replication_set::builders::GetReplicationSetOutputBuilder,
) -> crate::operation::get_replication_set::builders::GetReplicationSetOutputBuilder {
    if builder.replication_set.is_none() {
        builder.replication_set = {
            let builder = crate::types::builders::ReplicationSetBuilder::default();
            crate::serde_util::replication_set_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_resource_policies_output_correct_errors(
    mut builder: crate::operation::get_resource_policies::builders::GetResourcePoliciesOutputBuilder,
) -> crate::operation::get_resource_policies::builders::GetResourcePoliciesOutputBuilder {
    if builder.resource_policies.is_none() {
        builder.resource_policies = Some(Default::default())
    }
    builder
}

pub(crate) fn get_response_plan_output_correct_errors(
    mut builder: crate::operation::get_response_plan::builders::GetResponsePlanOutputBuilder,
) -> crate::operation::get_response_plan::builders::GetResponsePlanOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.incident_template.is_none() {
        builder.incident_template = {
            let builder = crate::types::builders::IncidentTemplateBuilder::default();
            crate::serde_util::incident_template_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_timeline_event_output_correct_errors(
    mut builder: crate::operation::get_timeline_event::builders::GetTimelineEventOutputBuilder,
) -> crate::operation::get_timeline_event::builders::GetTimelineEventOutputBuilder {
    if builder.event.is_none() {
        builder.event = {
            let builder = crate::types::builders::TimelineEventBuilder::default();
            crate::serde_util::timeline_event_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_incident_records_output_correct_errors(
    mut builder: crate::operation::list_incident_records::builders::ListIncidentRecordsOutputBuilder,
) -> crate::operation::list_incident_records::builders::ListIncidentRecordsOutputBuilder {
    if builder.incident_record_summaries.is_none() {
        builder.incident_record_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_related_items_output_correct_errors(
    mut builder: crate::operation::list_related_items::builders::ListRelatedItemsOutputBuilder,
) -> crate::operation::list_related_items::builders::ListRelatedItemsOutputBuilder {
    if builder.related_items.is_none() {
        builder.related_items = Some(Default::default())
    }
    builder
}

pub(crate) fn list_replication_sets_output_correct_errors(
    mut builder: crate::operation::list_replication_sets::builders::ListReplicationSetsOutputBuilder,
) -> crate::operation::list_replication_sets::builders::ListReplicationSetsOutputBuilder {
    if builder.replication_set_arns.is_none() {
        builder.replication_set_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn list_response_plans_output_correct_errors(
    mut builder: crate::operation::list_response_plans::builders::ListResponsePlansOutputBuilder,
) -> crate::operation::list_response_plans::builders::ListResponsePlansOutputBuilder {
    if builder.response_plan_summaries.is_none() {
        builder.response_plan_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn list_timeline_events_output_correct_errors(
    mut builder: crate::operation::list_timeline_events::builders::ListTimelineEventsOutputBuilder,
) -> crate::operation::list_timeline_events::builders::ListTimelineEventsOutputBuilder {
    if builder.event_summaries.is_none() {
        builder.event_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_resource_policy_output_correct_errors(
    mut builder: crate::operation::put_resource_policy::builders::PutResourcePolicyOutputBuilder,
) -> crate::operation::put_resource_policy::builders::PutResourcePolicyOutputBuilder {
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn start_incident_output_correct_errors(
    mut builder: crate::operation::start_incident::builders::StartIncidentOutputBuilder,
) -> crate::operation::start_incident::builders::StartIncidentOutputBuilder {
    if builder.incident_record_arn.is_none() {
        builder.incident_record_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn incident_record_correct_errors(
    mut builder: crate::types::builders::IncidentRecordBuilder,
) -> crate::types::builders::IncidentRecordBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IncidentRecordStatus>().ok()
    }
    if builder.impact.is_none() {
        builder.impact = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    if builder.incident_record_source.is_none() {
        builder.incident_record_source = {
            let builder = crate::types::builders::IncidentRecordSourceBuilder::default();
            crate::serde_util::incident_record_source_correct_errors(builder).build().ok()
        }
    }
    if builder.dedupe_string.is_none() {
        builder.dedupe_string = Some(Default::default())
    }
    builder
}

pub(crate) fn replication_set_correct_errors(
    mut builder: crate::types::builders::ReplicationSetBuilder,
) -> crate::types::builders::ReplicationSetBuilder {
    if builder.region_map.is_none() {
        builder.region_map = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReplicationSetStatus>().ok()
    }
    if builder.deletion_protected.is_none() {
        builder.deletion_protected = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_by.is_none() {
        builder.last_modified_by = Some(Default::default())
    }
    builder
}

pub(crate) fn incident_template_correct_errors(
    mut builder: crate::types::builders::IncidentTemplateBuilder,
) -> crate::types::builders::IncidentTemplateBuilder {
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.impact.is_none() {
        builder.impact = Some(Default::default())
    }
    builder
}

pub(crate) fn timeline_event_correct_errors(
    mut builder: crate::types::builders::TimelineEventBuilder,
) -> crate::types::builders::TimelineEventBuilder {
    if builder.incident_record_arn.is_none() {
        builder.incident_record_arn = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.event_time.is_none() {
        builder.event_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_updated_time.is_none() {
        builder.event_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    if builder.event_data.is_none() {
        builder.event_data = Some(Default::default())
    }
    builder
}

pub(crate) fn incident_record_source_correct_errors(
    mut builder: crate::types::builders::IncidentRecordSourceBuilder,
) -> crate::types::builders::IncidentRecordSourceBuilder {
    if builder.created_by.is_none() {
        builder.created_by = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = Some(Default::default())
    }
    builder
}

pub(crate) fn event_summary_correct_errors(mut builder: crate::types::builders::EventSummaryBuilder) -> crate::types::builders::EventSummaryBuilder {
    if builder.incident_record_arn.is_none() {
        builder.incident_record_arn = Some(Default::default())
    }
    if builder.event_id.is_none() {
        builder.event_id = Some(Default::default())
    }
    if builder.event_time.is_none() {
        builder.event_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_updated_time.is_none() {
        builder.event_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.event_type.is_none() {
        builder.event_type = Some(Default::default())
    }
    builder
}

pub(crate) fn incident_record_summary_correct_errors(
    mut builder: crate::types::builders::IncidentRecordSummaryBuilder,
) -> crate::types::builders::IncidentRecordSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.title.is_none() {
        builder.title = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IncidentRecordStatus>().ok()
    }
    if builder.impact.is_none() {
        builder.impact = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.incident_record_source.is_none() {
        builder.incident_record_source = {
            let builder = crate::types::builders::IncidentRecordSourceBuilder::default();
            crate::serde_util::incident_record_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn related_item_correct_errors(mut builder: crate::types::builders::RelatedItemBuilder) -> crate::types::builders::RelatedItemBuilder {
    if builder.identifier.is_none() {
        builder.identifier = {
            let builder = crate::types::builders::ItemIdentifierBuilder::default();
            crate::serde_util::item_identifier_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resource_policy_correct_errors(
    mut builder: crate::types::builders::ResourcePolicyBuilder,
) -> crate::types::builders::ResourcePolicyBuilder {
    if builder.policy_document.is_none() {
        builder.policy_document = Some(Default::default())
    }
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.ram_resource_share_region.is_none() {
        builder.ram_resource_share_region = Some(Default::default())
    }
    builder
}

pub(crate) fn response_plan_summary_correct_errors(
    mut builder: crate::types::builders::ResponsePlanSummaryBuilder,
) -> crate::types::builders::ResponsePlanSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn item_identifier_correct_errors(
    mut builder: crate::types::builders::ItemIdentifierBuilder,
) -> crate::types::builders::ItemIdentifierBuilder {
    if builder.value.is_none() {
        builder.value = Some(crate::types::ItemValue::Unknown)
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ItemType>().ok()
    }
    builder
}

pub(crate) fn pager_duty_configuration_correct_errors(
    mut builder: crate::types::builders::PagerDutyConfigurationBuilder,
) -> crate::types::builders::PagerDutyConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.secret_id.is_none() {
        builder.secret_id = Some(Default::default())
    }
    if builder.pager_duty_incident_configuration.is_none() {
        builder.pager_duty_incident_configuration = {
            let builder = crate::types::builders::PagerDutyIncidentConfigurationBuilder::default();
            crate::serde_util::pager_duty_incident_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn region_info_correct_errors(mut builder: crate::types::builders::RegionInfoBuilder) -> crate::types::builders::RegionInfoBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RegionStatus>().ok()
    }
    if builder.status_update_date_time.is_none() {
        builder.status_update_date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ssm_automation_correct_errors(
    mut builder: crate::types::builders::SsmAutomationBuilder,
) -> crate::types::builders::SsmAutomationBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.document_name.is_none() {
        builder.document_name = Some(Default::default())
    }
    builder
}

pub(crate) fn pager_duty_incident_configuration_correct_errors(
    mut builder: crate::types::builders::PagerDutyIncidentConfigurationBuilder,
) -> crate::types::builders::PagerDutyIncidentConfigurationBuilder {
    if builder.service_id.is_none() {
        builder.service_id = Some(Default::default())
    }
    builder
}

pub(crate) fn pager_duty_incident_detail_correct_errors(
    mut builder: crate::types::builders::PagerDutyIncidentDetailBuilder,
) -> crate::types::builders::PagerDutyIncidentDetailBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}
