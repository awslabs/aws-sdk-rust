// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateIncidentRecord`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_client_token):<br>required: **false**<br><p>A token that ensures that a client calls the operation only once with the specified details.</p><br>
    ///   - [`arn(impl Into<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::arn) / [`set_arn(Option<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the incident record you are updating.</p><br>
    ///   - [`title(impl Into<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::title) / [`set_title(Option<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_title):<br>required: **false**<br><p>A brief description of the incident.</p><br>
    ///   - [`summary(impl Into<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::summary) / [`set_summary(Option<String>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_summary):<br>required: **false**<br><p>A longer description of what occurred during the incident.</p><br>
    ///   - [`impact(i32)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::impact) / [`set_impact(Option<i32>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_impact):<br>required: **false**<br><p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>  <p class="title"> <b>Possible impacts:</b> </p>  <ul>   <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>   <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>   <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>   <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>   <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>  </ul><br>
    ///   - [`status(IncidentRecordStatus)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::status) / [`set_status(Option<IncidentRecordStatus>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_status):<br>required: **false**<br><p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p><br>
    ///   - [`chat_channel(ChatChannel)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::chat_channel) / [`set_chat_channel(Option<ChatChannel>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_chat_channel):<br>required: **false**<br><p>The Chatbot chat channel where responders can collaborate.</p><br>
    ///   - [`notification_targets(NotificationTargetItem)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::notification_targets) / [`set_notification_targets(Option<Vec::<NotificationTargetItem>>)`](crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::set_notification_targets):<br>required: **false**<br><p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>  <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p><br>
    /// - On success, responds with [`UpdateIncidentRecordOutput`](crate::operation::update_incident_record::UpdateIncidentRecordOutput)
    /// - On failure, responds with [`SdkError<UpdateIncidentRecordError>`](crate::operation::update_incident_record::UpdateIncidentRecordError)
    pub fn update_incident_record(&self) -> crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder {
        crate::operation::update_incident_record::builders::UpdateIncidentRecordFluentBuilder::new(self.handle.clone())
    }
}
