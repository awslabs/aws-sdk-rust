// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTimelineEvents`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`incident_record_arn(impl Into<String>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::incident_record_arn) / [`set_incident_record_arn(Option<String>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_incident_record_arn): <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_filters): <p>Filters the timeline events based on the provided conditional values. You can filter timeline events using the following keys:</p>  <ul>   <li> <p> <code>eventTime</code> </p> </li>   <li> <p> <code>eventType</code> </p> </li>  </ul>  <p>Note the following when deciding how to use Filters:</p>  <ul>   <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>   <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>   <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>  </ul>
    ///   - [`sort_by(TimelineEventSort)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::sort_by) / [`set_sort_by(Option<TimelineEventSort>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_sort_by): <p>Sort by the specified key value pair.</p>
    ///   - [`sort_order(SortOrder)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::sort_order) / [`set_sort_order(Option<SortOrder>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_sort_order): <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    ///   - [`max_results(i32)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_max_results): <p>The maximum number of results per page.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::set_next_token): <p>The pagination token to continue to the next page of results.</p>
    /// - On success, responds with [`ListTimelineEventsOutput`](crate::operation::list_timeline_events::ListTimelineEventsOutput) with field(s):
    ///   - [`event_summaries(Option<Vec<EventSummary>>)`](crate::operation::list_timeline_events::ListTimelineEventsOutput::event_summaries): <p>Details about each event that occurred during the incident.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_timeline_events::ListTimelineEventsOutput::next_token): <p>The pagination token to continue to the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListTimelineEventsError>`](crate::operation::list_timeline_events::ListTimelineEventsError)
    pub fn list_timeline_events(
        &self,
    ) -> crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder {
        crate::operation::list_timeline_events::builders::ListTimelineEventsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
