// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateIncidentRecordInput {
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A brief description of the incident.</p>
    pub title: ::std::option::Option<::std::string::String>,
    /// <p>A longer description of what occurred during the incident.</p>
    pub summary: ::std::option::Option<::std::string::String>,
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub impact: ::std::option::Option<i32>,
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub status: ::std::option::Option<crate::types::IncidentRecordStatus>,
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub chat_channel: ::std::option::Option<crate::types::ChatChannel>,
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>,
}
impl UpdateIncidentRecordInput {
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A brief description of the incident.</p>
    pub fn title(&self) -> ::std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn summary(&self) -> ::std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn impact(&self) -> ::std::option::Option<i32> {
        self.impact
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::IncidentRecordStatus> {
        self.status.as_ref()
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn chat_channel(&self) -> ::std::option::Option<&crate::types::ChatChannel> {
        self.chat_channel.as_ref()
    }
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_targets.is_none()`.
    pub fn notification_targets(&self) -> &[crate::types::NotificationTargetItem] {
        self.notification_targets.as_deref().unwrap_or_default()
    }
}
impl UpdateIncidentRecordInput {
    /// Creates a new builder-style object to manufacture [`UpdateIncidentRecordInput`](crate::operation::update_incident_record::UpdateIncidentRecordInput).
    pub fn builder() -> crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder {
        crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder::default()
    }
}

/// A builder for [`UpdateIncidentRecordInput`](crate::operation::update_incident_record::UpdateIncidentRecordInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateIncidentRecordInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) title: ::std::option::Option<::std::string::String>,
    pub(crate) summary: ::std::option::Option<::std::string::String>,
    pub(crate) impact: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::IncidentRecordStatus>,
    pub(crate) chat_channel: ::std::option::Option<crate::types::ChatChannel>,
    pub(crate) notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>,
}
impl UpdateIncidentRecordInputBuilder {
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A brief description of the incident.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.title
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn get_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.summary
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn impact(mut self, input: i32) -> Self {
        self.impact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn set_impact(mut self, input: ::std::option::Option<i32>) -> Self {
        self.impact = input;
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn get_impact(&self) -> &::std::option::Option<i32> {
        &self.impact
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn status(mut self, input: crate::types::IncidentRecordStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IncidentRecordStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IncidentRecordStatus> {
        &self.status
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn chat_channel(mut self, input: crate::types::ChatChannel) -> Self {
        self.chat_channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn set_chat_channel(mut self, input: ::std::option::Option<crate::types::ChatChannel>) -> Self {
        self.chat_channel = input;
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn get_chat_channel(&self) -> &::std::option::Option<crate::types::ChatChannel> {
        &self.chat_channel
    }
    /// Appends an item to `notification_targets`.
    ///
    /// To override the contents of this collection use [`set_notification_targets`](Self::set_notification_targets).
    ///
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn notification_targets(mut self, input: crate::types::NotificationTargetItem) -> Self {
        let mut v = self.notification_targets.unwrap_or_default();
        v.push(input);
        self.notification_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn set_notification_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>) -> Self {
        self.notification_targets = input;
        self
    }
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn get_notification_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>> {
        &self.notification_targets
    }
    /// Consumes the builder and constructs a [`UpdateIncidentRecordInput`](crate::operation::update_incident_record::UpdateIncidentRecordInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_incident_record::UpdateIncidentRecordInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_incident_record::UpdateIncidentRecordInput {
            client_token: self.client_token,
            arn: self.arn,
            title: self.title,
            summary: self.summary,
            impact: self.impact,
            status: self.status,
            chat_channel: self.chat_channel,
            notification_targets: self.notification_targets,
        })
    }
}
