// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_incident_record::_update_incident_record_output::UpdateIncidentRecordOutputBuilder;

pub use crate::operation::update_incident_record::_update_incident_record_input::UpdateIncidentRecordInputBuilder;

impl crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_incident_record::UpdateIncidentRecordOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_incident_record();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateIncidentRecord`.
///
/// <p>Update the details of an incident record. You can use this operation to update an incident record from the defined chat channel. For more information about using actions in chat channels, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/chat.html#chat-interact">Interacting through chat</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateIncidentRecordFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_incident_record::UpdateIncidentRecordOutput,
        crate::operation::update_incident_record::UpdateIncidentRecordError,
    > for UpdateIncidentRecordFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_incident_record::UpdateIncidentRecordOutput,
            crate::operation::update_incident_record::UpdateIncidentRecordError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateIncidentRecordFluentBuilder {
    /// Creates a new `UpdateIncidentRecord`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateIncidentRecord as a reference.
    pub fn as_input(&self) -> &crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_incident_record::UpdateIncidentRecordOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_incident_record::UpdateIncidentRecord::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_incident_record::UpdateIncidentRecord::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_incident_record::UpdateIncidentRecordOutput,
        crate::operation::update_incident_record::UpdateIncidentRecordError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that ensures that a client calls the operation only once with the specified details.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>A brief description of the incident.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.title(input.into());
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_title(input);
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_title()
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.summary(input.into());
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn set_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_summary(input);
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn get_summary(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_summary()
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn impact(mut self, input: i32) -> Self {
        self.inner = self.inner.impact(input);
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn set_impact(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_impact(input);
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. If you provide an impact for an incident, it overwrites the impact provided by the response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn get_impact(&self) -> &::std::option::Option<i32> {
        self.inner.get_impact()
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn status(mut self, input: crate::types::IncidentRecordStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::IncidentRecordStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The status of the incident. Possible statuses are <code>Open</code> or <code>Resolved</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::IncidentRecordStatus> {
        self.inner.get_status()
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn chat_channel(mut self, input: crate::types::ChatChannel) -> Self {
        self.inner = self.inner.chat_channel(input);
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn set_chat_channel(mut self, input: ::std::option::Option<crate::types::ChatChannel>) -> Self {
        self.inner = self.inner.set_chat_channel(input);
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn get_chat_channel(&self) -> &::std::option::Option<crate::types::ChatChannel> {
        self.inner.get_chat_channel()
    }
    ///
    /// Appends an item to `notificationTargets`.
    ///
    /// To override the contents of this collection use [`set_notification_targets`](Self::set_notification_targets).
    ///
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn notification_targets(mut self, input: crate::types::NotificationTargetItem) -> Self {
        self.inner = self.inner.notification_targets(input);
        self
    }
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn set_notification_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>) -> Self {
        self.inner = self.inner.set_notification_targets(input);
        self
    }
    /// <p>The Amazon SNS targets that Incident Manager notifies when a client updates an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn get_notification_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>> {
        self.inner.get_notification_targets()
    }
}
