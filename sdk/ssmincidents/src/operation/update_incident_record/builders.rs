// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_incident_record::_update_incident_record_output::UpdateIncidentRecordOutputBuilder;

pub use crate::operation::update_incident_record::_update_incident_record_input::UpdateIncidentRecordInputBuilder;

/// Fluent builder constructing a request to `UpdateIncidentRecord`.
///
/// <p>Update the details of an incident record. You can use this operation to update an incident record from the defined chat channel. For more information about using actions in chat channels, see <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/chat.html#chat-interact">Interacting through chat</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateIncidentRecordFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_incident_record::builders::UpdateIncidentRecordInputBuilder,
}
impl UpdateIncidentRecordFluentBuilder {
    /// Creates a new `UpdateIncidentRecord`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_incident_record::UpdateIncidentRecord,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_incident_record::UpdateIncidentRecordOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A token that ensures that the operation is called only once with the specified details.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures that the operation is called only once with the specified details.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident record you are updating.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.title(input.into());
        self
    }
    /// <p>A brief description of the incident.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_title(input);
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn summary(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.summary(input.into());
        self
    }
    /// <p>A longer description of what occurred during the incident.</p>
    pub fn set_summary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_summary(input);
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. Providing an impact overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn impact(mut self, input: i32) -> Self {
        self.inner = self.inner.impact(input);
        self
    }
    /// <p>Defines the impact of the incident to customers and applications. Providing an impact overwrites the impact provided by the response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn set_impact(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_impact(input);
        self
    }
    /// <p>The status of the incident. An incident can be <code>Open</code> or <code>Resolved</code>.</p>
    pub fn status(mut self, input: crate::types::IncidentRecordStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The status of the incident. An incident can be <code>Open</code> or <code>Resolved</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::IncidentRecordStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn chat_channel(mut self, input: crate::types::ChatChannel) -> Self {
        self.inner = self.inner.chat_channel(input);
        self
    }
    /// <p>The Chatbot chat channel where responders can collaborate.</p>
    pub fn set_chat_channel(
        mut self,
        input: std::option::Option<crate::types::ChatChannel>,
    ) -> Self {
        self.inner = self.inner.set_chat_channel(input);
        self
    }
    /// Appends an item to `notificationTargets`.
    ///
    /// To override the contents of this collection use [`set_notification_targets`](Self::set_notification_targets).
    ///
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn notification_targets(mut self, input: crate::types::NotificationTargetItem) -> Self {
        self.inner = self.inner.notification_targets(input);
        self
    }
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    /// <p>Using multiple SNS topics creates redundancy in the event that a Region is down during the incident.</p>
    pub fn set_notification_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotificationTargetItem>>,
    ) -> Self {
        self.inner = self.inner.set_notification_targets(input);
        self
    }
}
