// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_response_plan::_update_response_plan_output::UpdateResponsePlanOutputBuilder;

pub use crate::operation::update_response_plan::_update_response_plan_input::UpdateResponsePlanInputBuilder;

/// Fluent builder constructing a request to `UpdateResponsePlan`.
///
/// <p>Updates the specified response plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateResponsePlanFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_response_plan::builders::UpdateResponsePlanInputBuilder,
}
impl UpdateResponsePlanFluentBuilder {
    /// Creates a new `UpdateResponsePlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_response_plan::UpdateResponsePlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_response_plan::UpdateResponsePlanError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_response_plan::UpdateResponsePlanOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_response_plan::UpdateResponsePlanError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn incident_template_title(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.incident_template_title(input.into());
        self
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn set_incident_template_title(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_incident_template_title(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn incident_template_impact(mut self, input: i32) -> Self {
        self.inner = self.inner.incident_template_impact(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn set_incident_template_impact(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_incident_template_impact(input);
        self
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn incident_template_summary(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.incident_template_summary(input.into());
        self
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn set_incident_template_summary(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_incident_template_summary(input);
        self
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn incident_template_dedupe_string(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.incident_template_dedupe_string(input.into());
        self
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn set_incident_template_dedupe_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_incident_template_dedupe_string(input);
        self
    }
    /// Appends an item to `incidentTemplateNotificationTargets`.
    ///
    /// To override the contents of this collection use [`set_incident_template_notification_targets`](Self::set_incident_template_notification_targets).
    ///
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub fn incident_template_notification_targets(
        mut self,
        input: crate::types::NotificationTargetItem,
    ) -> Self {
        self.inner = self.inner.incident_template_notification_targets(input);
        self
    }
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub fn set_incident_template_notification_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotificationTargetItem>>,
    ) -> Self {
        self.inner = self.inner.set_incident_template_notification_targets(input);
        self
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn chat_channel(mut self, input: crate::types::ChatChannel) -> Self {
        self.inner = self.inner.chat_channel(input);
        self
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn set_chat_channel(
        mut self,
        input: std::option::Option<crate::types::ChatChannel>,
    ) -> Self {
        self.inner = self.inner.set_chat_channel(input);
        self
    }
    /// Appends an item to `engagements`.
    ///
    /// To override the contents of this collection use [`set_engagements`](Self::set_engagements).
    ///
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn engagements(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engagements(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn set_engagements(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_engagements(input);
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        self.inner = self.inner.actions(input);
        self
    }
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Action>>,
    ) -> Self {
        self.inner = self.inner.set_actions(input);
        self
    }
    /// Adds a key-value pair to `incidentTemplateTags`.
    ///
    /// To override the contents of this collection use [`set_incident_template_tags`](Self::set_incident_template_tags).
    ///
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn incident_template_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.incident_template_tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn set_incident_template_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_incident_template_tags(input);
        self
    }
    /// Appends an item to `integrations`.
    ///
    /// To override the contents of this collection use [`set_integrations`](Self::set_integrations).
    ///
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub fn integrations(mut self, input: crate::types::Integration) -> Self {
        self.inner = self.inner.integrations(input);
        self
    }
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub fn set_integrations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Integration>>,
    ) -> Self {
        self.inner = self.inner.set_integrations(input);
        self
    }
}
