// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateResponsePlanInput {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub incident_template_title: ::std::option::Option<::std::string::String>,
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub incident_template_impact: ::std::option::Option<i32>,
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub incident_template_summary: ::std::option::Option<::std::string::String>,
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub incident_template_dedupe_string: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub incident_template_notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>,
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub chat_channel: ::std::option::Option<crate::types::ChatChannel>,
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub engagements: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub incident_template_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub integrations: ::std::option::Option<::std::vec::Vec<crate::types::Integration>>,
}
impl UpdateResponsePlanInput {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn incident_template_title(&self) -> ::std::option::Option<&str> {
        self.incident_template_title.as_deref()
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn incident_template_impact(&self) -> ::std::option::Option<i32> {
        self.incident_template_impact
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn incident_template_summary(&self) -> ::std::option::Option<&str> {
        self.incident_template_summary.as_deref()
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn incident_template_dedupe_string(&self) -> ::std::option::Option<&str> {
        self.incident_template_dedupe_string.as_deref()
    }
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.incident_template_notification_targets.is_none()`.
    pub fn incident_template_notification_targets(&self) -> &[crate::types::NotificationTargetItem] {
        self.incident_template_notification_targets.as_deref().unwrap_or_default()
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn chat_channel(&self) -> ::std::option::Option<&crate::types::ChatChannel> {
        self.chat_channel.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.engagements.is_none()`.
    pub fn engagements(&self) -> &[::std::string::String] {
        self.engagements.as_deref().unwrap_or_default()
    }
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::Action] {
        self.actions.as_deref().unwrap_or_default()
    }
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn incident_template_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.incident_template_tags.as_ref()
    }
    /// <p>Information about third-party services integrated into the response plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.integrations.is_none()`.
    pub fn integrations(&self) -> &[crate::types::Integration] {
        self.integrations.as_deref().unwrap_or_default()
    }
}
impl UpdateResponsePlanInput {
    /// Creates a new builder-style object to manufacture [`UpdateResponsePlanInput`](crate::operation::update_response_plan::UpdateResponsePlanInput).
    pub fn builder() -> crate::operation::update_response_plan::builders::UpdateResponsePlanInputBuilder {
        crate::operation::update_response_plan::builders::UpdateResponsePlanInputBuilder::default()
    }
}

/// A builder for [`UpdateResponsePlanInput`](crate::operation::update_response_plan::UpdateResponsePlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateResponsePlanInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) incident_template_title: ::std::option::Option<::std::string::String>,
    pub(crate) incident_template_impact: ::std::option::Option<i32>,
    pub(crate) incident_template_summary: ::std::option::Option<::std::string::String>,
    pub(crate) incident_template_dedupe_string: ::std::option::Option<::std::string::String>,
    pub(crate) incident_template_notification_targets: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>,
    pub(crate) chat_channel: ::std::option::Option<crate::types::ChatChannel>,
    pub(crate) engagements: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::Action>>,
    pub(crate) incident_template_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) integrations: ::std::option::Option<::std::vec::Vec<crate::types::Integration>>,
}
impl UpdateResponsePlanInputBuilder {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The long format name of the response plan. The display name can't contain spaces.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn incident_template_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_template_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn set_incident_template_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_template_title = input;
        self
    }
    /// <p>The short format name of the incident. The title can't contain spaces.</p>
    pub fn get_incident_template_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_template_title
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn incident_template_impact(mut self, input: i32) -> Self {
        self.incident_template_impact = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn set_incident_template_impact(mut self, input: ::std::option::Option<i32>) -> Self {
        self.incident_template_impact = input;
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>5</code> - Severe impact</p> </li>
    /// <li> <p> <code>4</code> - High impact</p> </li>
    /// <li> <p> <code>3</code> - Medium impact</p> </li>
    /// <li> <p> <code>2</code> - Low impact</p> </li>
    /// <li> <p> <code>1</code> - No impact</p> </li>
    /// </ul>
    pub fn get_incident_template_impact(&self) -> &::std::option::Option<i32> {
        &self.incident_template_impact
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn incident_template_summary(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_template_summary = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn set_incident_template_summary(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_template_summary = input;
        self
    }
    /// <p>A brief summary of the incident. This typically contains what has happened, what's currently happening, and next steps.</p>
    pub fn get_incident_template_summary(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_template_summary
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn incident_template_dedupe_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_template_dedupe_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn set_incident_template_dedupe_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_template_dedupe_string = input;
        self
    }
    /// <p>The string Incident Manager uses to prevent duplicate incidents from being created by the same incident in the same account.</p>
    pub fn get_incident_template_dedupe_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_template_dedupe_string
    }
    /// Appends an item to `incident_template_notification_targets`.
    ///
    /// To override the contents of this collection use [`set_incident_template_notification_targets`](Self::set_incident_template_notification_targets).
    ///
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub fn incident_template_notification_targets(mut self, input: crate::types::NotificationTargetItem) -> Self {
        let mut v = self.incident_template_notification_targets.unwrap_or_default();
        v.push(input);
        self.incident_template_notification_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub fn set_incident_template_notification_targets(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>>,
    ) -> Self {
        self.incident_template_notification_targets = input;
        self
    }
    /// <p>The Amazon SNS targets that are notified when updates are made to an incident.</p>
    pub fn get_incident_template_notification_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NotificationTargetItem>> {
        &self.incident_template_notification_targets
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn chat_channel(mut self, input: crate::types::ChatChannel) -> Self {
        self.chat_channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn set_chat_channel(mut self, input: ::std::option::Option<crate::types::ChatChannel>) -> Self {
        self.chat_channel = input;
        self
    }
    /// <p>The Chatbot chat channel used for collaboration during an incident.</p>
    /// <p>Use the empty structure to remove the chat channel from the response plan.</p>
    pub fn get_chat_channel(&self) -> &::std::option::Option<crate::types::ChatChannel> {
        &self.chat_channel
    }
    /// Appends an item to `engagements`.
    ///
    /// To override the contents of this collection use [`set_engagements`](Self::set_engagements).
    ///
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn engagements(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.engagements.unwrap_or_default();
        v.push(input.into());
        self.engagements = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn set_engagements(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.engagements = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the contacts and escalation plans that the response plan engages during an incident.</p>
    pub fn get_engagements(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.engagements
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub fn actions(mut self, input: crate::types::Action) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Action>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>The actions that this response plan takes at the beginning of an incident.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Action>> {
        &self.actions
    }
    /// Adds a key-value pair to `incident_template_tags`.
    ///
    /// To override the contents of this collection use [`set_incident_template_tags`](Self::set_incident_template_tags).
    ///
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn incident_template_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.incident_template_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.incident_template_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn set_incident_template_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.incident_template_tags = input;
        self
    }
    /// <p>Tags to assign to the template. When the <code>StartIncident</code> API action is called, Incident Manager assigns the tags specified in the template to the incident. To call this action, you must also have permission to call the <code>TagResource</code> API action for the incident record resource.</p>
    pub fn get_incident_template_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.incident_template_tags
    }
    /// Appends an item to `integrations`.
    ///
    /// To override the contents of this collection use [`set_integrations`](Self::set_integrations).
    ///
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub fn integrations(mut self, input: crate::types::Integration) -> Self {
        let mut v = self.integrations.unwrap_or_default();
        v.push(input);
        self.integrations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub fn set_integrations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Integration>>) -> Self {
        self.integrations = input;
        self
    }
    /// <p>Information about third-party services integrated into the response plan.</p>
    pub fn get_integrations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Integration>> {
        &self.integrations
    }
    /// Consumes the builder and constructs a [`UpdateResponsePlanInput`](crate::operation::update_response_plan::UpdateResponsePlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_response_plan::UpdateResponsePlanInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_response_plan::UpdateResponsePlanInput {
            client_token: self.client_token,
            arn: self.arn,
            display_name: self.display_name,
            incident_template_title: self.incident_template_title,
            incident_template_impact: self.incident_template_impact,
            incident_template_summary: self.incident_template_summary,
            incident_template_dedupe_string: self.incident_template_dedupe_string,
            incident_template_notification_targets: self.incident_template_notification_targets,
            chat_channel: self.chat_channel,
            engagements: self.engagements,
            actions: self.actions,
            incident_template_tags: self.incident_template_tags,
            integrations: self.integrations,
        })
    }
}
