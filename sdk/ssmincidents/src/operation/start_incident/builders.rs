// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_incident::_start_incident_output::StartIncidentOutputBuilder;

pub use crate::operation::start_incident::_start_incident_input::StartIncidentInputBuilder;

impl crate::operation::start_incident::builders::StartIncidentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_incident::StartIncidentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_incident::StartIncidentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_incident();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartIncident`.
///
/// <p>Used to start an incident from CloudWatch alarms, EventBridge events, or manually.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartIncidentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_incident::builders::StartIncidentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_incident::StartIncidentOutput,
        crate::operation::start_incident::StartIncidentError,
    > for StartIncidentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_incident::StartIncidentOutput,
            crate::operation::start_incident::StartIncidentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartIncidentFluentBuilder {
    /// Creates a new `StartIncident`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartIncident as a reference.
    pub fn as_input(&self) -> &crate::operation::start_incident::builders::StartIncidentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_incident::StartIncidentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_incident::StartIncidentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_incident::StartIncident::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_incident::StartIncident::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_incident::StartIncidentOutput,
        crate::operation::start_incident::StartIncidentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident.</p>
    pub fn response_plan_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.response_plan_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident.</p>
    pub fn set_response_plan_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_response_plan_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident.</p>
    pub fn get_response_plan_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_response_plan_arn()
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan.</p>
    pub fn title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.title(input.into());
        self
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan.</p>
    pub fn set_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_title(input);
        self
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan.</p>
    pub fn get_title(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_title()
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn impact(mut self, input: i32) -> Self {
        self.inner = self.inner.impact(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn set_impact(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_impact(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"><b>Supported impact codes</b></p>
    /// <ul>
    /// <li>
    /// <p><code>1</code> - Critical</p></li>
    /// <li>
    /// <p><code>2</code> - High</p></li>
    /// <li>
    /// <p><code>3</code> - Medium</p></li>
    /// <li>
    /// <p><code>4</code> - Low</p></li>
    /// <li>
    /// <p><code>5</code> - No Impact</p></li>
    /// </ul>
    pub fn get_impact(&self) -> &::std::option::Option<i32> {
        self.inner.get_impact()
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn trigger_details(mut self, input: crate::types::TriggerDetails) -> Self {
        self.inner = self.inner.trigger_details(input);
        self
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn set_trigger_details(mut self, input: ::std::option::Option<crate::types::TriggerDetails>) -> Self {
        self.inner = self.inner.set_trigger_details(input);
        self
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn get_trigger_details(&self) -> &::std::option::Option<crate::types::TriggerDetails> {
        self.inner.get_trigger_details()
    }
    ///
    /// Appends an item to `relatedItems`.
    ///
    /// To override the contents of this collection use [`set_related_items`](Self::set_related_items).
    ///
    /// <p>Add related items to the incident for other responders to use. Related items are Amazon Web Services resources, external links, or files uploaded to an Amazon S3 bucket.</p>
    pub fn related_items(mut self, input: crate::types::RelatedItem) -> Self {
        self.inner = self.inner.related_items(input);
        self
    }
    /// <p>Add related items to the incident for other responders to use. Related items are Amazon Web Services resources, external links, or files uploaded to an Amazon S3 bucket.</p>
    pub fn set_related_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RelatedItem>>) -> Self {
        self.inner = self.inner.set_related_items(input);
        self
    }
    /// <p>Add related items to the incident for other responders to use. Related items are Amazon Web Services resources, external links, or files uploaded to an Amazon S3 bucket.</p>
    pub fn get_related_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RelatedItem>> {
        self.inner.get_related_items()
    }
}
