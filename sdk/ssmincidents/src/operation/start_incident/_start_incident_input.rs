// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartIncidentInput {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. </p>
    #[doc(hidden)]
    pub response_plan_arn: std::option::Option<std::string::String>,
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan. </p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer might aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub impact: std::option::Option<i32>,
    /// <p>Details of what created the incident record in Incident Manager.</p>
    #[doc(hidden)]
    pub trigger_details: std::option::Option<crate::types::TriggerDetails>,
    /// <p>Add related items to the incident for other responders to use. Related items are AWS resources, external links, or files uploaded to an Amazon S3 bucket. </p>
    #[doc(hidden)]
    pub related_items: std::option::Option<std::vec::Vec<crate::types::RelatedItem>>,
}
impl StartIncidentInput {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. </p>
    pub fn response_plan_arn(&self) -> std::option::Option<&str> {
        self.response_plan_arn.as_deref()
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan. </p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer might aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn impact(&self) -> std::option::Option<i32> {
        self.impact
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn trigger_details(&self) -> std::option::Option<&crate::types::TriggerDetails> {
        self.trigger_details.as_ref()
    }
    /// <p>Add related items to the incident for other responders to use. Related items are AWS resources, external links, or files uploaded to an Amazon S3 bucket. </p>
    pub fn related_items(&self) -> std::option::Option<&[crate::types::RelatedItem]> {
        self.related_items.as_deref()
    }
}
impl StartIncidentInput {
    /// Creates a new builder-style object to manufacture [`StartIncidentInput`](crate::operation::start_incident::StartIncidentInput).
    pub fn builder() -> crate::operation::start_incident::builders::StartIncidentInputBuilder {
        crate::operation::start_incident::builders::StartIncidentInputBuilder::default()
    }
}

/// A builder for [`StartIncidentInput`](crate::operation::start_incident::StartIncidentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartIncidentInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) response_plan_arn: std::option::Option<std::string::String>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) impact: std::option::Option<i32>,
    pub(crate) trigger_details: std::option::Option<crate::types::TriggerDetails>,
    pub(crate) related_items: std::option::Option<std::vec::Vec<crate::types::RelatedItem>>,
}
impl StartIncidentInputBuilder {
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>A token ensuring that the operation is called only once with the specified details.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. </p>
    pub fn response_plan_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.response_plan_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response plan that pre-defines summary, chat channels, Amazon SNS topics, runbooks, title, and impact of the incident. </p>
    pub fn set_response_plan_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.response_plan_arn = input;
        self
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan. </p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>Provide a title for the incident. Providing a title overwrites the title provided by the response plan. </p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer might aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn impact(mut self, input: i32) -> Self {
        self.impact = Some(input);
        self
    }
    /// <p>Defines the impact to the customers. Providing an impact overwrites the impact provided by a response plan.</p>
    /// <p class="title"> <b>Possible impacts:</b> </p>
    /// <ul>
    /// <li> <p> <code>1</code> - Critical impact, this typically relates to full application failure that impacts many to all customers. </p> </li>
    /// <li> <p> <code>2</code> - High impact, partial application failure with impact to many customers.</p> </li>
    /// <li> <p> <code>3</code> - Medium impact, the application is providing reduced service to customers.</p> </li>
    /// <li> <p> <code>4</code> - Low impact, customer might aren't impacted by the problem yet.</p> </li>
    /// <li> <p> <code>5</code> - No impact, customers aren't currently impacted but urgent action is needed to avoid impact.</p> </li>
    /// </ul>
    pub fn set_impact(mut self, input: std::option::Option<i32>) -> Self {
        self.impact = input;
        self
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn trigger_details(mut self, input: crate::types::TriggerDetails) -> Self {
        self.trigger_details = Some(input);
        self
    }
    /// <p>Details of what created the incident record in Incident Manager.</p>
    pub fn set_trigger_details(
        mut self,
        input: std::option::Option<crate::types::TriggerDetails>,
    ) -> Self {
        self.trigger_details = input;
        self
    }
    /// Appends an item to `related_items`.
    ///
    /// To override the contents of this collection use [`set_related_items`](Self::set_related_items).
    ///
    /// <p>Add related items to the incident for other responders to use. Related items are AWS resources, external links, or files uploaded to an Amazon S3 bucket. </p>
    pub fn related_items(mut self, input: crate::types::RelatedItem) -> Self {
        let mut v = self.related_items.unwrap_or_default();
        v.push(input);
        self.related_items = Some(v);
        self
    }
    /// <p>Add related items to the incident for other responders to use. Related items are AWS resources, external links, or files uploaded to an Amazon S3 bucket. </p>
    pub fn set_related_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RelatedItem>>,
    ) -> Self {
        self.related_items = input;
        self
    }
    /// Consumes the builder and constructs a [`StartIncidentInput`](crate::operation::start_incident::StartIncidentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_incident::StartIncidentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_incident::StartIncidentInput {
            client_token: self.client_token,
            response_plan_arn: self.response_plan_arn,
            title: self.title,
            impact: self.impact,
            trigger_details: self.trigger_details,
            related_items: self.related_items,
        })
    }
}
