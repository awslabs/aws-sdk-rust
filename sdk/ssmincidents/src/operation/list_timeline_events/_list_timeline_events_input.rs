// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTimelineEventsInput {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub incident_record_arn: ::std::option::Option<::std::string::String>,
    /// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p>
    /// <ul>
    /// <li> <p> <code>eventTime</code> </p> </li>
    /// <li> <p> <code>eventType</code> </p> </li>
    /// </ul>
    /// <p>Note the following when deciding how to use Filters:</p>
    /// <ul>
    /// <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>
    /// <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>
    /// <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>Sort timeline events by the specified key value pair.</p>
    pub sort_by: ::std::option::Option<crate::types::TimelineEventSort>,
    /// <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    pub sort_order: ::std::option::Option<crate::types::SortOrder>,
    /// <p>The maximum number of results per page.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token to continue to the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListTimelineEventsInput {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn incident_record_arn(&self) -> ::std::option::Option<&str> {
        self.incident_record_arn.as_deref()
    }
    /// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p>
    /// <ul>
    /// <li> <p> <code>eventTime</code> </p> </li>
    /// <li> <p> <code>eventType</code> </p> </li>
    /// </ul>
    /// <p>Note the following when deciding how to use Filters:</p>
    /// <ul>
    /// <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>
    /// <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>
    /// <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>Sort timeline events by the specified key value pair.</p>
    pub fn sort_by(&self) -> ::std::option::Option<&crate::types::TimelineEventSort> {
        self.sort_by.as_ref()
    }
    /// <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    pub fn sort_order(&self) -> ::std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The maximum number of results per page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListTimelineEventsInput {
    /// Creates a new builder-style object to manufacture [`ListTimelineEventsInput`](crate::operation::list_timeline_events::ListTimelineEventsInput).
    pub fn builder() -> crate::operation::list_timeline_events::builders::ListTimelineEventsInputBuilder {
        crate::operation::list_timeline_events::builders::ListTimelineEventsInputBuilder::default()
    }
}

/// A builder for [`ListTimelineEventsInput`](crate::operation::list_timeline_events::ListTimelineEventsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTimelineEventsInputBuilder {
    pub(crate) incident_record_arn: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) sort_by: ::std::option::Option<crate::types::TimelineEventSort>,
    pub(crate) sort_order: ::std::option::Option<crate::types::SortOrder>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListTimelineEventsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    /// This field is required.
    pub fn incident_record_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_record_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn set_incident_record_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_record_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn get_incident_record_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_record_arn
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p>
    /// <ul>
    /// <li> <p> <code>eventTime</code> </p> </li>
    /// <li> <p> <code>eventType</code> </p> </li>
    /// </ul>
    /// <p>Note the following when deciding how to use Filters:</p>
    /// <ul>
    /// <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>
    /// <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>
    /// <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p>
    /// <ul>
    /// <li> <p> <code>eventTime</code> </p> </li>
    /// <li> <p> <code>eventType</code> </p> </li>
    /// </ul>
    /// <p>Note the following when deciding how to use Filters:</p>
    /// <ul>
    /// <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>
    /// <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>
    /// <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p>
    /// <ul>
    /// <li> <p> <code>eventTime</code> </p> </li>
    /// <li> <p> <code>eventType</code> </p> </li>
    /// </ul>
    /// <p>Note the following when deciding how to use Filters:</p>
    /// <ul>
    /// <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li>
    /// <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li>
    /// <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>Sort timeline events by the specified key value pair.</p>
    pub fn sort_by(mut self, input: crate::types::TimelineEventSort) -> Self {
        self.sort_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sort timeline events by the specified key value pair.</p>
    pub fn set_sort_by(mut self, input: ::std::option::Option<crate::types::TimelineEventSort>) -> Self {
        self.sort_by = input;
        self
    }
    /// <p>Sort timeline events by the specified key value pair.</p>
    pub fn get_sort_by(&self) -> &::std::option::Option<crate::types::TimelineEventSort> {
        &self.sort_by
    }
    /// <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    pub fn set_sort_order(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.</p>
    pub fn get_sort_order(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.sort_order
    }
    /// <p>The maximum number of results per page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results per page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results per page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token to continue to the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListTimelineEventsInput`](crate::operation::list_timeline_events::ListTimelineEventsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_timeline_events::ListTimelineEventsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_timeline_events::ListTimelineEventsInput {
            incident_record_arn: self.incident_record_arn,
            filters: self.filters,
            sort_by: self.sort_by,
            sort_order: self.sort_order,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
