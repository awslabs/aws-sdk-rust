// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteTimelineEventInput {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub incident_record_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.</p>
    pub event_id: ::std::option::Option<::std::string::String>,
}
impl DeleteTimelineEventInput {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn incident_record_arn(&self) -> ::std::option::Option<&str> {
        self.incident_record_arn.as_deref()
    }
    /// <p>The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.</p>
    pub fn event_id(&self) -> ::std::option::Option<&str> {
        self.event_id.as_deref()
    }
}
impl DeleteTimelineEventInput {
    /// Creates a new builder-style object to manufacture [`DeleteTimelineEventInput`](crate::operation::delete_timeline_event::DeleteTimelineEventInput).
    pub fn builder() -> crate::operation::delete_timeline_event::builders::DeleteTimelineEventInputBuilder {
        crate::operation::delete_timeline_event::builders::DeleteTimelineEventInputBuilder::default()
    }
}

/// A builder for [`DeleteTimelineEventInput`](crate::operation::delete_timeline_event::DeleteTimelineEventInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteTimelineEventInputBuilder {
    pub(crate) incident_record_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_id: ::std::option::Option<::std::string::String>,
}
impl DeleteTimelineEventInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    /// This field is required.
    pub fn incident_record_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.incident_record_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn set_incident_record_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.incident_record_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the incident that includes the timeline event.</p>
    pub fn get_incident_record_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.incident_record_arn
    }
    /// <p>The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.</p>
    /// This field is required.
    pub fn event_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.</p>
    pub fn set_event_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The ID of the event to update. You can use <code>ListTimelineEvents</code> to find an event's ID.</p>
    pub fn get_event_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_id
    }
    /// Consumes the builder and constructs a [`DeleteTimelineEventInput`](crate::operation::delete_timeline_event::DeleteTimelineEventInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_timeline_event::DeleteTimelineEventInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_timeline_event::DeleteTimelineEventInput {
            incident_record_arn: self.incident_record_arn,
            event_id: self.event_id,
        })
    }
}
