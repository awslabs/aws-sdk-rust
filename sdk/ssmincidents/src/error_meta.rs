// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You don't have sufficient access to perform this operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Updating or deleting a resource causes an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Request references a resource which doesn't exist. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_replication_set::CreateReplicationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_replication_set::CreateReplicationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_set::CreateReplicationSetError> for Error {
    fn from(err: crate::operation::create_replication_set::CreateReplicationSetError) -> Self {
        match err {
            crate::operation::create_replication_set::CreateReplicationSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_replication_set::CreateReplicationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_response_plan::CreateResponsePlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_response_plan::CreateResponsePlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_response_plan::CreateResponsePlanError> for Error {
    fn from(err: crate::operation::create_response_plan::CreateResponsePlanError) -> Self {
        match err {
            crate::operation::create_response_plan::CreateResponsePlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_response_plan::CreateResponsePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_timeline_event::CreateTimelineEventError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_timeline_event::CreateTimelineEventError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_timeline_event::CreateTimelineEventError> for Error {
    fn from(err: crate::operation::create_timeline_event::CreateTimelineEventError) -> Self {
        match err {
            crate::operation::create_timeline_event::CreateTimelineEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_timeline_event::CreateTimelineEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_incident_record::DeleteIncidentRecordError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_incident_record::DeleteIncidentRecordError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_incident_record::DeleteIncidentRecordError> for Error {
    fn from(err: crate::operation::delete_incident_record::DeleteIncidentRecordError) -> Self {
        match err {
            crate::operation::delete_incident_record::DeleteIncidentRecordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_incident_record::DeleteIncidentRecordError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_incident_record::DeleteIncidentRecordError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_incident_record::DeleteIncidentRecordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_incident_record::DeleteIncidentRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_replication_set::DeleteReplicationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_replication_set::DeleteReplicationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_set::DeleteReplicationSetError> for Error {
    fn from(err: crate::operation::delete_replication_set::DeleteReplicationSetError) -> Self {
        match err {
            crate::operation::delete_replication_set::DeleteReplicationSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_replication_set::DeleteReplicationSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_replication_set::DeleteReplicationSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_replication_set::DeleteReplicationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_replication_set::DeleteReplicationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_replication_set::DeleteReplicationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_policy::DeleteResourcePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_policy::DeleteResourcePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_response_plan::DeleteResponsePlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_response_plan::DeleteResponsePlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_response_plan::DeleteResponsePlanError> for Error {
    fn from(err: crate::operation::delete_response_plan::DeleteResponsePlanError) -> Self {
        match err {
            crate::operation::delete_response_plan::DeleteResponsePlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_response_plan::DeleteResponsePlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_response_plan::DeleteResponsePlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_response_plan::DeleteResponsePlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_response_plan::DeleteResponsePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_timeline_event::DeleteTimelineEventError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_timeline_event::DeleteTimelineEventError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_timeline_event::DeleteTimelineEventError> for Error {
    fn from(err: crate::operation::delete_timeline_event::DeleteTimelineEventError) -> Self {
        match err {
            crate::operation::delete_timeline_event::DeleteTimelineEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_timeline_event::DeleteTimelineEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_timeline_event::DeleteTimelineEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_timeline_event::DeleteTimelineEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_timeline_event::DeleteTimelineEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_incident_record::GetIncidentRecordError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_incident_record::GetIncidentRecordError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_incident_record::GetIncidentRecordError> for Error {
    fn from(err: crate::operation::get_incident_record::GetIncidentRecordError) -> Self {
        match err {
            crate::operation::get_incident_record::GetIncidentRecordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_incident_record::GetIncidentRecordError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_incident_record::GetIncidentRecordError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_incident_record::GetIncidentRecordError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_incident_record::GetIncidentRecordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_incident_record::GetIncidentRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_replication_set::GetReplicationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_replication_set::GetReplicationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_replication_set::GetReplicationSetError> for Error {
    fn from(err: crate::operation::get_replication_set::GetReplicationSetError) -> Self {
        match err {
            crate::operation::get_replication_set::GetReplicationSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_replication_set::GetReplicationSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_replication_set::GetReplicationSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_replication_set::GetReplicationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_replication_set::GetReplicationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_replication_set::GetReplicationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_policies::GetResourcePoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_resource_policies::GetResourcePoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_policies::GetResourcePoliciesError> for Error {
    fn from(err: crate::operation::get_resource_policies::GetResourcePoliciesError) -> Self {
        match err {
            crate::operation::get_resource_policies::GetResourcePoliciesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resource_policies::GetResourcePoliciesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_resource_policies::GetResourcePoliciesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_resource_policies::GetResourcePoliciesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resource_policies::GetResourcePoliciesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resource_policies::GetResourcePoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_response_plan::GetResponsePlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_response_plan::GetResponsePlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_response_plan::GetResponsePlanError> for Error {
    fn from(err: crate::operation::get_response_plan::GetResponsePlanError) -> Self {
        match err {
            crate::operation::get_response_plan::GetResponsePlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_response_plan::GetResponsePlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_response_plan::GetResponsePlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_response_plan::GetResponsePlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_response_plan::GetResponsePlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_response_plan::GetResponsePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_timeline_event::GetTimelineEventError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_timeline_event::GetTimelineEventError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_timeline_event::GetTimelineEventError> for Error {
    fn from(err: crate::operation::get_timeline_event::GetTimelineEventError) -> Self {
        match err {
            crate::operation::get_timeline_event::GetTimelineEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_timeline_event::GetTimelineEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_timeline_event::GetTimelineEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_timeline_event::GetTimelineEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_timeline_event::GetTimelineEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_timeline_event::GetTimelineEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_incident_records::ListIncidentRecordsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_incident_records::ListIncidentRecordsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_incident_records::ListIncidentRecordsError> for Error {
    fn from(err: crate::operation::list_incident_records::ListIncidentRecordsError) -> Self {
        match err {
            crate::operation::list_incident_records::ListIncidentRecordsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_incident_records::ListIncidentRecordsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_incident_records::ListIncidentRecordsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_incident_records::ListIncidentRecordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_incident_records::ListIncidentRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_related_items::ListRelatedItemsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_related_items::ListRelatedItemsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_related_items::ListRelatedItemsError> for Error {
    fn from(err: crate::operation::list_related_items::ListRelatedItemsError) -> Self {
        match err {
            crate::operation::list_related_items::ListRelatedItemsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_related_items::ListRelatedItemsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_related_items::ListRelatedItemsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_related_items::ListRelatedItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_related_items::ListRelatedItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_replication_sets::ListReplicationSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_replication_sets::ListReplicationSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_replication_sets::ListReplicationSetsError> for Error {
    fn from(err: crate::operation::list_replication_sets::ListReplicationSetsError) -> Self {
        match err {
            crate::operation::list_replication_sets::ListReplicationSetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_replication_sets::ListReplicationSetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_replication_sets::ListReplicationSetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_replication_sets::ListReplicationSetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_replication_sets::ListReplicationSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_response_plans::ListResponsePlansError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_response_plans::ListResponsePlansError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_response_plans::ListResponsePlansError> for Error {
    fn from(err: crate::operation::list_response_plans::ListResponsePlansError) -> Self {
        match err {
            crate::operation::list_response_plans::ListResponsePlansError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_response_plans::ListResponsePlansError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_response_plans::ListResponsePlansError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_response_plans::ListResponsePlansError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_response_plans::ListResponsePlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_timeline_events::ListTimelineEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_timeline_events::ListTimelineEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_timeline_events::ListTimelineEventsError> for Error {
    fn from(err: crate::operation::list_timeline_events::ListTimelineEventsError) -> Self {
        match err {
            crate::operation::list_timeline_events::ListTimelineEventsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_timeline_events::ListTimelineEventsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_timeline_events::ListTimelineEventsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_timeline_events::ListTimelineEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_timeline_events::ListTimelineEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_resource_policy::PutResourcePolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::start_incident::StartIncidentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_incident::StartIncidentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_incident::StartIncidentError> for Error {
    fn from(err: crate::operation::start_incident::StartIncidentError) -> Self {
        match err {
            crate::operation::start_incident::StartIncidentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_incident::StartIncidentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_incident::StartIncidentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::start_incident::StartIncidentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::start_incident::StartIncidentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_incident::StartIncidentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_incident::StartIncidentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_deletion_protection::UpdateDeletionProtectionError> for Error {
    fn from(
        err: crate::operation::update_deletion_protection::UpdateDeletionProtectionError,
    ) -> Self {
        match err {
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_deletion_protection::UpdateDeletionProtectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_incident_record::UpdateIncidentRecordError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_incident_record::UpdateIncidentRecordError> for Error {
    fn from(err: crate::operation::update_incident_record::UpdateIncidentRecordError) -> Self {
        match err {
            crate::operation::update_incident_record::UpdateIncidentRecordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_incident_record::UpdateIncidentRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_related_items::UpdateRelatedItemsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_related_items::UpdateRelatedItemsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_related_items::UpdateRelatedItemsError> for Error {
    fn from(err: crate::operation::update_related_items::UpdateRelatedItemsError) -> Self {
        match err {
            crate::operation::update_related_items::UpdateRelatedItemsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_related_items::UpdateRelatedItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_replication_set::UpdateReplicationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_replication_set::UpdateReplicationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_replication_set::UpdateReplicationSetError> for Error {
    fn from(err: crate::operation::update_replication_set::UpdateReplicationSetError) -> Self {
        match err {
            crate::operation::update_replication_set::UpdateReplicationSetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_replication_set::UpdateReplicationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_response_plan::UpdateResponsePlanError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_response_plan::UpdateResponsePlanError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_response_plan::UpdateResponsePlanError> for Error {
    fn from(err: crate::operation::update_response_plan::UpdateResponsePlanError) -> Self {
        match err {
            crate::operation::update_response_plan::UpdateResponsePlanError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_response_plan::UpdateResponsePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_timeline_event::UpdateTimelineEventError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_timeline_event::UpdateTimelineEventError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_timeline_event::UpdateTimelineEventError> for Error {
    fn from(err: crate::operation::update_timeline_event::UpdateTimelineEventError) -> Self {
        match err {
            crate::operation::update_timeline_event::UpdateTimelineEventError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_timeline_event::UpdateTimelineEventError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
