// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_incident_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_incident::StartIncidentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.impact {
        object.key("impact").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.related_items {
        let mut array_4 = object.key("relatedItems").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_related_item::ser_related_item(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.response_plan_arn {
        object.key("responsePlanArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.title {
        object.key("title").string(var_8.as_str());
    }
    if let Some(var_9) = &input.trigger_details {
        #[allow(unused_mut)]
        let mut object_10 = object.key("triggerDetails").start_object();
        crate::protocol_serde::shape_trigger_details::ser_trigger_details(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
