// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_grpc_metadata_match_method(
    object_4: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GrpcMetadataMatchMethod,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::types::GrpcMetadataMatchMethod::Exact(inner) => {
            object_4.key("exact").string(inner.as_str());
        }
        crate::types::GrpcMetadataMatchMethod::Regex(inner) => {
            object_4.key("regex").string(inner.as_str());
        }
        crate::types::GrpcMetadataMatchMethod::Range(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("range").start_object();
            crate::protocol_serde::shape_match_range::ser_match_range(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::GrpcMetadataMatchMethod::Prefix(inner) => {
            object_4.key("prefix").string(inner.as_str());
        }
        crate::types::GrpcMetadataMatchMethod::Suffix(inner) => {
            object_4.key("suffix").string(inner.as_str());
        }
        crate::types::GrpcMetadataMatchMethod::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant(
                    "GrpcMetadataMatchMethod",
                ),
            )
        }
    }
    Ok(())
}

pub(crate) fn de_grpc_metadata_match_method<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::GrpcMetadataMatchMethod>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if variant.is_some() {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(
                                "encountered mixed variants in union",
                            ),
                        );
                    }
                    variant = match key.to_unescaped()?.as_ref() {
                        "exact" => Some(crate::types::GrpcMetadataMatchMethod::Exact(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?
                            .unwrap_or_default(),
                        )),
                        "regex" => Some(crate::types::GrpcMetadataMatchMethod::Regex(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?
                            .unwrap_or_default(),
                        )),
                        "range" => Some(crate::types::GrpcMetadataMatchMethod::Range(
                            crate::protocol_serde::shape_match_range::de_match_range(tokens)?
                                .ok_or_else(|| {
                                    aws_smithy_json::deserialize::error::DeserializeError::custom(
                                        "value for 'range' cannot be null",
                                    )
                                })?,
                        )),
                        "prefix" => Some(crate::types::GrpcMetadataMatchMethod::Prefix(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?
                            .unwrap_or_default(),
                        )),
                        "suffix" => Some(crate::types::GrpcMetadataMatchMethod::Suffix(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?
                            .unwrap_or_default(),
                        )),
                        _ => {
                            aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::GrpcMetadataMatchMethod::Unknown)
                        }
                    };
                }
                other => {
                    return Err(
                        aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )),
                    )
                }
            }
        },
        _ => {
            return Err(
                aws_smithy_json::deserialize::error::DeserializeError::custom(
                    "expected start object or null",
                ),
            )
        }
    }
    Ok(variant)
}
