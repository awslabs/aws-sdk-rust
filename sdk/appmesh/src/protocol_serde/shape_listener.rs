// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_listener(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Listener,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.port_mapping {
        #[allow(unused_mut)]
        let mut object_2 = object.key("portMapping").start_object();
        crate::protocol_serde::shape_port_mapping::ser_port_mapping(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.tls {
        #[allow(unused_mut)]
        let mut object_4 = object.key("tls").start_object();
        crate::protocol_serde::shape_listener_tls::ser_listener_tls(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.health_check {
        #[allow(unused_mut)]
        let mut object_6 = object.key("healthCheck").start_object();
        crate::protocol_serde::shape_health_check_policy::ser_health_check_policy(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.timeout {
        #[allow(unused_mut)]
        let mut object_8 = object.key("timeout").start_object();
        crate::protocol_serde::shape_listener_timeout::ser_listener_timeout(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.outlier_detection {
        #[allow(unused_mut)]
        let mut object_10 = object.key("outlierDetection").start_object();
        crate::protocol_serde::shape_outlier_detection::ser_outlier_detection(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.connection_pool {
        #[allow(unused_mut)]
        let mut object_12 = object.key("connectionPool").start_object();
        crate::protocol_serde::shape_virtual_node_connection_pool::ser_virtual_node_connection_pool(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_listener<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Listener>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ListenerBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "portMapping" => {
                            builder = builder.set_port_mapping(crate::protocol_serde::shape_port_mapping::de_port_mapping(tokens)?);
                        }
                        "tls" => {
                            builder = builder.set_tls(crate::protocol_serde::shape_listener_tls::de_listener_tls(tokens)?);
                        }
                        "healthCheck" => {
                            builder = builder.set_health_check(crate::protocol_serde::shape_health_check_policy::de_health_check_policy(tokens)?);
                        }
                        "timeout" => {
                            builder = builder.set_timeout(crate::protocol_serde::shape_listener_timeout::de_listener_timeout(tokens)?);
                        }
                        "outlierDetection" => {
                            builder = builder.set_outlier_detection(crate::protocol_serde::shape_outlier_detection::de_outlier_detection(tokens)?);
                        }
                        "connectionPool" => {
                            builder = builder.set_connection_pool(
                                crate::protocol_serde::shape_virtual_node_connection_pool::de_virtual_node_connection_pool(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::listener_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
