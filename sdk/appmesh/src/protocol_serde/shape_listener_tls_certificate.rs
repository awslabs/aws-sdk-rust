// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_listener_tls_certificate(
    object_3: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListenerTlsCertificate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    match input {
        crate::model::ListenerTlsCertificate::Acm(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_3.key("acm").start_object();
            crate::protocol_serde::shape_listener_tls_acm_certificate::ser_listener_tls_acm_certificate(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::model::ListenerTlsCertificate::File(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_3.key("file").start_object();
            crate::protocol_serde::shape_listener_tls_file_certificate::ser_listener_tls_file_certificate(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::model::ListenerTlsCertificate::Sds(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_3.key("sds").start_object();
            crate::protocol_serde::shape_listener_tls_sds_certificate::ser_listener_tls_sds_certificate(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::model::ListenerTlsCertificate::Unknown => {
            return Err(
                aws_smithy_http::operation::error::SerializationError::unknown_variant(
                    "ListenerTlsCertificate",
                ),
            )
        }
    }
    Ok(())
}

pub(crate) fn de_listener_tls_certificate<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::model::ListenerTlsCertificate>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if variant.is_some() {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(
                                "encountered mixed variants in union",
                            ),
                        );
                    }
                    variant = match key.to_unescaped()?.as_ref() {
                            "acm" => {
                                Some(crate::model::ListenerTlsCertificate::Acm(
                                    crate::protocol_serde::shape_listener_tls_acm_certificate::de_listener_tls_acm_certificate(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'acm' cannot be null"))?
                                ))
                            }
                            "file" => {
                                Some(crate::model::ListenerTlsCertificate::File(
                                    crate::protocol_serde::shape_listener_tls_file_certificate::de_listener_tls_file_certificate(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'file' cannot be null"))?
                                ))
                            }
                            "sds" => {
                                Some(crate::model::ListenerTlsCertificate::Sds(
                                    crate::protocol_serde::shape_listener_tls_sds_certificate::de_listener_tls_sds_certificate(tokens)?
                                    .ok_or_else(|| aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'sds' cannot be null"))?
                                ))
                            }
                            _ => {
                                                                      aws_smithy_json::deserialize::token::skip_value(tokens)?;
                                                                      Some(crate::model::ListenerTlsCertificate::Unknown)
                                                                    }
                        };
                }
                other => {
                    return Err(
                        aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )),
                    )
                }
            }
        },
        _ => {
            return Err(
                aws_smithy_json::deserialize::error::DeserializeError::custom(
                    "expected start object or null",
                ),
            )
        }
    }
    Ok(variant)
}
