// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a gateway route returned by a describe operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GatewayRouteData {
    /// <p>The name of the service mesh that the resource resides in. </p>
    #[doc(hidden)]
    pub mesh_name: std::option::Option<std::string::String>,
    /// <p>The name of the gateway route.</p>
    #[doc(hidden)]
    pub gateway_route_name: std::option::Option<std::string::String>,
    /// <p>The virtual gateway that the gateway route is associated with.</p>
    #[doc(hidden)]
    pub virtual_gateway_name: std::option::Option<std::string::String>,
    /// <p>The specifications of the gateway route.</p>
    #[doc(hidden)]
    pub spec: std::option::Option<crate::types::GatewayRouteSpec>,
    /// <p>An object that represents metadata for a resource.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<crate::types::ResourceMetadata>,
    /// <p>The status of the gateway route.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::GatewayRouteStatus>,
}
impl GatewayRouteData {
    /// <p>The name of the service mesh that the resource resides in. </p>
    pub fn mesh_name(&self) -> std::option::Option<&str> {
        self.mesh_name.as_deref()
    }
    /// <p>The name of the gateway route.</p>
    pub fn gateway_route_name(&self) -> std::option::Option<&str> {
        self.gateway_route_name.as_deref()
    }
    /// <p>The virtual gateway that the gateway route is associated with.</p>
    pub fn virtual_gateway_name(&self) -> std::option::Option<&str> {
        self.virtual_gateway_name.as_deref()
    }
    /// <p>The specifications of the gateway route.</p>
    pub fn spec(&self) -> std::option::Option<&crate::types::GatewayRouteSpec> {
        self.spec.as_ref()
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn metadata(&self) -> std::option::Option<&crate::types::ResourceMetadata> {
        self.metadata.as_ref()
    }
    /// <p>The status of the gateway route.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::GatewayRouteStatus> {
        self.status.as_ref()
    }
}
impl GatewayRouteData {
    /// Creates a new builder-style object to manufacture [`GatewayRouteData`](crate::types::GatewayRouteData).
    pub fn builder() -> crate::types::builders::GatewayRouteDataBuilder {
        crate::types::builders::GatewayRouteDataBuilder::default()
    }
}

/// A builder for [`GatewayRouteData`](crate::types::GatewayRouteData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GatewayRouteDataBuilder {
    pub(crate) mesh_name: std::option::Option<std::string::String>,
    pub(crate) gateway_route_name: std::option::Option<std::string::String>,
    pub(crate) virtual_gateway_name: std::option::Option<std::string::String>,
    pub(crate) spec: std::option::Option<crate::types::GatewayRouteSpec>,
    pub(crate) metadata: std::option::Option<crate::types::ResourceMetadata>,
    pub(crate) status: std::option::Option<crate::types::GatewayRouteStatus>,
}
impl GatewayRouteDataBuilder {
    /// <p>The name of the service mesh that the resource resides in. </p>
    pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.mesh_name = Some(input.into());
        self
    }
    /// <p>The name of the service mesh that the resource resides in. </p>
    pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// <p>The name of the gateway route.</p>
    pub fn gateway_route_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_route_name = Some(input.into());
        self
    }
    /// <p>The name of the gateway route.</p>
    pub fn set_gateway_route_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.gateway_route_name = input;
        self
    }
    /// <p>The virtual gateway that the gateway route is associated with.</p>
    pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_gateway_name = Some(input.into());
        self
    }
    /// <p>The virtual gateway that the gateway route is associated with.</p>
    pub fn set_virtual_gateway_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_gateway_name = input;
        self
    }
    /// <p>The specifications of the gateway route.</p>
    pub fn spec(mut self, input: crate::types::GatewayRouteSpec) -> Self {
        self.spec = Some(input);
        self
    }
    /// <p>The specifications of the gateway route.</p>
    pub fn set_spec(mut self, input: std::option::Option<crate::types::GatewayRouteSpec>) -> Self {
        self.spec = input;
        self
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn metadata(mut self, input: crate::types::ResourceMetadata) -> Self {
        self.metadata = Some(input);
        self
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<crate::types::ResourceMetadata>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The status of the gateway route.</p>
    pub fn status(mut self, input: crate::types::GatewayRouteStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the gateway route.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::GatewayRouteStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`GatewayRouteData`](crate::types::GatewayRouteData).
    pub fn build(self) -> crate::types::GatewayRouteData {
        crate::types::GatewayRouteData {
            mesh_name: self.mesh_name,
            gateway_route_name: self.gateway_route_name,
            virtual_gateway_name: self.virtual_gateway_name,
            spec: self.spec,
            metadata: self.metadata,
            status: self.status,
        }
    }
}
