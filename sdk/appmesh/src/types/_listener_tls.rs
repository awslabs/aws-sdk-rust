// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the Transport Layer Security (TLS) properties for a listener.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListenerTls {
    /// <p>Specify one of the following modes.</p>
    /// <ul>
    /// <li> <p> <b></b>STRICT – Listener only accepts connections with TLS enabled. </p> </li>
    /// <li> <p> <b></b>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li>
    /// <li> <p> <b></b>DISABLED – Listener only accepts connections without TLS. </p> </li>
    /// </ul>
    pub mode: crate::types::ListenerTlsMode,
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    pub certificate: ::std::option::Option<crate::types::ListenerTlsCertificate>,
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    pub validation: ::std::option::Option<crate::types::ListenerTlsValidationContext>,
}
impl ListenerTls {
    /// <p>Specify one of the following modes.</p>
    /// <ul>
    /// <li> <p> <b></b>STRICT – Listener only accepts connections with TLS enabled. </p> </li>
    /// <li> <p> <b></b>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li>
    /// <li> <p> <b></b>DISABLED – Listener only accepts connections without TLS. </p> </li>
    /// </ul>
    pub fn mode(&self) -> &crate::types::ListenerTlsMode {
        &self.mode
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    pub fn certificate(&self) -> ::std::option::Option<&crate::types::ListenerTlsCertificate> {
        self.certificate.as_ref()
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    pub fn validation(&self) -> ::std::option::Option<&crate::types::ListenerTlsValidationContext> {
        self.validation.as_ref()
    }
}
impl ListenerTls {
    /// Creates a new builder-style object to manufacture [`ListenerTls`](crate::types::ListenerTls).
    pub fn builder() -> crate::types::builders::ListenerTlsBuilder {
        crate::types::builders::ListenerTlsBuilder::default()
    }
}

/// A builder for [`ListenerTls`](crate::types::ListenerTls).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListenerTlsBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::ListenerTlsMode>,
    pub(crate) certificate: ::std::option::Option<crate::types::ListenerTlsCertificate>,
    pub(crate) validation: ::std::option::Option<crate::types::ListenerTlsValidationContext>,
}
impl ListenerTlsBuilder {
    /// <p>Specify one of the following modes.</p>
    /// <ul>
    /// <li> <p> <b></b>STRICT – Listener only accepts connections with TLS enabled. </p> </li>
    /// <li> <p> <b></b>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li>
    /// <li> <p> <b></b>DISABLED – Listener only accepts connections without TLS. </p> </li>
    /// </ul>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ListenerTlsMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify one of the following modes.</p>
    /// <ul>
    /// <li> <p> <b></b>STRICT – Listener only accepts connections with TLS enabled. </p> </li>
    /// <li> <p> <b></b>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li>
    /// <li> <p> <b></b>DISABLED – Listener only accepts connections without TLS. </p> </li>
    /// </ul>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ListenerTlsMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Specify one of the following modes.</p>
    /// <ul>
    /// <li> <p> <b></b>STRICT – Listener only accepts connections with TLS enabled. </p> </li>
    /// <li> <p> <b></b>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li>
    /// <li> <p> <b></b>DISABLED – Listener only accepts connections without TLS. </p> </li>
    /// </ul>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ListenerTlsMode> {
        &self.mode
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    /// This field is required.
    pub fn certificate(mut self, input: crate::types::ListenerTlsCertificate) -> Self {
        self.certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    pub fn set_certificate(mut self, input: ::std::option::Option<crate::types::ListenerTlsCertificate>) -> Self {
        self.certificate = input;
        self
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) certificate.</p>
    pub fn get_certificate(&self) -> &::std::option::Option<crate::types::ListenerTlsCertificate> {
        &self.certificate
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    pub fn validation(mut self, input: crate::types::ListenerTlsValidationContext) -> Self {
        self.validation = ::std::option::Option::Some(input);
        self
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    pub fn set_validation(mut self, input: ::std::option::Option<crate::types::ListenerTlsValidationContext>) -> Self {
        self.validation = input;
        self
    }
    /// <p>A reference to an object that represents a listener's Transport Layer Security (TLS) validation context.</p>
    pub fn get_validation(&self) -> &::std::option::Option<crate::types::ListenerTlsValidationContext> {
        &self.validation
    }
    /// Consumes the builder and constructs a [`ListenerTls`](crate::types::ListenerTls).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::ListenerTlsBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::ListenerTls, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListenerTls {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building ListenerTls",
                )
            })?,
            certificate: self.certificate,
            validation: self.validation,
        })
    }
}
