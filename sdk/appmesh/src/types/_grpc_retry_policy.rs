// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a retry policy. Specify at least one value for at least one of the types of <code>RetryEvents</code>, a value for <code>maxRetries</code>, and a value for <code>perRetryTimeout</code>. Both <code>server-error</code> and <code>gateway-error</code> under <code>httpRetryEvents</code> include the Envoy <code>reset</code> policy. For more information on the <code>reset</code> policy, see the <a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on">Envoy documentation</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GrpcRetryPolicy {
    /// <p>The timeout for each retry attempt.</p>
    pub per_retry_timeout: ::std::option::Option<crate::types::Duration>,
    /// <p>The maximum number of retry attempts.</p>
    pub max_retries: i64,
    /// <p>Specify at least one of the following values.</p>
    /// <ul>
    /// <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li>
    /// <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li>
    /// <li> <p> <b>client-error</b> – HTTP status code 409</p> </li>
    /// <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li>
    /// </ul>
    pub http_retry_events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
    pub tcp_retry_events: ::std::option::Option<::std::vec::Vec<crate::types::TcpRetryPolicyEvent>>,
    /// <p>Specify at least one of the valid values.</p>
    pub grpc_retry_events: ::std::option::Option<::std::vec::Vec<crate::types::GrpcRetryPolicyEvent>>,
}
impl GrpcRetryPolicy {
    /// <p>The timeout for each retry attempt.</p>
    pub fn per_retry_timeout(&self) -> ::std::option::Option<&crate::types::Duration> {
        self.per_retry_timeout.as_ref()
    }
    /// <p>The maximum number of retry attempts.</p>
    pub fn max_retries(&self) -> i64 {
        self.max_retries
    }
    /// <p>Specify at least one of the following values.</p>
    /// <ul>
    /// <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li>
    /// <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li>
    /// <li> <p> <b>client-error</b> – HTTP status code 409</p> </li>
    /// <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.http_retry_events.is_none()`.
    pub fn http_retry_events(&self) -> &[::std::string::String] {
        self.http_retry_events.as_deref().unwrap_or_default()
    }
    /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tcp_retry_events.is_none()`.
    pub fn tcp_retry_events(&self) -> &[crate::types::TcpRetryPolicyEvent] {
        self.tcp_retry_events.as_deref().unwrap_or_default()
    }
    /// <p>Specify at least one of the valid values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.grpc_retry_events.is_none()`.
    pub fn grpc_retry_events(&self) -> &[crate::types::GrpcRetryPolicyEvent] {
        self.grpc_retry_events.as_deref().unwrap_or_default()
    }
}
impl GrpcRetryPolicy {
    /// Creates a new builder-style object to manufacture [`GrpcRetryPolicy`](crate::types::GrpcRetryPolicy).
    pub fn builder() -> crate::types::builders::GrpcRetryPolicyBuilder {
        crate::types::builders::GrpcRetryPolicyBuilder::default()
    }
}

/// A builder for [`GrpcRetryPolicy`](crate::types::GrpcRetryPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GrpcRetryPolicyBuilder {
    pub(crate) per_retry_timeout: ::std::option::Option<crate::types::Duration>,
    pub(crate) max_retries: ::std::option::Option<i64>,
    pub(crate) http_retry_events: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tcp_retry_events: ::std::option::Option<::std::vec::Vec<crate::types::TcpRetryPolicyEvent>>,
    pub(crate) grpc_retry_events: ::std::option::Option<::std::vec::Vec<crate::types::GrpcRetryPolicyEvent>>,
}
impl GrpcRetryPolicyBuilder {
    /// <p>The timeout for each retry attempt.</p>
    /// This field is required.
    pub fn per_retry_timeout(mut self, input: crate::types::Duration) -> Self {
        self.per_retry_timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timeout for each retry attempt.</p>
    pub fn set_per_retry_timeout(mut self, input: ::std::option::Option<crate::types::Duration>) -> Self {
        self.per_retry_timeout = input;
        self
    }
    /// <p>The timeout for each retry attempt.</p>
    pub fn get_per_retry_timeout(&self) -> &::std::option::Option<crate::types::Duration> {
        &self.per_retry_timeout
    }
    /// <p>The maximum number of retry attempts.</p>
    /// This field is required.
    pub fn max_retries(mut self, input: i64) -> Self {
        self.max_retries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of retry attempts.</p>
    pub fn set_max_retries(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_retries = input;
        self
    }
    /// <p>The maximum number of retry attempts.</p>
    pub fn get_max_retries(&self) -> &::std::option::Option<i64> {
        &self.max_retries
    }
    /// Appends an item to `http_retry_events`.
    ///
    /// To override the contents of this collection use [`set_http_retry_events`](Self::set_http_retry_events).
    ///
    /// <p>Specify at least one of the following values.</p>
    /// <ul>
    /// <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li>
    /// <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li>
    /// <li> <p> <b>client-error</b> – HTTP status code 409</p> </li>
    /// <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li>
    /// </ul>
    pub fn http_retry_events(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.http_retry_events.unwrap_or_default();
        v.push(input.into());
        self.http_retry_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify at least one of the following values.</p>
    /// <ul>
    /// <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li>
    /// <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li>
    /// <li> <p> <b>client-error</b> – HTTP status code 409</p> </li>
    /// <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li>
    /// </ul>
    pub fn set_http_retry_events(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.http_retry_events = input;
        self
    }
    /// <p>Specify at least one of the following values.</p>
    /// <ul>
    /// <li> <p> <b>server-error</b> – HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511</p> </li>
    /// <li> <p> <b>gateway-error</b> – HTTP status codes 502, 503, and 504</p> </li>
    /// <li> <p> <b>client-error</b> – HTTP status code 409</p> </li>
    /// <li> <p> <b>stream-error</b> – Retry on refused stream</p> </li>
    /// </ul>
    pub fn get_http_retry_events(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.http_retry_events
    }
    /// Appends an item to `tcp_retry_events`.
    ///
    /// To override the contents of this collection use [`set_tcp_retry_events`](Self::set_tcp_retry_events).
    ///
    /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
    pub fn tcp_retry_events(mut self, input: crate::types::TcpRetryPolicyEvent) -> Self {
        let mut v = self.tcp_retry_events.unwrap_or_default();
        v.push(input);
        self.tcp_retry_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
    pub fn set_tcp_retry_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TcpRetryPolicyEvent>>) -> Self {
        self.tcp_retry_events = input;
        self
    }
    /// <p>Specify a valid value. The event occurs before any processing of a request has started and is encountered when the upstream is temporarily or permanently unavailable.</p>
    pub fn get_tcp_retry_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TcpRetryPolicyEvent>> {
        &self.tcp_retry_events
    }
    /// Appends an item to `grpc_retry_events`.
    ///
    /// To override the contents of this collection use [`set_grpc_retry_events`](Self::set_grpc_retry_events).
    ///
    /// <p>Specify at least one of the valid values.</p>
    pub fn grpc_retry_events(mut self, input: crate::types::GrpcRetryPolicyEvent) -> Self {
        let mut v = self.grpc_retry_events.unwrap_or_default();
        v.push(input);
        self.grpc_retry_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify at least one of the valid values.</p>
    pub fn set_grpc_retry_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GrpcRetryPolicyEvent>>) -> Self {
        self.grpc_retry_events = input;
        self
    }
    /// <p>Specify at least one of the valid values.</p>
    pub fn get_grpc_retry_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GrpcRetryPolicyEvent>> {
        &self.grpc_retry_events
    }
    /// Consumes the builder and constructs a [`GrpcRetryPolicy`](crate::types::GrpcRetryPolicy).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_retries`](crate::types::builders::GrpcRetryPolicyBuilder::max_retries)
    pub fn build(self) -> ::std::result::Result<crate::types::GrpcRetryPolicy, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GrpcRetryPolicy {
            per_retry_timeout: self.per_retry_timeout,
            max_retries: self.max_retries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_retries",
                    "max_retries was not specified but it is required when building GrpcRetryPolicy",
                )
            })?,
            http_retry_events: self.http_retry_events,
            tcp_retry_events: self.tcp_retry_events,
            grpc_retry_events: self.grpc_retry_events,
        })
    }
}
