// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the egress filter rules for a service mesh.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EgressFilter {
    /// <p>The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::EgressFilterType>,
}
impl EgressFilter {
    /// <p>The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::EgressFilterType> {
        self.r#type.as_ref()
    }
}
impl EgressFilter {
    /// Creates a new builder-style object to manufacture [`EgressFilter`](crate::types::EgressFilter).
    pub fn builder() -> crate::types::builders::EgressFilterBuilder {
        crate::types::builders::EgressFilterBuilder::default()
    }
}

/// A builder for [`EgressFilter`](crate::types::EgressFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EgressFilterBuilder {
    pub(crate) r#type: std::option::Option<crate::types::EgressFilterType>,
}
impl EgressFilterBuilder {
    /// <p>The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh.</p>
    pub fn r#type(mut self, input: crate::types::EgressFilterType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The egress filter type. By default, the type is <code>DROP_ALL</code>, which allows egress only from virtual nodes to other defined resources in the service mesh (and any traffic to <code>*.amazonaws.com</code> for Amazon Web Services API calls). You can set the egress filter type to <code>ALLOW_ALL</code> to allow egress to any endpoint inside or outside of the service mesh.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::EgressFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`EgressFilter`](crate::types::EgressFilter).
    pub fn build(self) -> crate::types::EgressFilter {
        crate::types::EgressFilter {
            r#type: self.r#type,
        }
    }
}
