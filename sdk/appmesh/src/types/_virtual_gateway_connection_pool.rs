// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the type of virtual gateway connection pool.</p>
/// <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p>
/// <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum VirtualGatewayConnectionPool {
    /// <p>An object that represents a type of connection pool. </p>
    Grpc(crate::types::VirtualGatewayGrpcConnectionPool),
    /// <p>An object that represents a type of connection pool.</p>
    Http(crate::types::VirtualGatewayHttpConnectionPool),
    /// <p>An object that represents a type of connection pool.</p>
    Http2(crate::types::VirtualGatewayHttp2ConnectionPool),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl VirtualGatewayConnectionPool {
    /// Tries to convert the enum instance into [`Grpc`](crate::types::VirtualGatewayConnectionPool::Grpc), extracting the inner [`VirtualGatewayGrpcConnectionPool`](crate::types::VirtualGatewayGrpcConnectionPool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_grpc(
        &self,
    ) -> std::result::Result<&crate::types::VirtualGatewayGrpcConnectionPool, &Self> {
        if let VirtualGatewayConnectionPool::Grpc(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Grpc`](crate::types::VirtualGatewayConnectionPool::Grpc).
    pub fn is_grpc(&self) -> bool {
        self.as_grpc().is_ok()
    }
    /// Tries to convert the enum instance into [`Http`](crate::types::VirtualGatewayConnectionPool::Http), extracting the inner [`VirtualGatewayHttpConnectionPool`](crate::types::VirtualGatewayHttpConnectionPool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_http(
        &self,
    ) -> std::result::Result<&crate::types::VirtualGatewayHttpConnectionPool, &Self> {
        if let VirtualGatewayConnectionPool::Http(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Http`](crate::types::VirtualGatewayConnectionPool::Http).
    pub fn is_http(&self) -> bool {
        self.as_http().is_ok()
    }
    /// Tries to convert the enum instance into [`Http2`](crate::types::VirtualGatewayConnectionPool::Http2), extracting the inner [`VirtualGatewayHttp2ConnectionPool`](crate::types::VirtualGatewayHttp2ConnectionPool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_http2(
        &self,
    ) -> std::result::Result<&crate::types::VirtualGatewayHttp2ConnectionPool, &Self> {
        if let VirtualGatewayConnectionPool::Http2(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Http2`](crate::types::VirtualGatewayConnectionPool::Http2).
    pub fn is_http2(&self) -> bool {
        self.as_http2().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
