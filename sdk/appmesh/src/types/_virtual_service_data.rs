// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a virtual service returned by a describe operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VirtualServiceData {
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    pub mesh_name: ::std::string::String,
    /// <p>The name of the virtual service.</p>
    pub virtual_service_name: ::std::string::String,
    /// <p>The specifications of the virtual service.</p>
    pub spec: ::std::option::Option<crate::types::VirtualServiceSpec>,
    /// <p>An object that represents metadata for a resource.</p>
    pub metadata: ::std::option::Option<crate::types::ResourceMetadata>,
    /// <p>The current status of the virtual service.</p>
    pub status: ::std::option::Option<crate::types::VirtualServiceStatus>,
}
impl VirtualServiceData {
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    pub fn mesh_name(&self) -> &str {
        use std::ops::Deref;
        self.mesh_name.deref()
    }
    /// <p>The name of the virtual service.</p>
    pub fn virtual_service_name(&self) -> &str {
        use std::ops::Deref;
        self.virtual_service_name.deref()
    }
    /// <p>The specifications of the virtual service.</p>
    pub fn spec(&self) -> ::std::option::Option<&crate::types::VirtualServiceSpec> {
        self.spec.as_ref()
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn metadata(&self) -> ::std::option::Option<&crate::types::ResourceMetadata> {
        self.metadata.as_ref()
    }
    /// <p>The current status of the virtual service.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::VirtualServiceStatus> {
        self.status.as_ref()
    }
}
impl VirtualServiceData {
    /// Creates a new builder-style object to manufacture [`VirtualServiceData`](crate::types::VirtualServiceData).
    pub fn builder() -> crate::types::builders::VirtualServiceDataBuilder {
        crate::types::builders::VirtualServiceDataBuilder::default()
    }
}

/// A builder for [`VirtualServiceData`](crate::types::VirtualServiceData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VirtualServiceDataBuilder {
    pub(crate) mesh_name: ::std::option::Option<::std::string::String>,
    pub(crate) virtual_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) spec: ::std::option::Option<crate::types::VirtualServiceSpec>,
    pub(crate) metadata: ::std::option::Option<crate::types::ResourceMetadata>,
    pub(crate) status: ::std::option::Option<crate::types::VirtualServiceStatus>,
}
impl VirtualServiceDataBuilder {
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    /// This field is required.
    pub fn mesh_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mesh_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    pub fn set_mesh_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// <p>The name of the service mesh that the virtual service resides in.</p>
    pub fn get_mesh_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.mesh_name
    }
    /// <p>The name of the virtual service.</p>
    /// This field is required.
    pub fn virtual_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the virtual service.</p>
    pub fn set_virtual_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_service_name = input;
        self
    }
    /// <p>The name of the virtual service.</p>
    pub fn get_virtual_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_service_name
    }
    /// <p>The specifications of the virtual service.</p>
    /// This field is required.
    pub fn spec(mut self, input: crate::types::VirtualServiceSpec) -> Self {
        self.spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specifications of the virtual service.</p>
    pub fn set_spec(mut self, input: ::std::option::Option<crate::types::VirtualServiceSpec>) -> Self {
        self.spec = input;
        self
    }
    /// <p>The specifications of the virtual service.</p>
    pub fn get_spec(&self) -> &::std::option::Option<crate::types::VirtualServiceSpec> {
        &self.spec
    }
    /// <p>An object that represents metadata for a resource.</p>
    /// This field is required.
    pub fn metadata(mut self, input: crate::types::ResourceMetadata) -> Self {
        self.metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<crate::types::ResourceMetadata>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>An object that represents metadata for a resource.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<crate::types::ResourceMetadata> {
        &self.metadata
    }
    /// <p>The current status of the virtual service.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::VirtualServiceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the virtual service.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VirtualServiceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the virtual service.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VirtualServiceStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`VirtualServiceData`](crate::types::VirtualServiceData).
    /// This method will fail if any of the following fields are not set:
    /// - [`mesh_name`](crate::types::builders::VirtualServiceDataBuilder::mesh_name)
    /// - [`virtual_service_name`](crate::types::builders::VirtualServiceDataBuilder::virtual_service_name)
    pub fn build(self) -> ::std::result::Result<crate::types::VirtualServiceData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::VirtualServiceData {
            mesh_name: self.mesh_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mesh_name",
                    "mesh_name was not specified but it is required when building VirtualServiceData",
                )
            })?,
            virtual_service_name: self.virtual_service_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "virtual_service_name",
                    "virtual_service_name was not specified but it is required when building VirtualServiceData",
                )
            })?,
            spec: self.spec,
            metadata: self.metadata,
            status: self.status,
        })
    }
}
