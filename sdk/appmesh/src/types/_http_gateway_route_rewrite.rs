// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the gateway route to rewrite.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpGatewayRouteRewrite {
    /// <p>The specified beginning characters to rewrite.</p>
    #[doc(hidden)]
    pub prefix: std::option::Option<crate::types::HttpGatewayRoutePrefixRewrite>,
    /// <p>The path to rewrite.</p>
    #[doc(hidden)]
    pub path: std::option::Option<crate::types::HttpGatewayRoutePathRewrite>,
    /// <p>The host name to rewrite.</p>
    #[doc(hidden)]
    pub hostname: std::option::Option<crate::types::GatewayRouteHostnameRewrite>,
}
impl HttpGatewayRouteRewrite {
    /// <p>The specified beginning characters to rewrite.</p>
    pub fn prefix(&self) -> std::option::Option<&crate::types::HttpGatewayRoutePrefixRewrite> {
        self.prefix.as_ref()
    }
    /// <p>The path to rewrite.</p>
    pub fn path(&self) -> std::option::Option<&crate::types::HttpGatewayRoutePathRewrite> {
        self.path.as_ref()
    }
    /// <p>The host name to rewrite.</p>
    pub fn hostname(&self) -> std::option::Option<&crate::types::GatewayRouteHostnameRewrite> {
        self.hostname.as_ref()
    }
}
impl HttpGatewayRouteRewrite {
    /// Creates a new builder-style object to manufacture [`HttpGatewayRouteRewrite`](crate::types::HttpGatewayRouteRewrite).
    pub fn builder() -> crate::types::builders::HttpGatewayRouteRewriteBuilder {
        crate::types::builders::HttpGatewayRouteRewriteBuilder::default()
    }
}

/// A builder for [`HttpGatewayRouteRewrite`](crate::types::HttpGatewayRouteRewrite).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpGatewayRouteRewriteBuilder {
    pub(crate) prefix: std::option::Option<crate::types::HttpGatewayRoutePrefixRewrite>,
    pub(crate) path: std::option::Option<crate::types::HttpGatewayRoutePathRewrite>,
    pub(crate) hostname: std::option::Option<crate::types::GatewayRouteHostnameRewrite>,
}
impl HttpGatewayRouteRewriteBuilder {
    /// <p>The specified beginning characters to rewrite.</p>
    pub fn prefix(mut self, input: crate::types::HttpGatewayRoutePrefixRewrite) -> Self {
        self.prefix = Some(input);
        self
    }
    /// <p>The specified beginning characters to rewrite.</p>
    pub fn set_prefix(
        mut self,
        input: std::option::Option<crate::types::HttpGatewayRoutePrefixRewrite>,
    ) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The path to rewrite.</p>
    pub fn path(mut self, input: crate::types::HttpGatewayRoutePathRewrite) -> Self {
        self.path = Some(input);
        self
    }
    /// <p>The path to rewrite.</p>
    pub fn set_path(
        mut self,
        input: std::option::Option<crate::types::HttpGatewayRoutePathRewrite>,
    ) -> Self {
        self.path = input;
        self
    }
    /// <p>The host name to rewrite.</p>
    pub fn hostname(mut self, input: crate::types::GatewayRouteHostnameRewrite) -> Self {
        self.hostname = Some(input);
        self
    }
    /// <p>The host name to rewrite.</p>
    pub fn set_hostname(
        mut self,
        input: std::option::Option<crate::types::GatewayRouteHostnameRewrite>,
    ) -> Self {
        self.hostname = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpGatewayRouteRewrite`](crate::types::HttpGatewayRouteRewrite).
    pub fn build(self) -> crate::types::HttpGatewayRouteRewrite {
        crate::types::HttpGatewayRouteRewrite {
            prefix: self.prefix,
            path: self.path,
            hostname: self.hostname,
        }
    }
}
