// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the criteria for determining a request match.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GrpcRouteMatch {
    /// <p>The fully qualified domain name for the service to match from the request.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.</p>
    #[doc(hidden)]
    pub method_name: std::option::Option<std::string::String>,
    /// <p>An object that represents the data to match from the request.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::vec::Vec<crate::types::GrpcRouteMetadata>>,
    /// <p>The port number to match on.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl GrpcRouteMatch {
    /// <p>The fully qualified domain name for the service to match from the request.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.</p>
    pub fn method_name(&self) -> std::option::Option<&str> {
        self.method_name.as_deref()
    }
    /// <p>An object that represents the data to match from the request.</p>
    pub fn metadata(&self) -> std::option::Option<&[crate::types::GrpcRouteMetadata]> {
        self.metadata.as_deref()
    }
    /// <p>The port number to match on.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl GrpcRouteMatch {
    /// Creates a new builder-style object to manufacture [`GrpcRouteMatch`](crate::types::GrpcRouteMatch).
    pub fn builder() -> crate::types::builders::GrpcRouteMatchBuilder {
        crate::types::builders::GrpcRouteMatchBuilder::default()
    }
}

/// A builder for [`GrpcRouteMatch`](crate::types::GrpcRouteMatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GrpcRouteMatchBuilder {
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) method_name: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<std::vec::Vec<crate::types::GrpcRouteMetadata>>,
    pub(crate) port: std::option::Option<i32>,
}
impl GrpcRouteMatchBuilder {
    /// <p>The fully qualified domain name for the service to match from the request.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The fully qualified domain name for the service to match from the request.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.</p>
    pub fn method_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.method_name = Some(input.into());
        self
    }
    /// <p>The method name to match from the request. If you specify a name, you must also specify a <code>serviceName</code>.</p>
    pub fn set_method_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.method_name = input;
        self
    }
    /// Appends an item to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>An object that represents the data to match from the request.</p>
    pub fn metadata(mut self, input: crate::types::GrpcRouteMetadata) -> Self {
        let mut v = self.metadata.unwrap_or_default();
        v.push(input);
        self.metadata = Some(v);
        self
    }
    /// <p>An object that represents the data to match from the request.</p>
    pub fn set_metadata(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GrpcRouteMetadata>>,
    ) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The port number to match on.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port number to match on.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`GrpcRouteMatch`](crate::types::GrpcRouteMatch).
    pub fn build(self) -> crate::types::GrpcRouteMatch {
        crate::types::GrpcRouteMatch {
            service_name: self.service_name,
            method_name: self.method_name,
            metadata: self.metadata,
            port: self.port,
        }
    }
}
