// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a virtual node service provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VirtualNodeServiceProvider {
    /// <p>The name of the virtual node that is acting as a service provider.</p>
    #[doc(hidden)]
    pub virtual_node_name: std::option::Option<std::string::String>,
}
impl VirtualNodeServiceProvider {
    /// <p>The name of the virtual node that is acting as a service provider.</p>
    pub fn virtual_node_name(&self) -> std::option::Option<&str> {
        self.virtual_node_name.as_deref()
    }
}
impl VirtualNodeServiceProvider {
    /// Creates a new builder-style object to manufacture [`VirtualNodeServiceProvider`](crate::types::VirtualNodeServiceProvider).
    pub fn builder() -> crate::types::builders::VirtualNodeServiceProviderBuilder {
        crate::types::builders::VirtualNodeServiceProviderBuilder::default()
    }
}

/// A builder for [`VirtualNodeServiceProvider`](crate::types::VirtualNodeServiceProvider).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VirtualNodeServiceProviderBuilder {
    pub(crate) virtual_node_name: std::option::Option<std::string::String>,
}
impl VirtualNodeServiceProviderBuilder {
    /// <p>The name of the virtual node that is acting as a service provider.</p>
    pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_node_name = Some(input.into());
        self
    }
    /// <p>The name of the virtual node that is acting as a service provider.</p>
    pub fn set_virtual_node_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_node_name = input;
        self
    }
    /// Consumes the builder and constructs a [`VirtualNodeServiceProvider`](crate::types::VirtualNodeServiceProvider).
    pub fn build(self) -> crate::types::VirtualNodeServiceProvider {
        crate::types::VirtualNodeServiceProvider {
            virtual_node_name: self.virtual_node_name,
        }
    }
}
