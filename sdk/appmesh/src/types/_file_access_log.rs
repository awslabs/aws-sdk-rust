// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an access log file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileAccessLog {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note>
    /// <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p>
    /// </note>
    pub path: ::std::string::String,
    /// <p>The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>.</p>
    pub format: ::std::option::Option<crate::types::LoggingFormat>,
}
impl FileAccessLog {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note>
    /// <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p>
    /// </note>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::LoggingFormat> {
        self.format.as_ref()
    }
}
impl FileAccessLog {
    /// Creates a new builder-style object to manufacture [`FileAccessLog`](crate::types::FileAccessLog).
    pub fn builder() -> crate::types::builders::FileAccessLogBuilder {
        crate::types::builders::FileAccessLogBuilder::default()
    }
}

/// A builder for [`FileAccessLog`](crate::types::FileAccessLog).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FileAccessLogBuilder {
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::LoggingFormat>,
}
impl FileAccessLogBuilder {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note>
    /// <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p>
    /// </note>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note>
    /// <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p>
    /// </note>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <note>
    /// <p>The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.</p>
    /// </note>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn format(mut self, input: crate::types::LoggingFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::LoggingFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::LoggingFormat> {
        &self.format
    }
    /// Consumes the builder and constructs a [`FileAccessLog`](crate::types::FileAccessLog).
    /// This method will fail if any of the following fields are not set:
    /// - [`path`](crate::types::builders::FileAccessLogBuilder::path)
    pub fn build(self) -> ::std::result::Result<crate::types::FileAccessLog, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FileAccessLog {
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building FileAccessLog",
                )
            })?,
            format: self.format,
        })
    }
}
