// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the specification of a virtual node.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VirtualNodeSpec {
    /// <p>The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.</p>
    #[doc(hidden)]
    pub service_discovery: std::option::Option<crate::types::ServiceDiscovery>,
    /// <p>The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.</p>
    #[doc(hidden)]
    pub listeners: std::option::Option<std::vec::Vec<crate::types::Listener>>,
    /// <p>The backends that the virtual node is expected to send outbound traffic to.</p>
    #[doc(hidden)]
    pub backends: std::option::Option<std::vec::Vec<crate::types::Backend>>,
    /// <p>A reference to an object that represents the defaults for backends.</p>
    #[doc(hidden)]
    pub backend_defaults: std::option::Option<crate::types::BackendDefaults>,
    /// <p>The inbound and outbound access logging information for the virtual node.</p>
    #[doc(hidden)]
    pub logging: std::option::Option<crate::types::Logging>,
}
impl VirtualNodeSpec {
    /// <p>The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.</p>
    pub fn service_discovery(&self) -> std::option::Option<&crate::types::ServiceDiscovery> {
        self.service_discovery.as_ref()
    }
    /// <p>The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.</p>
    pub fn listeners(&self) -> std::option::Option<&[crate::types::Listener]> {
        self.listeners.as_deref()
    }
    /// <p>The backends that the virtual node is expected to send outbound traffic to.</p>
    pub fn backends(&self) -> std::option::Option<&[crate::types::Backend]> {
        self.backends.as_deref()
    }
    /// <p>A reference to an object that represents the defaults for backends.</p>
    pub fn backend_defaults(&self) -> std::option::Option<&crate::types::BackendDefaults> {
        self.backend_defaults.as_ref()
    }
    /// <p>The inbound and outbound access logging information for the virtual node.</p>
    pub fn logging(&self) -> std::option::Option<&crate::types::Logging> {
        self.logging.as_ref()
    }
}
impl VirtualNodeSpec {
    /// Creates a new builder-style object to manufacture [`VirtualNodeSpec`](crate::types::VirtualNodeSpec).
    pub fn builder() -> crate::types::builders::VirtualNodeSpecBuilder {
        crate::types::builders::VirtualNodeSpecBuilder::default()
    }
}

/// A builder for [`VirtualNodeSpec`](crate::types::VirtualNodeSpec).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VirtualNodeSpecBuilder {
    pub(crate) service_discovery: std::option::Option<crate::types::ServiceDiscovery>,
    pub(crate) listeners: std::option::Option<std::vec::Vec<crate::types::Listener>>,
    pub(crate) backends: std::option::Option<std::vec::Vec<crate::types::Backend>>,
    pub(crate) backend_defaults: std::option::Option<crate::types::BackendDefaults>,
    pub(crate) logging: std::option::Option<crate::types::Logging>,
}
impl VirtualNodeSpecBuilder {
    /// <p>The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.</p>
    pub fn service_discovery(mut self, input: crate::types::ServiceDiscovery) -> Self {
        self.service_discovery = Some(input);
        self
    }
    /// <p>The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information.</p>
    pub fn set_service_discovery(
        mut self,
        input: std::option::Option<crate::types::ServiceDiscovery>,
    ) -> Self {
        self.service_discovery = input;
        self
    }
    /// Appends an item to `listeners`.
    ///
    /// To override the contents of this collection use [`set_listeners`](Self::set_listeners).
    ///
    /// <p>The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.</p>
    pub fn listeners(mut self, input: crate::types::Listener) -> Self {
        let mut v = self.listeners.unwrap_or_default();
        v.push(input);
        self.listeners = Some(v);
        self
    }
    /// <p>The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener.</p>
    pub fn set_listeners(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Listener>>,
    ) -> Self {
        self.listeners = input;
        self
    }
    /// Appends an item to `backends`.
    ///
    /// To override the contents of this collection use [`set_backends`](Self::set_backends).
    ///
    /// <p>The backends that the virtual node is expected to send outbound traffic to.</p>
    pub fn backends(mut self, input: crate::types::Backend) -> Self {
        let mut v = self.backends.unwrap_or_default();
        v.push(input);
        self.backends = Some(v);
        self
    }
    /// <p>The backends that the virtual node is expected to send outbound traffic to.</p>
    pub fn set_backends(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Backend>>,
    ) -> Self {
        self.backends = input;
        self
    }
    /// <p>A reference to an object that represents the defaults for backends.</p>
    pub fn backend_defaults(mut self, input: crate::types::BackendDefaults) -> Self {
        self.backend_defaults = Some(input);
        self
    }
    /// <p>A reference to an object that represents the defaults for backends.</p>
    pub fn set_backend_defaults(
        mut self,
        input: std::option::Option<crate::types::BackendDefaults>,
    ) -> Self {
        self.backend_defaults = input;
        self
    }
    /// <p>The inbound and outbound access logging information for the virtual node.</p>
    pub fn logging(mut self, input: crate::types::Logging) -> Self {
        self.logging = Some(input);
        self
    }
    /// <p>The inbound and outbound access logging information for the virtual node.</p>
    pub fn set_logging(mut self, input: std::option::Option<crate::types::Logging>) -> Self {
        self.logging = input;
        self
    }
    /// Consumes the builder and constructs a [`VirtualNodeSpec`](crate::types::VirtualNodeSpec).
    pub fn build(self) -> crate::types::VirtualNodeSpec {
        crate::types::VirtualNodeSpec {
            service_discovery: self.service_discovery,
            listeners: self.listeners,
            backends: self.backends,
            backend_defaults: self.backend_defaults,
            logging: self.logging,
        }
    }
}
