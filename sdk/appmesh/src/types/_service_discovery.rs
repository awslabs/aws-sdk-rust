// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the service discovery information for a virtual node.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ServiceDiscovery {
    /// <p>Specifies any Cloud Map information for the virtual node.</p>
    AwsCloudMap(crate::types::AwsCloudMapServiceDiscovery),
    /// <p>Specifies the DNS information for the virtual node.</p>
    Dns(crate::types::DnsServiceDiscovery),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ServiceDiscovery {
    /// Tries to convert the enum instance into [`AwsCloudMap`](crate::types::ServiceDiscovery::AwsCloudMap), extracting the inner [`AwsCloudMapServiceDiscovery`](crate::types::AwsCloudMapServiceDiscovery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aws_cloud_map(
        &self,
    ) -> std::result::Result<&crate::types::AwsCloudMapServiceDiscovery, &Self> {
        if let ServiceDiscovery::AwsCloudMap(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AwsCloudMap`](crate::types::ServiceDiscovery::AwsCloudMap).
    pub fn is_aws_cloud_map(&self) -> bool {
        self.as_aws_cloud_map().is_ok()
    }
    /// Tries to convert the enum instance into [`Dns`](crate::types::ServiceDiscovery::Dns), extracting the inner [`DnsServiceDiscovery`](crate::types::DnsServiceDiscovery).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_dns(&self) -> std::result::Result<&crate::types::DnsServiceDiscovery, &Self> {
        if let ServiceDiscovery::Dns(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Dns`](crate::types::ServiceDiscovery::Dns).
    pub fn is_dns(&self) -> bool {
        self.as_dns().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
