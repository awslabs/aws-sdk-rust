// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the subject alternative names secured by the certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubjectAlternativeNames {
    /// <p>An object that represents the criteria for determining a SANs match.</p>
    #[doc(hidden)]
    pub r#match: std::option::Option<crate::types::SubjectAlternativeNameMatchers>,
}
impl SubjectAlternativeNames {
    /// <p>An object that represents the criteria for determining a SANs match.</p>
    pub fn r#match(&self) -> std::option::Option<&crate::types::SubjectAlternativeNameMatchers> {
        self.r#match.as_ref()
    }
}
impl SubjectAlternativeNames {
    /// Creates a new builder-style object to manufacture [`SubjectAlternativeNames`](crate::types::SubjectAlternativeNames).
    pub fn builder() -> crate::types::builders::SubjectAlternativeNamesBuilder {
        crate::types::builders::SubjectAlternativeNamesBuilder::default()
    }
}

/// A builder for [`SubjectAlternativeNames`](crate::types::SubjectAlternativeNames).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubjectAlternativeNamesBuilder {
    pub(crate) r#match: std::option::Option<crate::types::SubjectAlternativeNameMatchers>,
}
impl SubjectAlternativeNamesBuilder {
    /// <p>An object that represents the criteria for determining a SANs match.</p>
    pub fn r#match(mut self, input: crate::types::SubjectAlternativeNameMatchers) -> Self {
        self.r#match = Some(input);
        self
    }
    /// <p>An object that represents the criteria for determining a SANs match.</p>
    pub fn set_match(
        mut self,
        input: std::option::Option<crate::types::SubjectAlternativeNameMatchers>,
    ) -> Self {
        self.r#match = input;
        self
    }
    /// Consumes the builder and constructs a [`SubjectAlternativeNames`](crate::types::SubjectAlternativeNames).
    pub fn build(self) -> crate::types::SubjectAlternativeNames {
        crate::types::SubjectAlternativeNames {
            r#match: self.r#match,
        }
    }
}
