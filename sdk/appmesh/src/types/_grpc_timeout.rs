// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents types of timeouts. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GrpcTimeout {
    /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.</p>
    #[doc(hidden)]
    pub per_request: std::option::Option<crate::types::Duration>,
    /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
    #[doc(hidden)]
    pub idle: std::option::Option<crate::types::Duration>,
}
impl GrpcTimeout {
    /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.</p>
    pub fn per_request(&self) -> std::option::Option<&crate::types::Duration> {
        self.per_request.as_ref()
    }
    /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
    pub fn idle(&self) -> std::option::Option<&crate::types::Duration> {
        self.idle.as_ref()
    }
}
impl GrpcTimeout {
    /// Creates a new builder-style object to manufacture [`GrpcTimeout`](crate::types::GrpcTimeout).
    pub fn builder() -> crate::types::builders::GrpcTimeoutBuilder {
        crate::types::builders::GrpcTimeoutBuilder::default()
    }
}

/// A builder for [`GrpcTimeout`](crate::types::GrpcTimeout).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GrpcTimeoutBuilder {
    pub(crate) per_request: std::option::Option<crate::types::Duration>,
    pub(crate) idle: std::option::Option<crate::types::Duration>,
}
impl GrpcTimeoutBuilder {
    /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.</p>
    pub fn per_request(mut self, input: crate::types::Duration) -> Self {
        self.per_request = Some(input);
        self
    }
    /// <p>An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route.</p>
    pub fn set_per_request(mut self, input: std::option::Option<crate::types::Duration>) -> Self {
        self.per_request = input;
        self
    }
    /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
    pub fn idle(mut self, input: crate::types::Duration) -> Self {
        self.idle = Some(input);
        self
    }
    /// <p>An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none.</p>
    pub fn set_idle(mut self, input: std::option::Option<crate::types::Duration>) -> Self {
        self.idle = input;
        self
    }
    /// Consumes the builder and constructs a [`GrpcTimeout`](crate::types::GrpcTimeout).
    pub fn build(self) -> crate::types::GrpcTimeout {
        crate::types::GrpcTimeout {
            per_request: self.per_request,
            idle: self.idle,
        }
    }
}
