// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the HTTP header in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpRouteHeader {
    /// <p>A name for the HTTP header in the client request that will be matched on.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
    #[doc(hidden)]
    pub invert: std::option::Option<bool>,
    /// <p>The <code>HeaderMatchMethod</code> object.</p>
    #[doc(hidden)]
    pub r#match: std::option::Option<crate::types::HeaderMatchMethod>,
}
impl HttpRouteHeader {
    /// <p>A name for the HTTP header in the client request that will be matched on.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
    pub fn invert(&self) -> std::option::Option<bool> {
        self.invert
    }
    /// <p>The <code>HeaderMatchMethod</code> object.</p>
    pub fn r#match(&self) -> std::option::Option<&crate::types::HeaderMatchMethod> {
        self.r#match.as_ref()
    }
}
impl HttpRouteHeader {
    /// Creates a new builder-style object to manufacture [`HttpRouteHeader`](crate::types::HttpRouteHeader).
    pub fn builder() -> crate::types::builders::HttpRouteHeaderBuilder {
        crate::types::builders::HttpRouteHeaderBuilder::default()
    }
}

/// A builder for [`HttpRouteHeader`](crate::types::HttpRouteHeader).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpRouteHeaderBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) invert: std::option::Option<bool>,
    pub(crate) r#match: std::option::Option<crate::types::HeaderMatchMethod>,
}
impl HttpRouteHeaderBuilder {
    /// <p>A name for the HTTP header in the client request that will be matched on.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name for the HTTP header in the client request that will be matched on.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
    pub fn invert(mut self, input: bool) -> Self {
        self.invert = Some(input);
        self
    }
    /// <p>Specify <code>True</code> to match anything except the match criteria. The default value is <code>False</code>.</p>
    pub fn set_invert(mut self, input: std::option::Option<bool>) -> Self {
        self.invert = input;
        self
    }
    /// <p>The <code>HeaderMatchMethod</code> object.</p>
    pub fn r#match(mut self, input: crate::types::HeaderMatchMethod) -> Self {
        self.r#match = Some(input);
        self
    }
    /// <p>The <code>HeaderMatchMethod</code> object.</p>
    pub fn set_match(
        mut self,
        input: std::option::Option<crate::types::HeaderMatchMethod>,
    ) -> Self {
        self.r#match = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpRouteHeader`](crate::types::HttpRouteHeader).
    pub fn build(self) -> crate::types::HttpRouteHeader {
        crate::types::HttpRouteHeader {
            name: self.name,
            invert: self.invert,
            r#match: self.r#match,
        }
    }
}
