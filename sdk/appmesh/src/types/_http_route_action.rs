// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the action to take if a match is determined.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpRouteAction {
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    #[doc(hidden)]
    pub weighted_targets: std::option::Option<std::vec::Vec<crate::types::WeightedTarget>>,
}
impl HttpRouteAction {
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn weighted_targets(&self) -> std::option::Option<&[crate::types::WeightedTarget]> {
        self.weighted_targets.as_deref()
    }
}
impl HttpRouteAction {
    /// Creates a new builder-style object to manufacture [`HttpRouteAction`](crate::types::HttpRouteAction).
    pub fn builder() -> crate::types::builders::HttpRouteActionBuilder {
        crate::types::builders::HttpRouteActionBuilder::default()
    }
}

/// A builder for [`HttpRouteAction`](crate::types::HttpRouteAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpRouteActionBuilder {
    pub(crate) weighted_targets: std::option::Option<std::vec::Vec<crate::types::WeightedTarget>>,
}
impl HttpRouteActionBuilder {
    /// Appends an item to `weighted_targets`.
    ///
    /// To override the contents of this collection use [`set_weighted_targets`](Self::set_weighted_targets).
    ///
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn weighted_targets(mut self, input: crate::types::WeightedTarget) -> Self {
        let mut v = self.weighted_targets.unwrap_or_default();
        v.push(input);
        self.weighted_targets = Some(v);
        self
    }
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn set_weighted_targets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WeightedTarget>>,
    ) -> Self {
        self.weighted_targets = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpRouteAction`](crate::types::HttpRouteAction).
    pub fn build(self) -> crate::types::HttpRouteAction {
        crate::types::HttpRouteAction {
            weighted_targets: self.weighted_targets,
        }
    }
}
