// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the action to take if a match is determined.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TcpRouteAction {
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub weighted_targets: ::std::vec::Vec<crate::types::WeightedTarget>,
}
impl TcpRouteAction {
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn weighted_targets(&self) -> &[crate::types::WeightedTarget] {
        use std::ops::Deref;
        self.weighted_targets.deref()
    }
}
impl TcpRouteAction {
    /// Creates a new builder-style object to manufacture [`TcpRouteAction`](crate::types::TcpRouteAction).
    pub fn builder() -> crate::types::builders::TcpRouteActionBuilder {
        crate::types::builders::TcpRouteActionBuilder::default()
    }
}

/// A builder for [`TcpRouteAction`](crate::types::TcpRouteAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TcpRouteActionBuilder {
    pub(crate) weighted_targets: ::std::option::Option<::std::vec::Vec<crate::types::WeightedTarget>>,
}
impl TcpRouteActionBuilder {
    /// Appends an item to `weighted_targets`.
    ///
    /// To override the contents of this collection use [`set_weighted_targets`](Self::set_weighted_targets).
    ///
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn weighted_targets(mut self, input: crate::types::WeightedTarget) -> Self {
        let mut v = self.weighted_targets.unwrap_or_default();
        v.push(input);
        self.weighted_targets = ::std::option::Option::Some(v);
        self
    }
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn set_weighted_targets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::WeightedTarget>>) -> Self {
        self.weighted_targets = input;
        self
    }
    /// <p>An object that represents the targets that traffic is routed to when a request matches the route.</p>
    pub fn get_weighted_targets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::WeightedTarget>> {
        &self.weighted_targets
    }
    /// Consumes the builder and constructs a [`TcpRouteAction`](crate::types::TcpRouteAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`weighted_targets`](crate::types::builders::TcpRouteActionBuilder::weighted_targets)
    pub fn build(self) -> ::std::result::Result<crate::types::TcpRouteAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TcpRouteAction {
            weighted_targets: self.weighted_targets.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "weighted_targets",
                    "weighted_targets was not specified but it is required when building TcpRouteAction",
                )
            })?,
        })
    }
}
