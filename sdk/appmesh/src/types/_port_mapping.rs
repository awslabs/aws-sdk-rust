// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a port mapping.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortMapping {
    /// <p>The port used for the port mapping.</p>
    pub port: i32,
    /// <p>The protocol used for the port mapping. Specify one protocol.</p>
    pub protocol: crate::types::PortProtocol,
}
impl PortMapping {
    /// <p>The port used for the port mapping.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>The protocol used for the port mapping. Specify one protocol.</p>
    pub fn protocol(&self) -> &crate::types::PortProtocol {
        &self.protocol
    }
}
impl PortMapping {
    /// Creates a new builder-style object to manufacture [`PortMapping`](crate::types::PortMapping).
    pub fn builder() -> crate::types::builders::PortMappingBuilder {
        crate::types::builders::PortMappingBuilder::default()
    }
}

/// A builder for [`PortMapping`](crate::types::PortMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PortMappingBuilder {
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::PortProtocol>,
}
impl PortMappingBuilder {
    /// <p>The port used for the port mapping.</p>
    /// This field is required.
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port used for the port mapping.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port used for the port mapping.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The protocol used for the port mapping. Specify one protocol.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::PortProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The protocol used for the port mapping. Specify one protocol.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::PortProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The protocol used for the port mapping. Specify one protocol.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::PortProtocol> {
        &self.protocol
    }
    /// Consumes the builder and constructs a [`PortMapping`](crate::types::PortMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`protocol`](crate::types::builders::PortMappingBuilder::protocol)
    pub fn build(self) -> ::std::result::Result<crate::types::PortMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PortMapping {
            port: self.port.unwrap_or_default(),
            protocol: self.protocol.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocol",
                    "protocol was not specified but it is required when building PortMapping",
                )
            })?,
        })
    }
}
