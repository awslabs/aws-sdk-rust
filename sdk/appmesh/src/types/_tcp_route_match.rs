// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the TCP route to match.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TcpRouteMatch {
    /// <p>The port number to match on.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl TcpRouteMatch {
    /// <p>The port number to match on.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl TcpRouteMatch {
    /// Creates a new builder-style object to manufacture [`TcpRouteMatch`](crate::types::TcpRouteMatch).
    pub fn builder() -> crate::types::builders::TcpRouteMatchBuilder {
        crate::types::builders::TcpRouteMatchBuilder::default()
    }
}

/// A builder for [`TcpRouteMatch`](crate::types::TcpRouteMatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TcpRouteMatchBuilder {
    pub(crate) port: std::option::Option<i32>,
}
impl TcpRouteMatchBuilder {
    /// <p>The port number to match on.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port number to match on.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`TcpRouteMatch`](crate::types::TcpRouteMatch).
    pub fn build(self) -> crate::types::TcpRouteMatch {
        crate::types::TcpRouteMatch { port: self.port }
    }
}
