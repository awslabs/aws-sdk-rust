// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the path to match in the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HttpPathMatch {
    /// <p>The exact path to match on.</p>
    #[doc(hidden)]
    pub exact: std::option::Option<std::string::String>,
    /// <p>The regex used to match the path.</p>
    #[doc(hidden)]
    pub regex: std::option::Option<std::string::String>,
}
impl HttpPathMatch {
    /// <p>The exact path to match on.</p>
    pub fn exact(&self) -> std::option::Option<&str> {
        self.exact.as_deref()
    }
    /// <p>The regex used to match the path.</p>
    pub fn regex(&self) -> std::option::Option<&str> {
        self.regex.as_deref()
    }
}
impl HttpPathMatch {
    /// Creates a new builder-style object to manufacture [`HttpPathMatch`](crate::types::HttpPathMatch).
    pub fn builder() -> crate::types::builders::HttpPathMatchBuilder {
        crate::types::builders::HttpPathMatchBuilder::default()
    }
}

/// A builder for [`HttpPathMatch`](crate::types::HttpPathMatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HttpPathMatchBuilder {
    pub(crate) exact: std::option::Option<std::string::String>,
    pub(crate) regex: std::option::Option<std::string::String>,
}
impl HttpPathMatchBuilder {
    /// <p>The exact path to match on.</p>
    pub fn exact(mut self, input: impl Into<std::string::String>) -> Self {
        self.exact = Some(input.into());
        self
    }
    /// <p>The exact path to match on.</p>
    pub fn set_exact(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.exact = input;
        self
    }
    /// <p>The regex used to match the path.</p>
    pub fn regex(mut self, input: impl Into<std::string::String>) -> Self {
        self.regex = Some(input.into());
        self
    }
    /// <p>The regex used to match the path.</p>
    pub fn set_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.regex = input;
        self
    }
    /// Consumes the builder and constructs a [`HttpPathMatch`](crate::types::HttpPathMatch).
    pub fn build(self) -> crate::types::HttpPathMatch {
        crate::types::HttpPathMatch {
            exact: self.exact,
            regex: self.regex,
        }
    }
}
