// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the client's certificate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum ClientTlsCertificate {
    /// <p>An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html">Transport Layer Security (TLS)</a>.</p>
    File(crate::types::ListenerTlsFileCertificate),
    /// <p>A reference to an object that represents a client's TLS Secret Discovery Service certificate.</p>
    Sds(crate::types::ListenerTlsSdsCertificate),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl ClientTlsCertificate {
    /// Tries to convert the enum instance into [`File`](crate::types::ClientTlsCertificate::File), extracting the inner [`ListenerTlsFileCertificate`](crate::types::ListenerTlsFileCertificate).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_file(&self) -> std::result::Result<&crate::types::ListenerTlsFileCertificate, &Self> {
        if let ClientTlsCertificate::File(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`File`](crate::types::ClientTlsCertificate::File).
    pub fn is_file(&self) -> bool {
        self.as_file().is_ok()
    }
    /// Tries to convert the enum instance into [`Sds`](crate::types::ClientTlsCertificate::Sds), extracting the inner [`ListenerTlsSdsCertificate`](crate::types::ListenerTlsSdsCertificate).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_sds(&self) -> std::result::Result<&crate::types::ListenerTlsSdsCertificate, &Self> {
        if let ClientTlsCertificate::Sds(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Sds`](crate::types::ClientTlsCertificate::Sds).
    pub fn is_sds(&self) -> bool {
        self.as_sds().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
