// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the action to take if a match is determined.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GrpcGatewayRouteAction {
    /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
    pub target: ::std::option::Option<crate::types::GatewayRouteTarget>,
    /// <p>The gateway route action to rewrite.</p>
    pub rewrite: ::std::option::Option<crate::types::GrpcGatewayRouteRewrite>,
}
impl GrpcGatewayRouteAction {
    /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::GatewayRouteTarget> {
        self.target.as_ref()
    }
    /// <p>The gateway route action to rewrite.</p>
    pub fn rewrite(&self) -> ::std::option::Option<&crate::types::GrpcGatewayRouteRewrite> {
        self.rewrite.as_ref()
    }
}
impl GrpcGatewayRouteAction {
    /// Creates a new builder-style object to manufacture [`GrpcGatewayRouteAction`](crate::types::GrpcGatewayRouteAction).
    pub fn builder() -> crate::types::builders::GrpcGatewayRouteActionBuilder {
        crate::types::builders::GrpcGatewayRouteActionBuilder::default()
    }
}

/// A builder for [`GrpcGatewayRouteAction`](crate::types::GrpcGatewayRouteAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GrpcGatewayRouteActionBuilder {
    pub(crate) target: ::std::option::Option<crate::types::GatewayRouteTarget>,
    pub(crate) rewrite: ::std::option::Option<crate::types::GrpcGatewayRouteRewrite>,
}
impl GrpcGatewayRouteActionBuilder {
    /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
    /// This field is required.
    pub fn target(mut self, input: crate::types::GatewayRouteTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::GatewayRouteTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>An object that represents the target that traffic is routed to when a request matches the gateway route.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::GatewayRouteTarget> {
        &self.target
    }
    /// <p>The gateway route action to rewrite.</p>
    pub fn rewrite(mut self, input: crate::types::GrpcGatewayRouteRewrite) -> Self {
        self.rewrite = ::std::option::Option::Some(input);
        self
    }
    /// <p>The gateway route action to rewrite.</p>
    pub fn set_rewrite(mut self, input: ::std::option::Option<crate::types::GrpcGatewayRouteRewrite>) -> Self {
        self.rewrite = input;
        self
    }
    /// <p>The gateway route action to rewrite.</p>
    pub fn get_rewrite(&self) -> &::std::option::Option<crate::types::GrpcGatewayRouteRewrite> {
        &self.rewrite
    }
    /// Consumes the builder and constructs a [`GrpcGatewayRouteAction`](crate::types::GrpcGatewayRouteAction).
    pub fn build(self) -> crate::types::GrpcGatewayRouteAction {
        crate::types::GrpcGatewayRouteAction {
            target: self.target,
            rewrite: self.rewrite,
        }
    }
}
