// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the format for the logs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum LoggingFormat {
    /// <p></p>
    Json(std::vec::Vec<crate::types::JsonFormatRef>),
    /// <p></p>
    Text(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl LoggingFormat {
    /// Tries to convert the enum instance into [`Json`](crate::types::LoggingFormat::Json), extracting the inner [`Vec`](std::vec::Vec).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_json(
        &self,
    ) -> std::result::Result<&std::vec::Vec<crate::types::JsonFormatRef>, &Self> {
        if let LoggingFormat::Json(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Json`](crate::types::LoggingFormat::Json).
    pub fn is_json(&self) -> bool {
        self.as_json().is_ok()
    }
    /// Tries to convert the enum instance into [`Text`](crate::types::LoggingFormat::Text), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_text(&self) -> std::result::Result<&std::string::String, &Self> {
        if let LoggingFormat::Text(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`Text`](crate::types::LoggingFormat::Text).
    pub fn is_text(&self) -> bool {
        self.as_text().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
