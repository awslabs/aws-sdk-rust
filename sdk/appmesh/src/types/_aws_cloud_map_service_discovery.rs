// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note>
/// <p>Cloud Map is not available in the eu-south-1 Region.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsCloudMapServiceDiscovery {
    /// <p>The name of the Cloud Map namespace to use.</p>
    #[doc(hidden)]
    pub namespace_name: std::option::Option<std::string::String>,
    /// <p>The name of the Cloud Map service to use.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<std::vec::Vec<crate::types::AwsCloudMapInstanceAttribute>>,
    /// <p>The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node.</p>
    #[doc(hidden)]
    pub ip_preference: std::option::Option<crate::types::IpPreference>,
}
impl AwsCloudMapServiceDiscovery {
    /// <p>The name of the Cloud Map namespace to use.</p>
    pub fn namespace_name(&self) -> std::option::Option<&str> {
        self.namespace_name.as_deref()
    }
    /// <p>The name of the Cloud Map service to use.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.</p>
    pub fn attributes(&self) -> std::option::Option<&[crate::types::AwsCloudMapInstanceAttribute]> {
        self.attributes.as_deref()
    }
    /// <p>The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node.</p>
    pub fn ip_preference(&self) -> std::option::Option<&crate::types::IpPreference> {
        self.ip_preference.as_ref()
    }
}
impl AwsCloudMapServiceDiscovery {
    /// Creates a new builder-style object to manufacture [`AwsCloudMapServiceDiscovery`](crate::types::AwsCloudMapServiceDiscovery).
    pub fn builder() -> crate::types::builders::AwsCloudMapServiceDiscoveryBuilder {
        crate::types::builders::AwsCloudMapServiceDiscoveryBuilder::default()
    }
}

/// A builder for [`AwsCloudMapServiceDiscovery`](crate::types::AwsCloudMapServiceDiscovery).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsCloudMapServiceDiscoveryBuilder {
    pub(crate) namespace_name: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::vec::Vec<crate::types::AwsCloudMapInstanceAttribute>>,
    pub(crate) ip_preference: std::option::Option<crate::types::IpPreference>,
}
impl AwsCloudMapServiceDiscoveryBuilder {
    /// <p>The name of the Cloud Map namespace to use.</p>
    pub fn namespace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace_name = Some(input.into());
        self
    }
    /// <p>The name of the Cloud Map namespace to use.</p>
    pub fn set_namespace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace_name = input;
        self
    }
    /// <p>The name of the Cloud Map service to use.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The name of the Cloud Map service to use.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.</p>
    pub fn attributes(mut self, input: crate::types::AwsCloudMapInstanceAttribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = Some(v);
        self
    }
    /// <p>A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsCloudMapInstanceAttribute>>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node.</p>
    pub fn ip_preference(mut self, input: crate::types::IpPreference) -> Self {
        self.ip_preference = Some(input);
        self
    }
    /// <p>The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node.</p>
    pub fn set_ip_preference(
        mut self,
        input: std::option::Option<crate::types::IpPreference>,
    ) -> Self {
        self.ip_preference = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsCloudMapServiceDiscovery`](crate::types::AwsCloudMapServiceDiscovery).
    pub fn build(self) -> crate::types::AwsCloudMapServiceDiscovery {
        crate::types::AwsCloudMapServiceDiscovery {
            namespace_name: self.namespace_name,
            service_name: self.service_name,
            attributes: self.attributes,
            ip_preference: self.ip_preference,
        }
    }
}
