// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents the outlier detection for a virtual node's listener.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutlierDetection {
    /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
    pub max_server_errors: i64,
    /// <p>The time interval between ejection sweep analysis.</p>
    pub interval: ::std::option::Option<crate::types::Duration>,
    /// <p>The base amount of time for which a host is ejected.</p>
    pub base_ejection_duration: ::std::option::Option<crate::types::Duration>,
    /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.</p>
    pub max_ejection_percent: i32,
}
impl OutlierDetection {
    /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
    pub fn max_server_errors(&self) -> i64 {
        self.max_server_errors
    }
    /// <p>The time interval between ejection sweep analysis.</p>
    pub fn interval(&self) -> ::std::option::Option<&crate::types::Duration> {
        self.interval.as_ref()
    }
    /// <p>The base amount of time for which a host is ejected.</p>
    pub fn base_ejection_duration(&self) -> ::std::option::Option<&crate::types::Duration> {
        self.base_ejection_duration.as_ref()
    }
    /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.</p>
    pub fn max_ejection_percent(&self) -> i32 {
        self.max_ejection_percent
    }
}
impl OutlierDetection {
    /// Creates a new builder-style object to manufacture [`OutlierDetection`](crate::types::OutlierDetection).
    pub fn builder() -> crate::types::builders::OutlierDetectionBuilder {
        crate::types::builders::OutlierDetectionBuilder::default()
    }
}

/// A builder for [`OutlierDetection`](crate::types::OutlierDetection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutlierDetectionBuilder {
    pub(crate) max_server_errors: ::std::option::Option<i64>,
    pub(crate) interval: ::std::option::Option<crate::types::Duration>,
    pub(crate) base_ejection_duration: ::std::option::Option<crate::types::Duration>,
    pub(crate) max_ejection_percent: ::std::option::Option<i32>,
}
impl OutlierDetectionBuilder {
    /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
    /// This field is required.
    pub fn max_server_errors(mut self, input: i64) -> Self {
        self.max_server_errors = ::std::option::Option::Some(input);
        self
    }
    /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
    pub fn set_max_server_errors(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_server_errors = input;
        self
    }
    /// <p>Number of consecutive <code>5xx</code> errors required for ejection. </p>
    pub fn get_max_server_errors(&self) -> &::std::option::Option<i64> {
        &self.max_server_errors
    }
    /// <p>The time interval between ejection sweep analysis.</p>
    /// This field is required.
    pub fn interval(mut self, input: crate::types::Duration) -> Self {
        self.interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time interval between ejection sweep analysis.</p>
    pub fn set_interval(mut self, input: ::std::option::Option<crate::types::Duration>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The time interval between ejection sweep analysis.</p>
    pub fn get_interval(&self) -> &::std::option::Option<crate::types::Duration> {
        &self.interval
    }
    /// <p>The base amount of time for which a host is ejected.</p>
    /// This field is required.
    pub fn base_ejection_duration(mut self, input: crate::types::Duration) -> Self {
        self.base_ejection_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The base amount of time for which a host is ejected.</p>
    pub fn set_base_ejection_duration(mut self, input: ::std::option::Option<crate::types::Duration>) -> Self {
        self.base_ejection_duration = input;
        self
    }
    /// <p>The base amount of time for which a host is ejected.</p>
    pub fn get_base_ejection_duration(&self) -> &::std::option::Option<crate::types::Duration> {
        &self.base_ejection_duration
    }
    /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.</p>
    /// This field is required.
    pub fn max_ejection_percent(mut self, input: i32) -> Self {
        self.max_ejection_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.</p>
    pub fn set_max_ejection_percent(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_ejection_percent = input;
        self
    }
    /// <p>Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.</p>
    pub fn get_max_ejection_percent(&self) -> &::std::option::Option<i32> {
        &self.max_ejection_percent
    }
    /// Consumes the builder and constructs a [`OutlierDetection`](crate::types::OutlierDetection).
    /// This method will fail if any of the following fields are not set:
    /// - [`max_server_errors`](crate::types::builders::OutlierDetectionBuilder::max_server_errors)
    /// - [`max_ejection_percent`](crate::types::builders::OutlierDetectionBuilder::max_ejection_percent)
    pub fn build(self) -> ::std::result::Result<crate::types::OutlierDetection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OutlierDetection {
            max_server_errors: self.max_server_errors.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_server_errors",
                    "max_server_errors was not specified but it is required when building OutlierDetection",
                )
            })?,
            interval: self.interval,
            base_ejection_duration: self.base_ejection_duration,
            max_ejection_percent: self.max_ejection_percent.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "max_ejection_percent",
                    "max_ejection_percent was not specified but it is required when building OutlierDetection",
                )
            })?,
        })
    }
}
