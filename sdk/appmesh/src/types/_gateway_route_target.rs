// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a gateway route target.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GatewayRouteTarget {
    /// <p>An object that represents a virtual service gateway route target.</p>
    pub virtual_service: ::std::option::Option<crate::types::GatewayRouteVirtualService>,
    /// <p>The port number of the gateway route target.</p>
    pub port: ::std::option::Option<i32>,
}
impl GatewayRouteTarget {
    /// <p>An object that represents a virtual service gateway route target.</p>
    pub fn virtual_service(&self) -> ::std::option::Option<&crate::types::GatewayRouteVirtualService> {
        self.virtual_service.as_ref()
    }
    /// <p>The port number of the gateway route target.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
}
impl GatewayRouteTarget {
    /// Creates a new builder-style object to manufacture [`GatewayRouteTarget`](crate::types::GatewayRouteTarget).
    pub fn builder() -> crate::types::builders::GatewayRouteTargetBuilder {
        crate::types::builders::GatewayRouteTargetBuilder::default()
    }
}

/// A builder for [`GatewayRouteTarget`](crate::types::GatewayRouteTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GatewayRouteTargetBuilder {
    pub(crate) virtual_service: ::std::option::Option<crate::types::GatewayRouteVirtualService>,
    pub(crate) port: ::std::option::Option<i32>,
}
impl GatewayRouteTargetBuilder {
    /// <p>An object that represents a virtual service gateway route target.</p>
    /// This field is required.
    pub fn virtual_service(mut self, input: crate::types::GatewayRouteVirtualService) -> Self {
        self.virtual_service = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that represents a virtual service gateway route target.</p>
    pub fn set_virtual_service(mut self, input: ::std::option::Option<crate::types::GatewayRouteVirtualService>) -> Self {
        self.virtual_service = input;
        self
    }
    /// <p>An object that represents a virtual service gateway route target.</p>
    pub fn get_virtual_service(&self) -> &::std::option::Option<crate::types::GatewayRouteVirtualService> {
        &self.virtual_service
    }
    /// <p>The port number of the gateway route target.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number of the gateway route target.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number of the gateway route target.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// Consumes the builder and constructs a [`GatewayRouteTarget`](crate::types::GatewayRouteTarget).
    pub fn build(self) -> crate::types::GatewayRouteTarget {
        crate::types::GatewayRouteTarget {
            virtual_service: self.virtual_service,
            port: self.port,
        }
    }
}
