// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents a Transport Layer Security (TLS) client policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VirtualGatewayClientPolicyTls {
    /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified.</p>
    #[doc(hidden)]
    pub enforce: std::option::Option<bool>,
    /// <p>One or more ports that the policy is enforced for.</p>
    #[doc(hidden)]
    pub ports: std::option::Option<std::vec::Vec<i32>>,
    /// <p>A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.</p>
    #[doc(hidden)]
    pub certificate: std::option::Option<crate::types::VirtualGatewayClientTlsCertificate>,
    /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context.</p>
    #[doc(hidden)]
    pub validation: std::option::Option<crate::types::VirtualGatewayTlsValidationContext>,
}
impl VirtualGatewayClientPolicyTls {
    /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified.</p>
    pub fn enforce(&self) -> std::option::Option<bool> {
        self.enforce
    }
    /// <p>One or more ports that the policy is enforced for.</p>
    pub fn ports(&self) -> std::option::Option<&[i32]> {
        self.ports.as_deref()
    }
    /// <p>A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.</p>
    pub fn certificate(
        &self,
    ) -> std::option::Option<&crate::types::VirtualGatewayClientTlsCertificate> {
        self.certificate.as_ref()
    }
    /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context.</p>
    pub fn validation(
        &self,
    ) -> std::option::Option<&crate::types::VirtualGatewayTlsValidationContext> {
        self.validation.as_ref()
    }
}
impl VirtualGatewayClientPolicyTls {
    /// Creates a new builder-style object to manufacture [`VirtualGatewayClientPolicyTls`](crate::types::VirtualGatewayClientPolicyTls).
    pub fn builder() -> crate::types::builders::VirtualGatewayClientPolicyTlsBuilder {
        crate::types::builders::VirtualGatewayClientPolicyTlsBuilder::default()
    }
}

/// A builder for [`VirtualGatewayClientPolicyTls`](crate::types::VirtualGatewayClientPolicyTls).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VirtualGatewayClientPolicyTlsBuilder {
    pub(crate) enforce: std::option::Option<bool>,
    pub(crate) ports: std::option::Option<std::vec::Vec<i32>>,
    pub(crate) certificate: std::option::Option<crate::types::VirtualGatewayClientTlsCertificate>,
    pub(crate) validation: std::option::Option<crate::types::VirtualGatewayTlsValidationContext>,
}
impl VirtualGatewayClientPolicyTlsBuilder {
    /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified.</p>
    pub fn enforce(mut self, input: bool) -> Self {
        self.enforce = Some(input);
        self
    }
    /// <p>Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified.</p>
    pub fn set_enforce(mut self, input: std::option::Option<bool>) -> Self {
        self.enforce = input;
        self
    }
    /// Appends an item to `ports`.
    ///
    /// To override the contents of this collection use [`set_ports`](Self::set_ports).
    ///
    /// <p>One or more ports that the policy is enforced for.</p>
    pub fn ports(mut self, input: i32) -> Self {
        let mut v = self.ports.unwrap_or_default();
        v.push(input);
        self.ports = Some(v);
        self
    }
    /// <p>One or more ports that the policy is enforced for.</p>
    pub fn set_ports(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
        self.ports = input;
        self
    }
    /// <p>A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.</p>
    pub fn certificate(mut self, input: crate::types::VirtualGatewayClientTlsCertificate) -> Self {
        self.certificate = Some(input);
        self
    }
    /// <p>A reference to an object that represents a virtual gateway's client's Transport Layer Security (TLS) certificate.</p>
    pub fn set_certificate(
        mut self,
        input: std::option::Option<crate::types::VirtualGatewayClientTlsCertificate>,
    ) -> Self {
        self.certificate = input;
        self
    }
    /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context.</p>
    pub fn validation(mut self, input: crate::types::VirtualGatewayTlsValidationContext) -> Self {
        self.validation = Some(input);
        self
    }
    /// <p>A reference to an object that represents a Transport Layer Security (TLS) validation context.</p>
    pub fn set_validation(
        mut self,
        input: std::option::Option<crate::types::VirtualGatewayTlsValidationContext>,
    ) -> Self {
        self.validation = input;
        self
    }
    /// Consumes the builder and constructs a [`VirtualGatewayClientPolicyTls`](crate::types::VirtualGatewayClientPolicyTls).
    pub fn build(self) -> crate::types::VirtualGatewayClientPolicyTls {
        crate::types::VirtualGatewayClientPolicyTls {
            enforce: self.enforce,
            ports: self.ports,
            certificate: self.certificate,
            validation: self.validation,
        }
    }
}
