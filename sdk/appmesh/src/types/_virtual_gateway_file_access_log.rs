// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an access log file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VirtualGatewayFileAccessLog {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p>
    #[doc(hidden)]
    pub path: std::option::Option<std::string::String>,
    /// <p>The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::LoggingFormat>,
}
impl VirtualGatewayFileAccessLog {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p>
    pub fn path(&self) -> std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::LoggingFormat> {
        self.format.as_ref()
    }
}
impl VirtualGatewayFileAccessLog {
    /// Creates a new builder-style object to manufacture [`VirtualGatewayFileAccessLog`](crate::types::VirtualGatewayFileAccessLog).
    pub fn builder() -> crate::types::builders::VirtualGatewayFileAccessLogBuilder {
        crate::types::builders::VirtualGatewayFileAccessLogBuilder::default()
    }
}

/// A builder for [`VirtualGatewayFileAccessLog`](crate::types::VirtualGatewayFileAccessLog).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VirtualGatewayFileAccessLogBuilder {
    pub(crate) path: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::LoggingFormat>,
}
impl VirtualGatewayFileAccessLogBuilder {
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p>
    pub fn path(mut self, input: impl Into<std::string::String>) -> Self {
        self.path = Some(input.into());
        self
    }
    /// <p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p>
    pub fn set_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn format(mut self, input: crate::types::LoggingFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The specified format for the virtual gateway access logs. It can be either <code>json_format</code> or <code>text_format</code>.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::LoggingFormat>) -> Self {
        self.format = input;
        self
    }
    /// Consumes the builder and constructs a [`VirtualGatewayFileAccessLog`](crate::types::VirtualGatewayFileAccessLog).
    pub fn build(self) -> crate::types::VirtualGatewayFileAccessLog {
        crate::types::VirtualGatewayFileAccessLog {
            path: self.path,
            format: self.format,
        }
    }
}
