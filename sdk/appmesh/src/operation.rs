// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a gateway route.</p>
/// <p>A gateway route is attached to a virtual gateway and routes traffic to an existing
/// virtual service. If a route matches a request, it can distribute traffic to a target
/// virtual service.</p>
/// <p>For more information about gateway routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/gateway-routes.html">Gateway routes</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGatewayRoute {
    _private: (),
}
impl CreateGatewayRoute {
    /// Creates a new builder-style object to manufacture [`CreateGatewayRouteInput`](crate::input::CreateGatewayRouteInput)
    pub fn builder() -> crate::input::create_gateway_route_input::Builder {
        crate::input::create_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateGatewayRoute {
    type Output = std::result::Result<
        crate::output::CreateGatewayRouteOutput,
        crate::error::CreateGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_create_gateway_route_response(response)
        }
    }
}

/// <p>Creates a service mesh.</p>
/// <p> A service mesh is a logical boundary for network traffic between services that are
/// represented by resources within the mesh. After you create your service mesh, you can
/// create virtual services, virtual nodes, virtual routers, and routes to distribute traffic
/// between the applications in your mesh.</p>
/// <p>For more information about service meshes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/meshes.html">Service meshes</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMesh {
    _private: (),
}
impl CreateMesh {
    /// Creates a new builder-style object to manufacture [`CreateMeshInput`](crate::input::CreateMeshInput)
    pub fn builder() -> crate::input::create_mesh_input::Builder {
        crate::input::create_mesh_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMesh {
    type Output =
        std::result::Result<crate::output::CreateMeshOutput, crate::error::CreateMeshError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_mesh_error(response)
        } else {
            crate::operation_deser::parse_create_mesh_response(response)
        }
    }
}

/// <p>Creates a route that is associated with a virtual router.</p>
/// <p> You can route several different protocols and define a retry policy for a route.
/// Traffic can be routed to one or more virtual nodes.</p>
/// <p>For more information about routes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/routes.html">Routes</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateRoute {
    _private: (),
}
impl CreateRoute {
    /// Creates a new builder-style object to manufacture [`CreateRouteInput`](crate::input::CreateRouteInput)
    pub fn builder() -> crate::input::create_route_input::Builder {
        crate::input::create_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateRoute {
    type Output =
        std::result::Result<crate::output::CreateRouteOutput, crate::error::CreateRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_route_error(response)
        } else {
            crate::operation_deser::parse_create_route_response(response)
        }
    }
}

/// <p>Creates a virtual gateway.</p>
/// <p>A virtual gateway allows resources outside your mesh to communicate to resources that
/// are inside your mesh. The virtual gateway represents an Envoy proxy running in an Amazon ECS
/// task, in a Kubernetes service, or on an Amazon EC2 instance. Unlike a virtual node, which
/// represents an Envoy running with an application, a virtual gateway represents Envoy
/// deployed by itself.</p>
/// <p>For more information about virtual gateways, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_gateways.html">Virtual gateways</a>. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVirtualGateway {
    _private: (),
}
impl CreateVirtualGateway {
    /// Creates a new builder-style object to manufacture [`CreateVirtualGatewayInput`](crate::input::CreateVirtualGatewayInput)
    pub fn builder() -> crate::input::create_virtual_gateway_input::Builder {
        crate::input::create_virtual_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVirtualGateway {
    type Output = std::result::Result<
        crate::output::CreateVirtualGatewayOutput,
        crate::error::CreateVirtualGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_virtual_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_virtual_gateway_response(response)
        }
    }
}

/// <p>Creates a virtual node within a service mesh.</p>
/// <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS
/// service or a Kubernetes deployment. When you create a virtual node, you can specify the
/// service discovery information for your task group, and whether the proxy running in a task
/// group will communicate with other proxies using Transport Layer Security (TLS).</p>
/// <p>You define a <code>listener</code> for any inbound traffic that your virtual node
/// expects. Any virtual service that your virtual node expects to communicate to is specified
/// as a <code>backend</code>.</p>
/// <p>The response metadata for your new virtual node contains the <code>arn</code> that is
/// associated with the virtual node. Set this value to the full ARN; for example,
/// <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>)
/// as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy
/// proxy container in your task definition or pod spec. This is then mapped to the
/// <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p>
/// <note>
/// <p>By default, App Mesh uses the name of the resource you specified in
/// <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and
/// traces. You can override this behavior by setting the
/// <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p>
/// </note>
/// <p>For more information about virtual nodes, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when
/// setting these variables. For more information aboutApp Mesh Envoy variables, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html">Envoy image</a> in
/// the AWS App Mesh User Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVirtualNode {
    _private: (),
}
impl CreateVirtualNode {
    /// Creates a new builder-style object to manufacture [`CreateVirtualNodeInput`](crate::input::CreateVirtualNodeInput)
    pub fn builder() -> crate::input::create_virtual_node_input::Builder {
        crate::input::create_virtual_node_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVirtualNode {
    type Output = std::result::Result<
        crate::output::CreateVirtualNodeOutput,
        crate::error::CreateVirtualNodeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_virtual_node_error(response)
        } else {
            crate::operation_deser::parse_create_virtual_node_response(response)
        }
    }
}

/// <p>Creates a virtual router within a service mesh.</p>
/// <p>Specify a <code>listener</code> for any inbound traffic that your virtual router
/// receives. Create a virtual router for each protocol and port that you need to route.
/// Virtual routers handle traffic for one or more virtual services within your mesh. After you
/// create your virtual router, create and associate routes for your virtual router that direct
/// incoming requests to different virtual nodes.</p>
/// <p>For more information about virtual routers, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_routers.html">Virtual routers</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVirtualRouter {
    _private: (),
}
impl CreateVirtualRouter {
    /// Creates a new builder-style object to manufacture [`CreateVirtualRouterInput`](crate::input::CreateVirtualRouterInput)
    pub fn builder() -> crate::input::create_virtual_router_input::Builder {
        crate::input::create_virtual_router_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVirtualRouter {
    type Output = std::result::Result<
        crate::output::CreateVirtualRouterOutput,
        crate::error::CreateVirtualRouterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_virtual_router_error(response)
        } else {
            crate::operation_deser::parse_create_virtual_router_response(response)
        }
    }
}

/// <p>Creates a virtual service within a service mesh.</p>
/// <p>A virtual service is an abstraction of a real service that is provided by a virtual node
/// directly or indirectly by means of a virtual router. Dependent services call your virtual
/// service by its <code>virtualServiceName</code>, and those requests are routed to the
/// virtual node or virtual router that is specified as the provider for the virtual
/// service.</p>
/// <p>For more information about virtual services, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_services.html">Virtual services</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVirtualService {
    _private: (),
}
impl CreateVirtualService {
    /// Creates a new builder-style object to manufacture [`CreateVirtualServiceInput`](crate::input::CreateVirtualServiceInput)
    pub fn builder() -> crate::input::create_virtual_service_input::Builder {
        crate::input::create_virtual_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateVirtualService {
    type Output = std::result::Result<
        crate::output::CreateVirtualServiceOutput,
        crate::error::CreateVirtualServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_virtual_service_error(response)
        } else {
            crate::operation_deser::parse_create_virtual_service_response(response)
        }
    }
}

/// <p>Deletes an existing gateway route.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteGatewayRoute {
    _private: (),
}
impl DeleteGatewayRoute {
    /// Creates a new builder-style object to manufacture [`DeleteGatewayRouteInput`](crate::input::DeleteGatewayRouteInput)
    pub fn builder() -> crate::input::delete_gateway_route_input::Builder {
        crate::input::delete_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteGatewayRoute {
    type Output = std::result::Result<
        crate::output::DeleteGatewayRouteOutput,
        crate::error::DeleteGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_delete_gateway_route_response(response)
        }
    }
}

/// <p>Deletes an existing service mesh.</p>
/// <p>You must delete all resources (virtual services, routes, virtual routers, and virtual
/// nodes) in the service mesh before you can delete the mesh itself.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMesh {
    _private: (),
}
impl DeleteMesh {
    /// Creates a new builder-style object to manufacture [`DeleteMeshInput`](crate::input::DeleteMeshInput)
    pub fn builder() -> crate::input::delete_mesh_input::Builder {
        crate::input::delete_mesh_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteMesh {
    type Output =
        std::result::Result<crate::output::DeleteMeshOutput, crate::error::DeleteMeshError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_mesh_error(response)
        } else {
            crate::operation_deser::parse_delete_mesh_response(response)
        }
    }
}

/// <p>Deletes an existing route.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRoute {
    _private: (),
}
impl DeleteRoute {
    /// Creates a new builder-style object to manufacture [`DeleteRouteInput`](crate::input::DeleteRouteInput)
    pub fn builder() -> crate::input::delete_route_input::Builder {
        crate::input::delete_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRoute {
    type Output =
        std::result::Result<crate::output::DeleteRouteOutput, crate::error::DeleteRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_route_error(response)
        } else {
            crate::operation_deser::parse_delete_route_response(response)
        }
    }
}

/// <p>Deletes an existing virtual gateway. You cannot delete a virtual gateway if any gateway
/// routes are associated to it.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualGateway {
    _private: (),
}
impl DeleteVirtualGateway {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualGatewayInput`](crate::input::DeleteVirtualGatewayInput)
    pub fn builder() -> crate::input::delete_virtual_gateway_input::Builder {
        crate::input::delete_virtual_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVirtualGateway {
    type Output = std::result::Result<
        crate::output::DeleteVirtualGatewayOutput,
        crate::error::DeleteVirtualGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_gateway_response(response)
        }
    }
}

/// <p>Deletes an existing virtual node.</p>
/// <p>You must delete any virtual services that list a virtual node as a service provider
/// before you can delete the virtual node itself.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualNode {
    _private: (),
}
impl DeleteVirtualNode {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualNodeInput`](crate::input::DeleteVirtualNodeInput)
    pub fn builder() -> crate::input::delete_virtual_node_input::Builder {
        crate::input::delete_virtual_node_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVirtualNode {
    type Output = std::result::Result<
        crate::output::DeleteVirtualNodeOutput,
        crate::error::DeleteVirtualNodeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_node_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_node_response(response)
        }
    }
}

/// <p>Deletes an existing virtual router.</p>
/// <p>You must delete any routes associated with the virtual router before you can delete the
/// router itself.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualRouter {
    _private: (),
}
impl DeleteVirtualRouter {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualRouterInput`](crate::input::DeleteVirtualRouterInput)
    pub fn builder() -> crate::input::delete_virtual_router_input::Builder {
        crate::input::delete_virtual_router_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVirtualRouter {
    type Output = std::result::Result<
        crate::output::DeleteVirtualRouterOutput,
        crate::error::DeleteVirtualRouterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_router_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_router_response(response)
        }
    }
}

/// <p>Deletes an existing virtual service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualService {
    _private: (),
}
impl DeleteVirtualService {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualServiceInput`](crate::input::DeleteVirtualServiceInput)
    pub fn builder() -> crate::input::delete_virtual_service_input::Builder {
        crate::input::delete_virtual_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVirtualService {
    type Output = std::result::Result<
        crate::output::DeleteVirtualServiceOutput,
        crate::error::DeleteVirtualServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_service_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_service_response(response)
        }
    }
}

/// <p>Describes an existing gateway route.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeGatewayRoute {
    _private: (),
}
impl DescribeGatewayRoute {
    /// Creates a new builder-style object to manufacture [`DescribeGatewayRouteInput`](crate::input::DescribeGatewayRouteInput)
    pub fn builder() -> crate::input::describe_gateway_route_input::Builder {
        crate::input::describe_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeGatewayRoute {
    type Output = std::result::Result<
        crate::output::DescribeGatewayRouteOutput,
        crate::error::DescribeGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_describe_gateway_route_response(response)
        }
    }
}

/// <p>Describes an existing service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeMesh {
    _private: (),
}
impl DescribeMesh {
    /// Creates a new builder-style object to manufacture [`DescribeMeshInput`](crate::input::DescribeMeshInput)
    pub fn builder() -> crate::input::describe_mesh_input::Builder {
        crate::input::describe_mesh_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeMesh {
    type Output =
        std::result::Result<crate::output::DescribeMeshOutput, crate::error::DescribeMeshError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_mesh_error(response)
        } else {
            crate::operation_deser::parse_describe_mesh_response(response)
        }
    }
}

/// <p>Describes an existing route.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRoute {
    _private: (),
}
impl DescribeRoute {
    /// Creates a new builder-style object to manufacture [`DescribeRouteInput`](crate::input::DescribeRouteInput)
    pub fn builder() -> crate::input::describe_route_input::Builder {
        crate::input::describe_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRoute {
    type Output =
        std::result::Result<crate::output::DescribeRouteOutput, crate::error::DescribeRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_route_error(response)
        } else {
            crate::operation_deser::parse_describe_route_response(response)
        }
    }
}

/// <p>Describes an existing virtual gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualGateway {
    _private: (),
}
impl DescribeVirtualGateway {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualGatewayInput`](crate::input::DescribeVirtualGatewayInput)
    pub fn builder() -> crate::input::describe_virtual_gateway_input::Builder {
        crate::input::describe_virtual_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualGateway {
    type Output = std::result::Result<
        crate::output::DescribeVirtualGatewayOutput,
        crate::error::DescribeVirtualGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_gateway_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_gateway_response(response)
        }
    }
}

/// <p>Describes an existing virtual node.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualNode {
    _private: (),
}
impl DescribeVirtualNode {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualNodeInput`](crate::input::DescribeVirtualNodeInput)
    pub fn builder() -> crate::input::describe_virtual_node_input::Builder {
        crate::input::describe_virtual_node_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualNode {
    type Output = std::result::Result<
        crate::output::DescribeVirtualNodeOutput,
        crate::error::DescribeVirtualNodeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_node_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_node_response(response)
        }
    }
}

/// <p>Describes an existing virtual router.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualRouter {
    _private: (),
}
impl DescribeVirtualRouter {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualRouterInput`](crate::input::DescribeVirtualRouterInput)
    pub fn builder() -> crate::input::describe_virtual_router_input::Builder {
        crate::input::describe_virtual_router_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualRouter {
    type Output = std::result::Result<
        crate::output::DescribeVirtualRouterOutput,
        crate::error::DescribeVirtualRouterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_router_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_router_response(response)
        }
    }
}

/// <p>Describes an existing virtual service.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualService {
    _private: (),
}
impl DescribeVirtualService {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualServiceInput`](crate::input::DescribeVirtualServiceInput)
    pub fn builder() -> crate::input::describe_virtual_service_input::Builder {
        crate::input::describe_virtual_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualService {
    type Output = std::result::Result<
        crate::output::DescribeVirtualServiceOutput,
        crate::error::DescribeVirtualServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_service_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_service_response(response)
        }
    }
}

/// <p>Returns a list of existing gateway routes that are associated to a virtual
/// gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGatewayRoutes {
    _private: (),
}
impl ListGatewayRoutes {
    /// Creates a new builder-style object to manufacture [`ListGatewayRoutesInput`](crate::input::ListGatewayRoutesInput)
    pub fn builder() -> crate::input::list_gateway_routes_input::Builder {
        crate::input::list_gateway_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListGatewayRoutes {
    type Output = std::result::Result<
        crate::output::ListGatewayRoutesOutput,
        crate::error::ListGatewayRoutesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_gateway_routes_error(response)
        } else {
            crate::operation_deser::parse_list_gateway_routes_response(response)
        }
    }
}

/// <p>Returns a list of existing service meshes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListMeshes {
    _private: (),
}
impl ListMeshes {
    /// Creates a new builder-style object to manufacture [`ListMeshesInput`](crate::input::ListMeshesInput)
    pub fn builder() -> crate::input::list_meshes_input::Builder {
        crate::input::list_meshes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListMeshes {
    type Output =
        std::result::Result<crate::output::ListMeshesOutput, crate::error::ListMeshesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_meshes_error(response)
        } else {
            crate::operation_deser::parse_list_meshes_response(response)
        }
    }
}

/// <p>Returns a list of existing routes in a service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListRoutes {
    _private: (),
}
impl ListRoutes {
    /// Creates a new builder-style object to manufacture [`ListRoutesInput`](crate::input::ListRoutesInput)
    pub fn builder() -> crate::input::list_routes_input::Builder {
        crate::input::list_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListRoutes {
    type Output =
        std::result::Result<crate::output::ListRoutesOutput, crate::error::ListRoutesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_routes_error(response)
        } else {
            crate::operation_deser::parse_list_routes_response(response)
        }
    }
}

/// <p>List the tags for an App Mesh resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Returns a list of existing virtual gateways in a service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualGateways {
    _private: (),
}
impl ListVirtualGateways {
    /// Creates a new builder-style object to manufacture [`ListVirtualGatewaysInput`](crate::input::ListVirtualGatewaysInput)
    pub fn builder() -> crate::input::list_virtual_gateways_input::Builder {
        crate::input::list_virtual_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVirtualGateways {
    type Output = std::result::Result<
        crate::output::ListVirtualGatewaysOutput,
        crate::error::ListVirtualGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_gateways_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_gateways_response(response)
        }
    }
}

/// <p>Returns a list of existing virtual nodes.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualNodes {
    _private: (),
}
impl ListVirtualNodes {
    /// Creates a new builder-style object to manufacture [`ListVirtualNodesInput`](crate::input::ListVirtualNodesInput)
    pub fn builder() -> crate::input::list_virtual_nodes_input::Builder {
        crate::input::list_virtual_nodes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVirtualNodes {
    type Output = std::result::Result<
        crate::output::ListVirtualNodesOutput,
        crate::error::ListVirtualNodesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_nodes_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_nodes_response(response)
        }
    }
}

/// <p>Returns a list of existing virtual routers in a service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualRouters {
    _private: (),
}
impl ListVirtualRouters {
    /// Creates a new builder-style object to manufacture [`ListVirtualRoutersInput`](crate::input::ListVirtualRoutersInput)
    pub fn builder() -> crate::input::list_virtual_routers_input::Builder {
        crate::input::list_virtual_routers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVirtualRouters {
    type Output = std::result::Result<
        crate::output::ListVirtualRoutersOutput,
        crate::error::ListVirtualRoutersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_routers_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_routers_response(response)
        }
    }
}

/// <p>Returns a list of existing virtual services in a service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualServices {
    _private: (),
}
impl ListVirtualServices {
    /// Creates a new builder-style object to manufacture [`ListVirtualServicesInput`](crate::input::ListVirtualServicesInput)
    pub fn builder() -> crate::input::list_virtual_services_input::Builder {
        crate::input::list_virtual_services_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVirtualServices {
    type Output = std::result::Result<
        crate::output::ListVirtualServicesOutput,
        crate::error::ListVirtualServicesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_services_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_services_response(response)
        }
    }
}

/// <p>Associates the specified tags to a resource with the specified <code>resourceArn</code>.
/// If existing tags on a resource aren't specified in the request parameters, they aren't
/// changed. When a resource is deleted, the tags associated with that resource are also
/// deleted.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Deletes specified tags from a resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an existing gateway route that is associated to a specified virtual gateway in a
/// service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGatewayRoute {
    _private: (),
}
impl UpdateGatewayRoute {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayRouteInput`](crate::input::UpdateGatewayRouteInput)
    pub fn builder() -> crate::input::update_gateway_route_input::Builder {
        crate::input::update_gateway_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateGatewayRoute {
    type Output = std::result::Result<
        crate::output::UpdateGatewayRouteOutput,
        crate::error::UpdateGatewayRouteError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_gateway_route_error(response)
        } else {
            crate::operation_deser::parse_update_gateway_route_response(response)
        }
    }
}

/// <p>Updates an existing service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMesh {
    _private: (),
}
impl UpdateMesh {
    /// Creates a new builder-style object to manufacture [`UpdateMeshInput`](crate::input::UpdateMeshInput)
    pub fn builder() -> crate::input::update_mesh_input::Builder {
        crate::input::update_mesh_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateMesh {
    type Output =
        std::result::Result<crate::output::UpdateMeshOutput, crate::error::UpdateMeshError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_mesh_error(response)
        } else {
            crate::operation_deser::parse_update_mesh_response(response)
        }
    }
}

/// <p>Updates an existing route for a specified service mesh and virtual router.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoute {
    _private: (),
}
impl UpdateRoute {
    /// Creates a new builder-style object to manufacture [`UpdateRouteInput`](crate::input::UpdateRouteInput)
    pub fn builder() -> crate::input::update_route_input::Builder {
        crate::input::update_route_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRoute {
    type Output =
        std::result::Result<crate::output::UpdateRouteOutput, crate::error::UpdateRouteError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_route_error(response)
        } else {
            crate::operation_deser::parse_update_route_response(response)
        }
    }
}

/// <p>Updates an existing virtual gateway in a specified service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualGateway {
    _private: (),
}
impl UpdateVirtualGateway {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualGatewayInput`](crate::input::UpdateVirtualGatewayInput)
    pub fn builder() -> crate::input::update_virtual_gateway_input::Builder {
        crate::input::update_virtual_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVirtualGateway {
    type Output = std::result::Result<
        crate::output::UpdateVirtualGatewayOutput,
        crate::error::UpdateVirtualGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_gateway_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_gateway_response(response)
        }
    }
}

/// <p>Updates an existing virtual node in a specified service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualNode {
    _private: (),
}
impl UpdateVirtualNode {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualNodeInput`](crate::input::UpdateVirtualNodeInput)
    pub fn builder() -> crate::input::update_virtual_node_input::Builder {
        crate::input::update_virtual_node_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVirtualNode {
    type Output = std::result::Result<
        crate::output::UpdateVirtualNodeOutput,
        crate::error::UpdateVirtualNodeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_node_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_node_response(response)
        }
    }
}

/// <p>Updates an existing virtual router in a specified service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualRouter {
    _private: (),
}
impl UpdateVirtualRouter {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualRouterInput`](crate::input::UpdateVirtualRouterInput)
    pub fn builder() -> crate::input::update_virtual_router_input::Builder {
        crate::input::update_virtual_router_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVirtualRouter {
    type Output = std::result::Result<
        crate::output::UpdateVirtualRouterOutput,
        crate::error::UpdateVirtualRouterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_router_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_router_response(response)
        }
    }
}

/// <p>Updates an existing virtual service in a specified service mesh.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualService {
    _private: (),
}
impl UpdateVirtualService {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualServiceInput`](crate::input::UpdateVirtualServiceInput)
    pub fn builder() -> crate::input::update_virtual_service_input::Builder {
        crate::input::update_virtual_service_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVirtualService {
    type Output = std::result::Result<
        crate::output::UpdateVirtualServiceOutput,
        crate::error::UpdateVirtualServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_service_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_service_response(response)
        }
    }
}
