// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_gateway_route::_update_gateway_route_output::UpdateGatewayRouteOutputBuilder;

pub use crate::operation::update_gateway_route::_update_gateway_route_input::UpdateGatewayRouteInputBuilder;

impl UpdateGatewayRouteInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_gateway_route::UpdateGatewayRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gateway_route::UpdateGatewayRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_gateway_route();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateGatewayRoute`.
///
/// <p>Updates an existing gateway route that is associated to a specified virtual gateway in a service mesh.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateGatewayRouteFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_gateway_route::builders::UpdateGatewayRouteInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_gateway_route::UpdateGatewayRouteOutput,
        crate::operation::update_gateway_route::UpdateGatewayRouteError,
    > for UpdateGatewayRouteFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_gateway_route::UpdateGatewayRouteOutput,
            crate::operation::update_gateway_route::UpdateGatewayRouteError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateGatewayRouteFluentBuilder {
    /// Creates a new `UpdateGatewayRoute`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateGatewayRoute as a reference.
    pub fn as_input(&self) -> &crate::operation::update_gateway_route::builders::UpdateGatewayRouteInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_gateway_route::UpdateGatewayRouteOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_gateway_route::UpdateGatewayRouteError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_gateway_route::UpdateGatewayRoute::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_gateway_route::UpdateGatewayRoute::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_gateway_route::UpdateGatewayRouteOutput,
        crate::operation::update_gateway_route::UpdateGatewayRouteError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the gateway route to update.</p>
    pub fn gateway_route_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.gateway_route_name(input.into());
        self
    }
    /// <p>The name of the gateway route to update.</p>
    pub fn set_gateway_route_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_gateway_route_name(input);
        self
    }
    /// <p>The name of the gateway route to update.</p>
    pub fn get_gateway_route_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_gateway_route_name()
    }
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    pub fn mesh_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mesh_name(input.into());
        self
    }
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    pub fn set_mesh_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_name(input);
        self
    }
    /// <p>The name of the service mesh that the gateway route resides in.</p>
    pub fn get_mesh_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mesh_name()
    }
    /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
    pub fn virtual_gateway_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.virtual_gateway_name(input.into());
        self
    }
    /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
    pub fn set_virtual_gateway_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_virtual_gateway_name(input);
        self
    }
    /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
    pub fn get_virtual_gateway_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_virtual_gateway_name()
    }
    /// <p>The new gateway route specification to apply. This overwrites the existing data.</p>
    pub fn spec(mut self, input: crate::types::GatewayRouteSpec) -> Self {
        self.inner = self.inner.spec(input);
        self
    }
    /// <p>The new gateway route specification to apply. This overwrites the existing data.</p>
    pub fn set_spec(mut self, input: ::std::option::Option<crate::types::GatewayRouteSpec>) -> Self {
        self.inner = self.inner.set_spec(input);
        self
    }
    /// <p>The new gateway route specification to apply. This overwrites the existing data.</p>
    pub fn get_spec(&self) -> &::std::option::Option<crate::types::GatewayRouteSpec> {
        self.inner.get_spec()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mesh_owner(input.into());
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn set_mesh_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_owner(input);
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn get_mesh_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mesh_owner()
    }
}
