// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMeshInput {
    /// <p>The name of the service mesh to delete.</p>
    #[doc(hidden)]
    pub mesh_name: std::option::Option<std::string::String>,
}
impl DeleteMeshInput {
    /// <p>The name of the service mesh to delete.</p>
    pub fn mesh_name(&self) -> std::option::Option<&str> {
        self.mesh_name.as_deref()
    }
}
impl DeleteMeshInput {
    /// Creates a new builder-style object to manufacture [`DeleteMeshInput`](crate::operation::delete_mesh::DeleteMeshInput).
    pub fn builder() -> crate::operation::delete_mesh::builders::DeleteMeshInputBuilder {
        crate::operation::delete_mesh::builders::DeleteMeshInputBuilder::default()
    }
}

/// A builder for [`DeleteMeshInput`](crate::operation::delete_mesh::DeleteMeshInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteMeshInputBuilder {
    pub(crate) mesh_name: std::option::Option<std::string::String>,
}
impl DeleteMeshInputBuilder {
    /// <p>The name of the service mesh to delete.</p>
    pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.mesh_name = Some(input.into());
        self
    }
    /// <p>The name of the service mesh to delete.</p>
    pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteMeshInput`](crate::operation::delete_mesh::DeleteMeshInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_mesh::DeleteMeshInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_mesh::DeleteMeshInput {
            mesh_name: self.mesh_name,
        })
    }
}
