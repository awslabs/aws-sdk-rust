// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_virtual_gateway::_update_virtual_gateway_output::UpdateVirtualGatewayOutputBuilder;

pub use crate::operation::update_virtual_gateway::_update_virtual_gateway_input::UpdateVirtualGatewayInputBuilder;

/// Fluent builder constructing a request to `UpdateVirtualGateway`.
///
/// <p>Updates an existing virtual gateway in a specified service mesh.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualGatewayFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_virtual_gateway::builders::UpdateVirtualGatewayInputBuilder,
}
impl UpdateVirtualGatewayFluentBuilder {
    /// Creates a new `UpdateVirtualGateway`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_virtual_gateway::UpdateVirtualGateway,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_virtual_gateway::UpdateVirtualGatewayError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_virtual_gateway::UpdateVirtualGatewayOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_virtual_gateway::UpdateVirtualGatewayError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the virtual gateway to update.</p>
    pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.virtual_gateway_name(input.into());
        self
    }
    /// <p>The name of the virtual gateway to update.</p>
    pub fn set_virtual_gateway_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_virtual_gateway_name(input);
        self
    }
    /// <p>The name of the service mesh that the virtual gateway resides in.</p>
    pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.mesh_name(input.into());
        self
    }
    /// <p>The name of the service mesh that the virtual gateway resides in.</p>
    pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_name(input);
        self
    }
    /// <p>The new virtual gateway specification to apply. This overwrites the existing data.</p>
    pub fn spec(mut self, input: crate::types::VirtualGatewaySpec) -> Self {
        self.inner = self.inner.spec(input);
        self
    }
    /// <p>The new virtual gateway specification to apply. This overwrites the existing data.</p>
    pub fn set_spec(
        mut self,
        input: std::option::Option<crate::types::VirtualGatewaySpec>,
    ) -> Self {
        self.inner = self.inner.set_spec(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.mesh_owner(input.into());
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_mesh_owner(input);
        self
    }
}
