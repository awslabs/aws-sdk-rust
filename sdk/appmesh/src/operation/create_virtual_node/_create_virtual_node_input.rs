// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVirtualNodeInput {
    /// <p>The name to use for the virtual node.</p>
    #[doc(hidden)]
    pub virtual_node_name: std::option::Option<std::string::String>,
    /// <p>The name of the service mesh to create the virtual node in.</p>
    #[doc(hidden)]
    pub mesh_name: std::option::Option<std::string::String>,
    /// <p>The virtual node specification to apply.</p>
    #[doc(hidden)]
    pub spec: std::option::Option<crate::types::VirtualNodeSpec>,
    /// <p>Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::TagRef>>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    #[doc(hidden)]
    pub mesh_owner: std::option::Option<std::string::String>,
}
impl CreateVirtualNodeInput {
    /// <p>The name to use for the virtual node.</p>
    pub fn virtual_node_name(&self) -> std::option::Option<&str> {
        self.virtual_node_name.as_deref()
    }
    /// <p>The name of the service mesh to create the virtual node in.</p>
    pub fn mesh_name(&self) -> std::option::Option<&str> {
        self.mesh_name.as_deref()
    }
    /// <p>The virtual node specification to apply.</p>
    pub fn spec(&self) -> std::option::Option<&crate::types::VirtualNodeSpec> {
        self.spec.as_ref()
    }
    /// <p>Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::TagRef]> {
        self.tags.as_deref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(&self) -> std::option::Option<&str> {
        self.mesh_owner.as_deref()
    }
}
impl CreateVirtualNodeInput {
    /// Creates a new builder-style object to manufacture [`CreateVirtualNodeInput`](crate::operation::create_virtual_node::CreateVirtualNodeInput).
    pub fn builder(
    ) -> crate::operation::create_virtual_node::builders::CreateVirtualNodeInputBuilder {
        crate::operation::create_virtual_node::builders::CreateVirtualNodeInputBuilder::default()
    }
}

/// A builder for [`CreateVirtualNodeInput`](crate::operation::create_virtual_node::CreateVirtualNodeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateVirtualNodeInputBuilder {
    pub(crate) virtual_node_name: std::option::Option<std::string::String>,
    pub(crate) mesh_name: std::option::Option<std::string::String>,
    pub(crate) spec: std::option::Option<crate::types::VirtualNodeSpec>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::TagRef>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) mesh_owner: std::option::Option<std::string::String>,
}
impl CreateVirtualNodeInputBuilder {
    /// <p>The name to use for the virtual node.</p>
    pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_node_name = Some(input.into());
        self
    }
    /// <p>The name to use for the virtual node.</p>
    pub fn set_virtual_node_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_node_name = input;
        self
    }
    /// <p>The name of the service mesh to create the virtual node in.</p>
    pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.mesh_name = Some(input.into());
        self
    }
    /// <p>The name of the service mesh to create the virtual node in.</p>
    pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// <p>The virtual node specification to apply.</p>
    pub fn spec(mut self, input: crate::types::VirtualNodeSpec) -> Self {
        self.spec = Some(input);
        self
    }
    /// <p>The virtual node specification to apply.</p>
    pub fn set_spec(mut self, input: std::option::Option<crate::types::VirtualNodeSpec>) -> Self {
        self.spec = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn tags(mut self, input: crate::types::TagRef) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagRef>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.mesh_owner = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mesh_owner = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateVirtualNodeInput`](crate::operation::create_virtual_node::CreateVirtualNodeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_virtual_node::CreateVirtualNodeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_virtual_node::CreateVirtualNodeInput {
                virtual_node_name: self.virtual_node_name,
                mesh_name: self.mesh_name,
                spec: self.spec,
                tags: self.tags,
                client_token: self.client_token,
                mesh_owner: self.mesh_owner,
            },
        )
    }
}
