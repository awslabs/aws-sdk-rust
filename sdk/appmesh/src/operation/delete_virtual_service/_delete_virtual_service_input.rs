// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteVirtualServiceInput {
    /// <p>The name of the virtual service to delete.</p>
    pub virtual_service_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub mesh_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub mesh_owner: ::std::option::Option<::std::string::String>,
}
impl DeleteVirtualServiceInput {
    /// <p>The name of the virtual service to delete.</p>
    pub fn virtual_service_name(&self) -> ::std::option::Option<&str> {
        self.virtual_service_name.as_deref()
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn mesh_name(&self) -> ::std::option::Option<&str> {
        self.mesh_name.as_deref()
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(&self) -> ::std::option::Option<&str> {
        self.mesh_owner.as_deref()
    }
}
impl DeleteVirtualServiceInput {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualServiceInput`](crate::operation::delete_virtual_service::DeleteVirtualServiceInput).
    pub fn builder() -> crate::operation::delete_virtual_service::builders::DeleteVirtualServiceInputBuilder {
        crate::operation::delete_virtual_service::builders::DeleteVirtualServiceInputBuilder::default()
    }
}

/// A builder for [`DeleteVirtualServiceInput`](crate::operation::delete_virtual_service::DeleteVirtualServiceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteVirtualServiceInputBuilder {
    pub(crate) virtual_service_name: ::std::option::Option<::std::string::String>,
    pub(crate) mesh_name: ::std::option::Option<::std::string::String>,
    pub(crate) mesh_owner: ::std::option::Option<::std::string::String>,
}
impl DeleteVirtualServiceInputBuilder {
    /// <p>The name of the virtual service to delete.</p>
    /// This field is required.
    pub fn virtual_service_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_service_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the virtual service to delete.</p>
    pub fn set_virtual_service_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_service_name = input;
        self
    }
    /// <p>The name of the virtual service to delete.</p>
    pub fn get_virtual_service_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_service_name
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    /// This field is required.
    pub fn mesh_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mesh_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn set_mesh_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// <p>The name of the service mesh to delete the virtual service in.</p>
    pub fn get_mesh_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.mesh_name
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn mesh_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.mesh_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn set_mesh_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.mesh_owner = input;
        self
    }
    /// <p>The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then it's the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
    pub fn get_mesh_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.mesh_owner
    }
    /// Consumes the builder and constructs a [`DeleteVirtualServiceInput`](crate::operation::delete_virtual_service::DeleteVirtualServiceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_virtual_service::DeleteVirtualServiceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_virtual_service::DeleteVirtualServiceInput {
            virtual_service_name: self.virtual_service_name,
            mesh_name: self.mesh_name,
            mesh_owner: self.mesh_owner,
        })
    }
}
