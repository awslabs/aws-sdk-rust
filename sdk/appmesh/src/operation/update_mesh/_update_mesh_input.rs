// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMeshInput {
    /// <p>The name of the service mesh to update.</p>
    #[doc(hidden)]
    pub mesh_name: std::option::Option<std::string::String>,
    /// <p>The service mesh specification to apply.</p>
    #[doc(hidden)]
    pub spec: std::option::Option<crate::types::MeshSpec>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl UpdateMeshInput {
    /// <p>The name of the service mesh to update.</p>
    pub fn mesh_name(&self) -> std::option::Option<&str> {
        self.mesh_name.as_deref()
    }
    /// <p>The service mesh specification to apply.</p>
    pub fn spec(&self) -> std::option::Option<&crate::types::MeshSpec> {
        self.spec.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateMeshInput {
    /// Creates a new builder-style object to manufacture [`UpdateMeshInput`](crate::operation::update_mesh::UpdateMeshInput).
    pub fn builder() -> crate::operation::update_mesh::builders::UpdateMeshInputBuilder {
        crate::operation::update_mesh::builders::UpdateMeshInputBuilder::default()
    }
}

/// A builder for [`UpdateMeshInput`](crate::operation::update_mesh::UpdateMeshInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateMeshInputBuilder {
    pub(crate) mesh_name: std::option::Option<std::string::String>,
    pub(crate) spec: std::option::Option<crate::types::MeshSpec>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl UpdateMeshInputBuilder {
    /// <p>The name of the service mesh to update.</p>
    pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.mesh_name = Some(input.into());
        self
    }
    /// <p>The name of the service mesh to update.</p>
    pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mesh_name = input;
        self
    }
    /// <p>The service mesh specification to apply.</p>
    pub fn spec(mut self, input: crate::types::MeshSpec) -> Self {
        self.spec = Some(input);
        self
    }
    /// <p>The service mesh specification to apply.</p>
    pub fn set_spec(mut self, input: std::option::Option<crate::types::MeshSpec>) -> Self {
        self.spec = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateMeshInput`](crate::operation::update_mesh::UpdateMeshInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_mesh::UpdateMeshInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_mesh::UpdateMeshInput {
            mesh_name: self.mesh_name,
            spec: self.spec,
            client_token: self.client_token,
        })
    }
}
