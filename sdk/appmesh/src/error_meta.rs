// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request syntax was malformed. Check your request syntax and try again.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The request contains a client token that was used for a previous update resource call with different specifications. Try the request again with a new client token.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>You don't have permissions to perform this action.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>The request processing has failed because of an unknown error, exception, or failure.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>You have exceeded a service limit for your account. For more information, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/service-quotas.html">Service Limits</a> in the <i>App Mesh User Guide</i>.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The specified resource doesn't exist. Check your request syntax and try again.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>You can't delete the specified resource because it's in use or required by another resource.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The request has failed due to a temporary failure of the service.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The maximum request rate permitted by the App Mesh APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The request exceeds the maximum allowed number of tags allowed per resource. The current limit is 50 user tags per resource. You must reduce the number of tags in the request. None of the tags in this request were applied.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGatewayRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGatewayRouteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGatewayRouteError> for Error {
    fn from(err: crate::error::CreateGatewayRouteError) -> Self {
        match err {
            crate::error::CreateGatewayRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateGatewayRouteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateGatewayRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateGatewayRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateGatewayRouteError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGatewayRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateGatewayRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateGatewayRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateGatewayRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMeshError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMeshError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMeshError> for Error {
    fn from(err: crate::error::CreateMeshError) -> Self {
        match err {
            crate::error::CreateMeshError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateMeshError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateMeshError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateMeshError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateMeshError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateMeshError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateMeshError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateMeshError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateMeshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRouteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRouteError> for Error {
    fn from(err: crate::error::CreateRouteError) -> Self {
        match err {
            crate::error::CreateRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRouteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateRouteError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVirtualGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVirtualGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVirtualGatewayError> for Error {
    fn from(err: crate::error::CreateVirtualGatewayError) -> Self {
        match err {
            crate::error::CreateVirtualGatewayError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVirtualGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVirtualGatewayError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVirtualGatewayError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateVirtualGatewayError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVirtualGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVirtualGatewayError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVirtualGatewayError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVirtualGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVirtualNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVirtualNodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVirtualNodeError> for Error {
    fn from(err: crate::error::CreateVirtualNodeError) -> Self {
        match err {
            crate::error::CreateVirtualNodeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVirtualNodeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVirtualNodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVirtualNodeError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateVirtualNodeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVirtualNodeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVirtualNodeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVirtualNodeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVirtualNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVirtualRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVirtualRouterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVirtualRouterError> for Error {
    fn from(err: crate::error::CreateVirtualRouterError) -> Self {
        match err {
            crate::error::CreateVirtualRouterError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVirtualRouterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVirtualRouterError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVirtualRouterError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateVirtualRouterError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVirtualRouterError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVirtualRouterError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVirtualRouterError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVirtualRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVirtualServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVirtualServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVirtualServiceError> for Error {
    fn from(err: crate::error::CreateVirtualServiceError) -> Self {
        match err {
            crate::error::CreateVirtualServiceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVirtualServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVirtualServiceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateVirtualServiceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateVirtualServiceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVirtualServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateVirtualServiceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateVirtualServiceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVirtualServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGatewayRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGatewayRouteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGatewayRouteError> for Error {
    fn from(err: crate::error::DeleteGatewayRouteError) -> Self {
        match err {
            crate::error::DeleteGatewayRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteGatewayRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteGatewayRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteGatewayRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGatewayRouteError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteGatewayRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteGatewayRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteGatewayRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMeshError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMeshError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMeshError> for Error {
    fn from(err: crate::error::DeleteMeshError) -> Self {
        match err {
            crate::error::DeleteMeshError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteMeshError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteMeshError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteMeshError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMeshError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteMeshError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteMeshError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteMeshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRouteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRouteError> for Error {
    fn from(err: crate::error::DeleteRouteError) -> Self {
        match err {
            crate::error::DeleteRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRouteError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualGatewayError> for Error {
    fn from(err: crate::error::DeleteVirtualGatewayError) -> Self {
        match err {
            crate::error::DeleteVirtualGatewayError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVirtualGatewayError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVirtualGatewayError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVirtualGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVirtualGatewayError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteVirtualGatewayError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVirtualGatewayError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVirtualGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualNodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualNodeError> for Error {
    fn from(err: crate::error::DeleteVirtualNodeError) -> Self {
        match err {
            crate::error::DeleteVirtualNodeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVirtualNodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVirtualNodeError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVirtualNodeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVirtualNodeError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteVirtualNodeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVirtualNodeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVirtualNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualRouterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualRouterError> for Error {
    fn from(err: crate::error::DeleteVirtualRouterError) -> Self {
        match err {
            crate::error::DeleteVirtualRouterError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVirtualRouterError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVirtualRouterError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVirtualRouterError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVirtualRouterError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteVirtualRouterError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVirtualRouterError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVirtualRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualServiceError> for Error {
    fn from(err: crate::error::DeleteVirtualServiceError) -> Self {
        match err {
            crate::error::DeleteVirtualServiceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVirtualServiceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteVirtualServiceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteVirtualServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVirtualServiceError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteVirtualServiceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteVirtualServiceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVirtualServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGatewayRouteError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGatewayRouteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGatewayRouteError> for Error {
    fn from(err: crate::error::DescribeGatewayRouteError) -> Self {
        match err {
            crate::error::DescribeGatewayRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeGatewayRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeGatewayRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeGatewayRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeGatewayRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeGatewayRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeGatewayRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMeshError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeMeshError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMeshError> for Error {
    fn from(err: crate::error::DescribeMeshError) -> Self {
        match err {
            crate::error::DescribeMeshError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeMeshError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeMeshError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeMeshError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeMeshError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeMeshError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeMeshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeRouteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRouteError> for Error {
    fn from(err: crate::error::DescribeRouteError) -> Self {
        match err {
            crate::error::DescribeRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualGatewayError> for Error {
    fn from(err: crate::error::DescribeVirtualGatewayError) -> Self {
        match err {
            crate::error::DescribeVirtualGatewayError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeVirtualGatewayError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeVirtualGatewayError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeVirtualGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeVirtualGatewayError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeVirtualGatewayError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeVirtualGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualNodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualNodeError> for Error {
    fn from(err: crate::error::DescribeVirtualNodeError) -> Self {
        match err {
            crate::error::DescribeVirtualNodeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeVirtualNodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeVirtualNodeError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeVirtualNodeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeVirtualNodeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeVirtualNodeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeVirtualNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualRouterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualRouterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualRouterError> for Error {
    fn from(err: crate::error::DescribeVirtualRouterError) -> Self {
        match err {
            crate::error::DescribeVirtualRouterError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeVirtualRouterError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeVirtualRouterError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeVirtualRouterError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeVirtualRouterError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeVirtualRouterError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeVirtualRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualServiceError> for Error {
    fn from(err: crate::error::DescribeVirtualServiceError) -> Self {
        match err {
            crate::error::DescribeVirtualServiceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeVirtualServiceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeVirtualServiceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeVirtualServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeVirtualServiceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeVirtualServiceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeVirtualServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGatewayRoutesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGatewayRoutesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGatewayRoutesError> for Error {
    fn from(err: crate::error::ListGatewayRoutesError) -> Self {
        match err {
            crate::error::ListGatewayRoutesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListGatewayRoutesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListGatewayRoutesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListGatewayRoutesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListGatewayRoutesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListGatewayRoutesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListGatewayRoutesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMeshesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMeshesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMeshesError> for Error {
    fn from(err: crate::error::ListMeshesError) -> Self {
        match err {
            crate::error::ListMeshesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListMeshesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListMeshesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListMeshesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListMeshesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListMeshesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListMeshesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRoutesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRoutesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRoutesError> for Error {
    fn from(err: crate::error::ListRoutesError) -> Self {
        match err {
            crate::error::ListRoutesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListRoutesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListRoutesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListRoutesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListRoutesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListRoutesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListRoutesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListTagsForResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualGatewaysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualGatewaysError> for Error {
    fn from(err: crate::error::ListVirtualGatewaysError) -> Self {
        match err {
            crate::error::ListVirtualGatewaysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVirtualGatewaysError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVirtualGatewaysError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListVirtualGatewaysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListVirtualGatewaysError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVirtualGatewaysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListVirtualGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualNodesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualNodesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualNodesError> for Error {
    fn from(err: crate::error::ListVirtualNodesError) -> Self {
        match err {
            crate::error::ListVirtualNodesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVirtualNodesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVirtualNodesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListVirtualNodesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListVirtualNodesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVirtualNodesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListVirtualNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualRoutersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualRoutersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualRoutersError> for Error {
    fn from(err: crate::error::ListVirtualRoutersError) -> Self {
        match err {
            crate::error::ListVirtualRoutersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVirtualRoutersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVirtualRoutersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListVirtualRoutersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListVirtualRoutersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVirtualRoutersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListVirtualRoutersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVirtualServicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVirtualServicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualServicesError> for Error {
    fn from(err: crate::error::ListVirtualServicesError) -> Self {
        match err {
            crate::error::ListVirtualServicesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListVirtualServicesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListVirtualServicesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListVirtualServicesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListVirtualServicesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListVirtualServicesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListVirtualServicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewayRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewayRouteError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewayRouteError> for Error {
    fn from(err: crate::error::UpdateGatewayRouteError) -> Self {
        match err {
            crate::error::UpdateGatewayRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGatewayRouteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateGatewayRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateGatewayRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateGatewayRouteError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateGatewayRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGatewayRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateGatewayRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGatewayRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMeshError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMeshError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMeshError> for Error {
    fn from(err: crate::error::UpdateMeshError) -> Self {
        match err {
            crate::error::UpdateMeshError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateMeshError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMeshError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateMeshError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateMeshError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateMeshError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateMeshError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateMeshError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRouteError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRouteError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRouteError> for Error {
    fn from(err: crate::error::UpdateRouteError) -> Self {
        match err {
            crate::error::UpdateRouteError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRouteError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateRouteError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateRouteError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateRouteError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateRouteError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRouteError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateRouteError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateRouteError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVirtualGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVirtualGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVirtualGatewayError> for Error {
    fn from(err: crate::error::UpdateVirtualGatewayError) -> Self {
        match err {
            crate::error::UpdateVirtualGatewayError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVirtualGatewayError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVirtualGatewayError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVirtualGatewayError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVirtualGatewayError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateVirtualGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVirtualGatewayError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVirtualGatewayError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVirtualGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVirtualNodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVirtualNodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVirtualNodeError> for Error {
    fn from(err: crate::error::UpdateVirtualNodeError) -> Self {
        match err {
            crate::error::UpdateVirtualNodeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVirtualNodeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVirtualNodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVirtualNodeError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVirtualNodeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateVirtualNodeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVirtualNodeError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVirtualNodeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVirtualNodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVirtualRouterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVirtualRouterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVirtualRouterError> for Error {
    fn from(err: crate::error::UpdateVirtualRouterError) -> Self {
        match err {
            crate::error::UpdateVirtualRouterError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVirtualRouterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVirtualRouterError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVirtualRouterError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVirtualRouterError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateVirtualRouterError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVirtualRouterError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVirtualRouterError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVirtualRouterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVirtualServiceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVirtualServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVirtualServiceError> for Error {
    fn from(err: crate::error::UpdateVirtualServiceError) -> Self {
        match err {
            crate::error::UpdateVirtualServiceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVirtualServiceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVirtualServiceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateVirtualServiceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateVirtualServiceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateVirtualServiceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVirtualServiceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateVirtualServiceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVirtualServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
