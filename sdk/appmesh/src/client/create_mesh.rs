// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateMesh`](crate::client::fluent_builders::CreateMesh) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`mesh_name(impl Into<String>)`](crate::client::fluent_builders::CreateMesh::mesh_name) / [`set_mesh_name(Option<String>)`](crate::client::fluent_builders::CreateMesh::set_mesh_name): <p>The name to use for the service mesh.</p>
    ///   - [`spec(MeshSpec)`](crate::client::fluent_builders::CreateMesh::spec) / [`set_spec(Option<MeshSpec>)`](crate::client::fluent_builders::CreateMesh::set_spec): <p>The service mesh specification to apply.</p>
    ///   - [`tags(Vec<TagRef>)`](crate::client::fluent_builders::CreateMesh::tags) / [`set_tags(Option<Vec<TagRef>>)`](crate::client::fluent_builders::CreateMesh::set_tags): <p>Optional metadata that you can apply to the service mesh to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateMesh::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateMesh::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
    /// - On success, responds with [`CreateMeshOutput`](crate::output::CreateMeshOutput) with field(s):
    ///   - [`mesh(Option<MeshData>)`](crate::output::CreateMeshOutput::mesh): <p>The full description of your service mesh following the create call.</p>
    /// - On failure, responds with [`SdkError<CreateMeshError>`](crate::error::CreateMeshError)
    pub fn create_mesh(&self) -> crate::client::fluent_builders::CreateMesh {
        crate::client::fluent_builders::CreateMesh::new(self.handle.clone())
    }
}
