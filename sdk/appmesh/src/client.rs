// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn create_gateway_route(&self) -> fluent_builders::CreateGatewayRoute<C> {
        fluent_builders::CreateGatewayRoute::new(self.handle.clone())
    }
    pub fn create_mesh(&self) -> fluent_builders::CreateMesh<C> {
        fluent_builders::CreateMesh::new(self.handle.clone())
    }
    pub fn create_route(&self) -> fluent_builders::CreateRoute<C> {
        fluent_builders::CreateRoute::new(self.handle.clone())
    }
    pub fn create_virtual_gateway(&self) -> fluent_builders::CreateVirtualGateway<C> {
        fluent_builders::CreateVirtualGateway::new(self.handle.clone())
    }
    pub fn create_virtual_node(&self) -> fluent_builders::CreateVirtualNode<C> {
        fluent_builders::CreateVirtualNode::new(self.handle.clone())
    }
    pub fn create_virtual_router(&self) -> fluent_builders::CreateVirtualRouter<C> {
        fluent_builders::CreateVirtualRouter::new(self.handle.clone())
    }
    pub fn create_virtual_service(&self) -> fluent_builders::CreateVirtualService<C> {
        fluent_builders::CreateVirtualService::new(self.handle.clone())
    }
    pub fn delete_gateway_route(&self) -> fluent_builders::DeleteGatewayRoute<C> {
        fluent_builders::DeleteGatewayRoute::new(self.handle.clone())
    }
    pub fn delete_mesh(&self) -> fluent_builders::DeleteMesh<C> {
        fluent_builders::DeleteMesh::new(self.handle.clone())
    }
    pub fn delete_route(&self) -> fluent_builders::DeleteRoute<C> {
        fluent_builders::DeleteRoute::new(self.handle.clone())
    }
    pub fn delete_virtual_gateway(&self) -> fluent_builders::DeleteVirtualGateway<C> {
        fluent_builders::DeleteVirtualGateway::new(self.handle.clone())
    }
    pub fn delete_virtual_node(&self) -> fluent_builders::DeleteVirtualNode<C> {
        fluent_builders::DeleteVirtualNode::new(self.handle.clone())
    }
    pub fn delete_virtual_router(&self) -> fluent_builders::DeleteVirtualRouter<C> {
        fluent_builders::DeleteVirtualRouter::new(self.handle.clone())
    }
    pub fn delete_virtual_service(&self) -> fluent_builders::DeleteVirtualService<C> {
        fluent_builders::DeleteVirtualService::new(self.handle.clone())
    }
    pub fn describe_gateway_route(&self) -> fluent_builders::DescribeGatewayRoute<C> {
        fluent_builders::DescribeGatewayRoute::new(self.handle.clone())
    }
    pub fn describe_mesh(&self) -> fluent_builders::DescribeMesh<C> {
        fluent_builders::DescribeMesh::new(self.handle.clone())
    }
    pub fn describe_route(&self) -> fluent_builders::DescribeRoute<C> {
        fluent_builders::DescribeRoute::new(self.handle.clone())
    }
    pub fn describe_virtual_gateway(&self) -> fluent_builders::DescribeVirtualGateway<C> {
        fluent_builders::DescribeVirtualGateway::new(self.handle.clone())
    }
    pub fn describe_virtual_node(&self) -> fluent_builders::DescribeVirtualNode<C> {
        fluent_builders::DescribeVirtualNode::new(self.handle.clone())
    }
    pub fn describe_virtual_router(&self) -> fluent_builders::DescribeVirtualRouter<C> {
        fluent_builders::DescribeVirtualRouter::new(self.handle.clone())
    }
    pub fn describe_virtual_service(&self) -> fluent_builders::DescribeVirtualService<C> {
        fluent_builders::DescribeVirtualService::new(self.handle.clone())
    }
    pub fn list_gateway_routes(&self) -> fluent_builders::ListGatewayRoutes<C> {
        fluent_builders::ListGatewayRoutes::new(self.handle.clone())
    }
    pub fn list_meshes(&self) -> fluent_builders::ListMeshes<C> {
        fluent_builders::ListMeshes::new(self.handle.clone())
    }
    pub fn list_routes(&self) -> fluent_builders::ListRoutes<C> {
        fluent_builders::ListRoutes::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn list_virtual_gateways(&self) -> fluent_builders::ListVirtualGateways<C> {
        fluent_builders::ListVirtualGateways::new(self.handle.clone())
    }
    pub fn list_virtual_nodes(&self) -> fluent_builders::ListVirtualNodes<C> {
        fluent_builders::ListVirtualNodes::new(self.handle.clone())
    }
    pub fn list_virtual_routers(&self) -> fluent_builders::ListVirtualRouters<C> {
        fluent_builders::ListVirtualRouters::new(self.handle.clone())
    }
    pub fn list_virtual_services(&self) -> fluent_builders::ListVirtualServices<C> {
        fluent_builders::ListVirtualServices::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_gateway_route(&self) -> fluent_builders::UpdateGatewayRoute<C> {
        fluent_builders::UpdateGatewayRoute::new(self.handle.clone())
    }
    pub fn update_mesh(&self) -> fluent_builders::UpdateMesh<C> {
        fluent_builders::UpdateMesh::new(self.handle.clone())
    }
    pub fn update_route(&self) -> fluent_builders::UpdateRoute<C> {
        fluent_builders::UpdateRoute::new(self.handle.clone())
    }
    pub fn update_virtual_gateway(&self) -> fluent_builders::UpdateVirtualGateway<C> {
        fluent_builders::UpdateVirtualGateway::new(self.handle.clone())
    }
    pub fn update_virtual_node(&self) -> fluent_builders::UpdateVirtualNode<C> {
        fluent_builders::UpdateVirtualNode::new(self.handle.clone())
    }
    pub fn update_virtual_router(&self) -> fluent_builders::UpdateVirtualRouter<C> {
        fluent_builders::UpdateVirtualRouter::new(self.handle.clone())
    }
    pub fn update_virtual_service(&self) -> fluent_builders::UpdateVirtualService<C> {
        fluent_builders::UpdateVirtualService::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateGatewayRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_gateway_route_input::Builder,
    }
    impl<C> CreateGatewayRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateGatewayRouteOutput,
            smithy_http::result::SdkError<crate::error::CreateGatewayRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the gateway route.</p>
        pub fn gateway_route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_route_name(input);
            self
        }
        pub fn set_gateway_route_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_gateway_route_name(input);
            self
        }
        /// <p>The name of the service mesh to create the gateway route in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual gateway to associate the gateway route with. If the virtual
        /// gateway is in a shared mesh, then you must be the owner of the virtual gateway
        /// resource.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The gateway route specification to apply.</p>
        pub fn spec(mut self, input: crate::model::GatewayRouteSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::GatewayRouteSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the gateway route to assist with categorization
        /// and organization. Each tag consists of a key and an optional value, both of which you
        /// define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateMesh<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_mesh_input::Builder,
    }
    impl<C> CreateMesh<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateMeshOutput,
            smithy_http::result::SdkError<crate::error::CreateMeshError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the service mesh.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The service mesh specification to apply.</p>
        pub fn spec(mut self, input: crate::model::MeshSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<crate::model::MeshSpec>) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the service mesh to assist with categorization
        /// and organization. Each tag consists of a key and an optional value, both of which you
        /// define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_route_input::Builder,
    }
    impl<C> CreateRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateRouteOutput,
            smithy_http::result::SdkError<crate::error::CreateRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the route.</p>
        pub fn route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.route_name(input);
            self
        }
        pub fn set_route_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_route_name(input);
            self
        }
        /// <p>The name of the service mesh to create the route in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual router in which to create the route. If the virtual router is in
        /// a shared mesh, then you must be the owner of the virtual router resource.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The route specification to apply.</p>
        pub fn spec(mut self, input: crate::model::RouteSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<crate::model::RouteSpec>) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the route to assist with categorization and
        /// organization. Each tag consists of a key and an optional value, both of which you define.
        /// Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVirtualGateway<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_virtual_gateway_input::Builder,
    }
    impl<C> CreateVirtualGateway<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVirtualGatewayOutput,
            smithy_http::result::SdkError<crate::error::CreateVirtualGatewayError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the virtual gateway.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The name of the service mesh to create the virtual gateway in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The virtual gateway specification to apply.</p>
        pub fn spec(mut self, input: crate::model::VirtualGatewaySpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualGatewaySpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the virtual gateway to assist with
        /// categorization and organization. Each tag consists of a key and an optional value, both of
        /// which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVirtualNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_virtual_node_input::Builder,
    }
    impl<C> CreateVirtualNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVirtualNodeOutput,
            smithy_http::result::SdkError<crate::error::CreateVirtualNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the virtual node.</p>
        pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_node_name(input);
            self
        }
        pub fn set_virtual_node_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_node_name(input);
            self
        }
        /// <p>The name of the service mesh to create the virtual node in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The virtual node specification to apply.</p>
        pub fn spec(mut self, input: crate::model::VirtualNodeSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualNodeSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the virtual node to assist with categorization
        /// and organization. Each tag consists of a key and an optional value, both of which you
        /// define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVirtualRouter<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_virtual_router_input::Builder,
    }
    impl<C> CreateVirtualRouter<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVirtualRouterOutput,
            smithy_http::result::SdkError<crate::error::CreateVirtualRouterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the virtual router.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The name of the service mesh to create the virtual router in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The virtual router specification to apply.</p>
        pub fn spec(mut self, input: crate::model::VirtualRouterSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualRouterSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the virtual router to assist with categorization
        /// and organization. Each tag consists of a key and an optional value, both of which you
        /// define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateVirtualService<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_virtual_service_input::Builder,
    }
    impl<C> CreateVirtualService<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVirtualServiceOutput,
            smithy_http::result::SdkError<crate::error::CreateVirtualServiceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name to use for the virtual service.</p>
        pub fn virtual_service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_service_name(input);
            self
        }
        pub fn set_virtual_service_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_service_name(input);
            self
        }
        /// <p>The name of the service mesh to create the virtual service in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The virtual service specification to apply.</p>
        pub fn spec(mut self, input: crate::model::VirtualServiceSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualServiceSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Optional metadata that you can apply to the virtual service to assist with
        /// categorization and organization. Each tag consists of a key and an optional value, both of
        /// which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then
        /// the account that you specify must share the mesh with your account before you can create
        /// the resource in the service mesh. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteGatewayRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_gateway_route_input::Builder,
    }
    impl<C> DeleteGatewayRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteGatewayRouteOutput,
            smithy_http::result::SdkError<crate::error::DeleteGatewayRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the gateway route to delete.</p>
        pub fn gateway_route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_route_name(input);
            self
        }
        pub fn set_gateway_route_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_gateway_route_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the gateway route from.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual gateway to delete the route from.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteMesh<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_mesh_input::Builder,
    }
    impl<C> DeleteMesh<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteMeshOutput,
            smithy_http::result::SdkError<crate::error::DeleteMeshError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to delete.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_route_input::Builder,
    }
    impl<C> DeleteRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteRouteOutput,
            smithy_http::result::SdkError<crate::error::DeleteRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the route to delete.</p>
        pub fn route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.route_name(input);
            self
        }
        pub fn set_route_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_route_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the route in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual router to delete the route in.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVirtualGateway<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_virtual_gateway_input::Builder,
    }
    impl<C> DeleteVirtualGateway<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVirtualGatewayOutput,
            smithy_http::result::SdkError<crate::error::DeleteVirtualGatewayError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual gateway to delete.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the virtual gateway from.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVirtualNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_virtual_node_input::Builder,
    }
    impl<C> DeleteVirtualNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVirtualNodeOutput,
            smithy_http::result::SdkError<crate::error::DeleteVirtualNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual node to delete.</p>
        pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_node_name(input);
            self
        }
        pub fn set_virtual_node_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_node_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the virtual node in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVirtualRouter<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_virtual_router_input::Builder,
    }
    impl<C> DeleteVirtualRouter<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVirtualRouterOutput,
            smithy_http::result::SdkError<crate::error::DeleteVirtualRouterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual router to delete.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the virtual router in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVirtualService<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_virtual_service_input::Builder,
    }
    impl<C> DeleteVirtualService<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVirtualServiceOutput,
            smithy_http::result::SdkError<crate::error::DeleteVirtualServiceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual service to delete.</p>
        pub fn virtual_service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_service_name(input);
            self
        }
        pub fn set_virtual_service_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_service_name(input);
            self
        }
        /// <p>The name of the service mesh to delete the virtual service in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeGatewayRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_gateway_route_input::Builder,
    }
    impl<C> DescribeGatewayRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeGatewayRouteOutput,
            smithy_http::result::SdkError<crate::error::DescribeGatewayRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the gateway route to describe.</p>
        pub fn gateway_route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_route_name(input);
            self
        }
        pub fn set_gateway_route_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_gateway_route_name(input);
            self
        }
        /// <p>The name of the service mesh that the gateway route resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeMesh<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_mesh_input::Builder,
    }
    impl<C> DescribeMesh<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeMeshOutput,
            smithy_http::result::SdkError<crate::error::DescribeMeshError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to describe.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_route_input::Builder,
    }
    impl<C> DescribeRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRouteOutput,
            smithy_http::result::SdkError<crate::error::DescribeRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the route to describe.</p>
        pub fn route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.route_name(input);
            self
        }
        pub fn set_route_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_route_name(input);
            self
        }
        /// <p>The name of the service mesh that the route resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
        /// <p>The name of the virtual router that the route is associated with.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualGateway<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_virtual_gateway_input::Builder,
    }
    impl<C> DescribeVirtualGateway<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualGatewayOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualGatewayError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual gateway to describe.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The name of the service mesh that the gateway route resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_virtual_node_input::Builder,
    }
    impl<C> DescribeVirtualNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualNodeOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual node to describe.</p>
        pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_node_name(input);
            self
        }
        pub fn set_virtual_node_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_node_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual node resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualRouter<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_virtual_router_input::Builder,
    }
    impl<C> DescribeVirtualRouter<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualRouterOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualRouterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual router to describe.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual router resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualService<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_virtual_service_input::Builder,
    }
    impl<C> DescribeVirtualService<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualServiceOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualServiceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual service to describe.</p>
        pub fn virtual_service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_service_name(input);
            self
        }
        pub fn set_virtual_service_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_service_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual service resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListGatewayRoutes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_gateway_routes_input::Builder,
    }
    impl<C> ListGatewayRoutes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListGatewayRoutesOutput,
            smithy_http::result::SdkError<crate::error::ListGatewayRoutesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list gateway routes in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual gateway to list gateway routes in.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListGatewayRoutes</code> request where <code>limit</code> was used and the results
        /// exceeded the value of that parameter. Pagination continues from the end of the previous
        /// results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListGatewayRoutes</code> in paginated
        /// output. When you use this parameter, <code>ListGatewayRoutes</code> returns only
        /// <code>limit</code> results in a single page along with a <code>nextToken</code> response
        /// element. You can see the remaining results of the initial request by sending another
        /// <code>ListGatewayRoutes</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListGatewayRoutes</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListMeshes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_meshes_input::Builder,
    }
    impl<C> ListMeshes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMeshesOutput,
            smithy_http::result::SdkError<crate::error::ListMeshesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListMeshes</code> request where <code>limit</code> was used and the results
        /// exceeded the value of that parameter. Pagination continues from the end of the previous
        /// results that returned the <code>nextToken</code> value.</p>
        /// <note>
        /// <p>This token should be treated as an opaque identifier that is used only to
        /// retrieve the next items in a list and not for other programmatic purposes.</p>
        /// </note>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListMeshes</code> in paginated output.
        /// When you use this parameter, <code>ListMeshes</code> returns only <code>limit</code>
        /// results in a single page along with a <code>nextToken</code> response element. You can see
        /// the remaining results of the initial request by sending another <code>ListMeshes</code>
        /// request with the returned <code>nextToken</code> value. This value can be between
        /// 1 and 100. If you don't use this parameter,
        /// <code>ListMeshes</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListRoutes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_routes_input::Builder,
    }
    impl<C> ListRoutes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListRoutesOutput,
            smithy_http::result::SdkError<crate::error::ListRoutesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list routes in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual router to list routes in.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListRoutes</code> request where <code>limit</code> was used and the results
        /// exceeded the value of that parameter. Pagination continues from the end of the previous
        /// results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListRoutes</code> in paginated output.
        /// When you use this parameter, <code>ListRoutes</code> returns only <code>limit</code>
        /// results in a single page along with a <code>nextToken</code> response element. You can see
        /// the remaining results of the initial request by sending another <code>ListRoutes</code>
        /// request with the returned <code>nextToken</code> value. This value can be between
        /// 1 and 100. If you don't use this parameter,
        /// <code>ListRoutes</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C> ListTagsForResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListTagsForResource</code> request where <code>limit</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of tag results returned by <code>ListTagsForResource</code> in
        /// paginated output. When this parameter is used, <code>ListTagsForResource</code> returns
        /// only <code>limit</code> results in a single page along with a <code>nextToken</code>
        /// response element. You can see the remaining results of the initial request by sending
        /// another <code>ListTagsForResource</code> request with the returned <code>nextToken</code>
        /// value. This value can be between 1 and 100. If you don't use
        /// this parameter, <code>ListTagsForResource</code> returns up to 100
        /// results and a <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListVirtualGateways<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_virtual_gateways_input::Builder,
    }
    impl<C> ListVirtualGateways<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVirtualGatewaysOutput,
            smithy_http::result::SdkError<crate::error::ListVirtualGatewaysError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list virtual gateways in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListVirtualGateways</code> request where <code>limit</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListVirtualGateways</code> in paginated
        /// output. When you use this parameter, <code>ListVirtualGateways</code> returns only
        /// <code>limit</code> results in a single page along with a <code>nextToken</code> response
        /// element. You can see the remaining results of the initial request by sending another
        /// <code>ListVirtualGateways</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListVirtualGateways</code> returns up to 100 results and
        /// a <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListVirtualNodes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_virtual_nodes_input::Builder,
    }
    impl<C> ListVirtualNodes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVirtualNodesOutput,
            smithy_http::result::SdkError<crate::error::ListVirtualNodesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list virtual nodes in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListVirtualNodes</code> request where <code>limit</code> was used and the results
        /// exceeded the value of that parameter. Pagination continues from the end of the previous
        /// results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListVirtualNodes</code> in paginated
        /// output. When you use this parameter, <code>ListVirtualNodes</code> returns only
        /// <code>limit</code> results in a single page along with a <code>nextToken</code> response
        /// element. You can see the remaining results of the initial request by sending another
        /// <code>ListVirtualNodes</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListVirtualNodes</code> returns up to 100 results and a
        /// <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListVirtualRouters<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_virtual_routers_input::Builder,
    }
    impl<C> ListVirtualRouters<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVirtualRoutersOutput,
            smithy_http::result::SdkError<crate::error::ListVirtualRoutersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list virtual routers in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListVirtualRouters</code> request where <code>limit</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListVirtualRouters</code> in paginated
        /// output. When you use this parameter, <code>ListVirtualRouters</code> returns only
        /// <code>limit</code> results in a single page along with a <code>nextToken</code> response
        /// element. You can see the remaining results of the initial request by sending another
        /// <code>ListVirtualRouters</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListVirtualRouters</code> returns up to 100 results and
        /// a <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListVirtualServices<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_virtual_services_input::Builder,
    }
    impl<C> ListVirtualServices<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVirtualServicesOutput,
            smithy_http::result::SdkError<crate::error::ListVirtualServicesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to list virtual services in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The <code>nextToken</code> value returned from a previous paginated
        /// <code>ListVirtualServices</code> request where <code>limit</code> was used and the
        /// results exceeded the value of that parameter. Pagination continues from the end of the
        /// previous results that returned the <code>nextToken</code> value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results returned by <code>ListVirtualServices</code> in paginated
        /// output. When you use this parameter, <code>ListVirtualServices</code> returns only
        /// <code>limit</code> results in a single page along with a <code>nextToken</code> response
        /// element. You can see the remaining results of the initial request by sending another
        /// <code>ListVirtualServices</code> request with the returned <code>nextToken</code> value.
        /// This value can be between 1 and 100. If you don't use this
        /// parameter, <code>ListVirtualServices</code> returns up to 100 results and
        /// a <code>nextToken</code> value if applicable.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C> TagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to add tags to.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The tags to add to the resource. A tag is an array of key-value pairs.
        /// Tag keys can have a maximum character length of 128 characters, and tag values can have
        /// a maximum length of 256 characters.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::TagRef>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TagRef>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C> UntagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource to delete tags from.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The keys of the tags to be removed.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateGatewayRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_gateway_route_input::Builder,
    }
    impl<C> UpdateGatewayRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateGatewayRouteOutput,
            smithy_http::result::SdkError<crate::error::UpdateGatewayRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the gateway route to update.</p>
        pub fn gateway_route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_route_name(input);
            self
        }
        pub fn set_gateway_route_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_gateway_route_name(input);
            self
        }
        /// <p>The name of the service mesh that the gateway route resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual gateway that the gateway route is associated with.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The new gateway route specification to apply. This overwrites the existing data.</p>
        pub fn spec(mut self, input: crate::model::GatewayRouteSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::GatewayRouteSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateMesh<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_mesh_input::Builder,
    }
    impl<C> UpdateMesh<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateMeshOutput,
            smithy_http::result::SdkError<crate::error::UpdateMeshError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the service mesh to update.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The service mesh specification to apply.</p>
        pub fn spec(mut self, input: crate::model::MeshSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<crate::model::MeshSpec>) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateRoute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_route_input::Builder,
    }
    impl<C> UpdateRoute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateRouteOutput,
            smithy_http::result::SdkError<crate::error::UpdateRouteError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the route to update.</p>
        pub fn route_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.route_name(input);
            self
        }
        pub fn set_route_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_route_name(input);
            self
        }
        /// <p>The name of the service mesh that the route resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The name of the virtual router that the route is associated with.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The new route specification to apply. This overwrites the existing data.</p>
        pub fn spec(mut self, input: crate::model::RouteSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(mut self, input: std::option::Option<crate::model::RouteSpec>) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVirtualGateway<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_virtual_gateway_input::Builder,
    }
    impl<C> UpdateVirtualGateway<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVirtualGatewayOutput,
            smithy_http::result::SdkError<crate::error::UpdateVirtualGatewayError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual gateway to update.</p>
        pub fn virtual_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_name(input);
            self
        }
        pub fn set_virtual_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual gateway resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The new virtual gateway specification to apply. This overwrites the existing
        /// data.</p>
        pub fn spec(mut self, input: crate::model::VirtualGatewaySpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualGatewaySpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVirtualNode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_virtual_node_input::Builder,
    }
    impl<C> UpdateVirtualNode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVirtualNodeOutput,
            smithy_http::result::SdkError<crate::error::UpdateVirtualNodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual node to update.</p>
        pub fn virtual_node_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_node_name(input);
            self
        }
        pub fn set_virtual_node_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_node_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual node resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The new virtual node specification to apply. This overwrites the existing data.</p>
        pub fn spec(mut self, input: crate::model::VirtualNodeSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualNodeSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVirtualRouter<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_virtual_router_input::Builder,
    }
    impl<C> UpdateVirtualRouter<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVirtualRouterOutput,
            smithy_http::result::SdkError<crate::error::UpdateVirtualRouterError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual router to update.</p>
        pub fn virtual_router_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_router_name(input);
            self
        }
        pub fn set_virtual_router_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_router_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual router resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The new virtual router specification to apply. This overwrites the existing data.</p>
        pub fn spec(mut self, input: crate::model::VirtualRouterSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualRouterSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVirtualService<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_virtual_service_input::Builder,
    }
    impl<C> UpdateVirtualService<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVirtualServiceOutput,
            smithy_http::result::SdkError<crate::error::UpdateVirtualServiceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the virtual service to update.</p>
        pub fn virtual_service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_service_name(input);
            self
        }
        pub fn set_virtual_service_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_service_name(input);
            self
        }
        /// <p>The name of the service mesh that the virtual service resides in.</p>
        pub fn mesh_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_name(input);
            self
        }
        pub fn set_mesh_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_name(input);
            self
        }
        /// <p>The new virtual service specification to apply. This overwrites the existing
        /// data.</p>
        pub fn spec(mut self, input: crate::model::VirtualServiceSpec) -> Self {
            self.inner = self.inner.spec(input);
            self
        }
        pub fn set_spec(
            mut self,
            input: std::option::Option<crate::model::VirtualServiceSpec>,
        ) -> Self {
            self.inner = self.inner.set_spec(input);
            self
        }
        /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
        /// request. Up to 36 letters, numbers, hyphens, and underscores are allowed.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_token(input);
            self
        }
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_token(input);
            self
        }
        /// <p>The AWS IAM account ID of the service mesh owner. If the account ID is not your own, then it's
        /// the ID of the account that shared the mesh with your account. For more information about mesh sharing, see <a href="https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html">Working with shared meshes</a>.</p>
        pub fn mesh_owner(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.mesh_owner(input);
            self
        }
        pub fn set_mesh_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_mesh_owner(input);
            self
        }
    }
}
