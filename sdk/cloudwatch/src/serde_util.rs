// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn insight_rule_correct_errors(mut builder: crate::types::builders::InsightRuleBuilder) -> crate::types::builders::InsightRuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = Some(Default::default())
    }
    if builder.schema.is_none() {
        builder.schema = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    builder
}

pub(crate) fn insight_rule_contributor_correct_errors(
    mut builder: crate::types::builders::InsightRuleContributorBuilder,
) -> crate::types::builders::InsightRuleContributorBuilder {
    if builder.keys.is_none() {
        builder.keys = Some(Default::default())
    }
    if builder.approximate_aggregate_value.is_none() {
        builder.approximate_aggregate_value = Some(Default::default())
    }
    if builder.datapoints.is_none() {
        builder.datapoints = Some(Default::default())
    }
    builder
}

pub(crate) fn insight_rule_metric_datapoint_correct_errors(
    mut builder: crate::types::builders::InsightRuleMetricDatapointBuilder,
) -> crate::types::builders::InsightRuleMetricDatapointBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn metric_stream_statistics_configuration_correct_errors(
    mut builder: crate::types::builders::MetricStreamStatisticsConfigurationBuilder,
) -> crate::types::builders::MetricStreamStatisticsConfigurationBuilder {
    if builder.include_metrics.is_none() {
        builder.include_metrics = Some(Default::default())
    }
    if builder.additional_statistics.is_none() {
        builder.additional_statistics = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn managed_rule_state_correct_errors(
    mut builder: crate::types::builders::ManagedRuleStateBuilder,
) -> crate::types::builders::ManagedRuleStateBuilder {
    if builder.rule_name.is_none() {
        builder.rule_name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_correct_errors(mut builder: crate::types::builders::DimensionBuilder) -> crate::types::builders::DimensionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn insight_rule_contributor_datapoint_correct_errors(
    mut builder: crate::types::builders::InsightRuleContributorDatapointBuilder,
) -> crate::types::builders::InsightRuleContributorDatapointBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.approximate_value.is_none() {
        builder.approximate_value = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_data_query_correct_errors(
    mut builder: crate::types::builders::MetricDataQueryBuilder,
) -> crate::types::builders::MetricDataQueryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_stream_statistics_metric_correct_errors(
    mut builder: crate::types::builders::MetricStreamStatisticsMetricBuilder,
) -> crate::types::builders::MetricStreamStatisticsMetricBuilder {
    if builder.namespace.is_none() {
        builder.namespace = Some(Default::default())
    }
    if builder.metric_name.is_none() {
        builder.metric_name = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_stat_correct_errors(mut builder: crate::types::builders::MetricStatBuilder) -> crate::types::builders::MetricStatBuilder {
    if builder.metric.is_none() {
        builder.metric = {
            let builder = crate::types::builders::MetricBuilder::default();
            Some(builder.build())
        }
    }
    if builder.period.is_none() {
        builder.period = Some(Default::default())
    }
    if builder.stat.is_none() {
        builder.stat = Some(Default::default())
    }
    builder
}

pub(crate) fn range_correct_errors(mut builder: crate::types::builders::RangeBuilder) -> crate::types::builders::RangeBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}
