// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_managed_insight_rules::_put_managed_insight_rules_output::PutManagedInsightRulesOutputBuilder;

pub use crate::operation::put_managed_insight_rules::_put_managed_insight_rules_input::PutManagedInsightRulesInputBuilder;

/// Fluent builder constructing a request to `PutManagedInsightRules`.
///
/// <p> Creates a managed Contributor Insights rule for a specified Amazon Web Services resource. When you enable a managed rule, you create a Contributor Insights rule that collects data from Amazon Web Services services. You cannot edit these rules with <code>PutInsightRule</code>. The rules can be enabled, disabled, and deleted using <code>EnableInsightRules</code>, <code>DisableInsightRules</code>, and <code>DeleteInsightRules</code>. If a previously created managed rule is currently disabled, a subsequent call to this API will re-enable it. Use <code>ListManagedInsightRules</code> to describe all available rules. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutManagedInsightRulesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::put_managed_insight_rules::builders::PutManagedInsightRulesInputBuilder,
}
impl PutManagedInsightRulesFluentBuilder {
    /// Creates a new `PutManagedInsightRules`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_managed_insight_rules::PutManagedInsightRules,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_managed_insight_rules::PutManagedInsightRulesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_managed_insight_rules::PutManagedInsightRulesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_managed_insight_rules::PutManagedInsightRulesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `ManagedRules`.
    ///
    /// To override the contents of this collection use [`set_managed_rules`](Self::set_managed_rules).
    ///
    /// <p> A list of <code>ManagedRules</code> to enable. </p>
    pub fn managed_rules(mut self, input: crate::types::ManagedRule) -> Self {
        self.inner = self.inner.managed_rules(input);
        self
    }
    /// <p> A list of <code>ManagedRules</code> to enable. </p>
    pub fn set_managed_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ManagedRule>>,
    ) -> Self {
        self.inner = self.inner.set_managed_rules(input);
        self
    }
}
