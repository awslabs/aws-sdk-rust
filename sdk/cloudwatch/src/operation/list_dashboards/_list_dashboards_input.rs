// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDashboardsInput {
    /// <p>If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". </p>
    #[doc(hidden)]
    pub dashboard_name_prefix: std::option::Option<std::string::String>,
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDashboardsInput {
    /// <p>If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". </p>
    pub fn dashboard_name_prefix(&self) -> std::option::Option<&str> {
        self.dashboard_name_prefix.as_deref()
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDashboardsInput {
    /// Creates a new builder-style object to manufacture [`ListDashboardsInput`](crate::operation::list_dashboards::ListDashboardsInput).
    pub fn builder() -> crate::operation::list_dashboards::builders::ListDashboardsInputBuilder {
        crate::operation::list_dashboards::builders::ListDashboardsInputBuilder::default()
    }
}

/// A builder for [`ListDashboardsInput`](crate::operation::list_dashboards::ListDashboardsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDashboardsInputBuilder {
    pub(crate) dashboard_name_prefix: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListDashboardsInputBuilder {
    /// <p>If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". </p>
    pub fn dashboard_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_name_prefix = Some(input.into());
        self
    }
    /// <p>If you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, ".", "-", and "_". </p>
    pub fn set_dashboard_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dashboard_name_prefix = input;
        self
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDashboardsInput`](crate::operation::list_dashboards::ListDashboardsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_dashboards::ListDashboardsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_dashboards::ListDashboardsInput {
            dashboard_name_prefix: self.dashboard_name_prefix,
            next_token: self.next_token,
        })
    }
}
