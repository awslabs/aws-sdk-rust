// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAnomalyDetectorInput {
    /// <p>The namespace associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The metric name associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The metric dimensions associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    #[doc(hidden)]
    pub dimensions: std::option::Option<std::vec::Vec<crate::types::Dimension>>,
    /// <p>The statistic associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    #[doc(hidden)]
    pub stat: std::option::Option<std::string::String>,
    /// <p>A single metric anomaly detector to be deleted.</p>
    /// <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the single metric anomaly detector attributes as part of the <code>SingleMetricAnomalyDetector</code> property.</p>
    #[doc(hidden)]
    pub single_metric_anomaly_detector:
        std::option::Option<crate::types::SingleMetricAnomalyDetector>,
    /// <p>The metric math anomaly detector to be deleted.</p>
    /// <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the metric math anomaly detector attributes as part of the <code>MetricMathAnomalyDetector</code> property.</p>
    #[doc(hidden)]
    pub metric_math_anomaly_detector: std::option::Option<crate::types::MetricMathAnomalyDetector>,
}
impl DeleteAnomalyDetectorInput {
    /// <p>The namespace associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The metric name associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The metric dimensions associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn dimensions(&self) -> std::option::Option<&[crate::types::Dimension]> {
        self.dimensions.as_deref()
    }
    /// <p>The statistic associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn stat(&self) -> std::option::Option<&str> {
        self.stat.as_deref()
    }
    /// <p>A single metric anomaly detector to be deleted.</p>
    /// <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the single metric anomaly detector attributes as part of the <code>SingleMetricAnomalyDetector</code> property.</p>
    pub fn single_metric_anomaly_detector(
        &self,
    ) -> std::option::Option<&crate::types::SingleMetricAnomalyDetector> {
        self.single_metric_anomaly_detector.as_ref()
    }
    /// <p>The metric math anomaly detector to be deleted.</p>
    /// <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the metric math anomaly detector attributes as part of the <code>MetricMathAnomalyDetector</code> property.</p>
    pub fn metric_math_anomaly_detector(
        &self,
    ) -> std::option::Option<&crate::types::MetricMathAnomalyDetector> {
        self.metric_math_anomaly_detector.as_ref()
    }
}
impl DeleteAnomalyDetectorInput {
    /// Creates a new builder-style object to manufacture [`DeleteAnomalyDetectorInput`](crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput).
    pub fn builder(
    ) -> crate::operation::delete_anomaly_detector::builders::DeleteAnomalyDetectorInputBuilder
    {
        crate::operation::delete_anomaly_detector::builders::DeleteAnomalyDetectorInputBuilder::default()
    }
}

/// A builder for [`DeleteAnomalyDetectorInput`](crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteAnomalyDetectorInputBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) dimensions: std::option::Option<std::vec::Vec<crate::types::Dimension>>,
    pub(crate) stat: std::option::Option<std::string::String>,
    pub(crate) single_metric_anomaly_detector:
        std::option::Option<crate::types::SingleMetricAnomalyDetector>,
    pub(crate) metric_math_anomaly_detector:
        std::option::Option<crate::types::MetricMathAnomalyDetector>,
}
impl DeleteAnomalyDetectorInputBuilder {
    /// <p>The namespace associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The metric name associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The metric name associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>The metric dimensions associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn dimensions(mut self, input: crate::types::Dimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = Some(v);
        self
    }
    /// <p>The metric dimensions associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn set_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Dimension>>,
    ) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>The statistic associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn stat(mut self, input: impl Into<std::string::String>) -> Self {
        self.stat = Some(input.into());
        self
    }
    /// <p>The statistic associated with the anomaly detection model to delete.</p>
    #[deprecated(note = "Use SingleMetricAnomalyDetector.")]
    pub fn set_stat(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stat = input;
        self
    }
    /// <p>A single metric anomaly detector to be deleted.</p>
    /// <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the single metric anomaly detector attributes as part of the <code>SingleMetricAnomalyDetector</code> property.</p>
    pub fn single_metric_anomaly_detector(
        mut self,
        input: crate::types::SingleMetricAnomalyDetector,
    ) -> Self {
        self.single_metric_anomaly_detector = Some(input);
        self
    }
    /// <p>A single metric anomaly detector to be deleted.</p>
    /// <p>When using <code>SingleMetricAnomalyDetector</code>, you cannot include the following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>MetricMathAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the single metric anomaly detector attributes as part of the <code>SingleMetricAnomalyDetector</code> property.</p>
    pub fn set_single_metric_anomaly_detector(
        mut self,
        input: std::option::Option<crate::types::SingleMetricAnomalyDetector>,
    ) -> Self {
        self.single_metric_anomaly_detector = input;
        self
    }
    /// <p>The metric math anomaly detector to be deleted.</p>
    /// <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the metric math anomaly detector attributes as part of the <code>MetricMathAnomalyDetector</code> property.</p>
    pub fn metric_math_anomaly_detector(
        mut self,
        input: crate::types::MetricMathAnomalyDetector,
    ) -> Self {
        self.metric_math_anomaly_detector = Some(input);
        self
    }
    /// <p>The metric math anomaly detector to be deleted.</p>
    /// <p>When using <code>MetricMathAnomalyDetector</code>, you cannot include following parameters in the same operation:</p>
    /// <ul>
    /// <li> <p> <code>Dimensions</code>,</p> </li>
    /// <li> <p> <code>MetricName</code> </p> </li>
    /// <li> <p> <code>Namespace</code> </p> </li>
    /// <li> <p> <code>Stat</code> </p> </li>
    /// <li> <p>the <code>SingleMetricAnomalyDetector</code> parameters of <code>DeleteAnomalyDetectorInput</code> </p> </li>
    /// </ul>
    /// <p>Instead, specify the metric math anomaly detector attributes as part of the <code>MetricMathAnomalyDetector</code> property.</p>
    pub fn set_metric_math_anomaly_detector(
        mut self,
        input: std::option::Option<crate::types::MetricMathAnomalyDetector>,
    ) -> Self {
        self.metric_math_anomaly_detector = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteAnomalyDetectorInput`](crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput {
                namespace: self.namespace,
                metric_name: self.metric_name,
                dimensions: self.dimensions,
                stat: self.stat,
                single_metric_anomaly_detector: self.single_metric_anomaly_detector,
                metric_math_anomaly_detector: self.metric_math_anomaly_detector,
            },
        )
    }
}
