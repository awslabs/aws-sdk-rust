// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlarmsOutput {
    /// <p>The information about any composite alarms returned by the operation.</p>
    #[doc(hidden)]
    pub composite_alarms: std::option::Option<std::vec::Vec<crate::types::CompositeAlarm>>,
    /// <p>The information about any metric alarms returned by the operation.</p>
    #[doc(hidden)]
    pub metric_alarms: std::option::Option<std::vec::Vec<crate::types::MetricAlarm>>,
    /// <p>The token that marks the start of the next batch of returned results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAlarmsOutput {
    /// <p>The information about any composite alarms returned by the operation.</p>
    pub fn composite_alarms(&self) -> std::option::Option<&[crate::types::CompositeAlarm]> {
        self.composite_alarms.as_deref()
    }
    /// <p>The information about any metric alarms returned by the operation.</p>
    pub fn metric_alarms(&self) -> std::option::Option<&[crate::types::MetricAlarm]> {
        self.metric_alarms.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeAlarmsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAlarmsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsOutput`](crate::operation::describe_alarms::DescribeAlarmsOutput).
    pub fn builder() -> crate::operation::describe_alarms::builders::DescribeAlarmsOutputBuilder {
        crate::operation::describe_alarms::builders::DescribeAlarmsOutputBuilder::default()
    }
}

/// A builder for [`DescribeAlarmsOutput`](crate::operation::describe_alarms::DescribeAlarmsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarmsOutputBuilder {
    pub(crate) composite_alarms: std::option::Option<std::vec::Vec<crate::types::CompositeAlarm>>,
    pub(crate) metric_alarms: std::option::Option<std::vec::Vec<crate::types::MetricAlarm>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeAlarmsOutputBuilder {
    /// Appends an item to `composite_alarms`.
    ///
    /// To override the contents of this collection use [`set_composite_alarms`](Self::set_composite_alarms).
    ///
    /// <p>The information about any composite alarms returned by the operation.</p>
    pub fn composite_alarms(mut self, input: crate::types::CompositeAlarm) -> Self {
        let mut v = self.composite_alarms.unwrap_or_default();
        v.push(input);
        self.composite_alarms = Some(v);
        self
    }
    /// <p>The information about any composite alarms returned by the operation.</p>
    pub fn set_composite_alarms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CompositeAlarm>>,
    ) -> Self {
        self.composite_alarms = input;
        self
    }
    /// Appends an item to `metric_alarms`.
    ///
    /// To override the contents of this collection use [`set_metric_alarms`](Self::set_metric_alarms).
    ///
    /// <p>The information about any metric alarms returned by the operation.</p>
    pub fn metric_alarms(mut self, input: crate::types::MetricAlarm) -> Self {
        let mut v = self.metric_alarms.unwrap_or_default();
        v.push(input);
        self.metric_alarms = Some(v);
        self
    }
    /// <p>The information about any metric alarms returned by the operation.</p>
    pub fn set_metric_alarms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricAlarm>>,
    ) -> Self {
        self.metric_alarms = input;
        self
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAlarmsOutput`](crate::operation::describe_alarms::DescribeAlarmsOutput).
    pub fn build(self) -> crate::operation::describe_alarms::DescribeAlarmsOutput {
        crate::operation::describe_alarms::DescribeAlarmsOutput {
            composite_alarms: self.composite_alarms,
            metric_alarms: self.metric_alarms,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
