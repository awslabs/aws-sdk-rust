// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAlarmsInput {
    /// <p>The names of the alarms to retrieve information about.</p>
    #[doc(hidden)]
    pub alarm_names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p>
    /// <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
    #[doc(hidden)]
    pub alarm_name_prefix: std::option::Option<std::string::String>,
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</p>
    #[doc(hidden)]
    pub alarm_types: std::option::Option<std::vec::Vec<crate::types::AlarmType>>,
    /// <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    #[doc(hidden)]
    pub children_of_alarm_name: std::option::Option<std::string::String>,
    /// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    #[doc(hidden)]
    pub parents_of_alarm_name: std::option::Option<std::string::String>,
    /// <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
    #[doc(hidden)]
    pub state_value: std::option::Option<crate::types::StateValue>,
    /// <p>Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.</p>
    #[doc(hidden)]
    pub action_prefix: std::option::Option<std::string::String>,
    /// <p>The maximum number of alarm descriptions to retrieve.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeAlarmsInput {
    /// <p>The names of the alarms to retrieve information about.</p>
    pub fn alarm_names(&self) -> std::option::Option<&[std::string::String]> {
        self.alarm_names.as_deref()
    }
    /// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p>
    /// <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
    pub fn alarm_name_prefix(&self) -> std::option::Option<&str> {
        self.alarm_name_prefix.as_deref()
    }
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</p>
    pub fn alarm_types(&self) -> std::option::Option<&[crate::types::AlarmType]> {
        self.alarm_types.as_deref()
    }
    /// <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn children_of_alarm_name(&self) -> std::option::Option<&str> {
        self.children_of_alarm_name.as_deref()
    }
    /// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn parents_of_alarm_name(&self) -> std::option::Option<&str> {
        self.parents_of_alarm_name.as_deref()
    }
    /// <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
    pub fn state_value(&self) -> std::option::Option<&crate::types::StateValue> {
        self.state_value.as_ref()
    }
    /// <p>Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.</p>
    pub fn action_prefix(&self) -> std::option::Option<&str> {
        self.action_prefix.as_deref()
    }
    /// <p>The maximum number of alarm descriptions to retrieve.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeAlarmsInput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsInput`](crate::operation::describe_alarms::DescribeAlarmsInput).
    pub fn builder() -> crate::operation::describe_alarms::builders::DescribeAlarmsInputBuilder {
        crate::operation::describe_alarms::builders::DescribeAlarmsInputBuilder::default()
    }
}

/// A builder for [`DescribeAlarmsInput`](crate::operation::describe_alarms::DescribeAlarmsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarmsInputBuilder {
    pub(crate) alarm_names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) alarm_name_prefix: std::option::Option<std::string::String>,
    pub(crate) alarm_types: std::option::Option<std::vec::Vec<crate::types::AlarmType>>,
    pub(crate) children_of_alarm_name: std::option::Option<std::string::String>,
    pub(crate) parents_of_alarm_name: std::option::Option<std::string::String>,
    pub(crate) state_value: std::option::Option<crate::types::StateValue>,
    pub(crate) action_prefix: std::option::Option<std::string::String>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl DescribeAlarmsInputBuilder {
    /// Appends an item to `alarm_names`.
    ///
    /// To override the contents of this collection use [`set_alarm_names`](Self::set_alarm_names).
    ///
    /// <p>The names of the alarms to retrieve information about.</p>
    pub fn alarm_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.alarm_names.unwrap_or_default();
        v.push(input.into());
        self.alarm_names = Some(v);
        self
    }
    /// <p>The names of the alarms to retrieve information about.</p>
    pub fn set_alarm_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.alarm_names = input;
        self
    }
    /// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p>
    /// <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
    pub fn alarm_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.alarm_name_prefix = Some(input.into());
        self
    }
    /// <p>An alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.</p>
    /// <p>If this parameter is specified, you cannot specify <code>AlarmNames</code>.</p>
    pub fn set_alarm_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.alarm_name_prefix = input;
        self
    }
    /// Appends an item to `alarm_types`.
    ///
    /// To override the contents of this collection use [`set_alarm_types`](Self::set_alarm_types).
    ///
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</p>
    pub fn alarm_types(mut self, input: crate::types::AlarmType) -> Self {
        let mut v = self.alarm_types.unwrap_or_default();
        v.push(input);
        self.alarm_types = Some(v);
        self
    }
    /// <p>Use this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.</p>
    pub fn set_alarm_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AlarmType>>,
    ) -> Self {
        self.alarm_types = input;
        self
    }
    /// <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn children_of_alarm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.children_of_alarm_name = Some(input.into());
        self
    }
    /// <p>If you use this parameter and specify the name of a composite alarm, the operation returns information about the "children" alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the <code>AlarmRule</code> field of the composite alarm that you specify in <code>ChildrenOfAlarmName</code>. Information about the composite alarm that you name in <code>ChildrenOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ChildrenOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the <code>Alarm Name</code>, <code>ARN</code>, <code>StateValue</code> (OK/ALARM/INSUFFICIENT_DATA), and <code>StateUpdatedTimestamp</code> information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn set_children_of_alarm_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.children_of_alarm_name = input;
        self
    }
    /// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn parents_of_alarm_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parents_of_alarm_name = Some(input.into());
        self
    }
    /// <p>If you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the "parent" alarms of the alarm you specify. These are the composite alarms that have <code>AlarmRule</code> parameters that reference the alarm named in <code>ParentsOfAlarmName</code>. Information about the alarm that you specify in <code>ParentsOfAlarmName</code> is not returned.</p>
    /// <p>If you specify <code>ParentsOfAlarmName</code>, you cannot specify any other parameters in the request except for <code>MaxRecords</code> and <code>NextToken</code>. If you do so, you receive a validation error.</p> <note>
    /// <p>Only the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another <code>DescribeAlarms</code> operation and specify the parent alarm names in the <code>AlarmNames</code> parameter.</p>
    /// </note>
    pub fn set_parents_of_alarm_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parents_of_alarm_name = input;
        self
    }
    /// <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
    pub fn state_value(mut self, input: crate::types::StateValue) -> Self {
        self.state_value = Some(input);
        self
    }
    /// <p>Specify this parameter to receive information only about alarms that are currently in the state that you specify.</p>
    pub fn set_state_value(mut self, input: std::option::Option<crate::types::StateValue>) -> Self {
        self.state_value = input;
        self
    }
    /// <p>Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.</p>
    pub fn action_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_prefix = Some(input.into());
        self
    }
    /// <p>Use this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.</p>
    pub fn set_action_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_prefix = input;
        self
    }
    /// <p>The maximum number of alarm descriptions to retrieve.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of alarm descriptions to retrieve.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token returned by a previous call to indicate that there is more data available.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAlarmsInput`](crate::operation::describe_alarms::DescribeAlarmsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_alarms::DescribeAlarmsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_alarms::DescribeAlarmsInput {
            alarm_names: self.alarm_names,
            alarm_name_prefix: self.alarm_name_prefix,
            alarm_types: self.alarm_types,
            children_of_alarm_name: self.children_of_alarm_name,
            parents_of_alarm_name: self.parents_of_alarm_name,
            state_value: self.state_value,
            action_prefix: self.action_prefix,
            max_records: self.max_records,
            next_token: self.next_token,
        })
    }
}
