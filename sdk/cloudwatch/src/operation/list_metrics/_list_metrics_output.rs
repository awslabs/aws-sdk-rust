// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMetricsOutput {
    /// <p>The metrics that match your request. </p>
    #[doc(hidden)]
    pub metrics: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    /// <p>The token that marks the start of the next batch of returned results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from.</p>
    /// <p>This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.</p>
    #[doc(hidden)]
    pub owning_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListMetricsOutput {
    /// <p>The metrics that match your request. </p>
    pub fn metrics(&self) -> std::option::Option<&[crate::types::Metric]> {
        self.metrics.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from.</p>
    /// <p>This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.</p>
    pub fn owning_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.owning_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMetricsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMetricsOutput {
    /// Creates a new builder-style object to manufacture [`ListMetricsOutput`](crate::operation::list_metrics::ListMetricsOutput).
    pub fn builder() -> crate::operation::list_metrics::builders::ListMetricsOutputBuilder {
        crate::operation::list_metrics::builders::ListMetricsOutputBuilder::default()
    }
}

/// A builder for [`ListMetricsOutput`](crate::operation::list_metrics::ListMetricsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMetricsOutputBuilder {
    pub(crate) metrics: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) owning_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListMetricsOutputBuilder {
    /// Appends an item to `metrics`.
    ///
    /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
    ///
    /// <p>The metrics that match your request. </p>
    pub fn metrics(mut self, input: crate::types::Metric) -> Self {
        let mut v = self.metrics.unwrap_or_default();
        v.push(input);
        self.metrics = Some(v);
        self
    }
    /// <p>The metrics that match your request. </p>
    pub fn set_metrics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metric>>,
    ) -> Self {
        self.metrics = input;
        self
    }
    /// <p>The token that marks the start of the next batch of returned results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that marks the start of the next batch of returned results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `owning_accounts`.
    ///
    /// To override the contents of this collection use [`set_owning_accounts`](Self::set_owning_accounts).
    ///
    /// <p>If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from.</p>
    /// <p>This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.</p>
    pub fn owning_accounts(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.owning_accounts.unwrap_or_default();
        v.push(input.into());
        self.owning_accounts = Some(v);
        self
    }
    /// <p>If you are using this operation in a monitoring account, this array contains the account IDs of the source accounts where the metrics in the returned data are from.</p>
    /// <p>This field is a 1:1 mapping between each metric that is returned and the ID of the owning account.</p>
    pub fn set_owning_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.owning_accounts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMetricsOutput`](crate::operation::list_metrics::ListMetricsOutput).
    pub fn build(self) -> crate::operation::list_metrics::ListMetricsOutput {
        crate::operation::list_metrics::ListMetricsOutput {
            metrics: self.metrics,
            next_token: self.next_token,
            owning_accounts: self.owning_accounts,
            _request_id: self._request_id,
        }
    }
}
