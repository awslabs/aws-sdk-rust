// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::stop_metric_streams::_stop_metric_streams_output::StopMetricStreamsOutputBuilder;

pub use crate::operation::stop_metric_streams::_stop_metric_streams_input::StopMetricStreamsInputBuilder;

/// Fluent builder constructing a request to `StopMetricStreams`.
///
/// <p>Stops the streaming of metrics for one or more of your metric streams.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StopMetricStreamsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::stop_metric_streams::builders::StopMetricStreamsInputBuilder,
}
impl StopMetricStreamsFluentBuilder {
    /// Creates a new `StopMetricStreams`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::stop_metric_streams::StopMetricStreams,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::stop_metric_streams::StopMetricStreamsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::stop_metric_streams::StopMetricStreamsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::stop_metric_streams::StopMetricStreamsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `Names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>The array of the names of metric streams to stop streaming.</p>
    /// <p>This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.</p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.names(input.into());
        self
    }
    /// <p>The array of the names of metric streams to stop streaming.</p>
    /// <p>This is an "all or nothing" operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.</p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_names(input);
        self
    }
}
