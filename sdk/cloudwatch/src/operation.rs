// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `DeleteAlarms`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_alarms`](crate::client::fluent_builders::DeleteAlarms).
///
/// `ParseStrictResponse` impl for `DeleteAlarms`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAlarms {
    _private: (),
}
impl DeleteAlarms {
    /// Creates a new builder-style object to manufacture [`DeleteAlarmsInput`](crate::input::DeleteAlarmsInput).
    pub fn builder() -> crate::input::delete_alarms_input::Builder {
        crate::input::delete_alarms_input::Builder::default()
    }
    /// Creates a new `DeleteAlarms` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAlarms {
    type Output =
        std::result::Result<crate::output::DeleteAlarmsOutput, crate::error::DeleteAlarmsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_alarms::de_delete_alarms_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_alarms::de_delete_alarms_http_response(response)
        }
    }
}

/// Operation shape for `DeleteAnomalyDetector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_anomaly_detector`](crate::client::fluent_builders::DeleteAnomalyDetector).
///
/// `ParseStrictResponse` impl for `DeleteAnomalyDetector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAnomalyDetector {
    _private: (),
}
impl DeleteAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`DeleteAnomalyDetectorInput`](crate::input::DeleteAnomalyDetectorInput).
    pub fn builder() -> crate::input::delete_anomaly_detector_input::Builder {
        crate::input::delete_anomaly_detector_input::Builder::default()
    }
    /// Creates a new `DeleteAnomalyDetector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAnomalyDetector {
    type Output = std::result::Result<
        crate::output::DeleteAnomalyDetectorOutput,
        crate::error::DeleteAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_anomaly_detector::de_delete_anomaly_detector_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_anomaly_detector::de_delete_anomaly_detector_http_response(response)
        }
    }
}

/// Operation shape for `DeleteDashboards`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_dashboards`](crate::client::fluent_builders::DeleteDashboards).
///
/// `ParseStrictResponse` impl for `DeleteDashboards`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteDashboards {
    _private: (),
}
impl DeleteDashboards {
    /// Creates a new builder-style object to manufacture [`DeleteDashboardsInput`](crate::input::DeleteDashboardsInput).
    pub fn builder() -> crate::input::delete_dashboards_input::Builder {
        crate::input::delete_dashboards_input::Builder::default()
    }
    /// Creates a new `DeleteDashboards` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDashboards {
    type Output = std::result::Result<
        crate::output::DeleteDashboardsOutput,
        crate::error::DeleteDashboardsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_dashboards::de_delete_dashboards_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_dashboards::de_delete_dashboards_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_insight_rules`](crate::client::fluent_builders::DeleteInsightRules).
///
/// `ParseStrictResponse` impl for `DeleteInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteInsightRules {
    _private: (),
}
impl DeleteInsightRules {
    /// Creates a new builder-style object to manufacture [`DeleteInsightRulesInput`](crate::input::DeleteInsightRulesInput).
    pub fn builder() -> crate::input::delete_insight_rules_input::Builder {
        crate::input::delete_insight_rules_input::Builder::default()
    }
    /// Creates a new `DeleteInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteInsightRules {
    type Output = std::result::Result<
        crate::output::DeleteInsightRulesOutput,
        crate::error::DeleteInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_insight_rules::de_delete_insight_rules_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_insight_rules::de_delete_insight_rules_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteMetricStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_metric_stream`](crate::client::fluent_builders::DeleteMetricStream).
///
/// `ParseStrictResponse` impl for `DeleteMetricStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteMetricStream {
    _private: (),
}
impl DeleteMetricStream {
    /// Creates a new builder-style object to manufacture [`DeleteMetricStreamInput`](crate::input::DeleteMetricStreamInput).
    pub fn builder() -> crate::input::delete_metric_stream_input::Builder {
        crate::input::delete_metric_stream_input::Builder::default()
    }
    /// Creates a new `DeleteMetricStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteMetricStream {
    type Output = std::result::Result<
        crate::output::DeleteMetricStreamOutput,
        crate::error::DeleteMetricStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_metric_stream::de_delete_metric_stream_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_metric_stream::de_delete_metric_stream_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeAlarmHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_alarm_history`](crate::client::fluent_builders::DescribeAlarmHistory).
///
/// `ParseStrictResponse` impl for `DescribeAlarmHistory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarmHistory {
    _private: (),
}
impl DescribeAlarmHistory {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmHistoryInput`](crate::input::DescribeAlarmHistoryInput).
    pub fn builder() -> crate::input::describe_alarm_history_input::Builder {
        crate::input::describe_alarm_history_input::Builder::default()
    }
    /// Creates a new `DescribeAlarmHistory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAlarmHistory {
    type Output = std::result::Result<
        crate::output::DescribeAlarmHistoryOutput,
        crate::error::DescribeAlarmHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_alarm_history::de_describe_alarm_history_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_alarm_history::de_describe_alarm_history_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAlarms`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_alarms`](crate::client::fluent_builders::DescribeAlarms).
///
/// `ParseStrictResponse` impl for `DescribeAlarms`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarms {
    _private: (),
}
impl DescribeAlarms {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsInput`](crate::input::DescribeAlarmsInput).
    pub fn builder() -> crate::input::describe_alarms_input::Builder {
        crate::input::describe_alarms_input::Builder::default()
    }
    /// Creates a new `DescribeAlarms` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAlarms {
    type Output =
        std::result::Result<crate::output::DescribeAlarmsOutput, crate::error::DescribeAlarmsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_alarms::de_describe_alarms_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_alarms::de_describe_alarms_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAlarmsForMetric`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_alarms_for_metric`](crate::client::fluent_builders::DescribeAlarmsForMetric).
///
/// `ParseStrictResponse` impl for `DescribeAlarmsForMetric`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAlarmsForMetric {
    _private: (),
}
impl DescribeAlarmsForMetric {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsForMetricInput`](crate::input::DescribeAlarmsForMetricInput).
    pub fn builder() -> crate::input::describe_alarms_for_metric_input::Builder {
        crate::input::describe_alarms_for_metric_input::Builder::default()
    }
    /// Creates a new `DescribeAlarmsForMetric` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAlarmsForMetric {
    type Output = std::result::Result<
        crate::output::DescribeAlarmsForMetricOutput,
        crate::error::DescribeAlarmsForMetricError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_alarms_for_metric::de_describe_alarms_for_metric_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_alarms_for_metric::de_describe_alarms_for_metric_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAnomalyDetectors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_anomaly_detectors`](crate::client::fluent_builders::DescribeAnomalyDetectors).
///
/// `ParseStrictResponse` impl for `DescribeAnomalyDetectors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAnomalyDetectors {
    _private: (),
}
impl DescribeAnomalyDetectors {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyDetectorsInput`](crate::input::DescribeAnomalyDetectorsInput).
    pub fn builder() -> crate::input::describe_anomaly_detectors_input::Builder {
        crate::input::describe_anomaly_detectors_input::Builder::default()
    }
    /// Creates a new `DescribeAnomalyDetectors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAnomalyDetectors {
    type Output = std::result::Result<
        crate::output::DescribeAnomalyDetectorsOutput,
        crate::error::DescribeAnomalyDetectorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_anomaly_detectors::de_describe_anomaly_detectors_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_anomaly_detectors::de_describe_anomaly_detectors_http_response(response)
        }
    }
}

/// Operation shape for `DescribeInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_insight_rules`](crate::client::fluent_builders::DescribeInsightRules).
///
/// `ParseStrictResponse` impl for `DescribeInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeInsightRules {
    _private: (),
}
impl DescribeInsightRules {
    /// Creates a new builder-style object to manufacture [`DescribeInsightRulesInput`](crate::input::DescribeInsightRulesInput).
    pub fn builder() -> crate::input::describe_insight_rules_input::Builder {
        crate::input::describe_insight_rules_input::Builder::default()
    }
    /// Creates a new `DescribeInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeInsightRules {
    type Output = std::result::Result<
        crate::output::DescribeInsightRulesOutput,
        crate::error::DescribeInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_insight_rules::de_describe_insight_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_insight_rules::de_describe_insight_rules_http_response(response)
        }
    }
}

/// Operation shape for `DisableAlarmActions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_alarm_actions`](crate::client::fluent_builders::DisableAlarmActions).
///
/// `ParseStrictResponse` impl for `DisableAlarmActions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableAlarmActions {
    _private: (),
}
impl DisableAlarmActions {
    /// Creates a new builder-style object to manufacture [`DisableAlarmActionsInput`](crate::input::DisableAlarmActionsInput).
    pub fn builder() -> crate::input::disable_alarm_actions_input::Builder {
        crate::input::disable_alarm_actions_input::Builder::default()
    }
    /// Creates a new `DisableAlarmActions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableAlarmActions {
    type Output = std::result::Result<
        crate::output::DisableAlarmActionsOutput,
        crate::error::DisableAlarmActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_alarm_actions::de_disable_alarm_actions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disable_alarm_actions::de_disable_alarm_actions_http_response(response)
        }
    }
}

/// Operation shape for `DisableInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_insight_rules`](crate::client::fluent_builders::DisableInsightRules).
///
/// `ParseStrictResponse` impl for `DisableInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableInsightRules {
    _private: (),
}
impl DisableInsightRules {
    /// Creates a new builder-style object to manufacture [`DisableInsightRulesInput`](crate::input::DisableInsightRulesInput).
    pub fn builder() -> crate::input::disable_insight_rules_input::Builder {
        crate::input::disable_insight_rules_input::Builder::default()
    }
    /// Creates a new `DisableInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableInsightRules {
    type Output = std::result::Result<
        crate::output::DisableInsightRulesOutput,
        crate::error::DisableInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_insight_rules::de_disable_insight_rules_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disable_insight_rules::de_disable_insight_rules_http_response(response)
        }
    }
}

/// Operation shape for `EnableAlarmActions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_alarm_actions`](crate::client::fluent_builders::EnableAlarmActions).
///
/// `ParseStrictResponse` impl for `EnableAlarmActions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableAlarmActions {
    _private: (),
}
impl EnableAlarmActions {
    /// Creates a new builder-style object to manufacture [`EnableAlarmActionsInput`](crate::input::EnableAlarmActionsInput).
    pub fn builder() -> crate::input::enable_alarm_actions_input::Builder {
        crate::input::enable_alarm_actions_input::Builder::default()
    }
    /// Creates a new `EnableAlarmActions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableAlarmActions {
    type Output = std::result::Result<
        crate::output::EnableAlarmActionsOutput,
        crate::error::EnableAlarmActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_alarm_actions::de_enable_alarm_actions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_enable_alarm_actions::de_enable_alarm_actions_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `EnableInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_insight_rules`](crate::client::fluent_builders::EnableInsightRules).
///
/// `ParseStrictResponse` impl for `EnableInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableInsightRules {
    _private: (),
}
impl EnableInsightRules {
    /// Creates a new builder-style object to manufacture [`EnableInsightRulesInput`](crate::input::EnableInsightRulesInput).
    pub fn builder() -> crate::input::enable_insight_rules_input::Builder {
        crate::input::enable_insight_rules_input::Builder::default()
    }
    /// Creates a new `EnableInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableInsightRules {
    type Output = std::result::Result<
        crate::output::EnableInsightRulesOutput,
        crate::error::EnableInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_insight_rules::de_enable_insight_rules_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_enable_insight_rules::de_enable_insight_rules_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_dashboard`](crate::client::fluent_builders::GetDashboard).
///
/// `ParseStrictResponse` impl for `GetDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDashboard {
    _private: (),
}
impl GetDashboard {
    /// Creates a new builder-style object to manufacture [`GetDashboardInput`](crate::input::GetDashboardInput).
    pub fn builder() -> crate::input::get_dashboard_input::Builder {
        crate::input::get_dashboard_input::Builder::default()
    }
    /// Creates a new `GetDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDashboard {
    type Output =
        std::result::Result<crate::output::GetDashboardOutput, crate::error::GetDashboardError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_dashboard::de_get_dashboard_http_error(response)
        } else {
            crate::protocol_serde::shape_get_dashboard::de_get_dashboard_http_response(response)
        }
    }
}

/// Operation shape for `GetInsightRuleReport`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_insight_rule_report`](crate::client::fluent_builders::GetInsightRuleReport).
///
/// `ParseStrictResponse` impl for `GetInsightRuleReport`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetInsightRuleReport {
    _private: (),
}
impl GetInsightRuleReport {
    /// Creates a new builder-style object to manufacture [`GetInsightRuleReportInput`](crate::input::GetInsightRuleReportInput).
    pub fn builder() -> crate::input::get_insight_rule_report_input::Builder {
        crate::input::get_insight_rule_report_input::Builder::default()
    }
    /// Creates a new `GetInsightRuleReport` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetInsightRuleReport {
    type Output = std::result::Result<
        crate::output::GetInsightRuleReportOutput,
        crate::error::GetInsightRuleReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_insight_rule_report::de_get_insight_rule_report_http_error(response)
        } else {
            crate::protocol_serde::shape_get_insight_rule_report::de_get_insight_rule_report_http_response(response)
        }
    }
}

/// Operation shape for `GetMetricData`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_metric_data`](crate::client::fluent_builders::GetMetricData).
///
/// `ParseStrictResponse` impl for `GetMetricData`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMetricData {
    _private: (),
}
impl GetMetricData {
    /// Creates a new builder-style object to manufacture [`GetMetricDataInput`](crate::input::GetMetricDataInput).
    pub fn builder() -> crate::input::get_metric_data_input::Builder {
        crate::input::get_metric_data_input::Builder::default()
    }
    /// Creates a new `GetMetricData` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMetricData {
    type Output =
        std::result::Result<crate::output::GetMetricDataOutput, crate::error::GetMetricDataError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_metric_data::de_get_metric_data_http_error(response)
        } else {
            crate::protocol_serde::shape_get_metric_data::de_get_metric_data_http_response(response)
        }
    }
}

/// Operation shape for `GetMetricStatistics`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_metric_statistics`](crate::client::fluent_builders::GetMetricStatistics).
///
/// `ParseStrictResponse` impl for `GetMetricStatistics`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMetricStatistics {
    _private: (),
}
impl GetMetricStatistics {
    /// Creates a new builder-style object to manufacture [`GetMetricStatisticsInput`](crate::input::GetMetricStatisticsInput).
    pub fn builder() -> crate::input::get_metric_statistics_input::Builder {
        crate::input::get_metric_statistics_input::Builder::default()
    }
    /// Creates a new `GetMetricStatistics` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMetricStatistics {
    type Output = std::result::Result<
        crate::output::GetMetricStatisticsOutput,
        crate::error::GetMetricStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_metric_statistics::de_get_metric_statistics_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_metric_statistics::de_get_metric_statistics_http_response(response)
        }
    }
}

/// Operation shape for `GetMetricStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_metric_stream`](crate::client::fluent_builders::GetMetricStream).
///
/// `ParseStrictResponse` impl for `GetMetricStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMetricStream {
    _private: (),
}
impl GetMetricStream {
    /// Creates a new builder-style object to manufacture [`GetMetricStreamInput`](crate::input::GetMetricStreamInput).
    pub fn builder() -> crate::input::get_metric_stream_input::Builder {
        crate::input::get_metric_stream_input::Builder::default()
    }
    /// Creates a new `GetMetricStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMetricStream {
    type Output = std::result::Result<
        crate::output::GetMetricStreamOutput,
        crate::error::GetMetricStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_metric_stream::de_get_metric_stream_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_metric_stream::de_get_metric_stream_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetMetricWidgetImage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_metric_widget_image`](crate::client::fluent_builders::GetMetricWidgetImage).
///
/// `ParseStrictResponse` impl for `GetMetricWidgetImage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMetricWidgetImage {
    _private: (),
}
impl GetMetricWidgetImage {
    /// Creates a new builder-style object to manufacture [`GetMetricWidgetImageInput`](crate::input::GetMetricWidgetImageInput).
    pub fn builder() -> crate::input::get_metric_widget_image_input::Builder {
        crate::input::get_metric_widget_image_input::Builder::default()
    }
    /// Creates a new `GetMetricWidgetImage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMetricWidgetImage {
    type Output = std::result::Result<
        crate::output::GetMetricWidgetImageOutput,
        crate::error::GetMetricWidgetImageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_metric_widget_image::de_get_metric_widget_image_http_error(response)
        } else {
            crate::protocol_serde::shape_get_metric_widget_image::de_get_metric_widget_image_http_response(response)
        }
    }
}

/// Operation shape for `ListDashboards`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_dashboards`](crate::client::fluent_builders::ListDashboards).
///
/// `ParseStrictResponse` impl for `ListDashboards`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListDashboards {
    _private: (),
}
impl ListDashboards {
    /// Creates a new builder-style object to manufacture [`ListDashboardsInput`](crate::input::ListDashboardsInput).
    pub fn builder() -> crate::input::list_dashboards_input::Builder {
        crate::input::list_dashboards_input::Builder::default()
    }
    /// Creates a new `ListDashboards` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListDashboards {
    type Output =
        std::result::Result<crate::output::ListDashboardsOutput, crate::error::ListDashboardsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_dashboards::de_list_dashboards_http_error(response)
        } else {
            crate::protocol_serde::shape_list_dashboards::de_list_dashboards_http_response(response)
        }
    }
}

/// Operation shape for `ListManagedInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_managed_insight_rules`](crate::client::fluent_builders::ListManagedInsightRules).
///
/// `ParseStrictResponse` impl for `ListManagedInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListManagedInsightRules {
    _private: (),
}
impl ListManagedInsightRules {
    /// Creates a new builder-style object to manufacture [`ListManagedInsightRulesInput`](crate::input::ListManagedInsightRulesInput).
    pub fn builder() -> crate::input::list_managed_insight_rules_input::Builder {
        crate::input::list_managed_insight_rules_input::Builder::default()
    }
    /// Creates a new `ListManagedInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListManagedInsightRules {
    type Output = std::result::Result<
        crate::output::ListManagedInsightRulesOutput,
        crate::error::ListManagedInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_managed_insight_rules::de_list_managed_insight_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_list_managed_insight_rules::de_list_managed_insight_rules_http_response(response)
        }
    }
}

/// Operation shape for `ListMetrics`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_metrics`](crate::client::fluent_builders::ListMetrics).
///
/// `ParseStrictResponse` impl for `ListMetrics`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListMetrics {
    _private: (),
}
impl ListMetrics {
    /// Creates a new builder-style object to manufacture [`ListMetricsInput`](crate::input::ListMetricsInput).
    pub fn builder() -> crate::input::list_metrics_input::Builder {
        crate::input::list_metrics_input::Builder::default()
    }
    /// Creates a new `ListMetrics` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListMetrics {
    type Output =
        std::result::Result<crate::output::ListMetricsOutput, crate::error::ListMetricsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_metrics::de_list_metrics_http_error(response)
        } else {
            crate::protocol_serde::shape_list_metrics::de_list_metrics_http_response(response)
        }
    }
}

/// Operation shape for `ListMetricStreams`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_metric_streams`](crate::client::fluent_builders::ListMetricStreams).
///
/// `ParseStrictResponse` impl for `ListMetricStreams`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListMetricStreams {
    _private: (),
}
impl ListMetricStreams {
    /// Creates a new builder-style object to manufacture [`ListMetricStreamsInput`](crate::input::ListMetricStreamsInput).
    pub fn builder() -> crate::input::list_metric_streams_input::Builder {
        crate::input::list_metric_streams_input::Builder::default()
    }
    /// Creates a new `ListMetricStreams` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListMetricStreams {
    type Output = std::result::Result<
        crate::output::ListMetricStreamsOutput,
        crate::error::ListMetricStreamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_metric_streams::de_list_metric_streams_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_metric_streams::de_list_metric_streams_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `PutAnomalyDetector`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_anomaly_detector`](crate::client::fluent_builders::PutAnomalyDetector).
///
/// `ParseStrictResponse` impl for `PutAnomalyDetector`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutAnomalyDetector {
    _private: (),
}
impl PutAnomalyDetector {
    /// Creates a new builder-style object to manufacture [`PutAnomalyDetectorInput`](crate::input::PutAnomalyDetectorInput).
    pub fn builder() -> crate::input::put_anomaly_detector_input::Builder {
        crate::input::put_anomaly_detector_input::Builder::default()
    }
    /// Creates a new `PutAnomalyDetector` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutAnomalyDetector {
    type Output = std::result::Result<
        crate::output::PutAnomalyDetectorOutput,
        crate::error::PutAnomalyDetectorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_anomaly_detector::de_put_anomaly_detector_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_anomaly_detector::de_put_anomaly_detector_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutCompositeAlarm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_composite_alarm`](crate::client::fluent_builders::PutCompositeAlarm).
///
/// `ParseStrictResponse` impl for `PutCompositeAlarm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutCompositeAlarm {
    _private: (),
}
impl PutCompositeAlarm {
    /// Creates a new builder-style object to manufacture [`PutCompositeAlarmInput`](crate::input::PutCompositeAlarmInput).
    pub fn builder() -> crate::input::put_composite_alarm_input::Builder {
        crate::input::put_composite_alarm_input::Builder::default()
    }
    /// Creates a new `PutCompositeAlarm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutCompositeAlarm {
    type Output = std::result::Result<
        crate::output::PutCompositeAlarmOutput,
        crate::error::PutCompositeAlarmError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_composite_alarm::de_put_composite_alarm_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_composite_alarm::de_put_composite_alarm_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutDashboard`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_dashboard`](crate::client::fluent_builders::PutDashboard).
///
/// `ParseStrictResponse` impl for `PutDashboard`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutDashboard {
    _private: (),
}
impl PutDashboard {
    /// Creates a new builder-style object to manufacture [`PutDashboardInput`](crate::input::PutDashboardInput).
    pub fn builder() -> crate::input::put_dashboard_input::Builder {
        crate::input::put_dashboard_input::Builder::default()
    }
    /// Creates a new `PutDashboard` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutDashboard {
    type Output =
        std::result::Result<crate::output::PutDashboardOutput, crate::error::PutDashboardError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_dashboard::de_put_dashboard_http_error(response)
        } else {
            crate::protocol_serde::shape_put_dashboard::de_put_dashboard_http_response(response)
        }
    }
}

/// Operation shape for `PutInsightRule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_insight_rule`](crate::client::fluent_builders::PutInsightRule).
///
/// `ParseStrictResponse` impl for `PutInsightRule`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutInsightRule {
    _private: (),
}
impl PutInsightRule {
    /// Creates a new builder-style object to manufacture [`PutInsightRuleInput`](crate::input::PutInsightRuleInput).
    pub fn builder() -> crate::input::put_insight_rule_input::Builder {
        crate::input::put_insight_rule_input::Builder::default()
    }
    /// Creates a new `PutInsightRule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutInsightRule {
    type Output =
        std::result::Result<crate::output::PutInsightRuleOutput, crate::error::PutInsightRuleError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_insight_rule::de_put_insight_rule_http_error(response)
        } else {
            crate::protocol_serde::shape_put_insight_rule::de_put_insight_rule_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutManagedInsightRules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_managed_insight_rules`](crate::client::fluent_builders::PutManagedInsightRules).
///
/// `ParseStrictResponse` impl for `PutManagedInsightRules`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutManagedInsightRules {
    _private: (),
}
impl PutManagedInsightRules {
    /// Creates a new builder-style object to manufacture [`PutManagedInsightRulesInput`](crate::input::PutManagedInsightRulesInput).
    pub fn builder() -> crate::input::put_managed_insight_rules_input::Builder {
        crate::input::put_managed_insight_rules_input::Builder::default()
    }
    /// Creates a new `PutManagedInsightRules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutManagedInsightRules {
    type Output = std::result::Result<
        crate::output::PutManagedInsightRulesOutput,
        crate::error::PutManagedInsightRulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_managed_insight_rules::de_put_managed_insight_rules_http_error(response)
        } else {
            crate::protocol_serde::shape_put_managed_insight_rules::de_put_managed_insight_rules_http_response(response)
        }
    }
}

/// Operation shape for `PutMetricAlarm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_metric_alarm`](crate::client::fluent_builders::PutMetricAlarm).
///
/// `ParseStrictResponse` impl for `PutMetricAlarm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutMetricAlarm {
    _private: (),
}
impl PutMetricAlarm {
    /// Creates a new builder-style object to manufacture [`PutMetricAlarmInput`](crate::input::PutMetricAlarmInput).
    pub fn builder() -> crate::input::put_metric_alarm_input::Builder {
        crate::input::put_metric_alarm_input::Builder::default()
    }
    /// Creates a new `PutMetricAlarm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutMetricAlarm {
    type Output =
        std::result::Result<crate::output::PutMetricAlarmOutput, crate::error::PutMetricAlarmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_metric_alarm::de_put_metric_alarm_http_error(response)
        } else {
            crate::protocol_serde::shape_put_metric_alarm::de_put_metric_alarm_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutMetricData`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_metric_data`](crate::client::fluent_builders::PutMetricData).
///
/// `ParseStrictResponse` impl for `PutMetricData`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutMetricData {
    _private: (),
}
impl PutMetricData {
    /// Creates a new builder-style object to manufacture [`PutMetricDataInput`](crate::input::PutMetricDataInput).
    pub fn builder() -> crate::input::put_metric_data_input::Builder {
        crate::input::put_metric_data_input::Builder::default()
    }
    /// Creates a new `PutMetricData` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutMetricData {
    type Output =
        std::result::Result<crate::output::PutMetricDataOutput, crate::error::PutMetricDataError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_metric_data::de_put_metric_data_http_error(response)
        } else {
            crate::protocol_serde::shape_put_metric_data::de_put_metric_data_http_response(response)
        }
    }
}

/// Operation shape for `PutMetricStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_metric_stream`](crate::client::fluent_builders::PutMetricStream).
///
/// `ParseStrictResponse` impl for `PutMetricStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutMetricStream {
    _private: (),
}
impl PutMetricStream {
    /// Creates a new builder-style object to manufacture [`PutMetricStreamInput`](crate::input::PutMetricStreamInput).
    pub fn builder() -> crate::input::put_metric_stream_input::Builder {
        crate::input::put_metric_stream_input::Builder::default()
    }
    /// Creates a new `PutMetricStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutMetricStream {
    type Output = std::result::Result<
        crate::output::PutMetricStreamOutput,
        crate::error::PutMetricStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_metric_stream::de_put_metric_stream_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_metric_stream::de_put_metric_stream_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `SetAlarmState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`set_alarm_state`](crate::client::fluent_builders::SetAlarmState).
///
/// `ParseStrictResponse` impl for `SetAlarmState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SetAlarmState {
    _private: (),
}
impl SetAlarmState {
    /// Creates a new builder-style object to manufacture [`SetAlarmStateInput`](crate::input::SetAlarmStateInput).
    pub fn builder() -> crate::input::set_alarm_state_input::Builder {
        crate::input::set_alarm_state_input::Builder::default()
    }
    /// Creates a new `SetAlarmState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SetAlarmState {
    type Output =
        std::result::Result<crate::output::SetAlarmStateOutput, crate::error::SetAlarmStateError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_set_alarm_state::de_set_alarm_state_http_error(response)
        } else {
            crate::protocol_serde::shape_set_alarm_state::de_set_alarm_state_http_response(response)
        }
    }
}

/// Operation shape for `StartMetricStreams`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_metric_streams`](crate::client::fluent_builders::StartMetricStreams).
///
/// `ParseStrictResponse` impl for `StartMetricStreams`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartMetricStreams {
    _private: (),
}
impl StartMetricStreams {
    /// Creates a new builder-style object to manufacture [`StartMetricStreamsInput`](crate::input::StartMetricStreamsInput).
    pub fn builder() -> crate::input::start_metric_streams_input::Builder {
        crate::input::start_metric_streams_input::Builder::default()
    }
    /// Creates a new `StartMetricStreams` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartMetricStreams {
    type Output = std::result::Result<
        crate::output::StartMetricStreamsOutput,
        crate::error::StartMetricStreamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_metric_streams::de_start_metric_streams_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_metric_streams::de_start_metric_streams_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StopMetricStreams`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_metric_streams`](crate::client::fluent_builders::StopMetricStreams).
///
/// `ParseStrictResponse` impl for `StopMetricStreams`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopMetricStreams {
    _private: (),
}
impl StopMetricStreams {
    /// Creates a new builder-style object to manufacture [`StopMetricStreamsInput`](crate::input::StopMetricStreamsInput).
    pub fn builder() -> crate::input::stop_metric_streams_input::Builder {
        crate::input::stop_metric_streams_input::Builder::default()
    }
    /// Creates a new `StopMetricStreams` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopMetricStreams {
    type Output = std::result::Result<
        crate::output::StopMetricStreamsOutput,
        crate::error::StopMetricStreamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stop_metric_streams::de_stop_metric_streams_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_stop_metric_streams::de_stop_metric_streams_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
