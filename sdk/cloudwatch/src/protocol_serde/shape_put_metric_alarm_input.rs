// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_metric_alarm_input_input(
    input: &crate::operation::put_metric_alarm::PutMetricAlarmInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PutMetricAlarm", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AlarmName");
    if let Some(var_2) = &input.alarm_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("AlarmDescription");
    if let Some(var_4) = &input.alarm_description {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ActionsEnabled");
    if let Some(var_6) = &input.actions_enabled {
        scope_5.boolean(*var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("OKActions");
    if let Some(var_8) = &input.ok_actions {
        let mut list_10 = scope_7.start_list(false, None);
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            entry_11.string(item_9);
        }
        list_10.finish();
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("AlarmActions");
    if let Some(var_13) = &input.alarm_actions {
        let mut list_15 = scope_12.start_list(false, None);
        for item_14 in var_13 {
            #[allow(unused_mut)]
            let mut entry_16 = list_15.entry();
            entry_16.string(item_14);
        }
        list_15.finish();
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("InsufficientDataActions");
    if let Some(var_18) = &input.insufficient_data_actions {
        let mut list_20 = scope_17.start_list(false, None);
        for item_19 in var_18 {
            #[allow(unused_mut)]
            let mut entry_21 = list_20.entry();
            entry_21.string(item_19);
        }
        list_20.finish();
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("MetricName");
    if let Some(var_23) = &input.metric_name {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("Namespace");
    if let Some(var_25) = &input.namespace {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("Statistic");
    if let Some(var_27) = &input.statistic {
        scope_26.string(var_27.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("ExtendedStatistic");
    if let Some(var_29) = &input.extended_statistic {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("Dimensions");
    if let Some(var_31) = &input.dimensions {
        let mut list_33 = scope_30.start_list(false, None);
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            crate::protocol_serde::shape_dimension::ser_dimension(entry_34, item_32)?;
        }
        list_33.finish();
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Period");
    if let Some(var_36) = &input.period {
        scope_35.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_36).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("Unit");
    if let Some(var_38) = &input.unit {
        scope_37.string(var_38.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("EvaluationPeriods");
    if let Some(var_40) = &input.evaluation_periods {
        scope_39.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("DatapointsToAlarm");
    if let Some(var_42) = &input.datapoints_to_alarm {
        scope_41.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("Threshold");
    if let Some(var_44) = &input.threshold {
        scope_43.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_44).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("ComparisonOperator");
    if let Some(var_46) = &input.comparison_operator {
        scope_45.string(var_46.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("TreatMissingData");
    if let Some(var_48) = &input.treat_missing_data {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("EvaluateLowSampleCountPercentile");
    if let Some(var_50) = &input.evaluate_low_sample_count_percentile {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Metrics");
    if let Some(var_52) = &input.metrics {
        let mut list_54 = scope_51.start_list(false, None);
        for item_53 in var_52 {
            #[allow(unused_mut)]
            let mut entry_55 = list_54.entry();
            crate::protocol_serde::shape_metric_data_query::ser_metric_data_query(
                entry_55, item_53,
            )?;
        }
        list_54.finish();
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, None);
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("ThresholdMetricId");
    if let Some(var_62) = &input.threshold_metric_id {
        scope_61.string(var_62);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
