// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_insight_rule_contributor(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::InsightRuleContributor, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::InsightRuleContributor::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Keys") /* Keys com.amazonaws.cloudwatch#InsightRuleContributor$Keys */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_insight_rule_contributor_keys::de_insight_rule_contributor_keys(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_keys(var_1);
            }
            ,
            s if s.matches("ApproximateAggregateValue") /* ApproximateAggregateValue com.amazonaws.cloudwatch#InsightRuleContributor$ApproximateAggregateValue */ =>  {
                let var_2 =
                    Some(
                         {
                            <f64 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (double: `com.amazonaws.cloudwatch#InsightRuleUnboundDouble`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_approximate_aggregate_value(var_2);
            }
            ,
            s if s.matches("Datapoints") /* Datapoints com.amazonaws.cloudwatch#InsightRuleContributor$Datapoints */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_insight_rule_contributor_datapoints::de_insight_rule_contributor_datapoints(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_datapoints(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::insight_rule_contributor_correct_errors(builder).build())
}
