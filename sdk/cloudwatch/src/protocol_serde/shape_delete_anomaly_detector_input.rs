// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_delete_anomaly_detector_input_input(
    input: &crate::operation::delete_anomaly_detector::DeleteAnomalyDetectorInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "DeleteAnomalyDetector", "2010-08-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Namespace");
    if let Some(var_2) = &input.namespace {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("MetricName");
    if let Some(var_4) = &input.metric_name {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Dimensions");
    if let Some(var_6) = &input.dimensions {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            crate::protocol_serde::shape_dimension::ser_dimension(entry_9, item_7)?;
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Stat");
    if let Some(var_11) = &input.stat {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("SingleMetricAnomalyDetector");
    if let Some(var_13) = &input.single_metric_anomaly_detector {
        crate::protocol_serde::shape_single_metric_anomaly_detector::ser_single_metric_anomaly_detector(scope_12, var_13)?;
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("MetricMathAnomalyDetector");
    if let Some(var_15) = &input.metric_math_anomaly_detector {
        crate::protocol_serde::shape_metric_math_anomaly_detector::ser_metric_math_anomaly_detector(scope_14, var_15)?;
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
