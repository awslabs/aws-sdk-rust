// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_anomaly_detector_configuration(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::AnomalyDetectorConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ExcludedTimeRanges");
    if let Some(var_2) = &input.excluded_time_ranges {
        let mut list_4 = scope_1.start_list(false, None);
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            crate::protocol_serde::shape_range::ser_range(entry_5, item_3)?;
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("MetricTimezone");
    if let Some(var_7) = &input.metric_timezone {
        scope_6.string(var_7);
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_anomaly_detector_configuration(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AnomalyDetectorConfiguration, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AnomalyDetectorConfiguration::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ExcludedTimeRanges") /* ExcludedTimeRanges com.amazonaws.cloudwatch#AnomalyDetectorConfiguration$ExcludedTimeRanges */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_anomaly_detector_excluded_time_ranges::de_anomaly_detector_excluded_time_ranges(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_excluded_time_ranges(var_8);
            }
            ,
            s if s.matches("MetricTimezone") /* MetricTimezone com.amazonaws.cloudwatch#AnomalyDetectorConfiguration$MetricTimezone */ =>  {
                let var_9 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_metric_timezone(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
