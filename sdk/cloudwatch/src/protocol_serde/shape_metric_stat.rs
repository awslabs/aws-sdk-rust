// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_metric_stat(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::MetricStat,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Metric");
    if let Some(var_2) = &input.metric {
        crate::protocol_serde::shape_metric::ser_metric(scope_1, var_2)?;
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Period");
    if let Some(var_4) = &input.period {
        scope_3.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Stat");
    if let Some(var_6) = &input.stat {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Unit");
    if let Some(var_8) = &input.unit {
        scope_7.string(var_8.as_str());
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_metric_stat(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::MetricStat, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::MetricStat::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Metric") /* Metric com.amazonaws.cloudwatch#MetricStat$Metric */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_metric::de_metric(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_metric(var_9);
            }
            ,
            s if s.matches("Period") /* Period com.amazonaws.cloudwatch#MetricStat$Period */ =>  {
                let var_10 =
                    Some(
                         {
                            <i32 as ::aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (integer: `com.amazonaws.cloudwatch#Period`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_period(var_10);
            }
            ,
            s if s.matches("Stat") /* Stat com.amazonaws.cloudwatch#MetricStat$Stat */ =>  {
                let var_11 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_stat(var_11);
            }
            ,
            s if s.matches("Unit") /* Unit com.amazonaws.cloudwatch#MetricStat$Unit */ =>  {
                let var_12 =
                    Some(
                        Result::<crate::types::StandardUnit, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::StandardUnit::from(
                                ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_unit(var_12);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::metric_stat_correct_errors(builder).build())
}
