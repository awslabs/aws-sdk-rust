// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a specific dashboard.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DashboardEntry {
    /// <p>The name of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    #[doc(hidden)]
    pub dashboard_arn: std::option::Option<std::string::String>,
    /// <p>The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    #[doc(hidden)]
    pub last_modified: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The size of the dashboard, in bytes.</p>
    #[doc(hidden)]
    pub size: i64,
}
impl DashboardEntry {
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(&self) -> std::option::Option<&str> {
        self.dashboard_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(&self) -> std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn last_modified(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified.as_ref()
    }
    /// <p>The size of the dashboard, in bytes.</p>
    pub fn size(&self) -> i64 {
        self.size
    }
}
impl DashboardEntry {
    /// Creates a new builder-style object to manufacture [`DashboardEntry`](crate::types::DashboardEntry).
    pub fn builder() -> crate::types::builders::DashboardEntryBuilder {
        crate::types::builders::DashboardEntryBuilder::default()
    }
}

/// A builder for [`DashboardEntry`](crate::types::DashboardEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DashboardEntryBuilder {
    pub(crate) dashboard_name: std::option::Option<std::string::String>,
    pub(crate) dashboard_arn: std::option::Option<std::string::String>,
    pub(crate) last_modified: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) size: std::option::Option<i64>,
}
impl DashboardEntryBuilder {
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_name = Some(input.into());
        self
    }
    /// <p>The name of the dashboard.</p>
    pub fn set_dashboard_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dashboard_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn set_dashboard_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dashboard_arn = input;
        self
    }
    /// <p>The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn last_modified(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified = Some(input);
        self
    }
    /// <p>The time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.</p>
    pub fn set_last_modified(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified = input;
        self
    }
    /// <p>The size of the dashboard, in bytes.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the dashboard, in bytes.</p>
    pub fn set_size(mut self, input: std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// Consumes the builder and constructs a [`DashboardEntry`](crate::types::DashboardEntry).
    pub fn build(self) -> crate::types::DashboardEntry {
        crate::types::DashboardEntry {
            dashboard_name: self.dashboard_name,
            dashboard_arn: self.dashboard_arn,
            last_modified: self.last_modified,
            size: self.size.unwrap_or_default(),
        }
    }
}
