// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A message returned by the <code>GetMetricData</code>API, including a code and a description.</p>
/// <p>If a cross-Region <code>GetMetricData</code> operation fails with a code of <code>Forbidden</code> and a value of <code>Authentication too complex to retrieve cross region data</code>, you can correct the problem by running the <code>GetMetricData</code> operation in the same Region where the metric data is.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MessageData {
    /// <p>The error code or status code associated with the message.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>The message text.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl MessageData {
    /// <p>The error code or status code associated with the message.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>The message text.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl MessageData {
    /// Creates a new builder-style object to manufacture [`MessageData`](crate::types::MessageData).
    pub fn builder() -> crate::types::builders::MessageDataBuilder {
        crate::types::builders::MessageDataBuilder::default()
    }
}

/// A builder for [`MessageData`](crate::types::MessageData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageDataBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl MessageDataBuilder {
    /// <p>The error code or status code associated with the message.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>The error code or status code associated with the message.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>The message text.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The message text.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`MessageData`](crate::types::MessageData).
    pub fn build(self) -> crate::types::MessageData {
        crate::types::MessageData {
            code: self.code,
            value: self.value,
        }
    }
}
