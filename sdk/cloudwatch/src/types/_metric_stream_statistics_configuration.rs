// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>By default, a metric stream always sends the <code>MAX</code>, <code>MIN</code>, <code>SUM</code>, and <code>SAMPLECOUNT</code> statistics for each metric that is streamed. This structure contains information for one metric that includes additional statistics in the stream. For more information about statistics, see CloudWatch, listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricStreamStatisticsConfiguration {
    /// <p>An array of metric name and namespace pairs that stream the additional statistics listed in the value of the <code>AdditionalStatistics</code> parameter. There can be as many as 100 pairs in the array.</p>
    /// <p>All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.</p>
    #[doc(hidden)]
    pub include_metrics:
        std::option::Option<std::vec::Vec<crate::types::MetricStreamStatisticsMetric>>,
    /// <p>The list of additional statistics that are to be streamed for the metrics listed in the <code>IncludeMetrics</code> array in this structure. This list can include as many as 20 statistics.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>opentelemetry0.7</code>, the only valid values are <code>p<i>??</i> </code> percentile statistics such as <code>p90</code>, <code>p99</code> and so on.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>json</code>, the valid values include the abbreviations for all of the statistics listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>. For example, this includes <code>tm98, </code> <code>wm90</code>, <code>PR(:300)</code>, and so on.</p>
    #[doc(hidden)]
    pub additional_statistics: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl MetricStreamStatisticsConfiguration {
    /// <p>An array of metric name and namespace pairs that stream the additional statistics listed in the value of the <code>AdditionalStatistics</code> parameter. There can be as many as 100 pairs in the array.</p>
    /// <p>All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.</p>
    pub fn include_metrics(
        &self,
    ) -> std::option::Option<&[crate::types::MetricStreamStatisticsMetric]> {
        self.include_metrics.as_deref()
    }
    /// <p>The list of additional statistics that are to be streamed for the metrics listed in the <code>IncludeMetrics</code> array in this structure. This list can include as many as 20 statistics.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>opentelemetry0.7</code>, the only valid values are <code>p<i>??</i> </code> percentile statistics such as <code>p90</code>, <code>p99</code> and so on.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>json</code>, the valid values include the abbreviations for all of the statistics listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>. For example, this includes <code>tm98, </code> <code>wm90</code>, <code>PR(:300)</code>, and so on.</p>
    pub fn additional_statistics(&self) -> std::option::Option<&[std::string::String]> {
        self.additional_statistics.as_deref()
    }
}
impl MetricStreamStatisticsConfiguration {
    /// Creates a new builder-style object to manufacture [`MetricStreamStatisticsConfiguration`](crate::types::MetricStreamStatisticsConfiguration).
    pub fn builder() -> crate::types::builders::MetricStreamStatisticsConfigurationBuilder {
        crate::types::builders::MetricStreamStatisticsConfigurationBuilder::default()
    }
}

/// A builder for [`MetricStreamStatisticsConfiguration`](crate::types::MetricStreamStatisticsConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricStreamStatisticsConfigurationBuilder {
    pub(crate) include_metrics:
        std::option::Option<std::vec::Vec<crate::types::MetricStreamStatisticsMetric>>,
    pub(crate) additional_statistics: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl MetricStreamStatisticsConfigurationBuilder {
    /// Appends an item to `include_metrics`.
    ///
    /// To override the contents of this collection use [`set_include_metrics`](Self::set_include_metrics).
    ///
    /// <p>An array of metric name and namespace pairs that stream the additional statistics listed in the value of the <code>AdditionalStatistics</code> parameter. There can be as many as 100 pairs in the array.</p>
    /// <p>All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.</p>
    pub fn include_metrics(mut self, input: crate::types::MetricStreamStatisticsMetric) -> Self {
        let mut v = self.include_metrics.unwrap_or_default();
        v.push(input);
        self.include_metrics = Some(v);
        self
    }
    /// <p>An array of metric name and namespace pairs that stream the additional statistics listed in the value of the <code>AdditionalStatistics</code> parameter. There can be as many as 100 pairs in the array.</p>
    /// <p>All metrics that match the combination of metric name and namespace will be streamed with the additional statistics, no matter their dimensions.</p>
    pub fn set_include_metrics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricStreamStatisticsMetric>>,
    ) -> Self {
        self.include_metrics = input;
        self
    }
    /// Appends an item to `additional_statistics`.
    ///
    /// To override the contents of this collection use [`set_additional_statistics`](Self::set_additional_statistics).
    ///
    /// <p>The list of additional statistics that are to be streamed for the metrics listed in the <code>IncludeMetrics</code> array in this structure. This list can include as many as 20 statistics.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>opentelemetry0.7</code>, the only valid values are <code>p<i>??</i> </code> percentile statistics such as <code>p90</code>, <code>p99</code> and so on.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>json</code>, the valid values include the abbreviations for all of the statistics listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>. For example, this includes <code>tm98, </code> <code>wm90</code>, <code>PR(:300)</code>, and so on.</p>
    pub fn additional_statistics(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.additional_statistics.unwrap_or_default();
        v.push(input.into());
        self.additional_statistics = Some(v);
        self
    }
    /// <p>The list of additional statistics that are to be streamed for the metrics listed in the <code>IncludeMetrics</code> array in this structure. This list can include as many as 20 statistics.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>opentelemetry0.7</code>, the only valid values are <code>p<i>??</i> </code> percentile statistics such as <code>p90</code>, <code>p99</code> and so on.</p>
    /// <p>If the <code>OutputFormat</code> for the stream is <code>json</code>, the valid values include the abbreviations for all of the statistics listed in <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html.html"> CloudWatch statistics definitions</a>. For example, this includes <code>tm98, </code> <code>wm90</code>, <code>PR(:300)</code>, and so on.</p>
    pub fn set_additional_statistics(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.additional_statistics = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricStreamStatisticsConfiguration`](crate::types::MetricStreamStatisticsConfiguration).
    pub fn build(self) -> crate::types::MetricStreamStatisticsConfiguration {
        crate::types::MetricStreamStatisticsConfiguration {
            include_metrics: self.include_metrics,
            additional_statistics: self.additional_statistics,
        }
    }
}
