// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>One of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule.</p>
/// <p>If the rule contains a single key, then each unique contributor is each unique value for this key.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_GetInsightRuleReport.html">GetInsightRuleReport</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InsightRuleContributor {
    /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
    pub keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An approximation of the aggregate value that comes from this contributor.</p>
    pub approximate_aggregate_value: ::std::option::Option<f64>,
    /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
    pub datapoints: ::std::option::Option<::std::vec::Vec<crate::types::InsightRuleContributorDatapoint>>,
}
impl InsightRuleContributor {
    /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.keys.is_none()`.
    pub fn keys(&self) -> &[::std::string::String] {
        self.keys.as_deref().unwrap_or_default()
    }
    /// <p>An approximation of the aggregate value that comes from this contributor.</p>
    pub fn approximate_aggregate_value(&self) -> ::std::option::Option<f64> {
        self.approximate_aggregate_value
    }
    /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.datapoints.is_none()`.
    pub fn datapoints(&self) -> &[crate::types::InsightRuleContributorDatapoint] {
        self.datapoints.as_deref().unwrap_or_default()
    }
}
impl InsightRuleContributor {
    /// Creates a new builder-style object to manufacture [`InsightRuleContributor`](crate::types::InsightRuleContributor).
    pub fn builder() -> crate::types::builders::InsightRuleContributorBuilder {
        crate::types::builders::InsightRuleContributorBuilder::default()
    }
}

/// A builder for [`InsightRuleContributor`](crate::types::InsightRuleContributor).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InsightRuleContributorBuilder {
    pub(crate) keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) approximate_aggregate_value: ::std::option::Option<f64>,
    pub(crate) datapoints: ::std::option::Option<::std::vec::Vec<crate::types::InsightRuleContributorDatapoint>>,
}
impl InsightRuleContributorBuilder {
    /// Appends an item to `keys`.
    ///
    /// To override the contents of this collection use [`set_keys`](Self::set_keys).
    ///
    /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
    pub fn keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.keys.unwrap_or_default();
        v.push(input.into());
        self.keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
    pub fn set_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.keys = input;
        self
    }
    /// <p>One of the log entry field keywords that is used to define contributors for this rule.</p>
    pub fn get_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.keys
    }
    /// <p>An approximation of the aggregate value that comes from this contributor.</p>
    /// This field is required.
    pub fn approximate_aggregate_value(mut self, input: f64) -> Self {
        self.approximate_aggregate_value = ::std::option::Option::Some(input);
        self
    }
    /// <p>An approximation of the aggregate value that comes from this contributor.</p>
    pub fn set_approximate_aggregate_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.approximate_aggregate_value = input;
        self
    }
    /// <p>An approximation of the aggregate value that comes from this contributor.</p>
    pub fn get_approximate_aggregate_value(&self) -> &::std::option::Option<f64> {
        &self.approximate_aggregate_value
    }
    /// Appends an item to `datapoints`.
    ///
    /// To override the contents of this collection use [`set_datapoints`](Self::set_datapoints).
    ///
    /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
    pub fn datapoints(mut self, input: crate::types::InsightRuleContributorDatapoint) -> Self {
        let mut v = self.datapoints.unwrap_or_default();
        v.push(input);
        self.datapoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
    pub fn set_datapoints(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightRuleContributorDatapoint>>) -> Self {
        self.datapoints = input;
        self
    }
    /// <p>An array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.</p>
    pub fn get_datapoints(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightRuleContributorDatapoint>> {
        &self.datapoints
    }
    /// Consumes the builder and constructs a [`InsightRuleContributor`](crate::types::InsightRuleContributor).
    pub fn build(self) -> crate::types::InsightRuleContributor {
        crate::types::InsightRuleContributor {
            keys: self.keys,
            approximate_aggregate_value: self.approximate_aggregate_value,
            datapoints: self.datapoints,
        }
    }
}
