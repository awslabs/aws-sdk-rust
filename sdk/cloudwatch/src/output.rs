// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopMetricStreamsOutput {}
impl std::fmt::Debug for StopMetricStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopMetricStreamsOutput");
        formatter.finish()
    }
}
/// See [`StopMetricStreamsOutput`](crate::output::StopMetricStreamsOutput)
pub mod stop_metric_streams_output {
    /// A builder for [`StopMetricStreamsOutput`](crate::output::StopMetricStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StopMetricStreamsOutput`](crate::output::StopMetricStreamsOutput)
        pub fn build(self) -> crate::output::StopMetricStreamsOutput {
            crate::output::StopMetricStreamsOutput {}
        }
    }
}
impl StopMetricStreamsOutput {
    /// Creates a new builder-style object to manufacture [`StopMetricStreamsOutput`](crate::output::StopMetricStreamsOutput)
    pub fn builder() -> crate::output::stop_metric_streams_output::Builder {
        crate::output::stop_metric_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartMetricStreamsOutput {}
impl std::fmt::Debug for StartMetricStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartMetricStreamsOutput");
        formatter.finish()
    }
}
/// See [`StartMetricStreamsOutput`](crate::output::StartMetricStreamsOutput)
pub mod start_metric_streams_output {
    /// A builder for [`StartMetricStreamsOutput`](crate::output::StartMetricStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartMetricStreamsOutput`](crate::output::StartMetricStreamsOutput)
        pub fn build(self) -> crate::output::StartMetricStreamsOutput {
            crate::output::StartMetricStreamsOutput {}
        }
    }
}
impl StartMetricStreamsOutput {
    /// Creates a new builder-style object to manufacture [`StartMetricStreamsOutput`](crate::output::StartMetricStreamsOutput)
    pub fn builder() -> crate::output::start_metric_streams_output::Builder {
        crate::output::start_metric_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetAlarmStateOutput {}
impl std::fmt::Debug for SetAlarmStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetAlarmStateOutput");
        formatter.finish()
    }
}
/// See [`SetAlarmStateOutput`](crate::output::SetAlarmStateOutput)
pub mod set_alarm_state_output {
    /// A builder for [`SetAlarmStateOutput`](crate::output::SetAlarmStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetAlarmStateOutput`](crate::output::SetAlarmStateOutput)
        pub fn build(self) -> crate::output::SetAlarmStateOutput {
            crate::output::SetAlarmStateOutput {}
        }
    }
}
impl SetAlarmStateOutput {
    /// Creates a new builder-style object to manufacture [`SetAlarmStateOutput`](crate::output::SetAlarmStateOutput)
    pub fn builder() -> crate::output::set_alarm_state_output::Builder {
        crate::output::set_alarm_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMetricStreamOutput {
    /// <p>The ARN of the metric stream.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl PutMetricStreamOutput {
    /// <p>The ARN of the metric stream.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for PutMetricStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetricStreamOutput");
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`PutMetricStreamOutput`](crate::output::PutMetricStreamOutput)
pub mod put_metric_stream_output {
    /// A builder for [`PutMetricStreamOutput`](crate::output::PutMetricStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the metric stream.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the metric stream.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`PutMetricStreamOutput`](crate::output::PutMetricStreamOutput)
        pub fn build(self) -> crate::output::PutMetricStreamOutput {
            crate::output::PutMetricStreamOutput { arn: self.arn }
        }
    }
}
impl PutMetricStreamOutput {
    /// Creates a new builder-style object to manufacture [`PutMetricStreamOutput`](crate::output::PutMetricStreamOutput)
    pub fn builder() -> crate::output::put_metric_stream_output::Builder {
        crate::output::put_metric_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMetricDataOutput {}
impl std::fmt::Debug for PutMetricDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetricDataOutput");
        formatter.finish()
    }
}
/// See [`PutMetricDataOutput`](crate::output::PutMetricDataOutput)
pub mod put_metric_data_output {
    /// A builder for [`PutMetricDataOutput`](crate::output::PutMetricDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutMetricDataOutput`](crate::output::PutMetricDataOutput)
        pub fn build(self) -> crate::output::PutMetricDataOutput {
            crate::output::PutMetricDataOutput {}
        }
    }
}
impl PutMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`PutMetricDataOutput`](crate::output::PutMetricDataOutput)
    pub fn builder() -> crate::output::put_metric_data_output::Builder {
        crate::output::put_metric_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMetricAlarmOutput {}
impl std::fmt::Debug for PutMetricAlarmOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetricAlarmOutput");
        formatter.finish()
    }
}
/// See [`PutMetricAlarmOutput`](crate::output::PutMetricAlarmOutput)
pub mod put_metric_alarm_output {
    /// A builder for [`PutMetricAlarmOutput`](crate::output::PutMetricAlarmOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutMetricAlarmOutput`](crate::output::PutMetricAlarmOutput)
        pub fn build(self) -> crate::output::PutMetricAlarmOutput {
            crate::output::PutMetricAlarmOutput {}
        }
    }
}
impl PutMetricAlarmOutput {
    /// Creates a new builder-style object to manufacture [`PutMetricAlarmOutput`](crate::output::PutMetricAlarmOutput)
    pub fn builder() -> crate::output::put_metric_alarm_output::Builder {
        crate::output::put_metric_alarm_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutInsightRuleOutput {}
impl std::fmt::Debug for PutInsightRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutInsightRuleOutput");
        formatter.finish()
    }
}
/// See [`PutInsightRuleOutput`](crate::output::PutInsightRuleOutput)
pub mod put_insight_rule_output {
    /// A builder for [`PutInsightRuleOutput`](crate::output::PutInsightRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutInsightRuleOutput`](crate::output::PutInsightRuleOutput)
        pub fn build(self) -> crate::output::PutInsightRuleOutput {
            crate::output::PutInsightRuleOutput {}
        }
    }
}
impl PutInsightRuleOutput {
    /// Creates a new builder-style object to manufacture [`PutInsightRuleOutput`](crate::output::PutInsightRuleOutput)
    pub fn builder() -> crate::output::put_insight_rule_output::Builder {
        crate::output::put_insight_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutDashboardOutput {
    /// <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
    /// <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
    /// created or modified, but some elements of the dashboard
    /// might not render.</p>
    /// <p>If this result includes error messages, the input was not valid and the operation failed.</p>
    pub dashboard_validation_messages:
        std::option::Option<std::vec::Vec<crate::model::DashboardValidationMessage>>,
}
impl PutDashboardOutput {
    /// <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
    /// <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
    /// created or modified, but some elements of the dashboard
    /// might not render.</p>
    /// <p>If this result includes error messages, the input was not valid and the operation failed.</p>
    pub fn dashboard_validation_messages(
        &self,
    ) -> std::option::Option<&[crate::model::DashboardValidationMessage]> {
        self.dashboard_validation_messages.as_deref()
    }
}
impl std::fmt::Debug for PutDashboardOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutDashboardOutput");
        formatter.field(
            "dashboard_validation_messages",
            &self.dashboard_validation_messages,
        );
        formatter.finish()
    }
}
/// See [`PutDashboardOutput`](crate::output::PutDashboardOutput)
pub mod put_dashboard_output {
    /// A builder for [`PutDashboardOutput`](crate::output::PutDashboardOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dashboard_validation_messages:
            std::option::Option<std::vec::Vec<crate::model::DashboardValidationMessage>>,
    }
    impl Builder {
        /// Appends an item to `dashboard_validation_messages`.
        ///
        /// To override the contents of this collection use [`set_dashboard_validation_messages`](Self::set_dashboard_validation_messages).
        ///
        /// <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
        /// <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
        /// created or modified, but some elements of the dashboard
        /// might not render.</p>
        /// <p>If this result includes error messages, the input was not valid and the operation failed.</p>
        pub fn dashboard_validation_messages(
            mut self,
            input: impl Into<crate::model::DashboardValidationMessage>,
        ) -> Self {
            let mut v = self.dashboard_validation_messages.unwrap_or_default();
            v.push(input.into());
            self.dashboard_validation_messages = Some(v);
            self
        }
        /// <p>If the input for <code>PutDashboard</code> was correct and the dashboard was successfully created or modified, this result is empty.</p>
        /// <p>If this result includes only warning messages, then the input was valid enough for the dashboard to be
        /// created or modified, but some elements of the dashboard
        /// might not render.</p>
        /// <p>If this result includes error messages, the input was not valid and the operation failed.</p>
        pub fn set_dashboard_validation_messages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DashboardValidationMessage>>,
        ) -> Self {
            self.dashboard_validation_messages = input;
            self
        }
        /// Consumes the builder and constructs a [`PutDashboardOutput`](crate::output::PutDashboardOutput)
        pub fn build(self) -> crate::output::PutDashboardOutput {
            crate::output::PutDashboardOutput {
                dashboard_validation_messages: self.dashboard_validation_messages,
            }
        }
    }
}
impl PutDashboardOutput {
    /// Creates a new builder-style object to manufacture [`PutDashboardOutput`](crate::output::PutDashboardOutput)
    pub fn builder() -> crate::output::put_dashboard_output::Builder {
        crate::output::put_dashboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutCompositeAlarmOutput {}
impl std::fmt::Debug for PutCompositeAlarmOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutCompositeAlarmOutput");
        formatter.finish()
    }
}
/// See [`PutCompositeAlarmOutput`](crate::output::PutCompositeAlarmOutput)
pub mod put_composite_alarm_output {
    /// A builder for [`PutCompositeAlarmOutput`](crate::output::PutCompositeAlarmOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutCompositeAlarmOutput`](crate::output::PutCompositeAlarmOutput)
        pub fn build(self) -> crate::output::PutCompositeAlarmOutput {
            crate::output::PutCompositeAlarmOutput {}
        }
    }
}
impl PutCompositeAlarmOutput {
    /// Creates a new builder-style object to manufacture [`PutCompositeAlarmOutput`](crate::output::PutCompositeAlarmOutput)
    pub fn builder() -> crate::output::put_composite_alarm_output::Builder {
        crate::output::put_composite_alarm_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAnomalyDetectorOutput {}
impl std::fmt::Debug for PutAnomalyDetectorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAnomalyDetectorOutput");
        formatter.finish()
    }
}
/// See [`PutAnomalyDetectorOutput`](crate::output::PutAnomalyDetectorOutput)
pub mod put_anomaly_detector_output {
    /// A builder for [`PutAnomalyDetectorOutput`](crate::output::PutAnomalyDetectorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutAnomalyDetectorOutput`](crate::output::PutAnomalyDetectorOutput)
        pub fn build(self) -> crate::output::PutAnomalyDetectorOutput {
            crate::output::PutAnomalyDetectorOutput {}
        }
    }
}
impl PutAnomalyDetectorOutput {
    /// Creates a new builder-style object to manufacture [`PutAnomalyDetectorOutput`](crate::output::PutAnomalyDetectorOutput)
    pub fn builder() -> crate::output::put_anomaly_detector_output::Builder {
        crate::output::put_anomaly_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tag keys and values associated with the resource you specified.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>The list of tag keys and values associated with the resource you specified.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tag keys and values associated with the resource you specified.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>The list of tag keys and values associated with the resource you specified.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMetricStreamsOutput {
    /// <p>The token that marks the start of the next batch of returned results. You can use this
    /// token in a subsequent operation to get the next batch of results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The array of metric stream information.</p>
    pub entries: std::option::Option<std::vec::Vec<crate::model::MetricStreamEntry>>,
}
impl ListMetricStreamsOutput {
    /// <p>The token that marks the start of the next batch of returned results. You can use this
    /// token in a subsequent operation to get the next batch of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The array of metric stream information.</p>
    pub fn entries(&self) -> std::option::Option<&[crate::model::MetricStreamEntry]> {
        self.entries.as_deref()
    }
}
impl std::fmt::Debug for ListMetricStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMetricStreamsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("entries", &self.entries);
        formatter.finish()
    }
}
/// See [`ListMetricStreamsOutput`](crate::output::ListMetricStreamsOutput)
pub mod list_metric_streams_output {
    /// A builder for [`ListMetricStreamsOutput`](crate::output::ListMetricStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) entries: std::option::Option<std::vec::Vec<crate::model::MetricStreamEntry>>,
    }
    impl Builder {
        /// <p>The token that marks the start of the next batch of returned results. You can use this
        /// token in a subsequent operation to get the next batch of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that marks the start of the next batch of returned results. You can use this
        /// token in a subsequent operation to get the next batch of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `entries`.
        ///
        /// To override the contents of this collection use [`set_entries`](Self::set_entries).
        ///
        /// <p>The array of metric stream information.</p>
        pub fn entries(mut self, input: impl Into<crate::model::MetricStreamEntry>) -> Self {
            let mut v = self.entries.unwrap_or_default();
            v.push(input.into());
            self.entries = Some(v);
            self
        }
        /// <p>The array of metric stream information.</p>
        pub fn set_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricStreamEntry>>,
        ) -> Self {
            self.entries = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMetricStreamsOutput`](crate::output::ListMetricStreamsOutput)
        pub fn build(self) -> crate::output::ListMetricStreamsOutput {
            crate::output::ListMetricStreamsOutput {
                next_token: self.next_token,
                entries: self.entries,
            }
        }
    }
}
impl ListMetricStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListMetricStreamsOutput`](crate::output::ListMetricStreamsOutput)
    pub fn builder() -> crate::output::list_metric_streams_output::Builder {
        crate::output::list_metric_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMetricsOutput {
    /// <p>The metrics that match your request. </p>
    pub metrics: std::option::Option<std::vec::Vec<crate::model::Metric>>,
    /// <p>The token that marks the start of the next batch of returned results. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListMetricsOutput {
    /// <p>The metrics that match your request. </p>
    pub fn metrics(&self) -> std::option::Option<&[crate::model::Metric]> {
        self.metrics.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListMetricsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMetricsOutput");
        formatter.field("metrics", &self.metrics);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMetricsOutput`](crate::output::ListMetricsOutput)
pub mod list_metrics_output {
    /// A builder for [`ListMetricsOutput`](crate::output::ListMetricsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metrics: std::option::Option<std::vec::Vec<crate::model::Metric>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `metrics`.
        ///
        /// To override the contents of this collection use [`set_metrics`](Self::set_metrics).
        ///
        /// <p>The metrics that match your request. </p>
        pub fn metrics(mut self, input: impl Into<crate::model::Metric>) -> Self {
            let mut v = self.metrics.unwrap_or_default();
            v.push(input.into());
            self.metrics = Some(v);
            self
        }
        /// <p>The metrics that match your request. </p>
        pub fn set_metrics(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Metric>>,
        ) -> Self {
            self.metrics = input;
            self
        }
        /// <p>The token that marks the start of the next batch of returned results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that marks the start of the next batch of returned results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMetricsOutput`](crate::output::ListMetricsOutput)
        pub fn build(self) -> crate::output::ListMetricsOutput {
            crate::output::ListMetricsOutput {
                metrics: self.metrics,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMetricsOutput {
    /// Creates a new builder-style object to manufacture [`ListMetricsOutput`](crate::output::ListMetricsOutput)
    pub fn builder() -> crate::output::list_metrics_output::Builder {
        crate::output::list_metrics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDashboardsOutput {
    /// <p>The list of matching dashboards.</p>
    pub dashboard_entries: std::option::Option<std::vec::Vec<crate::model::DashboardEntry>>,
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDashboardsOutput {
    /// <p>The list of matching dashboards.</p>
    pub fn dashboard_entries(&self) -> std::option::Option<&[crate::model::DashboardEntry]> {
        self.dashboard_entries.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListDashboardsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDashboardsOutput");
        formatter.field("dashboard_entries", &self.dashboard_entries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDashboardsOutput`](crate::output::ListDashboardsOutput)
pub mod list_dashboards_output {
    /// A builder for [`ListDashboardsOutput`](crate::output::ListDashboardsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dashboard_entries:
            std::option::Option<std::vec::Vec<crate::model::DashboardEntry>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `dashboard_entries`.
        ///
        /// To override the contents of this collection use [`set_dashboard_entries`](Self::set_dashboard_entries).
        ///
        /// <p>The list of matching dashboards.</p>
        pub fn dashboard_entries(mut self, input: impl Into<crate::model::DashboardEntry>) -> Self {
            let mut v = self.dashboard_entries.unwrap_or_default();
            v.push(input.into());
            self.dashboard_entries = Some(v);
            self
        }
        /// <p>The list of matching dashboards.</p>
        pub fn set_dashboard_entries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DashboardEntry>>,
        ) -> Self {
            self.dashboard_entries = input;
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDashboardsOutput`](crate::output::ListDashboardsOutput)
        pub fn build(self) -> crate::output::ListDashboardsOutput {
            crate::output::ListDashboardsOutput {
                dashboard_entries: self.dashboard_entries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDashboardsOutput {
    /// Creates a new builder-style object to manufacture [`ListDashboardsOutput`](crate::output::ListDashboardsOutput)
    pub fn builder() -> crate::output::list_dashboards_output::Builder {
        crate::output::list_dashboards_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricWidgetImageOutput {
    /// <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
    pub metric_widget_image: std::option::Option<aws_smithy_types::Blob>,
}
impl GetMetricWidgetImageOutput {
    /// <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
    pub fn metric_widget_image(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.metric_widget_image.as_ref()
    }
}
impl std::fmt::Debug for GetMetricWidgetImageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricWidgetImageOutput");
        formatter.field("metric_widget_image", &self.metric_widget_image);
        formatter.finish()
    }
}
/// See [`GetMetricWidgetImageOutput`](crate::output::GetMetricWidgetImageOutput)
pub mod get_metric_widget_image_output {
    /// A builder for [`GetMetricWidgetImageOutput`](crate::output::GetMetricWidgetImageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metric_widget_image: std::option::Option<aws_smithy_types::Blob>,
    }
    impl Builder {
        /// <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
        pub fn metric_widget_image(mut self, input: aws_smithy_types::Blob) -> Self {
            self.metric_widget_image = Some(input);
            self
        }
        /// <p>The image of the graph, in the output format specified. The output is base64-encoded.</p>
        pub fn set_metric_widget_image(
            mut self,
            input: std::option::Option<aws_smithy_types::Blob>,
        ) -> Self {
            self.metric_widget_image = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricWidgetImageOutput`](crate::output::GetMetricWidgetImageOutput)
        pub fn build(self) -> crate::output::GetMetricWidgetImageOutput {
            crate::output::GetMetricWidgetImageOutput {
                metric_widget_image: self.metric_widget_image,
            }
        }
    }
}
impl GetMetricWidgetImageOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricWidgetImageOutput`](crate::output::GetMetricWidgetImageOutput)
    pub fn builder() -> crate::output::get_metric_widget_image_output::Builder {
        crate::output::get_metric_widget_image_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricStreamOutput {
    /// <p>The ARN of the metric stream.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the metric stream.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>If this array of metric namespaces is present, then these
    /// namespaces are the only
    /// metric namespaces that are streamed by this metric stream.</p>
    pub include_filters: std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
    /// <p>If this array of metric namespaces is present, then these namespaces are the only
    /// metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
    /// the account are streamed by this metric stream.</p>
    pub exclude_filters: std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
    /// <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
    /// this metric stream.</p>
    pub firehose_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role that is used by this metric stream.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The state of the metric stream. The possible values are <code>running</code>
    /// and <code>stopped</code>.</p>
    pub state: std::option::Option<std::string::String>,
    /// <p>The date that the metric stream was created.</p>
    pub creation_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The date of the most recent update to the metric stream's configuration.</p>
    pub last_update_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p></p>
    pub output_format: std::option::Option<crate::model::MetricStreamOutputFormat>,
}
impl GetMetricStreamOutput {
    /// <p>The ARN of the metric stream.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the metric stream.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If this array of metric namespaces is present, then these
    /// namespaces are the only
    /// metric namespaces that are streamed by this metric stream.</p>
    pub fn include_filters(&self) -> std::option::Option<&[crate::model::MetricStreamFilter]> {
        self.include_filters.as_deref()
    }
    /// <p>If this array of metric namespaces is present, then these namespaces are the only
    /// metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
    /// the account are streamed by this metric stream.</p>
    pub fn exclude_filters(&self) -> std::option::Option<&[crate::model::MetricStreamFilter]> {
        self.exclude_filters.as_deref()
    }
    /// <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
    /// this metric stream.</p>
    pub fn firehose_arn(&self) -> std::option::Option<&str> {
        self.firehose_arn.as_deref()
    }
    /// <p>The ARN of the IAM role that is used by this metric stream.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The state of the metric stream. The possible values are <code>running</code>
    /// and <code>stopped</code>.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The date that the metric stream was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::Instant> {
        self.creation_date.as_ref()
    }
    /// <p>The date of the most recent update to the metric stream's configuration.</p>
    pub fn last_update_date(&self) -> std::option::Option<&aws_smithy_types::Instant> {
        self.last_update_date.as_ref()
    }
    /// <p></p>
    pub fn output_format(&self) -> std::option::Option<&crate::model::MetricStreamOutputFormat> {
        self.output_format.as_ref()
    }
}
impl std::fmt::Debug for GetMetricStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricStreamOutput");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("include_filters", &self.include_filters);
        formatter.field("exclude_filters", &self.exclude_filters);
        formatter.field("firehose_arn", &self.firehose_arn);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("state", &self.state);
        formatter.field("creation_date", &self.creation_date);
        formatter.field("last_update_date", &self.last_update_date);
        formatter.field("output_format", &self.output_format);
        formatter.finish()
    }
}
/// See [`GetMetricStreamOutput`](crate::output::GetMetricStreamOutput)
pub mod get_metric_stream_output {
    /// A builder for [`GetMetricStreamOutput`](crate::output::GetMetricStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) include_filters:
            std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
        pub(crate) exclude_filters:
            std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
        pub(crate) firehose_arn: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<std::string::String>,
        pub(crate) creation_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) last_update_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) output_format: std::option::Option<crate::model::MetricStreamOutputFormat>,
    }
    impl Builder {
        /// <p>The ARN of the metric stream.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The ARN of the metric stream.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The name of the metric stream.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the metric stream.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// Appends an item to `include_filters`.
        ///
        /// To override the contents of this collection use [`set_include_filters`](Self::set_include_filters).
        ///
        /// <p>If this array of metric namespaces is present, then these
        /// namespaces are the only
        /// metric namespaces that are streamed by this metric stream.</p>
        pub fn include_filters(
            mut self,
            input: impl Into<crate::model::MetricStreamFilter>,
        ) -> Self {
            let mut v = self.include_filters.unwrap_or_default();
            v.push(input.into());
            self.include_filters = Some(v);
            self
        }
        /// <p>If this array of metric namespaces is present, then these
        /// namespaces are the only
        /// metric namespaces that are streamed by this metric stream.</p>
        pub fn set_include_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
        ) -> Self {
            self.include_filters = input;
            self
        }
        /// Appends an item to `exclude_filters`.
        ///
        /// To override the contents of this collection use [`set_exclude_filters`](Self::set_exclude_filters).
        ///
        /// <p>If this array of metric namespaces is present, then these namespaces are the only
        /// metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
        /// the account are streamed by this metric stream.</p>
        pub fn exclude_filters(
            mut self,
            input: impl Into<crate::model::MetricStreamFilter>,
        ) -> Self {
            let mut v = self.exclude_filters.unwrap_or_default();
            v.push(input.into());
            self.exclude_filters = Some(v);
            self
        }
        /// <p>If this array of metric namespaces is present, then these namespaces are the only
        /// metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in
        /// the account are streamed by this metric stream.</p>
        pub fn set_exclude_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricStreamFilter>>,
        ) -> Self {
            self.exclude_filters = input;
            self
        }
        /// <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
        /// this metric stream.</p>
        pub fn firehose_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.firehose_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Amazon Kinesis Firehose delivery stream that is used by
        /// this metric stream.</p>
        pub fn set_firehose_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.firehose_arn = input;
            self
        }
        /// <p>The ARN of the IAM role that is used by this metric stream.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the IAM role that is used by this metric stream.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The state of the metric stream. The possible values are <code>running</code>
        /// and <code>stopped</code>.</p>
        pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
            self.state = Some(input.into());
            self
        }
        /// <p>The state of the metric stream. The possible values are <code>running</code>
        /// and <code>stopped</code>.</p>
        pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state = input;
            self
        }
        /// <p>The date that the metric stream was created.</p>
        pub fn creation_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.creation_date = Some(input);
            self
        }
        /// <p>The date that the metric stream was created.</p>
        pub fn set_creation_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.creation_date = input;
            self
        }
        /// <p>The date of the most recent update to the metric stream's configuration.</p>
        pub fn last_update_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.last_update_date = Some(input);
            self
        }
        /// <p>The date of the most recent update to the metric stream's configuration.</p>
        pub fn set_last_update_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.last_update_date = input;
            self
        }
        /// <p></p>
        pub fn output_format(mut self, input: crate::model::MetricStreamOutputFormat) -> Self {
            self.output_format = Some(input);
            self
        }
        /// <p></p>
        pub fn set_output_format(
            mut self,
            input: std::option::Option<crate::model::MetricStreamOutputFormat>,
        ) -> Self {
            self.output_format = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricStreamOutput`](crate::output::GetMetricStreamOutput)
        pub fn build(self) -> crate::output::GetMetricStreamOutput {
            crate::output::GetMetricStreamOutput {
                arn: self.arn,
                name: self.name,
                include_filters: self.include_filters,
                exclude_filters: self.exclude_filters,
                firehose_arn: self.firehose_arn,
                role_arn: self.role_arn,
                state: self.state,
                creation_date: self.creation_date,
                last_update_date: self.last_update_date,
                output_format: self.output_format,
            }
        }
    }
}
impl GetMetricStreamOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricStreamOutput`](crate::output::GetMetricStreamOutput)
    pub fn builder() -> crate::output::get_metric_stream_output::Builder {
        crate::output::get_metric_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricStatisticsOutput {
    /// <p>A label for the specified metric.</p>
    pub label: std::option::Option<std::string::String>,
    /// <p>The data points for the specified metric.</p>
    pub datapoints: std::option::Option<std::vec::Vec<crate::model::Datapoint>>,
}
impl GetMetricStatisticsOutput {
    /// <p>A label for the specified metric.</p>
    pub fn label(&self) -> std::option::Option<&str> {
        self.label.as_deref()
    }
    /// <p>The data points for the specified metric.</p>
    pub fn datapoints(&self) -> std::option::Option<&[crate::model::Datapoint]> {
        self.datapoints.as_deref()
    }
}
impl std::fmt::Debug for GetMetricStatisticsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricStatisticsOutput");
        formatter.field("label", &self.label);
        formatter.field("datapoints", &self.datapoints);
        formatter.finish()
    }
}
/// See [`GetMetricStatisticsOutput`](crate::output::GetMetricStatisticsOutput)
pub mod get_metric_statistics_output {
    /// A builder for [`GetMetricStatisticsOutput`](crate::output::GetMetricStatisticsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) label: std::option::Option<std::string::String>,
        pub(crate) datapoints: std::option::Option<std::vec::Vec<crate::model::Datapoint>>,
    }
    impl Builder {
        /// <p>A label for the specified metric.</p>
        pub fn label(mut self, input: impl Into<std::string::String>) -> Self {
            self.label = Some(input.into());
            self
        }
        /// <p>A label for the specified metric.</p>
        pub fn set_label(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.label = input;
            self
        }
        /// Appends an item to `datapoints`.
        ///
        /// To override the contents of this collection use [`set_datapoints`](Self::set_datapoints).
        ///
        /// <p>The data points for the specified metric.</p>
        pub fn datapoints(mut self, input: impl Into<crate::model::Datapoint>) -> Self {
            let mut v = self.datapoints.unwrap_or_default();
            v.push(input.into());
            self.datapoints = Some(v);
            self
        }
        /// <p>The data points for the specified metric.</p>
        pub fn set_datapoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Datapoint>>,
        ) -> Self {
            self.datapoints = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricStatisticsOutput`](crate::output::GetMetricStatisticsOutput)
        pub fn build(self) -> crate::output::GetMetricStatisticsOutput {
            crate::output::GetMetricStatisticsOutput {
                label: self.label,
                datapoints: self.datapoints,
            }
        }
    }
}
impl GetMetricStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricStatisticsOutput`](crate::output::GetMetricStatisticsOutput)
    pub fn builder() -> crate::output::get_metric_statistics_output::Builder {
        crate::output::get_metric_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMetricDataOutput {
    /// <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
    pub metric_data_results: std::option::Option<std::vec::Vec<crate::model::MetricDataResult>>,
    /// <p>A token that marks the next batch of returned results.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
    /// An example of a message that
    /// might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
    /// operation as possible is still executed.</p>
    /// <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
    /// about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
    pub messages: std::option::Option<std::vec::Vec<crate::model::MessageData>>,
}
impl GetMetricDataOutput {
    /// <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
    pub fn metric_data_results(&self) -> std::option::Option<&[crate::model::MetricDataResult]> {
        self.metric_data_results.as_deref()
    }
    /// <p>A token that marks the next batch of returned results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
    /// An example of a message that
    /// might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
    /// operation as possible is still executed.</p>
    /// <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
    /// about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
    pub fn messages(&self) -> std::option::Option<&[crate::model::MessageData]> {
        self.messages.as_deref()
    }
}
impl std::fmt::Debug for GetMetricDataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMetricDataOutput");
        formatter.field("metric_data_results", &self.metric_data_results);
        formatter.field("next_token", &self.next_token);
        formatter.field("messages", &self.messages);
        formatter.finish()
    }
}
/// See [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
pub mod get_metric_data_output {
    /// A builder for [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metric_data_results:
            std::option::Option<std::vec::Vec<crate::model::MetricDataResult>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) messages: std::option::Option<std::vec::Vec<crate::model::MessageData>>,
    }
    impl Builder {
        /// Appends an item to `metric_data_results`.
        ///
        /// To override the contents of this collection use [`set_metric_data_results`](Self::set_metric_data_results).
        ///
        /// <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
        pub fn metric_data_results(
            mut self,
            input: impl Into<crate::model::MetricDataResult>,
        ) -> Self {
            let mut v = self.metric_data_results.unwrap_or_default();
            v.push(input.into());
            self.metric_data_results = Some(v);
            self
        }
        /// <p>The metrics that are returned, including the metric name, namespace, and dimensions.</p>
        pub fn set_metric_data_results(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricDataResult>>,
        ) -> Self {
            self.metric_data_results = input;
            self
        }
        /// <p>A token that marks the next batch of returned results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that marks the next batch of returned results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `messages`.
        ///
        /// To override the contents of this collection use [`set_messages`](Self::set_messages).
        ///
        /// <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
        /// An example of a message that
        /// might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
        /// operation as possible is still executed.</p>
        /// <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
        /// about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
        pub fn messages(mut self, input: impl Into<crate::model::MessageData>) -> Self {
            let mut v = self.messages.unwrap_or_default();
            v.push(input.into());
            self.messages = Some(v);
            self
        }
        /// <p>Contains a message about this <code>GetMetricData</code> operation, if the operation results in such a message.
        /// An example of a message that
        /// might be returned is <code>Maximum number of allowed metrics exceeded</code>. If there is a message, as much of the
        /// operation as possible is still executed.</p>
        /// <p>A message appears here only if it is related to the global <code>GetMetricData</code> operation. Any message
        /// about a specific metric returned by the operation appears in the <code>MetricDataResult</code> object returned for that metric.</p>
        pub fn set_messages(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MessageData>>,
        ) -> Self {
            self.messages = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
        pub fn build(self) -> crate::output::GetMetricDataOutput {
            crate::output::GetMetricDataOutput {
                metric_data_results: self.metric_data_results,
                next_token: self.next_token,
                messages: self.messages,
            }
        }
    }
}
impl GetMetricDataOutput {
    /// Creates a new builder-style object to manufacture [`GetMetricDataOutput`](crate::output::GetMetricDataOutput)
    pub fn builder() -> crate::output::get_metric_data_output::Builder {
        crate::output::get_metric_data_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetInsightRuleReportOutput {
    /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
    /// If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
    pub key_labels: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
    pub aggregation_statistic: std::option::Option<std::string::String>,
    /// <p>The sum of the values from all individual contributors that match the rule.</p>
    pub aggregate_value: std::option::Option<f64>,
    /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
    pub approximate_unique_count: std::option::Option<i64>,
    /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
    /// for the keys counts as a unique contributor.</p>
    pub contributors: std::option::Option<std::vec::Vec<crate::model::InsightRuleContributor>>,
    /// <p>A time series of metric data points that matches the time period in the rule request.</p>
    pub metric_datapoints:
        std::option::Option<std::vec::Vec<crate::model::InsightRuleMetricDatapoint>>,
}
impl GetInsightRuleReportOutput {
    /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
    /// If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
    pub fn key_labels(&self) -> std::option::Option<&[std::string::String]> {
        self.key_labels.as_deref()
    }
    /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
    pub fn aggregation_statistic(&self) -> std::option::Option<&str> {
        self.aggregation_statistic.as_deref()
    }
    /// <p>The sum of the values from all individual contributors that match the rule.</p>
    pub fn aggregate_value(&self) -> std::option::Option<f64> {
        self.aggregate_value
    }
    /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
    pub fn approximate_unique_count(&self) -> std::option::Option<i64> {
        self.approximate_unique_count
    }
    /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
    /// for the keys counts as a unique contributor.</p>
    pub fn contributors(&self) -> std::option::Option<&[crate::model::InsightRuleContributor]> {
        self.contributors.as_deref()
    }
    /// <p>A time series of metric data points that matches the time period in the rule request.</p>
    pub fn metric_datapoints(
        &self,
    ) -> std::option::Option<&[crate::model::InsightRuleMetricDatapoint]> {
        self.metric_datapoints.as_deref()
    }
}
impl std::fmt::Debug for GetInsightRuleReportOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetInsightRuleReportOutput");
        formatter.field("key_labels", &self.key_labels);
        formatter.field("aggregation_statistic", &self.aggregation_statistic);
        formatter.field("aggregate_value", &self.aggregate_value);
        formatter.field("approximate_unique_count", &self.approximate_unique_count);
        formatter.field("contributors", &self.contributors);
        formatter.field("metric_datapoints", &self.metric_datapoints);
        formatter.finish()
    }
}
/// See [`GetInsightRuleReportOutput`](crate::output::GetInsightRuleReportOutput)
pub mod get_insight_rule_report_output {
    /// A builder for [`GetInsightRuleReportOutput`](crate::output::GetInsightRuleReportOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_labels: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) aggregation_statistic: std::option::Option<std::string::String>,
        pub(crate) aggregate_value: std::option::Option<f64>,
        pub(crate) approximate_unique_count: std::option::Option<i64>,
        pub(crate) contributors:
            std::option::Option<std::vec::Vec<crate::model::InsightRuleContributor>>,
        pub(crate) metric_datapoints:
            std::option::Option<std::vec::Vec<crate::model::InsightRuleMetricDatapoint>>,
    }
    impl Builder {
        /// Appends an item to `key_labels`.
        ///
        /// To override the contents of this collection use [`set_key_labels`](Self::set_key_labels).
        ///
        /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
        /// If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
        pub fn key_labels(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.key_labels.unwrap_or_default();
            v.push(input.into());
            self.key_labels = Some(v);
            self
        }
        /// <p>An array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors.
        /// If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.</p>
        pub fn set_key_labels(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.key_labels = input;
            self
        }
        /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
        pub fn aggregation_statistic(mut self, input: impl Into<std::string::String>) -> Self {
            self.aggregation_statistic = Some(input.into());
            self
        }
        /// <p>Specifies whether this rule aggregates contributor data by COUNT or SUM.</p>
        pub fn set_aggregation_statistic(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.aggregation_statistic = input;
            self
        }
        /// <p>The sum of the values from all individual contributors that match the rule.</p>
        pub fn aggregate_value(mut self, input: f64) -> Self {
            self.aggregate_value = Some(input);
            self
        }
        /// <p>The sum of the values from all individual contributors that match the rule.</p>
        pub fn set_aggregate_value(mut self, input: std::option::Option<f64>) -> Self {
            self.aggregate_value = input;
            self
        }
        /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
        pub fn approximate_unique_count(mut self, input: i64) -> Self {
            self.approximate_unique_count = Some(input);
            self
        }
        /// <p>An approximate count of the unique contributors found by this rule in this time period.</p>
        pub fn set_approximate_unique_count(mut self, input: std::option::Option<i64>) -> Self {
            self.approximate_unique_count = input;
            self
        }
        /// Appends an item to `contributors`.
        ///
        /// To override the contents of this collection use [`set_contributors`](Self::set_contributors).
        ///
        /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
        /// for the keys counts as a unique contributor.</p>
        pub fn contributors(
            mut self,
            input: impl Into<crate::model::InsightRuleContributor>,
        ) -> Self {
            let mut v = self.contributors.unwrap_or_default();
            v.push(input.into());
            self.contributors = Some(v);
            self
        }
        /// <p>An array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values
        /// for the keys counts as a unique contributor.</p>
        pub fn set_contributors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InsightRuleContributor>>,
        ) -> Self {
            self.contributors = input;
            self
        }
        /// Appends an item to `metric_datapoints`.
        ///
        /// To override the contents of this collection use [`set_metric_datapoints`](Self::set_metric_datapoints).
        ///
        /// <p>A time series of metric data points that matches the time period in the rule request.</p>
        pub fn metric_datapoints(
            mut self,
            input: impl Into<crate::model::InsightRuleMetricDatapoint>,
        ) -> Self {
            let mut v = self.metric_datapoints.unwrap_or_default();
            v.push(input.into());
            self.metric_datapoints = Some(v);
            self
        }
        /// <p>A time series of metric data points that matches the time period in the rule request.</p>
        pub fn set_metric_datapoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InsightRuleMetricDatapoint>>,
        ) -> Self {
            self.metric_datapoints = input;
            self
        }
        /// Consumes the builder and constructs a [`GetInsightRuleReportOutput`](crate::output::GetInsightRuleReportOutput)
        pub fn build(self) -> crate::output::GetInsightRuleReportOutput {
            crate::output::GetInsightRuleReportOutput {
                key_labels: self.key_labels,
                aggregation_statistic: self.aggregation_statistic,
                aggregate_value: self.aggregate_value,
                approximate_unique_count: self.approximate_unique_count,
                contributors: self.contributors,
                metric_datapoints: self.metric_datapoints,
            }
        }
    }
}
impl GetInsightRuleReportOutput {
    /// Creates a new builder-style object to manufacture [`GetInsightRuleReportOutput`](crate::output::GetInsightRuleReportOutput)
    pub fn builder() -> crate::output::get_insight_rule_report_output::Builder {
        crate::output::get_insight_rule_report_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDashboardOutput {
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub dashboard_arn: std::option::Option<std::string::String>,
    /// <p>The detailed information about the dashboard, including what widgets are included and their location
    /// on the dashboard. For more information about the <code>DashboardBody</code> syntax,
    /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
    pub dashboard_body: std::option::Option<std::string::String>,
    /// <p>The name of the dashboard.</p>
    pub dashboard_name: std::option::Option<std::string::String>,
}
impl GetDashboardOutput {
    /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
    pub fn dashboard_arn(&self) -> std::option::Option<&str> {
        self.dashboard_arn.as_deref()
    }
    /// <p>The detailed information about the dashboard, including what widgets are included and their location
    /// on the dashboard. For more information about the <code>DashboardBody</code> syntax,
    /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
    pub fn dashboard_body(&self) -> std::option::Option<&str> {
        self.dashboard_body.as_deref()
    }
    /// <p>The name of the dashboard.</p>
    pub fn dashboard_name(&self) -> std::option::Option<&str> {
        self.dashboard_name.as_deref()
    }
}
impl std::fmt::Debug for GetDashboardOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDashboardOutput");
        formatter.field("dashboard_arn", &self.dashboard_arn);
        formatter.field("dashboard_body", &self.dashboard_body);
        formatter.field("dashboard_name", &self.dashboard_name);
        formatter.finish()
    }
}
/// See [`GetDashboardOutput`](crate::output::GetDashboardOutput)
pub mod get_dashboard_output {
    /// A builder for [`GetDashboardOutput`](crate::output::GetDashboardOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dashboard_arn: std::option::Option<std::string::String>,
        pub(crate) dashboard_body: std::option::Option<std::string::String>,
        pub(crate) dashboard_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
        pub fn dashboard_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.dashboard_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the dashboard.</p>
        pub fn set_dashboard_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dashboard_arn = input;
            self
        }
        /// <p>The detailed information about the dashboard, including what widgets are included and their location
        /// on the dashboard. For more information about the <code>DashboardBody</code> syntax,
        /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
        pub fn dashboard_body(mut self, input: impl Into<std::string::String>) -> Self {
            self.dashboard_body = Some(input.into());
            self
        }
        /// <p>The detailed information about the dashboard, including what widgets are included and their location
        /// on the dashboard. For more information about the <code>DashboardBody</code> syntax,
        /// see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html">Dashboard Body Structure and Syntax</a>. </p>
        pub fn set_dashboard_body(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dashboard_body = input;
            self
        }
        /// <p>The name of the dashboard.</p>
        pub fn dashboard_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.dashboard_name = Some(input.into());
            self
        }
        /// <p>The name of the dashboard.</p>
        pub fn set_dashboard_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dashboard_name = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDashboardOutput`](crate::output::GetDashboardOutput)
        pub fn build(self) -> crate::output::GetDashboardOutput {
            crate::output::GetDashboardOutput {
                dashboard_arn: self.dashboard_arn,
                dashboard_body: self.dashboard_body,
                dashboard_name: self.dashboard_name,
            }
        }
    }
}
impl GetDashboardOutput {
    /// Creates a new builder-style object to manufacture [`GetDashboardOutput`](crate::output::GetDashboardOutput)
    pub fn builder() -> crate::output::get_dashboard_output::Builder {
        crate::output::get_dashboard_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableInsightRulesOutput {
    /// <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
}
impl EnableInsightRulesOutput {
    /// <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
    pub fn failures(&self) -> std::option::Option<&[crate::model::PartialFailure]> {
        self.failures.as_deref()
    }
}
impl std::fmt::Debug for EnableInsightRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableInsightRulesOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`EnableInsightRulesOutput`](crate::output::EnableInsightRulesOutput)
pub mod enable_insight_rules_output {
    /// A builder for [`EnableInsightRulesOutput`](crate::output::EnableInsightRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
    }
    impl Builder {
        /// Appends an item to `failures`.
        ///
        /// To override the contents of this collection use [`set_failures`](Self::set_failures).
        ///
        /// <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
        pub fn failures(mut self, input: impl Into<crate::model::PartialFailure>) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        /// <p>An array listing the rules that could not be enabled. You cannot disable or enable built-in rules.</p>
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`EnableInsightRulesOutput`](crate::output::EnableInsightRulesOutput)
        pub fn build(self) -> crate::output::EnableInsightRulesOutput {
            crate::output::EnableInsightRulesOutput {
                failures: self.failures,
            }
        }
    }
}
impl EnableInsightRulesOutput {
    /// Creates a new builder-style object to manufacture [`EnableInsightRulesOutput`](crate::output::EnableInsightRulesOutput)
    pub fn builder() -> crate::output::enable_insight_rules_output::Builder {
        crate::output::enable_insight_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EnableAlarmActionsOutput {}
impl std::fmt::Debug for EnableAlarmActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EnableAlarmActionsOutput");
        formatter.finish()
    }
}
/// See [`EnableAlarmActionsOutput`](crate::output::EnableAlarmActionsOutput)
pub mod enable_alarm_actions_output {
    /// A builder for [`EnableAlarmActionsOutput`](crate::output::EnableAlarmActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableAlarmActionsOutput`](crate::output::EnableAlarmActionsOutput)
        pub fn build(self) -> crate::output::EnableAlarmActionsOutput {
            crate::output::EnableAlarmActionsOutput {}
        }
    }
}
impl EnableAlarmActionsOutput {
    /// Creates a new builder-style object to manufacture [`EnableAlarmActionsOutput`](crate::output::EnableAlarmActionsOutput)
    pub fn builder() -> crate::output::enable_alarm_actions_output::Builder {
        crate::output::enable_alarm_actions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableInsightRulesOutput {
    /// <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
}
impl DisableInsightRulesOutput {
    /// <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
    pub fn failures(&self) -> std::option::Option<&[crate::model::PartialFailure]> {
        self.failures.as_deref()
    }
}
impl std::fmt::Debug for DisableInsightRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableInsightRulesOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`DisableInsightRulesOutput`](crate::output::DisableInsightRulesOutput)
pub mod disable_insight_rules_output {
    /// A builder for [`DisableInsightRulesOutput`](crate::output::DisableInsightRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
    }
    impl Builder {
        /// Appends an item to `failures`.
        ///
        /// To override the contents of this collection use [`set_failures`](Self::set_failures).
        ///
        /// <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
        pub fn failures(mut self, input: impl Into<crate::model::PartialFailure>) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        /// <p>An array listing the rules that could not be disabled. You cannot disable built-in rules.</p>
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`DisableInsightRulesOutput`](crate::output::DisableInsightRulesOutput)
        pub fn build(self) -> crate::output::DisableInsightRulesOutput {
            crate::output::DisableInsightRulesOutput {
                failures: self.failures,
            }
        }
    }
}
impl DisableInsightRulesOutput {
    /// Creates a new builder-style object to manufacture [`DisableInsightRulesOutput`](crate::output::DisableInsightRulesOutput)
    pub fn builder() -> crate::output::disable_insight_rules_output::Builder {
        crate::output::disable_insight_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisableAlarmActionsOutput {}
impl std::fmt::Debug for DisableAlarmActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisableAlarmActionsOutput");
        formatter.finish()
    }
}
/// See [`DisableAlarmActionsOutput`](crate::output::DisableAlarmActionsOutput)
pub mod disable_alarm_actions_output {
    /// A builder for [`DisableAlarmActionsOutput`](crate::output::DisableAlarmActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableAlarmActionsOutput`](crate::output::DisableAlarmActionsOutput)
        pub fn build(self) -> crate::output::DisableAlarmActionsOutput {
            crate::output::DisableAlarmActionsOutput {}
        }
    }
}
impl DisableAlarmActionsOutput {
    /// Creates a new builder-style object to manufacture [`DisableAlarmActionsOutput`](crate::output::DisableAlarmActionsOutput)
    pub fn builder() -> crate::output::disable_alarm_actions_output::Builder {
        crate::output::disable_alarm_actions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInsightRulesOutput {
    /// <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The rules returned by the operation.</p>
    pub insight_rules: std::option::Option<std::vec::Vec<crate::model::InsightRule>>,
}
impl DescribeInsightRulesOutput {
    /// <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The rules returned by the operation.</p>
    pub fn insight_rules(&self) -> std::option::Option<&[crate::model::InsightRule]> {
        self.insight_rules.as_deref()
    }
}
impl std::fmt::Debug for DescribeInsightRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInsightRulesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("insight_rules", &self.insight_rules);
        formatter.finish()
    }
}
/// See [`DescribeInsightRulesOutput`](crate::output::DescribeInsightRulesOutput)
pub mod describe_insight_rules_output {
    /// A builder for [`DescribeInsightRulesOutput`](crate::output::DescribeInsightRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) insight_rules: std::option::Option<std::vec::Vec<crate::model::InsightRule>>,
    }
    impl Builder {
        /// <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If this parameter is present, it is a token that marks the start of the next batch of returned results.      </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `insight_rules`.
        ///
        /// To override the contents of this collection use [`set_insight_rules`](Self::set_insight_rules).
        ///
        /// <p>The rules returned by the operation.</p>
        pub fn insight_rules(mut self, input: impl Into<crate::model::InsightRule>) -> Self {
            let mut v = self.insight_rules.unwrap_or_default();
            v.push(input.into());
            self.insight_rules = Some(v);
            self
        }
        /// <p>The rules returned by the operation.</p>
        pub fn set_insight_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InsightRule>>,
        ) -> Self {
            self.insight_rules = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInsightRulesOutput`](crate::output::DescribeInsightRulesOutput)
        pub fn build(self) -> crate::output::DescribeInsightRulesOutput {
            crate::output::DescribeInsightRulesOutput {
                next_token: self.next_token,
                insight_rules: self.insight_rules,
            }
        }
    }
}
impl DescribeInsightRulesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInsightRulesOutput`](crate::output::DescribeInsightRulesOutput)
    pub fn builder() -> crate::output::describe_insight_rules_output::Builder {
        crate::output::describe_insight_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAnomalyDetectorsOutput {
    /// <p>The list of anomaly detection models returned by the operation.</p>
    pub anomaly_detectors: std::option::Option<std::vec::Vec<crate::model::AnomalyDetector>>,
    /// <p>A token that you can use in a subsequent operation to
    /// retrieve the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeAnomalyDetectorsOutput {
    /// <p>The list of anomaly detection models returned by the operation.</p>
    pub fn anomaly_detectors(&self) -> std::option::Option<&[crate::model::AnomalyDetector]> {
        self.anomaly_detectors.as_deref()
    }
    /// <p>A token that you can use in a subsequent operation to
    /// retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeAnomalyDetectorsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAnomalyDetectorsOutput");
        formatter.field("anomaly_detectors", &self.anomaly_detectors);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeAnomalyDetectorsOutput`](crate::output::DescribeAnomalyDetectorsOutput)
pub mod describe_anomaly_detectors_output {
    /// A builder for [`DescribeAnomalyDetectorsOutput`](crate::output::DescribeAnomalyDetectorsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) anomaly_detectors:
            std::option::Option<std::vec::Vec<crate::model::AnomalyDetector>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `anomaly_detectors`.
        ///
        /// To override the contents of this collection use [`set_anomaly_detectors`](Self::set_anomaly_detectors).
        ///
        /// <p>The list of anomaly detection models returned by the operation.</p>
        pub fn anomaly_detectors(
            mut self,
            input: impl Into<crate::model::AnomalyDetector>,
        ) -> Self {
            let mut v = self.anomaly_detectors.unwrap_or_default();
            v.push(input.into());
            self.anomaly_detectors = Some(v);
            self
        }
        /// <p>The list of anomaly detection models returned by the operation.</p>
        pub fn set_anomaly_detectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AnomalyDetector>>,
        ) -> Self {
            self.anomaly_detectors = input;
            self
        }
        /// <p>A token that you can use in a subsequent operation to
        /// retrieve the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token that you can use in a subsequent operation to
        /// retrieve the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAnomalyDetectorsOutput`](crate::output::DescribeAnomalyDetectorsOutput)
        pub fn build(self) -> crate::output::DescribeAnomalyDetectorsOutput {
            crate::output::DescribeAnomalyDetectorsOutput {
                anomaly_detectors: self.anomaly_detectors,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeAnomalyDetectorsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAnomalyDetectorsOutput`](crate::output::DescribeAnomalyDetectorsOutput)
    pub fn builder() -> crate::output::describe_anomaly_detectors_output::Builder {
        crate::output::describe_anomaly_detectors_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAlarmsForMetricOutput {
    /// <p>The information for each alarm with the specified metric.</p>
    pub metric_alarms: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
}
impl DescribeAlarmsForMetricOutput {
    /// <p>The information for each alarm with the specified metric.</p>
    pub fn metric_alarms(&self) -> std::option::Option<&[crate::model::MetricAlarm]> {
        self.metric_alarms.as_deref()
    }
}
impl std::fmt::Debug for DescribeAlarmsForMetricOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAlarmsForMetricOutput");
        formatter.field("metric_alarms", &self.metric_alarms);
        formatter.finish()
    }
}
/// See [`DescribeAlarmsForMetricOutput`](crate::output::DescribeAlarmsForMetricOutput)
pub mod describe_alarms_for_metric_output {
    /// A builder for [`DescribeAlarmsForMetricOutput`](crate::output::DescribeAlarmsForMetricOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) metric_alarms: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
    }
    impl Builder {
        /// Appends an item to `metric_alarms`.
        ///
        /// To override the contents of this collection use [`set_metric_alarms`](Self::set_metric_alarms).
        ///
        /// <p>The information for each alarm with the specified metric.</p>
        pub fn metric_alarms(mut self, input: impl Into<crate::model::MetricAlarm>) -> Self {
            let mut v = self.metric_alarms.unwrap_or_default();
            v.push(input.into());
            self.metric_alarms = Some(v);
            self
        }
        /// <p>The information for each alarm with the specified metric.</p>
        pub fn set_metric_alarms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
        ) -> Self {
            self.metric_alarms = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAlarmsForMetricOutput`](crate::output::DescribeAlarmsForMetricOutput)
        pub fn build(self) -> crate::output::DescribeAlarmsForMetricOutput {
            crate::output::DescribeAlarmsForMetricOutput {
                metric_alarms: self.metric_alarms,
            }
        }
    }
}
impl DescribeAlarmsForMetricOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsForMetricOutput`](crate::output::DescribeAlarmsForMetricOutput)
    pub fn builder() -> crate::output::describe_alarms_for_metric_output::Builder {
        crate::output::describe_alarms_for_metric_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAlarmsOutput {
    /// <p>The information about any composite alarms returned by the operation.</p>
    pub composite_alarms: std::option::Option<std::vec::Vec<crate::model::CompositeAlarm>>,
    /// <p>The information about any metric alarms returned by the operation.</p>
    pub metric_alarms: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeAlarmsOutput {
    /// <p>The information about any composite alarms returned by the operation.</p>
    pub fn composite_alarms(&self) -> std::option::Option<&[crate::model::CompositeAlarm]> {
        self.composite_alarms.as_deref()
    }
    /// <p>The information about any metric alarms returned by the operation.</p>
    pub fn metric_alarms(&self) -> std::option::Option<&[crate::model::MetricAlarm]> {
        self.metric_alarms.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeAlarmsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAlarmsOutput");
        formatter.field("composite_alarms", &self.composite_alarms);
        formatter.field("metric_alarms", &self.metric_alarms);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeAlarmsOutput`](crate::output::DescribeAlarmsOutput)
pub mod describe_alarms_output {
    /// A builder for [`DescribeAlarmsOutput`](crate::output::DescribeAlarmsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) composite_alarms:
            std::option::Option<std::vec::Vec<crate::model::CompositeAlarm>>,
        pub(crate) metric_alarms: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `composite_alarms`.
        ///
        /// To override the contents of this collection use [`set_composite_alarms`](Self::set_composite_alarms).
        ///
        /// <p>The information about any composite alarms returned by the operation.</p>
        pub fn composite_alarms(mut self, input: impl Into<crate::model::CompositeAlarm>) -> Self {
            let mut v = self.composite_alarms.unwrap_or_default();
            v.push(input.into());
            self.composite_alarms = Some(v);
            self
        }
        /// <p>The information about any composite alarms returned by the operation.</p>
        pub fn set_composite_alarms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CompositeAlarm>>,
        ) -> Self {
            self.composite_alarms = input;
            self
        }
        /// Appends an item to `metric_alarms`.
        ///
        /// To override the contents of this collection use [`set_metric_alarms`](Self::set_metric_alarms).
        ///
        /// <p>The information about any metric alarms returned by the operation.</p>
        pub fn metric_alarms(mut self, input: impl Into<crate::model::MetricAlarm>) -> Self {
            let mut v = self.metric_alarms.unwrap_or_default();
            v.push(input.into());
            self.metric_alarms = Some(v);
            self
        }
        /// <p>The information about any metric alarms returned by the operation.</p>
        pub fn set_metric_alarms(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MetricAlarm>>,
        ) -> Self {
            self.metric_alarms = input;
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAlarmsOutput`](crate::output::DescribeAlarmsOutput)
        pub fn build(self) -> crate::output::DescribeAlarmsOutput {
            crate::output::DescribeAlarmsOutput {
                composite_alarms: self.composite_alarms,
                metric_alarms: self.metric_alarms,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeAlarmsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmsOutput`](crate::output::DescribeAlarmsOutput)
    pub fn builder() -> crate::output::describe_alarms_output::Builder {
        crate::output::describe_alarms_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAlarmHistoryOutput {
    /// <p>The alarm histories, in JSON format.</p>
    pub alarm_history_items: std::option::Option<std::vec::Vec<crate::model::AlarmHistoryItem>>,
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeAlarmHistoryOutput {
    /// <p>The alarm histories, in JSON format.</p>
    pub fn alarm_history_items(&self) -> std::option::Option<&[crate::model::AlarmHistoryItem]> {
        self.alarm_history_items.as_deref()
    }
    /// <p>The token that marks the start of the next batch of returned results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeAlarmHistoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAlarmHistoryOutput");
        formatter.field("alarm_history_items", &self.alarm_history_items);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeAlarmHistoryOutput`](crate::output::DescribeAlarmHistoryOutput)
pub mod describe_alarm_history_output {
    /// A builder for [`DescribeAlarmHistoryOutput`](crate::output::DescribeAlarmHistoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) alarm_history_items:
            std::option::Option<std::vec::Vec<crate::model::AlarmHistoryItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `alarm_history_items`.
        ///
        /// To override the contents of this collection use [`set_alarm_history_items`](Self::set_alarm_history_items).
        ///
        /// <p>The alarm histories, in JSON format.</p>
        pub fn alarm_history_items(
            mut self,
            input: impl Into<crate::model::AlarmHistoryItem>,
        ) -> Self {
            let mut v = self.alarm_history_items.unwrap_or_default();
            v.push(input.into());
            self.alarm_history_items = Some(v);
            self
        }
        /// <p>The alarm histories, in JSON format.</p>
        pub fn set_alarm_history_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AlarmHistoryItem>>,
        ) -> Self {
            self.alarm_history_items = input;
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that marks the start of the next batch of returned results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAlarmHistoryOutput`](crate::output::DescribeAlarmHistoryOutput)
        pub fn build(self) -> crate::output::DescribeAlarmHistoryOutput {
            crate::output::DescribeAlarmHistoryOutput {
                alarm_history_items: self.alarm_history_items,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeAlarmHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAlarmHistoryOutput`](crate::output::DescribeAlarmHistoryOutput)
    pub fn builder() -> crate::output::describe_alarm_history_output::Builder {
        crate::output::describe_alarm_history_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMetricStreamOutput {}
impl std::fmt::Debug for DeleteMetricStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteMetricStreamOutput");
        formatter.finish()
    }
}
/// See [`DeleteMetricStreamOutput`](crate::output::DeleteMetricStreamOutput)
pub mod delete_metric_stream_output {
    /// A builder for [`DeleteMetricStreamOutput`](crate::output::DeleteMetricStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMetricStreamOutput`](crate::output::DeleteMetricStreamOutput)
        pub fn build(self) -> crate::output::DeleteMetricStreamOutput {
            crate::output::DeleteMetricStreamOutput {}
        }
    }
}
impl DeleteMetricStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMetricStreamOutput`](crate::output::DeleteMetricStreamOutput)
    pub fn builder() -> crate::output::delete_metric_stream_output::Builder {
        crate::output::delete_metric_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInsightRulesOutput {
    /// <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
    pub failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
}
impl DeleteInsightRulesOutput {
    /// <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
    pub fn failures(&self) -> std::option::Option<&[crate::model::PartialFailure]> {
        self.failures.as_deref()
    }
}
impl std::fmt::Debug for DeleteInsightRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInsightRulesOutput");
        formatter.field("failures", &self.failures);
        formatter.finish()
    }
}
/// See [`DeleteInsightRulesOutput`](crate::output::DeleteInsightRulesOutput)
pub mod delete_insight_rules_output {
    /// A builder for [`DeleteInsightRulesOutput`](crate::output::DeleteInsightRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) failures: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
    }
    impl Builder {
        /// Appends an item to `failures`.
        ///
        /// To override the contents of this collection use [`set_failures`](Self::set_failures).
        ///
        /// <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
        pub fn failures(mut self, input: impl Into<crate::model::PartialFailure>) -> Self {
            let mut v = self.failures.unwrap_or_default();
            v.push(input.into());
            self.failures = Some(v);
            self
        }
        /// <p>An array listing the rules that could not be deleted. You cannot delete built-in rules.</p>
        pub fn set_failures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PartialFailure>>,
        ) -> Self {
            self.failures = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInsightRulesOutput`](crate::output::DeleteInsightRulesOutput)
        pub fn build(self) -> crate::output::DeleteInsightRulesOutput {
            crate::output::DeleteInsightRulesOutput {
                failures: self.failures,
            }
        }
    }
}
impl DeleteInsightRulesOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInsightRulesOutput`](crate::output::DeleteInsightRulesOutput)
    pub fn builder() -> crate::output::delete_insight_rules_output::Builder {
        crate::output::delete_insight_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDashboardsOutput {}
impl std::fmt::Debug for DeleteDashboardsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDashboardsOutput");
        formatter.finish()
    }
}
/// See [`DeleteDashboardsOutput`](crate::output::DeleteDashboardsOutput)
pub mod delete_dashboards_output {
    /// A builder for [`DeleteDashboardsOutput`](crate::output::DeleteDashboardsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDashboardsOutput`](crate::output::DeleteDashboardsOutput)
        pub fn build(self) -> crate::output::DeleteDashboardsOutput {
            crate::output::DeleteDashboardsOutput {}
        }
    }
}
impl DeleteDashboardsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDashboardsOutput`](crate::output::DeleteDashboardsOutput)
    pub fn builder() -> crate::output::delete_dashboards_output::Builder {
        crate::output::delete_dashboards_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAnomalyDetectorOutput {}
impl std::fmt::Debug for DeleteAnomalyDetectorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAnomalyDetectorOutput");
        formatter.finish()
    }
}
/// See [`DeleteAnomalyDetectorOutput`](crate::output::DeleteAnomalyDetectorOutput)
pub mod delete_anomaly_detector_output {
    /// A builder for [`DeleteAnomalyDetectorOutput`](crate::output::DeleteAnomalyDetectorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAnomalyDetectorOutput`](crate::output::DeleteAnomalyDetectorOutput)
        pub fn build(self) -> crate::output::DeleteAnomalyDetectorOutput {
            crate::output::DeleteAnomalyDetectorOutput {}
        }
    }
}
impl DeleteAnomalyDetectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAnomalyDetectorOutput`](crate::output::DeleteAnomalyDetectorOutput)
    pub fn builder() -> crate::output::delete_anomaly_detector_output::Builder {
        crate::output::delete_anomaly_detector_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAlarmsOutput {}
impl std::fmt::Debug for DeleteAlarmsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAlarmsOutput");
        formatter.finish()
    }
}
/// See [`DeleteAlarmsOutput`](crate::output::DeleteAlarmsOutput)
pub mod delete_alarms_output {
    /// A builder for [`DeleteAlarmsOutput`](crate::output::DeleteAlarmsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAlarmsOutput`](crate::output::DeleteAlarmsOutput)
        pub fn build(self) -> crate::output::DeleteAlarmsOutput {
            crate::output::DeleteAlarmsOutput {}
        }
    }
}
impl DeleteAlarmsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAlarmsOutput`](crate::output::DeleteAlarmsOutput)
    pub fn builder() -> crate::output::delete_alarms_output::Builder {
        crate::output::delete_alarms_output::Builder::default()
    }
}
