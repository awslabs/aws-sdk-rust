// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAddressInput {
    /// <p>The address that you want the Snow device shipped to.</p>
    #[doc(hidden)]
    pub address: std::option::Option<crate::types::Address>,
}
impl CreateAddressInput {
    /// <p>The address that you want the Snow device shipped to.</p>
    pub fn address(&self) -> std::option::Option<&crate::types::Address> {
        self.address.as_ref()
    }
}
impl CreateAddressInput {
    /// Creates a new builder-style object to manufacture [`CreateAddressInput`](crate::operation::create_address::CreateAddressInput).
    pub fn builder() -> crate::operation::create_address::builders::CreateAddressInputBuilder {
        crate::operation::create_address::builders::CreateAddressInputBuilder::default()
    }
}

/// A builder for [`CreateAddressInput`](crate::operation::create_address::CreateAddressInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAddressInputBuilder {
    pub(crate) address: std::option::Option<crate::types::Address>,
}
impl CreateAddressInputBuilder {
    /// <p>The address that you want the Snow device shipped to.</p>
    pub fn address(mut self, input: crate::types::Address) -> Self {
        self.address = Some(input);
        self
    }
    /// <p>The address that you want the Snow device shipped to.</p>
    pub fn set_address(mut self, input: std::option::Option<crate::types::Address>) -> Self {
        self.address = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAddressInput`](crate::operation::create_address::CreateAddressInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_address::CreateAddressInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_address::CreateAddressInput {
            address: self.address,
        })
    }
}
