// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPickupLocationsOutput {
    /// <p>Information about the address of pickup locations.</p>
    pub addresses: ::std::option::Option<::std::vec::Vec<crate::types::Address>>,
    /// <p>HTTP requests are stateless. To identify what object comes "next" in the list of <code>ListPickupLocationsResult</code> objects, you have the option of specifying <code>NextToken</code> as the starting point for your returned list.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListPickupLocationsOutput {
    /// <p>Information about the address of pickup locations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.addresses.is_none()`.
    pub fn addresses(&self) -> &[crate::types::Address] {
        self.addresses.as_deref().unwrap_or_default()
    }
    /// <p>HTTP requests are stateless. To identify what object comes "next" in the list of <code>ListPickupLocationsResult</code> objects, you have the option of specifying <code>NextToken</code> as the starting point for your returned list.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListPickupLocationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPickupLocationsOutput {
    /// Creates a new builder-style object to manufacture [`ListPickupLocationsOutput`](crate::operation::list_pickup_locations::ListPickupLocationsOutput).
    pub fn builder() -> crate::operation::list_pickup_locations::builders::ListPickupLocationsOutputBuilder {
        crate::operation::list_pickup_locations::builders::ListPickupLocationsOutputBuilder::default()
    }
}

/// A builder for [`ListPickupLocationsOutput`](crate::operation::list_pickup_locations::ListPickupLocationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPickupLocationsOutputBuilder {
    pub(crate) addresses: ::std::option::Option<::std::vec::Vec<crate::types::Address>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListPickupLocationsOutputBuilder {
    /// Appends an item to `addresses`.
    ///
    /// To override the contents of this collection use [`set_addresses`](Self::set_addresses).
    ///
    /// <p>Information about the address of pickup locations.</p>
    pub fn addresses(mut self, input: crate::types::Address) -> Self {
        let mut v = self.addresses.unwrap_or_default();
        v.push(input);
        self.addresses = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the address of pickup locations.</p>
    pub fn set_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Address>>) -> Self {
        self.addresses = input;
        self
    }
    /// <p>Information about the address of pickup locations.</p>
    pub fn get_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Address>> {
        &self.addresses
    }
    /// <p>HTTP requests are stateless. To identify what object comes "next" in the list of <code>ListPickupLocationsResult</code> objects, you have the option of specifying <code>NextToken</code> as the starting point for your returned list.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>HTTP requests are stateless. To identify what object comes "next" in the list of <code>ListPickupLocationsResult</code> objects, you have the option of specifying <code>NextToken</code> as the starting point for your returned list.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>HTTP requests are stateless. To identify what object comes "next" in the list of <code>ListPickupLocationsResult</code> objects, you have the option of specifying <code>NextToken</code> as the starting point for your returned list.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPickupLocationsOutput`](crate::operation::list_pickup_locations::ListPickupLocationsOutput).
    pub fn build(self) -> crate::operation::list_pickup_locations::ListPickupLocationsOutput {
        crate::operation::list_pickup_locations::ListPickupLocationsOutput {
            addresses: self.addresses,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
