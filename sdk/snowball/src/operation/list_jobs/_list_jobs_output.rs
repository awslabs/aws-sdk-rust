// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListJobsOutput {
    /// <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. </p>
    #[doc(hidden)]
    pub job_list_entries: std::option::Option<std::vec::Vec<crate::types::JobListEntry>>,
    /// <p>HTTP requests are stateless. If you use this automatically generated <code>NextToken</code> value in your next <code>ListJobs</code> call, your returned <code>JobListEntry</code> objects will start from this point in the array.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsOutput {
    /// <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. </p>
    pub fn job_list_entries(&self) -> std::option::Option<&[crate::types::JobListEntry]> {
        self.job_list_entries.as_deref()
    }
    /// <p>HTTP requests are stateless. If you use this automatically generated <code>NextToken</code> value in your next <code>ListJobs</code> call, your returned <code>JobListEntry</code> objects will start from this point in the array.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
    pub fn builder() -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
        crate::operation::list_jobs::builders::ListJobsOutputBuilder::default()
    }
}

/// A builder for [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListJobsOutputBuilder {
    pub(crate) job_list_entries: std::option::Option<std::vec::Vec<crate::types::JobListEntry>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsOutputBuilder {
    /// Appends an item to `job_list_entries`.
    ///
    /// To override the contents of this collection use [`set_job_list_entries`](Self::set_job_list_entries).
    ///
    /// <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. </p>
    pub fn job_list_entries(mut self, input: crate::types::JobListEntry) -> Self {
        let mut v = self.job_list_entries.unwrap_or_default();
        v.push(input);
        self.job_list_entries = Some(v);
        self
    }
    /// <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. </p>
    pub fn set_job_list_entries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JobListEntry>>,
    ) -> Self {
        self.job_list_entries = input;
        self
    }
    /// <p>HTTP requests are stateless. If you use this automatically generated <code>NextToken</code> value in your next <code>ListJobs</code> call, your returned <code>JobListEntry</code> objects will start from this point in the array.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>HTTP requests are stateless. If you use this automatically generated <code>NextToken</code> value in your next <code>ListJobs</code> call, your returned <code>JobListEntry</code> objects will start from this point in the array.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
    pub fn build(self) -> crate::operation::list_jobs::ListJobsOutput {
        crate::operation::list_jobs::ListJobsOutput {
            job_list_entries: self.job_list_entries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
