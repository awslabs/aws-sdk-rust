// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateJobInput {
    /// <p>The job ID of the job that you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>Identity and Access Management (IAM) API action.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The new or updated <code>Notification</code> object.</p>
    #[doc(hidden)]
    pub notification: std::option::Option<crate::types::Notification>,
    /// <p>The updated <code>JobResource</code> object, or the updated <code>JobResource</code> object. </p>
    #[doc(hidden)]
    pub resources: std::option::Option<crate::types::JobResource>,
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
    #[doc(hidden)]
    pub on_device_service_configuration:
        std::option::Option<crate::types::OnDeviceServiceConfiguration>,
    /// <p>The ID of the updated <code>Address</code> object.</p>
    #[doc(hidden)]
    pub address_id: std::option::Option<std::string::String>,
    /// <p>The updated shipping option value of this job's <code>ShippingDetails</code> object.</p>
    #[doc(hidden)]
    pub shipping_option: std::option::Option<crate::types::ShippingOption>,
    /// <p>The updated description of this job's <code>JobMetadata</code> object.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated <code>SnowballCapacityPreference</code> of this job's <code>JobMetadata</code> object. The 50 TB Snowballs are only available in the US regions.</p>
    /// <p>For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i> or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
    #[doc(hidden)]
    pub snowball_capacity_preference: std::option::Option<crate::types::SnowballCapacity>,
    /// <p>The updated ID for the forwarding address for a job. This field is not supported in most regions.</p>
    #[doc(hidden)]
    pub forwarding_address_id: std::option::Option<std::string::String>,
}
impl UpdateJobInput {
    /// <p>The job ID of the job that you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>Identity and Access Management (IAM) API action.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn notification(&self) -> std::option::Option<&crate::types::Notification> {
        self.notification.as_ref()
    }
    /// <p>The updated <code>JobResource</code> object, or the updated <code>JobResource</code> object. </p>
    pub fn resources(&self) -> std::option::Option<&crate::types::JobResource> {
        self.resources.as_ref()
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
    pub fn on_device_service_configuration(
        &self,
    ) -> std::option::Option<&crate::types::OnDeviceServiceConfiguration> {
        self.on_device_service_configuration.as_ref()
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn address_id(&self) -> std::option::Option<&str> {
        self.address_id.as_deref()
    }
    /// <p>The updated shipping option value of this job's <code>ShippingDetails</code> object.</p>
    pub fn shipping_option(&self) -> std::option::Option<&crate::types::ShippingOption> {
        self.shipping_option.as_ref()
    }
    /// <p>The updated description of this job's <code>JobMetadata</code> object.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated <code>SnowballCapacityPreference</code> of this job's <code>JobMetadata</code> object. The 50 TB Snowballs are only available in the US regions.</p>
    /// <p>For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i> or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
    pub fn snowball_capacity_preference(
        &self,
    ) -> std::option::Option<&crate::types::SnowballCapacity> {
        self.snowball_capacity_preference.as_ref()
    }
    /// <p>The updated ID for the forwarding address for a job. This field is not supported in most regions.</p>
    pub fn forwarding_address_id(&self) -> std::option::Option<&str> {
        self.forwarding_address_id.as_deref()
    }
}
impl UpdateJobInput {
    /// Creates a new builder-style object to manufacture [`UpdateJobInput`](crate::operation::update_job::UpdateJobInput).
    pub fn builder() -> crate::operation::update_job::builders::UpdateJobInputBuilder {
        crate::operation::update_job::builders::UpdateJobInputBuilder::default()
    }
}

/// A builder for [`UpdateJobInput`](crate::operation::update_job::UpdateJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateJobInputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) notification: std::option::Option<crate::types::Notification>,
    pub(crate) resources: std::option::Option<crate::types::JobResource>,
    pub(crate) on_device_service_configuration:
        std::option::Option<crate::types::OnDeviceServiceConfiguration>,
    pub(crate) address_id: std::option::Option<std::string::String>,
    pub(crate) shipping_option: std::option::Option<crate::types::ShippingOption>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) snowball_capacity_preference: std::option::Option<crate::types::SnowballCapacity>,
    pub(crate) forwarding_address_id: std::option::Option<std::string::String>,
}
impl UpdateJobInputBuilder {
    /// <p>The job ID of the job that you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The job ID of the job that you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>Identity and Access Management (IAM) API action.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this job. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>Identity and Access Management (IAM) API action.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn notification(mut self, input: crate::types::Notification) -> Self {
        self.notification = Some(input);
        self
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::types::Notification>,
    ) -> Self {
        self.notification = input;
        self
    }
    /// <p>The updated <code>JobResource</code> object, or the updated <code>JobResource</code> object. </p>
    pub fn resources(mut self, input: crate::types::JobResource) -> Self {
        self.resources = Some(input);
        self
    }
    /// <p>The updated <code>JobResource</code> object, or the updated <code>JobResource</code> object. </p>
    pub fn set_resources(mut self, input: std::option::Option<crate::types::JobResource>) -> Self {
        self.resources = input;
        self
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
    pub fn on_device_service_configuration(
        mut self,
        input: crate::types::OnDeviceServiceConfiguration,
    ) -> Self {
        self.on_device_service_configuration = Some(input);
        self
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
    pub fn set_on_device_service_configuration(
        mut self,
        input: std::option::Option<crate::types::OnDeviceServiceConfiguration>,
    ) -> Self {
        self.on_device_service_configuration = input;
        self
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn address_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.address_id = Some(input.into());
        self
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn set_address_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address_id = input;
        self
    }
    /// <p>The updated shipping option value of this job's <code>ShippingDetails</code> object.</p>
    pub fn shipping_option(mut self, input: crate::types::ShippingOption) -> Self {
        self.shipping_option = Some(input);
        self
    }
    /// <p>The updated shipping option value of this job's <code>ShippingDetails</code> object.</p>
    pub fn set_shipping_option(
        mut self,
        input: std::option::Option<crate::types::ShippingOption>,
    ) -> Self {
        self.shipping_option = input;
        self
    }
    /// <p>The updated description of this job's <code>JobMetadata</code> object.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated description of this job's <code>JobMetadata</code> object.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated <code>SnowballCapacityPreference</code> of this job's <code>JobMetadata</code> object. The 50 TB Snowballs are only available in the US regions.</p>
    /// <p>For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i> or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
    pub fn snowball_capacity_preference(mut self, input: crate::types::SnowballCapacity) -> Self {
        self.snowball_capacity_preference = Some(input);
        self
    }
    /// <p>The updated <code>SnowballCapacityPreference</code> of this job's <code>JobMetadata</code> object. The 50 TB Snowballs are only available in the US regions.</p>
    /// <p>For more information, see "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i> or "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
    pub fn set_snowball_capacity_preference(
        mut self,
        input: std::option::Option<crate::types::SnowballCapacity>,
    ) -> Self {
        self.snowball_capacity_preference = input;
        self
    }
    /// <p>The updated ID for the forwarding address for a job. This field is not supported in most regions.</p>
    pub fn forwarding_address_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.forwarding_address_id = Some(input.into());
        self
    }
    /// <p>The updated ID for the forwarding address for a job. This field is not supported in most regions.</p>
    pub fn set_forwarding_address_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.forwarding_address_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateJobInput`](crate::operation::update_job::UpdateJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_job::UpdateJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_job::UpdateJobInput {
            job_id: self.job_id,
            role_arn: self.role_arn,
            notification: self.notification,
            resources: self.resources,
            on_device_service_configuration: self.on_device_service_configuration,
            address_id: self.address_id,
            shipping_option: self.shipping_option,
            description: self.description,
            snowball_capacity_preference: self.snowball_capacity_preference,
            forwarding_address_id: self.forwarding_address_id,
        })
    }
}
