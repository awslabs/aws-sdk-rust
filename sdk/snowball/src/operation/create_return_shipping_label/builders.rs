// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_return_shipping_label::_create_return_shipping_label_output::CreateReturnShippingLabelOutputBuilder;

pub use crate::operation::create_return_shipping_label::_create_return_shipping_label_input::CreateReturnShippingLabelInputBuilder;

/// Fluent builder constructing a request to `CreateReturnShippingLabel`.
///
/// <p>Creates a shipping label that will be used to return the Snow device to Amazon Web Services.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateReturnShippingLabelFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_return_shipping_label::builders::CreateReturnShippingLabelInputBuilder
            }
impl CreateReturnShippingLabelFluentBuilder {
    /// Creates a new `CreateReturnShippingLabel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_return_shipping_label::CreateReturnShippingLabel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_return_shipping_label::CreateReturnShippingLabelError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_return_shipping_label::CreateReturnShippingLabelOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_return_shipping_label::CreateReturnShippingLabelError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID for a job that you want to create the return shipping label for; for example, <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The ID for a job that you want to create the return shipping label for; for example, <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>The shipping speed for a particular job. This speed doesn't dictate how soon the device is returned to Amazon Web Services. This speed represents how quickly it moves to its destination while in transit. Regional shipping speeds are as follows:</p>
    pub fn shipping_option(mut self, input: crate::types::ShippingOption) -> Self {
        self.inner = self.inner.shipping_option(input);
        self
    }
    /// <p>The shipping speed for a particular job. This speed doesn't dictate how soon the device is returned to Amazon Web Services. This speed represents how quickly it moves to its destination while in transit. Regional shipping speeds are as follows:</p>
    pub fn set_shipping_option(
        mut self,
        input: std::option::Option<crate::types::ShippingOption>,
    ) -> Self {
        self.inner = self.inner.set_shipping_option(input);
        self
    }
}
