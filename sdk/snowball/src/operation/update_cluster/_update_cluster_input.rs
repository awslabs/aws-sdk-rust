// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateClusterInput {
    /// <p>The cluster ID of the cluster that you want to update, for example <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated description of this cluster.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The updated arrays of <code>JobResource</code> objects that can include updated <code>S3Resource</code> objects or <code>LambdaResource</code> objects.</p>
    pub resources: ::std::option::Option<crate::types::JobResource>,
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS (Network File System).</p>
    pub on_device_service_configuration: ::std::option::Option<crate::types::OnDeviceServiceConfiguration>,
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub address_id: ::std::option::Option<::std::string::String>,
    /// <p>The updated shipping option value of this cluster's <code>ShippingDetails</code> object.</p>
    pub shipping_option: ::std::option::Option<crate::types::ShippingOption>,
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub notification: ::std::option::Option<crate::types::Notification>,
    /// <p>The updated ID for the forwarding address for a cluster. This field is not supported in most regions.</p>
    pub forwarding_address_id: ::std::option::Option<::std::string::String>,
}
impl UpdateClusterInput {
    /// <p>The cluster ID of the cluster that you want to update, for example <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn cluster_id(&self) -> ::std::option::Option<&str> {
        self.cluster_id.as_deref()
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The updated description of this cluster.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated arrays of <code>JobResource</code> objects that can include updated <code>S3Resource</code> objects or <code>LambdaResource</code> objects.</p>
    pub fn resources(&self) -> ::std::option::Option<&crate::types::JobResource> {
        self.resources.as_ref()
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS (Network File System).</p>
    pub fn on_device_service_configuration(&self) -> ::std::option::Option<&crate::types::OnDeviceServiceConfiguration> {
        self.on_device_service_configuration.as_ref()
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn address_id(&self) -> ::std::option::Option<&str> {
        self.address_id.as_deref()
    }
    /// <p>The updated shipping option value of this cluster's <code>ShippingDetails</code> object.</p>
    pub fn shipping_option(&self) -> ::std::option::Option<&crate::types::ShippingOption> {
        self.shipping_option.as_ref()
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn notification(&self) -> ::std::option::Option<&crate::types::Notification> {
        self.notification.as_ref()
    }
    /// <p>The updated ID for the forwarding address for a cluster. This field is not supported in most regions.</p>
    pub fn forwarding_address_id(&self) -> ::std::option::Option<&str> {
        self.forwarding_address_id.as_deref()
    }
}
impl UpdateClusterInput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
    pub fn builder() -> crate::operation::update_cluster::builders::UpdateClusterInputBuilder {
        crate::operation::update_cluster::builders::UpdateClusterInputBuilder::default()
    }
}

/// A builder for [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateClusterInputBuilder {
    pub(crate) cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) resources: ::std::option::Option<crate::types::JobResource>,
    pub(crate) on_device_service_configuration: ::std::option::Option<crate::types::OnDeviceServiceConfiguration>,
    pub(crate) address_id: ::std::option::Option<::std::string::String>,
    pub(crate) shipping_option: ::std::option::Option<crate::types::ShippingOption>,
    pub(crate) notification: ::std::option::Option<crate::types::Notification>,
    pub(crate) forwarding_address_id: ::std::option::Option<::std::string::String>,
}
impl UpdateClusterInputBuilder {
    /// <p>The cluster ID of the cluster that you want to update, for example <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    /// This field is required.
    pub fn cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster ID of the cluster that you want to update, for example <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn set_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_id = input;
        self
    }
    /// <p>The cluster ID of the cluster that you want to update, for example <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn get_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_id
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster. To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>The updated description of this cluster.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated description of this cluster.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated description of this cluster.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The updated arrays of <code>JobResource</code> objects that can include updated <code>S3Resource</code> objects or <code>LambdaResource</code> objects.</p>
    pub fn resources(mut self, input: crate::types::JobResource) -> Self {
        self.resources = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated arrays of <code>JobResource</code> objects that can include updated <code>S3Resource</code> objects or <code>LambdaResource</code> objects.</p>
    pub fn set_resources(mut self, input: ::std::option::Option<crate::types::JobResource>) -> Self {
        self.resources = input;
        self
    }
    /// <p>The updated arrays of <code>JobResource</code> objects that can include updated <code>S3Resource</code> objects or <code>LambdaResource</code> objects.</p>
    pub fn get_resources(&self) -> &::std::option::Option<crate::types::JobResource> {
        &self.resources
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS (Network File System).</p>
    pub fn on_device_service_configuration(mut self, input: crate::types::OnDeviceServiceConfiguration) -> Self {
        self.on_device_service_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS (Network File System).</p>
    pub fn set_on_device_service_configuration(mut self, input: ::std::option::Option<crate::types::OnDeviceServiceConfiguration>) -> Self {
        self.on_device_service_configuration = input;
        self
    }
    /// <p>Specifies the service or services on the Snow Family device that your transferred data will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS (Network File System).</p>
    pub fn get_on_device_service_configuration(&self) -> &::std::option::Option<crate::types::OnDeviceServiceConfiguration> {
        &self.on_device_service_configuration
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn address_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn set_address_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address_id = input;
        self
    }
    /// <p>The ID of the updated <code>Address</code> object.</p>
    pub fn get_address_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.address_id
    }
    /// <p>The updated shipping option value of this cluster's <code>ShippingDetails</code> object.</p>
    pub fn shipping_option(mut self, input: crate::types::ShippingOption) -> Self {
        self.shipping_option = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated shipping option value of this cluster's <code>ShippingDetails</code> object.</p>
    pub fn set_shipping_option(mut self, input: ::std::option::Option<crate::types::ShippingOption>) -> Self {
        self.shipping_option = input;
        self
    }
    /// <p>The updated shipping option value of this cluster's <code>ShippingDetails</code> object.</p>
    pub fn get_shipping_option(&self) -> &::std::option::Option<crate::types::ShippingOption> {
        &self.shipping_option
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn notification(mut self, input: crate::types::Notification) -> Self {
        self.notification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn set_notification(mut self, input: ::std::option::Option<crate::types::Notification>) -> Self {
        self.notification = input;
        self
    }
    /// <p>The new or updated <code>Notification</code> object.</p>
    pub fn get_notification(&self) -> &::std::option::Option<crate::types::Notification> {
        &self.notification
    }
    /// <p>The updated ID for the forwarding address for a cluster. This field is not supported in most regions.</p>
    pub fn forwarding_address_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forwarding_address_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated ID for the forwarding address for a cluster. This field is not supported in most regions.</p>
    pub fn set_forwarding_address_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forwarding_address_id = input;
        self
    }
    /// <p>The updated ID for the forwarding address for a cluster. This field is not supported in most regions.</p>
    pub fn get_forwarding_address_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.forwarding_address_id
    }
    /// Consumes the builder and constructs a [`UpdateClusterInput`](crate::operation::update_cluster::UpdateClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_cluster::UpdateClusterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_cluster::UpdateClusterInput {
            cluster_id: self.cluster_id,
            role_arn: self.role_arn,
            description: self.description,
            resources: self.resources,
            on_device_service_configuration: self.on_device_service_configuration,
            address_id: self.address_id,
            shipping_option: self.shipping_option,
            notification: self.notification,
            forwarding_address_id: self.forwarding_address_id,
        })
    }
}
