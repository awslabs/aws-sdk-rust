// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateJobShipmentStateInput {
    /// <p>The job ID of the job whose shipment date you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of a device when it is being shipped. </p>
    /// <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
    /// <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
    pub shipment_state: ::std::option::Option<crate::types::ShipmentState>,
}
impl UpdateJobShipmentStateInput {
    /// <p>The job ID of the job whose shipment date you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The state of a device when it is being shipped. </p>
    /// <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
    /// <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
    pub fn shipment_state(&self) -> ::std::option::Option<&crate::types::ShipmentState> {
        self.shipment_state.as_ref()
    }
}
impl UpdateJobShipmentStateInput {
    /// Creates a new builder-style object to manufacture [`UpdateJobShipmentStateInput`](crate::operation::update_job_shipment_state::UpdateJobShipmentStateInput).
    pub fn builder() -> crate::operation::update_job_shipment_state::builders::UpdateJobShipmentStateInputBuilder {
        crate::operation::update_job_shipment_state::builders::UpdateJobShipmentStateInputBuilder::default()
    }
}

/// A builder for [`UpdateJobShipmentStateInput`](crate::operation::update_job_shipment_state::UpdateJobShipmentStateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateJobShipmentStateInputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) shipment_state: ::std::option::Option<crate::types::ShipmentState>,
}
impl UpdateJobShipmentStateInputBuilder {
    /// <p>The job ID of the job whose shipment date you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job ID of the job whose shipment date you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The job ID of the job whose shipment date you want to update, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The state of a device when it is being shipped. </p>
    /// <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
    /// <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
    /// This field is required.
    pub fn shipment_state(mut self, input: crate::types::ShipmentState) -> Self {
        self.shipment_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of a device when it is being shipped. </p>
    /// <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
    /// <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
    pub fn set_shipment_state(mut self, input: ::std::option::Option<crate::types::ShipmentState>) -> Self {
        self.shipment_state = input;
        self
    }
    /// <p>The state of a device when it is being shipped. </p>
    /// <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
    /// <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
    pub fn get_shipment_state(&self) -> &::std::option::Option<crate::types::ShipmentState> {
        &self.shipment_state
    }
    /// Consumes the builder and constructs a [`UpdateJobShipmentStateInput`](crate::operation::update_job_shipment_state::UpdateJobShipmentStateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_job_shipment_state::UpdateJobShipmentStateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_job_shipment_state::UpdateJobShipmentStateInput {
            job_id: self.job_id,
            shipment_state: self.shipment_state,
        })
    }
}
