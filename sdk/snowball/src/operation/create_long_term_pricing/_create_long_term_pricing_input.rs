// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateLongTermPricingInput {
    /// <p>The type of long-term pricing option you want for the device, either 1-year or 3-year long-term pricing.</p>
    pub long_term_pricing_type: ::std::option::Option<crate::types::LongTermPricingType>,
    /// <p>Specifies whether the current long-term pricing type for the device should be renewed.</p>
    pub is_long_term_pricing_auto_renew: ::std::option::Option<bool>,
    /// <p>The type of Snow Family devices to use for the long-term pricing job.</p>
    pub snowball_type: ::std::option::Option<crate::types::SnowballType>,
}
impl CreateLongTermPricingInput {
    /// <p>The type of long-term pricing option you want for the device, either 1-year or 3-year long-term pricing.</p>
    pub fn long_term_pricing_type(&self) -> ::std::option::Option<&crate::types::LongTermPricingType> {
        self.long_term_pricing_type.as_ref()
    }
    /// <p>Specifies whether the current long-term pricing type for the device should be renewed.</p>
    pub fn is_long_term_pricing_auto_renew(&self) -> ::std::option::Option<bool> {
        self.is_long_term_pricing_auto_renew
    }
    /// <p>The type of Snow Family devices to use for the long-term pricing job.</p>
    pub fn snowball_type(&self) -> ::std::option::Option<&crate::types::SnowballType> {
        self.snowball_type.as_ref()
    }
}
impl CreateLongTermPricingInput {
    /// Creates a new builder-style object to manufacture [`CreateLongTermPricingInput`](crate::operation::create_long_term_pricing::CreateLongTermPricingInput).
    pub fn builder() -> crate::operation::create_long_term_pricing::builders::CreateLongTermPricingInputBuilder {
        crate::operation::create_long_term_pricing::builders::CreateLongTermPricingInputBuilder::default()
    }
}

/// A builder for [`CreateLongTermPricingInput`](crate::operation::create_long_term_pricing::CreateLongTermPricingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateLongTermPricingInputBuilder {
    pub(crate) long_term_pricing_type: ::std::option::Option<crate::types::LongTermPricingType>,
    pub(crate) is_long_term_pricing_auto_renew: ::std::option::Option<bool>,
    pub(crate) snowball_type: ::std::option::Option<crate::types::SnowballType>,
}
impl CreateLongTermPricingInputBuilder {
    /// <p>The type of long-term pricing option you want for the device, either 1-year or 3-year long-term pricing.</p>
    /// This field is required.
    pub fn long_term_pricing_type(mut self, input: crate::types::LongTermPricingType) -> Self {
        self.long_term_pricing_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of long-term pricing option you want for the device, either 1-year or 3-year long-term pricing.</p>
    pub fn set_long_term_pricing_type(mut self, input: ::std::option::Option<crate::types::LongTermPricingType>) -> Self {
        self.long_term_pricing_type = input;
        self
    }
    /// <p>The type of long-term pricing option you want for the device, either 1-year or 3-year long-term pricing.</p>
    pub fn get_long_term_pricing_type(&self) -> &::std::option::Option<crate::types::LongTermPricingType> {
        &self.long_term_pricing_type
    }
    /// <p>Specifies whether the current long-term pricing type for the device should be renewed.</p>
    pub fn is_long_term_pricing_auto_renew(mut self, input: bool) -> Self {
        self.is_long_term_pricing_auto_renew = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the current long-term pricing type for the device should be renewed.</p>
    pub fn set_is_long_term_pricing_auto_renew(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_long_term_pricing_auto_renew = input;
        self
    }
    /// <p>Specifies whether the current long-term pricing type for the device should be renewed.</p>
    pub fn get_is_long_term_pricing_auto_renew(&self) -> &::std::option::Option<bool> {
        &self.is_long_term_pricing_auto_renew
    }
    /// <p>The type of Snow Family devices to use for the long-term pricing job.</p>
    /// This field is required.
    pub fn snowball_type(mut self, input: crate::types::SnowballType) -> Self {
        self.snowball_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of Snow Family devices to use for the long-term pricing job.</p>
    pub fn set_snowball_type(mut self, input: ::std::option::Option<crate::types::SnowballType>) -> Self {
        self.snowball_type = input;
        self
    }
    /// <p>The type of Snow Family devices to use for the long-term pricing job.</p>
    pub fn get_snowball_type(&self) -> &::std::option::Option<crate::types::SnowballType> {
        &self.snowball_type
    }
    /// Consumes the builder and constructs a [`CreateLongTermPricingInput`](crate::operation::create_long_term_pricing::CreateLongTermPricingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_long_term_pricing::CreateLongTermPricingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_long_term_pricing::CreateLongTermPricingInput {
            long_term_pricing_type: self.long_term_pricing_type,
            is_long_term_pricing_auto_renew: self.is_long_term_pricing_auto_renew,
            snowball_type: self.snowball_type,
        })
    }
}
