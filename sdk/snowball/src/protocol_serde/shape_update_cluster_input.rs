// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_cluster::UpdateClusterInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.role_arn {
        object.key("RoleARN").string(var_2.as_str());
    }
    if let Some(var_3) = &input.description {
        object.key("Description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.resources {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Resources").start_object();
        crate::protocol_serde::shape_job_resource::ser_job_resource(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.on_device_service_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("OnDeviceServiceConfiguration").start_object();
        crate::protocol_serde::shape_on_device_service_configuration::ser_on_device_service_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.address_id {
        object.key("AddressId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.shipping_option {
        object.key("ShippingOption").string(var_9.as_str());
    }
    if let Some(var_10) = &input.notification {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Notification").start_object();
        crate::protocol_serde::shape_notification::ser_notification(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.forwarding_address_id {
        object.key("ForwardingAddressId").string(var_12.as_str());
    }
    Ok(())
}
