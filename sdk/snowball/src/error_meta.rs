// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    ClusterLimitExceededException(crate::error::ClusterLimitExceededException),
    ConflictException(crate::error::ConflictException),
    Ec2RequestFailedException(crate::error::Ec2RequestFailedException),
    InvalidAddressException(crate::error::InvalidAddressException),
    InvalidInputCombinationException(crate::error::InvalidInputCombinationException),
    InvalidJobStateException(crate::error::InvalidJobStateException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidResourceException(crate::error::InvalidResourceException),
    KmsRequestFailedException(crate::error::KmsRequestFailedException),
    ReturnShippingLabelAlreadyExistsException(
        crate::error::ReturnShippingLabelAlreadyExistsException,
    ),
    UnsupportedAddressException(crate::error::UnsupportedAddressException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ClusterLimitExceededException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::Ec2RequestFailedException(inner) => inner.fmt(f),
            Error::InvalidAddressException(inner) => inner.fmt(f),
            Error::InvalidInputCombinationException(inner) => inner.fmt(f),
            Error::InvalidJobStateException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidResourceException(inner) => inner.fmt(f),
            Error::KmsRequestFailedException(inner) => inner.fmt(f),
            Error::ReturnShippingLabelAlreadyExistsException(inner) => inner.fmt(f),
            Error::UnsupportedAddressException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelClusterErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::CancelClusterErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::CancelClusterErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::CancelClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CancelJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CancelJobErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::CancelJobErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::CancelJobErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::CancelJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateAddressErrorKind::InvalidAddressException(inner) => {
                    Error::InvalidAddressException(inner)
                }
                crate::error::CreateAddressErrorKind::UnsupportedAddressException(inner) => {
                    Error::UnsupportedAddressException(inner)
                }
                crate::error::CreateAddressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateClusterErrorKind::Ec2RequestFailedException(inner) => {
                    Error::Ec2RequestFailedException(inner)
                }
                crate::error::CreateClusterErrorKind::InvalidInputCombinationException(inner) => {
                    Error::InvalidInputCombinationException(inner)
                }
                crate::error::CreateClusterErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::CreateClusterErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::CreateClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateJobErrorKind::ClusterLimitExceededException(inner) => {
                    Error::ClusterLimitExceededException(inner)
                }
                crate::error::CreateJobErrorKind::Ec2RequestFailedException(inner) => {
                    Error::Ec2RequestFailedException(inner)
                }
                crate::error::CreateJobErrorKind::InvalidInputCombinationException(inner) => {
                    Error::InvalidInputCombinationException(inner)
                }
                crate::error::CreateJobErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::CreateJobErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::CreateJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLongTermPricingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLongTermPricingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLongTermPricingErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::CreateLongTermPricingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReturnShippingLabelError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CreateReturnShippingLabelError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateReturnShippingLabelErrorKind::ConflictException(inner) => Error::ConflictException(inner),
                crate::error::CreateReturnShippingLabelErrorKind::InvalidInputCombinationException(inner) => Error::InvalidInputCombinationException(inner),
                crate::error::CreateReturnShippingLabelErrorKind::InvalidJobStateException(inner) => Error::InvalidJobStateException(inner),
                crate::error::CreateReturnShippingLabelErrorKind::InvalidResourceException(inner) => Error::InvalidResourceException(inner),
                crate::error::CreateReturnShippingLabelErrorKind::ReturnShippingLabelAlreadyExistsException(inner) => Error::ReturnShippingLabelAlreadyExistsException(inner),
                crate::error::CreateReturnShippingLabelErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAddressErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::DescribeAddressErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeAddressesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeAddressesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeAddressesErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::DescribeAddressesErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::DescribeAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeClusterErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::DescribeClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeJobErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::DescribeJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReturnShippingLabelError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeReturnShippingLabelError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReturnShippingLabelErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::DescribeReturnShippingLabelErrorKind::InvalidJobStateException(
                    inner,
                ) => Error::InvalidJobStateException(inner),
                crate::error::DescribeReturnShippingLabelErrorKind::InvalidResourceException(
                    inner,
                ) => Error::InvalidResourceException(inner),
                crate::error::DescribeReturnShippingLabelErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetJobManifestError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetJobManifestError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetJobManifestErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::GetJobManifestErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::GetJobManifestErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetJobUnlockCodeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetJobUnlockCodeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetJobUnlockCodeErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::GetJobUnlockCodeErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::GetJobUnlockCodeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSnowballUsageError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSnowballUsageError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSnowballUsageErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSoftwareUpdatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSoftwareUpdatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSoftwareUpdatesErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::GetSoftwareUpdatesErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::GetSoftwareUpdatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListClusterJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListClusterJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListClusterJobsErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListClusterJobsErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::ListClusterJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListClustersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListClustersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListClustersErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListClustersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCompatibleImagesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListCompatibleImagesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCompatibleImagesErrorKind::Ec2RequestFailedException(inner) => {
                    Error::Ec2RequestFailedException(inner)
                }
                crate::error::ListCompatibleImagesErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListCompatibleImagesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListJobsErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListJobsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLongTermPricingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListLongTermPricingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLongTermPricingErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::ListLongTermPricingErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::ListLongTermPricingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateClusterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateClusterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateClusterErrorKind::Ec2RequestFailedException(inner) => {
                    Error::Ec2RequestFailedException(inner)
                }
                crate::error::UpdateClusterErrorKind::InvalidInputCombinationException(inner) => {
                    Error::InvalidInputCombinationException(inner)
                }
                crate::error::UpdateClusterErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::UpdateClusterErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::UpdateClusterErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::UpdateClusterErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateJobErrorKind::ClusterLimitExceededException(inner) => {
                    Error::ClusterLimitExceededException(inner)
                }
                crate::error::UpdateJobErrorKind::Ec2RequestFailedException(inner) => {
                    Error::Ec2RequestFailedException(inner)
                }
                crate::error::UpdateJobErrorKind::InvalidInputCombinationException(inner) => {
                    Error::InvalidInputCombinationException(inner)
                }
                crate::error::UpdateJobErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::UpdateJobErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::UpdateJobErrorKind::KmsRequestFailedException(inner) => {
                    Error::KmsRequestFailedException(inner)
                }
                crate::error::UpdateJobErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateJobShipmentStateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateJobShipmentStateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateJobShipmentStateErrorKind::InvalidJobStateException(inner) => {
                    Error::InvalidJobStateException(inner)
                }
                crate::error::UpdateJobShipmentStateErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::UpdateJobShipmentStateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateLongTermPricingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateLongTermPricingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateLongTermPricingErrorKind::InvalidResourceException(inner) => {
                    Error::InvalidResourceException(inner)
                }
                crate::error::UpdateLongTermPricingErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
