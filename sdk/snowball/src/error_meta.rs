// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Job creation failed. Currently, clusters support five nodes. If you have fewer than five nodes for your cluster and you have more nodes to create for this cluster, try again and create jobs until your cluster has exactly five nodes.</p>
    ClusterLimitExceededException(crate::error::ClusterLimitExceededException),
    /// <p>You get this exception when you call <code>CreateReturnShippingLabel</code> more than once when other requests are not completed.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Your IAM user lacks the necessary Amazon EC2 permissions to perform the attempted action.</p>
    Ec2RequestFailedException(crate::error::Ec2RequestFailedException),
    /// <p>The address provided was invalid. Check the address with your region's carrier, and try again.</p>
    InvalidAddressException(crate::error::InvalidAddressException),
    /// <p>Job or cluster creation failed. One or more inputs were invalid. Confirm that the <code>CreateClusterRequest$SnowballType</code> value supports your <code>CreateJobRequest$JobType</code>, and try again.</p>
    InvalidInputCombinationException(crate::error::InvalidInputCombinationException),
    /// <p>The action can't be performed because the job's current state doesn't allow that action to be performed.</p>
    InvalidJobStateException(crate::error::InvalidJobStateException),
    /// <p>The <code>NextToken</code> string was altered unexpectedly, and the operation has stopped. Run the operation without changing the <code>NextToken</code> string, and try again.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>The specified resource can't be found. Check the information you provided in your last request, and try again.</p>
    InvalidResourceException(crate::error::InvalidResourceException),
    /// <p>The provided Key Management Service key lacks the permissions to perform the specified <code>CreateJob</code> or <code>UpdateJob</code> action.</p>
    KmsRequestFailedException(crate::error::KmsRequestFailedException),
    /// <p>You get this exception if you call <code>CreateReturnShippingLabel</code> and a valid return shipping label already exists. In this case, use <code>DescribeReturnShippingLabel</code> to get the URL.</p>
    ReturnShippingLabelAlreadyExistsException(
        crate::error::ReturnShippingLabelAlreadyExistsException,
    ),
    /// <p>The address is either outside the serviceable area for your region, or an error occurred. Check the address with your region's carrier and try again. If the issue persists, contact Amazon Web Services Support.</p>
    UnsupportedAddressException(crate::error::UnsupportedAddressException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ClusterLimitExceededException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::Ec2RequestFailedException(inner) => inner.fmt(f),
            Error::InvalidAddressException(inner) => inner.fmt(f),
            Error::InvalidInputCombinationException(inner) => inner.fmt(f),
            Error::InvalidJobStateException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidResourceException(inner) => inner.fmt(f),
            Error::KmsRequestFailedException(inner) => inner.fmt(f),
            Error::ReturnShippingLabelAlreadyExistsException(inner) => inner.fmt(f),
            Error::UnsupportedAddressException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelClusterError> for Error {
    fn from(err: crate::error::CancelClusterError) -> Self {
        match err {
            crate::error::CancelClusterError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::CancelClusterError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::CancelClusterError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::CancelClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelJobError> for Error {
    fn from(err: crate::error::CancelJobError) -> Self {
        match err {
            crate::error::CancelJobError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::CancelJobError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::CancelJobError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::CancelJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAddressError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAddressError> for Error {
    fn from(err: crate::error::CreateAddressError) -> Self {
        match err {
            crate::error::CreateAddressError::InvalidAddressException(inner) => {
                Error::InvalidAddressException(inner)
            }
            crate::error::CreateAddressError::UnsupportedAddressException(inner) => {
                Error::UnsupportedAddressException(inner)
            }
            crate::error::CreateAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateClusterError> for Error {
    fn from(err: crate::error::CreateClusterError) -> Self {
        match err {
            crate::error::CreateClusterError::Ec2RequestFailedException(inner) => {
                Error::Ec2RequestFailedException(inner)
            }
            crate::error::CreateClusterError::InvalidInputCombinationException(inner) => {
                Error::InvalidInputCombinationException(inner)
            }
            crate::error::CreateClusterError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::CreateClusterError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::CreateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateJobError> for Error {
    fn from(err: crate::error::CreateJobError) -> Self {
        match err {
            crate::error::CreateJobError::ClusterLimitExceededException(inner) => {
                Error::ClusterLimitExceededException(inner)
            }
            crate::error::CreateJobError::Ec2RequestFailedException(inner) => {
                Error::Ec2RequestFailedException(inner)
            }
            crate::error::CreateJobError::InvalidInputCombinationException(inner) => {
                Error::InvalidInputCombinationException(inner)
            }
            crate::error::CreateJobError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::CreateJobError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::CreateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLongTermPricingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLongTermPricingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLongTermPricingError> for Error {
    fn from(err: crate::error::CreateLongTermPricingError) -> Self {
        match err {
            crate::error::CreateLongTermPricingError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::CreateLongTermPricingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateReturnShippingLabelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateReturnShippingLabelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReturnShippingLabelError> for Error {
    fn from(err: crate::error::CreateReturnShippingLabelError) -> Self {
        match err {
            crate::error::CreateReturnShippingLabelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateReturnShippingLabelError::InvalidInputCombinationException(inner) => Error::InvalidInputCombinationException(inner),
            crate::error::CreateReturnShippingLabelError::InvalidJobStateException(inner) => Error::InvalidJobStateException(inner),
            crate::error::CreateReturnShippingLabelError::InvalidResourceException(inner) => Error::InvalidResourceException(inner),
            crate::error::CreateReturnShippingLabelError::ReturnShippingLabelAlreadyExistsException(inner) => Error::ReturnShippingLabelAlreadyExistsException(inner),
            crate::error::CreateReturnShippingLabelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAddressError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeAddressError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAddressError> for Error {
    fn from(err: crate::error::DescribeAddressError) -> Self {
        match err {
            crate::error::DescribeAddressError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::DescribeAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAddressesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAddressesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAddressesError> for Error {
    fn from(err: crate::error::DescribeAddressesError) -> Self {
        match err {
            crate::error::DescribeAddressesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeAddressesError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::DescribeAddressesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeClusterError> for Error {
    fn from(err: crate::error::DescribeClusterError) -> Self {
        match err {
            crate::error::DescribeClusterError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::DescribeClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeJobError> for Error {
    fn from(err: crate::error::DescribeJobError) -> Self {
        match err {
            crate::error::DescribeJobError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::DescribeJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReturnShippingLabelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReturnShippingLabelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReturnShippingLabelError> for Error {
    fn from(err: crate::error::DescribeReturnShippingLabelError) -> Self {
        match err {
            crate::error::DescribeReturnShippingLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeReturnShippingLabelError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::DescribeReturnShippingLabelError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::DescribeReturnShippingLabelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJobManifestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetJobManifestError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJobManifestError> for Error {
    fn from(err: crate::error::GetJobManifestError) -> Self {
        match err {
            crate::error::GetJobManifestError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::GetJobManifestError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::GetJobManifestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetJobUnlockCodeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetJobUnlockCodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetJobUnlockCodeError> for Error {
    fn from(err: crate::error::GetJobUnlockCodeError) -> Self {
        match err {
            crate::error::GetJobUnlockCodeError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::GetJobUnlockCodeError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::GetJobUnlockCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSnowballUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSnowballUsageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSnowballUsageError> for Error {
    fn from(err: crate::error::GetSnowballUsageError) -> Self {
        match err {
            crate::error::GetSnowballUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSoftwareUpdatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSoftwareUpdatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSoftwareUpdatesError> for Error {
    fn from(err: crate::error::GetSoftwareUpdatesError) -> Self {
        match err {
            crate::error::GetSoftwareUpdatesError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::GetSoftwareUpdatesError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::GetSoftwareUpdatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClusterJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListClusterJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClusterJobsError> for Error {
    fn from(err: crate::error::ListClusterJobsError) -> Self {
        match err {
            crate::error::ListClusterJobsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListClusterJobsError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::ListClusterJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListClustersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClustersError> for Error {
    fn from(err: crate::error::ListClustersError) -> Self {
        match err {
            crate::error::ListClustersError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCompatibleImagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCompatibleImagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCompatibleImagesError> for Error {
    fn from(err: crate::error::ListCompatibleImagesError) -> Self {
        match err {
            crate::error::ListCompatibleImagesError::Ec2RequestFailedException(inner) => {
                Error::Ec2RequestFailedException(inner)
            }
            crate::error::ListCompatibleImagesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListCompatibleImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListJobsError> for Error {
    fn from(err: crate::error::ListJobsError) -> Self {
        match err {
            crate::error::ListJobsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLongTermPricingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLongTermPricingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLongTermPricingError> for Error {
    fn from(err: crate::error::ListLongTermPricingError) -> Self {
        match err {
            crate::error::ListLongTermPricingError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListLongTermPricingError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::ListLongTermPricingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClusterError> for Error {
    fn from(err: crate::error::UpdateClusterError) -> Self {
        match err {
            crate::error::UpdateClusterError::Ec2RequestFailedException(inner) => {
                Error::Ec2RequestFailedException(inner)
            }
            crate::error::UpdateClusterError::InvalidInputCombinationException(inner) => {
                Error::InvalidInputCombinationException(inner)
            }
            crate::error::UpdateClusterError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::UpdateClusterError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::UpdateClusterError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::UpdateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateJobError> for Error {
    fn from(err: crate::error::UpdateJobError) -> Self {
        match err {
            crate::error::UpdateJobError::ClusterLimitExceededException(inner) => {
                Error::ClusterLimitExceededException(inner)
            }
            crate::error::UpdateJobError::Ec2RequestFailedException(inner) => {
                Error::Ec2RequestFailedException(inner)
            }
            crate::error::UpdateJobError::InvalidInputCombinationException(inner) => {
                Error::InvalidInputCombinationException(inner)
            }
            crate::error::UpdateJobError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::UpdateJobError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::UpdateJobError::KmsRequestFailedException(inner) => {
                Error::KmsRequestFailedException(inner)
            }
            crate::error::UpdateJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateJobShipmentStateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateJobShipmentStateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateJobShipmentStateError> for Error {
    fn from(err: crate::error::UpdateJobShipmentStateError) -> Self {
        match err {
            crate::error::UpdateJobShipmentStateError::InvalidJobStateException(inner) => {
                Error::InvalidJobStateException(inner)
            }
            crate::error::UpdateJobShipmentStateError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::UpdateJobShipmentStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLongTermPricingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateLongTermPricingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLongTermPricingError> for Error {
    fn from(err: crate::error::UpdateLongTermPricingError) -> Self {
        match err {
            crate::error::UpdateLongTermPricingError::InvalidResourceException(inner) => {
                Error::InvalidResourceException(inner)
            }
            crate::error::UpdateLongTermPricingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ClusterLimitExceededException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::Ec2RequestFailedException(e) => e.request_id(),
            Self::InvalidAddressException(e) => e.request_id(),
            Self::InvalidInputCombinationException(e) => e.request_id(),
            Self::InvalidJobStateException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidResourceException(e) => e.request_id(),
            Self::KmsRequestFailedException(e) => e.request_id(),
            Self::ReturnShippingLabelAlreadyExistsException(e) => e.request_id(),
            Self::UnsupportedAddressException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
