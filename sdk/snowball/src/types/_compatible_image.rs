// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON-formatted object that describes a compatible Amazon Machine Image (AMI), including the ID and name for a Snow device AMI. This AMI is compatible with the device's physical hardware requirements, and it should be able to be run in an SBE1 instance on the device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CompatibleImage {
    /// <p>The unique identifier for an individual Snow device AMI.</p>
    #[doc(hidden)]
    pub ami_id: std::option::Option<std::string::String>,
    /// <p>The optional name of a compatible image.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl CompatibleImage {
    /// <p>The unique identifier for an individual Snow device AMI.</p>
    pub fn ami_id(&self) -> std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The optional name of a compatible image.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl CompatibleImage {
    /// Creates a new builder-style object to manufacture [`CompatibleImage`](crate::types::CompatibleImage).
    pub fn builder() -> crate::types::builders::CompatibleImageBuilder {
        crate::types::builders::CompatibleImageBuilder::default()
    }
}

/// A builder for [`CompatibleImage`](crate::types::CompatibleImage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CompatibleImageBuilder {
    pub(crate) ami_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl CompatibleImageBuilder {
    /// <p>The unique identifier for an individual Snow device AMI.</p>
    pub fn ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ami_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for an individual Snow device AMI.</p>
    pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The optional name of a compatible image.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The optional name of a compatible image.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`CompatibleImage`](crate::types::CompatibleImage).
    pub fn build(self) -> crate::types::CompatibleImage {
        crate::types::CompatibleImage {
            ami_id: self.ami_id,
            name: self.name,
        }
    }
}
