// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `JobState`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let jobstate = unimplemented!();
/// match jobstate {
///     JobState::Cancelled => { /* ... */ },
///     JobState::Complete => { /* ... */ },
///     JobState::InProgress => { /* ... */ },
///     JobState::InTransitToAws => { /* ... */ },
///     JobState::InTransitToCustomer => { /* ... */ },
///     JobState::Listing => { /* ... */ },
///     JobState::New => { /* ... */ },
///     JobState::Pending => { /* ... */ },
///     JobState::PreparingAppliance => { /* ... */ },
///     JobState::PreparingShipment => { /* ... */ },
///     JobState::WithAws => { /* ... */ },
///     JobState::WithAwsSortingFacility => { /* ... */ },
///     JobState::WithCustomer => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `jobstate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `JobState::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `JobState::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `JobState::NewFeature` is defined.
/// Specifically, when `jobstate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `JobState::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum JobState {
    #[allow(missing_docs)] // documentation missing in model
    Cancelled,
    #[allow(missing_docs)] // documentation missing in model
    Complete,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    InTransitToAws,
    #[allow(missing_docs)] // documentation missing in model
    InTransitToCustomer,
    #[allow(missing_docs)] // documentation missing in model
    Listing,
    #[allow(missing_docs)] // documentation missing in model
    New,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    PreparingAppliance,
    #[allow(missing_docs)] // documentation missing in model
    PreparingShipment,
    #[allow(missing_docs)] // documentation missing in model
    WithAws,
    #[allow(missing_docs)] // documentation missing in model
    WithAwsSortingFacility,
    #[allow(missing_docs)] // documentation missing in model
    WithCustomer,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for JobState {
    fn from(s: &str) -> Self {
        match s {
            "Cancelled" => JobState::Cancelled,
            "Complete" => JobState::Complete,
            "InProgress" => JobState::InProgress,
            "InTransitToAWS" => JobState::InTransitToAws,
            "InTransitToCustomer" => JobState::InTransitToCustomer,
            "Listing" => JobState::Listing,
            "New" => JobState::New,
            "Pending" => JobState::Pending,
            "PreparingAppliance" => JobState::PreparingAppliance,
            "PreparingShipment" => JobState::PreparingShipment,
            "WithAWS" => JobState::WithAws,
            "WithAWSSortingFacility" => JobState::WithAwsSortingFacility,
            "WithCustomer" => JobState::WithCustomer,
            other => JobState::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for JobState {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(JobState::from(s))
    }
}
impl JobState {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            JobState::Cancelled => "Cancelled",
            JobState::Complete => "Complete",
            JobState::InProgress => "InProgress",
            JobState::InTransitToAws => "InTransitToAWS",
            JobState::InTransitToCustomer => "InTransitToCustomer",
            JobState::Listing => "Listing",
            JobState::New => "New",
            JobState::Pending => "Pending",
            JobState::PreparingAppliance => "PreparingAppliance",
            JobState::PreparingShipment => "PreparingShipment",
            JobState::WithAws => "WithAWS",
            JobState::WithAwsSortingFacility => "WithAWSSortingFacility",
            JobState::WithCustomer => "WithCustomer",
            JobState::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Cancelled",
            "Complete",
            "InProgress",
            "InTransitToAWS",
            "InTransitToCustomer",
            "Listing",
            "New",
            "Pending",
            "PreparingAppliance",
            "PreparingShipment",
            "WithAWS",
            "WithAWSSortingFacility",
            "WithCustomer",
        ]
    }
}
impl AsRef<str> for JobState {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
