// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures the wireless connection on an Snowcone device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WirelessConnection {
    /// <p>Enables the Wi-Fi adapter on an Snowcone device.</p>
    #[doc(hidden)]
    pub is_wifi_enabled: bool,
}
impl WirelessConnection {
    /// <p>Enables the Wi-Fi adapter on an Snowcone device.</p>
    pub fn is_wifi_enabled(&self) -> bool {
        self.is_wifi_enabled
    }
}
impl WirelessConnection {
    /// Creates a new builder-style object to manufacture [`WirelessConnection`](crate::types::WirelessConnection).
    pub fn builder() -> crate::types::builders::WirelessConnectionBuilder {
        crate::types::builders::WirelessConnectionBuilder::default()
    }
}

/// A builder for [`WirelessConnection`](crate::types::WirelessConnection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WirelessConnectionBuilder {
    pub(crate) is_wifi_enabled: std::option::Option<bool>,
}
impl WirelessConnectionBuilder {
    /// <p>Enables the Wi-Fi adapter on an Snowcone device.</p>
    pub fn is_wifi_enabled(mut self, input: bool) -> Self {
        self.is_wifi_enabled = Some(input);
        self
    }
    /// <p>Enables the Wi-Fi adapter on an Snowcone device.</p>
    pub fn set_is_wifi_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.is_wifi_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`WirelessConnection`](crate::types::WirelessConnection).
    pub fn build(self) -> crate::types::WirelessConnection {
        crate::types::WirelessConnection {
            is_wifi_enabled: self.is_wifi_enabled.unwrap_or_default(),
        }
    }
}
