// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of an export job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobListEntry {
    /// <p>The automatically generated ID for a job, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The current state of this job.</p>
    #[doc(hidden)]
    pub job_state: std::option::Option<crate::types::JobState>,
    /// <p>A value that indicates that this job is a main job. A main job represents a successful request to create an export job. Main jobs aren't associated with any Snowballs. Instead, each main job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular main job are listed, because they are created after the main job is created.</p>
    #[doc(hidden)]
    pub is_master: bool,
    /// <p>The type of job.</p>
    #[doc(hidden)]
    pub job_type: std::option::Option<crate::types::JobType>,
    /// <p>The type of device used with this job.</p>
    #[doc(hidden)]
    pub snowball_type: std::option::Option<crate::types::SnowballType>,
    /// <p>The creation date for this job.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The optional description of this specific job, for example <code>Important Photos 2016-08-11</code>.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl JobListEntry {
    /// <p>The automatically generated ID for a job, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The current state of this job.</p>
    pub fn job_state(&self) -> std::option::Option<&crate::types::JobState> {
        self.job_state.as_ref()
    }
    /// <p>A value that indicates that this job is a main job. A main job represents a successful request to create an export job. Main jobs aren't associated with any Snowballs. Instead, each main job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular main job are listed, because they are created after the main job is created.</p>
    pub fn is_master(&self) -> bool {
        self.is_master
    }
    /// <p>The type of job.</p>
    pub fn job_type(&self) -> std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p>The type of device used with this job.</p>
    pub fn snowball_type(&self) -> std::option::Option<&crate::types::SnowballType> {
        self.snowball_type.as_ref()
    }
    /// <p>The creation date for this job.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The optional description of this specific job, for example <code>Important Photos 2016-08-11</code>.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl JobListEntry {
    /// Creates a new builder-style object to manufacture [`JobListEntry`](crate::types::JobListEntry).
    pub fn builder() -> crate::types::builders::JobListEntryBuilder {
        crate::types::builders::JobListEntryBuilder::default()
    }
}

/// A builder for [`JobListEntry`](crate::types::JobListEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobListEntryBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_state: std::option::Option<crate::types::JobState>,
    pub(crate) is_master: std::option::Option<bool>,
    pub(crate) job_type: std::option::Option<crate::types::JobType>,
    pub(crate) snowball_type: std::option::Option<crate::types::SnowballType>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl JobListEntryBuilder {
    /// <p>The automatically generated ID for a job, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The automatically generated ID for a job, for example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The current state of this job.</p>
    pub fn job_state(mut self, input: crate::types::JobState) -> Self {
        self.job_state = Some(input);
        self
    }
    /// <p>The current state of this job.</p>
    pub fn set_job_state(mut self, input: std::option::Option<crate::types::JobState>) -> Self {
        self.job_state = input;
        self
    }
    /// <p>A value that indicates that this job is a main job. A main job represents a successful request to create an export job. Main jobs aren't associated with any Snowballs. Instead, each main job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular main job are listed, because they are created after the main job is created.</p>
    pub fn is_master(mut self, input: bool) -> Self {
        self.is_master = Some(input);
        self
    }
    /// <p>A value that indicates that this job is a main job. A main job represents a successful request to create an export job. Main jobs aren't associated with any Snowballs. Instead, each main job will have at least one job part, and each job part is associated with a Snowball. It might take some time before the job parts associated with a particular main job are listed, because they are created after the main job is created.</p>
    pub fn set_is_master(mut self, input: std::option::Option<bool>) -> Self {
        self.is_master = input;
        self
    }
    /// <p>The type of job.</p>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = Some(input);
        self
    }
    /// <p>The type of job.</p>
    pub fn set_job_type(mut self, input: std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>The type of device used with this job.</p>
    pub fn snowball_type(mut self, input: crate::types::SnowballType) -> Self {
        self.snowball_type = Some(input);
        self
    }
    /// <p>The type of device used with this job.</p>
    pub fn set_snowball_type(
        mut self,
        input: std::option::Option<crate::types::SnowballType>,
    ) -> Self {
        self.snowball_type = input;
        self
    }
    /// <p>The creation date for this job.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The creation date for this job.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The optional description of this specific job, for example <code>Important Photos 2016-08-11</code>.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The optional description of this specific job, for example <code>Important Photos 2016-08-11</code>.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`JobListEntry`](crate::types::JobListEntry).
    pub fn build(self) -> crate::types::JobListEntry {
        crate::types::JobListEntry {
            job_id: self.job_id,
            job_state: self.job_state,
            is_master: self.is_master.unwrap_or_default(),
            job_type: self.job_type,
            snowball_type: self.snowball_type,
            creation_date: self.creation_date,
            description: self.description,
        }
    }
}
