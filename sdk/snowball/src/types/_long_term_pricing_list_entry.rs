// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each <code>LongTermPricingListEntry</code> object contains information about a long-term pricing type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LongTermPricingListEntry {
    /// <p>The ID of the long-term pricing type for the device.</p>
    #[doc(hidden)]
    pub long_term_pricing_id: std::option::Option<std::string::String>,
    /// <p>The end date the long-term pricing contract.</p>
    #[doc(hidden)]
    pub long_term_pricing_end_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The start date of the long-term pricing contract.</p>
    #[doc(hidden)]
    pub long_term_pricing_start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of long-term pricing that was selected for the device.</p>
    #[doc(hidden)]
    pub long_term_pricing_type: std::option::Option<crate::types::LongTermPricingType>,
    /// <p>The current active jobs on the device the long-term pricing type.</p>
    #[doc(hidden)]
    pub current_active_job: std::option::Option<std::string::String>,
    /// <p>A new device that replaces a device that is ordered with long-term pricing.</p>
    #[doc(hidden)]
    pub replacement_job: std::option::Option<std::string::String>,
    /// <p>If set to <code>true</code>, specifies that the current long-term pricing type for the device should be automatically renewed before the long-term pricing contract expires.</p>
    #[doc(hidden)]
    pub is_long_term_pricing_auto_renew: std::option::Option<bool>,
    /// <p>The status of the long-term pricing type.</p>
    #[doc(hidden)]
    pub long_term_pricing_status: std::option::Option<std::string::String>,
    /// <p>The type of Snow Family devices associated with this long-term pricing job.</p>
    #[doc(hidden)]
    pub snowball_type: std::option::Option<crate::types::SnowballType>,
    /// <p>The IDs of the jobs that are associated with a long-term pricing type.</p>
    #[doc(hidden)]
    pub job_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LongTermPricingListEntry {
    /// <p>The ID of the long-term pricing type for the device.</p>
    pub fn long_term_pricing_id(&self) -> std::option::Option<&str> {
        self.long_term_pricing_id.as_deref()
    }
    /// <p>The end date the long-term pricing contract.</p>
    pub fn long_term_pricing_end_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.long_term_pricing_end_date.as_ref()
    }
    /// <p>The start date of the long-term pricing contract.</p>
    pub fn long_term_pricing_start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.long_term_pricing_start_date.as_ref()
    }
    /// <p>The type of long-term pricing that was selected for the device.</p>
    pub fn long_term_pricing_type(
        &self,
    ) -> std::option::Option<&crate::types::LongTermPricingType> {
        self.long_term_pricing_type.as_ref()
    }
    /// <p>The current active jobs on the device the long-term pricing type.</p>
    pub fn current_active_job(&self) -> std::option::Option<&str> {
        self.current_active_job.as_deref()
    }
    /// <p>A new device that replaces a device that is ordered with long-term pricing.</p>
    pub fn replacement_job(&self) -> std::option::Option<&str> {
        self.replacement_job.as_deref()
    }
    /// <p>If set to <code>true</code>, specifies that the current long-term pricing type for the device should be automatically renewed before the long-term pricing contract expires.</p>
    pub fn is_long_term_pricing_auto_renew(&self) -> std::option::Option<bool> {
        self.is_long_term_pricing_auto_renew
    }
    /// <p>The status of the long-term pricing type.</p>
    pub fn long_term_pricing_status(&self) -> std::option::Option<&str> {
        self.long_term_pricing_status.as_deref()
    }
    /// <p>The type of Snow Family devices associated with this long-term pricing job.</p>
    pub fn snowball_type(&self) -> std::option::Option<&crate::types::SnowballType> {
        self.snowball_type.as_ref()
    }
    /// <p>The IDs of the jobs that are associated with a long-term pricing type.</p>
    pub fn job_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.job_ids.as_deref()
    }
}
impl LongTermPricingListEntry {
    /// Creates a new builder-style object to manufacture [`LongTermPricingListEntry`](crate::types::LongTermPricingListEntry).
    pub fn builder() -> crate::types::builders::LongTermPricingListEntryBuilder {
        crate::types::builders::LongTermPricingListEntryBuilder::default()
    }
}

/// A builder for [`LongTermPricingListEntry`](crate::types::LongTermPricingListEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LongTermPricingListEntryBuilder {
    pub(crate) long_term_pricing_id: std::option::Option<std::string::String>,
    pub(crate) long_term_pricing_end_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) long_term_pricing_start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) long_term_pricing_type: std::option::Option<crate::types::LongTermPricingType>,
    pub(crate) current_active_job: std::option::Option<std::string::String>,
    pub(crate) replacement_job: std::option::Option<std::string::String>,
    pub(crate) is_long_term_pricing_auto_renew: std::option::Option<bool>,
    pub(crate) long_term_pricing_status: std::option::Option<std::string::String>,
    pub(crate) snowball_type: std::option::Option<crate::types::SnowballType>,
    pub(crate) job_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LongTermPricingListEntryBuilder {
    /// <p>The ID of the long-term pricing type for the device.</p>
    pub fn long_term_pricing_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.long_term_pricing_id = Some(input.into());
        self
    }
    /// <p>The ID of the long-term pricing type for the device.</p>
    pub fn set_long_term_pricing_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.long_term_pricing_id = input;
        self
    }
    /// <p>The end date the long-term pricing contract.</p>
    pub fn long_term_pricing_end_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.long_term_pricing_end_date = Some(input);
        self
    }
    /// <p>The end date the long-term pricing contract.</p>
    pub fn set_long_term_pricing_end_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.long_term_pricing_end_date = input;
        self
    }
    /// <p>The start date of the long-term pricing contract.</p>
    pub fn long_term_pricing_start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.long_term_pricing_start_date = Some(input);
        self
    }
    /// <p>The start date of the long-term pricing contract.</p>
    pub fn set_long_term_pricing_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.long_term_pricing_start_date = input;
        self
    }
    /// <p>The type of long-term pricing that was selected for the device.</p>
    pub fn long_term_pricing_type(mut self, input: crate::types::LongTermPricingType) -> Self {
        self.long_term_pricing_type = Some(input);
        self
    }
    /// <p>The type of long-term pricing that was selected for the device.</p>
    pub fn set_long_term_pricing_type(
        mut self,
        input: std::option::Option<crate::types::LongTermPricingType>,
    ) -> Self {
        self.long_term_pricing_type = input;
        self
    }
    /// <p>The current active jobs on the device the long-term pricing type.</p>
    pub fn current_active_job(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_active_job = Some(input.into());
        self
    }
    /// <p>The current active jobs on the device the long-term pricing type.</p>
    pub fn set_current_active_job(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.current_active_job = input;
        self
    }
    /// <p>A new device that replaces a device that is ordered with long-term pricing.</p>
    pub fn replacement_job(mut self, input: impl Into<std::string::String>) -> Self {
        self.replacement_job = Some(input.into());
        self
    }
    /// <p>A new device that replaces a device that is ordered with long-term pricing.</p>
    pub fn set_replacement_job(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.replacement_job = input;
        self
    }
    /// <p>If set to <code>true</code>, specifies that the current long-term pricing type for the device should be automatically renewed before the long-term pricing contract expires.</p>
    pub fn is_long_term_pricing_auto_renew(mut self, input: bool) -> Self {
        self.is_long_term_pricing_auto_renew = Some(input);
        self
    }
    /// <p>If set to <code>true</code>, specifies that the current long-term pricing type for the device should be automatically renewed before the long-term pricing contract expires.</p>
    pub fn set_is_long_term_pricing_auto_renew(mut self, input: std::option::Option<bool>) -> Self {
        self.is_long_term_pricing_auto_renew = input;
        self
    }
    /// <p>The status of the long-term pricing type.</p>
    pub fn long_term_pricing_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.long_term_pricing_status = Some(input.into());
        self
    }
    /// <p>The status of the long-term pricing type.</p>
    pub fn set_long_term_pricing_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.long_term_pricing_status = input;
        self
    }
    /// <p>The type of Snow Family devices associated with this long-term pricing job.</p>
    pub fn snowball_type(mut self, input: crate::types::SnowballType) -> Self {
        self.snowball_type = Some(input);
        self
    }
    /// <p>The type of Snow Family devices associated with this long-term pricing job.</p>
    pub fn set_snowball_type(
        mut self,
        input: std::option::Option<crate::types::SnowballType>,
    ) -> Self {
        self.snowball_type = input;
        self
    }
    /// Appends an item to `job_ids`.
    ///
    /// To override the contents of this collection use [`set_job_ids`](Self::set_job_ids).
    ///
    /// <p>The IDs of the jobs that are associated with a long-term pricing type.</p>
    pub fn job_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.job_ids.unwrap_or_default();
        v.push(input.into());
        self.job_ids = Some(v);
        self
    }
    /// <p>The IDs of the jobs that are associated with a long-term pricing type.</p>
    pub fn set_job_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.job_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`LongTermPricingListEntry`](crate::types::LongTermPricingListEntry).
    pub fn build(self) -> crate::types::LongTermPricingListEntry {
        crate::types::LongTermPricingListEntry {
            long_term_pricing_id: self.long_term_pricing_id,
            long_term_pricing_end_date: self.long_term_pricing_end_date,
            long_term_pricing_start_date: self.long_term_pricing_start_date,
            long_term_pricing_type: self.long_term_pricing_type,
            current_active_job: self.current_active_job,
            replacement_job: self.replacement_job,
            is_long_term_pricing_auto_renew: self.is_long_term_pricing_auto_renew,
            long_term_pricing_status: self.long_term_pricing_status,
            snowball_type: self.snowball_type,
            job_ids: self.job_ids,
        }
    }
}
