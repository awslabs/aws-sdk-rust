// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON-formatted object that contains the IDs for an Amazon Machine Image (AMI), including the Amazon EC2 AMI ID and the Snow device AMI ID. Each AMI has these two IDs to simplify identifying the AMI in both the Amazon Web Services Cloud and on the device.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2AmiResource {
    /// <p>The ID of the AMI in Amazon EC2.</p>
    #[doc(hidden)]
    pub ami_id: std::option::Option<std::string::String>,
    /// <p>The ID of the AMI on the Snow device.</p>
    #[doc(hidden)]
    pub snowball_ami_id: std::option::Option<std::string::String>,
}
impl Ec2AmiResource {
    /// <p>The ID of the AMI in Amazon EC2.</p>
    pub fn ami_id(&self) -> std::option::Option<&str> {
        self.ami_id.as_deref()
    }
    /// <p>The ID of the AMI on the Snow device.</p>
    pub fn snowball_ami_id(&self) -> std::option::Option<&str> {
        self.snowball_ami_id.as_deref()
    }
}
impl Ec2AmiResource {
    /// Creates a new builder-style object to manufacture [`Ec2AmiResource`](crate::types::Ec2AmiResource).
    pub fn builder() -> crate::types::builders::Ec2AmiResourceBuilder {
        crate::types::builders::Ec2AmiResourceBuilder::default()
    }
}

/// A builder for [`Ec2AmiResource`](crate::types::Ec2AmiResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2AmiResourceBuilder {
    pub(crate) ami_id: std::option::Option<std::string::String>,
    pub(crate) snowball_ami_id: std::option::Option<std::string::String>,
}
impl Ec2AmiResourceBuilder {
    /// <p>The ID of the AMI in Amazon EC2.</p>
    pub fn ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ami_id = Some(input.into());
        self
    }
    /// <p>The ID of the AMI in Amazon EC2.</p>
    pub fn set_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ami_id = input;
        self
    }
    /// <p>The ID of the AMI on the Snow device.</p>
    pub fn snowball_ami_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snowball_ami_id = Some(input.into());
        self
    }
    /// <p>The ID of the AMI on the Snow device.</p>
    pub fn set_snowball_ami_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snowball_ami_id = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2AmiResource`](crate::types::Ec2AmiResource).
    pub fn build(self) -> crate::types::Ec2AmiResource {
        crate::types::Ec2AmiResource {
            ami_id: self.ami_id,
            snowball_ami_id: self.snowball_ami_id,
        }
    }
}
