// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the real-time status of a Snow device's data transfer while the device is at Amazon Web Services. This data is only available while a job has a <code>JobState</code> value of <code>InProgress</code>, for both import and export jobs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataTransfer {
    /// <p>The number of bytes transferred between a Snow device and Amazon S3.</p>
    #[doc(hidden)]
    pub bytes_transferred: i64,
    /// <p>The number of objects transferred between a Snow device and Amazon S3.</p>
    #[doc(hidden)]
    pub objects_transferred: i64,
    /// <p>The total bytes of data for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    #[doc(hidden)]
    pub total_bytes: i64,
    /// <p>The total number of objects for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    #[doc(hidden)]
    pub total_objects: i64,
}
impl DataTransfer {
    /// <p>The number of bytes transferred between a Snow device and Amazon S3.</p>
    pub fn bytes_transferred(&self) -> i64 {
        self.bytes_transferred
    }
    /// <p>The number of objects transferred between a Snow device and Amazon S3.</p>
    pub fn objects_transferred(&self) -> i64 {
        self.objects_transferred
    }
    /// <p>The total bytes of data for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn total_bytes(&self) -> i64 {
        self.total_bytes
    }
    /// <p>The total number of objects for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn total_objects(&self) -> i64 {
        self.total_objects
    }
}
impl DataTransfer {
    /// Creates a new builder-style object to manufacture [`DataTransfer`](crate::types::DataTransfer).
    pub fn builder() -> crate::types::builders::DataTransferBuilder {
        crate::types::builders::DataTransferBuilder::default()
    }
}

/// A builder for [`DataTransfer`](crate::types::DataTransfer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataTransferBuilder {
    pub(crate) bytes_transferred: std::option::Option<i64>,
    pub(crate) objects_transferred: std::option::Option<i64>,
    pub(crate) total_bytes: std::option::Option<i64>,
    pub(crate) total_objects: std::option::Option<i64>,
}
impl DataTransferBuilder {
    /// <p>The number of bytes transferred between a Snow device and Amazon S3.</p>
    pub fn bytes_transferred(mut self, input: i64) -> Self {
        self.bytes_transferred = Some(input);
        self
    }
    /// <p>The number of bytes transferred between a Snow device and Amazon S3.</p>
    pub fn set_bytes_transferred(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_transferred = input;
        self
    }
    /// <p>The number of objects transferred between a Snow device and Amazon S3.</p>
    pub fn objects_transferred(mut self, input: i64) -> Self {
        self.objects_transferred = Some(input);
        self
    }
    /// <p>The number of objects transferred between a Snow device and Amazon S3.</p>
    pub fn set_objects_transferred(mut self, input: std::option::Option<i64>) -> Self {
        self.objects_transferred = input;
        self
    }
    /// <p>The total bytes of data for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn total_bytes(mut self, input: i64) -> Self {
        self.total_bytes = Some(input);
        self
    }
    /// <p>The total bytes of data for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn set_total_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.total_bytes = input;
        self
    }
    /// <p>The total number of objects for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn total_objects(mut self, input: i64) -> Self {
        self.total_objects = Some(input);
        self
    }
    /// <p>The total number of objects for a transfer between a Snow device and Amazon S3. This value is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
    pub fn set_total_objects(mut self, input: std::option::Option<i64>) -> Self {
        self.total_objects = input;
        self
    }
    /// Consumes the builder and constructs a [`DataTransfer`](crate::types::DataTransfer).
    pub fn build(self) -> crate::types::DataTransfer {
        crate::types::DataTransfer {
            bytes_transferred: self.bytes_transferred.unwrap_or_default(),
            objects_transferred: self.objects_transferred.unwrap_or_default(),
            total_bytes: self.total_bytes.unwrap_or_default(),
            total_objects: self.total_objects.unwrap_or_default(),
        }
    }
}
