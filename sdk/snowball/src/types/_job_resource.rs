// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains an array of Amazon Web Services resource objects. Each object represents an Amazon S3 bucket, an Lambda function, or an Amazon Machine Image (AMI) based on Amazon EC2 that is associated with a particular job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobResource {
    /// <p>An array of <code>S3Resource</code> objects.</p>
    #[doc(hidden)]
    pub s3_resources: std::option::Option<std::vec::Vec<crate::types::S3Resource>>,
    /// <p>The Python-language Lambda functions for this job.</p>
    #[doc(hidden)]
    pub lambda_resources: std::option::Option<std::vec::Vec<crate::types::LambdaResource>>,
    /// <p>The Amazon Machine Images (AMIs) associated with this job.</p>
    #[doc(hidden)]
    pub ec2_ami_resources: std::option::Option<std::vec::Vec<crate::types::Ec2AmiResource>>,
}
impl JobResource {
    /// <p>An array of <code>S3Resource</code> objects.</p>
    pub fn s3_resources(&self) -> std::option::Option<&[crate::types::S3Resource]> {
        self.s3_resources.as_deref()
    }
    /// <p>The Python-language Lambda functions for this job.</p>
    pub fn lambda_resources(&self) -> std::option::Option<&[crate::types::LambdaResource]> {
        self.lambda_resources.as_deref()
    }
    /// <p>The Amazon Machine Images (AMIs) associated with this job.</p>
    pub fn ec2_ami_resources(&self) -> std::option::Option<&[crate::types::Ec2AmiResource]> {
        self.ec2_ami_resources.as_deref()
    }
}
impl JobResource {
    /// Creates a new builder-style object to manufacture [`JobResource`](crate::types::JobResource).
    pub fn builder() -> crate::types::builders::JobResourceBuilder {
        crate::types::builders::JobResourceBuilder::default()
    }
}

/// A builder for [`JobResource`](crate::types::JobResource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobResourceBuilder {
    pub(crate) s3_resources: std::option::Option<std::vec::Vec<crate::types::S3Resource>>,
    pub(crate) lambda_resources: std::option::Option<std::vec::Vec<crate::types::LambdaResource>>,
    pub(crate) ec2_ami_resources: std::option::Option<std::vec::Vec<crate::types::Ec2AmiResource>>,
}
impl JobResourceBuilder {
    /// Appends an item to `s3_resources`.
    ///
    /// To override the contents of this collection use [`set_s3_resources`](Self::set_s3_resources).
    ///
    /// <p>An array of <code>S3Resource</code> objects.</p>
    pub fn s3_resources(mut self, input: crate::types::S3Resource) -> Self {
        let mut v = self.s3_resources.unwrap_or_default();
        v.push(input);
        self.s3_resources = Some(v);
        self
    }
    /// <p>An array of <code>S3Resource</code> objects.</p>
    pub fn set_s3_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::S3Resource>>,
    ) -> Self {
        self.s3_resources = input;
        self
    }
    /// Appends an item to `lambda_resources`.
    ///
    /// To override the contents of this collection use [`set_lambda_resources`](Self::set_lambda_resources).
    ///
    /// <p>The Python-language Lambda functions for this job.</p>
    pub fn lambda_resources(mut self, input: crate::types::LambdaResource) -> Self {
        let mut v = self.lambda_resources.unwrap_or_default();
        v.push(input);
        self.lambda_resources = Some(v);
        self
    }
    /// <p>The Python-language Lambda functions for this job.</p>
    pub fn set_lambda_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LambdaResource>>,
    ) -> Self {
        self.lambda_resources = input;
        self
    }
    /// Appends an item to `ec2_ami_resources`.
    ///
    /// To override the contents of this collection use [`set_ec2_ami_resources`](Self::set_ec2_ami_resources).
    ///
    /// <p>The Amazon Machine Images (AMIs) associated with this job.</p>
    pub fn ec2_ami_resources(mut self, input: crate::types::Ec2AmiResource) -> Self {
        let mut v = self.ec2_ami_resources.unwrap_or_default();
        v.push(input);
        self.ec2_ami_resources = Some(v);
        self
    }
    /// <p>The Amazon Machine Images (AMIs) associated with this job.</p>
    pub fn set_ec2_ami_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ec2AmiResource>>,
    ) -> Self {
        self.ec2_ami_resources = input;
        self
    }
    /// Consumes the builder and constructs a [`JobResource`](crate::types::JobResource).
    pub fn build(self) -> crate::types::JobResource {
        crate::types::JobResource {
            s3_resources: self.s3_resources,
            lambda_resources: self.lambda_resources,
            ec2_ami_resources: self.ec2_ami_resources,
        }
    }
}
