// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the device configuration for an Snowcone job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnowconeDeviceConfiguration {
    /// <p>Configures the wireless connection for the Snowcone device.</p>
    #[doc(hidden)]
    pub wireless_connection: std::option::Option<crate::types::WirelessConnection>,
}
impl SnowconeDeviceConfiguration {
    /// <p>Configures the wireless connection for the Snowcone device.</p>
    pub fn wireless_connection(&self) -> std::option::Option<&crate::types::WirelessConnection> {
        self.wireless_connection.as_ref()
    }
}
impl SnowconeDeviceConfiguration {
    /// Creates a new builder-style object to manufacture [`SnowconeDeviceConfiguration`](crate::types::SnowconeDeviceConfiguration).
    pub fn builder() -> crate::types::builders::SnowconeDeviceConfigurationBuilder {
        crate::types::builders::SnowconeDeviceConfigurationBuilder::default()
    }
}

/// A builder for [`SnowconeDeviceConfiguration`](crate::types::SnowconeDeviceConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnowconeDeviceConfigurationBuilder {
    pub(crate) wireless_connection: std::option::Option<crate::types::WirelessConnection>,
}
impl SnowconeDeviceConfigurationBuilder {
    /// <p>Configures the wireless connection for the Snowcone device.</p>
    pub fn wireless_connection(mut self, input: crate::types::WirelessConnection) -> Self {
        self.wireless_connection = Some(input);
        self
    }
    /// <p>Configures the wireless connection for the Snowcone device.</p>
    pub fn set_wireless_connection(
        mut self,
        input: std::option::Option<crate::types::WirelessConnection>,
    ) -> Self {
        self.wireless_connection = input;
        self
    }
    /// Consumes the builder and constructs a [`SnowconeDeviceConfiguration`](crate::types::SnowconeDeviceConfiguration).
    pub fn build(self) -> crate::types::SnowconeDeviceConfiguration {
        crate::types::SnowconeDeviceConfiguration {
            wireless_connection: self.wireless_connection,
        }
    }
}
