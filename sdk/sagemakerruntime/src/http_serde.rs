// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_payload_invoke_endpoint_body(
    body: &[u8],
) -> Result<std::option::Option<smithy_types::Blob>, crate::error::InvokeEndpointError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_invoke_endpoint_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_1: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_invoke_endpoint_custom_attributes(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("X-Amzn-SageMaker-Custom-Attributes")
        .iter();
    let var_2: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_header_invoke_endpoint_invoked_production_variant(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-Amzn-Invoked-Production-Variant")
        .iter();
    let var_3: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}
