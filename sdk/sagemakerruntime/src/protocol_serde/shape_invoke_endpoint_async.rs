// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_invoke_endpoint_async_headers(
    input: &crate::operation::invoke_endpoint_async::InvokeEndpointAsyncInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.content_type {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_type",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Content-Type", header_value);
        }
    }
    if let Some(inner_3) = &input.accept {
        let formatted_4 = inner_3.as_str();
        if !formatted_4.is_empty() {
            let header_value = formatted_4;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "accept",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Accept", header_value);
        }
    }
    if let Some(inner_5) = &input.custom_attributes {
        let formatted_6 = inner_5.as_str();
        if !formatted_6.is_empty() {
            let header_value = formatted_6;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "custom_attributes",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &"*** Sensitive Data Redacted ***", err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Custom-Attributes", header_value);
        }
    }
    if let Some(inner_7) = &input.inference_id {
        let formatted_8 = inner_7.as_str();
        if !formatted_8.is_empty() {
            let header_value = formatted_8;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "inference_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Inference-Id", header_value);
        }
    }
    if let Some(inner_9) = &input.input_location {
        let formatted_10 = inner_9.as_str();
        if !formatted_10.is_empty() {
            let header_value = formatted_10;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "input_location",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-InputLocation", header_value);
        }
    }
    if let Some(inner_11) = &input.request_ttl_seconds {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(*inner_11);
        let formatted_12 = encoder.encode();
        if !formatted_12.is_empty() {
            let header_value = formatted_12;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "request_ttl_seconds",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-RequestTTLSeconds", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_invoke_endpoint_async_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::invoke_endpoint_async::InvokeEndpointAsyncOutput,
    crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalFailure" => {
            crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::InternalFailure({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::InternalFailureBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_failure::de_internal_failure_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceUnavailable" => {
            crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ServiceUnavailableBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_service_unavailable::de_service_unavailable_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationError" => {
            crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::ValidationError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ValidationErrorBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_validation_error::de_validation_error_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_invoke_endpoint_async_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::invoke_endpoint_async::InvokeEndpointAsyncOutput,
    crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::invoke_endpoint_async::builders::InvokeEndpointAsyncOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_invoke_endpoint_async::de_invoke_endpoint_async(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled)?;
        output = output.set_output_location(
            crate::protocol_serde::shape_invoke_endpoint_async_output::de_output_location_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::invoke_endpoint_async::InvokeEndpointAsyncError::unhandled(
                    "Failed to parse OutputLocation from header `X-Amzn-SageMaker-OutputLocation",
                )
            })?,
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_invoke_endpoint_async(
    value: &[u8],
    mut builder: crate::operation::invoke_endpoint_async::builders::InvokeEndpointAsyncOutputBuilder,
) -> Result<
    crate::operation::invoke_endpoint_async::builders::InvokeEndpointAsyncOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "InferenceId" => {
                        builder = builder.set_inference_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
