// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_invoke_endpoint_headers(
    input: &crate::operation::invoke_endpoint::InvokeEndpointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.content_type {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "content_type",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Content-Type", header_value);
        }
    }
    if let Some(inner_3) = &input.accept {
        let formatted_4 = inner_3.as_str();
        if !formatted_4.is_empty() {
            let header_value = formatted_4;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "accept",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("Accept", header_value);
        }
    }
    if let Some(inner_5) = &input.custom_attributes {
        let formatted_6 = inner_5.as_str();
        if !formatted_6.is_empty() {
            let header_value = formatted_6;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "custom_attributes",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &"*** Sensitive Data Redacted ***", err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Custom-Attributes", header_value);
        }
    }
    if let Some(inner_7) = &input.target_model {
        let formatted_8 = inner_7.as_str();
        if !formatted_8.is_empty() {
            let header_value = formatted_8;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "target_model",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Target-Model", header_value);
        }
    }
    if let Some(inner_9) = &input.target_variant {
        let formatted_10 = inner_9.as_str();
        if !formatted_10.is_empty() {
            let header_value = formatted_10;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "target_variant",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Target-Variant", header_value);
        }
    }
    if let Some(inner_11) = &input.target_container_hostname {
        let formatted_12 = inner_11.as_str();
        if !formatted_12.is_empty() {
            let header_value = formatted_12;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "target_container_hostname",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Target-Container-Hostname", header_value);
        }
    }
    if let Some(inner_13) = &input.inference_id {
        let formatted_14 = inner_13.as_str();
        if !formatted_14.is_empty() {
            let header_value = formatted_14;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "inference_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Inference-Id", header_value);
        }
    }
    if let Some(inner_15) = &input.enable_explanations {
        let formatted_16 = inner_15.as_str();
        if !formatted_16.is_empty() {
            let header_value = formatted_16;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "enable_explanations",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("X-Amzn-SageMaker-Enable-Explanations", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_invoke_endpoint_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::invoke_endpoint::InvokeEndpointOutput,
    crate::operation::invoke_endpoint::InvokeEndpointError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled(generic))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InternalDependencyException" => {
            crate::operation::invoke_endpoint::InvokeEndpointError::InternalDependencyException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::InternalDependencyExceptionBuilder::default(
                        );
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_dependency_exception::de_internal_dependency_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalFailure" => {
            crate::operation::invoke_endpoint::InvokeEndpointError::InternalFailure({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::InternalFailureBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_internal_failure::de_internal_failure_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ModelError" => crate::operation::invoke_endpoint::InvokeEndpointError::ModelError({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ModelErrorBuilder::default();
                let _ = response;
                output = crate::protocol_serde::shape_model_error::de_model_error_json_err(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ModelNotReadyException" => {
            crate::operation::invoke_endpoint::InvokeEndpointError::ModelNotReadyException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ModelNotReadyExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_model_not_ready_exception::de_model_not_ready_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ServiceUnavailable" => {
            crate::operation::invoke_endpoint::InvokeEndpointError::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ServiceUnavailableBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_service_unavailable::de_service_unavailable_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationError" => {
            crate::operation::invoke_endpoint::InvokeEndpointError::ValidationError({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::types::error::builders::ValidationErrorBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_validation_error::de_validation_error_json_err(response.body().as_ref(), output).map_err(crate::operation::invoke_endpoint::InvokeEndpointError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::invoke_endpoint::InvokeEndpointError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_invoke_endpoint_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::invoke_endpoint::InvokeEndpointOutput,
    crate::operation::invoke_endpoint::InvokeEndpointError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::invoke_endpoint::builders::InvokeEndpointOutputBuilder::default();
        let _ = response;
        output = output.set_body(
            crate::protocol_serde::shape_invoke_endpoint_output::de_body_payload(
                response.body().as_ref(),
            )?,
        );
        output = output.set_content_type(
            crate::protocol_serde::shape_invoke_endpoint_output::de_content_type_header(
                response.headers(),
            )
            .map_err(|_| {
                crate::operation::invoke_endpoint::InvokeEndpointError::unhandled(
                    "Failed to parse ContentType from header `Content-Type",
                )
            })?,
        );
        output = output.set_custom_attributes(
            crate::protocol_serde::shape_invoke_endpoint_output::de_custom_attributes_header(response.headers())
                                    .map_err(|_|crate::operation::invoke_endpoint::InvokeEndpointError::unhandled("Failed to parse CustomAttributes from header `X-Amzn-SageMaker-Custom-Attributes"))?
        );
        output = output.set_invoked_production_variant(
            crate::protocol_serde::shape_invoke_endpoint_output::de_invoked_production_variant_header(response.headers())
                                    .map_err(|_|crate::operation::invoke_endpoint::InvokeEndpointError::unhandled("Failed to parse InvokedProductionVariant from header `x-Amzn-Invoked-Production-Variant"))?
        );
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
