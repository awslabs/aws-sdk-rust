// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_network_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_network::CreateNetworkInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.framework {
        object.key("Framework").string(var_3.as_str());
    }
    if let Some(var_4) = &input.framework_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("FrameworkConfiguration").start_object();
        crate::protocol_serde::shape_network_framework_configuration::ser_network_framework_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.framework_version {
        object.key("FrameworkVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.member_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("MemberConfiguration").start_object();
        crate::protocol_serde::shape_member_configuration::ser_member_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.name {
        object.key("Name").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.voting_policy {
        #[allow(unused_mut)]
        let mut object_15 = object.key("VotingPolicy").start_object();
        crate::protocol_serde::shape_voting_policy::ser_voting_policy(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
