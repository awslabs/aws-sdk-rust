// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>The properties of the Accessor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Accessor {
    /// <p>The unique identifier of the accessor.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of the accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::AccessorType>,
    /// <p>The billing token is a property of the accessor. Use this token to make Ethereum API calls to your Ethereum node. The billing token is used to track your accessor object for billing Ethereum API requests made to your Ethereum nodes.</p>
    #[doc(hidden)]
    pub billing_token: std::option::Option<std::string::String>,
    /// <p>The current status of the accessor.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::AccessorStatus>,
    /// <p>The creation date and time of the accessor.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl Accessor {
    /// <p>The unique identifier of the accessor.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of the accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn r#type(&self) -> std::option::Option<&crate::types::AccessorType> {
        self.r#type.as_ref()
    }
    /// <p>The billing token is a property of the accessor. Use this token to make Ethereum API calls to your Ethereum node. The billing token is used to track your accessor object for billing Ethereum API requests made to your Ethereum nodes.</p>
    pub fn billing_token(&self) -> std::option::Option<&str> {
        self.billing_token.as_deref()
    }
    /// <p>The current status of the accessor.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::AccessorStatus> {
        self.status.as_ref()
    }
    /// <p>The creation date and time of the accessor.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl Accessor {
    /// Creates a new builder-style object to manufacture [`Accessor`](crate::types::Accessor).
    pub fn builder() -> crate::types::builders::AccessorBuilder {
        crate::types::builders::AccessorBuilder::default()
    }
}

/// A builder for [`Accessor`](crate::types::Accessor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccessorBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::AccessorType>,
    pub(crate) billing_token: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::AccessorStatus>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl AccessorBuilder {
    /// <p>The unique identifier of the accessor.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the accessor.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of the accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn r#type(mut self, input: crate::types::AccessorType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn set_type(mut self, input: std::option::Option<crate::types::AccessorType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The billing token is a property of the accessor. Use this token to make Ethereum API calls to your Ethereum node. The billing token is used to track your accessor object for billing Ethereum API requests made to your Ethereum nodes.</p>
    pub fn billing_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.billing_token = Some(input.into());
        self
    }
    /// <p>The billing token is a property of the accessor. Use this token to make Ethereum API calls to your Ethereum node. The billing token is used to track your accessor object for billing Ethereum API requests made to your Ethereum nodes.</p>
    pub fn set_billing_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.billing_token = input;
        self
    }
    /// <p>The current status of the accessor.</p>
    pub fn status(mut self, input: crate::types::AccessorStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the accessor.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::AccessorStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The creation date and time of the accessor.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The creation date and time of the accessor.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the accessor. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Accessor`](crate::types::Accessor).
    pub fn build(self) -> crate::types::Accessor {
        crate::types::Accessor {
            id: self.id,
            r#type: self.r#type,
            billing_token: self.billing_token,
            status: self.status,
            creation_date: self.creation_date,
            arn: self.arn,
        }
    }
}
