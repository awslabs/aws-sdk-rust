// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Configuration properties relevant to the network for the blockchain framework that the network uses. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkFrameworkConfiguration {
    /// <p> Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric. </p>
    #[doc(hidden)]
    pub fabric: std::option::Option<crate::types::NetworkFabricConfiguration>,
}
impl NetworkFrameworkConfiguration {
    /// <p> Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric. </p>
    pub fn fabric(&self) -> std::option::Option<&crate::types::NetworkFabricConfiguration> {
        self.fabric.as_ref()
    }
}
impl NetworkFrameworkConfiguration {
    /// Creates a new builder-style object to manufacture [`NetworkFrameworkConfiguration`](crate::types::NetworkFrameworkConfiguration).
    pub fn builder() -> crate::types::builders::NetworkFrameworkConfigurationBuilder {
        crate::types::builders::NetworkFrameworkConfigurationBuilder::default()
    }
}

/// A builder for [`NetworkFrameworkConfiguration`](crate::types::NetworkFrameworkConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkFrameworkConfigurationBuilder {
    pub(crate) fabric: std::option::Option<crate::types::NetworkFabricConfiguration>,
}
impl NetworkFrameworkConfigurationBuilder {
    /// <p> Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric. </p>
    pub fn fabric(mut self, input: crate::types::NetworkFabricConfiguration) -> Self {
        self.fabric = Some(input);
        self
    }
    /// <p> Hyperledger Fabric configuration properties for a Managed Blockchain network that uses Hyperledger Fabric. </p>
    pub fn set_fabric(
        mut self,
        input: std::option::Option<crate::types::NetworkFabricConfiguration>,
    ) -> Self {
        self.fabric = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkFrameworkConfiguration`](crate::types::NetworkFrameworkConfiguration).
    pub fn build(self) -> crate::types::NetworkFrameworkConfiguration {
        crate::types::NetworkFrameworkConfiguration {
            fabric: self.fabric,
        }
    }
}
