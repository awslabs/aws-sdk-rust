// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attributes of an Ethereum node.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeEthereumAttributes {
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum API methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    #[doc(hidden)]
    pub http_endpoint: std::option::Option<std::string::String>,
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSocket connections from a client. Use this endpoint in client code for smart contracts when using a WebSocket connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    #[doc(hidden)]
    pub web_socket_endpoint: std::option::Option<std::string::String>,
}
impl NodeEthereumAttributes {
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum API methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn http_endpoint(&self) -> std::option::Option<&str> {
        self.http_endpoint.as_deref()
    }
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSocket connections from a client. Use this endpoint in client code for smart contracts when using a WebSocket connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn web_socket_endpoint(&self) -> std::option::Option<&str> {
        self.web_socket_endpoint.as_deref()
    }
}
impl NodeEthereumAttributes {
    /// Creates a new builder-style object to manufacture [`NodeEthereumAttributes`](crate::types::NodeEthereumAttributes).
    pub fn builder() -> crate::types::builders::NodeEthereumAttributesBuilder {
        crate::types::builders::NodeEthereumAttributesBuilder::default()
    }
}

/// A builder for [`NodeEthereumAttributes`](crate::types::NodeEthereumAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeEthereumAttributesBuilder {
    pub(crate) http_endpoint: std::option::Option<std::string::String>,
    pub(crate) web_socket_endpoint: std::option::Option<std::string::String>,
}
impl NodeEthereumAttributesBuilder {
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum API methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn http_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum API methods over HTTP connections from a client. Use this endpoint in client code for smart contracts when using an HTTP connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn set_http_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_endpoint = input;
        self
    }
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSocket connections from a client. Use this endpoint in client code for smart contracts when using a WebSocket connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn web_socket_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.web_socket_endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint on which the Ethereum node listens to run Ethereum JSON-RPC methods over WebSocket connections from a client. Use this endpoint in client code for smart contracts when using a WebSocket connection. Connections to this endpoint are authenticated using <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
    pub fn set_web_socket_endpoint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.web_socket_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeEthereumAttributes`](crate::types::NodeEthereumAttributes).
    pub fn build(self) -> crate::types::NodeEthereumAttributes {
        crate::types::NodeEthereumAttributes {
            http_endpoint: self.http_endpoint,
            web_socket_endpoint: self.web_socket_endpoint,
        }
    }
}
