// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The voting rules for the network to decide if a proposal is accepted </p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VotingPolicy {
    /// <p>Defines the rules for the network for voting on proposals, such as the percentage of <code>YES</code> votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
    #[doc(hidden)]
    pub approval_threshold_policy: std::option::Option<crate::types::ApprovalThresholdPolicy>,
}
impl VotingPolicy {
    /// <p>Defines the rules for the network for voting on proposals, such as the percentage of <code>YES</code> votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
    pub fn approval_threshold_policy(
        &self,
    ) -> std::option::Option<&crate::types::ApprovalThresholdPolicy> {
        self.approval_threshold_policy.as_ref()
    }
}
impl VotingPolicy {
    /// Creates a new builder-style object to manufacture [`VotingPolicy`](crate::types::VotingPolicy).
    pub fn builder() -> crate::types::builders::VotingPolicyBuilder {
        crate::types::builders::VotingPolicyBuilder::default()
    }
}

/// A builder for [`VotingPolicy`](crate::types::VotingPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VotingPolicyBuilder {
    pub(crate) approval_threshold_policy:
        std::option::Option<crate::types::ApprovalThresholdPolicy>,
}
impl VotingPolicyBuilder {
    /// <p>Defines the rules for the network for voting on proposals, such as the percentage of <code>YES</code> votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
    pub fn approval_threshold_policy(
        mut self,
        input: crate::types::ApprovalThresholdPolicy,
    ) -> Self {
        self.approval_threshold_policy = Some(input);
        self
    }
    /// <p>Defines the rules for the network for voting on proposals, such as the percentage of <code>YES</code> votes required for the proposal to be approved and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
    pub fn set_approval_threshold_policy(
        mut self,
        input: std::option::Option<crate::types::ApprovalThresholdPolicy>,
    ) -> Self {
        self.approval_threshold_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`VotingPolicy`](crate::types::VotingPolicy).
    pub fn build(self) -> crate::types::VotingPolicy {
        crate::types::VotingPolicy {
            approval_threshold_policy: self.approval_threshold_policy,
        }
    }
}
