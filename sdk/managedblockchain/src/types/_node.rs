// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration properties of a node.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Node {
    /// <p>The unique identifier of the network that the node is on.</p>
    #[doc(hidden)]
    pub network_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the member to which the node belongs.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    #[doc(hidden)]
    pub member_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the node.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The instance type of the node.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<std::string::String>,
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>Attributes of the blockchain framework being used.</p>
    #[doc(hidden)]
    pub framework_attributes: std::option::Option<crate::types::NodeFrameworkAttributes>,
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
    #[doc(hidden)]
    pub log_publishing_configuration:
        std::option::Option<crate::types::NodeLogPublishingConfiguration>,
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    #[doc(hidden)]
    pub state_db: std::option::Option<crate::types::StateDbType>,
    /// <p>The status of the node.</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Amazon Web Services account is in the process of creating a node.</p> </li>
    /// <li> <p> <code>AVAILABLE</code> - The node has been created and can participate in the network.</p> </li>
    /// <li> <p> <code>UNHEALTHY</code> - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to <code>AVAILABLE</code>. Otherwise, it moves to <code>FAILED</code> status.</p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> - The Amazon Web Services account attempted to create a node and creation failed.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The node is in the process of being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The node is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> - The node can no longer participate on the network.</p> </li>
    /// <li> <p> <code>FAILED</code> - The node is no longer functional, cannot be recovered, and must be deleted.</p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_KEY</code> - The node is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked.</p> <p>The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the node resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NodeStatus>,
    /// <p>The date and time that the node was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Tags assigned to the node. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the node uses for encryption at rest. If the value of this parameter is <code>"AWS Owned KMS Key"</code>, the node uses an Amazon Web Services owned KMS key for encryption. The node inherits this parameter from the member that it belongs to.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html">Encryption at Rest</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    #[doc(hidden)]
    pub kms_key_arn: std::option::Option<std::string::String>,
}
impl Node {
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(&self) -> std::option::Option<&str> {
        self.network_id.as_deref()
    }
    /// <p>The unique identifier of the member to which the node belongs.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn member_id(&self) -> std::option::Option<&str> {
        self.member_id.as_deref()
    }
    /// <p>The unique identifier of the node.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The instance type of the node.</p>
    pub fn instance_type(&self) -> std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Attributes of the blockchain framework being used.</p>
    pub fn framework_attributes(
        &self,
    ) -> std::option::Option<&crate::types::NodeFrameworkAttributes> {
        self.framework_attributes.as_ref()
    }
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
    pub fn log_publishing_configuration(
        &self,
    ) -> std::option::Option<&crate::types::NodeLogPublishingConfiguration> {
        self.log_publishing_configuration.as_ref()
    }
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn state_db(&self) -> std::option::Option<&crate::types::StateDbType> {
        self.state_db.as_ref()
    }
    /// <p>The status of the node.</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Amazon Web Services account is in the process of creating a node.</p> </li>
    /// <li> <p> <code>AVAILABLE</code> - The node has been created and can participate in the network.</p> </li>
    /// <li> <p> <code>UNHEALTHY</code> - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to <code>AVAILABLE</code>. Otherwise, it moves to <code>FAILED</code> status.</p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> - The Amazon Web Services account attempted to create a node and creation failed.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The node is in the process of being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The node is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> - The node can no longer participate on the network.</p> </li>
    /// <li> <p> <code>FAILED</code> - The node is no longer functional, cannot be recovered, and must be deleted.</p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_KEY</code> - The node is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked.</p> <p>The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the node resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::NodeStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time that the node was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>Tags assigned to the node. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the node uses for encryption at rest. If the value of this parameter is <code>"AWS Owned KMS Key"</code>, the node uses an Amazon Web Services owned KMS key for encryption. The node inherits this parameter from the member that it belongs to.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html">Encryption at Rest</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn kms_key_arn(&self) -> std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl Node {
    /// Creates a new builder-style object to manufacture [`Node`](crate::types::Node).
    pub fn builder() -> crate::types::builders::NodeBuilder {
        crate::types::builders::NodeBuilder::default()
    }
}

/// A builder for [`Node`](crate::types::Node).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeBuilder {
    pub(crate) network_id: std::option::Option<std::string::String>,
    pub(crate) member_id: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) framework_attributes: std::option::Option<crate::types::NodeFrameworkAttributes>,
    pub(crate) log_publishing_configuration:
        std::option::Option<crate::types::NodeLogPublishingConfiguration>,
    pub(crate) state_db: std::option::Option<crate::types::StateDbType>,
    pub(crate) status: std::option::Option<crate::types::NodeStatus>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) kms_key_arn: std::option::Option<std::string::String>,
}
impl NodeBuilder {
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// <p>The unique identifier of the member to which the node belongs.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.member_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the member to which the node belongs.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.member_id = input;
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The instance type of the node.</p>
    pub fn instance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_type = Some(input.into());
        self
    }
    /// <p>The instance type of the node.</p>
    pub fn set_instance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone in which the node exists. Required for Ethereum nodes. </p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Attributes of the blockchain framework being used.</p>
    pub fn framework_attributes(mut self, input: crate::types::NodeFrameworkAttributes) -> Self {
        self.framework_attributes = Some(input);
        self
    }
    /// <p>Attributes of the blockchain framework being used.</p>
    pub fn set_framework_attributes(
        mut self,
        input: std::option::Option<crate::types::NodeFrameworkAttributes>,
    ) -> Self {
        self.framework_attributes = input;
        self
    }
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
    pub fn log_publishing_configuration(
        mut self,
        input: crate::types::NodeLogPublishingConfiguration,
    ) -> Self {
        self.log_publishing_configuration = Some(input);
        self
    }
    /// <p>Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
    pub fn set_log_publishing_configuration(
        mut self,
        input: std::option::Option<crate::types::NodeLogPublishingConfiguration>,
    ) -> Self {
        self.log_publishing_configuration = input;
        self
    }
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn state_db(mut self, input: crate::types::StateDbType) -> Self {
        self.state_db = Some(input);
        self
    }
    /// <p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_state_db(mut self, input: std::option::Option<crate::types::StateDbType>) -> Self {
        self.state_db = input;
        self
    }
    /// <p>The status of the node.</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Amazon Web Services account is in the process of creating a node.</p> </li>
    /// <li> <p> <code>AVAILABLE</code> - The node has been created and can participate in the network.</p> </li>
    /// <li> <p> <code>UNHEALTHY</code> - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to <code>AVAILABLE</code>. Otherwise, it moves to <code>FAILED</code> status.</p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> - The Amazon Web Services account attempted to create a node and creation failed.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The node is in the process of being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The node is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> - The node can no longer participate on the network.</p> </li>
    /// <li> <p> <code>FAILED</code> - The node is no longer functional, cannot be recovered, and must be deleted.</p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_KEY</code> - The node is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked.</p> <p>The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the node resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::NodeStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the node.</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code> - The Amazon Web Services account is in the process of creating a node.</p> </li>
    /// <li> <p> <code>AVAILABLE</code> - The node has been created and can participate in the network.</p> </li>
    /// <li> <p> <code>UNHEALTHY</code> - The node is impaired and might not function as expected. Amazon Managed Blockchain automatically finds nodes in this state and tries to recover them. If a node is recoverable, it returns to <code>AVAILABLE</code>. Otherwise, it moves to <code>FAILED</code> status.</p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> - The Amazon Web Services account attempted to create a node and creation failed.</p> </li>
    /// <li> <p> <code>UPDATING</code> - The node is in the process of being updated.</p> </li>
    /// <li> <p> <code>DELETING</code> - The node is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> - The node can no longer participate on the network.</p> </li>
    /// <li> <p> <code>FAILED</code> - The node is no longer functional, cannot be recovered, and must be deleted.</p> </li>
    /// <li> <p> <code>INACCESSIBLE_ENCRYPTION_KEY</code> - The node is impaired and might not function as expected because it cannot access the specified customer managed key in KMS for encryption at rest. Either the KMS key was disabled or deleted, or the grants on the key were revoked.</p> <p>The effect of disabling or deleting a key or of revoking a grant isn't immediate. It might take some time for the node resource to discover that the key is inaccessible. When a resource is in this state, we recommend deleting and recreating the resource.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::NodeStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time that the node was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date and time that the node was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to the node. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to the node. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the node. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the node uses for encryption at rest. If the value of this parameter is <code>"AWS Owned KMS Key"</code>, the node uses an Amazon Web Services owned KMS key for encryption. The node inherits this parameter from the member that it belongs to.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html">Encryption at Rest</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the customer managed key in Key Management Service (KMS) that the node uses for encryption at rest. If the value of this parameter is <code>"AWS Owned KMS Key"</code>, the node uses an Amazon Web Services owned KMS key for encryption. The node inherits this parameter from the member that it belongs to.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/managed-blockchain-encryption-at-rest.html">Encryption at Rest</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Node`](crate::types::Node).
    pub fn build(self) -> crate::types::Node {
        crate::types::Node {
            network_id: self.network_id,
            member_id: self.member_id,
            id: self.id,
            instance_type: self.instance_type,
            availability_zone: self.availability_zone,
            framework_attributes: self.framework_attributes,
            log_publishing_configuration: self.log_publishing_configuration,
            state_db: self.state_db,
            status: self.status,
            creation_date: self.creation_date,
            tags: self.tags,
            arn: self.arn,
            kms_key_arn: self.kms_key_arn,
        }
    }
}
