// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of log configurations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LogConfigurations {
    /// <p>Parameters for publishing logs to Amazon CloudWatch Logs.</p>
    #[doc(hidden)]
    pub cloudwatch: std::option::Option<crate::types::LogConfiguration>,
}
impl LogConfigurations {
    /// <p>Parameters for publishing logs to Amazon CloudWatch Logs.</p>
    pub fn cloudwatch(&self) -> std::option::Option<&crate::types::LogConfiguration> {
        self.cloudwatch.as_ref()
    }
}
impl LogConfigurations {
    /// Creates a new builder-style object to manufacture [`LogConfigurations`](crate::types::LogConfigurations).
    pub fn builder() -> crate::types::builders::LogConfigurationsBuilder {
        crate::types::builders::LogConfigurationsBuilder::default()
    }
}

/// A builder for [`LogConfigurations`](crate::types::LogConfigurations).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LogConfigurationsBuilder {
    pub(crate) cloudwatch: std::option::Option<crate::types::LogConfiguration>,
}
impl LogConfigurationsBuilder {
    /// <p>Parameters for publishing logs to Amazon CloudWatch Logs.</p>
    pub fn cloudwatch(mut self, input: crate::types::LogConfiguration) -> Self {
        self.cloudwatch = Some(input);
        self
    }
    /// <p>Parameters for publishing logs to Amazon CloudWatch Logs.</p>
    pub fn set_cloudwatch(
        mut self,
        input: std::option::Option<crate::types::LogConfiguration>,
    ) -> Self {
        self.cloudwatch = input;
        self
    }
    /// Consumes the builder and constructs a [`LogConfigurations`](crate::types::LogConfigurations).
    pub fn build(self) -> crate::types::LogConfigurations {
        crate::types::LogConfigurations {
            cloudwatch: self.cloudwatch,
        }
    }
}
