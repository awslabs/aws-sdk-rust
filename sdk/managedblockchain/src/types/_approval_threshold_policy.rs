// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A policy type that defines the voting rules for the network. The rules decide if a proposal is approved. Approval may be based on criteria such as the percentage of <code>YES</code> votes and the duration of the proposal. The policy applies to all proposals and is specified when the network is created.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApprovalThresholdPolicy {
    /// <p>The percentage of votes among all members that must be <code>YES</code> for a proposal to be approved. For example, a <code>ThresholdPercentage</code> value of <code>50</code> indicates 50%. The <code>ThresholdComparator</code> determines the precise comparison. If a <code>ThresholdPercentage</code> value of <code>50</code> is specified on a network with 10 members, along with a <code>ThresholdComparator</code> value of <code>GREATER_THAN</code>, this indicates that 6 <code>YES</code> votes are required for the proposal to be approved.</p>
    #[doc(hidden)]
    pub threshold_percentage: std::option::Option<i32>,
    /// <p>The duration from the time that a proposal is created until it expires. If members cast neither the required number of <code>YES</code> votes to approve the proposal nor the number of <code>NO</code> votes required to reject it before the duration expires, the proposal is <code>EXPIRED</code> and <code>ProposalActions</code> aren't carried out.</p>
    #[doc(hidden)]
    pub proposal_duration_in_hours: std::option::Option<i32>,
    /// <p>Determines whether the vote percentage must be greater than the <code>ThresholdPercentage</code> or must be greater than or equal to the <code>ThreholdPercentage</code> to be approved.</p>
    #[doc(hidden)]
    pub threshold_comparator: std::option::Option<crate::types::ThresholdComparator>,
}
impl ApprovalThresholdPolicy {
    /// <p>The percentage of votes among all members that must be <code>YES</code> for a proposal to be approved. For example, a <code>ThresholdPercentage</code> value of <code>50</code> indicates 50%. The <code>ThresholdComparator</code> determines the precise comparison. If a <code>ThresholdPercentage</code> value of <code>50</code> is specified on a network with 10 members, along with a <code>ThresholdComparator</code> value of <code>GREATER_THAN</code>, this indicates that 6 <code>YES</code> votes are required for the proposal to be approved.</p>
    pub fn threshold_percentage(&self) -> std::option::Option<i32> {
        self.threshold_percentage
    }
    /// <p>The duration from the time that a proposal is created until it expires. If members cast neither the required number of <code>YES</code> votes to approve the proposal nor the number of <code>NO</code> votes required to reject it before the duration expires, the proposal is <code>EXPIRED</code> and <code>ProposalActions</code> aren't carried out.</p>
    pub fn proposal_duration_in_hours(&self) -> std::option::Option<i32> {
        self.proposal_duration_in_hours
    }
    /// <p>Determines whether the vote percentage must be greater than the <code>ThresholdPercentage</code> or must be greater than or equal to the <code>ThreholdPercentage</code> to be approved.</p>
    pub fn threshold_comparator(&self) -> std::option::Option<&crate::types::ThresholdComparator> {
        self.threshold_comparator.as_ref()
    }
}
impl ApprovalThresholdPolicy {
    /// Creates a new builder-style object to manufacture [`ApprovalThresholdPolicy`](crate::types::ApprovalThresholdPolicy).
    pub fn builder() -> crate::types::builders::ApprovalThresholdPolicyBuilder {
        crate::types::builders::ApprovalThresholdPolicyBuilder::default()
    }
}

/// A builder for [`ApprovalThresholdPolicy`](crate::types::ApprovalThresholdPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApprovalThresholdPolicyBuilder {
    pub(crate) threshold_percentage: std::option::Option<i32>,
    pub(crate) proposal_duration_in_hours: std::option::Option<i32>,
    pub(crate) threshold_comparator: std::option::Option<crate::types::ThresholdComparator>,
}
impl ApprovalThresholdPolicyBuilder {
    /// <p>The percentage of votes among all members that must be <code>YES</code> for a proposal to be approved. For example, a <code>ThresholdPercentage</code> value of <code>50</code> indicates 50%. The <code>ThresholdComparator</code> determines the precise comparison. If a <code>ThresholdPercentage</code> value of <code>50</code> is specified on a network with 10 members, along with a <code>ThresholdComparator</code> value of <code>GREATER_THAN</code>, this indicates that 6 <code>YES</code> votes are required for the proposal to be approved.</p>
    pub fn threshold_percentage(mut self, input: i32) -> Self {
        self.threshold_percentage = Some(input);
        self
    }
    /// <p>The percentage of votes among all members that must be <code>YES</code> for a proposal to be approved. For example, a <code>ThresholdPercentage</code> value of <code>50</code> indicates 50%. The <code>ThresholdComparator</code> determines the precise comparison. If a <code>ThresholdPercentage</code> value of <code>50</code> is specified on a network with 10 members, along with a <code>ThresholdComparator</code> value of <code>GREATER_THAN</code>, this indicates that 6 <code>YES</code> votes are required for the proposal to be approved.</p>
    pub fn set_threshold_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.threshold_percentage = input;
        self
    }
    /// <p>The duration from the time that a proposal is created until it expires. If members cast neither the required number of <code>YES</code> votes to approve the proposal nor the number of <code>NO</code> votes required to reject it before the duration expires, the proposal is <code>EXPIRED</code> and <code>ProposalActions</code> aren't carried out.</p>
    pub fn proposal_duration_in_hours(mut self, input: i32) -> Self {
        self.proposal_duration_in_hours = Some(input);
        self
    }
    /// <p>The duration from the time that a proposal is created until it expires. If members cast neither the required number of <code>YES</code> votes to approve the proposal nor the number of <code>NO</code> votes required to reject it before the duration expires, the proposal is <code>EXPIRED</code> and <code>ProposalActions</code> aren't carried out.</p>
    pub fn set_proposal_duration_in_hours(mut self, input: std::option::Option<i32>) -> Self {
        self.proposal_duration_in_hours = input;
        self
    }
    /// <p>Determines whether the vote percentage must be greater than the <code>ThresholdPercentage</code> or must be greater than or equal to the <code>ThreholdPercentage</code> to be approved.</p>
    pub fn threshold_comparator(mut self, input: crate::types::ThresholdComparator) -> Self {
        self.threshold_comparator = Some(input);
        self
    }
    /// <p>Determines whether the vote percentage must be greater than the <code>ThresholdPercentage</code> or must be greater than or equal to the <code>ThreholdPercentage</code> to be approved.</p>
    pub fn set_threshold_comparator(
        mut self,
        input: std::option::Option<crate::types::ThresholdComparator>,
    ) -> Self {
        self.threshold_comparator = input;
        self
    }
    /// Consumes the builder and constructs a [`ApprovalThresholdPolicy`](crate::types::ApprovalThresholdPolicy).
    pub fn build(self) -> crate::types::ApprovalThresholdPolicy {
        crate::types::ApprovalThresholdPolicy {
            threshold_percentage: self.threshold_percentage,
            proposal_duration_in_hours: self.proposal_duration_in_hours,
            threshold_comparator: self.threshold_comparator,
        }
    }
}
