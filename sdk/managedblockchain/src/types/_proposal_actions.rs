// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The actions to carry out if a proposal is <code>APPROVED</code>. </p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProposalActions {
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to invite an Amazon Web Services account to create a member and join the network. </p>
    #[doc(hidden)]
    pub invitations: std::option::Option<std::vec::Vec<crate::types::InviteAction>>,
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to remove a member from the network, which deletes the member and all associated member resources from the network. </p>
    #[doc(hidden)]
    pub removals: std::option::Option<std::vec::Vec<crate::types::RemoveAction>>,
}
impl ProposalActions {
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to invite an Amazon Web Services account to create a member and join the network. </p>
    pub fn invitations(&self) -> std::option::Option<&[crate::types::InviteAction]> {
        self.invitations.as_deref()
    }
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to remove a member from the network, which deletes the member and all associated member resources from the network. </p>
    pub fn removals(&self) -> std::option::Option<&[crate::types::RemoveAction]> {
        self.removals.as_deref()
    }
}
impl ProposalActions {
    /// Creates a new builder-style object to manufacture [`ProposalActions`](crate::types::ProposalActions).
    pub fn builder() -> crate::types::builders::ProposalActionsBuilder {
        crate::types::builders::ProposalActionsBuilder::default()
    }
}

/// A builder for [`ProposalActions`](crate::types::ProposalActions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProposalActionsBuilder {
    pub(crate) invitations: std::option::Option<std::vec::Vec<crate::types::InviteAction>>,
    pub(crate) removals: std::option::Option<std::vec::Vec<crate::types::RemoveAction>>,
}
impl ProposalActionsBuilder {
    /// Appends an item to `invitations`.
    ///
    /// To override the contents of this collection use [`set_invitations`](Self::set_invitations).
    ///
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to invite an Amazon Web Services account to create a member and join the network. </p>
    pub fn invitations(mut self, input: crate::types::InviteAction) -> Self {
        let mut v = self.invitations.unwrap_or_default();
        v.push(input);
        self.invitations = Some(v);
        self
    }
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to invite an Amazon Web Services account to create a member and join the network. </p>
    pub fn set_invitations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InviteAction>>,
    ) -> Self {
        self.invitations = input;
        self
    }
    /// Appends an item to `removals`.
    ///
    /// To override the contents of this collection use [`set_removals`](Self::set_removals).
    ///
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to remove a member from the network, which deletes the member and all associated member resources from the network. </p>
    pub fn removals(mut self, input: crate::types::RemoveAction) -> Self {
        let mut v = self.removals.unwrap_or_default();
        v.push(input);
        self.removals = Some(v);
        self
    }
    /// <p> The actions to perform for an <code>APPROVED</code> proposal to remove a member from the network, which deletes the member and all associated member resources from the network. </p>
    pub fn set_removals(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RemoveAction>>,
    ) -> Self {
        self.removals = input;
        self
    }
    /// Consumes the builder and constructs a [`ProposalActions`](crate::types::ProposalActions).
    pub fn build(self) -> crate::types::ProposalActions {
        crate::types::ProposalActions {
            invitations: self.invitations,
            removals: self.removals,
        }
    }
}
