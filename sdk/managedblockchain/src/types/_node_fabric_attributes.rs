// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Attributes of Hyperledger Fabric for a peer node on a Hyperledger Fabric network on Managed Blockchain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NodeFabricAttributes {
    /// <p>The endpoint that identifies the peer node for all services except peer channel-based event services.</p>
    #[doc(hidden)]
    pub peer_endpoint: std::option::Option<std::string::String>,
    /// <p>The endpoint that identifies the peer node for peer channel-based event services.</p>
    #[doc(hidden)]
    pub peer_event_endpoint: std::option::Option<std::string::String>,
}
impl NodeFabricAttributes {
    /// <p>The endpoint that identifies the peer node for all services except peer channel-based event services.</p>
    pub fn peer_endpoint(&self) -> std::option::Option<&str> {
        self.peer_endpoint.as_deref()
    }
    /// <p>The endpoint that identifies the peer node for peer channel-based event services.</p>
    pub fn peer_event_endpoint(&self) -> std::option::Option<&str> {
        self.peer_event_endpoint.as_deref()
    }
}
impl NodeFabricAttributes {
    /// Creates a new builder-style object to manufacture [`NodeFabricAttributes`](crate::types::NodeFabricAttributes).
    pub fn builder() -> crate::types::builders::NodeFabricAttributesBuilder {
        crate::types::builders::NodeFabricAttributesBuilder::default()
    }
}

/// A builder for [`NodeFabricAttributes`](crate::types::NodeFabricAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NodeFabricAttributesBuilder {
    pub(crate) peer_endpoint: std::option::Option<std::string::String>,
    pub(crate) peer_event_endpoint: std::option::Option<std::string::String>,
}
impl NodeFabricAttributesBuilder {
    /// <p>The endpoint that identifies the peer node for all services except peer channel-based event services.</p>
    pub fn peer_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.peer_endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint that identifies the peer node for all services except peer channel-based event services.</p>
    pub fn set_peer_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.peer_endpoint = input;
        self
    }
    /// <p>The endpoint that identifies the peer node for peer channel-based event services.</p>
    pub fn peer_event_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.peer_event_endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint that identifies the peer node for peer channel-based event services.</p>
    pub fn set_peer_event_endpoint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.peer_event_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`NodeFabricAttributes`](crate::types::NodeFabricAttributes).
    pub fn build(self) -> crate::types::NodeFabricAttributes {
        crate::types::NodeFabricAttributes {
            peer_endpoint: self.peer_endpoint,
            peer_event_endpoint: self.peer_event_endpoint,
        }
    }
}
