// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of a proposal on a Managed Blockchain network.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Proposal {
    /// <p>The unique identifier of the proposal.</p>
    #[doc(hidden)]
    pub proposal_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    #[doc(hidden)]
    pub network_id: std::option::Option<std::string::String>,
    /// <p>The description of the proposal.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<crate::types::ProposalActions>,
    /// <p>The unique identifier of the member that created the proposal.</p>
    #[doc(hidden)]
    pub proposed_by_member_id: std::option::Option<std::string::String>,
    /// <p>The name of the member that created the proposal.</p>
    #[doc(hidden)]
    pub proposed_by_member_name: std::option::Option<std::string::String>,
    /// <p>The status of the proposal. Values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p> </li>
    /// <li> <p> <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p> </li>
    /// <li> <p> <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>EXPIRED</code> - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved couldn't be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ProposalStatus>,
    /// <p> The date and time that the proposal was created. </p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> aren't carried out. </p>
    #[doc(hidden)]
    pub expiration_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The current total of <code>YES</code> votes cast on the proposal by members. </p>
    #[doc(hidden)]
    pub yes_vote_count: std::option::Option<i32>,
    /// <p> The current total of <code>NO</code> votes cast on the proposal by members. </p>
    #[doc(hidden)]
    pub no_vote_count: std::option::Option<i32>,
    /// <p> The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes. </p>
    #[doc(hidden)]
    pub outstanding_vote_count: std::option::Option<i32>,
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl Proposal {
    /// <p>The unique identifier of the proposal.</p>
    pub fn proposal_id(&self) -> std::option::Option<&str> {
        self.proposal_id.as_deref()
    }
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    pub fn network_id(&self) -> std::option::Option<&str> {
        self.network_id.as_deref()
    }
    /// <p>The description of the proposal.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    pub fn actions(&self) -> std::option::Option<&crate::types::ProposalActions> {
        self.actions.as_ref()
    }
    /// <p>The unique identifier of the member that created the proposal.</p>
    pub fn proposed_by_member_id(&self) -> std::option::Option<&str> {
        self.proposed_by_member_id.as_deref()
    }
    /// <p>The name of the member that created the proposal.</p>
    pub fn proposed_by_member_name(&self) -> std::option::Option<&str> {
        self.proposed_by_member_name.as_deref()
    }
    /// <p>The status of the proposal. Values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p> </li>
    /// <li> <p> <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p> </li>
    /// <li> <p> <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>EXPIRED</code> - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved couldn't be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::ProposalStatus> {
        self.status.as_ref()
    }
    /// <p> The date and time that the proposal was created. </p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p> The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> aren't carried out. </p>
    pub fn expiration_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiration_date.as_ref()
    }
    /// <p> The current total of <code>YES</code> votes cast on the proposal by members. </p>
    pub fn yes_vote_count(&self) -> std::option::Option<i32> {
        self.yes_vote_count
    }
    /// <p> The current total of <code>NO</code> votes cast on the proposal by members. </p>
    pub fn no_vote_count(&self) -> std::option::Option<i32> {
        self.no_vote_count
    }
    /// <p> The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes. </p>
    pub fn outstanding_vote_count(&self) -> std::option::Option<i32> {
        self.outstanding_vote_count
    }
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl Proposal {
    /// Creates a new builder-style object to manufacture [`Proposal`](crate::types::Proposal).
    pub fn builder() -> crate::types::builders::ProposalBuilder {
        crate::types::builders::ProposalBuilder::default()
    }
}

/// A builder for [`Proposal`](crate::types::Proposal).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProposalBuilder {
    pub(crate) proposal_id: std::option::Option<std::string::String>,
    pub(crate) network_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) actions: std::option::Option<crate::types::ProposalActions>,
    pub(crate) proposed_by_member_id: std::option::Option<std::string::String>,
    pub(crate) proposed_by_member_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ProposalStatus>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) expiration_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) yes_vote_count: std::option::Option<i32>,
    pub(crate) no_vote_count: std::option::Option<i32>,
    pub(crate) outstanding_vote_count: std::option::Option<i32>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl ProposalBuilder {
    /// <p>The unique identifier of the proposal.</p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.proposal_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the proposal.</p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.proposal_id = input;
        self
    }
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// <p>The description of the proposal.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the proposal.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    pub fn actions(mut self, input: crate::types::ProposalActions) -> Self {
        self.actions = Some(input);
        self
    }
    /// <p>The actions to perform on the network if the proposal is <code>APPROVED</code>.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<crate::types::ProposalActions>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// <p>The unique identifier of the member that created the proposal.</p>
    pub fn proposed_by_member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.proposed_by_member_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the member that created the proposal.</p>
    pub fn set_proposed_by_member_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.proposed_by_member_id = input;
        self
    }
    /// <p>The name of the member that created the proposal.</p>
    pub fn proposed_by_member_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.proposed_by_member_name = Some(input.into());
        self
    }
    /// <p>The name of the member that created the proposal.</p>
    pub fn set_proposed_by_member_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.proposed_by_member_name = input;
        self
    }
    /// <p>The status of the proposal. Values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p> </li>
    /// <li> <p> <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p> </li>
    /// <li> <p> <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>EXPIRED</code> - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved couldn't be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ProposalStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the proposal. Values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The proposal is active and open for member voting.</p> </li>
    /// <li> <p> <code>APPROVED</code> - The proposal was approved with sufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified proposal actions are carried out.</p> </li>
    /// <li> <p> <code>REJECTED</code> - The proposal was rejected with insufficient <code>YES</code> votes among members according to the <code>VotingPolicy</code> specified for the <code>Network</code>. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>EXPIRED</code> - Members didn't cast the number of votes required to determine the proposal outcome before the proposal expired. The specified <code>ProposalActions</code> aren't carried out.</p> </li>
    /// <li> <p> <code>ACTION_FAILED</code> - One or more of the specified <code>ProposalActions</code> in a proposal that was approved couldn't be completed because of an error. The <code>ACTION_FAILED</code> status occurs even if only one ProposalAction fails and other actions are successful.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ProposalStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The date and time that the proposal was created. </p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p> The date and time that the proposal was created. </p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p> The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> aren't carried out. </p>
    pub fn expiration_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiration_date = Some(input);
        self
    }
    /// <p> The date and time that the proposal expires. This is the <code>CreationDate</code> plus the <code>ProposalDurationInHours</code> that is specified in the <code>ProposalThresholdPolicy</code>. After this date and time, if members haven't cast enough votes to determine the outcome according to the voting policy, the proposal is <code>EXPIRED</code> and <code>Actions</code> aren't carried out. </p>
    pub fn set_expiration_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiration_date = input;
        self
    }
    /// <p> The current total of <code>YES</code> votes cast on the proposal by members. </p>
    pub fn yes_vote_count(mut self, input: i32) -> Self {
        self.yes_vote_count = Some(input);
        self
    }
    /// <p> The current total of <code>YES</code> votes cast on the proposal by members. </p>
    pub fn set_yes_vote_count(mut self, input: std::option::Option<i32>) -> Self {
        self.yes_vote_count = input;
        self
    }
    /// <p> The current total of <code>NO</code> votes cast on the proposal by members. </p>
    pub fn no_vote_count(mut self, input: i32) -> Self {
        self.no_vote_count = Some(input);
        self
    }
    /// <p> The current total of <code>NO</code> votes cast on the proposal by members. </p>
    pub fn set_no_vote_count(mut self, input: std::option::Option<i32>) -> Self {
        self.no_vote_count = input;
        self
    }
    /// <p> The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes. </p>
    pub fn outstanding_vote_count(mut self, input: i32) -> Self {
        self.outstanding_vote_count = Some(input);
        self
    }
    /// <p> The number of votes remaining to be cast on the proposal by members. In other words, the number of members minus the sum of <code>YES</code> votes and <code>NO</code> votes. </p>
    pub fn set_outstanding_vote_count(mut self, input: std::option::Option<i32>) -> Self {
        self.outstanding_vote_count = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Tags assigned to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the proposal. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Proposal`](crate::types::Proposal).
    pub fn build(self) -> crate::types::Proposal {
        crate::types::Proposal {
            proposal_id: self.proposal_id,
            network_id: self.network_id,
            description: self.description,
            actions: self.actions,
            proposed_by_member_id: self.proposed_by_member_id,
            proposed_by_member_name: self.proposed_by_member_name,
            status: self.status,
            creation_date: self.creation_date,
            expiration_date: self.expiration_date,
            yes_vote_count: self.yes_vote_count,
            no_vote_count: self.no_vote_count,
            outstanding_vote_count: self.outstanding_vote_count,
            tags: self.tags,
            arn: self.arn,
        }
    }
}
