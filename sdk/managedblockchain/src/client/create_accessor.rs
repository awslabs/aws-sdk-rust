// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAccessor`](crate::operation::create_accessor::builders::CreateAccessorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_accessor::builders::CreateAccessorFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_accessor::builders::CreateAccessorFluentBuilder::set_client_request_token): <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    ///   - [`accessor_type(AccessorType)`](crate::operation::create_accessor::builders::CreateAccessorFluentBuilder::accessor_type) / [`set_accessor_type(Option<AccessorType>)`](crate::operation::create_accessor::builders::CreateAccessorFluentBuilder::set_accessor_type): <p>The type of accessor.</p> <note>   <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>  </note>
    /// - On success, responds with [`CreateAccessorOutput`](crate::operation::create_accessor::CreateAccessorOutput) with field(s):
    ///   - [`accessor_id(Option<String>)`](crate::operation::create_accessor::CreateAccessorOutput::accessor_id): <p>The unique identifier of the accessor.</p>
    ///   - [`billing_token(Option<String>)`](crate::operation::create_accessor::CreateAccessorOutput::billing_token): <p>The billing token is a property of the Accessor. Use this token to make Ethereum API calls to your Ethereum node. The billing token is used to track your accessor object for billing Ethereum API requests made to your Ethereum nodes.</p>
    /// - On failure, responds with [`SdkError<CreateAccessorError>`](crate::operation::create_accessor::CreateAccessorError)
    pub fn create_accessor(
        &self,
    ) -> crate::operation::create_accessor::builders::CreateAccessorFluentBuilder {
        crate::operation::create_accessor::builders::CreateAccessorFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
