// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateNode`](crate::operation::update_node::builders::UpdateNodeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`network_id(impl Into<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::network_id) / [`set_network_id(Option<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::set_network_id): <p>The unique identifier of the network that the node is on.</p>
    ///   - [`member_id(impl Into<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::member_id) / [`set_member_id(Option<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::set_member_id): <p>The unique identifier of the member that owns the node.</p>  <p>Applies only to Hyperledger Fabric.</p>
    ///   - [`node_id(impl Into<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::node_id) / [`set_node_id(Option<String>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::set_node_id): <p>The unique identifier of the node.</p>
    ///   - [`log_publishing_configuration(NodeLogPublishingConfiguration)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::log_publishing_configuration) / [`set_log_publishing_configuration(Option<NodeLogPublishingConfiguration>)`](crate::operation::update_node::builders::UpdateNodeFluentBuilder::set_log_publishing_configuration): <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    /// - On success, responds with [`UpdateNodeOutput`](crate::operation::update_node::UpdateNodeOutput)
    /// - On failure, responds with [`SdkError<UpdateNodeError>`](crate::operation::update_node::UpdateNodeError)
    pub fn update_node(&self) -> crate::operation::update_node::builders::UpdateNodeFluentBuilder {
        crate::operation::update_node::builders::UpdateNodeFluentBuilder::new(self.handle.clone())
    }
}
