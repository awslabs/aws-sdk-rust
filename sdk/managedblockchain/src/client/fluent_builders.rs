// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `CreateAccessor`.
///
/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>Creates a new accessor for use with Managed Blockchain Ethereum nodes. An accessor object is a container that has the information required for token based access to your Ethereum nodes.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccessor {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_accessor_input::Builder,
}
impl CreateAccessor {
    /// Creates a new `CreateAccessor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateAccessor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateAccessorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateAccessorOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateAccessorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn accessor_type(mut self, input: crate::model::AccessorType) -> Self {
        self.inner = self.inner.accessor_type(input);
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn set_accessor_type(
        mut self,
        input: std::option::Option<crate::model::AccessorType>,
    ) -> Self {
        self.inner = self.inner.set_accessor_type(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateMember`.
///
/// <p>Creates a member within a Managed Blockchain network.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateMember {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_member_input::Builder,
}
impl CreateMember {
    /// Creates a new `CreateMember`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateMember,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateMemberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateMemberOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateMemberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The unique identifier of the invitation that is sent to the member to join the network.</p>
    pub fn invitation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.invitation_id(input.into());
        self
    }
    /// <p>The unique identifier of the invitation that is sent to the member to join the network.</p>
    pub fn set_invitation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_invitation_id(input);
        self
    }
    /// <p>The unique identifier of the network in which the member is created.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network in which the member is created.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>Member configuration parameters.</p>
    pub fn member_configuration(mut self, input: crate::model::MemberConfiguration) -> Self {
        self.inner = self.inner.member_configuration(input);
        self
    }
    /// <p>Member configuration parameters.</p>
    pub fn set_member_configuration(
        mut self,
        input: std::option::Option<crate::model::MemberConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_member_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateNetwork`.
///
/// <p>Creates a new blockchain network using Amazon Managed Blockchain.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetwork {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_network_input::Builder,
}
impl CreateNetwork {
    /// Creates a new `CreateNetwork`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateNetwork,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateNetworkError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateNetworkOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateNetworkError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI. </p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI. </p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The name of the network.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the network.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional description for the network.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the network.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The blockchain framework that the network uses.</p>
    pub fn framework(mut self, input: crate::model::Framework) -> Self {
        self.inner = self.inner.framework(input);
        self
    }
    /// <p>The blockchain framework that the network uses.</p>
    pub fn set_framework(mut self, input: std::option::Option<crate::model::Framework>) -> Self {
        self.inner = self.inner.set_framework(input);
        self
    }
    /// <p>The version of the blockchain framework that the network uses.</p>
    pub fn framework_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.framework_version(input.into());
        self
    }
    /// <p>The version of the blockchain framework that the network uses.</p>
    pub fn set_framework_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_framework_version(input);
        self
    }
    /// <p> Configuration properties of the blockchain framework relevant to the network configuration. </p>
    pub fn framework_configuration(
        mut self,
        input: crate::model::NetworkFrameworkConfiguration,
    ) -> Self {
        self.inner = self.inner.framework_configuration(input);
        self
    }
    /// <p> Configuration properties of the blockchain framework relevant to the network configuration. </p>
    pub fn set_framework_configuration(
        mut self,
        input: std::option::Option<crate::model::NetworkFrameworkConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_framework_configuration(input);
        self
    }
    /// <p> The voting rules used by the network to determine if a proposal is approved. </p>
    pub fn voting_policy(mut self, input: crate::model::VotingPolicy) -> Self {
        self.inner = self.inner.voting_policy(input);
        self
    }
    /// <p> The voting rules used by the network to determine if a proposal is approved. </p>
    pub fn set_voting_policy(
        mut self,
        input: std::option::Option<crate::model::VotingPolicy>,
    ) -> Self {
        self.inner = self.inner.set_voting_policy(input);
        self
    }
    /// <p>Configuration properties for the first member within the network.</p>
    pub fn member_configuration(mut self, input: crate::model::MemberConfiguration) -> Self {
        self.inner = self.inner.member_configuration(input);
        self
    }
    /// <p>Configuration properties for the first member within the network.</p>
    pub fn set_member_configuration(
        mut self,
        input: std::option::Option<crate::model::MemberConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_member_configuration(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the network. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the network. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateNode`.
///
/// <p>Creates a node on the specified blockchain network.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNode {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_node_input::Builder,
}
impl CreateNode {
    /// Creates a new `CreateNode`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateNode,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateNodeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateNodeOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateNodeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The unique identifier of the network for the node.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// <li> <p> <code>n-ethereum-rinkeby</code> </p> </li>
    /// <li> <p> <code>n-ethereum-ropsten</code> </p> </li>
    /// </ul>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network for the node.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// <li> <p> <code>n-ethereum-rinkeby</code> </p> </li>
    /// <li> <p> <code>n-ethereum-ropsten</code> </p> </li>
    /// </ul>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The properties of a node configuration.</p>
    pub fn node_configuration(mut self, input: crate::model::NodeConfiguration) -> Self {
        self.inner = self.inner.node_configuration(input);
        self
    }
    /// <p>The properties of a node configuration.</p>
    pub fn set_node_configuration(
        mut self,
        input: std::option::Option<crate::model::NodeConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_node_configuration(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the node. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the node. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateProposal`.
///
/// <p>Creates a proposal for a change to the network that other members of the network can vote on, for example, a proposal to add a new member to the network. Any member can create a proposal.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateProposal {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_proposal_input::Builder,
}
impl CreateProposal {
    /// Creates a new `CreateProposal`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateProposal,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateProposalError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateProposalOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateProposalError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p> The unique identifier of the network for which the proposal is made.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p> The unique identifier of the network for which the proposal is made.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single Amazon Web Services account.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that is creating the proposal. This identifier is especially useful for identifying the member making the proposal when multiple members exist in a single Amazon Web Services account.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The type of actions proposed, such as inviting a member or removing a member. The types of <code>Actions</code> in a proposal are mutually exclusive. For example, a proposal with <code>Invitations</code> actions cannot also contain <code>Removals</code> actions.</p>
    pub fn actions(mut self, input: crate::model::ProposalActions) -> Self {
        self.inner = self.inner.actions(input);
        self
    }
    /// <p>The type of actions proposed, such as inviting a member or removing a member. The types of <code>Actions</code> in a proposal are mutually exclusive. For example, a proposal with <code>Invitations</code> actions cannot also contain <code>Removals</code> actions.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<crate::model::ProposalActions>,
    ) -> Self {
        self.inner = self.inner.set_actions(input);
        self
    }
    /// <p>A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description for the proposal that is visible to voting members, for example, "Proposal to add Example Corp. as member."</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. If the proposal is for a network invitation, the invitation inherits the tags added to the proposal.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the proposal. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource. If the proposal is for a network invitation, the invitation inherits the tags added to the proposal.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteAccessor`.
///
/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>Deletes an accessor that your Amazon Web Services account owns. An accessor object is a container that has the information required for token based access to your Ethereum nodes including, the <code>BILLING_TOKEN</code>. After an accessor is deleted, the status of the accessor changes from <code>AVAILABLE</code> to <code>PENDING_DELETION</code>. An accessor in the <code>PENDING_DELETION</code> state can’t be used for new WebSocket requests or HTTP requests. However, WebSocket connections that were initiated while the accessor was in the <code>AVAILABLE</code> state remain open until they expire (up to 2 hours).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAccessor {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_accessor_input::Builder,
}
impl DeleteAccessor {
    /// Creates a new `DeleteAccessor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteAccessor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteAccessorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteAccessorOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteAccessorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the accessor.</p>
    pub fn accessor_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accessor_id(input.into());
        self
    }
    /// <p>The unique identifier of the accessor.</p>
    pub fn set_accessor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accessor_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteMember`.
///
/// <p>Deletes a member. Deleting a member removes the member and all associated resources from the network. <code>DeleteMember</code> can only be called for a specified <code>MemberId</code> if the principal performing the action is associated with the Amazon Web Services account that owns the member. In all other cases, the <code>DeleteMember</code> action is carried out as the result of an approved proposal to remove a member. If <code>MemberId</code> is the last member in a network specified by the last Amazon Web Services account, the network is deleted also.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMember {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_member_input::Builder,
}
impl DeleteMember {
    /// Creates a new `DeleteMember`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteMember,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteMemberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteMemberOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteMemberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network from which the member is removed.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network from which the member is removed.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member to remove.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member to remove.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteNode`.
///
/// <p>Deletes a node that your Amazon Web Services account owns. All data on the node is lost and cannot be recovered.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNode {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_node_input::Builder,
}
impl DeleteNode {
    /// Creates a new `DeleteNode`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteNode,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteNodeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteNodeOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteNodeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// <li> <p> <code>n-ethereum-rinkeby</code> </p> </li>
    /// <li> <p> <code>n-ethereum-ropsten</code> </p> </li>
    /// </ul>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// <li> <p> <code>n-ethereum-rinkeby</code> </p> </li>
    /// <li> <p> <code>n-ethereum-ropsten</code> </p> </li>
    /// </ul>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_id(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetAccessor`.
///
/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>Returns detailed information about an accessor. An accessor object is a container that has the information required for token based access to your Ethereum nodes.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetAccessor {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_accessor_input::Builder,
}
impl GetAccessor {
    /// Creates a new `GetAccessor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetAccessor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetAccessorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetAccessorOutput,
        aws_smithy_http::result::SdkError<crate::error::GetAccessorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the accessor.</p>
    pub fn accessor_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.accessor_id(input.into());
        self
    }
    /// <p>The unique identifier of the accessor.</p>
    pub fn set_accessor_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_accessor_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetMember`.
///
/// <p>Returns detailed information about a member.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMember {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_member_input::Builder,
}
impl GetMember {
    /// Creates a new `GetMember`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetMember,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetMemberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetMemberOutput,
        aws_smithy_http::result::SdkError<crate::error::GetMemberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network to which the member belongs.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network to which the member belongs.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetNetwork`.
///
/// <p>Returns detailed information about a network.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetNetwork {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_network_input::Builder,
}
impl GetNetwork {
    /// Creates a new `GetNetwork`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetNetwork,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetNetworkError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetNetworkOutput,
        aws_smithy_http::result::SdkError<crate::error::GetNetworkError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network to get information about.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network to get information about.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetNode`.
///
/// <p>Returns detailed information about a node.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetNode {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_node_input::Builder,
}
impl GetNode {
    /// Creates a new `GetNode`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetNode,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetNodeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetNodeOutput,
        aws_smithy_http::result::SdkError<crate::error::GetNodeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_id(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_id(input);
        self
    }
}

/// Fluent builder constructing a request to `GetProposal`.
///
/// <p>Returns detailed information about a proposal.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetProposal {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::get_proposal_input::Builder,
}
impl GetProposal {
    /// Creates a new `GetProposal`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::GetProposal,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::GetProposalError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::GetProposalOutput,
        aws_smithy_http::result::SdkError<crate::error::GetProposalError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network for which the proposal is made.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the proposal.</p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proposal_id(input.into());
        self
    }
    /// <p>The unique identifier of the proposal.</p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proposal_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListAccessors`.
///
/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>Returns a list of the accessors and their properties. Accessor objects are containers that have the information required for token based access to your Ethereum nodes.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListAccessors {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_accessors_input::Builder,
}
impl ListAccessors {
    /// Creates a new `ListAccessors`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListAccessors,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListAccessorsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListAccessorsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListAccessorsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListAccessorsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListAccessorsPaginator {
        crate::paginator::ListAccessorsPaginator::new(self.handle, self.inner)
    }
    /// <p> The maximum number of accessors to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of accessors to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListInvitations`.
///
/// <p>Returns a list of all invitations for the current Amazon Web Services account.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListInvitations {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_invitations_input::Builder,
}
impl ListInvitations {
    /// Creates a new `ListInvitations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListInvitations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListInvitationsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListInvitationsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListInvitationsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListInvitationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListInvitationsPaginator {
        crate::paginator::ListInvitationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of invitations to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of invitations to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListMembers`.
///
/// <p>Returns a list of the members in a network and properties of their configurations.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListMembers {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_members_input::Builder,
}
impl ListMembers {
    /// Creates a new `ListMembers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListMembers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListMembersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListMembersOutput,
        aws_smithy_http::result::SdkError<crate::error::ListMembersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListMembersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListMembersPaginator {
        crate::paginator::ListMembersPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier of the network for which to list members.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network for which to list members.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The optional name of the member to list.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The optional name of the member to list.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn status(mut self, input: crate::model::MemberStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::MemberStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn is_owned(mut self, input: bool) -> Self {
        self.inner = self.inner.is_owned(input);
        self
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn set_is_owned(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_owned(input);
        self
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListNetworks`.
///
/// <p>Returns information about the networks in which the current Amazon Web Services account participates.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNetworks {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_networks_input::Builder,
}
impl ListNetworks {
    /// Creates a new `ListNetworks`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListNetworks,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListNetworksError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListNetworksOutput,
        aws_smithy_http::result::SdkError<crate::error::ListNetworksError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListNetworksPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListNetworksPaginator {
        crate::paginator::ListNetworksPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the network.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the network.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional framework specifier. If provided, only networks of this framework type are listed.</p>
    pub fn framework(mut self, input: crate::model::Framework) -> Self {
        self.inner = self.inner.framework(input);
        self
    }
    /// <p>An optional framework specifier. If provided, only networks of this framework type are listed.</p>
    pub fn set_framework(mut self, input: std::option::Option<crate::model::Framework>) -> Self {
        self.inner = self.inner.set_framework(input);
        self
    }
    /// <p>An optional status specifier. If provided, only networks currently in this status are listed.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn status(mut self, input: crate::model::NetworkStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>An optional status specifier. If provided, only networks currently in this status are listed.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::NetworkStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The maximum number of networks to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of networks to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListNodes`.
///
/// <p>Returns information about the nodes within a network.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListNodes {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_nodes_input::Builder,
}
impl ListNodes {
    /// Creates a new `ListNodes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListNodes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListNodesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListNodesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListNodesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListNodesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListNodesPaginator {
        crate::paginator::ListNodesPaginator::new(self.handle, self.inner)
    }
    /// <p>The unique identifier of the network for which to list nodes.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network for which to list nodes.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member who owns the nodes to list.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member who owns the nodes to list.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>An optional status specifier. If provided, only nodes currently in this status are listed.</p>
    pub fn status(mut self, input: crate::model::NodeStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>An optional status specifier. If provided, only nodes currently in this status are listed.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::model::NodeStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The maximum number of nodes to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of nodes to list.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProposals`.
///
/// <p>Returns a list of proposals for the network.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProposals {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_proposals_input::Builder,
}
impl ListProposals {
    /// Creates a new `ListProposals`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProposals,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProposalsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProposalsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProposalsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProposalsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProposalsPaginator {
        crate::paginator::ListProposalsPaginator::new(self.handle, self.inner)
    }
    /// <p> The unique identifier of the network. </p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p> The unique identifier of the network. </p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p> The maximum number of proposals to return. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of proposals to return. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListProposalVotes`.
///
/// <p>Returns the list of votes for a specified proposal, including the value of each vote and the unique identifier of the member that cast the vote.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListProposalVotes {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_proposal_votes_input::Builder,
}
impl ListProposalVotes {
    /// Creates a new `ListProposalVotes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListProposalVotes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListProposalVotesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListProposalVotesOutput,
        aws_smithy_http::result::SdkError<crate::error::ListProposalVotesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListProposalVotesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListProposalVotesPaginator {
        crate::paginator::ListProposalVotesPaginator::new(self.handle, self.inner)
    }
    /// <p> The unique identifier of the network. </p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p> The unique identifier of the network. </p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p> The unique identifier of the proposal. </p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proposal_id(input.into());
        self
    }
    /// <p> The unique identifier of the proposal. </p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proposal_id(input);
        self
    }
    /// <p> The maximum number of votes to return. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of votes to return. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The pagination token that indicates the next set of results to retrieve. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>Returns a list of tags for the specified resource. Each tag consists of a key and optional value.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `RejectInvitation`.
///
/// <p>Rejects an invitation to join a network. This action can be called by a principal in an Amazon Web Services account that has received an invitation to create a member and join a network.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RejectInvitation {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::reject_invitation_input::Builder,
}
impl RejectInvitation {
    /// Creates a new `RejectInvitation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::RejectInvitation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::RejectInvitationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::RejectInvitationOutput,
        aws_smithy_http::result::SdkError<crate::error::RejectInvitationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the invitation to reject.</p>
    pub fn invitation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.invitation_id(input.into());
        self
    }
    /// <p>The unique identifier of the invitation to reject.</p>
    pub fn set_invitation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_invitation_id(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Adds or overwrites the specified tags for the specified Amazon Managed Blockchain resource. Each tag consists of a key and optional value.</p>
/// <p>When you specify a tag key that already exists, the tag value is overwritten with the new value. Use <code>UntagResource</code> to remove tag keys.</p>
/// <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a resource, your request fails and returns an error.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to assign to the specified resource. Tag values can be empty, for example, <code>"MyTagKey" : ""</code>. You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>The tags to assign to the specified resource. Tag values can be empty, for example, <code>"MyTagKey" : ""</code>. You can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Removes the specified tags from the Amazon Managed Blockchain resource.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource. For more information about ARNs and their format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The tag keys.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>The tag keys.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateMember`.
///
/// <p>Updates a member configuration with new parameters.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMember {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_member_input::Builder,
}
impl UpdateMember {
    /// Creates a new `UpdateMember`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateMember,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateMemberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateMemberOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateMemberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the Managed Blockchain network to which the member belongs.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the Managed Blockchain network to which the member belongs.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    pub fn log_publishing_configuration(
        mut self,
        input: crate::model::MemberLogPublishingConfiguration,
    ) -> Self {
        self.inner = self.inner.log_publishing_configuration(input);
        self
    }
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    pub fn set_log_publishing_configuration(
        mut self,
        input: std::option::Option<crate::model::MemberLogPublishingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_log_publishing_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateNode`.
///
/// <p>Updates a node configuration with new parameters.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNode {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_node_input::Builder,
}
impl UpdateNode {
    /// Creates a new `UpdateNode`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateNode,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateNodeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateNodeOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateNodeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_id(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_id(input);
        self
    }
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    pub fn log_publishing_configuration(
        mut self,
        input: crate::model::NodeLogPublishingConfiguration,
    ) -> Self {
        self.inner = self.inner.log_publishing_configuration(input);
        self
    }
    /// <p>Configuration properties for publishing to Amazon CloudWatch Logs.</p>
    pub fn set_log_publishing_configuration(
        mut self,
        input: std::option::Option<crate::model::NodeLogPublishingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_log_publishing_configuration(input);
        self
    }
}

/// Fluent builder constructing a request to `VoteOnProposal`.
///
/// <p>Casts a vote for a specified <code>ProposalId</code> on behalf of a member. The member to vote as, specified by <code>VoterMemberId</code>, must be in the same Amazon Web Services account as the principal that calls the action.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct VoteOnProposal {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::vote_on_proposal_input::Builder,
}
impl VoteOnProposal {
    /// Creates a new `VoteOnProposal`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::VoteOnProposal,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::VoteOnProposalError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::VoteOnProposalOutput,
        aws_smithy_http::result::SdkError<crate::error::VoteOnProposalError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique identifier of the network. </p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p> The unique identifier of the network. </p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p> The unique identifier of the proposal. </p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.proposal_id(input.into());
        self
    }
    /// <p> The unique identifier of the proposal. </p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_proposal_id(input);
        self
    }
    /// <p>The unique identifier of the member casting the vote. </p>
    pub fn voter_member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.voter_member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member casting the vote. </p>
    pub fn set_voter_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_voter_member_id(input);
        self
    }
    /// <p> The value of the vote. </p>
    pub fn vote(mut self, input: crate::model::VoteValue) -> Self {
        self.inner = self.inner.vote(input);
        self
    }
    /// <p> The value of the vote. </p>
    pub fn set_vote(mut self, input: std::option::Option<crate::model::VoteValue>) -> Self {
        self.inner = self.inner.set_vote(input);
        self
    }
}
