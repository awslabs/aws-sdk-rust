// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteNodeInput {
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub network_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub member_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the node.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
}
impl DeleteNodeInput {
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn network_id(&self) -> ::std::option::Option<&str> {
        self.network_id.as_deref()
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(&self) -> ::std::option::Option<&str> {
        self.member_id.as_deref()
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
}
impl DeleteNodeInput {
    /// Creates a new builder-style object to manufacture [`DeleteNodeInput`](crate::operation::delete_node::DeleteNodeInput).
    pub fn builder() -> crate::operation::delete_node::builders::DeleteNodeInputBuilder {
        crate::operation::delete_node::builders::DeleteNodeInputBuilder::default()
    }
}

/// A builder for [`DeleteNodeInput`](crate::operation::delete_node::DeleteNodeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteNodeInputBuilder {
    pub(crate) network_id: ::std::option::Option<::std::string::String>,
    pub(crate) member_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
}
impl DeleteNodeInputBuilder {
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn set_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn get_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_id
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_id = input;
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn get_member_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_id
    }
    /// <p>The unique identifier of the node.</p>
    /// This field is required.
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// Consumes the builder and constructs a [`DeleteNodeInput`](crate::operation::delete_node::DeleteNodeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::delete_node::DeleteNodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_node::DeleteNodeInput {
            network_id: self.network_id,
            member_id: self.member_id,
            node_id: self.node_id,
        })
    }
}
