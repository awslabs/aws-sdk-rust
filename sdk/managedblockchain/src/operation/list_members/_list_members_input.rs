// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMembersInput {
    /// <p>The unique identifier of the network for which to list members.</p>
    pub network_id: ::std::option::Option<::std::string::String>,
    /// <p>The optional name of the member to list.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub status: ::std::option::Option<crate::types::MemberStatus>,
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub is_owned: ::std::option::Option<bool>,
    /// <p>The maximum number of members to return in the request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListMembersInput {
    /// <p>The unique identifier of the network for which to list members.</p>
    pub fn network_id(&self) -> ::std::option::Option<&str> {
        self.network_id.as_deref()
    }
    /// <p>The optional name of the member to list.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MemberStatus> {
        self.status.as_ref()
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn is_owned(&self) -> ::std::option::Option<bool> {
        self.is_owned
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListMembersInput {
    /// Creates a new builder-style object to manufacture [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
    pub fn builder() -> crate::operation::list_members::builders::ListMembersInputBuilder {
        crate::operation::list_members::builders::ListMembersInputBuilder::default()
    }
}

/// A builder for [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListMembersInputBuilder {
    pub(crate) network_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MemberStatus>,
    pub(crate) is_owned: ::std::option::Option<bool>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListMembersInputBuilder {
    /// <p>The unique identifier of the network for which to list members.</p>
    /// This field is required.
    pub fn network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the network for which to list members.</p>
    pub fn set_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// <p>The unique identifier of the network for which to list members.</p>
    pub fn get_network_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_id
    }
    /// <p>The optional name of the member to list.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional name of the member to list.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The optional name of the member to list.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn status(mut self, input: crate::types::MemberStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MemberStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>An optional status specifier. If provided, only members currently in this status are listed.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MemberStatus> {
        &self.status
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn is_owned(mut self, input: bool) -> Self {
        self.is_owned = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn set_is_owned(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_owned = input;
        self
    }
    /// <p>An optional Boolean value. If provided, the request is limited either to members that the current Amazon Web Services account owns (<code>true</code>) or that other Amazon Web Services accountsn own (<code>false</code>). If omitted, all members are listed.</p>
    pub fn get_is_owned(&self) -> &::std::option::Option<bool> {
        &self.is_owned
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of members to return in the request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token that indicates the next set of results to retrieve.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_members::ListMembersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_members::ListMembersInput {
            network_id: self.network_id,
            name: self.name,
            status: self.status,
            is_owned: self.is_owned,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
