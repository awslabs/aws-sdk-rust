// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_network::_create_network_output::CreateNetworkOutputBuilder;

pub use crate::operation::create_network::_create_network_input::CreateNetworkInputBuilder;

/// Fluent builder constructing a request to `CreateNetwork`.
///
/// <p>Creates a new blockchain network using Amazon Managed Blockchain.</p>
/// <p>Applies only to Hyperledger Fabric.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNetworkFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_network::builders::CreateNetworkInputBuilder,
}
impl CreateNetworkFluentBuilder {
    /// Creates a new `CreateNetwork`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_network::CreateNetwork,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_network::CreateNetworkError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_network::CreateNetworkOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_network::CreateNetworkError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI. </p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI. </p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The name of the network.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the network.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>An optional description for the network.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description for the network.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The blockchain framework that the network uses.</p>
    pub fn framework(mut self, input: crate::types::Framework) -> Self {
        self.inner = self.inner.framework(input);
        self
    }
    /// <p>The blockchain framework that the network uses.</p>
    pub fn set_framework(mut self, input: std::option::Option<crate::types::Framework>) -> Self {
        self.inner = self.inner.set_framework(input);
        self
    }
    /// <p>The version of the blockchain framework that the network uses.</p>
    pub fn framework_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.framework_version(input.into());
        self
    }
    /// <p>The version of the blockchain framework that the network uses.</p>
    pub fn set_framework_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_framework_version(input);
        self
    }
    /// <p> Configuration properties of the blockchain framework relevant to the network configuration. </p>
    pub fn framework_configuration(
        mut self,
        input: crate::types::NetworkFrameworkConfiguration,
    ) -> Self {
        self.inner = self.inner.framework_configuration(input);
        self
    }
    /// <p> Configuration properties of the blockchain framework relevant to the network configuration. </p>
    pub fn set_framework_configuration(
        mut self,
        input: std::option::Option<crate::types::NetworkFrameworkConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_framework_configuration(input);
        self
    }
    /// <p> The voting rules used by the network to determine if a proposal is approved. </p>
    pub fn voting_policy(mut self, input: crate::types::VotingPolicy) -> Self {
        self.inner = self.inner.voting_policy(input);
        self
    }
    /// <p> The voting rules used by the network to determine if a proposal is approved. </p>
    pub fn set_voting_policy(
        mut self,
        input: std::option::Option<crate::types::VotingPolicy>,
    ) -> Self {
        self.inner = self.inner.set_voting_policy(input);
        self
    }
    /// <p>Configuration properties for the first member within the network.</p>
    pub fn member_configuration(mut self, input: crate::types::MemberConfiguration) -> Self {
        self.inner = self.inner.member_configuration(input);
        self
    }
    /// <p>Configuration properties for the first member within the network.</p>
    pub fn set_member_configuration(
        mut self,
        input: std::option::Option<crate::types::MemberConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_member_configuration(input);
        self
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the network. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the network. Each tag consists of a key and optional value.</p>
    /// <p>When specifying tags during creation, you can specify multiple key-value pairs in a single request, with an overall maximum of 50 tags added to each resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
