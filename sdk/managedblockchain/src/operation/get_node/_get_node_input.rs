// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNodeInput {
    /// <p>The unique identifier of the network that the node is on.</p>
    #[doc(hidden)]
    pub network_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    #[doc(hidden)]
    pub member_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the node.</p>
    #[doc(hidden)]
    pub node_id: std::option::Option<std::string::String>,
}
impl GetNodeInput {
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(&self) -> std::option::Option<&str> {
        self.network_id.as_deref()
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(&self) -> std::option::Option<&str> {
        self.member_id.as_deref()
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(&self) -> std::option::Option<&str> {
        self.node_id.as_deref()
    }
}
impl GetNodeInput {
    /// Creates a new builder-style object to manufacture [`GetNodeInput`](crate::operation::get_node::GetNodeInput).
    pub fn builder() -> crate::operation::get_node::builders::GetNodeInputBuilder {
        crate::operation::get_node::builders::GetNodeInputBuilder::default()
    }
}

/// A builder for [`GetNodeInput`](crate::operation::get_node::GetNodeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetNodeInputBuilder {
    pub(crate) network_id: std::option::Option<std::string::String>,
    pub(crate) member_id: std::option::Option<std::string::String>,
    pub(crate) node_id: std::option::Option<std::string::String>,
}
impl GetNodeInputBuilder {
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn network_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the network that the node is on.</p>
    pub fn set_network_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_id = input;
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.member_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns the node.</p>
    /// <p>Applies only to Hyperledger Fabric and is required for Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.member_id = input;
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the node.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// Consumes the builder and constructs a [`GetNodeInput`](crate::operation::get_node::GetNodeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_node::GetNodeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_node::GetNodeInput {
            network_id: self.network_id,
            member_id: self.member_id,
            node_id: self.node_id,
        })
    }
}
