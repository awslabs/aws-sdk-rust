// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAccessorInput {
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub accessor_type: std::option::Option<crate::types::AccessorType>,
}
impl CreateAccessorInput {
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn accessor_type(&self) -> std::option::Option<&crate::types::AccessorType> {
        self.accessor_type.as_ref()
    }
}
impl CreateAccessorInput {
    /// Creates a new builder-style object to manufacture [`CreateAccessorInput`](crate::operation::create_accessor::CreateAccessorInput).
    pub fn builder() -> crate::operation::create_accessor::builders::CreateAccessorInputBuilder {
        crate::operation::create_accessor::builders::CreateAccessorInputBuilder::default()
    }
}

/// A builder for [`CreateAccessorInput`](crate::operation::create_accessor::CreateAccessorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAccessorInputBuilder {
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) accessor_type: std::option::Option<crate::types::AccessorType>,
}
impl CreateAccessorInputBuilder {
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn accessor_type(mut self, input: crate::types::AccessorType) -> Self {
        self.accessor_type = Some(input);
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn set_accessor_type(
        mut self,
        input: std::option::Option<crate::types::AccessorType>,
    ) -> Self {
        self.accessor_type = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAccessorInput`](crate::operation::create_accessor::CreateAccessorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_accessor::CreateAccessorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_accessor::CreateAccessorInput {
            client_request_token: self.client_request_token,
            accessor_type: self.accessor_type,
        })
    }
}
