// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_accessor::_create_accessor_output::CreateAccessorOutputBuilder;

pub use crate::operation::create_accessor::_create_accessor_input::CreateAccessorInputBuilder;

/// Fluent builder constructing a request to `CreateAccessor`.
///
/// <important>
/// <p>The token based access feature is in preview release for Ethereum on Amazon Managed Blockchain and is subject to change. We recommend that you use this feature only with test scenarios, and not in production environments.</p>
/// </important>
/// <p>Creates a new accessor for use with Managed Blockchain Ethereum nodes. An accessor object is a container that has the information required for token based access to your Ethereum nodes.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateAccessorFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_accessor::builders::CreateAccessorInputBuilder,
}
impl CreateAccessorFluentBuilder {
    /// Creates a new `CreateAccessor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_accessor::CreateAccessor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_accessor::CreateAccessorError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_accessor::CreateAccessorOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_accessor::CreateAccessorError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>This is a unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the Amazon Web Services CLI.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn accessor_type(mut self, input: crate::types::AccessorType) -> Self {
        self.inner = self.inner.accessor_type(input);
        self
    }
    /// <p>The type of accessor.</p> <note>
    /// <p>Currently accessor type is restricted to <code>BILLING_TOKEN</code>.</p>
    /// </note>
    pub fn set_accessor_type(
        mut self,
        input: std::option::Option<crate::types::AccessorType>,
    ) -> Self {
        self.inner = self.inner.set_accessor_type(input);
        self
    }
}
