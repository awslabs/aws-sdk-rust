// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_node::_create_node_output::CreateNodeOutputBuilder;

pub use crate::operation::create_node::_create_node_input::CreateNodeInputBuilder;

impl CreateNodeInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_node::CreateNodeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_node::CreateNodeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_node();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateNode`.
///
/// <p>Creates a node on the specified blockchain network.</p>
/// <p>Applies to Hyperledger Fabric and Ethereum.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateNodeFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_node::builders::CreateNodeInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_node::CreateNodeOutput,
        crate::operation::create_node::CreateNodeError,
    > for CreateNodeFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_node::CreateNodeOutput,
            crate::operation::create_node::CreateNodeError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateNodeFluentBuilder {
    /// Creates a new `CreateNode`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateNode as a reference.
    pub fn as_input(&self) -> &crate::operation::create_node::builders::CreateNodeInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_node::CreateNodeOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_node::CreateNodeError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_node::CreateNode::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_node::CreateNode::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_node::CreateNodeOutput,
        crate::operation::create_node::CreateNodeError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>The unique identifier of the network for the node.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn network_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network_id(input.into());
        self
    }
    /// <p>The unique identifier of the network for the node.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn set_network_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network_id(input);
        self
    }
    /// <p>The unique identifier of the network for the node.</p>
    /// <p>Ethereum public networks have the following <code>NetworkId</code>s:</p>
    /// <ul>
    /// <li> <p> <code>n-ethereum-mainnet</code> </p> </li>
    /// <li> <p> <code>n-ethereum-goerli</code> </p> </li>
    /// </ul>
    pub fn get_network_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network_id()
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn member_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.member_id(input.into());
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn set_member_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_member_id(input);
        self
    }
    /// <p>The unique identifier of the member that owns this node.</p>
    /// <p>Applies only to Hyperledger Fabric.</p>
    pub fn get_member_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_member_id()
    }
    /// <p>The properties of a node configuration.</p>
    pub fn node_configuration(mut self, input: crate::types::NodeConfiguration) -> Self {
        self.inner = self.inner.node_configuration(input);
        self
    }
    /// <p>The properties of a node configuration.</p>
    pub fn set_node_configuration(mut self, input: ::std::option::Option<crate::types::NodeConfiguration>) -> Self {
        self.inner = self.inner.set_node_configuration(input);
        self
    }
    /// <p>The properties of a node configuration.</p>
    pub fn get_node_configuration(&self) -> &::std::option::Option<crate::types::NodeConfiguration> {
        self.inner.get_node_configuration()
    }
    /// Adds a key-value pair to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the node.</p>
    /// <p> Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Tags to assign to the node.</p>
    /// <p> Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Tags to assign to the node.</p>
    /// <p> Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource.</p>
    /// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href="https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
}
