// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateAccessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_accessor`](crate::client::fluent_builders::CreateAccessor).
///
/// `ParseStrictResponse` impl for `CreateAccessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAccessor {
    _private: (),
}
impl CreateAccessor {
    /// Creates a new builder-style object to manufacture [`CreateAccessorInput`](crate::input::CreateAccessorInput).
    pub fn builder() -> crate::input::create_accessor_input::Builder {
        crate::input::create_accessor_input::Builder::default()
    }
    /// Creates a new `CreateAccessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAccessor {
    type Output =
        std::result::Result<crate::output::CreateAccessorOutput, crate::error::CreateAccessorError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_accessor::de_create_accessor_http_error(response)
        } else {
            crate::protocol_serde::shape_create_accessor::de_create_accessor_http_response(response)
        }
    }
}

/// Operation shape for `CreateMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_member`](crate::client::fluent_builders::CreateMember).
///
/// `ParseStrictResponse` impl for `CreateMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateMember {
    _private: (),
}
impl CreateMember {
    /// Creates a new builder-style object to manufacture [`CreateMemberInput`](crate::input::CreateMemberInput).
    pub fn builder() -> crate::input::create_member_input::Builder {
        crate::input::create_member_input::Builder::default()
    }
    /// Creates a new `CreateMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateMember {
    type Output =
        std::result::Result<crate::output::CreateMemberOutput, crate::error::CreateMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_member::de_create_member_http_error(response)
        } else {
            crate::protocol_serde::shape_create_member::de_create_member_http_response(response)
        }
    }
}

/// Operation shape for `CreateNetwork`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_network`](crate::client::fluent_builders::CreateNetwork).
///
/// `ParseStrictResponse` impl for `CreateNetwork`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNetwork {
    _private: (),
}
impl CreateNetwork {
    /// Creates a new builder-style object to manufacture [`CreateNetworkInput`](crate::input::CreateNetworkInput).
    pub fn builder() -> crate::input::create_network_input::Builder {
        crate::input::create_network_input::Builder::default()
    }
    /// Creates a new `CreateNetwork` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNetwork {
    type Output =
        std::result::Result<crate::output::CreateNetworkOutput, crate::error::CreateNetworkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_network::de_create_network_http_error(response)
        } else {
            crate::protocol_serde::shape_create_network::de_create_network_http_response(response)
        }
    }
}

/// Operation shape for `CreateNode`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_node`](crate::client::fluent_builders::CreateNode).
///
/// `ParseStrictResponse` impl for `CreateNode`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNode {
    _private: (),
}
impl CreateNode {
    /// Creates a new builder-style object to manufacture [`CreateNodeInput`](crate::input::CreateNodeInput).
    pub fn builder() -> crate::input::create_node_input::Builder {
        crate::input::create_node_input::Builder::default()
    }
    /// Creates a new `CreateNode` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNode {
    type Output =
        std::result::Result<crate::output::CreateNodeOutput, crate::error::CreateNodeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_node::de_create_node_http_error(response)
        } else {
            crate::protocol_serde::shape_create_node::de_create_node_http_response(response)
        }
    }
}

/// Operation shape for `CreateProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_proposal`](crate::client::fluent_builders::CreateProposal).
///
/// `ParseStrictResponse` impl for `CreateProposal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProposal {
    _private: (),
}
impl CreateProposal {
    /// Creates a new builder-style object to manufacture [`CreateProposalInput`](crate::input::CreateProposalInput).
    pub fn builder() -> crate::input::create_proposal_input::Builder {
        crate::input::create_proposal_input::Builder::default()
    }
    /// Creates a new `CreateProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProposal {
    type Output =
        std::result::Result<crate::output::CreateProposalOutput, crate::error::CreateProposalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_proposal::de_create_proposal_http_error(response)
        } else {
            crate::protocol_serde::shape_create_proposal::de_create_proposal_http_response(response)
        }
    }
}

/// Operation shape for `DeleteAccessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_accessor`](crate::client::fluent_builders::DeleteAccessor).
///
/// `ParseStrictResponse` impl for `DeleteAccessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAccessor {
    _private: (),
}
impl DeleteAccessor {
    /// Creates a new builder-style object to manufacture [`DeleteAccessorInput`](crate::input::DeleteAccessorInput).
    pub fn builder() -> crate::input::delete_accessor_input::Builder {
        crate::input::delete_accessor_input::Builder::default()
    }
    /// Creates a new `DeleteAccessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAccessor {
    type Output =
        std::result::Result<crate::output::DeleteAccessorOutput, crate::error::DeleteAccessorError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_accessor::de_delete_accessor_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_accessor::de_delete_accessor_http_response(response)
        }
    }
}

/// Operation shape for `DeleteMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_member`](crate::client::fluent_builders::DeleteMember).
///
/// `ParseStrictResponse` impl for `DeleteMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteMember {
    _private: (),
}
impl DeleteMember {
    /// Creates a new builder-style object to manufacture [`DeleteMemberInput`](crate::input::DeleteMemberInput).
    pub fn builder() -> crate::input::delete_member_input::Builder {
        crate::input::delete_member_input::Builder::default()
    }
    /// Creates a new `DeleteMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteMember {
    type Output =
        std::result::Result<crate::output::DeleteMemberOutput, crate::error::DeleteMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_member::de_delete_member_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_member::de_delete_member_http_response(response)
        }
    }
}

/// Operation shape for `DeleteNode`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_node`](crate::client::fluent_builders::DeleteNode).
///
/// `ParseStrictResponse` impl for `DeleteNode`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNode {
    _private: (),
}
impl DeleteNode {
    /// Creates a new builder-style object to manufacture [`DeleteNodeInput`](crate::input::DeleteNodeInput).
    pub fn builder() -> crate::input::delete_node_input::Builder {
        crate::input::delete_node_input::Builder::default()
    }
    /// Creates a new `DeleteNode` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNode {
    type Output =
        std::result::Result<crate::output::DeleteNodeOutput, crate::error::DeleteNodeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_node::de_delete_node_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_node::de_delete_node_http_response(response)
        }
    }
}

/// Operation shape for `GetAccessor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_accessor`](crate::client::fluent_builders::GetAccessor).
///
/// `ParseStrictResponse` impl for `GetAccessor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAccessor {
    _private: (),
}
impl GetAccessor {
    /// Creates a new builder-style object to manufacture [`GetAccessorInput`](crate::input::GetAccessorInput).
    pub fn builder() -> crate::input::get_accessor_input::Builder {
        crate::input::get_accessor_input::Builder::default()
    }
    /// Creates a new `GetAccessor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAccessor {
    type Output =
        std::result::Result<crate::output::GetAccessorOutput, crate::error::GetAccessorError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_accessor::de_get_accessor_http_error(response)
        } else {
            crate::protocol_serde::shape_get_accessor::de_get_accessor_http_response(response)
        }
    }
}

/// Operation shape for `GetMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_member`](crate::client::fluent_builders::GetMember).
///
/// `ParseStrictResponse` impl for `GetMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMember {
    _private: (),
}
impl GetMember {
    /// Creates a new builder-style object to manufacture [`GetMemberInput`](crate::input::GetMemberInput).
    pub fn builder() -> crate::input::get_member_input::Builder {
        crate::input::get_member_input::Builder::default()
    }
    /// Creates a new `GetMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMember {
    type Output = std::result::Result<crate::output::GetMemberOutput, crate::error::GetMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_member::de_get_member_http_error(response)
        } else {
            crate::protocol_serde::shape_get_member::de_get_member_http_response(response)
        }
    }
}

/// Operation shape for `GetNetwork`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_network`](crate::client::fluent_builders::GetNetwork).
///
/// `ParseStrictResponse` impl for `GetNetwork`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNetwork {
    _private: (),
}
impl GetNetwork {
    /// Creates a new builder-style object to manufacture [`GetNetworkInput`](crate::input::GetNetworkInput).
    pub fn builder() -> crate::input::get_network_input::Builder {
        crate::input::get_network_input::Builder::default()
    }
    /// Creates a new `GetNetwork` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNetwork {
    type Output =
        std::result::Result<crate::output::GetNetworkOutput, crate::error::GetNetworkError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_network::de_get_network_http_error(response)
        } else {
            crate::protocol_serde::shape_get_network::de_get_network_http_response(response)
        }
    }
}

/// Operation shape for `GetNode`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_node`](crate::client::fluent_builders::GetNode).
///
/// `ParseStrictResponse` impl for `GetNode`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetNode {
    _private: (),
}
impl GetNode {
    /// Creates a new builder-style object to manufacture [`GetNodeInput`](crate::input::GetNodeInput).
    pub fn builder() -> crate::input::get_node_input::Builder {
        crate::input::get_node_input::Builder::default()
    }
    /// Creates a new `GetNode` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetNode {
    type Output = std::result::Result<crate::output::GetNodeOutput, crate::error::GetNodeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_node::de_get_node_http_error(response)
        } else {
            crate::protocol_serde::shape_get_node::de_get_node_http_response(response)
        }
    }
}

/// Operation shape for `GetProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_proposal`](crate::client::fluent_builders::GetProposal).
///
/// `ParseStrictResponse` impl for `GetProposal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetProposal {
    _private: (),
}
impl GetProposal {
    /// Creates a new builder-style object to manufacture [`GetProposalInput`](crate::input::GetProposalInput).
    pub fn builder() -> crate::input::get_proposal_input::Builder {
        crate::input::get_proposal_input::Builder::default()
    }
    /// Creates a new `GetProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetProposal {
    type Output =
        std::result::Result<crate::output::GetProposalOutput, crate::error::GetProposalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_proposal::de_get_proposal_http_error(response)
        } else {
            crate::protocol_serde::shape_get_proposal::de_get_proposal_http_response(response)
        }
    }
}

/// Operation shape for `ListAccessors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_accessors`](crate::client::fluent_builders::ListAccessors).
///
/// `ParseStrictResponse` impl for `ListAccessors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAccessors {
    _private: (),
}
impl ListAccessors {
    /// Creates a new builder-style object to manufacture [`ListAccessorsInput`](crate::input::ListAccessorsInput).
    pub fn builder() -> crate::input::list_accessors_input::Builder {
        crate::input::list_accessors_input::Builder::default()
    }
    /// Creates a new `ListAccessors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAccessors {
    type Output =
        std::result::Result<crate::output::ListAccessorsOutput, crate::error::ListAccessorsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_accessors::de_list_accessors_http_error(response)
        } else {
            crate::protocol_serde::shape_list_accessors::de_list_accessors_http_response(response)
        }
    }
}

/// Operation shape for `ListInvitations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_invitations`](crate::client::fluent_builders::ListInvitations).
///
/// `ParseStrictResponse` impl for `ListInvitations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListInvitations {
    _private: (),
}
impl ListInvitations {
    /// Creates a new builder-style object to manufacture [`ListInvitationsInput`](crate::input::ListInvitationsInput).
    pub fn builder() -> crate::input::list_invitations_input::Builder {
        crate::input::list_invitations_input::Builder::default()
    }
    /// Creates a new `ListInvitations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListInvitations {
    type Output = std::result::Result<
        crate::output::ListInvitationsOutput,
        crate::error::ListInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_invitations::de_list_invitations_http_error(response)
        } else {
            crate::protocol_serde::shape_list_invitations::de_list_invitations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListMembers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_members`](crate::client::fluent_builders::ListMembers).
///
/// `ParseStrictResponse` impl for `ListMembers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListMembers {
    _private: (),
}
impl ListMembers {
    /// Creates a new builder-style object to manufacture [`ListMembersInput`](crate::input::ListMembersInput).
    pub fn builder() -> crate::input::list_members_input::Builder {
        crate::input::list_members_input::Builder::default()
    }
    /// Creates a new `ListMembers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListMembers {
    type Output =
        std::result::Result<crate::output::ListMembersOutput, crate::error::ListMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_members::de_list_members_http_error(response)
        } else {
            crate::protocol_serde::shape_list_members::de_list_members_http_response(response)
        }
    }
}

/// Operation shape for `ListNetworks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_networks`](crate::client::fluent_builders::ListNetworks).
///
/// `ParseStrictResponse` impl for `ListNetworks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNetworks {
    _private: (),
}
impl ListNetworks {
    /// Creates a new builder-style object to manufacture [`ListNetworksInput`](crate::input::ListNetworksInput).
    pub fn builder() -> crate::input::list_networks_input::Builder {
        crate::input::list_networks_input::Builder::default()
    }
    /// Creates a new `ListNetworks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNetworks {
    type Output =
        std::result::Result<crate::output::ListNetworksOutput, crate::error::ListNetworksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_networks::de_list_networks_http_error(response)
        } else {
            crate::protocol_serde::shape_list_networks::de_list_networks_http_response(response)
        }
    }
}

/// Operation shape for `ListNodes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_nodes`](crate::client::fluent_builders::ListNodes).
///
/// `ParseStrictResponse` impl for `ListNodes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListNodes {
    _private: (),
}
impl ListNodes {
    /// Creates a new builder-style object to manufacture [`ListNodesInput`](crate::input::ListNodesInput).
    pub fn builder() -> crate::input::list_nodes_input::Builder {
        crate::input::list_nodes_input::Builder::default()
    }
    /// Creates a new `ListNodes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListNodes {
    type Output = std::result::Result<crate::output::ListNodesOutput, crate::error::ListNodesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_nodes::de_list_nodes_http_error(response)
        } else {
            crate::protocol_serde::shape_list_nodes::de_list_nodes_http_response(response)
        }
    }
}

/// Operation shape for `ListProposals`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_proposals`](crate::client::fluent_builders::ListProposals).
///
/// `ParseStrictResponse` impl for `ListProposals`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProposals {
    _private: (),
}
impl ListProposals {
    /// Creates a new builder-style object to manufacture [`ListProposalsInput`](crate::input::ListProposalsInput).
    pub fn builder() -> crate::input::list_proposals_input::Builder {
        crate::input::list_proposals_input::Builder::default()
    }
    /// Creates a new `ListProposals` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProposals {
    type Output =
        std::result::Result<crate::output::ListProposalsOutput, crate::error::ListProposalsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_proposals::de_list_proposals_http_error(response)
        } else {
            crate::protocol_serde::shape_list_proposals::de_list_proposals_http_response(response)
        }
    }
}

/// Operation shape for `ListProposalVotes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_proposal_votes`](crate::client::fluent_builders::ListProposalVotes).
///
/// `ParseStrictResponse` impl for `ListProposalVotes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProposalVotes {
    _private: (),
}
impl ListProposalVotes {
    /// Creates a new builder-style object to manufacture [`ListProposalVotesInput`](crate::input::ListProposalVotesInput).
    pub fn builder() -> crate::input::list_proposal_votes_input::Builder {
        crate::input::list_proposal_votes_input::Builder::default()
    }
    /// Creates a new `ListProposalVotes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProposalVotes {
    type Output = std::result::Result<
        crate::output::ListProposalVotesOutput,
        crate::error::ListProposalVotesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_proposal_votes::de_list_proposal_votes_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_proposal_votes::de_list_proposal_votes_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `RejectInvitation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`reject_invitation`](crate::client::fluent_builders::RejectInvitation).
///
/// `ParseStrictResponse` impl for `RejectInvitation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RejectInvitation {
    _private: (),
}
impl RejectInvitation {
    /// Creates a new builder-style object to manufacture [`RejectInvitationInput`](crate::input::RejectInvitationInput).
    pub fn builder() -> crate::input::reject_invitation_input::Builder {
        crate::input::reject_invitation_input::Builder::default()
    }
    /// Creates a new `RejectInvitation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RejectInvitation {
    type Output = std::result::Result<
        crate::output::RejectInvitationOutput,
        crate::error::RejectInvitationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_reject_invitation::de_reject_invitation_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_reject_invitation::de_reject_invitation_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_member`](crate::client::fluent_builders::UpdateMember).
///
/// `ParseStrictResponse` impl for `UpdateMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateMember {
    _private: (),
}
impl UpdateMember {
    /// Creates a new builder-style object to manufacture [`UpdateMemberInput`](crate::input::UpdateMemberInput).
    pub fn builder() -> crate::input::update_member_input::Builder {
        crate::input::update_member_input::Builder::default()
    }
    /// Creates a new `UpdateMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateMember {
    type Output =
        std::result::Result<crate::output::UpdateMemberOutput, crate::error::UpdateMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_member::de_update_member_http_error(response)
        } else {
            crate::protocol_serde::shape_update_member::de_update_member_http_response(response)
        }
    }
}

/// Operation shape for `UpdateNode`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_node`](crate::client::fluent_builders::UpdateNode).
///
/// `ParseStrictResponse` impl for `UpdateNode`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateNode {
    _private: (),
}
impl UpdateNode {
    /// Creates a new builder-style object to manufacture [`UpdateNodeInput`](crate::input::UpdateNodeInput).
    pub fn builder() -> crate::input::update_node_input::Builder {
        crate::input::update_node_input::Builder::default()
    }
    /// Creates a new `UpdateNode` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNode {
    type Output =
        std::result::Result<crate::output::UpdateNodeOutput, crate::error::UpdateNodeError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_node::de_update_node_http_error(response)
        } else {
            crate::protocol_serde::shape_update_node::de_update_node_http_response(response)
        }
    }
}

/// Operation shape for `VoteOnProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`vote_on_proposal`](crate::client::fluent_builders::VoteOnProposal).
///
/// `ParseStrictResponse` impl for `VoteOnProposal`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct VoteOnProposal {
    _private: (),
}
impl VoteOnProposal {
    /// Creates a new builder-style object to manufacture [`VoteOnProposalInput`](crate::input::VoteOnProposalInput).
    pub fn builder() -> crate::input::vote_on_proposal_input::Builder {
        crate::input::vote_on_proposal_input::Builder::default()
    }
    /// Creates a new `VoteOnProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for VoteOnProposal {
    type Output =
        std::result::Result<crate::output::VoteOnProposalOutput, crate::error::VoteOnProposalError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_vote_on_proposal::de_vote_on_proposal_http_error(response)
        } else {
            crate::protocol_serde::shape_vote_on_proposal::de_vote_on_proposal_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
