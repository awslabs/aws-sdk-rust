// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_accessors_output_next_token(
    input: &crate::operation::list_accessors::ListAccessorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_invitations_output_next_token(
    input: &crate::operation::list_invitations::ListInvitationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_members_output_next_token(
    input: &crate::operation::list_members::ListMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_networks_output_next_token(
    input: &crate::operation::list_networks::ListNetworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_nodes_output_next_token(
    input: &crate::operation::list_nodes::ListNodesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_proposal_votes_output_next_token(
    input: &crate::operation::list_proposal_votes::ListProposalVotesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_proposals_output_next_token(
    input: &crate::operation::list_proposals::ListProposalsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_accessors_output_accessors(
    input: crate::operation::list_accessors::ListAccessorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AccessorSummary>> {
    let input = match input.accessors {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
