// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_endpoints_output_next_token(
    input: &crate::operation::describe_endpoints::DescribeEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_job_templates_output_next_token(
    input: &crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_jobs_output_next_token(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_presets_output_next_token(
    input: &crate::operation::list_presets::ListPresetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_queues_output_next_token(
    input: &crate::operation::list_queues::ListQueuesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_endpoints_output_endpoints(
    input: crate::operation::describe_endpoints::DescribeEndpointsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Endpoint>> {
    let input = match input.endpoints {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_templates_output_job_templates(
    input: crate::operation::list_job_templates::ListJobTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobTemplate>> {
    let input = match input.job_templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_jobs_output_jobs(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Job>> {
    let input = match input.jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_presets_output_presets(
    input: crate::operation::list_presets::ListPresetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Preset>> {
    let input = match input.presets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_queues_output_queues(
    input: crate::operation::list_queues::ListQueuesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Queue>> {
    let input = match input.queues {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
