// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Elemental MediaConvert
///
/// Client for invoking operations on AWS Elemental MediaConvert. Each operation on AWS Elemental MediaConvert is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_mediaconvert::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_mediaconvert::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_mediaconvert::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateCertificate`](crate::client::fluent_builders::AssociateCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::AssociateCertificate::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::AssociateCertificate::set_arn): The ARN of the ACM certificate that you want to associate with your MediaConvert resource.
    /// - On success, responds with [`AssociateCertificateOutput`](crate::output::AssociateCertificateOutput)

    /// - On failure, responds with [`SdkError<AssociateCertificateError>`](crate::error::AssociateCertificateError)
    pub fn associate_certificate(&self) -> crate::client::fluent_builders::AssociateCertificate {
        crate::client::fluent_builders::AssociateCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelJob`](crate::client::fluent_builders::CancelJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::CancelJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::CancelJob::set_id): The Job ID of the job to be cancelled.
    /// - On success, responds with [`CancelJobOutput`](crate::output::CancelJobOutput)

    /// - On failure, responds with [`SdkError<CancelJobError>`](crate::error::CancelJobError)
    pub fn cancel_job(&self) -> crate::client::fluent_builders::CancelJob {
        crate::client::fluent_builders::CancelJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateJob`](crate::client::fluent_builders::CreateJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acceleration_settings(AccelerationSettings)`](crate::client::fluent_builders::CreateJob::acceleration_settings) / [`set_acceleration_settings(Option<AccelerationSettings>)`](crate::client::fluent_builders::CreateJob::set_acceleration_settings): Optional. Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    ///   - [`billing_tags_source(BillingTagsSource)`](crate::client::fluent_builders::CreateJob::billing_tags_source) / [`set_billing_tags_source(Option<BillingTagsSource>)`](crate::client::fluent_builders::CreateJob::set_billing_tags_source): Optional. Choose a tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up. Any transcoding outputs that don't have an associated tag will appear in your billing report unsorted. If you don't choose a valid value for this field, your job outputs will appear on the billing report unsorted.
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::CreateJob::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::CreateJob::set_client_request_token): Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.
    ///   - [`hop_destinations(Vec<HopDestination>)`](crate::client::fluent_builders::CreateJob::hop_destinations) / [`set_hop_destinations(Option<Vec<HopDestination>>)`](crate::client::fluent_builders::CreateJob::set_hop_destinations): Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    ///   - [`job_template(impl Into<String>)`](crate::client::fluent_builders::CreateJob::job_template) / [`set_job_template(Option<String>)`](crate::client::fluent_builders::CreateJob::set_job_template): Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.
    ///   - [`priority(i32)`](crate::client::fluent_builders::CreateJob::priority) / [`set_priority(i32)`](crate::client::fluent_builders::CreateJob::set_priority): Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    ///   - [`queue(impl Into<String>)`](crate::client::fluent_builders::CreateJob::queue) / [`set_queue(Option<String>)`](crate::client::fluent_builders::CreateJob::set_queue): Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.
    ///   - [`role(impl Into<String>)`](crate::client::fluent_builders::CreateJob::role) / [`set_role(Option<String>)`](crate::client::fluent_builders::CreateJob::set_role): Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.
    ///   - [`settings(JobSettings)`](crate::client::fluent_builders::CreateJob::settings) / [`set_settings(Option<JobSettings>)`](crate::client::fluent_builders::CreateJob::set_settings): JobSettings contains all the transcode settings for a job.
    ///   - [`simulate_reserved_queue(SimulateReservedQueue)`](crate::client::fluent_builders::CreateJob::simulate_reserved_queue) / [`set_simulate_reserved_queue(Option<SimulateReservedQueue>)`](crate::client::fluent_builders::CreateJob::set_simulate_reserved_queue): Optional. Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.
    ///   - [`status_update_interval(StatusUpdateInterval)`](crate::client::fluent_builders::CreateJob::status_update_interval) / [`set_status_update_interval(Option<StatusUpdateInterval>)`](crate::client::fluent_builders::CreateJob::set_status_update_interval): Optional. Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateJob::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateJob::set_tags): Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key. Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.
    ///   - [`user_metadata(HashMap<String, String>)`](crate::client::fluent_builders::CreateJob::user_metadata) / [`set_user_metadata(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateJob::set_user_metadata): Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs. Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.
    /// - On success, responds with [`CreateJobOutput`](crate::output::CreateJobOutput) with field(s):
    ///   - [`job(Option<Job>)`](crate::output::CreateJobOutput::job): Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// - On failure, responds with [`SdkError<CreateJobError>`](crate::error::CreateJobError)
    pub fn create_job(&self) -> crate::client::fluent_builders::CreateJob {
        crate::client::fluent_builders::CreateJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateJobTemplate`](crate::client::fluent_builders::CreateJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acceleration_settings(AccelerationSettings)`](crate::client::fluent_builders::CreateJobTemplate::acceleration_settings) / [`set_acceleration_settings(Option<AccelerationSettings>)`](crate::client::fluent_builders::CreateJobTemplate::set_acceleration_settings): Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_category): Optional. A category for the job template you are creating
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_description): Optional. A description of the job template you are creating.
    ///   - [`hop_destinations(Vec<HopDestination>)`](crate::client::fluent_builders::CreateJobTemplate::hop_destinations) / [`set_hop_destinations(Option<Vec<HopDestination>>)`](crate::client::fluent_builders::CreateJobTemplate::set_hop_destinations): Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_name): The name of the job template you are creating.
    ///   - [`priority(i32)`](crate::client::fluent_builders::CreateJobTemplate::priority) / [`set_priority(i32)`](crate::client::fluent_builders::CreateJobTemplate::set_priority): Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    ///   - [`queue(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::queue) / [`set_queue(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_queue): Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    ///   - [`settings(JobTemplateSettings)`](crate::client::fluent_builders::CreateJobTemplate::settings) / [`set_settings(Option<JobTemplateSettings>)`](crate::client::fluent_builders::CreateJobTemplate::set_settings): JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    ///   - [`status_update_interval(StatusUpdateInterval)`](crate::client::fluent_builders::CreateJobTemplate::status_update_interval) / [`set_status_update_interval(Option<StatusUpdateInterval>)`](crate::client::fluent_builders::CreateJobTemplate::set_status_update_interval): Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateJobTemplate::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateJobTemplate::set_tags): The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    /// - On success, responds with [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput) with field(s):
    ///   - [`job_template(Option<JobTemplate>)`](crate::output::CreateJobTemplateOutput::job_template): A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    /// - On failure, responds with [`SdkError<CreateJobTemplateError>`](crate::error::CreateJobTemplateError)
    pub fn create_job_template(&self) -> crate::client::fluent_builders::CreateJobTemplate {
        crate::client::fluent_builders::CreateJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreatePreset`](crate::client::fluent_builders::CreatePreset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::CreatePreset::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::CreatePreset::set_category): Optional. A category for the preset you are creating.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreatePreset::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreatePreset::set_description): Optional. A description of the preset you are creating.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreatePreset::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreatePreset::set_name): The name of the preset you are creating.
    ///   - [`settings(PresetSettings)`](crate::client::fluent_builders::CreatePreset::settings) / [`set_settings(Option<PresetSettings>)`](crate::client::fluent_builders::CreatePreset::set_settings): Settings for preset
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreatePreset::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreatePreset::set_tags): The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    /// - On success, responds with [`CreatePresetOutput`](crate::output::CreatePresetOutput) with field(s):
    ///   - [`preset(Option<Preset>)`](crate::output::CreatePresetOutput::preset): A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    /// - On failure, responds with [`SdkError<CreatePresetError>`](crate::error::CreatePresetError)
    pub fn create_preset(&self) -> crate::client::fluent_builders::CreatePreset {
        crate::client::fluent_builders::CreatePreset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateQueue`](crate::client::fluent_builders::CreateQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateQueue::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateQueue::set_description): Optional. A description of the queue that you are creating.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateQueue::set_name): The name of the queue that you are creating.
    ///   - [`pricing_plan(PricingPlan)`](crate::client::fluent_builders::CreateQueue::pricing_plan) / [`set_pricing_plan(Option<PricingPlan>)`](crate::client::fluent_builders::CreateQueue::set_pricing_plan): Specifies whether the pricing plan for the queue is on-demand or reserved. For on-demand, you pay per minute, billed in increments of .01 minute. For reserved, you pay for the transcoding capacity of the entire queue, regardless of how much or how little you use it. Reserved pricing requires a 12-month commitment. When you use the API to create a queue, the default is on-demand.
    ///   - [`reservation_plan_settings(ReservationPlanSettings)`](crate::client::fluent_builders::CreateQueue::reservation_plan_settings) / [`set_reservation_plan_settings(Option<ReservationPlanSettings>)`](crate::client::fluent_builders::CreateQueue::set_reservation_plan_settings): Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
    ///   - [`status(QueueStatus)`](crate::client::fluent_builders::CreateQueue::status) / [`set_status(Option<QueueStatus>)`](crate::client::fluent_builders::CreateQueue::set_status): Initial state of the queue. If you create a paused queue, then jobs in that queue won't begin.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateQueue::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateQueue::set_tags): The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    /// - On success, responds with [`CreateQueueOutput`](crate::output::CreateQueueOutput) with field(s):
    ///   - [`queue(Option<Queue>)`](crate::output::CreateQueueOutput::queue): You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    /// - On failure, responds with [`SdkError<CreateQueueError>`](crate::error::CreateQueueError)
    pub fn create_queue(&self) -> crate::client::fluent_builders::CreateQueue {
        crate::client::fluent_builders::CreateQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteJobTemplate`](crate::client::fluent_builders::DeleteJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteJobTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteJobTemplate::set_name): The name of the job template to be deleted.
    /// - On success, responds with [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput)

    /// - On failure, responds with [`SdkError<DeleteJobTemplateError>`](crate::error::DeleteJobTemplateError)
    pub fn delete_job_template(&self) -> crate::client::fluent_builders::DeleteJobTemplate {
        crate::client::fluent_builders::DeleteJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePolicy`](crate::client::fluent_builders::DeletePolicy) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DeletePolicy::send) it.

    /// - On success, responds with [`DeletePolicyOutput`](crate::output::DeletePolicyOutput)

    /// - On failure, responds with [`SdkError<DeletePolicyError>`](crate::error::DeletePolicyError)
    pub fn delete_policy(&self) -> crate::client::fluent_builders::DeletePolicy {
        crate::client::fluent_builders::DeletePolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePreset`](crate::client::fluent_builders::DeletePreset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeletePreset::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeletePreset::set_name): The name of the preset to be deleted.
    /// - On success, responds with [`DeletePresetOutput`](crate::output::DeletePresetOutput)

    /// - On failure, responds with [`SdkError<DeletePresetError>`](crate::error::DeletePresetError)
    pub fn delete_preset(&self) -> crate::client::fluent_builders::DeletePreset {
        crate::client::fluent_builders::DeletePreset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteQueue`](crate::client::fluent_builders::DeleteQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteQueue::set_name): The name of the queue that you want to delete.
    /// - On success, responds with [`DeleteQueueOutput`](crate::output::DeleteQueueOutput)

    /// - On failure, responds with [`SdkError<DeleteQueueError>`](crate::error::DeleteQueueError)
    pub fn delete_queue(&self) -> crate::client::fluent_builders::DeleteQueue {
        crate::client::fluent_builders::DeleteQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEndpoints`](crate::client::fluent_builders::DescribeEndpoints) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeEndpoints::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeEndpoints::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeEndpoints::set_max_results): Optional. Max number of endpoints, up to twenty, that will be returned at one time.
    ///   - [`mode(DescribeEndpointsMode)`](crate::client::fluent_builders::DescribeEndpoints::mode) / [`set_mode(Option<DescribeEndpointsMode>)`](crate::client::fluent_builders::DescribeEndpoints::set_mode): Optional field, defaults to DEFAULT. Specify DEFAULT for this operation to return your endpoints if any exist, or to create an endpoint for you and return it if one doesn't already exist. Specify GET_ONLY to return your endpoints if any exist, or an empty list if none exist.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeEndpoints::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeEndpoints::set_next_token): Use this string, provided with the response to a previous request, to request the next batch of endpoints.
    /// - On success, responds with [`DescribeEndpointsOutput`](crate::output::DescribeEndpointsOutput) with field(s):
    ///   - [`endpoints(Option<Vec<Endpoint>>)`](crate::output::DescribeEndpointsOutput::endpoints): List of endpoints
    ///   - [`next_token(Option<String>)`](crate::output::DescribeEndpointsOutput::next_token): Use this string to request the next batch of endpoints.
    /// - On failure, responds with [`SdkError<DescribeEndpointsError>`](crate::error::DescribeEndpointsError)
    pub fn describe_endpoints(&self) -> crate::client::fluent_builders::DescribeEndpoints {
        crate::client::fluent_builders::DescribeEndpoints::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateCertificate`](crate::client::fluent_builders::DisassociateCertificate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DisassociateCertificate::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DisassociateCertificate::set_arn): The ARN of the ACM certificate that you want to disassociate from your MediaConvert resource.
    /// - On success, responds with [`DisassociateCertificateOutput`](crate::output::DisassociateCertificateOutput)

    /// - On failure, responds with [`SdkError<DisassociateCertificateError>`](crate::error::DisassociateCertificateError)
    pub fn disassociate_certificate(
        &self,
    ) -> crate::client::fluent_builders::DisassociateCertificate {
        crate::client::fluent_builders::DisassociateCertificate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetJob`](crate::client::fluent_builders::GetJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::GetJob::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::GetJob::set_id): the job ID of the job.
    /// - On success, responds with [`GetJobOutput`](crate::output::GetJobOutput) with field(s):
    ///   - [`job(Option<Job>)`](crate::output::GetJobOutput::job): Each job converts an input file into an output file or files. For more information, see the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// - On failure, responds with [`SdkError<GetJobError>`](crate::error::GetJobError)
    pub fn get_job(&self) -> crate::client::fluent_builders::GetJob {
        crate::client::fluent_builders::GetJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetJobTemplate`](crate::client::fluent_builders::GetJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetJobTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetJobTemplate::set_name): The name of the job template.
    /// - On success, responds with [`GetJobTemplateOutput`](crate::output::GetJobTemplateOutput) with field(s):
    ///   - [`job_template(Option<JobTemplate>)`](crate::output::GetJobTemplateOutput::job_template): A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    /// - On failure, responds with [`SdkError<GetJobTemplateError>`](crate::error::GetJobTemplateError)
    pub fn get_job_template(&self) -> crate::client::fluent_builders::GetJobTemplate {
        crate::client::fluent_builders::GetJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPolicy`](crate::client::fluent_builders::GetPolicy) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::GetPolicy::send) it.

    /// - On success, responds with [`GetPolicyOutput`](crate::output::GetPolicyOutput) with field(s):
    ///   - [`policy(Option<Policy>)`](crate::output::GetPolicyOutput::policy): A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// - On failure, responds with [`SdkError<GetPolicyError>`](crate::error::GetPolicyError)
    pub fn get_policy(&self) -> crate::client::fluent_builders::GetPolicy {
        crate::client::fluent_builders::GetPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPreset`](crate::client::fluent_builders::GetPreset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetPreset::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetPreset::set_name): The name of the preset.
    /// - On success, responds with [`GetPresetOutput`](crate::output::GetPresetOutput) with field(s):
    ///   - [`preset(Option<Preset>)`](crate::output::GetPresetOutput::preset): A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    /// - On failure, responds with [`SdkError<GetPresetError>`](crate::error::GetPresetError)
    pub fn get_preset(&self) -> crate::client::fluent_builders::GetPreset {
        crate::client::fluent_builders::GetPreset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetQueue`](crate::client::fluent_builders::GetQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetQueue::set_name): The name of the queue that you want information about.
    /// - On success, responds with [`GetQueueOutput`](crate::output::GetQueueOutput) with field(s):
    ///   - [`queue(Option<Queue>)`](crate::output::GetQueueOutput::queue): You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    /// - On failure, responds with [`SdkError<GetQueueError>`](crate::error::GetQueueError)
    pub fn get_queue(&self) -> crate::client::fluent_builders::GetQueue {
        crate::client::fluent_builders::GetQueue::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListJobs`](crate::client::fluent_builders::ListJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListJobs::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListJobs::set_max_results): Optional. Number of jobs, up to twenty, that will be returned at one time.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListJobs::set_next_token): Optional. Use this string, provided with the response to a previous request, to request the next batch of jobs.
    ///   - [`order(Order)`](crate::client::fluent_builders::ListJobs::order) / [`set_order(Option<Order>)`](crate::client::fluent_builders::ListJobs::set_order): Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    ///   - [`queue(impl Into<String>)`](crate::client::fluent_builders::ListJobs::queue) / [`set_queue(Option<String>)`](crate::client::fluent_builders::ListJobs::set_queue): Optional. Provide a queue name to get back only jobs from that queue.
    ///   - [`status(JobStatus)`](crate::client::fluent_builders::ListJobs::status) / [`set_status(Option<JobStatus>)`](crate::client::fluent_builders::ListJobs::set_status): Optional. A job's status can be SUBMITTED, PROGRESSING, COMPLETE, CANCELED, or ERROR.
    /// - On success, responds with [`ListJobsOutput`](crate::output::ListJobsOutput) with field(s):
    ///   - [`jobs(Option<Vec<Job>>)`](crate::output::ListJobsOutput::jobs): List of jobs
    ///   - [`next_token(Option<String>)`](crate::output::ListJobsOutput::next_token): Use this string to request the next batch of jobs.
    /// - On failure, responds with [`SdkError<ListJobsError>`](crate::error::ListJobsError)
    pub fn list_jobs(&self) -> crate::client::fluent_builders::ListJobs {
        crate::client::fluent_builders::ListJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListJobTemplates`](crate::client::fluent_builders::ListJobTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListJobTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::ListJobTemplates::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::ListJobTemplates::set_category): Optionally, specify a job template category to limit responses to only job templates from that category.
    ///   - [`list_by(JobTemplateListBy)`](crate::client::fluent_builders::ListJobTemplates::list_by) / [`set_list_by(Option<JobTemplateListBy>)`](crate::client::fluent_builders::ListJobTemplates::set_list_by): Optional. When you request a list of job templates, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListJobTemplates::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListJobTemplates::set_max_results): Optional. Number of job templates, up to twenty, that will be returned at one time.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListJobTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListJobTemplates::set_next_token): Use this string, provided with the response to a previous request, to request the next batch of job templates.
    ///   - [`order(Order)`](crate::client::fluent_builders::ListJobTemplates::order) / [`set_order(Option<Order>)`](crate::client::fluent_builders::ListJobTemplates::set_order): Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    /// - On success, responds with [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput) with field(s):
    ///   - [`job_templates(Option<Vec<JobTemplate>>)`](crate::output::ListJobTemplatesOutput::job_templates): List of Job templates.
    ///   - [`next_token(Option<String>)`](crate::output::ListJobTemplatesOutput::next_token): Use this string to request the next batch of job templates.
    /// - On failure, responds with [`SdkError<ListJobTemplatesError>`](crate::error::ListJobTemplatesError)
    pub fn list_job_templates(&self) -> crate::client::fluent_builders::ListJobTemplates {
        crate::client::fluent_builders::ListJobTemplates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPresets`](crate::client::fluent_builders::ListPresets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPresets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::ListPresets::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::ListPresets::set_category): Optionally, specify a preset category to limit responses to only presets from that category.
    ///   - [`list_by(PresetListBy)`](crate::client::fluent_builders::ListPresets::list_by) / [`set_list_by(Option<PresetListBy>)`](crate::client::fluent_builders::ListPresets::set_list_by): Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPresets::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListPresets::set_max_results): Optional. Number of presets, up to twenty, that will be returned at one time
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPresets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPresets::set_next_token): Use this string, provided with the response to a previous request, to request the next batch of presets.
    ///   - [`order(Order)`](crate::client::fluent_builders::ListPresets::order) / [`set_order(Option<Order>)`](crate::client::fluent_builders::ListPresets::set_order): Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    /// - On success, responds with [`ListPresetsOutput`](crate::output::ListPresetsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListPresetsOutput::next_token): Use this string to request the next batch of presets.
    ///   - [`presets(Option<Vec<Preset>>)`](crate::output::ListPresetsOutput::presets): List of presets
    /// - On failure, responds with [`SdkError<ListPresetsError>`](crate::error::ListPresetsError)
    pub fn list_presets(&self) -> crate::client::fluent_builders::ListPresets {
        crate::client::fluent_builders::ListPresets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListQueues`](crate::client::fluent_builders::ListQueues) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListQueues::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`list_by(QueueListBy)`](crate::client::fluent_builders::ListQueues::list_by) / [`set_list_by(Option<QueueListBy>)`](crate::client::fluent_builders::ListQueues::set_list_by): Optional. When you request a list of queues, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by creation date.
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListQueues::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListQueues::set_max_results): Optional. Number of queues, up to twenty, that will be returned at one time.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListQueues::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListQueues::set_next_token): Use this string, provided with the response to a previous request, to request the next batch of queues.
    ///   - [`order(Order)`](crate::client::fluent_builders::ListQueues::order) / [`set_order(Option<Order>)`](crate::client::fluent_builders::ListQueues::set_order): Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    /// - On success, responds with [`ListQueuesOutput`](crate::output::ListQueuesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListQueuesOutput::next_token): Use this string to request the next batch of queues.
    ///   - [`queues(Option<Vec<Queue>>)`](crate::output::ListQueuesOutput::queues): List of queues.
    /// - On failure, responds with [`SdkError<ListQueuesError>`](crate::error::ListQueuesError)
    pub fn list_queues(&self) -> crate::client::fluent_builders::ListQueues {
        crate::client::fluent_builders::ListQueues::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_arn): The Amazon Resource Name (ARN) of the resource that you want to list tags for. To get the ARN, send a GET request with the resource name.
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`resource_tags(Option<ResourceTags>)`](crate::output::ListTagsForResourceOutput::resource_tags): The Amazon Resource Name (ARN) and tags for an AWS Elemental MediaConvert resource.
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutPolicy`](crate::client::fluent_builders::PutPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`policy(Policy)`](crate::client::fluent_builders::PutPolicy::policy) / [`set_policy(Option<Policy>)`](crate::client::fluent_builders::PutPolicy::set_policy): A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// - On success, responds with [`PutPolicyOutput`](crate::output::PutPolicyOutput) with field(s):
    ///   - [`policy(Option<Policy>)`](crate::output::PutPolicyOutput::policy): A policy configures behavior that you allow or disallow for your account. For information about MediaConvert policies, see the user guide at http://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html
    /// - On failure, responds with [`SdkError<PutPolicyError>`](crate::error::PutPolicyError)
    pub fn put_policy(&self) -> crate::client::fluent_builders::PutPolicy {
        crate::client::fluent_builders::PutPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_arn): The Amazon Resource Name (ARN) of the resource that you want to tag. To get the ARN, send a GET request with the resource name.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_arn): The Amazon Resource Name (ARN) of the resource that you want to remove tags from. To get the ARN, send a GET request with the resource name.
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): The keys of the tags that you want to remove from the resource.
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateJobTemplate`](crate::client::fluent_builders::UpdateJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acceleration_settings(AccelerationSettings)`](crate::client::fluent_builders::UpdateJobTemplate::acceleration_settings) / [`set_acceleration_settings(Option<AccelerationSettings>)`](crate::client::fluent_builders::UpdateJobTemplate::set_acceleration_settings): Accelerated transcoding can significantly speed up jobs with long, visually complex content. Outputs that use this feature incur pro-tier pricing. For information about feature limitations, see the AWS Elemental MediaConvert User Guide.
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::UpdateJobTemplate::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::UpdateJobTemplate::set_category): The new category for the job template, if you are changing it.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateJobTemplate::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateJobTemplate::set_description): The new description for the job template, if you are changing it.
    ///   - [`hop_destinations(Vec<HopDestination>)`](crate::client::fluent_builders::UpdateJobTemplate::hop_destinations) / [`set_hop_destinations(Option<Vec<HopDestination>>)`](crate::client::fluent_builders::UpdateJobTemplate::set_hop_destinations): Optional list of hop destinations.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateJobTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateJobTemplate::set_name): The name of the job template you are modifying
    ///   - [`priority(i32)`](crate::client::fluent_builders::UpdateJobTemplate::priority) / [`set_priority(i32)`](crate::client::fluent_builders::UpdateJobTemplate::set_priority): Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.
    ///   - [`queue(impl Into<String>)`](crate::client::fluent_builders::UpdateJobTemplate::queue) / [`set_queue(Option<String>)`](crate::client::fluent_builders::UpdateJobTemplate::set_queue): The new queue for the job template, if you are changing it.
    ///   - [`settings(JobTemplateSettings)`](crate::client::fluent_builders::UpdateJobTemplate::settings) / [`set_settings(Option<JobTemplateSettings>)`](crate::client::fluent_builders::UpdateJobTemplate::set_settings): JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    ///   - [`status_update_interval(StatusUpdateInterval)`](crate::client::fluent_builders::UpdateJobTemplate::status_update_interval) / [`set_status_update_interval(Option<StatusUpdateInterval>)`](crate::client::fluent_builders::UpdateJobTemplate::set_status_update_interval): Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    /// - On success, responds with [`UpdateJobTemplateOutput`](crate::output::UpdateJobTemplateOutput) with field(s):
    ///   - [`job_template(Option<JobTemplate>)`](crate::output::UpdateJobTemplateOutput::job_template): A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
    /// - On failure, responds with [`SdkError<UpdateJobTemplateError>`](crate::error::UpdateJobTemplateError)
    pub fn update_job_template(&self) -> crate::client::fluent_builders::UpdateJobTemplate {
        crate::client::fluent_builders::UpdateJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePreset`](crate::client::fluent_builders::UpdatePreset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`category(impl Into<String>)`](crate::client::fluent_builders::UpdatePreset::category) / [`set_category(Option<String>)`](crate::client::fluent_builders::UpdatePreset::set_category): The new category for the preset, if you are changing it.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdatePreset::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdatePreset::set_description): The new description for the preset, if you are changing it.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdatePreset::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdatePreset::set_name): The name of the preset you are modifying.
    ///   - [`settings(PresetSettings)`](crate::client::fluent_builders::UpdatePreset::settings) / [`set_settings(Option<PresetSettings>)`](crate::client::fluent_builders::UpdatePreset::set_settings): Settings for preset
    /// - On success, responds with [`UpdatePresetOutput`](crate::output::UpdatePresetOutput) with field(s):
    ///   - [`preset(Option<Preset>)`](crate::output::UpdatePresetOutput::preset): A preset is a collection of preconfigured media conversion settings that you want MediaConvert to apply to the output during the conversion process.
    /// - On failure, responds with [`SdkError<UpdatePresetError>`](crate::error::UpdatePresetError)
    pub fn update_preset(&self) -> crate::client::fluent_builders::UpdatePreset {
        crate::client::fluent_builders::UpdatePreset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateQueue`](crate::client::fluent_builders::UpdateQueue) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateQueue::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateQueue::set_description): The new description for the queue, if you are changing it.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateQueue::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateQueue::set_name): The name of the queue that you are modifying.
    ///   - [`reservation_plan_settings(ReservationPlanSettings)`](crate::client::fluent_builders::UpdateQueue::reservation_plan_settings) / [`set_reservation_plan_settings(Option<ReservationPlanSettings>)`](crate::client::fluent_builders::UpdateQueue::set_reservation_plan_settings): The new details of your pricing plan for your reserved queue. When you set up a new pricing plan to replace an expired one, you enter into another 12-month commitment. When you add capacity to your queue by increasing the number of RTS, you extend the term of your commitment to 12 months from when you add capacity. After you make these commitments, you can't cancel them.
    ///   - [`status(QueueStatus)`](crate::client::fluent_builders::UpdateQueue::status) / [`set_status(Option<QueueStatus>)`](crate::client::fluent_builders::UpdateQueue::set_status): Pause or activate a queue by changing its status between ACTIVE and PAUSED. If you pause a queue, jobs in that queue won't begin. Jobs that are running when you pause the queue continue to run until they finish or result in an error.
    /// - On success, responds with [`UpdateQueueOutput`](crate::output::UpdateQueueOutput) with field(s):
    ///   - [`queue(Option<Queue>)`](crate::output::UpdateQueueOutput::queue): You can use queues to manage the resources that are available to your AWS account for running multiple transcoding jobs at the same time. If you don't specify a queue, the service sends all jobs through the default queue. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/working-with-queues.html.
    /// - On failure, responds with [`SdkError<UpdateQueueError>`](crate::error::UpdateQueueError)
    pub fn update_queue(&self) -> crate::client::fluent_builders::UpdateQueue {
        crate::client::fluent_builders::UpdateQueue::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
