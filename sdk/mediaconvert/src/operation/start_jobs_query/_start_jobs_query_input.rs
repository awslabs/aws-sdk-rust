// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartJobsQueryInput {
    /// Optional. Provide an array of JobsQueryFilters for your StartJobsQuery request.
    pub filter_list: ::std::option::Option<::std::vec::Vec<crate::types::JobsQueryFilter>>,
    /// Optional. Number of jobs, up to twenty, that will be included in the jobs query.
    pub max_results: ::std::option::Option<i32>,
    /// Use this string to request the next batch of jobs matched by a jobs query.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub order: ::std::option::Option<crate::types::Order>,
}
impl StartJobsQueryInput {
    /// Optional. Provide an array of JobsQueryFilters for your StartJobsQuery request.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_list.is_none()`.
    pub fn filter_list(&self) -> &[crate::types::JobsQueryFilter] {
        self.filter_list.as_deref().unwrap_or_default()
    }
    /// Optional. Number of jobs, up to twenty, that will be included in the jobs query.
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// Use this string to request the next batch of jobs matched by a jobs query.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn order(&self) -> ::std::option::Option<&crate::types::Order> {
        self.order.as_ref()
    }
}
impl StartJobsQueryInput {
    /// Creates a new builder-style object to manufacture [`StartJobsQueryInput`](crate::operation::start_jobs_query::StartJobsQueryInput).
    pub fn builder() -> crate::operation::start_jobs_query::builders::StartJobsQueryInputBuilder {
        crate::operation::start_jobs_query::builders::StartJobsQueryInputBuilder::default()
    }
}

/// A builder for [`StartJobsQueryInput`](crate::operation::start_jobs_query::StartJobsQueryInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct StartJobsQueryInputBuilder {
    pub(crate) filter_list: ::std::option::Option<::std::vec::Vec<crate::types::JobsQueryFilter>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) order: ::std::option::Option<crate::types::Order>,
}
impl StartJobsQueryInputBuilder {
    /// Appends an item to `filter_list`.
    ///
    /// To override the contents of this collection use [`set_filter_list`](Self::set_filter_list).
    ///
    /// Optional. Provide an array of JobsQueryFilters for your StartJobsQuery request.
    pub fn filter_list(mut self, input: crate::types::JobsQueryFilter) -> Self {
        let mut v = self.filter_list.unwrap_or_default();
        v.push(input);
        self.filter_list = ::std::option::Option::Some(v);
        self
    }
    /// Optional. Provide an array of JobsQueryFilters for your StartJobsQuery request.
    pub fn set_filter_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JobsQueryFilter>>) -> Self {
        self.filter_list = input;
        self
    }
    /// Optional. Provide an array of JobsQueryFilters for your StartJobsQuery request.
    pub fn get_filter_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JobsQueryFilter>> {
        &self.filter_list
    }
    /// Optional. Number of jobs, up to twenty, that will be included in the jobs query.
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Optional. Number of jobs, up to twenty, that will be included in the jobs query.
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Optional. Number of jobs, up to twenty, that will be included in the jobs query.
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Use this string to request the next batch of jobs matched by a jobs query.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Use this string to request the next batch of jobs matched by a jobs query.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Use this string to request the next batch of jobs matched by a jobs query.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn order(mut self, input: crate::types::Order) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::Order>) -> Self {
        self.order = input;
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn get_order(&self) -> &::std::option::Option<crate::types::Order> {
        &self.order
    }
    /// Consumes the builder and constructs a [`StartJobsQueryInput`](crate::operation::start_jobs_query::StartJobsQueryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_jobs_query::StartJobsQueryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_jobs_query::StartJobsQueryInput {
            filter_list: self.filter_list,
            max_results: self.max_results,
            next_token: self.next_token,
            order: self.order,
        })
    }
}
