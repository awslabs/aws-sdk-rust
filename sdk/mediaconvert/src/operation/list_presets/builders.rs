// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_presets::_list_presets_output::ListPresetsOutputBuilder;

pub use crate::operation::list_presets::_list_presets_input::ListPresetsInputBuilder;

/// Fluent builder constructing a request to `ListPresets`.
///
/// Retrieve a JSON array of up to twenty of your presets. This will return the presets themselves, not just a list of them. To retrieve the next twenty presets, use the nextToken string returned with the array.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPresetsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_presets::builders::ListPresetsInputBuilder,
}
impl ListPresetsFluentBuilder {
    /// Creates a new `ListPresets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_presets::ListPresets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_presets::ListPresetsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_presets::ListPresetsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_presets::ListPresetsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_presets::paginator::ListPresetsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_presets::paginator::ListPresetsPaginator {
        crate::operation::list_presets::paginator::ListPresetsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn category(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.category(input.into());
        self
    }
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn set_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_category(input);
        self
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn list_by(mut self, input: crate::types::PresetListBy) -> Self {
        self.inner = self.inner.list_by(input);
        self
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn set_list_by(mut self, input: std::option::Option<crate::types::PresetListBy>) -> Self {
        self.inner = self.inner.set_list_by(input);
        self
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn order(mut self, input: crate::types::Order) -> Self {
        self.inner = self.inner.order(input);
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn set_order(mut self, input: std::option::Option<crate::types::Order>) -> Self {
        self.inner = self.inner.set_order(input);
        self
    }
}
