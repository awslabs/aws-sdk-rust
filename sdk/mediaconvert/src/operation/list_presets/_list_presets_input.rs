// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPresetsInput {
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub category: ::std::option::Option<::std::string::String>,
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub list_by: ::std::option::Option<crate::types::PresetListBy>,
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub max_results: ::std::option::Option<i32>,
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub next_token: ::std::option::Option<::std::string::String>,
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub order: ::std::option::Option<crate::types::Order>,
}
impl ListPresetsInput {
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn category(&self) -> ::std::option::Option<&str> {
        self.category.as_deref()
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn list_by(&self) -> ::std::option::Option<&crate::types::PresetListBy> {
        self.list_by.as_ref()
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn order(&self) -> ::std::option::Option<&crate::types::Order> {
        self.order.as_ref()
    }
}
impl ListPresetsInput {
    /// Creates a new builder-style object to manufacture [`ListPresetsInput`](crate::operation::list_presets::ListPresetsInput).
    pub fn builder() -> crate::operation::list_presets::builders::ListPresetsInputBuilder {
        crate::operation::list_presets::builders::ListPresetsInputBuilder::default()
    }
}

/// A builder for [`ListPresetsInput`](crate::operation::list_presets::ListPresetsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPresetsInputBuilder {
    pub(crate) category: ::std::option::Option<::std::string::String>,
    pub(crate) list_by: ::std::option::Option<crate::types::PresetListBy>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) order: ::std::option::Option<crate::types::Order>,
}
impl ListPresetsInputBuilder {
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn category(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.category = ::std::option::Option::Some(input.into());
        self
    }
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn set_category(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// Optionally, specify a preset category to limit responses to only presets from that category.
    pub fn get_category(&self) -> &::std::option::Option<::std::string::String> {
        &self.category
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn list_by(mut self, input: crate::types::PresetListBy) -> Self {
        self.list_by = ::std::option::Option::Some(input);
        self
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn set_list_by(mut self, input: ::std::option::Option<crate::types::PresetListBy>) -> Self {
        self.list_by = input;
        self
    }
    /// Optional. When you request a list of presets, you can choose to list them alphabetically by NAME or chronologically by CREATION_DATE. If you don't specify, the service will list them by name.
    pub fn get_list_by(&self) -> &::std::option::Option<crate::types::PresetListBy> {
        &self.list_by
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Optional. Number of presets, up to twenty, that will be returned at one time
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Use this string, provided with the response to a previous request, to request the next batch of presets.
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn order(mut self, input: crate::types::Order) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn set_order(mut self, input: ::std::option::Option<crate::types::Order>) -> Self {
        self.order = input;
        self
    }
    /// Optional. When you request lists of resources, you can specify whether they are sorted in ASCENDING or DESCENDING order. Default varies by resource.
    pub fn get_order(&self) -> &::std::option::Option<crate::types::Order> {
        &self.order
    }
    /// Consumes the builder and constructs a [`ListPresetsInput`](crate::operation::list_presets::ListPresetsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_presets::ListPresetsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_presets::ListPresetsInput {
            category: self.category,
            list_by: self.list_by,
            max_results: self.max_results,
            next_token: self.next_token,
            order: self.order,
        })
    }
}
