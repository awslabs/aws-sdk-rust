// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_mpeg2_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Mpeg2Settings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_1.as_str());
    }
    if let Some(var_2) = &input.bitrate {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.codec_level {
        object.key("codecLevel").string(var_3.as_str());
    }
    if let Some(var_4) = &input.codec_profile {
        object.key("codecProfile").string(var_4.as_str());
    }
    if let Some(var_5) = &input.dynamic_sub_gop {
        object.key("dynamicSubGop").string(var_5.as_str());
    }
    if let Some(var_6) = &input.framerate_control {
        object.key("framerateControl").string(var_6.as_str());
    }
    if let Some(var_7) = &input.framerate_conversion_algorithm {
        object.key("framerateConversionAlgorithm").string(var_7.as_str());
    }
    if let Some(var_8) = &input.framerate_denominator {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.framerate_numerator {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.gop_closed_cadence {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.gop_size {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_12.as_str());
    }
    if let Some(var_13) = &input.hrd_buffer_final_fill_percentage {
        object.key("hrdBufferFinalFillPercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.hrd_buffer_initial_fill_percentage {
        object.key("hrdBufferInitialFillPercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.hrd_buffer_size {
        object.key("hrdBufferSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    if let Some(var_16) = &input.interlace_mode {
        object.key("interlaceMode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.intra_dc_precision {
        object.key("intraDcPrecision").string(var_17.as_str());
    }
    if let Some(var_18) = &input.max_bitrate {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.min_i_interval {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.number_b_frames_between_reference_frames {
        object.key("numberBFramesBetweenReferenceFrames").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.par_control {
        object.key("parControl").string(var_21.as_str());
    }
    if let Some(var_22) = &input.par_denominator {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.par_numerator {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    if let Some(var_24) = &input.quality_tuning_level {
        object.key("qualityTuningLevel").string(var_24.as_str());
    }
    if let Some(var_25) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_25.as_str());
    }
    if let Some(var_26) = &input.scan_type_conversion_mode {
        object.key("scanTypeConversionMode").string(var_26.as_str());
    }
    if let Some(var_27) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_27.as_str());
    }
    if let Some(var_28) = &input.slow_pal {
        object.key("slowPal").string(var_28.as_str());
    }
    if let Some(var_29) = &input.softness {
        object.key("softness").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.spatial_adaptive_quantization {
        object.key("spatialAdaptiveQuantization").string(var_30.as_str());
    }
    if let Some(var_31) = &input.syntax {
        object.key("syntax").string(var_31.as_str());
    }
    if let Some(var_32) = &input.telecine {
        object.key("telecine").string(var_32.as_str());
    }
    if let Some(var_33) = &input.temporal_adaptive_quantization {
        object.key("temporalAdaptiveQuantization").string(var_33.as_str());
    }
    Ok(())
}

pub(crate) fn de_mpeg2_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Mpeg2Settings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Mpeg2SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "adaptiveQuantization" => {
                            builder = builder.set_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2AdaptiveQuantization::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "bitrate" => {
                            builder = builder.set_bitrate(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "codecLevel" => {
                            builder = builder.set_codec_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2CodecLevel::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "codecProfile" => {
                            builder = builder.set_codec_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2CodecProfile::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dynamicSubGop" => {
                            builder = builder.set_dynamic_sub_gop(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2DynamicSubGop::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateControl" => {
                            builder = builder.set_framerate_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2FramerateControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateConversionAlgorithm" => {
                            builder = builder.set_framerate_conversion_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Mpeg2FramerateConversionAlgorithm::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "framerateDenominator" => {
                            builder = builder.set_framerate_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "framerateNumerator" => {
                            builder = builder.set_framerate_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "gopClosedCadence" => {
                            builder = builder.set_gop_closed_cadence(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "gopSize" => {
                            builder = builder
                                .set_gop_size(::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()));
                        }
                        "gopSizeUnits" => {
                            builder = builder.set_gop_size_units(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2GopSizeUnits::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hrdBufferFinalFillPercentage" => {
                            builder = builder.set_hrd_buffer_final_fill_percentage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hrdBufferInitialFillPercentage" => {
                            builder = builder.set_hrd_buffer_initial_fill_percentage(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hrdBufferSize" => {
                            builder = builder.set_hrd_buffer_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "interlaceMode" => {
                            builder = builder.set_interlace_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2InterlaceMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "intraDcPrecision" => {
                            builder = builder.set_intra_dc_precision(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2IntraDcPrecision::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "maxBitrate" => {
                            builder = builder.set_max_bitrate(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "minIInterval" => {
                            builder = builder.set_min_i_interval(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "numberBFramesBetweenReferenceFrames" => {
                            builder = builder.set_number_b_frames_between_reference_frames(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "parControl" => {
                            builder = builder.set_par_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2ParControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "parDenominator" => {
                            builder = builder.set_par_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "parNumerator" => {
                            builder = builder.set_par_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "qualityTuningLevel" => {
                            builder = builder.set_quality_tuning_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2QualityTuningLevel::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "rateControlMode" => {
                            builder = builder.set_rate_control_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2RateControlMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "scanTypeConversionMode" => {
                            builder = builder.set_scan_type_conversion_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2ScanTypeConversionMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "sceneChangeDetect" => {
                            builder = builder.set_scene_change_detect(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2SceneChangeDetect::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "slowPal" => {
                            builder = builder.set_slow_pal(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2SlowPal::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "softness" => {
                            builder = builder.set_softness(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "spatialAdaptiveQuantization" => {
                            builder = builder.set_spatial_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2SpatialAdaptiveQuantization::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "syntax" => {
                            builder = builder.set_syntax(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2Syntax::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "telecine" => {
                            builder = builder.set_telecine(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mpeg2Telecine::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "temporalAdaptiveQuantization" => {
                            builder = builder.set_temporal_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Mpeg2TemporalAdaptiveQuantization::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
