// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_dash_iso_group_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::DashIsoGroupSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_manifests {
        let mut array_2 = object.key("additionalManifests").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_dash_additional_manifest::ser_dash_additional_manifest(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.audio_channel_config_scheme_id_uri {
        object.key("audioChannelConfigSchemeIdUri").string(var_5.as_str());
    }
    if let Some(var_6) = &input.base_url {
        object.key("baseUrl").string(var_6.as_str());
    }
    if let Some(var_7) = &input.dash_manifest_style {
        object.key("dashManifestStyle").string(var_7.as_str());
    }
    if let Some(var_8) = &input.destination {
        object.key("destination").string(var_8.as_str());
    }
    if let Some(var_9) = &input.destination_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("destinationSettings").start_object();
        crate::protocol_serde::shape_destination_settings::ser_destination_settings(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_12 = object.key("encryption").start_object();
        crate::protocol_serde::shape_dash_iso_encryption_settings::ser_dash_iso_encryption_settings(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.fragment_length {
        object.key("fragmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.hbbtv_compliance {
        object.key("hbbtvCompliance").string(var_14.as_str());
    }
    if let Some(var_15) = &input.image_based_trick_play {
        object.key("imageBasedTrickPlay").string(var_15.as_str());
    }
    if let Some(var_16) = &input.image_based_trick_play_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("imageBasedTrickPlaySettings").start_object();
        crate::protocol_serde::shape_dash_iso_image_based_trick_play_settings::ser_dash_iso_image_based_trick_play_settings(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.min_buffer_time {
        object.key("minBufferTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.min_final_segment_length {
        object.key("minFinalSegmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.mpd_manifest_bandwidth_type {
        object.key("mpdManifestBandwidthType").string(var_20.as_str());
    }
    if let Some(var_21) = &input.mpd_profile {
        object.key("mpdProfile").string(var_21.as_str());
    }
    if let Some(var_22) = &input.pts_offset_handling_for_b_frames {
        object.key("ptsOffsetHandlingForBFrames").string(var_22.as_str());
    }
    if let Some(var_23) = &input.segment_control {
        object.key("segmentControl").string(var_23.as_str());
    }
    if let Some(var_24) = &input.segment_length {
        object.key("segmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.segment_length_control {
        object.key("segmentLengthControl").string(var_25.as_str());
    }
    if let Some(var_26) = &input.video_composition_offsets {
        object.key("videoCompositionOffsets").string(var_26.as_str());
    }
    if let Some(var_27) = &input.write_segment_timeline_in_representation {
        object.key("writeSegmentTimelineInRepresentation").string(var_27.as_str());
    }
    Ok(())
}

pub(crate) fn de_dash_iso_group_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::DashIsoGroupSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DashIsoGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "additionalManifests" => {
                            builder = builder.set_additional_manifests(
                                crate::protocol_serde::shape_list_of_dash_additional_manifest::de_list_of_dash_additional_manifest(tokens)?,
                            );
                        }
                        "audioChannelConfigSchemeIdUri" => {
                            builder = builder.set_audio_channel_config_scheme_id_uri(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::DashIsoGroupAudioChannelConfigSchemeIdUri::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "baseUrl" => {
                            builder = builder.set_base_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "dashManifestStyle" => {
                            builder = builder.set_dash_manifest_style(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashManifestStyle::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "destination" => {
                            builder = builder.set_destination(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "destinationSettings" => {
                            builder =
                                builder.set_destination_settings(crate::protocol_serde::shape_destination_settings::de_destination_settings(tokens)?);
                        }
                        "encryption" => {
                            builder = builder
                                .set_encryption(crate::protocol_serde::shape_dash_iso_encryption_settings::de_dash_iso_encryption_settings(tokens)?);
                        }
                        "fragmentLength" => {
                            builder = builder.set_fragment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hbbtvCompliance" => {
                            builder = builder.set_hbbtv_compliance(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoHbbtvCompliance::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "imageBasedTrickPlay" => {
                            builder = builder.set_image_based_trick_play(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoImageBasedTrickPlay::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "imageBasedTrickPlaySettings" => {
                            builder = builder.set_image_based_trick_play_settings(
                                crate::protocol_serde::shape_dash_iso_image_based_trick_play_settings::de_dash_iso_image_based_trick_play_settings(
                                    tokens,
                                )?,
                            );
                        }
                        "minBufferTime" => {
                            builder = builder.set_min_buffer_time(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "minFinalSegmentLength" => {
                            builder = builder.set_min_final_segment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "mpdManifestBandwidthType" => {
                            builder = builder.set_mpd_manifest_bandwidth_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoMpdManifestBandwidthType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "mpdProfile" => {
                            builder = builder.set_mpd_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoMpdProfile::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ptsOffsetHandlingForBFrames" => {
                            builder = builder.set_pts_offset_handling_for_b_frames(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::DashIsoPtsOffsetHandlingForBFrames::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "segmentControl" => {
                            builder = builder.set_segment_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoSegmentControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "segmentLength" => {
                            builder = builder.set_segment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "segmentLengthControl" => {
                            builder = builder.set_segment_length_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoSegmentLengthControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "videoCompositionOffsets" => {
                            builder = builder.set_video_composition_offsets(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashIsoVideoCompositionOffsets::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "writeSegmentTimelineInRepresentation" => {
                            builder = builder.set_write_segment_timeline_in_representation(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::DashIsoWriteSegmentTimelineInRepresentation::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
