// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_video_preprocessor(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::VideoPreprocessor,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.color_corrector {
        #[allow(unused_mut)]
        let mut object_2 = object.key("colorCorrector").start_object();
        crate::protocol_serde::shape_color_corrector::ser_color_corrector(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.deinterlacer {
        #[allow(unused_mut)]
        let mut object_4 = object.key("deinterlacer").start_object();
        crate::protocol_serde::shape_deinterlacer::ser_deinterlacer(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.dolby_vision {
        #[allow(unused_mut)]
        let mut object_6 = object.key("dolbyVision").start_object();
        crate::protocol_serde::shape_dolby_vision::ser_dolby_vision(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.hdr10_plus {
        #[allow(unused_mut)]
        let mut object_8 = object.key("hdr10Plus").start_object();
        crate::protocol_serde::shape_hdr10_plus::ser_hdr10_plus(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.image_inserter {
        #[allow(unused_mut)]
        let mut object_10 = object.key("imageInserter").start_object();
        crate::protocol_serde::shape_image_inserter::ser_image_inserter(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.noise_reducer {
        #[allow(unused_mut)]
        let mut object_12 = object.key("noiseReducer").start_object();
        crate::protocol_serde::shape_noise_reducer::ser_noise_reducer(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.partner_watermarking {
        #[allow(unused_mut)]
        let mut object_14 = object.key("partnerWatermarking").start_object();
        crate::protocol_serde::shape_partner_watermarking::ser_partner_watermarking(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.timecode_burnin {
        #[allow(unused_mut)]
        let mut object_16 = object.key("timecodeBurnin").start_object();
        crate::protocol_serde::shape_timecode_burnin::ser_timecode_burnin(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}

pub(crate) fn de_video_preprocessor<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::VideoPreprocessor>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VideoPreprocessorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "colorCorrector" => {
                            builder = builder.set_color_corrector(crate::protocol_serde::shape_color_corrector::de_color_corrector(tokens)?);
                        }
                        "deinterlacer" => {
                            builder = builder.set_deinterlacer(crate::protocol_serde::shape_deinterlacer::de_deinterlacer(tokens)?);
                        }
                        "dolbyVision" => {
                            builder = builder.set_dolby_vision(crate::protocol_serde::shape_dolby_vision::de_dolby_vision(tokens)?);
                        }
                        "hdr10Plus" => {
                            builder = builder.set_hdr10_plus(crate::protocol_serde::shape_hdr10_plus::de_hdr10_plus(tokens)?);
                        }
                        "imageInserter" => {
                            builder = builder.set_image_inserter(crate::protocol_serde::shape_image_inserter::de_image_inserter(tokens)?);
                        }
                        "noiseReducer" => {
                            builder = builder.set_noise_reducer(crate::protocol_serde::shape_noise_reducer::de_noise_reducer(tokens)?);
                        }
                        "partnerWatermarking" => {
                            builder =
                                builder.set_partner_watermarking(crate::protocol_serde::shape_partner_watermarking::de_partner_watermarking(tokens)?);
                        }
                        "timecodeBurnin" => {
                            builder = builder.set_timecode_burnin(crate::protocol_serde::shape_timecode_burnin::de_timecode_burnin(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
