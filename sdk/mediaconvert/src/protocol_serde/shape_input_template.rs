// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input_template(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InputTemplate,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.audio_selector_groups {
        #[allow(unused_mut)]
        let mut object_2 = object.key("audioSelectorGroups").start_object();
        for (key_3, value_4) in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_5 = object_2.key(key_3.as_str()).start_object();
                crate::protocol_serde::shape_audio_selector_group::ser_audio_selector_group(
                    &mut object_5,
                    value_4,
                )?;
                object_5.finish();
            }
        }
        object_2.finish();
    }
    if let Some(var_6) = &input.audio_selectors {
        #[allow(unused_mut)]
        let mut object_7 = object.key("audioSelectors").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_audio_selector::ser_audio_selector(
                    &mut object_10,
                    value_9,
                )?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_11) = &input.caption_selectors {
        #[allow(unused_mut)]
        let mut object_12 = object.key("captionSelectors").start_object();
        for (key_13, value_14) in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_15 = object_12.key(key_13.as_str()).start_object();
                crate::protocol_serde::shape_caption_selector::ser_caption_selector(
                    &mut object_15,
                    value_14,
                )?;
                object_15.finish();
            }
        }
        object_12.finish();
    }
    if let Some(var_16) = &input.crop {
        #[allow(unused_mut)]
        let mut object_17 = object.key("crop").start_object();
        crate::protocol_serde::shape_rectangle::ser_rectangle(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.deblock_filter {
        object.key("deblockFilter").string(var_18.as_str());
    }
    if let Some(var_19) = &input.denoise_filter {
        object.key("denoiseFilter").string(var_19.as_str());
    }
    if let Some(var_20) = &input.dolby_vision_metadata_xml {
        object.key("dolbyVisionMetadataXml").string(var_20.as_str());
    }
    if let Some(var_21) = &input.filter_enable {
        object.key("filterEnable").string(var_21.as_str());
    }
    if input.filter_strength != 0 {
        object.key("filterStrength").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.filter_strength).into()),
        );
    }
    if let Some(var_22) = &input.image_inserter {
        #[allow(unused_mut)]
        let mut object_23 = object.key("imageInserter").start_object();
        crate::protocol_serde::shape_image_inserter::ser_image_inserter(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.input_clippings {
        let mut array_25 = object.key("inputClippings").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_input_clipping::ser_input_clipping(
                    &mut object_27,
                    item_26,
                )?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.input_scan_type {
        object.key("inputScanType").string(var_28.as_str());
    }
    if let Some(var_29) = &input.position {
        #[allow(unused_mut)]
        let mut object_30 = object.key("position").start_object();
        crate::protocol_serde::shape_rectangle::ser_rectangle(&mut object_30, var_29)?;
        object_30.finish();
    }
    if input.program_number != 0 {
        object.key("programNumber").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_number).into()),
        );
    }
    if let Some(var_31) = &input.psi_control {
        object.key("psiControl").string(var_31.as_str());
    }
    if let Some(var_32) = &input.timecode_source {
        object.key("timecodeSource").string(var_32.as_str());
    }
    if let Some(var_33) = &input.timecode_start {
        object.key("timecodeStart").string(var_33.as_str());
    }
    if let Some(var_34) = &input.video_selector {
        #[allow(unused_mut)]
        let mut object_35 = object.key("videoSelector").start_object();
        crate::protocol_serde::shape_video_selector::ser_video_selector(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}

pub(crate) fn de_input_template<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::InputTemplate>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InputTemplateBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "audioSelectorGroups" => {
                                builder = builder.set_audio_selector_groups(
                                    crate::protocol_serde::shape___map_of_audio_selector_group::de___map_of_audio_selector_group(tokens)?
                                );
                            }
                            "audioSelectors" => {
                                builder = builder.set_audio_selectors(
                                    crate::protocol_serde::shape___map_of_audio_selector::de___map_of_audio_selector(tokens)?
                                );
                            }
                            "captionSelectors" => {
                                builder = builder.set_caption_selectors(
                                    crate::protocol_serde::shape___map_of_caption_selector::de___map_of_caption_selector(tokens)?
                                );
                            }
                            "crop" => {
                                builder = builder.set_crop(
                                    crate::protocol_serde::shape_rectangle::de_rectangle(tokens)?,
                                );
                            }
                            "deblockFilter" => {
                                builder = builder.set_deblock_filter(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputDeblockFilter::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "denoiseFilter" => {
                                builder = builder.set_denoise_filter(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputDenoiseFilter::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "dolbyVisionMetadataXml" => {
                                builder = builder.set_dolby_vision_metadata_xml(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "filterEnable" => {
                                builder = builder.set_filter_enable(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputFilterEnable::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "filterStrength" => {
                                builder = builder.set_filter_strength(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "imageInserter" => {
                                builder = builder.set_image_inserter(
                                    crate::protocol_serde::shape_image_inserter::de_image_inserter(
                                        tokens,
                                    )?,
                                );
                            }
                            "inputClippings" => {
                                builder = builder.set_input_clippings(
                                    crate::protocol_serde::shape___list_of_input_clipping::de___list_of_input_clipping(tokens)?
                                );
                            }
                            "inputScanType" => {
                                builder = builder.set_input_scan_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::InputScanType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "position" => {
                                builder = builder.set_position(
                                    crate::protocol_serde::shape_rectangle::de_rectangle(tokens)?,
                                );
                            }
                            "programNumber" => {
                                builder = builder.set_program_number(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "psiControl" => {
                                builder = builder.set_psi_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputPsiControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeSource" => {
                                builder = builder.set_timecode_source(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::InputTimecodeSource::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timecodeStart" => {
                                builder = builder.set_timecode_start(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "videoSelector" => {
                                builder = builder.set_video_selector(
                                    crate::protocol_serde::shape_video_selector::de_video_selector(
                                        tokens,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
