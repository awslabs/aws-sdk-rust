// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input_template(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::InputTemplate,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.advanced_input_filter {
        object.key("advancedInputFilter").string(var_1.as_str());
    }
    if let Some(var_2) = &input.advanced_input_filter_settings {
        #[allow(unused_mut)]
        let mut object_3 = object.key("advancedInputFilterSettings").start_object();
        crate::protocol_serde::shape_advanced_input_filter_settings::ser_advanced_input_filter_settings(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.audio_selector_groups {
        #[allow(unused_mut)]
        let mut object_5 = object.key("audioSelectorGroups").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                crate::protocol_serde::shape_audio_selector_group::ser_audio_selector_group(&mut object_8, value_7)?;
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_9) = &input.audio_selectors {
        #[allow(unused_mut)]
        let mut object_10 = object.key("audioSelectors").start_object();
        for (key_11, value_12) in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_13 = object_10.key(key_11.as_str()).start_object();
                crate::protocol_serde::shape_audio_selector::ser_audio_selector(&mut object_13, value_12)?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.caption_selectors {
        #[allow(unused_mut)]
        let mut object_15 = object.key("captionSelectors").start_object();
        for (key_16, value_17) in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_18 = object_15.key(key_16.as_str()).start_object();
                crate::protocol_serde::shape_caption_selector::ser_caption_selector(&mut object_18, value_17)?;
                object_18.finish();
            }
        }
        object_15.finish();
    }
    if let Some(var_19) = &input.crop {
        #[allow(unused_mut)]
        let mut object_20 = object.key("crop").start_object();
        crate::protocol_serde::shape_rectangle::ser_rectangle(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.deblock_filter {
        object.key("deblockFilter").string(var_21.as_str());
    }
    if let Some(var_22) = &input.denoise_filter {
        object.key("denoiseFilter").string(var_22.as_str());
    }
    if let Some(var_23) = &input.dolby_vision_metadata_xml {
        object.key("dolbyVisionMetadataXml").string(var_23.as_str());
    }
    if let Some(var_24) = &input.filter_enable {
        object.key("filterEnable").string(var_24.as_str());
    }
    if let Some(var_25) = &input.filter_strength {
        object.key("filterStrength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.image_inserter {
        #[allow(unused_mut)]
        let mut object_27 = object.key("imageInserter").start_object();
        crate::protocol_serde::shape_image_inserter::ser_image_inserter(&mut object_27, var_26)?;
        object_27.finish();
    }
    if let Some(var_28) = &input.input_clippings {
        let mut array_29 = object.key("inputClippings").start_array();
        for item_30 in var_28 {
            {
                #[allow(unused_mut)]
                let mut object_31 = array_29.value().start_object();
                crate::protocol_serde::shape_input_clipping::ser_input_clipping(&mut object_31, item_30)?;
                object_31.finish();
            }
        }
        array_29.finish();
    }
    if let Some(var_32) = &input.input_scan_type {
        object.key("inputScanType").string(var_32.as_str());
    }
    if let Some(var_33) = &input.position {
        #[allow(unused_mut)]
        let mut object_34 = object.key("position").start_object();
        crate::protocol_serde::shape_rectangle::ser_rectangle(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.program_number {
        object.key("programNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_35).into()),
        );
    }
    if let Some(var_36) = &input.psi_control {
        object.key("psiControl").string(var_36.as_str());
    }
    if let Some(var_37) = &input.timecode_source {
        object.key("timecodeSource").string(var_37.as_str());
    }
    if let Some(var_38) = &input.timecode_start {
        object.key("timecodeStart").string(var_38.as_str());
    }
    if let Some(var_39) = &input.video_overlays {
        let mut array_40 = object.key("videoOverlays").start_array();
        for item_41 in var_39 {
            {
                #[allow(unused_mut)]
                let mut object_42 = array_40.value().start_object();
                crate::protocol_serde::shape_video_overlay::ser_video_overlay(&mut object_42, item_41)?;
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.video_selector {
        #[allow(unused_mut)]
        let mut object_44 = object.key("videoSelector").start_object();
        crate::protocol_serde::shape_video_selector::ser_video_selector(&mut object_44, var_43)?;
        object_44.finish();
    }
    Ok(())
}

pub(crate) fn de_input_template<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::InputTemplate>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::InputTemplateBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "advancedInputFilter" => {
                            builder = builder.set_advanced_input_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AdvancedInputFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "advancedInputFilterSettings" => {
                            builder = builder.set_advanced_input_filter_settings(
                                crate::protocol_serde::shape_advanced_input_filter_settings::de_advanced_input_filter_settings(tokens)?,
                            );
                        }
                        "audioSelectorGroups" => {
                            builder = builder.set_audio_selector_groups(
                                crate::protocol_serde::shape_map_of_audio_selector_group::de_map_of_audio_selector_group(tokens)?,
                            );
                        }
                        "audioSelectors" => {
                            builder =
                                builder.set_audio_selectors(crate::protocol_serde::shape_map_of_audio_selector::de_map_of_audio_selector(tokens)?);
                        }
                        "captionSelectors" => {
                            builder = builder
                                .set_caption_selectors(crate::protocol_serde::shape_map_of_caption_selector::de_map_of_caption_selector(tokens)?);
                        }
                        "crop" => {
                            builder = builder.set_crop(crate::protocol_serde::shape_rectangle::de_rectangle(tokens)?);
                        }
                        "deblockFilter" => {
                            builder = builder.set_deblock_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputDeblockFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "denoiseFilter" => {
                            builder = builder.set_denoise_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputDenoiseFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dolbyVisionMetadataXml" => {
                            builder = builder.set_dolby_vision_metadata_xml(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "filterEnable" => {
                            builder = builder.set_filter_enable(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputFilterEnable::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "filterStrength" => {
                            builder = builder.set_filter_strength(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "imageInserter" => {
                            builder = builder.set_image_inserter(crate::protocol_serde::shape_image_inserter::de_image_inserter(tokens)?);
                        }
                        "inputClippings" => {
                            builder =
                                builder.set_input_clippings(crate::protocol_serde::shape_list_of_input_clipping::de_list_of_input_clipping(tokens)?);
                        }
                        "inputScanType" => {
                            builder = builder.set_input_scan_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputScanType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "position" => {
                            builder = builder.set_position(crate::protocol_serde::shape_rectangle::de_rectangle(tokens)?);
                        }
                        "programNumber" => {
                            builder = builder.set_program_number(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "psiControl" => {
                            builder = builder.set_psi_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputPsiControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "timecodeSource" => {
                            builder = builder.set_timecode_source(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputTimecodeSource::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "timecodeStart" => {
                            builder = builder.set_timecode_start(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "videoOverlays" => {
                            builder =
                                builder.set_video_overlays(crate::protocol_serde::shape_list_of_video_overlay::de_list_of_video_overlay(tokens)?);
                        }
                        "videoSelector" => {
                            builder = builder.set_video_selector(crate::protocol_serde::shape_video_selector::de_video_selector(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
