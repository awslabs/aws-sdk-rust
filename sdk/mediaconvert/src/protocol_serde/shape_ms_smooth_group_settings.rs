// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ms_smooth_group_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MsSmoothGroupSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_manifests {
        let mut array_2 = object.key("additionalManifests").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_ms_smooth_additional_manifest::ser_ms_smooth_additional_manifest(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.audio_deduplication {
        object.key("audioDeduplication").string(var_5.as_str());
    }
    if let Some(var_6) = &input.destination {
        object.key("destination").string(var_6.as_str());
    }
    if let Some(var_7) = &input.destination_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("destinationSettings").start_object();
        crate::protocol_serde::shape_destination_settings::ser_destination_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_10 = object.key("encryption").start_object();
        crate::protocol_serde::shape_ms_smooth_encryption_settings::ser_ms_smooth_encryption_settings(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.fragment_length {
        object.key("fragmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.fragment_length_control {
        object.key("fragmentLengthControl").string(var_12.as_str());
    }
    if let Some(var_13) = &input.manifest_encoding {
        object.key("manifestEncoding").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_ms_smooth_group_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::MsSmoothGroupSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MsSmoothGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "additionalManifests" => {
                            builder = builder.set_additional_manifests(
                                crate::protocol_serde::shape_list_of_ms_smooth_additional_manifest::de_list_of_ms_smooth_additional_manifest(tokens)?,
                            );
                        }
                        "audioDeduplication" => {
                            builder = builder.set_audio_deduplication(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MsSmoothAudioDeduplication::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "destination" => {
                            builder = builder.set_destination(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "destinationSettings" => {
                            builder =
                                builder.set_destination_settings(crate::protocol_serde::shape_destination_settings::de_destination_settings(tokens)?);
                        }
                        "encryption" => {
                            builder = builder.set_encryption(
                                crate::protocol_serde::shape_ms_smooth_encryption_settings::de_ms_smooth_encryption_settings(tokens)?,
                            );
                        }
                        "fragmentLength" => {
                            builder = builder.set_fragment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "fragmentLengthControl" => {
                            builder = builder.set_fragment_length_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MsSmoothFragmentLengthControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "manifestEncoding" => {
                            builder = builder.set_manifest_encoding(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MsSmoothManifestEncoding::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
