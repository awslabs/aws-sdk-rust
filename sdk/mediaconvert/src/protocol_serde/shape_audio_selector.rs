// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_audio_selector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AudioSelector,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.audio_duration_correction {
        object.key("audioDurationCorrection").string(var_1.as_str());
    }
    if let Some(var_2) = &input.custom_language_code {
        object.key("customLanguageCode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.default_selection {
        object.key("defaultSelection").string(var_3.as_str());
    }
    if let Some(var_4) = &input.external_audio_file_input {
        object.key("externalAudioFileInput").string(var_4.as_str());
    }
    if let Some(var_5) = &input.hls_rendition_group_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("hlsRenditionGroupSettings").start_object();
        crate::protocol_serde::shape_hls_rendition_group_settings::ser_hls_rendition_group_settings(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.language_code {
        object.key("languageCode").string(var_7.as_str());
    }
    if input.offset != 0 {
        object.key("offset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.offset).into()),
        );
    }
    if let Some(var_8) = &input.pids {
        let mut array_9 = object.key("pids").start_array();
        for item_10 in var_8 {
            {
                array_9.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_10).into()),
                );
            }
        }
        array_9.finish();
    }
    if input.program_selection != 0 {
        object.key("programSelection").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.program_selection).into()),
        );
    }
    if let Some(var_11) = &input.remix_settings {
        #[allow(unused_mut)]
        let mut object_12 = object.key("remixSettings").start_object();
        crate::protocol_serde::shape_remix_settings::ser_remix_settings(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.selector_type {
        object.key("selectorType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tracks {
        let mut array_15 = object.key("tracks").start_array();
        for item_16 in var_14 {
            {
                array_15.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_16).into()),
                );
            }
        }
        array_15.finish();
    }
    Ok(())
}

pub(crate) fn de_audio_selector<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AudioSelector>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AudioSelectorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "audioDurationCorrection" => {
                                builder = builder.set_audio_duration_correction(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AudioDurationCorrection::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "customLanguageCode" => {
                                builder = builder.set_custom_language_code(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "defaultSelection" => {
                                builder = builder.set_default_selection(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AudioDefaultSelection::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "externalAudioFileInput" => {
                                builder = builder.set_external_audio_file_input(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "hlsRenditionGroupSettings" => {
                                builder = builder.set_hls_rendition_group_settings(
                                    crate::protocol_serde::shape_hls_rendition_group_settings::de_hls_rendition_group_settings(tokens)?
                                );
                            }
                            "languageCode" => {
                                builder = builder.set_language_code(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::LanguageCode::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "offset" => {
                                builder = builder.set_offset(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "pids" => {
                                builder = builder.set_pids(
                                    crate::protocol_serde::shape___list_of__integer_min1_max2147483647::de___list_of__integer_min1_max2147483647(tokens)?
                                );
                            }
                            "programSelection" => {
                                builder = builder.set_program_selection(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "remixSettings" => {
                                builder = builder.set_remix_settings(
                                    crate::protocol_serde::shape_remix_settings::de_remix_settings(
                                        tokens,
                                    )?,
                                );
                            }
                            "selectorType" => {
                                builder = builder.set_selector_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AudioSelectorType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "tracks" => {
                                builder = builder.set_tracks(
                                    crate::protocol_serde::shape___list_of__integer_min1_max2147483647::de___list_of__integer_min1_max2147483647(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
