// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_video_overlay(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::VideoOverlay,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.crop {
        #[allow(unused_mut)]
        let mut object_2 = object.key("crop").start_object();
        crate::protocol_serde::shape_video_overlay_crop::ser_video_overlay_crop(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.end_timecode {
        object.key("endTimecode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.initial_position {
        #[allow(unused_mut)]
        let mut object_5 = object.key("initialPosition").start_object();
        crate::protocol_serde::shape_video_overlay_position::ser_video_overlay_position(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.input {
        #[allow(unused_mut)]
        let mut object_7 = object.key("input").start_object();
        crate::protocol_serde::shape_video_overlay_input::ser_video_overlay_input(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.playback {
        object.key("playback").string(var_8.as_str());
    }
    if let Some(var_9) = &input.start_timecode {
        object.key("startTimecode").string(var_9.as_str());
    }
    if let Some(var_10) = &input.transitions {
        let mut array_11 = object.key("transitions").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_video_overlay_transition::ser_video_overlay_transition(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub(crate) fn de_video_overlay<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::VideoOverlay>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VideoOverlayBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "crop" => {
                            builder = builder.set_crop(crate::protocol_serde::shape_video_overlay_crop::de_video_overlay_crop(tokens)?);
                        }
                        "endTimecode" => {
                            builder = builder.set_end_timecode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "initialPosition" => {
                            builder =
                                builder.set_initial_position(crate::protocol_serde::shape_video_overlay_position::de_video_overlay_position(tokens)?);
                        }
                        "input" => {
                            builder = builder.set_input(crate::protocol_serde::shape_video_overlay_input::de_video_overlay_input(tokens)?);
                        }
                        "playback" => {
                            builder = builder.set_playback(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VideoOverlayPlayBackMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "startTimecode" => {
                            builder = builder.set_start_timecode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "transitions" => {
                            builder = builder.set_transitions(
                                crate::protocol_serde::shape_list_of_video_overlay_transition::de_list_of_video_overlay_transition(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
