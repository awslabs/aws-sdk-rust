// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_prores_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ProresSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.chroma_sampling {
        object.key("chromaSampling").string(var_1.as_str());
    }
    if let Some(var_2) = &input.codec_profile {
        object.key("codecProfile").string(var_2.as_str());
    }
    if let Some(var_3) = &input.framerate_control {
        object.key("framerateControl").string(var_3.as_str());
    }
    if let Some(var_4) = &input.framerate_conversion_algorithm {
        object.key("framerateConversionAlgorithm").string(var_4.as_str());
    }
    if let Some(var_5) = &input.framerate_denominator {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.framerate_numerator {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.interlace_mode {
        object.key("interlaceMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.par_control {
        object.key("parControl").string(var_8.as_str());
    }
    if let Some(var_9) = &input.par_denominator {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.par_numerator {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.scan_type_conversion_mode {
        object.key("scanTypeConversionMode").string(var_11.as_str());
    }
    if let Some(var_12) = &input.slow_pal {
        object.key("slowPal").string(var_12.as_str());
    }
    if let Some(var_13) = &input.telecine {
        object.key("telecine").string(var_13.as_str());
    }
    Ok(())
}

pub(crate) fn de_prores_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ProresSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ProresSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "chromaSampling" => {
                            builder = builder.set_chroma_sampling(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresChromaSampling::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "codecProfile" => {
                            builder = builder.set_codec_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresCodecProfile::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateControl" => {
                            builder = builder.set_framerate_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresFramerateControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateConversionAlgorithm" => {
                            builder = builder.set_framerate_conversion_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::ProresFramerateConversionAlgorithm::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "framerateDenominator" => {
                            builder = builder.set_framerate_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "framerateNumerator" => {
                            builder = builder.set_framerate_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "interlaceMode" => {
                            builder = builder.set_interlace_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresInterlaceMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "parControl" => {
                            builder = builder.set_par_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresParControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "parDenominator" => {
                            builder = builder.set_par_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "parNumerator" => {
                            builder = builder.set_par_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "scanTypeConversionMode" => {
                            builder = builder.set_scan_type_conversion_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresScanTypeConversionMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "slowPal" => {
                            builder = builder.set_slow_pal(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresSlowPal::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "telecine" => {
                            builder = builder.set_telecine(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ProresTelecine::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
