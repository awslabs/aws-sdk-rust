// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_hdr10_metadata(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Hdr10Metadata,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.blue_primary_x != 0 {
        object.key("bluePrimaryX").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.blue_primary_x).into()),
        );
    }
    if input.blue_primary_y != 0 {
        object.key("bluePrimaryY").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.blue_primary_y).into()),
        );
    }
    if input.green_primary_x != 0 {
        object.key("greenPrimaryX").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.green_primary_x).into()),
        );
    }
    if input.green_primary_y != 0 {
        object.key("greenPrimaryY").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.green_primary_y).into()),
        );
    }
    if input.max_content_light_level != 0 {
        object.key("maxContentLightLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_content_light_level).into()),
        );
    }
    if input.max_frame_average_light_level != 0 {
        object.key("maxFrameAverageLightLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_frame_average_light_level).into()),
        );
    }
    if input.max_luminance != 0 {
        object.key("maxLuminance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_luminance).into()),
        );
    }
    if input.min_luminance != 0 {
        object.key("minLuminance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_luminance).into()),
        );
    }
    if input.red_primary_x != 0 {
        object.key("redPrimaryX").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.red_primary_x).into()),
        );
    }
    if input.red_primary_y != 0 {
        object.key("redPrimaryY").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.red_primary_y).into()),
        );
    }
    if input.white_point_x != 0 {
        object.key("whitePointX").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.white_point_x).into()),
        );
    }
    if input.white_point_y != 0 {
        object.key("whitePointY").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.white_point_y).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_hdr10_metadata<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::Hdr10Metadata>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Hdr10MetadataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "bluePrimaryX" => {
                                builder = builder.set_blue_primary_x(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "bluePrimaryY" => {
                                builder = builder.set_blue_primary_y(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "greenPrimaryX" => {
                                builder = builder.set_green_primary_x(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "greenPrimaryY" => {
                                builder = builder.set_green_primary_y(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "maxContentLightLevel" => {
                                builder = builder.set_max_content_light_level(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "maxFrameAverageLightLevel" => {
                                builder = builder.set_max_frame_average_light_level(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "maxLuminance" => {
                                builder = builder.set_max_luminance(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "minLuminance" => {
                                builder = builder.set_min_luminance(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "redPrimaryX" => {
                                builder = builder.set_red_primary_x(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "redPrimaryY" => {
                                builder = builder.set_red_primary_y(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "whitePointX" => {
                                builder = builder.set_white_point_x(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "whitePointY" => {
                                builder = builder.set_white_point_y(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
