// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_burnin_destination_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BurninDestinationSettings,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.alignment {
        object.key("alignment").string(var_1.as_str());
    }
    if let Some(var_2) = &input.apply_font_color {
        object.key("applyFontColor").string(var_2.as_str());
    }
    if let Some(var_3) = &input.background_color {
        object.key("backgroundColor").string(var_3.as_str());
    }
    if let Some(var_4) = &input.background_opacity {
        object.key("backgroundOpacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.fallback_font {
        object.key("fallbackFont").string(var_5.as_str());
    }
    if let Some(var_6) = &input.font_color {
        object.key("fontColor").string(var_6.as_str());
    }
    if let Some(var_7) = &input.font_file_bold {
        object.key("fontFileBold").string(var_7.as_str());
    }
    if let Some(var_8) = &input.font_file_bold_italic {
        object.key("fontFileBoldItalic").string(var_8.as_str());
    }
    if let Some(var_9) = &input.font_file_italic {
        object.key("fontFileItalic").string(var_9.as_str());
    }
    if let Some(var_10) = &input.font_file_regular {
        object.key("fontFileRegular").string(var_10.as_str());
    }
    if let Some(var_11) = &input.font_opacity {
        object.key("fontOpacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.font_resolution {
        object.key("fontResolution").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.font_script {
        object.key("fontScript").string(var_13.as_str());
    }
    if let Some(var_14) = &input.font_size {
        object.key("fontSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.hex_font_color {
        object.key("hexFontColor").string(var_15.as_str());
    }
    if let Some(var_16) = &input.outline_color {
        object.key("outlineColor").string(var_16.as_str());
    }
    if let Some(var_17) = &input.outline_size {
        object.key("outlineSize").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.remove_ruby_reserve_attributes {
        object.key("removeRubyReserveAttributes").string(var_18.as_str());
    }
    if let Some(var_19) = &input.shadow_color {
        object.key("shadowColor").string(var_19.as_str());
    }
    if let Some(var_20) = &input.shadow_opacity {
        object.key("shadowOpacity").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.shadow_x_offset {
        object.key("shadowXOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.shadow_y_offset {
        object.key("shadowYOffset").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.style_passthrough {
        object.key("stylePassthrough").string(var_23.as_str());
    }
    if let Some(var_24) = &input.teletext_spacing {
        object.key("teletextSpacing").string(var_24.as_str());
    }
    if let Some(var_25) = &input.x_position {
        object.key("xPosition").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_25).into()),
        );
    }
    if let Some(var_26) = &input.y_position {
        object.key("yPosition").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_burnin_destination_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::BurninDestinationSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BurninDestinationSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "alignment" => {
                            builder = builder.set_alignment(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleAlignment::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "applyFontColor" => {
                            builder = builder.set_apply_font_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleApplyFontColor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "backgroundColor" => {
                            builder = builder.set_background_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleBackgroundColor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "backgroundOpacity" => {
                            builder = builder.set_background_opacity(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "fallbackFont" => {
                            builder = builder.set_fallback_font(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleFallbackFont::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "fontColor" => {
                            builder = builder.set_font_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleFontColor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "fontFileBold" => {
                            builder = builder.set_font_file_bold(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "fontFileBoldItalic" => {
                            builder = builder.set_font_file_bold_italic(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "fontFileItalic" => {
                            builder = builder.set_font_file_italic(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "fontFileRegular" => {
                            builder = builder.set_font_file_regular(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "fontOpacity" => {
                            builder = builder.set_font_opacity(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "fontResolution" => {
                            builder = builder.set_font_resolution(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "fontScript" => {
                            builder = builder.set_font_script(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::FontScript::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "fontSize" => {
                            builder = builder.set_font_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hexFontColor" => {
                            builder = builder.set_hex_font_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "outlineColor" => {
                            builder = builder.set_outline_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleOutlineColor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "outlineSize" => {
                            builder = builder.set_outline_size(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "removeRubyReserveAttributes" => {
                            builder = builder.set_remove_ruby_reserve_attributes(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::RemoveRubyReserveAttributes::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "shadowColor" => {
                            builder = builder.set_shadow_color(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleShadowColor::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "shadowOpacity" => {
                            builder = builder.set_shadow_opacity(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "shadowXOffset" => {
                            builder = builder.set_shadow_x_offset(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "shadowYOffset" => {
                            builder = builder.set_shadow_y_offset(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "stylePassthrough" => {
                            builder = builder.set_style_passthrough(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurnInSubtitleStylePassthrough::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "teletextSpacing" => {
                            builder = builder.set_teletext_spacing(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BurninSubtitleTeletextSpacing::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "xPosition" => {
                            builder = builder.set_x_position(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "yPosition" => {
                            builder = builder.set_y_position(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
