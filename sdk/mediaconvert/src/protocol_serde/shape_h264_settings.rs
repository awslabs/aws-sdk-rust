// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_h264_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::H264Settings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_1.as_str());
    }
    if input.bitrate != 0 {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bitrate).into()),
        );
    }
    if let Some(var_2) = &input.codec_level {
        object.key("codecLevel").string(var_2.as_str());
    }
    if let Some(var_3) = &input.codec_profile {
        object.key("codecProfile").string(var_3.as_str());
    }
    if let Some(var_4) = &input.dynamic_sub_gop {
        object.key("dynamicSubGop").string(var_4.as_str());
    }
    if let Some(var_5) = &input.entropy_encoding {
        object.key("entropyEncoding").string(var_5.as_str());
    }
    if let Some(var_6) = &input.field_encoding {
        object.key("fieldEncoding").string(var_6.as_str());
    }
    if let Some(var_7) = &input.flicker_adaptive_quantization {
        object
            .key("flickerAdaptiveQuantization")
            .string(var_7.as_str());
    }
    if let Some(var_8) = &input.framerate_control {
        object.key("framerateControl").string(var_8.as_str());
    }
    if let Some(var_9) = &input.framerate_conversion_algorithm {
        object
            .key("framerateConversionAlgorithm")
            .string(var_9.as_str());
    }
    if input.framerate_denominator != 0 {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    if input.framerate_numerator != 0 {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if let Some(var_10) = &input.gop_b_reference {
        object.key("gopBReference").string(var_10.as_str());
    }
    if input.gop_closed_cadence != 0 {
        object.key("gopClosedCadence").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.gop_closed_cadence).into()),
        );
    }
    if input.gop_size != 0.0 {
        object.key("gopSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.gop_size).into()),
        );
    }
    if let Some(var_11) = &input.gop_size_units {
        object.key("gopSizeUnits").string(var_11.as_str());
    }
    if input.hrd_buffer_final_fill_percentage != 0 {
        object.key("hrdBufferFinalFillPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hrd_buffer_final_fill_percentage).into()),
        );
    }
    if input.hrd_buffer_initial_fill_percentage != 0 {
        object.key("hrdBufferInitialFillPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hrd_buffer_initial_fill_percentage).into()),
        );
    }
    if input.hrd_buffer_size != 0 {
        object.key("hrdBufferSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hrd_buffer_size).into()),
        );
    }
    if let Some(var_12) = &input.interlace_mode {
        object.key("interlaceMode").string(var_12.as_str());
    }
    if input.max_bitrate != 0 {
        object.key("maxBitrate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_bitrate).into()),
        );
    }
    if input.min_i_interval != 0 {
        object.key("minIInterval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.min_i_interval).into()),
        );
    }
    if input.number_b_frames_between_reference_frames != 0 {
        object.key("numberBFramesBetweenReferenceFrames").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt(
                (input.number_b_frames_between_reference_frames).into(),
            ),
        );
    }
    if input.number_reference_frames != 0 {
        object.key("numberReferenceFrames").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_reference_frames).into()),
        );
    }
    if let Some(var_13) = &input.par_control {
        object.key("parControl").string(var_13.as_str());
    }
    if input.par_denominator != 0 {
        object.key("parDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.par_denominator).into()),
        );
    }
    if input.par_numerator != 0 {
        object.key("parNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.par_numerator).into()),
        );
    }
    if let Some(var_14) = &input.quality_tuning_level {
        object.key("qualityTuningLevel").string(var_14.as_str());
    }
    if let Some(var_15) = &input.qvbr_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("qvbrSettings").start_object();
        crate::protocol_serde::shape_h264_qvbr_settings::ser_h264_qvbr_settings(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.rate_control_mode {
        object.key("rateControlMode").string(var_17.as_str());
    }
    if let Some(var_18) = &input.repeat_pps {
        object.key("repeatPps").string(var_18.as_str());
    }
    if let Some(var_19) = &input.scan_type_conversion_mode {
        object.key("scanTypeConversionMode").string(var_19.as_str());
    }
    if let Some(var_20) = &input.scene_change_detect {
        object.key("sceneChangeDetect").string(var_20.as_str());
    }
    if input.slices != 0 {
        object.key("slices").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.slices).into()),
        );
    }
    if let Some(var_21) = &input.slow_pal {
        object.key("slowPal").string(var_21.as_str());
    }
    if input.softness != 0 {
        object.key("softness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.softness).into()),
        );
    }
    if let Some(var_22) = &input.spatial_adaptive_quantization {
        object
            .key("spatialAdaptiveQuantization")
            .string(var_22.as_str());
    }
    if let Some(var_23) = &input.syntax {
        object.key("syntax").string(var_23.as_str());
    }
    if let Some(var_24) = &input.telecine {
        object.key("telecine").string(var_24.as_str());
    }
    if let Some(var_25) = &input.temporal_adaptive_quantization {
        object
            .key("temporalAdaptiveQuantization")
            .string(var_25.as_str());
    }
    if let Some(var_26) = &input.unregistered_sei_timecode {
        object
            .key("unregisteredSeiTimecode")
            .string(var_26.as_str());
    }
    Ok(())
}

pub(crate) fn de_h264_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::H264Settings>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::H264SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "adaptiveQuantization" => {
                                builder = builder.set_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264AdaptiveQuantization::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "bitrate" => {
                                builder = builder.set_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "codecLevel" => {
                                builder = builder.set_codec_level(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264CodecLevel::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "codecProfile" => {
                                builder = builder.set_codec_profile(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264CodecProfile::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "dynamicSubGop" => {
                                builder = builder.set_dynamic_sub_gop(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264DynamicSubGop::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "entropyEncoding" => {
                                builder = builder.set_entropy_encoding(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264EntropyEncoding::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "fieldEncoding" => {
                                builder = builder.set_field_encoding(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264FieldEncoding::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "flickerAdaptiveQuantization" => {
                                builder = builder.set_flicker_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264FlickerAdaptiveQuantization::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateControl" => {
                                builder = builder.set_framerate_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264FramerateControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateConversionAlgorithm" => {
                                builder = builder.set_framerate_conversion_algorithm(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264FramerateConversionAlgorithm::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateDenominator" => {
                                builder = builder.set_framerate_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "framerateNumerator" => {
                                builder = builder.set_framerate_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopBReference" => {
                                builder = builder.set_gop_b_reference(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264GopBReference::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "gopClosedCadence" => {
                                builder = builder.set_gop_closed_cadence(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "gopSize" => {
                                builder = builder.set_gop_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "gopSizeUnits" => {
                                builder = builder.set_gop_size_units(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264GopSizeUnits::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "hrdBufferFinalFillPercentage" => {
                                builder = builder.set_hrd_buffer_final_fill_percentage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "hrdBufferInitialFillPercentage" => {
                                builder = builder.set_hrd_buffer_initial_fill_percentage(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "hrdBufferSize" => {
                                builder = builder.set_hrd_buffer_size(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "interlaceMode" => {
                                builder = builder.set_interlace_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264InterlaceMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "maxBitrate" => {
                                builder = builder.set_max_bitrate(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "minIInterval" => {
                                builder = builder.set_min_i_interval(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "numberBFramesBetweenReferenceFrames" => {
                                builder = builder.set_number_b_frames_between_reference_frames(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "numberReferenceFrames" => {
                                builder = builder.set_number_reference_frames(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "parControl" => {
                                builder = builder.set_par_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264ParControl::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "parDenominator" => {
                                builder = builder.set_par_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "parNumerator" => {
                                builder = builder.set_par_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "qualityTuningLevel" => {
                                builder = builder.set_quality_tuning_level(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264QualityTuningLevel::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "qvbrSettings" => {
                                builder = builder.set_qvbr_settings(
                                    crate::protocol_serde::shape_h264_qvbr_settings::de_h264_qvbr_settings(tokens)?
                                );
                            }
                            "rateControlMode" => {
                                builder = builder.set_rate_control_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264RateControlMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "repeatPps" => {
                                builder = builder.set_repeat_pps(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264RepeatPps::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "scanTypeConversionMode" => {
                                builder = builder.set_scan_type_conversion_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264ScanTypeConversionMode::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "sceneChangeDetect" => {
                                builder = builder.set_scene_change_detect(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264SceneChangeDetect::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "slices" => {
                                builder = builder.set_slices(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "slowPal" => {
                                builder = builder.set_slow_pal(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264SlowPal::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "softness" => {
                                builder = builder.set_softness(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "spatialAdaptiveQuantization" => {
                                builder = builder.set_spatial_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264SpatialAdaptiveQuantization::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "syntax" => {
                                builder = builder.set_syntax(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264Syntax::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "telecine" => {
                                builder = builder.set_telecine(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::H264Telecine::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "temporalAdaptiveQuantization" => {
                                builder = builder.set_temporal_adaptive_quantization(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264TemporalAdaptiveQuantization::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "unregisteredSeiTimecode" => {
                                builder = builder.set_unregistered_sei_timecode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::H264UnregisteredSeiTimecode::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
