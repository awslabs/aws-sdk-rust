// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cmaf_group_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CmafGroupSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.additional_manifests {
        let mut array_2 = object.key("additionalManifests").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_cmaf_additional_manifest::ser_cmaf_additional_manifest(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.base_url {
        object.key("baseUrl").string(var_5.as_str());
    }
    if let Some(var_6) = &input.client_cache {
        object.key("clientCache").string(var_6.as_str());
    }
    if let Some(var_7) = &input.codec_specification {
        object.key("codecSpecification").string(var_7.as_str());
    }
    if let Some(var_8) = &input.dash_manifest_style {
        object.key("dashManifestStyle").string(var_8.as_str());
    }
    if let Some(var_9) = &input.destination {
        object.key("destination").string(var_9.as_str());
    }
    if let Some(var_10) = &input.destination_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("destinationSettings").start_object();
        crate::protocol_serde::shape_destination_settings::ser_destination_settings(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_13 = object.key("encryption").start_object();
        crate::protocol_serde::shape_cmaf_encryption_settings::ser_cmaf_encryption_settings(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.fragment_length {
        object.key("fragmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.image_based_trick_play {
        object.key("imageBasedTrickPlay").string(var_15.as_str());
    }
    if let Some(var_16) = &input.image_based_trick_play_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("imageBasedTrickPlaySettings").start_object();
        crate::protocol_serde::shape_cmaf_image_based_trick_play_settings::ser_cmaf_image_based_trick_play_settings(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.manifest_compression {
        object.key("manifestCompression").string(var_18.as_str());
    }
    if let Some(var_19) = &input.manifest_duration_format {
        object.key("manifestDurationFormat").string(var_19.as_str());
    }
    if let Some(var_20) = &input.min_buffer_time {
        object.key("minBufferTime").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.min_final_segment_length {
        object.key("minFinalSegmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.mpd_manifest_bandwidth_type {
        object.key("mpdManifestBandwidthType").string(var_22.as_str());
    }
    if let Some(var_23) = &input.mpd_profile {
        object.key("mpdProfile").string(var_23.as_str());
    }
    if let Some(var_24) = &input.pts_offset_handling_for_b_frames {
        object.key("ptsOffsetHandlingForBFrames").string(var_24.as_str());
    }
    if let Some(var_25) = &input.segment_control {
        object.key("segmentControl").string(var_25.as_str());
    }
    if let Some(var_26) = &input.segment_length {
        object.key("segmentLength").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_26).into()),
        );
    }
    if let Some(var_27) = &input.segment_length_control {
        object.key("segmentLengthControl").string(var_27.as_str());
    }
    if let Some(var_28) = &input.stream_inf_resolution {
        object.key("streamInfResolution").string(var_28.as_str());
    }
    if let Some(var_29) = &input.target_duration_compatibility_mode {
        object.key("targetDurationCompatibilityMode").string(var_29.as_str());
    }
    if let Some(var_30) = &input.video_composition_offsets {
        object.key("videoCompositionOffsets").string(var_30.as_str());
    }
    if let Some(var_31) = &input.write_dash_manifest {
        object.key("writeDashManifest").string(var_31.as_str());
    }
    if let Some(var_32) = &input.write_hls_manifest {
        object.key("writeHlsManifest").string(var_32.as_str());
    }
    if let Some(var_33) = &input.write_segment_timeline_in_representation {
        object.key("writeSegmentTimelineInRepresentation").string(var_33.as_str());
    }
    Ok(())
}

pub(crate) fn de_cmaf_group_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CmafGroupSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CmafGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "additionalManifests" => {
                            builder = builder.set_additional_manifests(
                                crate::protocol_serde::shape_list_of_cmaf_additional_manifest::de_list_of_cmaf_additional_manifest(tokens)?,
                            );
                        }
                        "baseUrl" => {
                            builder = builder.set_base_url(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "clientCache" => {
                            builder = builder.set_client_cache(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafClientCache::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "codecSpecification" => {
                            builder = builder.set_codec_specification(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafCodecSpecification::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dashManifestStyle" => {
                            builder = builder.set_dash_manifest_style(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::DashManifestStyle::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "destination" => {
                            builder = builder.set_destination(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "destinationSettings" => {
                            builder =
                                builder.set_destination_settings(crate::protocol_serde::shape_destination_settings::de_destination_settings(tokens)?);
                        }
                        "encryption" => {
                            builder = builder.set_encryption(crate::protocol_serde::shape_cmaf_encryption_settings::de_cmaf_encryption_settings(
                                tokens,
                            )?);
                        }
                        "fragmentLength" => {
                            builder = builder.set_fragment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "imageBasedTrickPlay" => {
                            builder = builder.set_image_based_trick_play(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafImageBasedTrickPlay::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "imageBasedTrickPlaySettings" => {
                            builder = builder.set_image_based_trick_play_settings(
                                crate::protocol_serde::shape_cmaf_image_based_trick_play_settings::de_cmaf_image_based_trick_play_settings(tokens)?,
                            );
                        }
                        "manifestCompression" => {
                            builder = builder.set_manifest_compression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafManifestCompression::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "manifestDurationFormat" => {
                            builder = builder.set_manifest_duration_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafManifestDurationFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "minBufferTime" => {
                            builder = builder.set_min_buffer_time(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "minFinalSegmentLength" => {
                            builder = builder.set_min_final_segment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?.map(|v| v.to_f64_lossy()),
                            );
                        }
                        "mpdManifestBandwidthType" => {
                            builder = builder.set_mpd_manifest_bandwidth_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafMpdManifestBandwidthType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "mpdProfile" => {
                            builder = builder.set_mpd_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafMpdProfile::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ptsOffsetHandlingForBFrames" => {
                            builder = builder.set_pts_offset_handling_for_b_frames(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafPtsOffsetHandlingForBFrames::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "segmentControl" => {
                            builder = builder.set_segment_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafSegmentControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "segmentLength" => {
                            builder = builder.set_segment_length(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "segmentLengthControl" => {
                            builder = builder.set_segment_length_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafSegmentLengthControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "streamInfResolution" => {
                            builder = builder.set_stream_inf_resolution(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafStreamInfResolution::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "targetDurationCompatibilityMode" => {
                            builder = builder.set_target_duration_compatibility_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::CmafTargetDurationCompatibilityMode::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "videoCompositionOffsets" => {
                            builder = builder.set_video_composition_offsets(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafVideoCompositionOffsets::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "writeDashManifest" => {
                            builder = builder.set_write_dash_manifest(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafWriteDashManifest::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "writeHlsManifest" => {
                            builder = builder.set_write_hls_manifest(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CmafWriteHlsManifest::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "writeSegmentTimelineInRepresentation" => {
                            builder = builder.set_write_segment_timeline_in_representation(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::CmafWriteSegmentTimelineInRepresentation::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
