// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_xavc_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::XavcSettings,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.adaptive_quantization {
        object.key("adaptiveQuantization").string(var_1.as_str());
    }
    if let Some(var_2) = &input.entropy_encoding {
        object.key("entropyEncoding").string(var_2.as_str());
    }
    if let Some(var_3) = &input.framerate_control {
        object.key("framerateControl").string(var_3.as_str());
    }
    if let Some(var_4) = &input.framerate_conversion_algorithm {
        object.key("framerateConversionAlgorithm").string(var_4.as_str());
    }
    if let Some(var_5) = &input.framerate_denominator {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.framerate_numerator {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.per_frame_metrics {
        let mut array_8 = object.key("perFrameMetrics").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.profile {
        object.key("profile").string(var_10.as_str());
    }
    if let Some(var_11) = &input.slow_pal {
        object.key("slowPal").string(var_11.as_str());
    }
    if let Some(var_12) = &input.softness {
        object.key("softness").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.spatial_adaptive_quantization {
        object.key("spatialAdaptiveQuantization").string(var_13.as_str());
    }
    if let Some(var_14) = &input.temporal_adaptive_quantization {
        object.key("temporalAdaptiveQuantization").string(var_14.as_str());
    }
    if let Some(var_15) = &input.xavc4k_intra_cbg_profile_settings {
        #[allow(unused_mut)]
        let mut object_16 = object.key("xavc4kIntraCbgProfileSettings").start_object();
        crate::protocol_serde::shape_xavc4k_intra_cbg_profile_settings::ser_xavc4k_intra_cbg_profile_settings(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.xavc4k_intra_vbr_profile_settings {
        #[allow(unused_mut)]
        let mut object_18 = object.key("xavc4kIntraVbrProfileSettings").start_object();
        crate::protocol_serde::shape_xavc4k_intra_vbr_profile_settings::ser_xavc4k_intra_vbr_profile_settings(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.xavc4k_profile_settings {
        #[allow(unused_mut)]
        let mut object_20 = object.key("xavc4kProfileSettings").start_object();
        crate::protocol_serde::shape_xavc4k_profile_settings::ser_xavc4k_profile_settings(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.xavc_hd_intra_cbg_profile_settings {
        #[allow(unused_mut)]
        let mut object_22 = object.key("xavcHdIntraCbgProfileSettings").start_object();
        crate::protocol_serde::shape_xavc_hd_intra_cbg_profile_settings::ser_xavc_hd_intra_cbg_profile_settings(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.xavc_hd_profile_settings {
        #[allow(unused_mut)]
        let mut object_24 = object.key("xavcHdProfileSettings").start_object();
        crate::protocol_serde::shape_xavc_hd_profile_settings::ser_xavc_hd_profile_settings(&mut object_24, var_23)?;
        object_24.finish();
    }
    Ok(())
}

pub(crate) fn de_xavc_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::XavcSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::XavcSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "adaptiveQuantization" => {
                            builder = builder.set_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcAdaptiveQuantization::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "entropyEncoding" => {
                            builder = builder.set_entropy_encoding(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcEntropyEncoding::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateControl" => {
                            builder = builder.set_framerate_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcFramerateControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateConversionAlgorithm" => {
                            builder = builder.set_framerate_conversion_algorithm(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcFramerateConversionAlgorithm::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "framerateDenominator" => {
                            builder = builder.set_framerate_denominator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "framerateNumerator" => {
                            builder = builder.set_framerate_numerator(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "perFrameMetrics" => {
                            builder = builder.set_per_frame_metrics(
                                crate::protocol_serde::shape_list_of_frame_metric_type::de_list_of_frame_metric_type(tokens)?,
                            );
                        }
                        "profile" => {
                            builder = builder.set_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcProfile::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "slowPal" => {
                            builder = builder.set_slow_pal(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcSlowPal::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "softness" => {
                            builder = builder.set_softness(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "spatialAdaptiveQuantization" => {
                            builder = builder.set_spatial_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcSpatialAdaptiveQuantization::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "temporalAdaptiveQuantization" => {
                            builder = builder.set_temporal_adaptive_quantization(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::XavcTemporalAdaptiveQuantization::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "xavc4kIntraCbgProfileSettings" => {
                            builder = builder.set_xavc4k_intra_cbg_profile_settings(
                                crate::protocol_serde::shape_xavc4k_intra_cbg_profile_settings::de_xavc4k_intra_cbg_profile_settings(tokens)?,
                            );
                        }
                        "xavc4kIntraVbrProfileSettings" => {
                            builder = builder.set_xavc4k_intra_vbr_profile_settings(
                                crate::protocol_serde::shape_xavc4k_intra_vbr_profile_settings::de_xavc4k_intra_vbr_profile_settings(tokens)?,
                            );
                        }
                        "xavc4kProfileSettings" => {
                            builder = builder.set_xavc4k_profile_settings(
                                crate::protocol_serde::shape_xavc4k_profile_settings::de_xavc4k_profile_settings(tokens)?,
                            );
                        }
                        "xavcHdIntraCbgProfileSettings" => {
                            builder = builder.set_xavc_hd_intra_cbg_profile_settings(
                                crate::protocol_serde::shape_xavc_hd_intra_cbg_profile_settings::de_xavc_hd_intra_cbg_profile_settings(tokens)?,
                            );
                        }
                        "xavcHdProfileSettings" => {
                            builder = builder.set_xavc_hd_profile_settings(
                                crate::protocol_serde::shape_xavc_hd_profile_settings::de_xavc_hd_profile_settings(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
