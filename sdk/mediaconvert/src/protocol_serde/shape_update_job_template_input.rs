// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_job_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_job_template::UpdateJobTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.acceleration_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accelerationSettings").start_object();
        crate::protocol_serde::shape_acceleration_settings::ser_acceleration_settings(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.category {
        object.key("category").string(var_3.as_str());
    }
    if let Some(var_4) = &input.description {
        object.key("description").string(var_4.as_str());
    }
    if let Some(var_5) = &input.hop_destinations {
        let mut array_6 = object.key("hopDestinations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_hop_destination::ser_hop_destination(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.queue {
        object.key("queue").string(var_10.as_str());
    }
    if let Some(var_11) = &input.settings {
        #[allow(unused_mut)]
        let mut object_12 = object.key("settings").start_object();
        crate::protocol_serde::shape_job_template_settings::ser_job_template_settings(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.status_update_interval {
        object.key("statusUpdateInterval").string(var_13.as_str());
    }
    Ok(())
}
