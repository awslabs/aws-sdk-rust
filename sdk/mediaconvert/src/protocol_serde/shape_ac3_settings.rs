// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ac3_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Ac3Settings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.bitrate {
        object.key("bitrate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.bitstream_mode {
        object.key("bitstreamMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.coding_mode {
        object.key("codingMode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.dialnorm {
        object.key("dialnorm").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.dynamic_range_compression_line {
        object.key("dynamicRangeCompressionLine").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dynamic_range_compression_profile {
        object.key("dynamicRangeCompressionProfile").string(var_6.as_str());
    }
    if let Some(var_7) = &input.dynamic_range_compression_rf {
        object.key("dynamicRangeCompressionRf").string(var_7.as_str());
    }
    if let Some(var_8) = &input.lfe_filter {
        object.key("lfeFilter").string(var_8.as_str());
    }
    if let Some(var_9) = &input.metadata_control {
        object.key("metadataControl").string(var_9.as_str());
    }
    if let Some(var_10) = &input.sample_rate {
        object.key("sampleRate").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_ac3_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Ac3Settings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::Ac3SettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "bitrate" => {
                            builder = builder.set_bitrate(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "bitstreamMode" => {
                            builder = builder.set_bitstream_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3BitstreamMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "codingMode" => {
                            builder = builder.set_coding_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3CodingMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dialnorm" => {
                            builder = builder.set_dialnorm(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "dynamicRangeCompressionLine" => {
                            builder = builder.set_dynamic_range_compression_line(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3DynamicRangeCompressionLine::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "dynamicRangeCompressionProfile" => {
                            builder = builder.set_dynamic_range_compression_profile(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::Ac3DynamicRangeCompressionProfile::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "dynamicRangeCompressionRf" => {
                            builder = builder.set_dynamic_range_compression_rf(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3DynamicRangeCompressionRf::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "lfeFilter" => {
                            builder = builder.set_lfe_filter(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3LfeFilter::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "metadataControl" => {
                            builder = builder.set_metadata_control(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Ac3MetadataControl::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "sampleRate" => {
                            builder = builder.set_sample_rate(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
