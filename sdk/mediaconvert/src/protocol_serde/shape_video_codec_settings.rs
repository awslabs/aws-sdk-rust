// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_video_codec_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::VideoCodecSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.av1_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("av1Settings").start_object();
        crate::protocol_serde::shape_av1_settings::ser_av1_settings(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.avc_intra_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("avcIntraSettings").start_object();
        crate::protocol_serde::shape_avc_intra_settings::ser_avc_intra_settings(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.codec {
        object.key("codec").string(var_5.as_str());
    }
    if let Some(var_6) = &input.frame_capture_settings {
        #[allow(unused_mut)]
        let mut object_7 = object.key("frameCaptureSettings").start_object();
        crate::protocol_serde::shape_frame_capture_settings::ser_frame_capture_settings(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.h264_settings {
        #[allow(unused_mut)]
        let mut object_9 = object.key("h264Settings").start_object();
        crate::protocol_serde::shape_h264_settings::ser_h264_settings(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.h265_settings {
        #[allow(unused_mut)]
        let mut object_11 = object.key("h265Settings").start_object();
        crate::protocol_serde::shape_h265_settings::ser_h265_settings(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.mpeg2_settings {
        #[allow(unused_mut)]
        let mut object_13 = object.key("mpeg2Settings").start_object();
        crate::protocol_serde::shape_mpeg2_settings::ser_mpeg2_settings(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.prores_settings {
        #[allow(unused_mut)]
        let mut object_15 = object.key("proresSettings").start_object();
        crate::protocol_serde::shape_prores_settings::ser_prores_settings(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.vc3_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("vc3Settings").start_object();
        crate::protocol_serde::shape_vc3_settings::ser_vc3_settings(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.vp8_settings {
        #[allow(unused_mut)]
        let mut object_19 = object.key("vp8Settings").start_object();
        crate::protocol_serde::shape_vp8_settings::ser_vp8_settings(&mut object_19, var_18)?;
        object_19.finish();
    }
    if let Some(var_20) = &input.vp9_settings {
        #[allow(unused_mut)]
        let mut object_21 = object.key("vp9Settings").start_object();
        crate::protocol_serde::shape_vp9_settings::ser_vp9_settings(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.xavc_settings {
        #[allow(unused_mut)]
        let mut object_23 = object.key("xavcSettings").start_object();
        crate::protocol_serde::shape_xavc_settings::ser_xavc_settings(&mut object_23, var_22)?;
        object_23.finish();
    }
    Ok(())
}

pub(crate) fn de_video_codec_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::VideoCodecSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VideoCodecSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "av1Settings" => {
                            builder = builder.set_av1_settings(crate::protocol_serde::shape_av1_settings::de_av1_settings(tokens)?);
                        }
                        "avcIntraSettings" => {
                            builder = builder.set_avc_intra_settings(crate::protocol_serde::shape_avc_intra_settings::de_avc_intra_settings(tokens)?);
                        }
                        "codec" => {
                            builder = builder.set_codec(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VideoCodec::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "frameCaptureSettings" => {
                            builder = builder
                                .set_frame_capture_settings(crate::protocol_serde::shape_frame_capture_settings::de_frame_capture_settings(tokens)?);
                        }
                        "h264Settings" => {
                            builder = builder.set_h264_settings(crate::protocol_serde::shape_h264_settings::de_h264_settings(tokens)?);
                        }
                        "h265Settings" => {
                            builder = builder.set_h265_settings(crate::protocol_serde::shape_h265_settings::de_h265_settings(tokens)?);
                        }
                        "mpeg2Settings" => {
                            builder = builder.set_mpeg2_settings(crate::protocol_serde::shape_mpeg2_settings::de_mpeg2_settings(tokens)?);
                        }
                        "proresSettings" => {
                            builder = builder.set_prores_settings(crate::protocol_serde::shape_prores_settings::de_prores_settings(tokens)?);
                        }
                        "vc3Settings" => {
                            builder = builder.set_vc3_settings(crate::protocol_serde::shape_vc3_settings::de_vc3_settings(tokens)?);
                        }
                        "vp8Settings" => {
                            builder = builder.set_vp8_settings(crate::protocol_serde::shape_vp8_settings::de_vp8_settings(tokens)?);
                        }
                        "vp9Settings" => {
                            builder = builder.set_vp9_settings(crate::protocol_serde::shape_vp9_settings::de_vp9_settings(tokens)?);
                        }
                        "xavcSettings" => {
                            builder = builder.set_xavc_settings(crate::protocol_serde::shape_xavc_settings::de_xavc_settings(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
