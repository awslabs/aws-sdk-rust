// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_job::CreateJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.acceleration_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("accelerationSettings").start_object();
        crate::protocol_serde::shape_acceleration_settings::ser_acceleration_settings(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.billing_tags_source {
        object.key("billingTagsSource").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_request_token {
        object.key("clientRequestToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.hop_destinations {
        let mut array_6 = object.key("hopDestinations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_hop_destination::ser_hop_destination(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.job_template {
        object.key("jobTemplate").string(var_9.as_str());
    }
    if let Some(var_10) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.queue {
        object.key("queue").string(var_11.as_str());
    }
    if let Some(var_12) = &input.role {
        object.key("role").string(var_12.as_str());
    }
    if let Some(var_13) = &input.settings {
        #[allow(unused_mut)]
        let mut object_14 = object.key("settings").start_object();
        crate::protocol_serde::shape_job_settings::ser_job_settings(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.simulate_reserved_queue {
        object.key("simulateReservedQueue").string(var_15.as_str());
    }
    if let Some(var_16) = &input.status_update_interval {
        object.key("statusUpdateInterval").string(var_16.as_str());
    }
    if let Some(var_17) = &input.tags {
        #[allow(unused_mut)]
        let mut object_18 = object.key("tags").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    if let Some(var_21) = &input.user_metadata {
        #[allow(unused_mut)]
        let mut object_22 = object.key("userMetadata").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}
