// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_job<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Job>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::JobBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "accelerationSettings" => {
                            builder = builder
                                .set_acceleration_settings(crate::protocol_serde::shape_acceleration_settings::de_acceleration_settings(tokens)?);
                        }
                        "accelerationStatus" => {
                            builder = builder.set_acceleration_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AccelerationStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "arn" => {
                            builder = builder.set_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "billingTagsSource" => {
                            builder = builder.set_billing_tags_source(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::BillingTagsSource::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "clientRequestToken" => {
                            builder = builder.set_client_request_token(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "createdAt" => {
                            builder = builder.set_created_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "currentPhase" => {
                            builder = builder.set_current_phase(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JobPhase::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "errorCode" => {
                            builder = builder.set_error_code(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "errorMessage" => {
                            builder = builder.set_error_message(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "hopDestinations" => {
                            builder = builder
                                .set_hop_destinations(crate::protocol_serde::shape_list_of_hop_destination::de_list_of_hop_destination(tokens)?);
                        }
                        "id" => {
                            builder = builder.set_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "jobPercentComplete" => {
                            builder = builder.set_job_percent_complete(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "jobTemplate" => {
                            builder = builder.set_job_template(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "messages" => {
                            builder = builder.set_messages(crate::protocol_serde::shape_job_messages::de_job_messages(tokens)?);
                        }
                        "outputGroupDetails" => {
                            builder = builder.set_output_group_details(
                                crate::protocol_serde::shape_list_of_output_group_detail::de_list_of_output_group_detail(tokens)?,
                            );
                        }
                        "priority" => {
                            builder = builder.set_priority(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "queue" => {
                            builder = builder.set_queue(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "queueTransitions" => {
                            builder = builder.set_queue_transitions(
                                crate::protocol_serde::shape_list_of_queue_transition::de_list_of_queue_transition(tokens)?,
                            );
                        }
                        "retryCount" => {
                            builder = builder.set_retry_count(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "role" => {
                            builder = builder.set_role(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "settings" => {
                            builder = builder.set_settings(crate::protocol_serde::shape_job_settings::de_job_settings(tokens)?);
                        }
                        "simulateReservedQueue" => {
                            builder = builder.set_simulate_reserved_queue(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SimulateReservedQueue::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "status" => {
                            builder = builder.set_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::JobStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "statusUpdateInterval" => {
                            builder = builder.set_status_update_interval(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::StatusUpdateInterval::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "timing" => {
                            builder = builder.set_timing(crate::protocol_serde::shape_timing::de_timing(tokens)?);
                        }
                        "userMetadata" => {
                            builder = builder.set_user_metadata(crate::protocol_serde::shape_map_of_string::de_map_of_string(tokens)?);
                        }
                        "warnings" => {
                            builder = builder.set_warnings(crate::protocol_serde::shape_list_of_warning_group::de_list_of_warning_group(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::job_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
