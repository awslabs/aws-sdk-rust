// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_color_corrector(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ColorCorrector,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.brightness {
        object.key("brightness").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.clip_limits {
        #[allow(unused_mut)]
        let mut object_3 = object.key("clipLimits").start_object();
        crate::protocol_serde::shape_clip_limits::ser_clip_limits(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.color_space_conversion {
        object.key("colorSpaceConversion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.contrast {
        object.key("contrast").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.hdr10_metadata {
        #[allow(unused_mut)]
        let mut object_7 = object.key("hdr10Metadata").start_object();
        crate::protocol_serde::shape_hdr10_metadata::ser_hdr10_metadata(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.hdr_to_sdr_tone_mapper {
        object.key("hdrToSdrToneMapper").string(var_8.as_str());
    }
    if let Some(var_9) = &input.hue {
        object.key("hue").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.sample_range_conversion {
        object.key("sampleRangeConversion").string(var_10.as_str());
    }
    if let Some(var_11) = &input.saturation {
        object.key("saturation").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.sdr_reference_white_level {
        object.key("sdrReferenceWhiteLevel").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_color_corrector<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ColorCorrector>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ColorCorrectorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "brightness" => {
                            builder = builder.set_brightness(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "clipLimits" => {
                            builder = builder.set_clip_limits(crate::protocol_serde::shape_clip_limits::de_clip_limits(tokens)?);
                        }
                        "colorSpaceConversion" => {
                            builder = builder.set_color_space_conversion(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ColorSpaceConversion::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "contrast" => {
                            builder = builder.set_contrast(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "hdr10Metadata" => {
                            builder = builder.set_hdr10_metadata(crate::protocol_serde::shape_hdr10_metadata::de_hdr10_metadata(tokens)?);
                        }
                        "hdrToSdrToneMapper" => {
                            builder = builder.set_hdr_to_sdr_tone_mapper(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::HdrToSdrToneMapper::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hue" => {
                            builder = builder.set_hue(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "sampleRangeConversion" => {
                            builder = builder.set_sample_range_conversion(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SampleRangeConversion::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "saturation" => {
                            builder = builder.set_saturation(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "sdrReferenceWhiteLevel" => {
                            builder = builder.set_sdr_reference_white_level(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
