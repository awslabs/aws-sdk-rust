// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_color_corrector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ColorCorrector,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.brightness != 0 {
        object.key("brightness").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.brightness).into()),
        );
    }
    if let Some(var_1) = &input.clip_limits {
        #[allow(unused_mut)]
        let mut object_2 = object.key("clipLimits").start_object();
        crate::protocol_serde::shape_clip_limits::ser_clip_limits(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.color_space_conversion {
        object.key("colorSpaceConversion").string(var_3.as_str());
    }
    if input.contrast != 0 {
        object.key("contrast").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.contrast).into()),
        );
    }
    if let Some(var_4) = &input.hdr10_metadata {
        #[allow(unused_mut)]
        let mut object_5 = object.key("hdr10Metadata").start_object();
        crate::protocol_serde::shape_hdr10_metadata::ser_hdr10_metadata(&mut object_5, var_4)?;
        object_5.finish();
    }
    if input.hue != 0 {
        object.key("hue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.hue).into()),
        );
    }
    if let Some(var_6) = &input.sample_range_conversion {
        object.key("sampleRangeConversion").string(var_6.as_str());
    }
    if input.saturation != 0 {
        object.key("saturation").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.saturation).into()),
        );
    }
    if input.sdr_reference_white_level != 0 {
        object.key("sdrReferenceWhiteLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sdr_reference_white_level).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_color_corrector<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ColorCorrector>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ColorCorrectorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "brightness" => {
                                builder = builder.set_brightness(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "clipLimits" => {
                                builder = builder.set_clip_limits(
                                    crate::protocol_serde::shape_clip_limits::de_clip_limits(
                                        tokens,
                                    )?,
                                );
                            }
                            "colorSpaceConversion" => {
                                builder = builder.set_color_space_conversion(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ColorSpaceConversion::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "contrast" => {
                                builder = builder.set_contrast(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "hdr10Metadata" => {
                                builder = builder.set_hdr10_metadata(
                                    crate::protocol_serde::shape_hdr10_metadata::de_hdr10_metadata(
                                        tokens,
                                    )?,
                                );
                            }
                            "hue" => {
                                builder = builder.set_hue(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "sampleRangeConversion" => {
                                builder = builder.set_sample_range_conversion(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::SampleRangeConversion::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "saturation" => {
                                builder = builder.set_saturation(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "sdrReferenceWhiteLevel" => {
                                builder = builder.set_sdr_reference_white_level(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
