// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_mpd_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MpdSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.accessibility_caption_hints {
        object
            .key("accessibilityCaptionHints")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.audio_duration {
        object.key("audioDuration").string(var_2.as_str());
    }
    if let Some(var_3) = &input.caption_container_type {
        object.key("captionContainerType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.klv_metadata {
        object.key("klvMetadata").string(var_4.as_str());
    }
    if let Some(var_5) = &input.manifest_metadata_signaling {
        object
            .key("manifestMetadataSignaling")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.scte35_esam {
        object.key("scte35Esam").string(var_6.as_str());
    }
    if let Some(var_7) = &input.scte35_source {
        object.key("scte35Source").string(var_7.as_str());
    }
    if let Some(var_8) = &input.timed_metadata {
        object.key("timedMetadata").string(var_8.as_str());
    }
    if let Some(var_9) = &input.timed_metadata_box_version {
        object.key("timedMetadataBoxVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.timed_metadata_scheme_id_uri {
        object
            .key("timedMetadataSchemeIdUri")
            .string(var_10.as_str());
    }
    if let Some(var_11) = &input.timed_metadata_value {
        object.key("timedMetadataValue").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_mpd_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::MpdSettings>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MpdSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "accessibilityCaptionHints" => {
                                builder = builder.set_accessibility_caption_hints(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdAccessibilityCaptionHints::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "audioDuration" => {
                                builder = builder.set_audio_duration(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdAudioDuration::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "captionContainerType" => {
                                builder = builder.set_caption_container_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdCaptionContainerType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "klvMetadata" => {
                                builder = builder.set_klv_metadata(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MpdKlvMetadata::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "manifestMetadataSignaling" => {
                                builder = builder.set_manifest_metadata_signaling(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdManifestMetadataSignaling::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "scte35Esam" => {
                                builder = builder.set_scte35_esam(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MpdScte35Esam::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "scte35Source" => {
                                builder = builder.set_scte35_source(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdScte35Source::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timedMetadata" => {
                                builder = builder.set_timed_metadata(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdTimedMetadata::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timedMetadataBoxVersion" => {
                                builder = builder.set_timed_metadata_box_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::MpdTimedMetadataBoxVersion::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "timedMetadataSchemeIdUri" => {
                                builder = builder.set_timed_metadata_scheme_id_uri(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "timedMetadataValue" => {
                                builder = builder.set_timed_metadata_value(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
