// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_output_group_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::OutputGroupSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cmaf_group_settings {
        #[allow(unused_mut)]
        let mut object_2 = object.key("cmafGroupSettings").start_object();
        crate::protocol_serde::shape_cmaf_group_settings::ser_cmaf_group_settings(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.dash_iso_group_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("dashIsoGroupSettings").start_object();
        crate::protocol_serde::shape_dash_iso_group_settings::ser_dash_iso_group_settings(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.file_group_settings {
        #[allow(unused_mut)]
        let mut object_6 = object.key("fileGroupSettings").start_object();
        crate::protocol_serde::shape_file_group_settings::ser_file_group_settings(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.hls_group_settings {
        #[allow(unused_mut)]
        let mut object_8 = object.key("hlsGroupSettings").start_object();
        crate::protocol_serde::shape_hls_group_settings::ser_hls_group_settings(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.ms_smooth_group_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("msSmoothGroupSettings").start_object();
        crate::protocol_serde::shape_ms_smooth_group_settings::ser_ms_smooth_group_settings(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.r#type {
        object.key("type").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_output_group_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::OutputGroupSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OutputGroupSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "cmafGroupSettings" => {
                                builder = builder.set_cmaf_group_settings(
                                    crate::protocol_serde::shape_cmaf_group_settings::de_cmaf_group_settings(tokens)?
                                );
                            }
                            "dashIsoGroupSettings" => {
                                builder = builder.set_dash_iso_group_settings(
                                    crate::protocol_serde::shape_dash_iso_group_settings::de_dash_iso_group_settings(tokens)?
                                );
                            }
                            "fileGroupSettings" => {
                                builder = builder.set_file_group_settings(
                                    crate::protocol_serde::shape_file_group_settings::de_file_group_settings(tokens)?
                                );
                            }
                            "hlsGroupSettings" => {
                                builder = builder.set_hls_group_settings(
                                    crate::protocol_serde::shape_hls_group_settings::de_hls_group_settings(tokens)?
                                );
                            }
                            "msSmoothGroupSettings" => {
                                builder = builder.set_ms_smooth_group_settings(
                                    crate::protocol_serde::shape_ms_smooth_group_settings::de_ms_smooth_group_settings(tokens)?
                                );
                            }
                            "type" => {
                                builder = builder.set_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::OutputGroupType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
