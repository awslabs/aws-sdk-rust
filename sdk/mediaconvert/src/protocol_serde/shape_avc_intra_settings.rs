// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_avc_intra_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AvcIntraSettings,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.avc_intra_class {
        object.key("avcIntraClass").string(var_1.as_str());
    }
    if let Some(var_2) = &input.avc_intra_uhd_settings {
        #[allow(unused_mut)]
        let mut object_3 = object.key("avcIntraUhdSettings").start_object();
        crate::protocol_serde::shape_avc_intra_uhd_settings::ser_avc_intra_uhd_settings(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.framerate_control {
        object.key("framerateControl").string(var_4.as_str());
    }
    if let Some(var_5) = &input.framerate_conversion_algorithm {
        object
            .key("framerateConversionAlgorithm")
            .string(var_5.as_str());
    }
    if input.framerate_denominator != 0 {
        object.key("framerateDenominator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_denominator).into()),
        );
    }
    if input.framerate_numerator != 0 {
        object.key("framerateNumerator").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.framerate_numerator).into()),
        );
    }
    if let Some(var_6) = &input.interlace_mode {
        object.key("interlaceMode").string(var_6.as_str());
    }
    if let Some(var_7) = &input.scan_type_conversion_mode {
        object.key("scanTypeConversionMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.slow_pal {
        object.key("slowPal").string(var_8.as_str());
    }
    if let Some(var_9) = &input.telecine {
        object.key("telecine").string(var_9.as_str());
    }
    Ok(())
}

pub(crate) fn de_avc_intra_settings<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AvcIntraSettings>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AvcIntraSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "avcIntraClass" => {
                                builder = builder.set_avc_intra_class(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::AvcIntraClass::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "avcIntraUhdSettings" => {
                                builder = builder.set_avc_intra_uhd_settings(
                                    crate::protocol_serde::shape_avc_intra_uhd_settings::de_avc_intra_uhd_settings(tokens)?
                                );
                            }
                            "framerateControl" => {
                                builder = builder.set_framerate_control(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AvcIntraFramerateControl::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "framerateConversionAlgorithm" => {
                                builder = builder.set_framerate_conversion_algorithm(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?.map(|s|
                                        s.to_unescaped().map(|u|
                                            crate::types::AvcIntraFramerateConversionAlgorithm::from(u.as_ref())
                                        )
                                    ).transpose()?
                                );
                            }
                            "framerateDenominator" => {
                                builder = builder.set_framerate_denominator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "framerateNumerator" => {
                                builder = builder.set_framerate_numerator(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "interlaceMode" => {
                                builder = builder.set_interlace_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AvcIntraInterlaceMode::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "scanTypeConversionMode" => {
                                builder = builder.set_scan_type_conversion_mode(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AvcIntraScanTypeConversionMode::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "slowPal" => {
                                builder = builder.set_slow_pal(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AvcIntraSlowPal::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "telecine" => {
                                builder = builder.set_telecine(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::AvcIntraTelecine::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
