// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_video_selector(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::VideoSelector,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.alpha_behavior {
        object.key("alphaBehavior").string(var_1.as_str());
    }
    if let Some(var_2) = &input.color_space {
        object.key("colorSpace").string(var_2.as_str());
    }
    if let Some(var_3) = &input.color_space_usage {
        object.key("colorSpaceUsage").string(var_3.as_str());
    }
    if let Some(var_4) = &input.embedded_timecode_override {
        object.key("embeddedTimecodeOverride").string(var_4.as_str());
    }
    if let Some(var_5) = &input.hdr10_metadata {
        #[allow(unused_mut)]
        let mut object_6 = object.key("hdr10Metadata").start_object();
        crate::protocol_serde::shape_hdr10_metadata::ser_hdr10_metadata(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.pad_video {
        object.key("padVideo").string(var_7.as_str());
    }
    if let Some(var_8) = &input.pid {
        object.key("pid").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.program_number {
        object.key("programNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.rotate {
        object.key("rotate").string(var_10.as_str());
    }
    if let Some(var_11) = &input.sample_range {
        object.key("sampleRange").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_video_selector<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::VideoSelector>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::VideoSelectorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "alphaBehavior" => {
                            builder = builder.set_alpha_behavior(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AlphaBehavior::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "colorSpace" => {
                            builder = builder.set_color_space(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ColorSpace::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "colorSpaceUsage" => {
                            builder = builder.set_color_space_usage(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ColorSpaceUsage::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "embeddedTimecodeOverride" => {
                            builder = builder.set_embedded_timecode_override(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EmbeddedTimecodeOverride::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "hdr10Metadata" => {
                            builder = builder.set_hdr10_metadata(crate::protocol_serde::shape_hdr10_metadata::de_hdr10_metadata(tokens)?);
                        }
                        "padVideo" => {
                            builder = builder.set_pad_video(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PadVideo::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "pid" => {
                            builder = builder.set_pid(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "programNumber" => {
                            builder = builder.set_program_number(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "rotate" => {
                            builder = builder.set_rotate(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputRotate::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "sampleRange" => {
                            builder = builder.set_sample_range(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::InputSampleRange::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
