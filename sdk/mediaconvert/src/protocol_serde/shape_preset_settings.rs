// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_preset_settings(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PresetSettings,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.audio_descriptions {
        let mut array_2 = object.key("audioDescriptions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_audio_description::ser_audio_description(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.caption_descriptions {
        let mut array_6 = object.key("captionDescriptions").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_caption_description_preset::ser_caption_description_preset(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.container_settings {
        #[allow(unused_mut)]
        let mut object_10 = object.key("containerSettings").start_object();
        crate::protocol_serde::shape_container_settings::ser_container_settings(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.video_description {
        #[allow(unused_mut)]
        let mut object_12 = object.key("videoDescription").start_object();
        crate::protocol_serde::shape_video_description::ser_video_description(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}

pub(crate) fn de_preset_settings<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::PresetSettings>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PresetSettingsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "audioDescriptions" => {
                            builder = builder.set_audio_descriptions(
                                crate::protocol_serde::shape_list_of_audio_description::de_list_of_audio_description(tokens)?,
                            );
                        }
                        "captionDescriptions" => {
                            builder = builder.set_caption_descriptions(
                                crate::protocol_serde::shape_list_of_caption_description_preset::de_list_of_caption_description_preset(tokens)?,
                            );
                        }
                        "containerSettings" => {
                            builder = builder.set_container_settings(crate::protocol_serde::shape_container_settings::de_container_settings(tokens)?);
                        }
                        "videoDescription" => {
                            builder = builder.set_video_description(crate::protocol_serde::shape_video_description::de_video_description(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
