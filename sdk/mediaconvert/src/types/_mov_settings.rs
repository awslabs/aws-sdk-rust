// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// These settings relate to your QuickTime MOV output container.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MovSettings {
    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    #[doc(hidden)]
    pub clap_atom: std::option::Option<crate::types::MovClapAtom>,
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    #[doc(hidden)]
    pub cslg_atom: std::option::Option<crate::types::MovCslgAtom>,
    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    #[doc(hidden)]
    pub mpeg2_four_cc_control: std::option::Option<crate::types::MovMpeg2FourCcControl>,
    /// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
    #[doc(hidden)]
    pub padding_control: std::option::Option<crate::types::MovPaddingControl>,
    /// Always keep the default value (SELF_CONTAINED) for this setting.
    #[doc(hidden)]
    pub reference: std::option::Option<crate::types::MovReference>,
}
impl MovSettings {
    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    pub fn clap_atom(&self) -> std::option::Option<&crate::types::MovClapAtom> {
        self.clap_atom.as_ref()
    }
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    pub fn cslg_atom(&self) -> std::option::Option<&crate::types::MovCslgAtom> {
        self.cslg_atom.as_ref()
    }
    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    pub fn mpeg2_four_cc_control(
        &self,
    ) -> std::option::Option<&crate::types::MovMpeg2FourCcControl> {
        self.mpeg2_four_cc_control.as_ref()
    }
    /// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
    pub fn padding_control(&self) -> std::option::Option<&crate::types::MovPaddingControl> {
        self.padding_control.as_ref()
    }
    /// Always keep the default value (SELF_CONTAINED) for this setting.
    pub fn reference(&self) -> std::option::Option<&crate::types::MovReference> {
        self.reference.as_ref()
    }
}
impl MovSettings {
    /// Creates a new builder-style object to manufacture [`MovSettings`](crate::types::MovSettings).
    pub fn builder() -> crate::types::builders::MovSettingsBuilder {
        crate::types::builders::MovSettingsBuilder::default()
    }
}

/// A builder for [`MovSettings`](crate::types::MovSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MovSettingsBuilder {
    pub(crate) clap_atom: std::option::Option<crate::types::MovClapAtom>,
    pub(crate) cslg_atom: std::option::Option<crate::types::MovCslgAtom>,
    pub(crate) mpeg2_four_cc_control: std::option::Option<crate::types::MovMpeg2FourCcControl>,
    pub(crate) padding_control: std::option::Option<crate::types::MovPaddingControl>,
    pub(crate) reference: std::option::Option<crate::types::MovReference>,
}
impl MovSettingsBuilder {
    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    pub fn clap_atom(mut self, input: crate::types::MovClapAtom) -> Self {
        self.clap_atom = Some(input);
        self
    }
    /// When enabled, include 'clap' atom if appropriate for the video output settings.
    pub fn set_clap_atom(mut self, input: std::option::Option<crate::types::MovClapAtom>) -> Self {
        self.clap_atom = input;
        self
    }
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    pub fn cslg_atom(mut self, input: crate::types::MovCslgAtom) -> Self {
        self.cslg_atom = Some(input);
        self
    }
    /// When enabled, file composition times will start at zero, composition times in the 'ctts' (composition time to sample) box for B-frames will be negative, and a 'cslg' (composition shift least greatest) box will be included per 14496-1 amendment 1. This improves compatibility with Apple players and tools.
    pub fn set_cslg_atom(mut self, input: std::option::Option<crate::types::MovCslgAtom>) -> Self {
        self.cslg_atom = input;
        self
    }
    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    pub fn mpeg2_four_cc_control(mut self, input: crate::types::MovMpeg2FourCcControl) -> Self {
        self.mpeg2_four_cc_control = Some(input);
        self
    }
    /// When set to XDCAM, writes MPEG2 video streams into the QuickTime file using XDCAM fourcc codes. This increases compatibility with Apple editors and players, but may decrease compatibility with other players. Only applicable when the video codec is MPEG2.
    pub fn set_mpeg2_four_cc_control(
        mut self,
        input: std::option::Option<crate::types::MovMpeg2FourCcControl>,
    ) -> Self {
        self.mpeg2_four_cc_control = input;
        self
    }
    /// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
    pub fn padding_control(mut self, input: crate::types::MovPaddingControl) -> Self {
        self.padding_control = Some(input);
        self
    }
    /// To make this output compatible with Omenon, keep the default value, OMNEON. Unless you need Omneon compatibility, set this value to NONE. When you keep the default value, OMNEON, MediaConvert increases the length of the edit list atom. This might cause file rejections when a recipient of the output file doesn't expct this extra padding.
    pub fn set_padding_control(
        mut self,
        input: std::option::Option<crate::types::MovPaddingControl>,
    ) -> Self {
        self.padding_control = input;
        self
    }
    /// Always keep the default value (SELF_CONTAINED) for this setting.
    pub fn reference(mut self, input: crate::types::MovReference) -> Self {
        self.reference = Some(input);
        self
    }
    /// Always keep the default value (SELF_CONTAINED) for this setting.
    pub fn set_reference(mut self, input: std::option::Option<crate::types::MovReference>) -> Self {
        self.reference = input;
        self
    }
    /// Consumes the builder and constructs a [`MovSettings`](crate::types::MovSettings).
    pub fn build(self) -> crate::types::MovSettings {
        crate::types::MovSettings {
            clap_atom: self.clap_atom,
            cslg_atom: self.cslg_atom,
            mpeg2_four_cc_control: self.mpeg2_four_cc_control,
            padding_control: self.padding_control,
            reference: self.reference,
        }
    }
}
