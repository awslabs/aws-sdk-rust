// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// These settings relate to the fragmented MP4 container for the segments in your CMAF outputs.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CmfcSettings {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    #[doc(hidden)]
    pub audio_duration: std::option::Option<crate::types::CmfcAudioDuration>,
    /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets (audioRenditionSets).
    #[doc(hidden)]
    pub audio_group_id: std::option::Option<std::string::String>,
    /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1,audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID (AudioGroupId) for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
    #[doc(hidden)]
    pub audio_rendition_sets: std::option::Option<std::string::String>,
    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    #[doc(hidden)]
    pub audio_track_type: std::option::Option<crate::types::CmfcAudioTrackType>,
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    #[doc(hidden)]
    pub descriptive_video_service_flag:
        std::option::Option<crate::types::CmfcDescriptiveVideoServiceFlag>,
    /// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    #[doc(hidden)]
    pub i_frame_only_manifest: std::option::Option<crate::types::CmfcIFrameOnlyManifest>,
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    #[doc(hidden)]
    pub klv_metadata: std::option::Option<crate::types::CmfcKlvMetadata>,
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    #[doc(hidden)]
    pub manifest_metadata_signaling:
        std::option::Option<crate::types::CmfcManifestMetadataSignaling>,
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    #[doc(hidden)]
    pub scte35_esam: std::option::Option<crate::types::CmfcScte35Esam>,
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    #[doc(hidden)]
    pub scte35_source: std::option::Option<crate::types::CmfcScte35Source>,
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    #[doc(hidden)]
    pub timed_metadata: std::option::Option<crate::types::CmfcTimedMetadata>,
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_box_version: std::option::Option<crate::types::CmfcTimedMetadataBoxVersion>,
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_scheme_id_uri: std::option::Option<std::string::String>,
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_value: std::option::Option<std::string::String>,
}
impl CmfcSettings {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(&self) -> std::option::Option<&crate::types::CmfcAudioDuration> {
        self.audio_duration.as_ref()
    }
    /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets (audioRenditionSets).
    pub fn audio_group_id(&self) -> std::option::Option<&str> {
        self.audio_group_id.as_deref()
    }
    /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1,audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID (AudioGroupId) for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
    pub fn audio_rendition_sets(&self) -> std::option::Option<&str> {
        self.audio_rendition_sets.as_deref()
    }
    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    pub fn audio_track_type(&self) -> std::option::Option<&crate::types::CmfcAudioTrackType> {
        self.audio_track_type.as_ref()
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn descriptive_video_service_flag(
        &self,
    ) -> std::option::Option<&crate::types::CmfcDescriptiveVideoServiceFlag> {
        self.descriptive_video_service_flag.as_ref()
    }
    /// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    pub fn i_frame_only_manifest(
        &self,
    ) -> std::option::Option<&crate::types::CmfcIFrameOnlyManifest> {
        self.i_frame_only_manifest.as_ref()
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn klv_metadata(&self) -> std::option::Option<&crate::types::CmfcKlvMetadata> {
        self.klv_metadata.as_ref()
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn manifest_metadata_signaling(
        &self,
    ) -> std::option::Option<&crate::types::CmfcManifestMetadataSignaling> {
        self.manifest_metadata_signaling.as_ref()
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn scte35_esam(&self) -> std::option::Option<&crate::types::CmfcScte35Esam> {
        self.scte35_esam.as_ref()
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn scte35_source(&self) -> std::option::Option<&crate::types::CmfcScte35Source> {
        self.scte35_source.as_ref()
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn timed_metadata(&self) -> std::option::Option<&crate::types::CmfcTimedMetadata> {
        self.timed_metadata.as_ref()
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_box_version(
        &self,
    ) -> std::option::Option<&crate::types::CmfcTimedMetadataBoxVersion> {
        self.timed_metadata_box_version.as_ref()
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_scheme_id_uri(&self) -> std::option::Option<&str> {
        self.timed_metadata_scheme_id_uri.as_deref()
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_value(&self) -> std::option::Option<&str> {
        self.timed_metadata_value.as_deref()
    }
}
impl CmfcSettings {
    /// Creates a new builder-style object to manufacture [`CmfcSettings`](crate::types::CmfcSettings).
    pub fn builder() -> crate::types::builders::CmfcSettingsBuilder {
        crate::types::builders::CmfcSettingsBuilder::default()
    }
}

/// A builder for [`CmfcSettings`](crate::types::CmfcSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CmfcSettingsBuilder {
    pub(crate) audio_duration: std::option::Option<crate::types::CmfcAudioDuration>,
    pub(crate) audio_group_id: std::option::Option<std::string::String>,
    pub(crate) audio_rendition_sets: std::option::Option<std::string::String>,
    pub(crate) audio_track_type: std::option::Option<crate::types::CmfcAudioTrackType>,
    pub(crate) descriptive_video_service_flag:
        std::option::Option<crate::types::CmfcDescriptiveVideoServiceFlag>,
    pub(crate) i_frame_only_manifest: std::option::Option<crate::types::CmfcIFrameOnlyManifest>,
    pub(crate) klv_metadata: std::option::Option<crate::types::CmfcKlvMetadata>,
    pub(crate) manifest_metadata_signaling:
        std::option::Option<crate::types::CmfcManifestMetadataSignaling>,
    pub(crate) scte35_esam: std::option::Option<crate::types::CmfcScte35Esam>,
    pub(crate) scte35_source: std::option::Option<crate::types::CmfcScte35Source>,
    pub(crate) timed_metadata: std::option::Option<crate::types::CmfcTimedMetadata>,
    pub(crate) timed_metadata_box_version:
        std::option::Option<crate::types::CmfcTimedMetadataBoxVersion>,
    pub(crate) timed_metadata_scheme_id_uri: std::option::Option<std::string::String>,
    pub(crate) timed_metadata_value: std::option::Option<std::string::String>,
}
impl CmfcSettingsBuilder {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(mut self, input: crate::types::CmfcAudioDuration) -> Self {
        self.audio_duration = Some(input);
        self
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn set_audio_duration(
        mut self,
        input: std::option::Option<crate::types::CmfcAudioDuration>,
    ) -> Self {
        self.audio_duration = input;
        self
    }
    /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets (audioRenditionSets).
    pub fn audio_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.audio_group_id = Some(input.into());
        self
    }
    /// Specify the audio rendition group for this audio rendition. Specify up to one value for each audio output in your output group. This value appears in your HLS parent manifest in the EXT-X-MEDIA tag of TYPE=AUDIO, as the value for the GROUP-ID attribute. For example, if you specify "audio_aac_1" for Audio group ID, it appears in your manifest like this: #EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="audio_aac_1". Related setting: To associate the rendition group that this audio track belongs to with a video rendition, include the same value that you provide here for that video output's setting Audio rendition sets (audioRenditionSets).
    pub fn set_audio_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.audio_group_id = input;
        self
    }
    /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1,audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID (AudioGroupId) for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
    pub fn audio_rendition_sets(mut self, input: impl Into<std::string::String>) -> Self {
        self.audio_rendition_sets = Some(input.into());
        self
    }
    /// List the audio rendition groups that you want included with this video rendition. Use a comma-separated list. For example, say you want to include the audio rendition groups that have the audio group IDs "audio_aac_1" and "audio_dolby". Then you would specify this value: "audio_aac_1,audio_dolby". Related setting: The rendition groups that you include in your comma-separated list should all match values that you specify in the setting Audio group ID (AudioGroupId) for audio renditions in the same output group as this video rendition. Default behavior: If you don't specify anything here and for Audio group ID, MediaConvert puts each audio variant in its own audio rendition group and associates it with every video variant. Each value in your list appears in your HLS parent manifest in the EXT-X-STREAM-INF tag as the value for the AUDIO attribute. To continue the previous example, say that the file name for the child manifest for your video rendition is "amazing_video_1.m3u8". Then, in your parent manifest, each value will appear on separate lines, like this: #EXT-X-STREAM-INF:AUDIO="audio_aac_1"... amazing_video_1.m3u8 #EXT-X-STREAM-INF:AUDIO="audio_dolby"... amazing_video_1.m3u8
    pub fn set_audio_rendition_sets(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.audio_rendition_sets = input;
        self
    }
    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    pub fn audio_track_type(mut self, input: crate::types::CmfcAudioTrackType) -> Self {
        self.audio_track_type = Some(input);
        self
    }
    /// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
    pub fn set_audio_track_type(
        mut self,
        input: std::option::Option<crate::types::CmfcAudioTrackType>,
    ) -> Self {
        self.audio_track_type = input;
        self
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn descriptive_video_service_flag(
        mut self,
        input: crate::types::CmfcDescriptiveVideoServiceFlag,
    ) -> Self {
        self.descriptive_video_service_flag = Some(input);
        self
    }
    /// Specify whether to flag this audio track as descriptive video service (DVS) in your HLS parent manifest. When you choose Flag (FLAG), MediaConvert includes the parameter CHARACTERISTICS="public.accessibility.describes-video" in the EXT-X-MEDIA entry for this track. When you keep the default choice, Don't flag (DONT_FLAG), MediaConvert leaves this parameter out. The DVS flag can help with accessibility on Apple devices. For more information, see the Apple documentation.
    pub fn set_descriptive_video_service_flag(
        mut self,
        input: std::option::Option<crate::types::CmfcDescriptiveVideoServiceFlag>,
    ) -> Self {
        self.descriptive_video_service_flag = input;
        self
    }
    /// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    pub fn i_frame_only_manifest(mut self, input: crate::types::CmfcIFrameOnlyManifest) -> Self {
        self.i_frame_only_manifest = Some(input);
        self
    }
    /// Choose Include (INCLUDE) to have MediaConvert generate an HLS child manifest that lists only the I-frames for this rendition, in addition to your regular manifest for this rendition. You might use this manifest as part of a workflow that creates preview functions for your video. MediaConvert adds both the I-frame only child manifest and the regular child manifest to the parent manifest. When you don't need the I-frame only child manifest, keep the default value Exclude (EXCLUDE).
    pub fn set_i_frame_only_manifest(
        mut self,
        input: std::option::Option<crate::types::CmfcIFrameOnlyManifest>,
    ) -> Self {
        self.i_frame_only_manifest = input;
        self
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn klv_metadata(mut self, input: crate::types::CmfcKlvMetadata) -> Self {
        self.klv_metadata = Some(input);
        self
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn set_klv_metadata(
        mut self,
        input: std::option::Option<crate::types::CmfcKlvMetadata>,
    ) -> Self {
        self.klv_metadata = input;
        self
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn manifest_metadata_signaling(
        mut self,
        input: crate::types::CmfcManifestMetadataSignaling,
    ) -> Self {
        self.manifest_metadata_signaling = Some(input);
        self
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn set_manifest_metadata_signaling(
        mut self,
        input: std::option::Option<crate::types::CmfcManifestMetadataSignaling>,
    ) -> Self {
        self.manifest_metadata_signaling = input;
        self
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn scte35_esam(mut self, input: crate::types::CmfcScte35Esam) -> Self {
        self.scte35_esam = Some(input);
        self
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn set_scte35_esam(
        mut self,
        input: std::option::Option<crate::types::CmfcScte35Esam>,
    ) -> Self {
        self.scte35_esam = input;
        self
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn scte35_source(mut self, input: crate::types::CmfcScte35Source) -> Self {
        self.scte35_source = Some(input);
        self
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn set_scte35_source(
        mut self,
        input: std::option::Option<crate::types::CmfcScte35Source>,
    ) -> Self {
        self.scte35_source = input;
        self
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn timed_metadata(mut self, input: crate::types::CmfcTimedMetadata) -> Self {
        self.timed_metadata = Some(input);
        self
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn set_timed_metadata(
        mut self,
        input: std::option::Option<crate::types::CmfcTimedMetadata>,
    ) -> Self {
        self.timed_metadata = input;
        self
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_box_version(
        mut self,
        input: crate::types::CmfcTimedMetadataBoxVersion,
    ) -> Self {
        self.timed_metadata_box_version = Some(input);
        self
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_box_version(
        mut self,
        input: std::option::Option<crate::types::CmfcTimedMetadataBoxVersion>,
    ) -> Self {
        self.timed_metadata_box_version = input;
        self
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_scheme_id_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.timed_metadata_scheme_id_uri = Some(input.into());
        self
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_scheme_id_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.timed_metadata_scheme_id_uri = input;
        self
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.timed_metadata_value = Some(input.into());
        self
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.timed_metadata_value = input;
        self
    }
    /// Consumes the builder and constructs a [`CmfcSettings`](crate::types::CmfcSettings).
    pub fn build(self) -> crate::types::CmfcSettings {
        crate::types::CmfcSettings {
            audio_duration: self.audio_duration,
            audio_group_id: self.audio_group_id,
            audio_rendition_sets: self.audio_rendition_sets,
            audio_track_type: self.audio_track_type,
            descriptive_video_service_flag: self.descriptive_video_service_flag,
            i_frame_only_manifest: self.i_frame_only_manifest,
            klv_metadata: self.klv_metadata,
            manifest_metadata_signaling: self.manifest_metadata_signaling,
            scte35_esam: self.scte35_esam,
            scte35_source: self.scte35_source,
            timed_metadata: self.timed_metadata,
            timed_metadata_box_version: self.timed_metadata_box_version,
            timed_metadata_scheme_id_uri: self.timed_metadata_scheme_id_uri,
            timed_metadata_value: self.timed_metadata_value,
        }
    }
}
