// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Codec`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let codec = unimplemented!();
/// match codec {
///     Codec::Aac => { /* ... */ },
///     Codec::Ac3 => { /* ... */ },
///     Codec::Av1 => { /* ... */ },
///     Codec::Avc => { /* ... */ },
///     Codec::C608 => { /* ... */ },
///     Codec::C708 => { /* ... */ },
///     Codec::Eac3 => { /* ... */ },
///     Codec::Flac => { /* ... */ },
///     Codec::Hevc => { /* ... */ },
///     Codec::Jpeg2000 => { /* ... */ },
///     Codec::Mjpeg => { /* ... */ },
///     Codec::Mp3 => { /* ... */ },
///     Codec::Mp4V => { /* ... */ },
///     Codec::Mpeg1 => { /* ... */ },
///     Codec::Mpeg2 => { /* ... */ },
///     Codec::Opus => { /* ... */ },
///     Codec::Pcm => { /* ... */ },
///     Codec::Prores => { /* ... */ },
///     Codec::Qtrle => { /* ... */ },
///     Codec::Theora => { /* ... */ },
///     Codec::UnknownValue => { /* ... */ },
///     Codec::Vfw => { /* ... */ },
///     Codec::Vorbis => { /* ... */ },
///     Codec::Vp8 => { /* ... */ },
///     Codec::Vp9 => { /* ... */ },
///     Codec::Webvtt => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `codec` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Codec::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Codec::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Codec::NewFeature` is defined.
/// Specifically, when `codec` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Codec::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
///
/// _Note: `Codec::Unknown` has been renamed to `::UnknownValue`._
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Codec {
    #[allow(missing_docs)] // documentation missing in model
    Aac,
    #[allow(missing_docs)] // documentation missing in model
    Ac3,
    #[allow(missing_docs)] // documentation missing in model
    Av1,
    #[allow(missing_docs)] // documentation missing in model
    Avc,
    #[allow(missing_docs)] // documentation missing in model
    C608,
    #[allow(missing_docs)] // documentation missing in model
    C708,
    #[allow(missing_docs)] // documentation missing in model
    Eac3,
    #[allow(missing_docs)] // documentation missing in model
    Flac,
    #[allow(missing_docs)] // documentation missing in model
    Hevc,
    #[allow(missing_docs)] // documentation missing in model
    Jpeg2000,
    #[allow(missing_docs)] // documentation missing in model
    Mjpeg,
    #[allow(missing_docs)] // documentation missing in model
    Mp3,
    #[allow(missing_docs)] // documentation missing in model
    Mp4V,
    #[allow(missing_docs)] // documentation missing in model
    Mpeg1,
    #[allow(missing_docs)] // documentation missing in model
    Mpeg2,
    #[allow(missing_docs)] // documentation missing in model
    Opus,
    #[allow(missing_docs)] // documentation missing in model
    Pcm,
    #[allow(missing_docs)] // documentation missing in model
    Prores,
    #[allow(missing_docs)] // documentation missing in model
    Qtrle,
    #[allow(missing_docs)] // documentation missing in model
    Theora,
    ///
    /// _Note: `::Unknown` has been renamed to `::UnknownValue`._
    UnknownValue,
    #[allow(missing_docs)] // documentation missing in model
    Vfw,
    #[allow(missing_docs)] // documentation missing in model
    Vorbis,
    #[allow(missing_docs)] // documentation missing in model
    Vp8,
    #[allow(missing_docs)] // documentation missing in model
    Vp9,
    #[allow(missing_docs)] // documentation missing in model
    Webvtt,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Codec {
    fn from(s: &str) -> Self {
        match s {
            "AAC" => Codec::Aac,
            "AC3" => Codec::Ac3,
            "AV1" => Codec::Av1,
            "AVC" => Codec::Avc,
            "C608" => Codec::C608,
            "C708" => Codec::C708,
            "EAC3" => Codec::Eac3,
            "FLAC" => Codec::Flac,
            "HEVC" => Codec::Hevc,
            "JPEG2000" => Codec::Jpeg2000,
            "MJPEG" => Codec::Mjpeg,
            "MP3" => Codec::Mp3,
            "MP4V" => Codec::Mp4V,
            "MPEG1" => Codec::Mpeg1,
            "MPEG2" => Codec::Mpeg2,
            "OPUS" => Codec::Opus,
            "PCM" => Codec::Pcm,
            "PRORES" => Codec::Prores,
            "QTRLE" => Codec::Qtrle,
            "THEORA" => Codec::Theora,
            "UNKNOWN" => Codec::UnknownValue,
            "VFW" => Codec::Vfw,
            "VORBIS" => Codec::Vorbis,
            "VP8" => Codec::Vp8,
            "VP9" => Codec::Vp9,
            "WEBVTT" => Codec::Webvtt,
            other => Codec::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Codec {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Codec::from(s))
    }
}
impl Codec {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Codec::Aac => "AAC",
            Codec::Ac3 => "AC3",
            Codec::Av1 => "AV1",
            Codec::Avc => "AVC",
            Codec::C608 => "C608",
            Codec::C708 => "C708",
            Codec::Eac3 => "EAC3",
            Codec::Flac => "FLAC",
            Codec::Hevc => "HEVC",
            Codec::Jpeg2000 => "JPEG2000",
            Codec::Mjpeg => "MJPEG",
            Codec::Mp3 => "MP3",
            Codec::Mp4V => "MP4V",
            Codec::Mpeg1 => "MPEG1",
            Codec::Mpeg2 => "MPEG2",
            Codec::Opus => "OPUS",
            Codec::Pcm => "PCM",
            Codec::Prores => "PRORES",
            Codec::Qtrle => "QTRLE",
            Codec::Theora => "THEORA",
            Codec::UnknownValue => "UNKNOWN",
            Codec::Vfw => "VFW",
            Codec::Vorbis => "VORBIS",
            Codec::Vp8 => "VP8",
            Codec::Vp9 => "VP9",
            Codec::Webvtt => "WEBVTT",
            Codec::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AAC", "AC3", "AV1", "AVC", "C608", "C708", "EAC3", "FLAC", "HEVC", "JPEG2000", "MJPEG", "MP3", "MP4V", "MPEG1", "MPEG2", "OPUS", "PCM",
            "PRORES", "QTRLE", "THEORA", "UNKNOWN", "VFW", "VORBIS", "VP8", "VP9", "WEBVTT",
        ]
    }
}
impl ::std::convert::AsRef<str> for Codec {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Codec {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Codec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Codec::Aac => write!(f, "AAC"),
            Codec::Ac3 => write!(f, "AC3"),
            Codec::Av1 => write!(f, "AV1"),
            Codec::Avc => write!(f, "AVC"),
            Codec::C608 => write!(f, "C608"),
            Codec::C708 => write!(f, "C708"),
            Codec::Eac3 => write!(f, "EAC3"),
            Codec::Flac => write!(f, "FLAC"),
            Codec::Hevc => write!(f, "HEVC"),
            Codec::Jpeg2000 => write!(f, "JPEG2000"),
            Codec::Mjpeg => write!(f, "MJPEG"),
            Codec::Mp3 => write!(f, "MP3"),
            Codec::Mp4V => write!(f, "MP4V"),
            Codec::Mpeg1 => write!(f, "MPEG1"),
            Codec::Mpeg2 => write!(f, "MPEG2"),
            Codec::Opus => write!(f, "OPUS"),
            Codec::Pcm => write!(f, "PCM"),
            Codec::Prores => write!(f, "PRORES"),
            Codec::Qtrle => write!(f, "QTRLE"),
            Codec::Theora => write!(f, "THEORA"),
            Codec::UnknownValue => write!(f, "UNKNOWN"),
            Codec::Vfw => write!(f, "VFW"),
            Codec::Vorbis => write!(f, "VORBIS"),
            Codec::Vp8 => write!(f, "VP8"),
            Codec::Vp9 => write!(f, "VP9"),
            Codec::Webvtt => write!(f, "WEBVTT"),
            Codec::Unknown(value) => write!(f, "{value}"),
        }
    }
}
