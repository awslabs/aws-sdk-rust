// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to WebVTT captions. WebVTT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebvttDestinationSettings {
    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub accessibility: ::std::option::Option<crate::types::WebvttAccessibilitySubs>,
    /// Specify how MediaConvert writes style information in your output WebVTT captions. To use the available style, color, and position information from your input captions: Choose Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Choose Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Keep the default value, Disabled. Or leave blank. To use the available style, color, and position information from your input captions, while merging cues with identical time ranges: Choose merge. This setting can help prevent positioning overlaps for certain players that expect a single single cue for any given time range.
    pub style_passthrough: ::std::option::Option<crate::types::WebvttStylePassthrough>,
}
impl WebvttDestinationSettings {
    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn accessibility(&self) -> ::std::option::Option<&crate::types::WebvttAccessibilitySubs> {
        self.accessibility.as_ref()
    }
    /// Specify how MediaConvert writes style information in your output WebVTT captions. To use the available style, color, and position information from your input captions: Choose Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Choose Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Keep the default value, Disabled. Or leave blank. To use the available style, color, and position information from your input captions, while merging cues with identical time ranges: Choose merge. This setting can help prevent positioning overlaps for certain players that expect a single single cue for any given time range.
    pub fn style_passthrough(&self) -> ::std::option::Option<&crate::types::WebvttStylePassthrough> {
        self.style_passthrough.as_ref()
    }
}
impl WebvttDestinationSettings {
    /// Creates a new builder-style object to manufacture [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
    pub fn builder() -> crate::types::builders::WebvttDestinationSettingsBuilder {
        crate::types::builders::WebvttDestinationSettingsBuilder::default()
    }
}

/// A builder for [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct WebvttDestinationSettingsBuilder {
    pub(crate) accessibility: ::std::option::Option<crate::types::WebvttAccessibilitySubs>,
    pub(crate) style_passthrough: ::std::option::Option<crate::types::WebvttStylePassthrough>,
}
impl WebvttDestinationSettingsBuilder {
    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn accessibility(mut self, input: crate::types::WebvttAccessibilitySubs) -> Self {
        self.accessibility = ::std::option::Option::Some(input);
        self
    }
    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn set_accessibility(mut self, input: ::std::option::Option<crate::types::WebvttAccessibilitySubs>) -> Self {
        self.accessibility = input;
        self
    }
    /// If the WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn get_accessibility(&self) -> &::std::option::Option<crate::types::WebvttAccessibilitySubs> {
        &self.accessibility
    }
    /// Specify how MediaConvert writes style information in your output WebVTT captions. To use the available style, color, and position information from your input captions: Choose Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Choose Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Keep the default value, Disabled. Or leave blank. To use the available style, color, and position information from your input captions, while merging cues with identical time ranges: Choose merge. This setting can help prevent positioning overlaps for certain players that expect a single single cue for any given time range.
    pub fn style_passthrough(mut self, input: crate::types::WebvttStylePassthrough) -> Self {
        self.style_passthrough = ::std::option::Option::Some(input);
        self
    }
    /// Specify how MediaConvert writes style information in your output WebVTT captions. To use the available style, color, and position information from your input captions: Choose Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Choose Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Keep the default value, Disabled. Or leave blank. To use the available style, color, and position information from your input captions, while merging cues with identical time ranges: Choose merge. This setting can help prevent positioning overlaps for certain players that expect a single single cue for any given time range.
    pub fn set_style_passthrough(mut self, input: ::std::option::Option<crate::types::WebvttStylePassthrough>) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Specify how MediaConvert writes style information in your output WebVTT captions. To use the available style, color, and position information from your input captions: Choose Enabled. MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Choose Strict. MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Keep the default value, Disabled. Or leave blank. To use the available style, color, and position information from your input captions, while merging cues with identical time ranges: Choose merge. This setting can help prevent positioning overlaps for certain players that expect a single single cue for any given time range.
    pub fn get_style_passthrough(&self) -> &::std::option::Option<crate::types::WebvttStylePassthrough> {
        &self.style_passthrough
    }
    /// Consumes the builder and constructs a [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
    pub fn build(self) -> crate::types::WebvttDestinationSettings {
        crate::types::WebvttDestinationSettings {
            accessibility: self.accessibility,
            style_passthrough: self.style_passthrough,
        }
    }
}
