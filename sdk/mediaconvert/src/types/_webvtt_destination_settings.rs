// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to WebVTT captions. WebVTT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to WebVTT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WebvttDestinationSettings {
    /// Set Accessibility subtitles to Enabled if the ISMC or WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing. When you enable this feature, MediaConvert adds the following attributes under EXT-X-MEDIA in the HLS or CMAF manifest for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". Keep the default value, Disabled, if the captions track is not intended to provide such accessibility. MediaConvert will not add the above attributes.
    #[doc(hidden)]
    pub accessibility: std::option::Option<crate::types::WebvttAccessibilitySubs>,
    /// To use the available style, color, and position information from your input captions: Set Style passthrough (stylePassthrough) to Enabled (ENABLED). MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict (STRICT). MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled (DISABLED), or leave blank.
    #[doc(hidden)]
    pub style_passthrough: std::option::Option<crate::types::WebvttStylePassthrough>,
}
impl WebvttDestinationSettings {
    /// Set Accessibility subtitles to Enabled if the ISMC or WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing. When you enable this feature, MediaConvert adds the following attributes under EXT-X-MEDIA in the HLS or CMAF manifest for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". Keep the default value, Disabled, if the captions track is not intended to provide such accessibility. MediaConvert will not add the above attributes.
    pub fn accessibility(&self) -> std::option::Option<&crate::types::WebvttAccessibilitySubs> {
        self.accessibility.as_ref()
    }
    /// To use the available style, color, and position information from your input captions: Set Style passthrough (stylePassthrough) to Enabled (ENABLED). MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict (STRICT). MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled (DISABLED), or leave blank.
    pub fn style_passthrough(&self) -> std::option::Option<&crate::types::WebvttStylePassthrough> {
        self.style_passthrough.as_ref()
    }
}
impl WebvttDestinationSettings {
    /// Creates a new builder-style object to manufacture [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
    pub fn builder() -> crate::types::builders::WebvttDestinationSettingsBuilder {
        crate::types::builders::WebvttDestinationSettingsBuilder::default()
    }
}

/// A builder for [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WebvttDestinationSettingsBuilder {
    pub(crate) accessibility: std::option::Option<crate::types::WebvttAccessibilitySubs>,
    pub(crate) style_passthrough: std::option::Option<crate::types::WebvttStylePassthrough>,
}
impl WebvttDestinationSettingsBuilder {
    /// Set Accessibility subtitles to Enabled if the ISMC or WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing. When you enable this feature, MediaConvert adds the following attributes under EXT-X-MEDIA in the HLS or CMAF manifest for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". Keep the default value, Disabled, if the captions track is not intended to provide such accessibility. MediaConvert will not add the above attributes.
    pub fn accessibility(mut self, input: crate::types::WebvttAccessibilitySubs) -> Self {
        self.accessibility = Some(input);
        self
    }
    /// Set Accessibility subtitles to Enabled if the ISMC or WebVTT captions track is intended to provide accessibility for people who are deaf or hard of hearing. When you enable this feature, MediaConvert adds the following attributes under EXT-X-MEDIA in the HLS or CMAF manifest for this track: CHARACTERISTICS="public.accessibility.describes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". Keep the default value, Disabled, if the captions track is not intended to provide such accessibility. MediaConvert will not add the above attributes.
    pub fn set_accessibility(
        mut self,
        input: std::option::Option<crate::types::WebvttAccessibilitySubs>,
    ) -> Self {
        self.accessibility = input;
        self
    }
    /// To use the available style, color, and position information from your input captions: Set Style passthrough (stylePassthrough) to Enabled (ENABLED). MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict (STRICT). MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled (DISABLED), or leave blank.
    pub fn style_passthrough(mut self, input: crate::types::WebvttStylePassthrough) -> Self {
        self.style_passthrough = Some(input);
        self
    }
    /// To use the available style, color, and position information from your input captions: Set Style passthrough (stylePassthrough) to Enabled (ENABLED). MediaConvert uses default settings when style and position information is missing from your input captions. To recreate the input captions exactly: Set Style passthrough to Strict (STRICT). MediaConvert automatically applies timing adjustments, including adjustments for frame rate conversion, ad avails, and input clipping. Your input captions format must be WebVTT. To ignore the style and position information from your input captions and use simplified output captions: Set Style passthrough to Disabled (DISABLED), or leave blank.
    pub fn set_style_passthrough(
        mut self,
        input: std::option::Option<crate::types::WebvttStylePassthrough>,
    ) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Consumes the builder and constructs a [`WebvttDestinationSettings`](crate::types::WebvttDestinationSettings).
    pub fn build(self) -> crate::types::WebvttDestinationSettings {
        crate::types::WebvttDestinationSettings {
            accessibility: self.accessibility,
            style_passthrough: self.style_passthrough,
        }
    }
}
