// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `HlsAudioTrackType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let hlsaudiotracktype = unimplemented!();
/// match hlsaudiotracktype {
///     HlsAudioTrackType::AlternateAudioAutoSelect => { /* ... */ },
///     HlsAudioTrackType::AlternateAudioAutoSelectDefault => { /* ... */ },
///     HlsAudioTrackType::AlternateAudioNotAutoSelect => { /* ... */ },
///     HlsAudioTrackType::AudioOnlyVariantStream => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `hlsaudiotracktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `HlsAudioTrackType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `HlsAudioTrackType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `HlsAudioTrackType::NewFeature` is defined.
/// Specifically, when `hlsaudiotracktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `HlsAudioTrackType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Four types of audio-only tracks are supported: Audio-Only Variant Stream The client can play back this audio-only stream instead of video in low-bandwidth scenarios. Represented as an EXT-X-STREAM-INF in the HLS manifest. Alternate Audio, Auto Select, Default Alternate rendition that the client should try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=YES, AUTOSELECT=YES Alternate Audio, Auto Select, Not Default Alternate rendition that the client may try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=YES Alternate Audio, not Auto Select Alternate rendition that the client will not try to play back by default. Represented as an EXT-X-MEDIA in the HLS manifest with DEFAULT=NO, AUTOSELECT=NO
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum HlsAudioTrackType {
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioAutoSelect,
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioAutoSelectDefault,
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioNotAutoSelect,
    #[allow(missing_docs)] // documentation missing in model
    AudioOnlyVariantStream,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for HlsAudioTrackType {
    fn from(s: &str) -> Self {
        match s {
            "ALTERNATE_AUDIO_AUTO_SELECT" => HlsAudioTrackType::AlternateAudioAutoSelect,
            "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT" => {
                HlsAudioTrackType::AlternateAudioAutoSelectDefault
            }
            "ALTERNATE_AUDIO_NOT_AUTO_SELECT" => HlsAudioTrackType::AlternateAudioNotAutoSelect,
            "AUDIO_ONLY_VARIANT_STREAM" => HlsAudioTrackType::AudioOnlyVariantStream,
            other => {
                HlsAudioTrackType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for HlsAudioTrackType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(HlsAudioTrackType::from(s))
    }
}
impl HlsAudioTrackType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            HlsAudioTrackType::AlternateAudioAutoSelect => "ALTERNATE_AUDIO_AUTO_SELECT",
            HlsAudioTrackType::AlternateAudioAutoSelectDefault => {
                "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            }
            HlsAudioTrackType::AlternateAudioNotAutoSelect => "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
            HlsAudioTrackType::AudioOnlyVariantStream => "AUDIO_ONLY_VARIANT_STREAM",
            HlsAudioTrackType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ALTERNATE_AUDIO_AUTO_SELECT",
            "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
            "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
            "AUDIO_ONLY_VARIANT_STREAM",
        ]
    }
}
impl AsRef<str> for HlsAudioTrackType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
