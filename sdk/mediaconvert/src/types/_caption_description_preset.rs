// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Caption Description for preset
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptionDescriptionPreset {
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    #[doc(hidden)]
    pub custom_language_code: std::option::Option<std::string::String>,
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    #[doc(hidden)]
    pub destination_settings: std::option::Option<crate::types::CaptionDestinationSettings>,
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::LanguageCode>,
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    #[doc(hidden)]
    pub language_description: std::option::Option<std::string::String>,
}
impl CaptionDescriptionPreset {
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    pub fn custom_language_code(&self) -> std::option::Option<&str> {
        self.custom_language_code.as_deref()
    }
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    pub fn destination_settings(
        &self,
    ) -> std::option::Option<&crate::types::CaptionDestinationSettings> {
        self.destination_settings.as_ref()
    }
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    pub fn language_code(&self) -> std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    pub fn language_description(&self) -> std::option::Option<&str> {
        self.language_description.as_deref()
    }
}
impl CaptionDescriptionPreset {
    /// Creates a new builder-style object to manufacture [`CaptionDescriptionPreset`](crate::types::CaptionDescriptionPreset).
    pub fn builder() -> crate::types::builders::CaptionDescriptionPresetBuilder {
        crate::types::builders::CaptionDescriptionPresetBuilder::default()
    }
}

/// A builder for [`CaptionDescriptionPreset`](crate::types::CaptionDescriptionPreset).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptionDescriptionPresetBuilder {
    pub(crate) custom_language_code: std::option::Option<std::string::String>,
    pub(crate) destination_settings: std::option::Option<crate::types::CaptionDestinationSettings>,
    pub(crate) language_code: std::option::Option<crate::types::LanguageCode>,
    pub(crate) language_description: std::option::Option<std::string::String>,
}
impl CaptionDescriptionPresetBuilder {
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    pub fn custom_language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_language_code = Some(input.into());
        self
    }
    /// Specify the language for this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information when automatically selecting the font script for rendering the captions text. For all outputs, you can use an ISO 639-2 or ISO 639-3 code. For streaming outputs, you can also use any other code in the full RFC-5646 specification. Streaming outputs are those that are in one of the following output groups: CMAF, DASH ISO, Apple HLS, or Microsoft Smooth Streaming.
    pub fn set_custom_language_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_language_code = input;
        self
    }
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    pub fn destination_settings(mut self, input: crate::types::CaptionDestinationSettings) -> Self {
        self.destination_settings = Some(input);
        self
    }
    /// Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    pub fn set_destination_settings(
        mut self,
        input: std::option::Option<crate::types::CaptionDestinationSettings>,
    ) -> Self {
        self.destination_settings = input;
        self
    }
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// Specify the language of this captions output track. For most captions output formats, the encoder puts this language information in the output captions metadata. If your output captions format is DVB-Sub or Burn in, the encoder uses this language information to choose the font language for rendering the captions text.
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::LanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    pub fn language_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.language_description = Some(input.into());
        self
    }
    /// Specify a label for this set of output captions. For example, "English", "Director commentary", or "track_2". For streaming outputs, MediaConvert passes this information into destination manifests for display on the end-viewer's player device. For outputs in other output groups, the service ignores this setting.
    pub fn set_language_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.language_description = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptionDescriptionPreset`](crate::types::CaptionDescriptionPreset).
    pub fn build(self) -> crate::types::CaptionDescriptionPreset {
        crate::types::CaptionDescriptionPreset {
            custom_language_code: self.custom_language_code,
            destination_settings: self.destination_settings,
            language_code: self.language_code,
            language_description: self.language_description,
        }
    }
}
