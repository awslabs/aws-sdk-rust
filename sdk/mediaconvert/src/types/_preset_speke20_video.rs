// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `PresetSpeke20Video`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let presetspeke20video = unimplemented!();
/// match presetspeke20video {
///     PresetSpeke20Video::PresetVideo1 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo2 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo3 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo4 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo5 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo6 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo7 => { /* ... */ },
///     PresetSpeke20Video::PresetVideo8 => { /* ... */ },
///     PresetSpeke20Video::Shared => { /* ... */ },
///     PresetSpeke20Video::Unencrypted => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `presetspeke20video` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `PresetSpeke20Video::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `PresetSpeke20Video::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `PresetSpeke20Video::NewFeature` is defined.
/// Specifically, when `presetspeke20video` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `PresetSpeke20Video::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify which SPEKE version 2.0 video preset MediaConvert uses to request content keys from your SPEKE server. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/drm-content-speke-v2-presets.html To encrypt to your video outputs, choose from the following: Video preset 1, Video preset 2, Video preset 3, Video preset 4, Video preset 5, Video preset 6, Video preset 7, or Video preset 8. To encrypt your video outputs, using the same content key for both your video and audio outputs: Choose Shared. When you do, you must also set SPEKE v2.0 audio preset to Shared. To not encrypt your video outputs: Choose Unencrypted. When you do, to encrypt your audio outputs, you must also specify a SPEKE v2.0 audio preset (other than Shared or Unencrypted).
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum PresetSpeke20Video {
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo1,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo2,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo3,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo4,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo5,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo6,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo7,
    #[allow(missing_docs)] // documentation missing in model
    PresetVideo8,
    #[allow(missing_docs)] // documentation missing in model
    Shared,
    #[allow(missing_docs)] // documentation missing in model
    Unencrypted,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for PresetSpeke20Video {
    fn from(s: &str) -> Self {
        match s {
            "PRESET_VIDEO_1" => PresetSpeke20Video::PresetVideo1,
            "PRESET_VIDEO_2" => PresetSpeke20Video::PresetVideo2,
            "PRESET_VIDEO_3" => PresetSpeke20Video::PresetVideo3,
            "PRESET_VIDEO_4" => PresetSpeke20Video::PresetVideo4,
            "PRESET_VIDEO_5" => PresetSpeke20Video::PresetVideo5,
            "PRESET_VIDEO_6" => PresetSpeke20Video::PresetVideo6,
            "PRESET_VIDEO_7" => PresetSpeke20Video::PresetVideo7,
            "PRESET_VIDEO_8" => PresetSpeke20Video::PresetVideo8,
            "SHARED" => PresetSpeke20Video::Shared,
            "UNENCRYPTED" => PresetSpeke20Video::Unencrypted,
            other => PresetSpeke20Video::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for PresetSpeke20Video {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(PresetSpeke20Video::from(s))
    }
}
impl PresetSpeke20Video {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            PresetSpeke20Video::PresetVideo1 => "PRESET_VIDEO_1",
            PresetSpeke20Video::PresetVideo2 => "PRESET_VIDEO_2",
            PresetSpeke20Video::PresetVideo3 => "PRESET_VIDEO_3",
            PresetSpeke20Video::PresetVideo4 => "PRESET_VIDEO_4",
            PresetSpeke20Video::PresetVideo5 => "PRESET_VIDEO_5",
            PresetSpeke20Video::PresetVideo6 => "PRESET_VIDEO_6",
            PresetSpeke20Video::PresetVideo7 => "PRESET_VIDEO_7",
            PresetSpeke20Video::PresetVideo8 => "PRESET_VIDEO_8",
            PresetSpeke20Video::Shared => "SHARED",
            PresetSpeke20Video::Unencrypted => "UNENCRYPTED",
            PresetSpeke20Video::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "PRESET_VIDEO_1",
            "PRESET_VIDEO_2",
            "PRESET_VIDEO_3",
            "PRESET_VIDEO_4",
            "PRESET_VIDEO_5",
            "PRESET_VIDEO_6",
            "PRESET_VIDEO_7",
            "PRESET_VIDEO_8",
            "SHARED",
            "UNENCRYPTED",
        ]
    }
}
impl ::std::convert::AsRef<str> for PresetSpeke20Video {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl PresetSpeke20Video {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for PresetSpeke20Video {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            PresetSpeke20Video::PresetVideo1 => write!(f, "PRESET_VIDEO_1"),
            PresetSpeke20Video::PresetVideo2 => write!(f, "PRESET_VIDEO_2"),
            PresetSpeke20Video::PresetVideo3 => write!(f, "PRESET_VIDEO_3"),
            PresetSpeke20Video::PresetVideo4 => write!(f, "PRESET_VIDEO_4"),
            PresetSpeke20Video::PresetVideo5 => write!(f, "PRESET_VIDEO_5"),
            PresetSpeke20Video::PresetVideo6 => write!(f, "PRESET_VIDEO_6"),
            PresetSpeke20Video::PresetVideo7 => write!(f, "PRESET_VIDEO_7"),
            PresetSpeke20Video::PresetVideo8 => write!(f, "PRESET_VIDEO_8"),
            PresetSpeke20Video::Shared => write!(f, "SHARED"),
            PresetSpeke20Video::Unencrypted => write!(f, "UNENCRYPTED"),
            PresetSpeke20Video::Unknown(value) => write!(f, "{}", value),
        }
    }
}
