// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Optional. Configuration for a destination queue to which the job can hop once a customer-defined minimum wait time has passed.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HopDestination {
    /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
    #[doc(hidden)]
    pub priority: i32,
    /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
    #[doc(hidden)]
    pub queue: std::option::Option<std::string::String>,
    /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 1440 minutes, inclusive.
    #[doc(hidden)]
    pub wait_minutes: i32,
}
impl HopDestination {
    /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
    pub fn priority(&self) -> i32 {
        self.priority
    }
    /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
    pub fn queue(&self) -> std::option::Option<&str> {
        self.queue.as_deref()
    }
    /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 1440 minutes, inclusive.
    pub fn wait_minutes(&self) -> i32 {
        self.wait_minutes
    }
}
impl HopDestination {
    /// Creates a new builder-style object to manufacture [`HopDestination`](crate::types::HopDestination).
    pub fn builder() -> crate::types::builders::HopDestinationBuilder {
        crate::types::builders::HopDestinationBuilder::default()
    }
}

/// A builder for [`HopDestination`](crate::types::HopDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HopDestinationBuilder {
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) queue: std::option::Option<std::string::String>,
    pub(crate) wait_minutes: std::option::Option<i32>,
}
impl HopDestinationBuilder {
    /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// Optional. When you set up a job to use queue hopping, you can specify a different relative priority for the job in the destination queue. If you don't specify, the relative priority will remain the same as in the previous queue.
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
    pub fn queue(mut self, input: impl Into<std::string::String>) -> Self {
        self.queue = Some(input.into());
        self
    }
    /// Optional unless the job is submitted on the default queue. When you set up a job to use queue hopping, you can specify a destination queue. This queue cannot be the original queue to which the job is submitted. If the original queue isn't the default queue and you don't specify the destination queue, the job will move to the default queue.
    pub fn set_queue(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.queue = input;
        self
    }
    /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 1440 minutes, inclusive.
    pub fn wait_minutes(mut self, input: i32) -> Self {
        self.wait_minutes = Some(input);
        self
    }
    /// Required for setting up a job to use queue hopping. Minimum wait time in minutes until the job can hop to the destination queue. Valid range is 1 to 1440 minutes, inclusive.
    pub fn set_wait_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.wait_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`HopDestination`](crate::types::HopDestination).
    pub fn build(self) -> crate::types::HopDestination {
        crate::types::HopDestination {
            priority: self.priority.unwrap_or_default(),
            queue: self.queue,
            wait_minutes: self.wait_minutes.unwrap_or_default(),
        }
    }
}
