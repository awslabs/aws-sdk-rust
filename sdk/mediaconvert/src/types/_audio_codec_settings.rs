// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioCodecSettings {
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    #[doc(hidden)]
    pub aac_settings: std::option::Option<crate::types::AacSettings>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AC3.
    #[doc(hidden)]
    pub ac3_settings: std::option::Option<crate::types::Ac3Settings>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AIFF.
    #[doc(hidden)]
    pub aiff_settings: std::option::Option<crate::types::AiffSettings>,
    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    #[doc(hidden)]
    pub codec: std::option::Option<crate::types::AudioCodec>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3_ATMOS.
    #[doc(hidden)]
    pub eac3_atmos_settings: std::option::Option<crate::types::Eac3AtmosSettings>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3.
    #[doc(hidden)]
    pub eac3_settings: std::option::Option<crate::types::Eac3Settings>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value MP2.
    #[doc(hidden)]
    pub mp2_settings: std::option::Option<crate::types::Mp2Settings>,
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value MP3.
    #[doc(hidden)]
    pub mp3_settings: std::option::Option<crate::types::Mp3Settings>,
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value OPUS.
    #[doc(hidden)]
    pub opus_settings: std::option::Option<crate::types::OpusSettings>,
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value Vorbis.
    #[doc(hidden)]
    pub vorbis_settings: std::option::Option<crate::types::VorbisSettings>,
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value WAV.
    #[doc(hidden)]
    pub wav_settings: std::option::Option<crate::types::WavSettings>,
}
impl AudioCodecSettings {
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    pub fn aac_settings(&self) -> std::option::Option<&crate::types::AacSettings> {
        self.aac_settings.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AC3.
    pub fn ac3_settings(&self) -> std::option::Option<&crate::types::Ac3Settings> {
        self.ac3_settings.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AIFF.
    pub fn aiff_settings(&self) -> std::option::Option<&crate::types::AiffSettings> {
        self.aiff_settings.as_ref()
    }
    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    pub fn codec(&self) -> std::option::Option<&crate::types::AudioCodec> {
        self.codec.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3_ATMOS.
    pub fn eac3_atmos_settings(&self) -> std::option::Option<&crate::types::Eac3AtmosSettings> {
        self.eac3_atmos_settings.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3.
    pub fn eac3_settings(&self) -> std::option::Option<&crate::types::Eac3Settings> {
        self.eac3_settings.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value MP2.
    pub fn mp2_settings(&self) -> std::option::Option<&crate::types::Mp2Settings> {
        self.mp2_settings.as_ref()
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value MP3.
    pub fn mp3_settings(&self) -> std::option::Option<&crate::types::Mp3Settings> {
        self.mp3_settings.as_ref()
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value OPUS.
    pub fn opus_settings(&self) -> std::option::Option<&crate::types::OpusSettings> {
        self.opus_settings.as_ref()
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value Vorbis.
    pub fn vorbis_settings(&self) -> std::option::Option<&crate::types::VorbisSettings> {
        self.vorbis_settings.as_ref()
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value WAV.
    pub fn wav_settings(&self) -> std::option::Option<&crate::types::WavSettings> {
        self.wav_settings.as_ref()
    }
}
impl AudioCodecSettings {
    /// Creates a new builder-style object to manufacture [`AudioCodecSettings`](crate::types::AudioCodecSettings).
    pub fn builder() -> crate::types::builders::AudioCodecSettingsBuilder {
        crate::types::builders::AudioCodecSettingsBuilder::default()
    }
}

/// A builder for [`AudioCodecSettings`](crate::types::AudioCodecSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioCodecSettingsBuilder {
    pub(crate) aac_settings: std::option::Option<crate::types::AacSettings>,
    pub(crate) ac3_settings: std::option::Option<crate::types::Ac3Settings>,
    pub(crate) aiff_settings: std::option::Option<crate::types::AiffSettings>,
    pub(crate) codec: std::option::Option<crate::types::AudioCodec>,
    pub(crate) eac3_atmos_settings: std::option::Option<crate::types::Eac3AtmosSettings>,
    pub(crate) eac3_settings: std::option::Option<crate::types::Eac3Settings>,
    pub(crate) mp2_settings: std::option::Option<crate::types::Mp2Settings>,
    pub(crate) mp3_settings: std::option::Option<crate::types::Mp3Settings>,
    pub(crate) opus_settings: std::option::Option<crate::types::OpusSettings>,
    pub(crate) vorbis_settings: std::option::Option<crate::types::VorbisSettings>,
    pub(crate) wav_settings: std::option::Option<crate::types::WavSettings>,
}
impl AudioCodecSettingsBuilder {
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    pub fn aac_settings(mut self, input: crate::types::AacSettings) -> Self {
        self.aac_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to "VBR" or "CBR". In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    pub fn set_aac_settings(
        mut self,
        input: std::option::Option<crate::types::AacSettings>,
    ) -> Self {
        self.aac_settings = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AC3.
    pub fn ac3_settings(mut self, input: crate::types::Ac3Settings) -> Self {
        self.ac3_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AC3.
    pub fn set_ac3_settings(
        mut self,
        input: std::option::Option<crate::types::Ac3Settings>,
    ) -> Self {
        self.ac3_settings = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AIFF.
    pub fn aiff_settings(mut self, input: crate::types::AiffSettings) -> Self {
        self.aiff_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value AIFF.
    pub fn set_aiff_settings(
        mut self,
        input: std::option::Option<crate::types::AiffSettings>,
    ) -> Self {
        self.aiff_settings = input;
        self
    }
    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    pub fn codec(mut self, input: crate::types::AudioCodec) -> Self {
        self.codec = Some(input);
        self
    }
    /// Choose the audio codec for this output. Note that the option Dolby Digital passthrough (PASSTHROUGH) applies only to Dolby Digital and Dolby Digital Plus audio inputs. Make sure that you choose a codec that's supported with your output container: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#reference-codecs-containers-output-audio For audio-only outputs, make sure that both your input audio codec and your output audio codec are supported for audio-only workflows. For more information, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers-input.html#reference-codecs-containers-input-audio-only and https://docs.aws.amazon.com/mediaconvert/latest/ug/reference-codecs-containers.html#audio-only-output
    pub fn set_codec(mut self, input: std::option::Option<crate::types::AudioCodec>) -> Self {
        self.codec = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3_ATMOS.
    pub fn eac3_atmos_settings(mut self, input: crate::types::Eac3AtmosSettings) -> Self {
        self.eac3_atmos_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3_ATMOS.
    pub fn set_eac3_atmos_settings(
        mut self,
        input: std::option::Option<crate::types::Eac3AtmosSettings>,
    ) -> Self {
        self.eac3_atmos_settings = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3.
    pub fn eac3_settings(mut self, input: crate::types::Eac3Settings) -> Self {
        self.eac3_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value EAC3.
    pub fn set_eac3_settings(
        mut self,
        input: std::option::Option<crate::types::Eac3Settings>,
    ) -> Self {
        self.eac3_settings = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value MP2.
    pub fn mp2_settings(mut self, input: crate::types::Mp2Settings) -> Self {
        self.mp2_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value MP2.
    pub fn set_mp2_settings(
        mut self,
        input: std::option::Option<crate::types::Mp2Settings>,
    ) -> Self {
        self.mp2_settings = input;
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value MP3.
    pub fn mp3_settings(mut self, input: crate::types::Mp3Settings) -> Self {
        self.mp3_settings = Some(input);
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value MP3.
    pub fn set_mp3_settings(
        mut self,
        input: std::option::Option<crate::types::Mp3Settings>,
    ) -> Self {
        self.mp3_settings = input;
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value OPUS.
    pub fn opus_settings(mut self, input: crate::types::OpusSettings) -> Self {
        self.opus_settings = Some(input);
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value OPUS.
    pub fn set_opus_settings(
        mut self,
        input: std::option::Option<crate::types::OpusSettings>,
    ) -> Self {
        self.opus_settings = input;
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value Vorbis.
    pub fn vorbis_settings(mut self, input: crate::types::VorbisSettings) -> Self {
        self.vorbis_settings = Some(input);
        self
    }
    /// Required when you set Codec, under AudioDescriptions&gt;CodecSettings, to the value Vorbis.
    pub fn set_vorbis_settings(
        mut self,
        input: std::option::Option<crate::types::VorbisSettings>,
    ) -> Self {
        self.vorbis_settings = input;
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value WAV.
    pub fn wav_settings(mut self, input: crate::types::WavSettings) -> Self {
        self.wav_settings = Some(input);
        self
    }
    /// Required when you set (Codec) under (AudioDescriptions)&gt;(CodecSettings) to the value WAV.
    pub fn set_wav_settings(
        mut self,
        input: std::option::Option<crate::types::WavSettings>,
    ) -> Self {
        self.wav_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioCodecSettings`](crate::types::AudioCodecSettings).
    pub fn build(self) -> crate::types::AudioCodecSettings {
        crate::types::AudioCodecSettings {
            aac_settings: self.aac_settings,
            ac3_settings: self.ac3_settings,
            aiff_settings: self.aiff_settings,
            codec: self.codec,
            eac3_atmos_settings: self.eac3_atmos_settings,
            eac3_settings: self.eac3_settings,
            mp2_settings: self.mp2_settings,
            mp3_settings: self.mp3_settings,
            opus_settings: self.opus_settings,
            vorbis_settings: self.vorbis_settings,
            wav_settings: self.wav_settings,
        }
    }
}
