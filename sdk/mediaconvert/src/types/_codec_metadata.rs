// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Codec-specific parameters parsed from the video essence headers. This information provides detailed technical specifications about how the video was encoded, including profile settings, resolution details, and color space information that can help you understand the source video characteristics and make informed encoding decisions.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodecMetadata {
    /// The number of bits used per color component in the video essence such as 8, 10, or 12 bits. Standard range (SDR) video typically uses 8-bit, while 10-bit is common for high dynamic range (HDR).
    pub bit_depth: ::std::option::Option<i32>,
    /// The chroma subsampling format used in the video encoding, such as "4:2:0" or "4:4:4". This describes how color information is sampled relative to brightness information. Different subsampling ratios affect video quality and file size, with "4:4:4" providing the highest color fidelity and "4:2:0" being most common for standard video.
    pub chroma_subsampling: ::std::option::Option<::std::string::String>,
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub coded_frame_rate: ::std::option::Option<crate::types::FrameRate>,
    /// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
    pub color_primaries: ::std::option::Option<crate::types::ColorPrimaries>,
    /// The height in pixels as coded by the codec. This represents the actual encoded video height as specified in the video stream headers.
    pub height: ::std::option::Option<i32>,
    /// The codec level or tier that specifies the maximum processing requirements and capabilities. Levels define constraints such as maximum bit rate, frame rate, and resolution.
    pub level: ::std::option::Option<::std::string::String>,
    /// The color space matrix coefficients of the video track, defining how RGB color values are converted to and from YUV color space. This affects color accuracy during encoding and decoding processes.
    pub matrix_coefficients: ::std::option::Option<crate::types::MatrixCoefficients>,
    /// The codec profile used to encode the video. Profiles define specific feature sets and capabilities within a codec standard. For example, H.264 profiles include Baseline, Main, and High, each supporting different encoding features and complexity levels.
    pub profile: ::std::option::Option<::std::string::String>,
    /// The scanning method specified in the video essence, indicating whether the video uses progressive or interlaced scanning.
    pub scan_type: ::std::option::Option<::std::string::String>,
    /// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
    pub transfer_characteristics: ::std::option::Option<crate::types::TransferCharacteristics>,
    /// The width in pixels as coded by the codec. This represents the actual encoded video width as specified in the video stream headers.
    pub width: ::std::option::Option<i32>,
}
impl CodecMetadata {
    /// The number of bits used per color component in the video essence such as 8, 10, or 12 bits. Standard range (SDR) video typically uses 8-bit, while 10-bit is common for high dynamic range (HDR).
    pub fn bit_depth(&self) -> ::std::option::Option<i32> {
        self.bit_depth
    }
    /// The chroma subsampling format used in the video encoding, such as "4:2:0" or "4:4:4". This describes how color information is sampled relative to brightness information. Different subsampling ratios affect video quality and file size, with "4:4:4" providing the highest color fidelity and "4:2:0" being most common for standard video.
    pub fn chroma_subsampling(&self) -> ::std::option::Option<&str> {
        self.chroma_subsampling.as_deref()
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn coded_frame_rate(&self) -> ::std::option::Option<&crate::types::FrameRate> {
        self.coded_frame_rate.as_ref()
    }
    /// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
    pub fn color_primaries(&self) -> ::std::option::Option<&crate::types::ColorPrimaries> {
        self.color_primaries.as_ref()
    }
    /// The height in pixels as coded by the codec. This represents the actual encoded video height as specified in the video stream headers.
    pub fn height(&self) -> ::std::option::Option<i32> {
        self.height
    }
    /// The codec level or tier that specifies the maximum processing requirements and capabilities. Levels define constraints such as maximum bit rate, frame rate, and resolution.
    pub fn level(&self) -> ::std::option::Option<&str> {
        self.level.as_deref()
    }
    /// The color space matrix coefficients of the video track, defining how RGB color values are converted to and from YUV color space. This affects color accuracy during encoding and decoding processes.
    pub fn matrix_coefficients(&self) -> ::std::option::Option<&crate::types::MatrixCoefficients> {
        self.matrix_coefficients.as_ref()
    }
    /// The codec profile used to encode the video. Profiles define specific feature sets and capabilities within a codec standard. For example, H.264 profiles include Baseline, Main, and High, each supporting different encoding features and complexity levels.
    pub fn profile(&self) -> ::std::option::Option<&str> {
        self.profile.as_deref()
    }
    /// The scanning method specified in the video essence, indicating whether the video uses progressive or interlaced scanning.
    pub fn scan_type(&self) -> ::std::option::Option<&str> {
        self.scan_type.as_deref()
    }
    /// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
    pub fn transfer_characteristics(&self) -> ::std::option::Option<&crate::types::TransferCharacteristics> {
        self.transfer_characteristics.as_ref()
    }
    /// The width in pixels as coded by the codec. This represents the actual encoded video width as specified in the video stream headers.
    pub fn width(&self) -> ::std::option::Option<i32> {
        self.width
    }
}
impl CodecMetadata {
    /// Creates a new builder-style object to manufacture [`CodecMetadata`](crate::types::CodecMetadata).
    pub fn builder() -> crate::types::builders::CodecMetadataBuilder {
        crate::types::builders::CodecMetadataBuilder::default()
    }
}

/// A builder for [`CodecMetadata`](crate::types::CodecMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CodecMetadataBuilder {
    pub(crate) bit_depth: ::std::option::Option<i32>,
    pub(crate) chroma_subsampling: ::std::option::Option<::std::string::String>,
    pub(crate) coded_frame_rate: ::std::option::Option<crate::types::FrameRate>,
    pub(crate) color_primaries: ::std::option::Option<crate::types::ColorPrimaries>,
    pub(crate) height: ::std::option::Option<i32>,
    pub(crate) level: ::std::option::Option<::std::string::String>,
    pub(crate) matrix_coefficients: ::std::option::Option<crate::types::MatrixCoefficients>,
    pub(crate) profile: ::std::option::Option<::std::string::String>,
    pub(crate) scan_type: ::std::option::Option<::std::string::String>,
    pub(crate) transfer_characteristics: ::std::option::Option<crate::types::TransferCharacteristics>,
    pub(crate) width: ::std::option::Option<i32>,
}
impl CodecMetadataBuilder {
    /// The number of bits used per color component in the video essence such as 8, 10, or 12 bits. Standard range (SDR) video typically uses 8-bit, while 10-bit is common for high dynamic range (HDR).
    pub fn bit_depth(mut self, input: i32) -> Self {
        self.bit_depth = ::std::option::Option::Some(input);
        self
    }
    /// The number of bits used per color component in the video essence such as 8, 10, or 12 bits. Standard range (SDR) video typically uses 8-bit, while 10-bit is common for high dynamic range (HDR).
    pub fn set_bit_depth(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bit_depth = input;
        self
    }
    /// The number of bits used per color component in the video essence such as 8, 10, or 12 bits. Standard range (SDR) video typically uses 8-bit, while 10-bit is common for high dynamic range (HDR).
    pub fn get_bit_depth(&self) -> &::std::option::Option<i32> {
        &self.bit_depth
    }
    /// The chroma subsampling format used in the video encoding, such as "4:2:0" or "4:4:4". This describes how color information is sampled relative to brightness information. Different subsampling ratios affect video quality and file size, with "4:4:4" providing the highest color fidelity and "4:2:0" being most common for standard video.
    pub fn chroma_subsampling(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.chroma_subsampling = ::std::option::Option::Some(input.into());
        self
    }
    /// The chroma subsampling format used in the video encoding, such as "4:2:0" or "4:4:4". This describes how color information is sampled relative to brightness information. Different subsampling ratios affect video quality and file size, with "4:4:4" providing the highest color fidelity and "4:2:0" being most common for standard video.
    pub fn set_chroma_subsampling(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.chroma_subsampling = input;
        self
    }
    /// The chroma subsampling format used in the video encoding, such as "4:2:0" or "4:4:4". This describes how color information is sampled relative to brightness information. Different subsampling ratios affect video quality and file size, with "4:4:4" providing the highest color fidelity and "4:2:0" being most common for standard video.
    pub fn get_chroma_subsampling(&self) -> &::std::option::Option<::std::string::String> {
        &self.chroma_subsampling
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn coded_frame_rate(mut self, input: crate::types::FrameRate) -> Self {
        self.coded_frame_rate = ::std::option::Option::Some(input);
        self
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn set_coded_frame_rate(mut self, input: ::std::option::Option<crate::types::FrameRate>) -> Self {
        self.coded_frame_rate = input;
        self
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn get_coded_frame_rate(&self) -> &::std::option::Option<crate::types::FrameRate> {
        &self.coded_frame_rate
    }
    /// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
    pub fn color_primaries(mut self, input: crate::types::ColorPrimaries) -> Self {
        self.color_primaries = ::std::option::Option::Some(input);
        self
    }
    /// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
    pub fn set_color_primaries(mut self, input: ::std::option::Option<crate::types::ColorPrimaries>) -> Self {
        self.color_primaries = input;
        self
    }
    /// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
    pub fn get_color_primaries(&self) -> &::std::option::Option<crate::types::ColorPrimaries> {
        &self.color_primaries
    }
    /// The height in pixels as coded by the codec. This represents the actual encoded video height as specified in the video stream headers.
    pub fn height(mut self, input: i32) -> Self {
        self.height = ::std::option::Option::Some(input);
        self
    }
    /// The height in pixels as coded by the codec. This represents the actual encoded video height as specified in the video stream headers.
    pub fn set_height(mut self, input: ::std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// The height in pixels as coded by the codec. This represents the actual encoded video height as specified in the video stream headers.
    pub fn get_height(&self) -> &::std::option::Option<i32> {
        &self.height
    }
    /// The codec level or tier that specifies the maximum processing requirements and capabilities. Levels define constraints such as maximum bit rate, frame rate, and resolution.
    pub fn level(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.level = ::std::option::Option::Some(input.into());
        self
    }
    /// The codec level or tier that specifies the maximum processing requirements and capabilities. Levels define constraints such as maximum bit rate, frame rate, and resolution.
    pub fn set_level(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.level = input;
        self
    }
    /// The codec level or tier that specifies the maximum processing requirements and capabilities. Levels define constraints such as maximum bit rate, frame rate, and resolution.
    pub fn get_level(&self) -> &::std::option::Option<::std::string::String> {
        &self.level
    }
    /// The color space matrix coefficients of the video track, defining how RGB color values are converted to and from YUV color space. This affects color accuracy during encoding and decoding processes.
    pub fn matrix_coefficients(mut self, input: crate::types::MatrixCoefficients) -> Self {
        self.matrix_coefficients = ::std::option::Option::Some(input);
        self
    }
    /// The color space matrix coefficients of the video track, defining how RGB color values are converted to and from YUV color space. This affects color accuracy during encoding and decoding processes.
    pub fn set_matrix_coefficients(mut self, input: ::std::option::Option<crate::types::MatrixCoefficients>) -> Self {
        self.matrix_coefficients = input;
        self
    }
    /// The color space matrix coefficients of the video track, defining how RGB color values are converted to and from YUV color space. This affects color accuracy during encoding and decoding processes.
    pub fn get_matrix_coefficients(&self) -> &::std::option::Option<crate::types::MatrixCoefficients> {
        &self.matrix_coefficients
    }
    /// The codec profile used to encode the video. Profiles define specific feature sets and capabilities within a codec standard. For example, H.264 profiles include Baseline, Main, and High, each supporting different encoding features and complexity levels.
    pub fn profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile = ::std::option::Option::Some(input.into());
        self
    }
    /// The codec profile used to encode the video. Profiles define specific feature sets and capabilities within a codec standard. For example, H.264 profiles include Baseline, Main, and High, each supporting different encoding features and complexity levels.
    pub fn set_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile = input;
        self
    }
    /// The codec profile used to encode the video. Profiles define specific feature sets and capabilities within a codec standard. For example, H.264 profiles include Baseline, Main, and High, each supporting different encoding features and complexity levels.
    pub fn get_profile(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile
    }
    /// The scanning method specified in the video essence, indicating whether the video uses progressive or interlaced scanning.
    pub fn scan_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scan_type = ::std::option::Option::Some(input.into());
        self
    }
    /// The scanning method specified in the video essence, indicating whether the video uses progressive or interlaced scanning.
    pub fn set_scan_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scan_type = input;
        self
    }
    /// The scanning method specified in the video essence, indicating whether the video uses progressive or interlaced scanning.
    pub fn get_scan_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.scan_type
    }
    /// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
    pub fn transfer_characteristics(mut self, input: crate::types::TransferCharacteristics) -> Self {
        self.transfer_characteristics = ::std::option::Option::Some(input);
        self
    }
    /// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
    pub fn set_transfer_characteristics(mut self, input: ::std::option::Option<crate::types::TransferCharacteristics>) -> Self {
        self.transfer_characteristics = input;
        self
    }
    /// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
    pub fn get_transfer_characteristics(&self) -> &::std::option::Option<crate::types::TransferCharacteristics> {
        &self.transfer_characteristics
    }
    /// The width in pixels as coded by the codec. This represents the actual encoded video width as specified in the video stream headers.
    pub fn width(mut self, input: i32) -> Self {
        self.width = ::std::option::Option::Some(input);
        self
    }
    /// The width in pixels as coded by the codec. This represents the actual encoded video width as specified in the video stream headers.
    pub fn set_width(mut self, input: ::std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// The width in pixels as coded by the codec. This represents the actual encoded video width as specified in the video stream headers.
    pub fn get_width(&self) -> &::std::option::Option<i32> {
        &self.width
    }
    /// Consumes the builder and constructs a [`CodecMetadata`](crate::types::CodecMetadata).
    pub fn build(self) -> crate::types::CodecMetadata {
        crate::types::CodecMetadata {
            bit_depth: self.bit_depth,
            chroma_subsampling: self.chroma_subsampling,
            coded_frame_rate: self.coded_frame_rate,
            color_primaries: self.color_primaries,
            height: self.height,
            level: self.level,
            matrix_coefficients: self.matrix_coefficients,
            profile: self.profile,
            scan_type: self.scan_type,
            transfer_characteristics: self.transfer_characteristics,
            width: self.width,
        }
    }
}
