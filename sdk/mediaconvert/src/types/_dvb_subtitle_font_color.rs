// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DvbSubtitleFontColor`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let dvbsubtitlefontcolor = unimplemented!();
/// match dvbsubtitlefontcolor {
///     DvbSubtitleFontColor::Auto => { /* ... */ },
///     DvbSubtitleFontColor::Black => { /* ... */ },
///     DvbSubtitleFontColor::Blue => { /* ... */ },
///     DvbSubtitleFontColor::Green => { /* ... */ },
///     DvbSubtitleFontColor::Hex => { /* ... */ },
///     DvbSubtitleFontColor::Red => { /* ... */ },
///     DvbSubtitleFontColor::White => { /* ... */ },
///     DvbSubtitleFontColor::Yellow => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `dvbsubtitlefontcolor` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DvbSubtitleFontColor::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DvbSubtitleFontColor::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DvbSubtitleFontColor::NewFeature` is defined.
/// Specifically, when `dvbsubtitlefontcolor` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DvbSubtitleFontColor::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify the color of the captions text. Leave Font color (FontColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font color data from your input captions, if present. Within your job settings, all of your DVB-Sub settings must be identical.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DvbSubtitleFontColor {
    #[allow(missing_docs)] // documentation missing in model
    Auto,
    #[allow(missing_docs)] // documentation missing in model
    Black,
    #[allow(missing_docs)] // documentation missing in model
    Blue,
    #[allow(missing_docs)] // documentation missing in model
    Green,
    #[allow(missing_docs)] // documentation missing in model
    Hex,
    #[allow(missing_docs)] // documentation missing in model
    Red,
    #[allow(missing_docs)] // documentation missing in model
    White,
    #[allow(missing_docs)] // documentation missing in model
    Yellow,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DvbSubtitleFontColor {
    fn from(s: &str) -> Self {
        match s {
            "AUTO" => DvbSubtitleFontColor::Auto,
            "BLACK" => DvbSubtitleFontColor::Black,
            "BLUE" => DvbSubtitleFontColor::Blue,
            "GREEN" => DvbSubtitleFontColor::Green,
            "HEX" => DvbSubtitleFontColor::Hex,
            "RED" => DvbSubtitleFontColor::Red,
            "WHITE" => DvbSubtitleFontColor::White,
            "YELLOW" => DvbSubtitleFontColor::Yellow,
            other => DvbSubtitleFontColor::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for DvbSubtitleFontColor {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DvbSubtitleFontColor::from(s))
    }
}
impl DvbSubtitleFontColor {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DvbSubtitleFontColor::Auto => "AUTO",
            DvbSubtitleFontColor::Black => "BLACK",
            DvbSubtitleFontColor::Blue => "BLUE",
            DvbSubtitleFontColor::Green => "GREEN",
            DvbSubtitleFontColor::Hex => "HEX",
            DvbSubtitleFontColor::Red => "RED",
            DvbSubtitleFontColor::White => "WHITE",
            DvbSubtitleFontColor::Yellow => "YELLOW",
            DvbSubtitleFontColor::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTO", "BLACK", "BLUE", "GREEN", "HEX", "RED", "WHITE", "YELLOW",
        ]
    }
}
impl AsRef<str> for DvbSubtitleFontColor {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
