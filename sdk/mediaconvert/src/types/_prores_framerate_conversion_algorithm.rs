// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ProresFramerateConversionAlgorithm`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let proresframerateconversionalgorithm = unimplemented!();
/// match proresframerateconversionalgorithm {
///     ProresFramerateConversionAlgorithm::DuplicateDrop => { /* ... */ },
///     ProresFramerateConversionAlgorithm::Frameformer => { /* ... */ },
///     ProresFramerateConversionAlgorithm::Interpolate => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `proresframerateconversionalgorithm` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ProresFramerateConversionAlgorithm::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ProresFramerateConversionAlgorithm::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ProresFramerateConversionAlgorithm::NewFeature` is defined.
/// Specifically, when `proresframerateconversionalgorithm` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ProresFramerateConversionAlgorithm::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ProresFramerateConversionAlgorithm {
    #[allow(missing_docs)] // documentation missing in model
    DuplicateDrop,
    #[allow(missing_docs)] // documentation missing in model
    Frameformer,
    #[allow(missing_docs)] // documentation missing in model
    Interpolate,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ProresFramerateConversionAlgorithm {
    fn from(s: &str) -> Self {
        match s {
            "DUPLICATE_DROP" => ProresFramerateConversionAlgorithm::DuplicateDrop,
            "FRAMEFORMER" => ProresFramerateConversionAlgorithm::Frameformer,
            "INTERPOLATE" => ProresFramerateConversionAlgorithm::Interpolate,
            other => ProresFramerateConversionAlgorithm::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for ProresFramerateConversionAlgorithm {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ProresFramerateConversionAlgorithm::from(s))
    }
}
impl ProresFramerateConversionAlgorithm {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ProresFramerateConversionAlgorithm::DuplicateDrop => "DUPLICATE_DROP",
            ProresFramerateConversionAlgorithm::Frameformer => "FRAMEFORMER",
            ProresFramerateConversionAlgorithm::Interpolate => "INTERPOLATE",
            ProresFramerateConversionAlgorithm::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["DUPLICATE_DROP", "FRAMEFORMER", "INTERPOLATE"]
    }
}
impl AsRef<str> for ProresFramerateConversionAlgorithm {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
