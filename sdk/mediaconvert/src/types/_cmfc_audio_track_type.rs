// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CmfcAudioTrackType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let cmfcaudiotracktype = unimplemented!();
/// match cmfcaudiotracktype {
///     CmfcAudioTrackType::AlternateAudioAutoSelect => { /* ... */ },
///     CmfcAudioTrackType::AlternateAudioAutoSelectDefault => { /* ... */ },
///     CmfcAudioTrackType::AlternateAudioNotAutoSelect => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `cmfcaudiotracktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CmfcAudioTrackType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CmfcAudioTrackType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CmfcAudioTrackType::NewFeature` is defined.
/// Specifically, when `cmfcaudiotracktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CmfcAudioTrackType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Use this setting to control the values that MediaConvert puts in your HLS parent playlist to control how the client player selects which audio track to play. The other options for this setting determine the values that MediaConvert writes for the DEFAULT and AUTOSELECT attributes of the EXT-X-MEDIA entry for the audio variant. For more information about these attributes, see the Apple documentation article https://developer.apple.com/documentation/http_live_streaming/example_playlists_for_http_live_streaming/adding_alternate_media_to_a_playlist. Choose Alternate audio, auto select, default (ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT) to set DEFAULT=YES and AUTOSELECT=YES. Choose this value for only one variant in your output group. Choose Alternate audio, auto select, not default (ALTERNATE_AUDIO_AUTO_SELECT) to set DEFAULT=NO and AUTOSELECT=YES. Choose Alternate Audio, Not Auto Select to set DEFAULT=NO and AUTOSELECT=NO. When you don't specify a value for this setting, MediaConvert defaults to Alternate audio, auto select, default. When there is more than one variant in your output group, you must explicitly choose a value for this setting.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CmfcAudioTrackType {
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioAutoSelect,
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioAutoSelectDefault,
    #[allow(missing_docs)] // documentation missing in model
    AlternateAudioNotAutoSelect,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for CmfcAudioTrackType {
    fn from(s: &str) -> Self {
        match s {
            "ALTERNATE_AUDIO_AUTO_SELECT" => CmfcAudioTrackType::AlternateAudioAutoSelect,
            "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT" => {
                CmfcAudioTrackType::AlternateAudioAutoSelectDefault
            }
            "ALTERNATE_AUDIO_NOT_AUTO_SELECT" => CmfcAudioTrackType::AlternateAudioNotAutoSelect,
            other => CmfcAudioTrackType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for CmfcAudioTrackType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CmfcAudioTrackType::from(s))
    }
}
impl CmfcAudioTrackType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CmfcAudioTrackType::AlternateAudioAutoSelect => "ALTERNATE_AUDIO_AUTO_SELECT",
            CmfcAudioTrackType::AlternateAudioAutoSelectDefault => {
                "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT"
            }
            CmfcAudioTrackType::AlternateAudioNotAutoSelect => "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
            CmfcAudioTrackType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ALTERNATE_AUDIO_AUTO_SELECT",
            "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
            "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
        ]
    }
}
impl AsRef<str> for CmfcAudioTrackType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
