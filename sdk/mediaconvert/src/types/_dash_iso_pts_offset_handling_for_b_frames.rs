// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DashIsoPtsOffsetHandlingForBFrames`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let dashisoptsoffsethandlingforbframes = unimplemented!();
/// match dashisoptsoffsethandlingforbframes {
///     DashIsoPtsOffsetHandlingForBFrames::MatchInitialPts => { /* ... */ },
///     DashIsoPtsOffsetHandlingForBFrames::ZeroBased => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `dashisoptsoffsethandlingforbframes` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DashIsoPtsOffsetHandlingForBFrames::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DashIsoPtsOffsetHandlingForBFrames::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DashIsoPtsOffsetHandlingForBFrames::NewFeature` is defined.
/// Specifically, when `dashisoptsoffsethandlingforbframes` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DashIsoPtsOffsetHandlingForBFrames::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Use this setting only when your output video stream has B-frames, which causes the initial presentation time stamp (PTS) to be offset from the initial decode time stamp (DTS). Specify how MediaConvert handles PTS when writing time stamps in output DASH manifests. Choose Match initial PTS (MATCH_INITIAL_PTS) when you want MediaConvert to use the initial PTS as the first time stamp in the manifest. Choose Zero-based (ZERO_BASED) to have MediaConvert ignore the initial PTS in the video stream and instead write the initial time stamp as zero in the manifest. For outputs that don't have B-frames, the time stamps in your DASH manifests start at zero regardless of your choice here.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DashIsoPtsOffsetHandlingForBFrames {
    #[allow(missing_docs)] // documentation missing in model
    MatchInitialPts,
    #[allow(missing_docs)] // documentation missing in model
    ZeroBased,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DashIsoPtsOffsetHandlingForBFrames {
    fn from(s: &str) -> Self {
        match s {
            "MATCH_INITIAL_PTS" => DashIsoPtsOffsetHandlingForBFrames::MatchInitialPts,
            "ZERO_BASED" => DashIsoPtsOffsetHandlingForBFrames::ZeroBased,
            other => DashIsoPtsOffsetHandlingForBFrames::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for DashIsoPtsOffsetHandlingForBFrames {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DashIsoPtsOffsetHandlingForBFrames::from(s))
    }
}
impl DashIsoPtsOffsetHandlingForBFrames {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DashIsoPtsOffsetHandlingForBFrames::MatchInitialPts => "MATCH_INITIAL_PTS",
            DashIsoPtsOffsetHandlingForBFrames::ZeroBased => "ZERO_BASED",
            DashIsoPtsOffsetHandlingForBFrames::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["MATCH_INITIAL_PTS", "ZERO_BASED"]
    }
}
impl AsRef<str> for DashIsoPtsOffsetHandlingForBFrames {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
