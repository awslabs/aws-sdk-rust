// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use Dynamic audio selectors when you do not know the track layout of your source when you submit your job, but want to select multiple audio tracks. When you include an audio track in your output and specify this Dynamic audio selector as the Audio source, MediaConvert creates an audio track within that output for each dynamically selected track. Note that when you include a Dynamic audio selector for two or more inputs, each input must have the same number of audio tracks and audio channels.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DynamicAudioSelector {
    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    pub audio_duration_correction: ::std::option::Option<crate::types::AudioDurationCorrection>,
    /// Specify the S3, HTTP, or HTTPS URL for your external audio file input.
    pub external_audio_file_input: ::std::option::Option<::std::string::String>,
    /// Specify the language, using an ISO 639-2 three-letter code in all capital letters. You can find a list of codes at: https://www.loc.gov/standards/iso639-2/php/code_list.php
    pub language_code: ::std::option::Option<crate::types::LanguageCode>,
    /// Specify a time delta, in milliseconds, to offset the audio from the input video. To specify no offset: Keep the default value, 0. To specify an offset: Enter an integer from -2147483648 to 2147483647
    pub offset: ::std::option::Option<i32>,
    /// Specify which audio tracks to dynamically select from your source. To select all audio tracks: Keep the default value, All tracks. To select all audio tracks with a specific language code: Choose Language code. When you do, you must also specify a language code under the Language code setting. If there is no matching Language code in your source, then no track will be selected.
    pub selector_type: ::std::option::Option<crate::types::DynamicAudioSelectorType>,
}
impl DynamicAudioSelector {
    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    pub fn audio_duration_correction(&self) -> ::std::option::Option<&crate::types::AudioDurationCorrection> {
        self.audio_duration_correction.as_ref()
    }
    /// Specify the S3, HTTP, or HTTPS URL for your external audio file input.
    pub fn external_audio_file_input(&self) -> ::std::option::Option<&str> {
        self.external_audio_file_input.as_deref()
    }
    /// Specify the language, using an ISO 639-2 three-letter code in all capital letters. You can find a list of codes at: https://www.loc.gov/standards/iso639-2/php/code_list.php
    pub fn language_code(&self) -> ::std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
    /// Specify a time delta, in milliseconds, to offset the audio from the input video. To specify no offset: Keep the default value, 0. To specify an offset: Enter an integer from -2147483648 to 2147483647
    pub fn offset(&self) -> ::std::option::Option<i32> {
        self.offset
    }
    /// Specify which audio tracks to dynamically select from your source. To select all audio tracks: Keep the default value, All tracks. To select all audio tracks with a specific language code: Choose Language code. When you do, you must also specify a language code under the Language code setting. If there is no matching Language code in your source, then no track will be selected.
    pub fn selector_type(&self) -> ::std::option::Option<&crate::types::DynamicAudioSelectorType> {
        self.selector_type.as_ref()
    }
}
impl DynamicAudioSelector {
    /// Creates a new builder-style object to manufacture [`DynamicAudioSelector`](crate::types::DynamicAudioSelector).
    pub fn builder() -> crate::types::builders::DynamicAudioSelectorBuilder {
        crate::types::builders::DynamicAudioSelectorBuilder::default()
    }
}

/// A builder for [`DynamicAudioSelector`](crate::types::DynamicAudioSelector).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DynamicAudioSelectorBuilder {
    pub(crate) audio_duration_correction: ::std::option::Option<crate::types::AudioDurationCorrection>,
    pub(crate) external_audio_file_input: ::std::option::Option<::std::string::String>,
    pub(crate) language_code: ::std::option::Option<crate::types::LanguageCode>,
    pub(crate) offset: ::std::option::Option<i32>,
    pub(crate) selector_type: ::std::option::Option<crate::types::DynamicAudioSelectorType>,
}
impl DynamicAudioSelectorBuilder {
    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    pub fn audio_duration_correction(mut self, input: crate::types::AudioDurationCorrection) -> Self {
        self.audio_duration_correction = ::std::option::Option::Some(input);
        self
    }
    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    pub fn set_audio_duration_correction(mut self, input: ::std::option::Option<crate::types::AudioDurationCorrection>) -> Self {
        self.audio_duration_correction = input;
        self
    }
    /// Apply audio timing corrections to help synchronize audio and video in your output. To apply timing corrections, your input must meet the following requirements: * Container: MP4, or MOV, with an accurate time-to-sample (STTS) table. * Audio track: AAC. Choose from the following audio timing correction settings: * Disabled (Default): Apply no correction. * Auto: Recommended for most inputs. MediaConvert analyzes the audio timing in your input and determines which correction setting to use, if needed. * Track: Adjust the duration of each audio frame by a constant amount to align the audio track length with STTS duration. Track-level correction does not affect pitch, and is recommended for tonal audio content such as music. * Frame: Adjust the duration of each audio frame by a variable amount to align audio frames with STTS timestamps. No corrections are made to already-aligned frames. Frame-level correction may affect the pitch of corrected frames, and is recommended for atonal audio content such as speech or percussion. * Force: Apply audio duration correction, either Track or Frame depending on your input, regardless of the accuracy of your input's STTS table. Your output audio and video may not be aligned or it may contain audio artifacts.
    pub fn get_audio_duration_correction(&self) -> &::std::option::Option<crate::types::AudioDurationCorrection> {
        &self.audio_duration_correction
    }
    /// Specify the S3, HTTP, or HTTPS URL for your external audio file input.
    pub fn external_audio_file_input(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_audio_file_input = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify the S3, HTTP, or HTTPS URL for your external audio file input.
    pub fn set_external_audio_file_input(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_audio_file_input = input;
        self
    }
    /// Specify the S3, HTTP, or HTTPS URL for your external audio file input.
    pub fn get_external_audio_file_input(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_audio_file_input
    }
    /// Specify the language, using an ISO 639-2 three-letter code in all capital letters. You can find a list of codes at: https://www.loc.gov/standards/iso639-2/php/code_list.php
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = ::std::option::Option::Some(input);
        self
    }
    /// Specify the language, using an ISO 639-2 three-letter code in all capital letters. You can find a list of codes at: https://www.loc.gov/standards/iso639-2/php/code_list.php
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::LanguageCode>) -> Self {
        self.language_code = input;
        self
    }
    /// Specify the language, using an ISO 639-2 three-letter code in all capital letters. You can find a list of codes at: https://www.loc.gov/standards/iso639-2/php/code_list.php
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::LanguageCode> {
        &self.language_code
    }
    /// Specify a time delta, in milliseconds, to offset the audio from the input video. To specify no offset: Keep the default value, 0. To specify an offset: Enter an integer from -2147483648 to 2147483647
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = ::std::option::Option::Some(input);
        self
    }
    /// Specify a time delta, in milliseconds, to offset the audio from the input video. To specify no offset: Keep the default value, 0. To specify an offset: Enter an integer from -2147483648 to 2147483647
    pub fn set_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// Specify a time delta, in milliseconds, to offset the audio from the input video. To specify no offset: Keep the default value, 0. To specify an offset: Enter an integer from -2147483648 to 2147483647
    pub fn get_offset(&self) -> &::std::option::Option<i32> {
        &self.offset
    }
    /// Specify which audio tracks to dynamically select from your source. To select all audio tracks: Keep the default value, All tracks. To select all audio tracks with a specific language code: Choose Language code. When you do, you must also specify a language code under the Language code setting. If there is no matching Language code in your source, then no track will be selected.
    pub fn selector_type(mut self, input: crate::types::DynamicAudioSelectorType) -> Self {
        self.selector_type = ::std::option::Option::Some(input);
        self
    }
    /// Specify which audio tracks to dynamically select from your source. To select all audio tracks: Keep the default value, All tracks. To select all audio tracks with a specific language code: Choose Language code. When you do, you must also specify a language code under the Language code setting. If there is no matching Language code in your source, then no track will be selected.
    pub fn set_selector_type(mut self, input: ::std::option::Option<crate::types::DynamicAudioSelectorType>) -> Self {
        self.selector_type = input;
        self
    }
    /// Specify which audio tracks to dynamically select from your source. To select all audio tracks: Keep the default value, All tracks. To select all audio tracks with a specific language code: Choose Language code. When you do, you must also specify a language code under the Language code setting. If there is no matching Language code in your source, then no track will be selected.
    pub fn get_selector_type(&self) -> &::std::option::Option<crate::types::DynamicAudioSelectorType> {
        &self.selector_type
    }
    /// Consumes the builder and constructs a [`DynamicAudioSelector`](crate::types::DynamicAudioSelector).
    pub fn build(self) -> crate::types::DynamicAudioSelector {
        crate::types::DynamicAudioSelector {
            audio_duration_correction: self.audio_duration_correction,
            external_audio_file_input: self.external_audio_file_input,
            language_code: self.language_code,
            offset: self.offset,
            selector_type: self.selector_type,
        }
    }
}
