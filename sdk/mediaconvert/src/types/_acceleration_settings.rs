// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccelerationSettings {
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    pub mode: ::std::option::Option<crate::types::AccelerationMode>,
}
impl AccelerationSettings {
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    pub fn mode(&self) -> ::std::option::Option<&crate::types::AccelerationMode> {
        self.mode.as_ref()
    }
}
impl AccelerationSettings {
    /// Creates a new builder-style object to manufacture [`AccelerationSettings`](crate::types::AccelerationSettings).
    pub fn builder() -> crate::types::builders::AccelerationSettingsBuilder {
        crate::types::builders::AccelerationSettingsBuilder::default()
    }
}

/// A builder for [`AccelerationSettings`](crate::types::AccelerationSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccelerationSettingsBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::AccelerationMode>,
}
impl AccelerationSettingsBuilder {
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    /// This field is required.
    pub fn mode(mut self, input: crate::types::AccelerationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::AccelerationMode>) -> Self {
        self.mode = input;
        self
    }
    /// Specify the conditions when the service will run your job with accelerated transcoding.
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::AccelerationMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`AccelerationSettings`](crate::types::AccelerationSettings).
    pub fn build(self) -> crate::types::AccelerationSettings {
        crate::types::AccelerationSettings { mode: self.mode }
    }
}
