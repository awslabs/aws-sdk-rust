// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to your File output group. MediaConvert uses this group of settings to generate a single standalone file, rather than a streaming package. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to FILE_GROUP_SETTINGS.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FileGroupSettings {
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// Settings associated with the destination. Will vary based on the type of destination
    #[doc(hidden)]
    pub destination_settings: std::option::Option<crate::types::DestinationSettings>,
}
impl FileGroupSettings {
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn destination_settings(&self) -> std::option::Option<&crate::types::DestinationSettings> {
        self.destination_settings.as_ref()
    }
}
impl FileGroupSettings {
    /// Creates a new builder-style object to manufacture [`FileGroupSettings`](crate::types::FileGroupSettings).
    pub fn builder() -> crate::types::builders::FileGroupSettingsBuilder {
        crate::types::builders::FileGroupSettingsBuilder::default()
    }
}

/// A builder for [`FileGroupSettings`](crate::types::FileGroupSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FileGroupSettingsBuilder {
    pub(crate) destination: std::option::Option<std::string::String>,
    pub(crate) destination_settings: std::option::Option<crate::types::DestinationSettings>,
}
impl FileGroupSettingsBuilder {
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn destination_settings(mut self, input: crate::types::DestinationSettings) -> Self {
        self.destination_settings = Some(input);
        self
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn set_destination_settings(
        mut self,
        input: std::option::Option<crate::types::DestinationSettings>,
    ) -> Self {
        self.destination_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`FileGroupSettings`](crate::types::FileGroupSettings).
    pub fn build(self) -> crate::types::FileGroupSettings {
        crate::types::FileGroupSettings {
            destination: self.destination,
            destination_settings: self.destination_settings,
        }
    }
}
