// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Specify one or more Transitions for your video overlay. Use Transitions to reposition or resize your overlay over time. To use the same position and size for the duration of your video overlay: Leave blank. To specify a Transition: Enter a value for Start timecode, End Timecode, X Position, Y Position, Width, or Height.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoOverlayTransition {
    /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
    pub end_position: ::std::option::Option<crate::types::VideoOverlayPosition>,
    /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub end_timecode: ::std::option::Option<::std::string::String>,
    /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub start_timecode: ::std::option::Option<::std::string::String>,
}
impl VideoOverlayTransition {
    /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
    pub fn end_position(&self) -> ::std::option::Option<&crate::types::VideoOverlayPosition> {
        self.end_position.as_ref()
    }
    /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn end_timecode(&self) -> ::std::option::Option<&str> {
        self.end_timecode.as_deref()
    }
    /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn start_timecode(&self) -> ::std::option::Option<&str> {
        self.start_timecode.as_deref()
    }
}
impl VideoOverlayTransition {
    /// Creates a new builder-style object to manufacture [`VideoOverlayTransition`](crate::types::VideoOverlayTransition).
    pub fn builder() -> crate::types::builders::VideoOverlayTransitionBuilder {
        crate::types::builders::VideoOverlayTransitionBuilder::default()
    }
}

/// A builder for [`VideoOverlayTransition`](crate::types::VideoOverlayTransition).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoOverlayTransitionBuilder {
    pub(crate) end_position: ::std::option::Option<crate::types::VideoOverlayPosition>,
    pub(crate) end_timecode: ::std::option::Option<::std::string::String>,
    pub(crate) start_timecode: ::std::option::Option<::std::string::String>,
}
impl VideoOverlayTransitionBuilder {
    /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
    pub fn end_position(mut self, input: crate::types::VideoOverlayPosition) -> Self {
        self.end_position = ::std::option::Option::Some(input);
        self
    }
    /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
    pub fn set_end_position(mut self, input: ::std::option::Option<crate::types::VideoOverlayPosition>) -> Self {
        self.end_position = input;
        self
    }
    /// Specify the ending position for this transition, relative to the base input video's frame. Your video overlay will move smoothly to this position, beginning at this transition's Start timecode and ending at this transition's End timecode.
    pub fn get_end_position(&self) -> &::std::option::Option<crate::types::VideoOverlayPosition> {
        &self.end_position
    }
    /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn end_timecode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end_timecode = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn set_end_timecode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end_timecode = input;
        self
    }
    /// Specify the timecode for when this transition ends. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn get_end_timecode(&self) -> &::std::option::Option<::std::string::String> {
        &self.end_timecode
    }
    /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn start_timecode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_timecode = ::std::option::Option::Some(input.into());
        self
    }
    /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn set_start_timecode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_timecode = input;
        self
    }
    /// Specify the timecode for when this transition begins. Use the format HH:MM:SS:FF or HH:MM:SS;FF, where HH is the hour, MM is the minute, SS is the second, and FF is the frame number. When entering this value, take into account your choice for Timecode source.
    pub fn get_start_timecode(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_timecode
    }
    /// Consumes the builder and constructs a [`VideoOverlayTransition`](crate::types::VideoOverlayTransition).
    pub fn build(self) -> crate::types::VideoOverlayTransition {
        crate::types::VideoOverlayTransition {
            end_position: self.end_position,
            end_timecode: self.end_timecode,
            start_timecode: self.start_timecode,
        }
    }
}
