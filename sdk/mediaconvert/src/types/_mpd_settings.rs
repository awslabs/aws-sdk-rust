// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MpdSettings {
    /// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <accessibility>
    /// elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
    /// <accessibility schemeiduri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng" />
    /// </accessibility>
    #[doc(hidden)]
    pub accessibility_caption_hints:
        std::option::Option<crate::types::MpdAccessibilityCaptionHints>,
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    #[doc(hidden)]
    pub audio_duration: std::option::Option<crate::types::MpdAudioDuration>,
    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    #[doc(hidden)]
    pub caption_container_type: std::option::Option<crate::types::MpdCaptionContainerType>,
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    #[doc(hidden)]
    pub klv_metadata: std::option::Option<crate::types::MpdKlvMetadata>,
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    #[doc(hidden)]
    pub manifest_metadata_signaling:
        std::option::Option<crate::types::MpdManifestMetadataSignaling>,
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    #[doc(hidden)]
    pub scte35_esam: std::option::Option<crate::types::MpdScte35Esam>,
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    #[doc(hidden)]
    pub scte35_source: std::option::Option<crate::types::MpdScte35Source>,
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    #[doc(hidden)]
    pub timed_metadata: std::option::Option<crate::types::MpdTimedMetadata>,
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_box_version: std::option::Option<crate::types::MpdTimedMetadataBoxVersion>,
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_scheme_id_uri: std::option::Option<std::string::String>,
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    #[doc(hidden)]
    pub timed_metadata_value: std::option::Option<std::string::String>,
}
impl MpdSettings {
    /// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <accessibility>
    /// elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
    /// <accessibility schemeiduri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng" />
    /// </accessibility>
    pub fn accessibility_caption_hints(
        &self,
    ) -> std::option::Option<&crate::types::MpdAccessibilityCaptionHints> {
        self.accessibility_caption_hints.as_ref()
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(&self) -> std::option::Option<&crate::types::MpdAudioDuration> {
        self.audio_duration.as_ref()
    }
    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    pub fn caption_container_type(
        &self,
    ) -> std::option::Option<&crate::types::MpdCaptionContainerType> {
        self.caption_container_type.as_ref()
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn klv_metadata(&self) -> std::option::Option<&crate::types::MpdKlvMetadata> {
        self.klv_metadata.as_ref()
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn manifest_metadata_signaling(
        &self,
    ) -> std::option::Option<&crate::types::MpdManifestMetadataSignaling> {
        self.manifest_metadata_signaling.as_ref()
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn scte35_esam(&self) -> std::option::Option<&crate::types::MpdScte35Esam> {
        self.scte35_esam.as_ref()
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn scte35_source(&self) -> std::option::Option<&crate::types::MpdScte35Source> {
        self.scte35_source.as_ref()
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn timed_metadata(&self) -> std::option::Option<&crate::types::MpdTimedMetadata> {
        self.timed_metadata.as_ref()
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_box_version(
        &self,
    ) -> std::option::Option<&crate::types::MpdTimedMetadataBoxVersion> {
        self.timed_metadata_box_version.as_ref()
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_scheme_id_uri(&self) -> std::option::Option<&str> {
        self.timed_metadata_scheme_id_uri.as_deref()
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_value(&self) -> std::option::Option<&str> {
        self.timed_metadata_value.as_deref()
    }
}
impl MpdSettings {
    /// Creates a new builder-style object to manufacture [`MpdSettings`](crate::types::MpdSettings).
    pub fn builder() -> crate::types::builders::MpdSettingsBuilder {
        crate::types::builders::MpdSettingsBuilder::default()
    }
}

/// A builder for [`MpdSettings`](crate::types::MpdSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MpdSettingsBuilder {
    pub(crate) accessibility_caption_hints:
        std::option::Option<crate::types::MpdAccessibilityCaptionHints>,
    pub(crate) audio_duration: std::option::Option<crate::types::MpdAudioDuration>,
    pub(crate) caption_container_type: std::option::Option<crate::types::MpdCaptionContainerType>,
    pub(crate) klv_metadata: std::option::Option<crate::types::MpdKlvMetadata>,
    pub(crate) manifest_metadata_signaling:
        std::option::Option<crate::types::MpdManifestMetadataSignaling>,
    pub(crate) scte35_esam: std::option::Option<crate::types::MpdScte35Esam>,
    pub(crate) scte35_source: std::option::Option<crate::types::MpdScte35Source>,
    pub(crate) timed_metadata: std::option::Option<crate::types::MpdTimedMetadata>,
    pub(crate) timed_metadata_box_version:
        std::option::Option<crate::types::MpdTimedMetadataBoxVersion>,
    pub(crate) timed_metadata_scheme_id_uri: std::option::Option<std::string::String>,
    pub(crate) timed_metadata_value: std::option::Option<std::string::String>,
}
impl MpdSettingsBuilder {
    /// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <accessibility>
    /// elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
    /// <accessibility schemeiduri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng" />
    /// </accessibility>
    pub fn accessibility_caption_hints(
        mut self,
        input: crate::types::MpdAccessibilityCaptionHints,
    ) -> Self {
        self.accessibility_caption_hints = Some(input);
        self
    }
    /// Optional. Choose Include (INCLUDE) to have MediaConvert mark up your DASH manifest with <accessibility>
    /// elements for embedded 608 captions. This markup isn't generally required, but some video players require it to discover and play embedded 608 captions. Keep the default value, Exclude (EXCLUDE), to leave these elements out. When you enable this setting, this is the markup that MediaConvert includes in your manifest:
    /// <accessibility schemeiduri="urn:scte:dash:cc:cea-608:2015" value="CC1=eng" />
    /// </accessibility>
    pub fn set_accessibility_caption_hints(
        mut self,
        input: std::option::Option<crate::types::MpdAccessibilityCaptionHints>,
    ) -> Self {
        self.accessibility_caption_hints = input;
        self
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(mut self, input: crate::types::MpdAudioDuration) -> Self {
        self.audio_duration = Some(input);
        self
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn set_audio_duration(
        mut self,
        input: std::option::Option<crate::types::MpdAudioDuration>,
    ) -> Self {
        self.audio_duration = input;
        self
    }
    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    pub fn caption_container_type(mut self, input: crate::types::MpdCaptionContainerType) -> Self {
        self.caption_container_type = Some(input);
        self
    }
    /// Use this setting only in DASH output groups that include sidecar TTML or IMSC captions. You specify sidecar captions in a separate output from your audio and video. Choose Raw (RAW) for captions in a single XML file in a raw container. Choose Fragmented MPEG-4 (FRAGMENTED_MP4) for captions in XML format contained within fragmented MP4 files. This set of fragmented MP4 files is separate from your video and audio fragmented MP4 files.
    pub fn set_caption_container_type(
        mut self,
        input: std::option::Option<crate::types::MpdCaptionContainerType>,
    ) -> Self {
        self.caption_container_type = input;
        self
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn klv_metadata(mut self, input: crate::types::MpdKlvMetadata) -> Self {
        self.klv_metadata = Some(input);
        self
    }
    /// To include key-length-value metadata in this output: Set KLV metadata insertion to Passthrough. MediaConvert reads KLV metadata present in your input and writes each instance to a separate event message box in the output, according to MISB ST1910.1. To exclude this KLV metadata: Set KLV metadata insertion to None or leave blank.
    pub fn set_klv_metadata(
        mut self,
        input: std::option::Option<crate::types::MpdKlvMetadata>,
    ) -> Self {
        self.klv_metadata = input;
        self
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn manifest_metadata_signaling(
        mut self,
        input: crate::types::MpdManifestMetadataSignaling,
    ) -> Self {
        self.manifest_metadata_signaling = Some(input);
        self
    }
    /// To add an InbandEventStream element in your output MPD manifest for each type of event message, set Manifest metadata signaling to Enabled. For ID3 event messages, the InbandEventStream element schemeIdUri will be same value that you specify for ID3 metadata scheme ID URI. For SCTE35 event messages, the InbandEventStream element schemeIdUri will be "urn:scte:scte35:2013:bin". To leave these elements out of your output MPD manifest, set Manifest metadata signaling to Disabled. To enable Manifest metadata signaling, you must also set SCTE-35 source to Passthrough, ESAM SCTE-35 to insert, or ID3 metadata (TimedMetadata) to Passthrough.
    pub fn set_manifest_metadata_signaling(
        mut self,
        input: std::option::Option<crate::types::MpdManifestMetadataSignaling>,
    ) -> Self {
        self.manifest_metadata_signaling = input;
        self
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn scte35_esam(mut self, input: crate::types::MpdScte35Esam) -> Self {
        self.scte35_esam = Some(input);
        self
    }
    /// Use this setting only when you specify SCTE-35 markers from ESAM. Choose INSERT to put SCTE-35 markers in this output at the insertion points that you specify in an ESAM XML document. Provide the document in the setting SCC XML (sccXml).
    pub fn set_scte35_esam(
        mut self,
        input: std::option::Option<crate::types::MpdScte35Esam>,
    ) -> Self {
        self.scte35_esam = input;
        self
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn scte35_source(mut self, input: crate::types::MpdScte35Source) -> Self {
        self.scte35_source = Some(input);
        self
    }
    /// Ignore this setting unless you have SCTE-35 markers in your input video file. Choose Passthrough (PASSTHROUGH) if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None (NONE) if you don't want those SCTE-35 markers in this output.
    pub fn set_scte35_source(
        mut self,
        input: std::option::Option<crate::types::MpdScte35Source>,
    ) -> Self {
        self.scte35_source = input;
        self
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn timed_metadata(mut self, input: crate::types::MpdTimedMetadata) -> Self {
        self.timed_metadata = Some(input);
        self
    }
    /// To include ID3 metadata in this output: Set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). Specify this ID3 metadata in Custom ID3 metadata inserter (timedMetadataInsertion). MediaConvert writes each instance of ID3 metadata in a separate Event Message (eMSG) box. To exclude this ID3 metadata: Set ID3 metadata to None (NONE) or leave blank.
    pub fn set_timed_metadata(
        mut self,
        input: std::option::Option<crate::types::MpdTimedMetadata>,
    ) -> Self {
        self.timed_metadata = input;
        self
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_box_version(
        mut self,
        input: crate::types::MpdTimedMetadataBoxVersion,
    ) -> Self {
        self.timed_metadata_box_version = Some(input);
        self
    }
    /// Specify the event message box (eMSG) version for ID3 timed metadata in your output. For more information, see ISO/IEC 23009-1:2022 section 5.10.3.3.3 Syntax. Leave blank to use the default value Version 0. When you specify Version 1, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_box_version(
        mut self,
        input: std::option::Option<crate::types::MpdTimedMetadataBoxVersion>,
    ) -> Self {
        self.timed_metadata_box_version = input;
        self
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_scheme_id_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.timed_metadata_scheme_id_uri = Some(input.into());
        self
    }
    /// Specify the event message box (eMSG) scheme ID URI (scheme_id_uri) for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. Leave blank to use the default value: https://aomedia.org/emsg/ID3 When you specify a value for ID3 metadata scheme ID URI, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_scheme_id_uri(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.timed_metadata_scheme_id_uri = input;
        self
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn timed_metadata_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.timed_metadata_value = Some(input.into());
        self
    }
    /// Specify the event message box (eMSG) value for ID3 timed metadata in your output. For more informaiton, see ISO/IEC 23009-1:2022 section 5.10.3.3.4 Semantics. When you specify a value for ID3 Metadata Value, you must also set ID3 metadata (timedMetadata) to Passthrough.
    pub fn set_timed_metadata_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.timed_metadata_value = input;
        self
    }
    /// Consumes the builder and constructs a [`MpdSettings`](crate::types::MpdSettings).
    pub fn build(self) -> crate::types::MpdSettings {
        crate::types::MpdSettings {
            accessibility_caption_hints: self.accessibility_caption_hints,
            audio_duration: self.audio_duration,
            caption_container_type: self.caption_container_type,
            klv_metadata: self.klv_metadata,
            manifest_metadata_signaling: self.manifest_metadata_signaling,
            scte35_esam: self.scte35_esam,
            scte35_source: self.scte35_source,
            timed_metadata: self.timed_metadata,
            timed_metadata_box_version: self.timed_metadata_box_version,
            timed_metadata_scheme_id_uri: self.timed_metadata_scheme_id_uri,
            timed_metadata_value: self.timed_metadata_value,
        }
    }
}
