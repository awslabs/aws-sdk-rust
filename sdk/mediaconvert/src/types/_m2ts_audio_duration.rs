// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `M2tsAudioDuration`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let m2tsaudioduration = unimplemented!();
/// match m2tsaudioduration {
///     M2tsAudioDuration::DefaultCodecDuration => { /* ... */ },
///     M2tsAudioDuration::MatchVideoDuration => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `m2tsaudioduration` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `M2tsAudioDuration::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `M2tsAudioDuration::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `M2tsAudioDuration::NewFeature` is defined.
/// Specifically, when `m2tsaudioduration` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `M2tsAudioDuration::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration (MATCH_VIDEO_DURATION). In all other cases, keep the default value, Default codec duration (DEFAULT_CODEC_DURATION). When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum M2tsAudioDuration {
    #[allow(missing_docs)] // documentation missing in model
    DefaultCodecDuration,
    #[allow(missing_docs)] // documentation missing in model
    MatchVideoDuration,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for M2tsAudioDuration {
    fn from(s: &str) -> Self {
        match s {
            "DEFAULT_CODEC_DURATION" => M2tsAudioDuration::DefaultCodecDuration,
            "MATCH_VIDEO_DURATION" => M2tsAudioDuration::MatchVideoDuration,
            other => {
                M2tsAudioDuration::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for M2tsAudioDuration {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(M2tsAudioDuration::from(s))
    }
}
impl M2tsAudioDuration {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            M2tsAudioDuration::DefaultCodecDuration => "DEFAULT_CODEC_DURATION",
            M2tsAudioDuration::MatchVideoDuration => "MATCH_VIDEO_DURATION",
            M2tsAudioDuration::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["DEFAULT_CODEC_DURATION", "MATCH_VIDEO_DURATION"]
    }
}
impl AsRef<str> for M2tsAudioDuration {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
