// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `TransferCharacteristics`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let transfercharacteristics = unimplemented!();
/// match transfercharacteristics {
///     TransferCharacteristics::AribB67 => { /* ... */ },
///     TransferCharacteristics::Iec6196621 => { /* ... */ },
///     TransferCharacteristics::Iec6196624 => { /* ... */ },
///     TransferCharacteristics::Itu1361 => { /* ... */ },
///     TransferCharacteristics::Itu202010bit => { /* ... */ },
///     TransferCharacteristics::Itu202012bit => { /* ... */ },
///     TransferCharacteristics::Itu470Bg => { /* ... */ },
///     TransferCharacteristics::Itu470M => { /* ... */ },
///     TransferCharacteristics::Itu709 => { /* ... */ },
///     TransferCharacteristics::Last => { /* ... */ },
///     TransferCharacteristics::Linear => { /* ... */ },
///     TransferCharacteristics::Loc1025 => { /* ... */ },
///     TransferCharacteristics::Log102 => { /* ... */ },
///     TransferCharacteristics::Reserved => { /* ... */ },
///     TransferCharacteristics::Smpte170M => { /* ... */ },
///     TransferCharacteristics::Smpte2084 => { /* ... */ },
///     TransferCharacteristics::Smpte240M => { /* ... */ },
///     TransferCharacteristics::Smpte4281 => { /* ... */ },
///     TransferCharacteristics::Unspecified => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `transfercharacteristics` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TransferCharacteristics::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TransferCharacteristics::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TransferCharacteristics::NewFeature` is defined.
/// Specifically, when `transfercharacteristics` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TransferCharacteristics::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// The color space transfer characteristics of the video track, defining the relationship between linear light values and the encoded signal values. This affects brightness and contrast reproduction.
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum TransferCharacteristics {
    #[allow(missing_docs)] // documentation missing in model
    AribB67,
    #[allow(missing_docs)] // documentation missing in model
    Iec6196621,
    #[allow(missing_docs)] // documentation missing in model
    Iec6196624,
    #[allow(missing_docs)] // documentation missing in model
    Itu1361,
    #[allow(missing_docs)] // documentation missing in model
    Itu202010bit,
    #[allow(missing_docs)] // documentation missing in model
    Itu202012bit,
    #[allow(missing_docs)] // documentation missing in model
    Itu470Bg,
    #[allow(missing_docs)] // documentation missing in model
    Itu470M,
    #[allow(missing_docs)] // documentation missing in model
    Itu709,
    #[allow(missing_docs)] // documentation missing in model
    Last,
    #[allow(missing_docs)] // documentation missing in model
    Linear,
    #[allow(missing_docs)] // documentation missing in model
    Loc1025,
    #[allow(missing_docs)] // documentation missing in model
    Log102,
    #[allow(missing_docs)] // documentation missing in model
    Reserved,
    #[allow(missing_docs)] // documentation missing in model
    Smpte170M,
    #[allow(missing_docs)] // documentation missing in model
    Smpte2084,
    #[allow(missing_docs)] // documentation missing in model
    Smpte240M,
    #[allow(missing_docs)] // documentation missing in model
    Smpte4281,
    #[allow(missing_docs)] // documentation missing in model
    Unspecified,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for TransferCharacteristics {
    fn from(s: &str) -> Self {
        match s {
            "ARIB_B67" => TransferCharacteristics::AribB67,
            "IEC_61966_2_1" => TransferCharacteristics::Iec6196621,
            "IEC_61966_2_4" => TransferCharacteristics::Iec6196624,
            "ITU_1361" => TransferCharacteristics::Itu1361,
            "ITU_2020_10bit" => TransferCharacteristics::Itu202010bit,
            "ITU_2020_12bit" => TransferCharacteristics::Itu202012bit,
            "ITU_470BG" => TransferCharacteristics::Itu470Bg,
            "ITU_470M" => TransferCharacteristics::Itu470M,
            "ITU_709" => TransferCharacteristics::Itu709,
            "LAST" => TransferCharacteristics::Last,
            "LINEAR" => TransferCharacteristics::Linear,
            "LOC10_2_5" => TransferCharacteristics::Loc1025,
            "LOG10_2" => TransferCharacteristics::Log102,
            "RESERVED" => TransferCharacteristics::Reserved,
            "SMPTE_170M" => TransferCharacteristics::Smpte170M,
            "SMPTE_2084" => TransferCharacteristics::Smpte2084,
            "SMPTE_240M" => TransferCharacteristics::Smpte240M,
            "SMPTE_428_1" => TransferCharacteristics::Smpte4281,
            "UNSPECIFIED" => TransferCharacteristics::Unspecified,
            other => TransferCharacteristics::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for TransferCharacteristics {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(TransferCharacteristics::from(s))
    }
}
impl TransferCharacteristics {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TransferCharacteristics::AribB67 => "ARIB_B67",
            TransferCharacteristics::Iec6196621 => "IEC_61966_2_1",
            TransferCharacteristics::Iec6196624 => "IEC_61966_2_4",
            TransferCharacteristics::Itu1361 => "ITU_1361",
            TransferCharacteristics::Itu202010bit => "ITU_2020_10bit",
            TransferCharacteristics::Itu202012bit => "ITU_2020_12bit",
            TransferCharacteristics::Itu470Bg => "ITU_470BG",
            TransferCharacteristics::Itu470M => "ITU_470M",
            TransferCharacteristics::Itu709 => "ITU_709",
            TransferCharacteristics::Last => "LAST",
            TransferCharacteristics::Linear => "LINEAR",
            TransferCharacteristics::Loc1025 => "LOC10_2_5",
            TransferCharacteristics::Log102 => "LOG10_2",
            TransferCharacteristics::Reserved => "RESERVED",
            TransferCharacteristics::Smpte170M => "SMPTE_170M",
            TransferCharacteristics::Smpte2084 => "SMPTE_2084",
            TransferCharacteristics::Smpte240M => "SMPTE_240M",
            TransferCharacteristics::Smpte4281 => "SMPTE_428_1",
            TransferCharacteristics::Unspecified => "UNSPECIFIED",
            TransferCharacteristics::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ARIB_B67",
            "IEC_61966_2_1",
            "IEC_61966_2_4",
            "ITU_1361",
            "ITU_2020_10bit",
            "ITU_2020_12bit",
            "ITU_470BG",
            "ITU_470M",
            "ITU_709",
            "LAST",
            "LINEAR",
            "LOC10_2_5",
            "LOG10_2",
            "RESERVED",
            "SMPTE_170M",
            "SMPTE_2084",
            "SMPTE_240M",
            "SMPTE_428_1",
            "UNSPECIFIED",
        ]
    }
}
impl ::std::convert::AsRef<str> for TransferCharacteristics {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl TransferCharacteristics {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for TransferCharacteristics {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            TransferCharacteristics::AribB67 => write!(f, "ARIB_B67"),
            TransferCharacteristics::Iec6196621 => write!(f, "IEC_61966_2_1"),
            TransferCharacteristics::Iec6196624 => write!(f, "IEC_61966_2_4"),
            TransferCharacteristics::Itu1361 => write!(f, "ITU_1361"),
            TransferCharacteristics::Itu202010bit => write!(f, "ITU_2020_10bit"),
            TransferCharacteristics::Itu202012bit => write!(f, "ITU_2020_12bit"),
            TransferCharacteristics::Itu470Bg => write!(f, "ITU_470BG"),
            TransferCharacteristics::Itu470M => write!(f, "ITU_470M"),
            TransferCharacteristics::Itu709 => write!(f, "ITU_709"),
            TransferCharacteristics::Last => write!(f, "LAST"),
            TransferCharacteristics::Linear => write!(f, "LINEAR"),
            TransferCharacteristics::Loc1025 => write!(f, "LOC10_2_5"),
            TransferCharacteristics::Log102 => write!(f, "LOG10_2"),
            TransferCharacteristics::Reserved => write!(f, "RESERVED"),
            TransferCharacteristics::Smpte170M => write!(f, "SMPTE_170M"),
            TransferCharacteristics::Smpte2084 => write!(f, "SMPTE_2084"),
            TransferCharacteristics::Smpte240M => write!(f, "SMPTE_240M"),
            TransferCharacteristics::Smpte4281 => write!(f, "SMPTE_428_1"),
            TransferCharacteristics::Unspecified => write!(f, "UNSPECIFIED"),
            TransferCharacteristics::Unknown(value) => write!(f, "{value}"),
        }
    }
}
