// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value VP9.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Vp9Settings {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    #[doc(hidden)]
    pub bitrate: i32,
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    #[doc(hidden)]
    pub framerate_control: std::option::Option<crate::types::Vp9FramerateControl>,
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    #[doc(hidden)]
    pub framerate_conversion_algorithm:
        std::option::Option<crate::types::Vp9FramerateConversionAlgorithm>,
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    #[doc(hidden)]
    pub framerate_denominator: i32,
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    #[doc(hidden)]
    pub framerate_numerator: i32,
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    #[doc(hidden)]
    pub gop_size: f64,
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    #[doc(hidden)]
    pub hrd_buffer_size: i32,
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    #[doc(hidden)]
    pub max_bitrate: i32,
    /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
    #[doc(hidden)]
    pub par_control: std::option::Option<crate::types::Vp9ParControl>,
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    #[doc(hidden)]
    pub par_denominator: i32,
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    #[doc(hidden)]
    pub par_numerator: i32,
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    #[doc(hidden)]
    pub quality_tuning_level: std::option::Option<crate::types::Vp9QualityTuningLevel>,
    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    #[doc(hidden)]
    pub rate_control_mode: std::option::Option<crate::types::Vp9RateControlMode>,
}
impl Vp9Settings {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    pub fn bitrate(&self) -> i32 {
        self.bitrate
    }
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn framerate_control(&self) -> std::option::Option<&crate::types::Vp9FramerateControl> {
        self.framerate_control.as_ref()
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn framerate_conversion_algorithm(
        &self,
    ) -> std::option::Option<&crate::types::Vp9FramerateConversionAlgorithm> {
        self.framerate_conversion_algorithm.as_ref()
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_denominator(&self) -> i32 {
        self.framerate_denominator
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_numerator(&self) -> i32 {
        self.framerate_numerator
    }
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    pub fn gop_size(&self) -> f64 {
        self.gop_size
    }
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    pub fn hrd_buffer_size(&self) -> i32 {
        self.hrd_buffer_size
    }
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    pub fn max_bitrate(&self) -> i32 {
        self.max_bitrate
    }
    /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
    pub fn par_control(&self) -> std::option::Option<&crate::types::Vp9ParControl> {
        self.par_control.as_ref()
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    pub fn par_denominator(&self) -> i32 {
        self.par_denominator
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    pub fn par_numerator(&self) -> i32 {
        self.par_numerator
    }
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    pub fn quality_tuning_level(
        &self,
    ) -> std::option::Option<&crate::types::Vp9QualityTuningLevel> {
        self.quality_tuning_level.as_ref()
    }
    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    pub fn rate_control_mode(&self) -> std::option::Option<&crate::types::Vp9RateControlMode> {
        self.rate_control_mode.as_ref()
    }
}
impl Vp9Settings {
    /// Creates a new builder-style object to manufacture [`Vp9Settings`](crate::types::Vp9Settings).
    pub fn builder() -> crate::types::builders::Vp9SettingsBuilder {
        crate::types::builders::Vp9SettingsBuilder::default()
    }
}

/// A builder for [`Vp9Settings`](crate::types::Vp9Settings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Vp9SettingsBuilder {
    pub(crate) bitrate: std::option::Option<i32>,
    pub(crate) framerate_control: std::option::Option<crate::types::Vp9FramerateControl>,
    pub(crate) framerate_conversion_algorithm:
        std::option::Option<crate::types::Vp9FramerateConversionAlgorithm>,
    pub(crate) framerate_denominator: std::option::Option<i32>,
    pub(crate) framerate_numerator: std::option::Option<i32>,
    pub(crate) gop_size: std::option::Option<f64>,
    pub(crate) hrd_buffer_size: std::option::Option<i32>,
    pub(crate) max_bitrate: std::option::Option<i32>,
    pub(crate) par_control: std::option::Option<crate::types::Vp9ParControl>,
    pub(crate) par_denominator: std::option::Option<i32>,
    pub(crate) par_numerator: std::option::Option<i32>,
    pub(crate) quality_tuning_level: std::option::Option<crate::types::Vp9QualityTuningLevel>,
    pub(crate) rate_control_mode: std::option::Option<crate::types::Vp9RateControlMode>,
}
impl Vp9SettingsBuilder {
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    pub fn bitrate(mut self, input: i32) -> Self {
        self.bitrate = Some(input);
        self
    }
    /// Target bitrate in bits/second. For example, enter five megabits per second as 5000000.
    pub fn set_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.bitrate = input;
        self
    }
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn framerate_control(mut self, input: crate::types::Vp9FramerateControl) -> Self {
        self.framerate_control = Some(input);
        self
    }
    /// If you are using the console, use the Framerate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list or choose Custom. The framerates shown in the dropdown list are decimal approximations of fractions. If you choose Custom, specify your frame rate as a fraction. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn set_framerate_control(
        mut self,
        input: std::option::Option<crate::types::Vp9FramerateControl>,
    ) -> Self {
        self.framerate_control = input;
        self
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn framerate_conversion_algorithm(
        mut self,
        input: crate::types::Vp9FramerateConversionAlgorithm,
    ) -> Self {
        self.framerate_conversion_algorithm = Some(input);
        self
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn set_framerate_conversion_algorithm(
        mut self,
        input: std::option::Option<crate::types::Vp9FramerateConversionAlgorithm>,
    ) -> Self {
        self.framerate_conversion_algorithm = input;
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_denominator(mut self, input: i32) -> Self {
        self.framerate_denominator = Some(input);
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn set_framerate_denominator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_denominator = input;
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_numerator(mut self, input: i32) -> Self {
        self.framerate_numerator = Some(input);
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn set_framerate_numerator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_numerator = input;
        self
    }
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    pub fn gop_size(mut self, input: f64) -> Self {
        self.gop_size = Some(input);
        self
    }
    /// GOP Length (keyframe interval) in frames. Must be greater than zero.
    pub fn set_gop_size(mut self, input: std::option::Option<f64>) -> Self {
        self.gop_size = input;
        self
    }
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    pub fn hrd_buffer_size(mut self, input: i32) -> Self {
        self.hrd_buffer_size = Some(input);
        self
    }
    /// Size of buffer (HRD buffer model) in bits. For example, enter five megabits as 5000000.
    pub fn set_hrd_buffer_size(mut self, input: std::option::Option<i32>) -> Self {
        self.hrd_buffer_size = input;
        self
    }
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    pub fn max_bitrate(mut self, input: i32) -> Self {
        self.max_bitrate = Some(input);
        self
    }
    /// Ignore this setting unless you set qualityTuningLevel to MULTI_PASS. Optional. Specify the maximum bitrate in bits/second. For example, enter five megabits per second as 5000000. The default behavior uses twice the target bitrate as the maximum bitrate.
    pub fn set_max_bitrate(mut self, input: std::option::Option<i32>) -> Self {
        self.max_bitrate = input;
        self
    }
    /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
    pub fn par_control(mut self, input: crate::types::Vp9ParControl) -> Self {
        self.par_control = Some(input);
        self
    }
    /// Optional. Specify how the service determines the pixel aspect ratio for this output. The default behavior is to use the same pixel aspect ratio as your input video.
    pub fn set_par_control(
        mut self,
        input: std::option::Option<crate::types::Vp9ParControl>,
    ) -> Self {
        self.par_control = input;
        self
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    pub fn par_denominator(mut self, input: i32) -> Self {
        self.par_denominator = Some(input);
        self
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parDenominator is 33.
    pub fn set_par_denominator(mut self, input: std::option::Option<i32>) -> Self {
        self.par_denominator = input;
        self
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    pub fn par_numerator(mut self, input: i32) -> Self {
        self.par_numerator = Some(input);
        self
    }
    /// Required when you set Pixel aspect ratio (parControl) to SPECIFIED. On the console, this corresponds to any value other than Follow source. When you specify an output pixel aspect ratio (PAR) that is different from your input video PAR, provide your output PAR as a ratio. For example, for D1/DV NTSC widescreen, you would specify the ratio 40:33. In this example, the value for parNumerator is 40.
    pub fn set_par_numerator(mut self, input: std::option::Option<i32>) -> Self {
        self.par_numerator = input;
        self
    }
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    pub fn quality_tuning_level(mut self, input: crate::types::Vp9QualityTuningLevel) -> Self {
        self.quality_tuning_level = Some(input);
        self
    }
    /// Optional. Use Quality tuning level (qualityTuningLevel) to choose how you want to trade off encoding speed for output video quality. The default behavior is faster, lower quality, multi-pass encoding.
    pub fn set_quality_tuning_level(
        mut self,
        input: std::option::Option<crate::types::Vp9QualityTuningLevel>,
    ) -> Self {
        self.quality_tuning_level = input;
        self
    }
    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    pub fn rate_control_mode(mut self, input: crate::types::Vp9RateControlMode) -> Self {
        self.rate_control_mode = Some(input);
        self
    }
    /// With the VP9 codec, you can use only the variable bitrate (VBR) rate control mode.
    pub fn set_rate_control_mode(
        mut self,
        input: std::option::Option<crate::types::Vp9RateControlMode>,
    ) -> Self {
        self.rate_control_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`Vp9Settings`](crate::types::Vp9Settings).
    pub fn build(self) -> crate::types::Vp9Settings {
        crate::types::Vp9Settings {
            bitrate: self.bitrate.unwrap_or_default(),
            framerate_control: self.framerate_control,
            framerate_conversion_algorithm: self.framerate_conversion_algorithm,
            framerate_denominator: self.framerate_denominator.unwrap_or_default(),
            framerate_numerator: self.framerate_numerator.unwrap_or_default(),
            gop_size: self.gop_size.unwrap_or_default(),
            hrd_buffer_size: self.hrd_buffer_size.unwrap_or_default(),
            max_bitrate: self.max_bitrate.unwrap_or_default(),
            par_control: self.par_control,
            par_denominator: self.par_denominator.unwrap_or_default(),
            par_numerator: self.par_numerator.unwrap_or_default(),
            quality_tuning_level: self.quality_tuning_level,
            rate_control_mode: self.rate_control_mode,
        }
    }
}
