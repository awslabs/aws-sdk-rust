// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NielsenNonLinearWatermarkSettings {
    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
    #[doc(hidden)]
    pub active_watermark_process:
        std::option::Option<crate::types::NielsenActiveWatermarkProcessType>,
    /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination (metadataDestination).
    #[doc(hidden)]
    pub adi_filename: std::option::Option<std::string::String>,
    /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
    #[doc(hidden)]
    pub asset_id: std::option::Option<std::string::String>,
    /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
    #[doc(hidden)]
    pub asset_name: std::option::Option<std::string::String>,
    /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types (ActiveWatermarkProcess) that includes CBET.
    #[doc(hidden)]
    pub cbet_source_id: std::option::Option<std::string::String>,
    /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
    #[doc(hidden)]
    pub episode_id: std::option::Option<std::string::String>,
    /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file (adiFilename) to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
    #[doc(hidden)]
    pub metadata_destination: std::option::Option<std::string::String>,
    /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
    #[doc(hidden)]
    pub source_id: i32,
    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
    #[doc(hidden)]
    pub source_watermark_status:
        std::option::Option<crate::types::NielsenSourceWatermarkStatusType>,
    /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
    #[doc(hidden)]
    pub tic_server_url: std::option::Option<std::string::String>,
    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
    #[doc(hidden)]
    pub unique_tic_per_audio_track:
        std::option::Option<crate::types::NielsenUniqueTicPerAudioTrackType>,
}
impl NielsenNonLinearWatermarkSettings {
    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
    pub fn active_watermark_process(
        &self,
    ) -> std::option::Option<&crate::types::NielsenActiveWatermarkProcessType> {
        self.active_watermark_process.as_ref()
    }
    /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination (metadataDestination).
    pub fn adi_filename(&self) -> std::option::Option<&str> {
        self.adi_filename.as_deref()
    }
    /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
    pub fn asset_id(&self) -> std::option::Option<&str> {
        self.asset_id.as_deref()
    }
    /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
    pub fn asset_name(&self) -> std::option::Option<&str> {
        self.asset_name.as_deref()
    }
    /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types (ActiveWatermarkProcess) that includes CBET.
    pub fn cbet_source_id(&self) -> std::option::Option<&str> {
        self.cbet_source_id.as_deref()
    }
    /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
    pub fn episode_id(&self) -> std::option::Option<&str> {
        self.episode_id.as_deref()
    }
    /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file (adiFilename) to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
    pub fn metadata_destination(&self) -> std::option::Option<&str> {
        self.metadata_destination.as_deref()
    }
    /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
    pub fn source_id(&self) -> i32 {
        self.source_id
    }
    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
    pub fn source_watermark_status(
        &self,
    ) -> std::option::Option<&crate::types::NielsenSourceWatermarkStatusType> {
        self.source_watermark_status.as_ref()
    }
    /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
    pub fn tic_server_url(&self) -> std::option::Option<&str> {
        self.tic_server_url.as_deref()
    }
    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
    pub fn unique_tic_per_audio_track(
        &self,
    ) -> std::option::Option<&crate::types::NielsenUniqueTicPerAudioTrackType> {
        self.unique_tic_per_audio_track.as_ref()
    }
}
impl NielsenNonLinearWatermarkSettings {
    /// Creates a new builder-style object to manufacture [`NielsenNonLinearWatermarkSettings`](crate::types::NielsenNonLinearWatermarkSettings).
    pub fn builder() -> crate::types::builders::NielsenNonLinearWatermarkSettingsBuilder {
        crate::types::builders::NielsenNonLinearWatermarkSettingsBuilder::default()
    }
}

/// A builder for [`NielsenNonLinearWatermarkSettings`](crate::types::NielsenNonLinearWatermarkSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NielsenNonLinearWatermarkSettingsBuilder {
    pub(crate) active_watermark_process:
        std::option::Option<crate::types::NielsenActiveWatermarkProcessType>,
    pub(crate) adi_filename: std::option::Option<std::string::String>,
    pub(crate) asset_id: std::option::Option<std::string::String>,
    pub(crate) asset_name: std::option::Option<std::string::String>,
    pub(crate) cbet_source_id: std::option::Option<std::string::String>,
    pub(crate) episode_id: std::option::Option<std::string::String>,
    pub(crate) metadata_destination: std::option::Option<std::string::String>,
    pub(crate) source_id: std::option::Option<i32>,
    pub(crate) source_watermark_status:
        std::option::Option<crate::types::NielsenSourceWatermarkStatusType>,
    pub(crate) tic_server_url: std::option::Option<std::string::String>,
    pub(crate) unique_tic_per_audio_track:
        std::option::Option<crate::types::NielsenUniqueTicPerAudioTrackType>,
}
impl NielsenNonLinearWatermarkSettingsBuilder {
    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
    pub fn active_watermark_process(
        mut self,
        input: crate::types::NielsenActiveWatermarkProcessType,
    ) -> Self {
        self.active_watermark_process = Some(input);
        self
    }
    /// Choose the type of Nielsen watermarks that you want in your outputs. When you choose NAES 2 and NW (NAES2_AND_NW), you must provide a value for the setting SID (sourceId). When you choose CBET (CBET), you must provide a value for the setting CSID (cbetSourceId). When you choose NAES 2, NW, and CBET (NAES2_AND_NW_AND_CBET), you must provide values for both of these settings.
    pub fn set_active_watermark_process(
        mut self,
        input: std::option::Option<crate::types::NielsenActiveWatermarkProcessType>,
    ) -> Self {
        self.active_watermark_process = input;
        self
    }
    /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination (metadataDestination).
    pub fn adi_filename(mut self, input: impl Into<std::string::String>) -> Self {
        self.adi_filename = Some(input.into());
        self
    }
    /// Optional. Use this setting when you want the service to include an ADI file in the Nielsen metadata .zip file. To provide an ADI file, store it in Amazon S3 and provide a URL to it here. The URL should be in the following format: S3://bucket/path/ADI-file. For more information about the metadata .zip file, see the setting Metadata destination (metadataDestination).
    pub fn set_adi_filename(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.adi_filename = input;
        self
    }
    /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
    pub fn asset_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_id = Some(input.into());
        self
    }
    /// Use the asset ID that you provide to Nielsen to uniquely identify this asset. Required for all Nielsen non-linear watermarking.
    pub fn set_asset_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_id = input;
        self
    }
    /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
    pub fn asset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.asset_name = Some(input.into());
        self
    }
    /// Use the asset name that you provide to Nielsen for this asset. Required for all Nielsen non-linear watermarking.
    pub fn set_asset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asset_name = input;
        self
    }
    /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types (ActiveWatermarkProcess) that includes CBET.
    pub fn cbet_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.cbet_source_id = Some(input.into());
        self
    }
    /// Use the CSID that Nielsen provides to you. This CBET source ID should be unique to your Nielsen account but common to all of your output assets that have CBET watermarking. Required when you choose a value for the setting Watermark types (ActiveWatermarkProcess) that includes CBET.
    pub fn set_cbet_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cbet_source_id = input;
        self
    }
    /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
    pub fn episode_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.episode_id = Some(input.into());
        self
    }
    /// Optional. If this asset uses an episode ID with Nielsen, provide it here.
    pub fn set_episode_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.episode_id = input;
        self
    }
    /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file (adiFilename) to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
    pub fn metadata_destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata_destination = Some(input.into());
        self
    }
    /// Specify the Amazon S3 location where you want MediaConvert to save your Nielsen non-linear metadata .zip file. This Amazon S3 bucket must be in the same Region as the one where you do your MediaConvert transcoding. If you want to include an ADI file in this .zip file, use the setting ADI file (adiFilename) to specify it. MediaConvert delivers the Nielsen metadata .zip files only to your metadata destination Amazon S3 bucket. It doesn't deliver the .zip files to Nielsen. You are responsible for delivering the metadata .zip files to Nielsen.
    pub fn set_metadata_destination(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.metadata_destination = input;
        self
    }
    /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
    pub fn source_id(mut self, input: i32) -> Self {
        self.source_id = Some(input);
        self
    }
    /// Use the SID that Nielsen provides to you. This source ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking. This ID should be unique to your Nielsen account but common to all of your output assets. Required for all Nielsen non-linear watermarking.
    pub fn set_source_id(mut self, input: std::option::Option<i32>) -> Self {
        self.source_id = input;
        self
    }
    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
    pub fn source_watermark_status(
        mut self,
        input: crate::types::NielsenSourceWatermarkStatusType,
    ) -> Self {
        self.source_watermark_status = Some(input);
        self
    }
    /// Required. Specify whether your source content already contains Nielsen non-linear watermarks. When you set this value to Watermarked (WATERMARKED), the service fails the job. Nielsen requires that you add non-linear watermarking to only clean content that doesn't already have non-linear Nielsen watermarks.
    pub fn set_source_watermark_status(
        mut self,
        input: std::option::Option<crate::types::NielsenSourceWatermarkStatusType>,
    ) -> Self {
        self.source_watermark_status = input;
        self
    }
    /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
    pub fn tic_server_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.tic_server_url = Some(input.into());
        self
    }
    /// Specify the endpoint for the TIC server that you have deployed and configured in the AWS Cloud. Required for all Nielsen non-linear watermarking. MediaConvert can't connect directly to a TIC server. Instead, you must use API Gateway to provide a RESTful interface between MediaConvert and a TIC server that you deploy in your AWS account. For more information on deploying a TIC server in your AWS account and the required API Gateway, contact Nielsen support.
    pub fn set_tic_server_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tic_server_url = input;
        self
    }
    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
    pub fn unique_tic_per_audio_track(
        mut self,
        input: crate::types::NielsenUniqueTicPerAudioTrackType,
    ) -> Self {
        self.unique_tic_per_audio_track = Some(input);
        self
    }
    /// To create assets that have the same TIC values in each audio track, keep the default value Share TICs (SAME_TICS_PER_TRACK). To create assets that have unique TIC values for each audio track, choose Use unique TICs (RESERVE_UNIQUE_TICS_PER_TRACK).
    pub fn set_unique_tic_per_audio_track(
        mut self,
        input: std::option::Option<crate::types::NielsenUniqueTicPerAudioTrackType>,
    ) -> Self {
        self.unique_tic_per_audio_track = input;
        self
    }
    /// Consumes the builder and constructs a [`NielsenNonLinearWatermarkSettings`](crate::types::NielsenNonLinearWatermarkSettings).
    pub fn build(self) -> crate::types::NielsenNonLinearWatermarkSettings {
        crate::types::NielsenNonLinearWatermarkSettings {
            active_watermark_process: self.active_watermark_process,
            adi_filename: self.adi_filename,
            asset_id: self.asset_id,
            asset_name: self.asset_name,
            cbet_source_id: self.cbet_source_id,
            episode_id: self.episode_id,
            metadata_destination: self.metadata_destination,
            source_id: self.source_id.unwrap_or_default(),
            source_watermark_status: self.source_watermark_status,
            tic_server_url: self.tic_server_url,
            unique_tic_per_audio_track: self.unique_tic_per_audio_track,
        }
    }
}
