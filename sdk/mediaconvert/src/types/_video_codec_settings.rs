// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Video codec settings contains the group of settings related to video encoding. The settings in this group vary depending on the value that you choose for Video codec. For each codec enum that you choose, define the corresponding settings object. The following lists the codec enum, settings object pairs. * AV1, Av1Settings * AVC_INTRA, AvcIntraSettings * FRAME_CAPTURE, FrameCaptureSettings * GIF, GifSettings * H_264, H264Settings * H_265, H265Settings * MPEG2, Mpeg2Settings * PRORES, ProresSettings * UNCOMPRESSED, UncompressedSettings * VC3, Vc3Settings * VP8, Vp8Settings * VP9, Vp9Settings * XAVC, XavcSettings
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VideoCodecSettings {
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
    pub av1_settings: ::std::option::Option<crate::types::Av1Settings>,
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    pub avc_intra_settings: ::std::option::Option<crate::types::AvcIntraSettings>,
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input without any video encoding: Choose Passthrough. More information about passthrough codec support and job settings requirements, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/video-passthrough-feature-restrictions.html
    pub codec: ::std::option::Option<crate::types::VideoCodec>,
    /// Required when you set Codec to the value FRAME_CAPTURE.
    pub frame_capture_settings: ::std::option::Option<crate::types::FrameCaptureSettings>,
    /// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value GIF
    pub gif_settings: ::std::option::Option<crate::types::GifSettings>,
    /// Required when you set Codec to the value H_264.
    pub h264_settings: ::std::option::Option<crate::types::H264Settings>,
    /// Settings for H265 codec
    pub h265_settings: ::std::option::Option<crate::types::H265Settings>,
    /// Required when you set Codec to the value MPEG2.
    pub mpeg2_settings: ::std::option::Option<crate::types::Mpeg2Settings>,
    /// Optional settings when you set Codec to the value Passthrough.
    pub passthrough_settings: ::std::option::Option<crate::types::PassthroughSettings>,
    /// Required when you set Codec to the value PRORES.
    pub prores_settings: ::std::option::Option<crate::types::ProresSettings>,
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value UNCOMPRESSED.
    pub uncompressed_settings: ::std::option::Option<crate::types::UncompressedSettings>,
    /// Required when you set Codec to the value VC3
    pub vc3_settings: ::std::option::Option<crate::types::Vc3Settings>,
    /// Required when you set Codec to the value VP8.
    pub vp8_settings: ::std::option::Option<crate::types::Vp8Settings>,
    /// Required when you set Codec to the value VP9.
    pub vp9_settings: ::std::option::Option<crate::types::Vp9Settings>,
    /// Required when you set Codec to the value XAVC.
    pub xavc_settings: ::std::option::Option<crate::types::XavcSettings>,
}
impl VideoCodecSettings {
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
    pub fn av1_settings(&self) -> ::std::option::Option<&crate::types::Av1Settings> {
        self.av1_settings.as_ref()
    }
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    pub fn avc_intra_settings(&self) -> ::std::option::Option<&crate::types::AvcIntraSettings> {
        self.avc_intra_settings.as_ref()
    }
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input without any video encoding: Choose Passthrough. More information about passthrough codec support and job settings requirements, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/video-passthrough-feature-restrictions.html
    pub fn codec(&self) -> ::std::option::Option<&crate::types::VideoCodec> {
        self.codec.as_ref()
    }
    /// Required when you set Codec to the value FRAME_CAPTURE.
    pub fn frame_capture_settings(&self) -> ::std::option::Option<&crate::types::FrameCaptureSettings> {
        self.frame_capture_settings.as_ref()
    }
    /// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value GIF
    pub fn gif_settings(&self) -> ::std::option::Option<&crate::types::GifSettings> {
        self.gif_settings.as_ref()
    }
    /// Required when you set Codec to the value H_264.
    pub fn h264_settings(&self) -> ::std::option::Option<&crate::types::H264Settings> {
        self.h264_settings.as_ref()
    }
    /// Settings for H265 codec
    pub fn h265_settings(&self) -> ::std::option::Option<&crate::types::H265Settings> {
        self.h265_settings.as_ref()
    }
    /// Required when you set Codec to the value MPEG2.
    pub fn mpeg2_settings(&self) -> ::std::option::Option<&crate::types::Mpeg2Settings> {
        self.mpeg2_settings.as_ref()
    }
    /// Optional settings when you set Codec to the value Passthrough.
    pub fn passthrough_settings(&self) -> ::std::option::Option<&crate::types::PassthroughSettings> {
        self.passthrough_settings.as_ref()
    }
    /// Required when you set Codec to the value PRORES.
    pub fn prores_settings(&self) -> ::std::option::Option<&crate::types::ProresSettings> {
        self.prores_settings.as_ref()
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value UNCOMPRESSED.
    pub fn uncompressed_settings(&self) -> ::std::option::Option<&crate::types::UncompressedSettings> {
        self.uncompressed_settings.as_ref()
    }
    /// Required when you set Codec to the value VC3
    pub fn vc3_settings(&self) -> ::std::option::Option<&crate::types::Vc3Settings> {
        self.vc3_settings.as_ref()
    }
    /// Required when you set Codec to the value VP8.
    pub fn vp8_settings(&self) -> ::std::option::Option<&crate::types::Vp8Settings> {
        self.vp8_settings.as_ref()
    }
    /// Required when you set Codec to the value VP9.
    pub fn vp9_settings(&self) -> ::std::option::Option<&crate::types::Vp9Settings> {
        self.vp9_settings.as_ref()
    }
    /// Required when you set Codec to the value XAVC.
    pub fn xavc_settings(&self) -> ::std::option::Option<&crate::types::XavcSettings> {
        self.xavc_settings.as_ref()
    }
}
impl VideoCodecSettings {
    /// Creates a new builder-style object to manufacture [`VideoCodecSettings`](crate::types::VideoCodecSettings).
    pub fn builder() -> crate::types::builders::VideoCodecSettingsBuilder {
        crate::types::builders::VideoCodecSettingsBuilder::default()
    }
}

/// A builder for [`VideoCodecSettings`](crate::types::VideoCodecSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct VideoCodecSettingsBuilder {
    pub(crate) av1_settings: ::std::option::Option<crate::types::Av1Settings>,
    pub(crate) avc_intra_settings: ::std::option::Option<crate::types::AvcIntraSettings>,
    pub(crate) codec: ::std::option::Option<crate::types::VideoCodec>,
    pub(crate) frame_capture_settings: ::std::option::Option<crate::types::FrameCaptureSettings>,
    pub(crate) gif_settings: ::std::option::Option<crate::types::GifSettings>,
    pub(crate) h264_settings: ::std::option::Option<crate::types::H264Settings>,
    pub(crate) h265_settings: ::std::option::Option<crate::types::H265Settings>,
    pub(crate) mpeg2_settings: ::std::option::Option<crate::types::Mpeg2Settings>,
    pub(crate) passthrough_settings: ::std::option::Option<crate::types::PassthroughSettings>,
    pub(crate) prores_settings: ::std::option::Option<crate::types::ProresSettings>,
    pub(crate) uncompressed_settings: ::std::option::Option<crate::types::UncompressedSettings>,
    pub(crate) vc3_settings: ::std::option::Option<crate::types::Vc3Settings>,
    pub(crate) vp8_settings: ::std::option::Option<crate::types::Vp8Settings>,
    pub(crate) vp9_settings: ::std::option::Option<crate::types::Vp9Settings>,
    pub(crate) xavc_settings: ::std::option::Option<crate::types::XavcSettings>,
}
impl VideoCodecSettingsBuilder {
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
    pub fn av1_settings(mut self, input: crate::types::Av1Settings) -> Self {
        self.av1_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
    pub fn set_av1_settings(mut self, input: ::std::option::Option<crate::types::Av1Settings>) -> Self {
        self.av1_settings = input;
        self
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value AV1.
    pub fn get_av1_settings(&self) -> &::std::option::Option<crate::types::Av1Settings> {
        &self.av1_settings
    }
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    pub fn avc_intra_settings(mut self, input: crate::types::AvcIntraSettings) -> Self {
        self.avc_intra_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    pub fn set_avc_intra_settings(mut self, input: ::std::option::Option<crate::types::AvcIntraSettings>) -> Self {
        self.avc_intra_settings = input;
        self
    }
    /// Required when you choose AVC-Intra for your output video codec. For more information about the AVC-Intra settings, see the relevant specification. For detailed information about SD and HD in AVC-Intra, see https://ieeexplore.ieee.org/document/7290936. For information about 4K/2K in AVC-Intra, see https://pro-av.panasonic.net/en/avc-ultra/AVC-ULTRAoverview.pdf.
    pub fn get_avc_intra_settings(&self) -> &::std::option::Option<crate::types::AvcIntraSettings> {
        &self.avc_intra_settings
    }
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input without any video encoding: Choose Passthrough. More information about passthrough codec support and job settings requirements, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/video-passthrough-feature-restrictions.html
    pub fn codec(mut self, input: crate::types::VideoCodec) -> Self {
        self.codec = ::std::option::Option::Some(input);
        self
    }
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input without any video encoding: Choose Passthrough. More information about passthrough codec support and job settings requirements, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/video-passthrough-feature-restrictions.html
    pub fn set_codec(mut self, input: ::std::option::Option<crate::types::VideoCodec>) -> Self {
        self.codec = input;
        self
    }
    /// Specifies the video codec. This must be equal to one of the enum values defined by the object VideoCodec. To passthrough the video stream of your input without any video encoding: Choose Passthrough. More information about passthrough codec support and job settings requirements, see: https://docs.aws.amazon.com/mediaconvert/latest/ug/video-passthrough-feature-restrictions.html
    pub fn get_codec(&self) -> &::std::option::Option<crate::types::VideoCodec> {
        &self.codec
    }
    /// Required when you set Codec to the value FRAME_CAPTURE.
    pub fn frame_capture_settings(mut self, input: crate::types::FrameCaptureSettings) -> Self {
        self.frame_capture_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value FRAME_CAPTURE.
    pub fn set_frame_capture_settings(mut self, input: ::std::option::Option<crate::types::FrameCaptureSettings>) -> Self {
        self.frame_capture_settings = input;
        self
    }
    /// Required when you set Codec to the value FRAME_CAPTURE.
    pub fn get_frame_capture_settings(&self) -> &::std::option::Option<crate::types::FrameCaptureSettings> {
        &self.frame_capture_settings
    }
    /// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value GIF
    pub fn gif_settings(mut self, input: crate::types::GifSettings) -> Self {
        self.gif_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value GIF
    pub fn set_gif_settings(mut self, input: ::std::option::Option<crate::types::GifSettings>) -> Self {
        self.gif_settings = input;
        self
    }
    /// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value GIF
    pub fn get_gif_settings(&self) -> &::std::option::Option<crate::types::GifSettings> {
        &self.gif_settings
    }
    /// Required when you set Codec to the value H_264.
    pub fn h264_settings(mut self, input: crate::types::H264Settings) -> Self {
        self.h264_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value H_264.
    pub fn set_h264_settings(mut self, input: ::std::option::Option<crate::types::H264Settings>) -> Self {
        self.h264_settings = input;
        self
    }
    /// Required when you set Codec to the value H_264.
    pub fn get_h264_settings(&self) -> &::std::option::Option<crate::types::H264Settings> {
        &self.h264_settings
    }
    /// Settings for H265 codec
    pub fn h265_settings(mut self, input: crate::types::H265Settings) -> Self {
        self.h265_settings = ::std::option::Option::Some(input);
        self
    }
    /// Settings for H265 codec
    pub fn set_h265_settings(mut self, input: ::std::option::Option<crate::types::H265Settings>) -> Self {
        self.h265_settings = input;
        self
    }
    /// Settings for H265 codec
    pub fn get_h265_settings(&self) -> &::std::option::Option<crate::types::H265Settings> {
        &self.h265_settings
    }
    /// Required when you set Codec to the value MPEG2.
    pub fn mpeg2_settings(mut self, input: crate::types::Mpeg2Settings) -> Self {
        self.mpeg2_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value MPEG2.
    pub fn set_mpeg2_settings(mut self, input: ::std::option::Option<crate::types::Mpeg2Settings>) -> Self {
        self.mpeg2_settings = input;
        self
    }
    /// Required when you set Codec to the value MPEG2.
    pub fn get_mpeg2_settings(&self) -> &::std::option::Option<crate::types::Mpeg2Settings> {
        &self.mpeg2_settings
    }
    /// Optional settings when you set Codec to the value Passthrough.
    pub fn passthrough_settings(mut self, input: crate::types::PassthroughSettings) -> Self {
        self.passthrough_settings = ::std::option::Option::Some(input);
        self
    }
    /// Optional settings when you set Codec to the value Passthrough.
    pub fn set_passthrough_settings(mut self, input: ::std::option::Option<crate::types::PassthroughSettings>) -> Self {
        self.passthrough_settings = input;
        self
    }
    /// Optional settings when you set Codec to the value Passthrough.
    pub fn get_passthrough_settings(&self) -> &::std::option::Option<crate::types::PassthroughSettings> {
        &self.passthrough_settings
    }
    /// Required when you set Codec to the value PRORES.
    pub fn prores_settings(mut self, input: crate::types::ProresSettings) -> Self {
        self.prores_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value PRORES.
    pub fn set_prores_settings(mut self, input: ::std::option::Option<crate::types::ProresSettings>) -> Self {
        self.prores_settings = input;
        self
    }
    /// Required when you set Codec to the value PRORES.
    pub fn get_prores_settings(&self) -> &::std::option::Option<crate::types::ProresSettings> {
        &self.prores_settings
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value UNCOMPRESSED.
    pub fn uncompressed_settings(mut self, input: crate::types::UncompressedSettings) -> Self {
        self.uncompressed_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value UNCOMPRESSED.
    pub fn set_uncompressed_settings(mut self, input: ::std::option::Option<crate::types::UncompressedSettings>) -> Self {
        self.uncompressed_settings = input;
        self
    }
    /// Required when you set Codec, under VideoDescription&gt;CodecSettings to the value UNCOMPRESSED.
    pub fn get_uncompressed_settings(&self) -> &::std::option::Option<crate::types::UncompressedSettings> {
        &self.uncompressed_settings
    }
    /// Required when you set Codec to the value VC3
    pub fn vc3_settings(mut self, input: crate::types::Vc3Settings) -> Self {
        self.vc3_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value VC3
    pub fn set_vc3_settings(mut self, input: ::std::option::Option<crate::types::Vc3Settings>) -> Self {
        self.vc3_settings = input;
        self
    }
    /// Required when you set Codec to the value VC3
    pub fn get_vc3_settings(&self) -> &::std::option::Option<crate::types::Vc3Settings> {
        &self.vc3_settings
    }
    /// Required when you set Codec to the value VP8.
    pub fn vp8_settings(mut self, input: crate::types::Vp8Settings) -> Self {
        self.vp8_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value VP8.
    pub fn set_vp8_settings(mut self, input: ::std::option::Option<crate::types::Vp8Settings>) -> Self {
        self.vp8_settings = input;
        self
    }
    /// Required when you set Codec to the value VP8.
    pub fn get_vp8_settings(&self) -> &::std::option::Option<crate::types::Vp8Settings> {
        &self.vp8_settings
    }
    /// Required when you set Codec to the value VP9.
    pub fn vp9_settings(mut self, input: crate::types::Vp9Settings) -> Self {
        self.vp9_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value VP9.
    pub fn set_vp9_settings(mut self, input: ::std::option::Option<crate::types::Vp9Settings>) -> Self {
        self.vp9_settings = input;
        self
    }
    /// Required when you set Codec to the value VP9.
    pub fn get_vp9_settings(&self) -> &::std::option::Option<crate::types::Vp9Settings> {
        &self.vp9_settings
    }
    /// Required when you set Codec to the value XAVC.
    pub fn xavc_settings(mut self, input: crate::types::XavcSettings) -> Self {
        self.xavc_settings = ::std::option::Option::Some(input);
        self
    }
    /// Required when you set Codec to the value XAVC.
    pub fn set_xavc_settings(mut self, input: ::std::option::Option<crate::types::XavcSettings>) -> Self {
        self.xavc_settings = input;
        self
    }
    /// Required when you set Codec to the value XAVC.
    pub fn get_xavc_settings(&self) -> &::std::option::Option<crate::types::XavcSettings> {
        &self.xavc_settings
    }
    /// Consumes the builder and constructs a [`VideoCodecSettings`](crate::types::VideoCodecSettings).
    pub fn build(self) -> crate::types::VideoCodecSettings {
        crate::types::VideoCodecSettings {
            av1_settings: self.av1_settings,
            avc_intra_settings: self.avc_intra_settings,
            codec: self.codec,
            frame_capture_settings: self.frame_capture_settings,
            gif_settings: self.gif_settings,
            h264_settings: self.h264_settings,
            h265_settings: self.h265_settings,
            mpeg2_settings: self.mpeg2_settings,
            passthrough_settings: self.passthrough_settings,
            prores_settings: self.prores_settings,
            uncompressed_settings: self.uncompressed_settings,
            vc3_settings: self.vc3_settings,
            vp8_settings: self.vp8_settings,
            vp9_settings: self.vp9_settings,
            xavc_settings: self.xavc_settings,
        }
    }
}
