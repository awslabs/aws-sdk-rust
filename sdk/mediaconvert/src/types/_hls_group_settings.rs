// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to your HLS output package. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/outputs-file-ABR.html. When you work directly in your JSON job specification, include this object and any required children when you set Type, under OutputGroupSettings, to HLS_GROUP_SETTINGS.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsGroupSettings {
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    #[doc(hidden)]
    pub ad_markers: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    #[doc(hidden)]
    pub additional_manifests:
        std::option::Option<std::vec::Vec<crate::types::HlsAdditionalManifest>>,
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    #[doc(hidden)]
    pub audio_only_header: std::option::Option<crate::types::HlsAudioOnlyHeader>,
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    #[doc(hidden)]
    pub base_url: std::option::Option<std::string::String>,
    /// Language to be used on Caption outputs
    #[doc(hidden)]
    pub caption_language_mappings:
        std::option::Option<std::vec::Vec<crate::types::HlsCaptionLanguageMapping>>,
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    #[doc(hidden)]
    pub caption_language_setting: std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    /// Set Caption segment length control (CaptionSegmentLengthControl) to Match video (MATCH_VIDEO) to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments (LARGE_SEGMENTS) to create caption segments that are 300 seconds long.
    #[doc(hidden)]
    pub caption_segment_length_control:
        std::option::Option<crate::types::HlsCaptionSegmentLengthControl>,
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    #[doc(hidden)]
    pub client_cache: std::option::Option<crate::types::HlsClientCache>,
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    #[doc(hidden)]
    pub codec_specification: std::option::Option<crate::types::HlsCodecSpecification>,
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    #[doc(hidden)]
    pub destination: std::option::Option<std::string::String>,
    /// Settings associated with the destination. Will vary based on the type of destination
    #[doc(hidden)]
    pub destination_settings: std::option::Option<crate::types::DestinationSettings>,
    /// Indicates whether segments should be placed in subdirectories.
    #[doc(hidden)]
    pub directory_structure: std::option::Option<crate::types::HlsDirectoryStructure>,
    /// DRM settings.
    #[doc(hidden)]
    pub encryption: std::option::Option<crate::types::HlsEncryptionSettings>,
    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None (NONE), to not generate any images. Choose Thumbnail (THUMBNAIL) to generate tiled thumbnails. Choose Thumbnail and full frame (THUMBNAIL_AND_FULLFRAME) to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    #[doc(hidden)]
    pub image_based_trick_play: std::option::Option<crate::types::HlsImageBasedTrickPlay>,
    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    #[doc(hidden)]
    pub image_based_trick_play_settings:
        std::option::Option<crate::types::HlsImageBasedTrickPlaySettings>,
    /// When set to GZIP, compresses HLS playlist.
    #[doc(hidden)]
    pub manifest_compression: std::option::Option<crate::types::HlsManifestCompression>,
    /// Indicates whether the output manifest should use floating point values for segment duration.
    #[doc(hidden)]
    pub manifest_duration_format: std::option::Option<crate::types::HlsManifestDurationFormat>,
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    #[doc(hidden)]
    pub min_final_segment_length: f64,
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    #[doc(hidden)]
    pub min_segment_length: i32,
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    #[doc(hidden)]
    pub output_selection: std::option::Option<crate::types::HlsOutputSelection>,
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    #[doc(hidden)]
    pub program_date_time: std::option::Option<crate::types::HlsProgramDateTime>,
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    #[doc(hidden)]
    pub program_date_time_period: i32,
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    #[doc(hidden)]
    pub segment_control: std::option::Option<crate::types::HlsSegmentControl>,
    /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control (SegmentLengthControl) to specify whether the encoder enforces this value strictly. Use Segment control (HlsSegmentControl) to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
    #[doc(hidden)]
    pub segment_length: i32,
    /// Specify how you want MediaConvert to determine the segment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Segment length (SegmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
    #[doc(hidden)]
    pub segment_length_control: std::option::Option<crate::types::HlsSegmentLengthControl>,
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    #[doc(hidden)]
    pub segments_per_subdirectory: i32,
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    #[doc(hidden)]
    pub stream_inf_resolution: std::option::Option<crate::types::HlsStreamInfResolution>,
    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (&gt;= 0.5) and rounded down if less than 0.5 (&lt; 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    #[doc(hidden)]
    pub target_duration_compatibility_mode:
        std::option::Option<crate::types::HlsTargetDurationCompatibilityMode>,
    /// Specify the type of the ID3 frame (timedMetadataId3Frame) to use for ID3 timestamps (timedMetadataId3Period) in your output. To include ID3 timestamps: Specify PRIV (PRIV) or TDRL (TDRL) and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). To exclude ID3 timestamps: Set ID3 timestamp frame type to None (NONE).
    #[doc(hidden)]
    pub timed_metadata_id3_frame: std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type (timedMetadataId3Frame) to PRIV (PRIV) or TDRL (TDRL), and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH).
    #[doc(hidden)]
    pub timed_metadata_id3_period: i32,
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    #[doc(hidden)]
    pub timestamp_delta_milliseconds: i32,
}
impl HlsGroupSettings {
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    pub fn ad_markers(&self) -> std::option::Option<&[crate::types::HlsAdMarkers]> {
        self.ad_markers.as_deref()
    }
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    pub fn additional_manifests(
        &self,
    ) -> std::option::Option<&[crate::types::HlsAdditionalManifest]> {
        self.additional_manifests.as_deref()
    }
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    pub fn audio_only_header(&self) -> std::option::Option<&crate::types::HlsAudioOnlyHeader> {
        self.audio_only_header.as_ref()
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url(&self) -> std::option::Option<&str> {
        self.base_url.as_deref()
    }
    /// Language to be used on Caption outputs
    pub fn caption_language_mappings(
        &self,
    ) -> std::option::Option<&[crate::types::HlsCaptionLanguageMapping]> {
        self.caption_language_mappings.as_deref()
    }
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn caption_language_setting(
        &self,
    ) -> std::option::Option<&crate::types::HlsCaptionLanguageSetting> {
        self.caption_language_setting.as_ref()
    }
    /// Set Caption segment length control (CaptionSegmentLengthControl) to Match video (MATCH_VIDEO) to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments (LARGE_SEGMENTS) to create caption segments that are 300 seconds long.
    pub fn caption_segment_length_control(
        &self,
    ) -> std::option::Option<&crate::types::HlsCaptionSegmentLengthControl> {
        self.caption_segment_length_control.as_ref()
    }
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    pub fn client_cache(&self) -> std::option::Option<&crate::types::HlsClientCache> {
        self.client_cache.as_ref()
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn codec_specification(&self) -> std::option::Option<&crate::types::HlsCodecSpecification> {
        self.codec_specification.as_ref()
    }
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn destination(&self) -> std::option::Option<&str> {
        self.destination.as_deref()
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn destination_settings(&self) -> std::option::Option<&crate::types::DestinationSettings> {
        self.destination_settings.as_ref()
    }
    /// Indicates whether segments should be placed in subdirectories.
    pub fn directory_structure(&self) -> std::option::Option<&crate::types::HlsDirectoryStructure> {
        self.directory_structure.as_ref()
    }
    /// DRM settings.
    pub fn encryption(&self) -> std::option::Option<&crate::types::HlsEncryptionSettings> {
        self.encryption.as_ref()
    }
    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None (NONE), to not generate any images. Choose Thumbnail (THUMBNAIL) to generate tiled thumbnails. Choose Thumbnail and full frame (THUMBNAIL_AND_FULLFRAME) to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    pub fn image_based_trick_play(
        &self,
    ) -> std::option::Option<&crate::types::HlsImageBasedTrickPlay> {
        self.image_based_trick_play.as_ref()
    }
    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    pub fn image_based_trick_play_settings(
        &self,
    ) -> std::option::Option<&crate::types::HlsImageBasedTrickPlaySettings> {
        self.image_based_trick_play_settings.as_ref()
    }
    /// When set to GZIP, compresses HLS playlist.
    pub fn manifest_compression(
        &self,
    ) -> std::option::Option<&crate::types::HlsManifestCompression> {
        self.manifest_compression.as_ref()
    }
    /// Indicates whether the output manifest should use floating point values for segment duration.
    pub fn manifest_duration_format(
        &self,
    ) -> std::option::Option<&crate::types::HlsManifestDurationFormat> {
        self.manifest_duration_format.as_ref()
    }
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    pub fn min_final_segment_length(&self) -> f64 {
        self.min_final_segment_length
    }
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn min_segment_length(&self) -> i32 {
        self.min_segment_length
    }
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    pub fn output_selection(&self) -> std::option::Option<&crate::types::HlsOutputSelection> {
        self.output_selection.as_ref()
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    pub fn program_date_time(&self) -> std::option::Option<&crate::types::HlsProgramDateTime> {
        self.program_date_time.as_ref()
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn program_date_time_period(&self) -> i32 {
        self.program_date_time_period
    }
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    pub fn segment_control(&self) -> std::option::Option<&crate::types::HlsSegmentControl> {
        self.segment_control.as_ref()
    }
    /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control (SegmentLengthControl) to specify whether the encoder enforces this value strictly. Use Segment control (HlsSegmentControl) to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
    pub fn segment_length(&self) -> i32 {
        self.segment_length
    }
    /// Specify how you want MediaConvert to determine the segment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Segment length (SegmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
    pub fn segment_length_control(
        &self,
    ) -> std::option::Option<&crate::types::HlsSegmentLengthControl> {
        self.segment_length_control.as_ref()
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    pub fn segments_per_subdirectory(&self) -> i32 {
        self.segments_per_subdirectory
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn stream_inf_resolution(
        &self,
    ) -> std::option::Option<&crate::types::HlsStreamInfResolution> {
        self.stream_inf_resolution.as_ref()
    }
    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (&gt;= 0.5) and rounded down if less than 0.5 (&lt; 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    pub fn target_duration_compatibility_mode(
        &self,
    ) -> std::option::Option<&crate::types::HlsTargetDurationCompatibilityMode> {
        self.target_duration_compatibility_mode.as_ref()
    }
    /// Specify the type of the ID3 frame (timedMetadataId3Frame) to use for ID3 timestamps (timedMetadataId3Period) in your output. To include ID3 timestamps: Specify PRIV (PRIV) or TDRL (TDRL) and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). To exclude ID3 timestamps: Set ID3 timestamp frame type to None (NONE).
    pub fn timed_metadata_id3_frame(
        &self,
    ) -> std::option::Option<&crate::types::HlsTimedMetadataId3Frame> {
        self.timed_metadata_id3_frame.as_ref()
    }
    /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type (timedMetadataId3Frame) to PRIV (PRIV) or TDRL (TDRL), and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH).
    pub fn timed_metadata_id3_period(&self) -> i32 {
        self.timed_metadata_id3_period
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn timestamp_delta_milliseconds(&self) -> i32 {
        self.timestamp_delta_milliseconds
    }
}
impl HlsGroupSettings {
    /// Creates a new builder-style object to manufacture [`HlsGroupSettings`](crate::types::HlsGroupSettings).
    pub fn builder() -> crate::types::builders::HlsGroupSettingsBuilder {
        crate::types::builders::HlsGroupSettingsBuilder::default()
    }
}

/// A builder for [`HlsGroupSettings`](crate::types::HlsGroupSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsGroupSettingsBuilder {
    pub(crate) ad_markers: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    pub(crate) additional_manifests:
        std::option::Option<std::vec::Vec<crate::types::HlsAdditionalManifest>>,
    pub(crate) audio_only_header: std::option::Option<crate::types::HlsAudioOnlyHeader>,
    pub(crate) base_url: std::option::Option<std::string::String>,
    pub(crate) caption_language_mappings:
        std::option::Option<std::vec::Vec<crate::types::HlsCaptionLanguageMapping>>,
    pub(crate) caption_language_setting:
        std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    pub(crate) caption_segment_length_control:
        std::option::Option<crate::types::HlsCaptionSegmentLengthControl>,
    pub(crate) client_cache: std::option::Option<crate::types::HlsClientCache>,
    pub(crate) codec_specification: std::option::Option<crate::types::HlsCodecSpecification>,
    pub(crate) destination: std::option::Option<std::string::String>,
    pub(crate) destination_settings: std::option::Option<crate::types::DestinationSettings>,
    pub(crate) directory_structure: std::option::Option<crate::types::HlsDirectoryStructure>,
    pub(crate) encryption: std::option::Option<crate::types::HlsEncryptionSettings>,
    pub(crate) image_based_trick_play: std::option::Option<crate::types::HlsImageBasedTrickPlay>,
    pub(crate) image_based_trick_play_settings:
        std::option::Option<crate::types::HlsImageBasedTrickPlaySettings>,
    pub(crate) manifest_compression: std::option::Option<crate::types::HlsManifestCompression>,
    pub(crate) manifest_duration_format:
        std::option::Option<crate::types::HlsManifestDurationFormat>,
    pub(crate) min_final_segment_length: std::option::Option<f64>,
    pub(crate) min_segment_length: std::option::Option<i32>,
    pub(crate) output_selection: std::option::Option<crate::types::HlsOutputSelection>,
    pub(crate) program_date_time: std::option::Option<crate::types::HlsProgramDateTime>,
    pub(crate) program_date_time_period: std::option::Option<i32>,
    pub(crate) segment_control: std::option::Option<crate::types::HlsSegmentControl>,
    pub(crate) segment_length: std::option::Option<i32>,
    pub(crate) segment_length_control: std::option::Option<crate::types::HlsSegmentLengthControl>,
    pub(crate) segments_per_subdirectory: std::option::Option<i32>,
    pub(crate) stream_inf_resolution: std::option::Option<crate::types::HlsStreamInfResolution>,
    pub(crate) target_duration_compatibility_mode:
        std::option::Option<crate::types::HlsTargetDurationCompatibilityMode>,
    pub(crate) timed_metadata_id3_frame:
        std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    pub(crate) timed_metadata_id3_period: std::option::Option<i32>,
    pub(crate) timestamp_delta_milliseconds: std::option::Option<i32>,
}
impl HlsGroupSettingsBuilder {
    /// Appends an item to `ad_markers`.
    ///
    /// To override the contents of this collection use [`set_ad_markers`](Self::set_ad_markers).
    ///
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    pub fn ad_markers(mut self, input: crate::types::HlsAdMarkers) -> Self {
        let mut v = self.ad_markers.unwrap_or_default();
        v.push(input);
        self.ad_markers = Some(v);
        self
    }
    /// Choose one or more ad marker types to decorate your Apple HLS manifest. This setting does not determine whether SCTE-35 markers appear in the outputs themselves.
    pub fn set_ad_markers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HlsAdMarkers>>,
    ) -> Self {
        self.ad_markers = input;
        self
    }
    /// Appends an item to `additional_manifests`.
    ///
    /// To override the contents of this collection use [`set_additional_manifests`](Self::set_additional_manifests).
    ///
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    pub fn additional_manifests(mut self, input: crate::types::HlsAdditionalManifest) -> Self {
        let mut v = self.additional_manifests.unwrap_or_default();
        v.push(input);
        self.additional_manifests = Some(v);
        self
    }
    /// By default, the service creates one top-level .m3u8 HLS manifest for each HLS output group in your job. This default manifest references every output in the output group. To create additional top-level manifests that reference a subset of the outputs in the output group, specify a list of them here.
    pub fn set_additional_manifests(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HlsAdditionalManifest>>,
    ) -> Self {
        self.additional_manifests = input;
        self
    }
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    pub fn audio_only_header(mut self, input: crate::types::HlsAudioOnlyHeader) -> Self {
        self.audio_only_header = Some(input);
        self
    }
    /// Ignore this setting unless you are using FairPlay DRM with Verimatrix and you encounter playback issues. Keep the default value, Include (INCLUDE), to output audio-only headers. Choose Exclude (EXCLUDE) to remove the audio-only headers from your audio segments.
    pub fn set_audio_only_header(
        mut self,
        input: std::option::Option<crate::types::HlsAudioOnlyHeader>,
    ) -> Self {
        self.audio_only_header = input;
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn base_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_url = Some(input.into());
        self
    }
    /// A partial URI prefix that will be prepended to each output in the media .m3u8 file. Can be used if base manifest is delivered from a different URL than the main .m3u8 file.
    pub fn set_base_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_url = input;
        self
    }
    /// Appends an item to `caption_language_mappings`.
    ///
    /// To override the contents of this collection use [`set_caption_language_mappings`](Self::set_caption_language_mappings).
    ///
    /// Language to be used on Caption outputs
    pub fn caption_language_mappings(
        mut self,
        input: crate::types::HlsCaptionLanguageMapping,
    ) -> Self {
        let mut v = self.caption_language_mappings.unwrap_or_default();
        v.push(input);
        self.caption_language_mappings = Some(v);
        self
    }
    /// Language to be used on Caption outputs
    pub fn set_caption_language_mappings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HlsCaptionLanguageMapping>>,
    ) -> Self {
        self.caption_language_mappings = input;
        self
    }
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn caption_language_setting(
        mut self,
        input: crate::types::HlsCaptionLanguageSetting,
    ) -> Self {
        self.caption_language_setting = Some(input);
        self
    }
    /// Applies only to 608 Embedded output captions. Insert: Include CLOSED-CAPTIONS lines in the manifest. Specify at least one language in the CC1 Language Code field. One CLOSED-CAPTION line is added for each Language Code you specify. Make sure to specify the languages in the order in which they appear in the original source (if the source is embedded format) or the order of the caption selectors (if the source is other than embedded). Otherwise, languages in the manifest will not match up properly with the output captions. None: Include CLOSED-CAPTIONS=NONE line in the manifest. Omit: Omit any CLOSED-CAPTIONS line from the manifest.
    pub fn set_caption_language_setting(
        mut self,
        input: std::option::Option<crate::types::HlsCaptionLanguageSetting>,
    ) -> Self {
        self.caption_language_setting = input;
        self
    }
    /// Set Caption segment length control (CaptionSegmentLengthControl) to Match video (MATCH_VIDEO) to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments (LARGE_SEGMENTS) to create caption segments that are 300 seconds long.
    pub fn caption_segment_length_control(
        mut self,
        input: crate::types::HlsCaptionSegmentLengthControl,
    ) -> Self {
        self.caption_segment_length_control = Some(input);
        self
    }
    /// Set Caption segment length control (CaptionSegmentLengthControl) to Match video (MATCH_VIDEO) to create caption segments that align with the video segments from the first video output in this output group. For example, if the video segments are 2 seconds long, your WebVTT segments will also be 2 seconds long. Keep the default setting, Large segments (LARGE_SEGMENTS) to create caption segments that are 300 seconds long.
    pub fn set_caption_segment_length_control(
        mut self,
        input: std::option::Option<crate::types::HlsCaptionSegmentLengthControl>,
    ) -> Self {
        self.caption_segment_length_control = input;
        self
    }
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    pub fn client_cache(mut self, input: crate::types::HlsClientCache) -> Self {
        self.client_cache = Some(input);
        self
    }
    /// Disable this setting only when your workflow requires the #EXT-X-ALLOW-CACHE:no tag. Otherwise, keep the default value Enabled (ENABLED) and control caching in your video distribution set up. For example, use the Cache-Control http header.
    pub fn set_client_cache(
        mut self,
        input: std::option::Option<crate::types::HlsClientCache>,
    ) -> Self {
        self.client_cache = input;
        self
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn codec_specification(mut self, input: crate::types::HlsCodecSpecification) -> Self {
        self.codec_specification = Some(input);
        self
    }
    /// Specification to use (RFC-6381 or the default RFC-4281) during m3u8 playlist generation.
    pub fn set_codec_specification(
        mut self,
        input: std::option::Option<crate::types::HlsCodecSpecification>,
    ) -> Self {
        self.codec_specification = input;
        self
    }
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination = Some(input.into());
        self
    }
    /// Use Destination (Destination) to specify the S3 output location and the output filename base. Destination accepts format identifiers. If you do not specify the base filename in the URI, the service will use the filename of the input file. If your job has multiple inputs, the service uses the filename of the first input file.
    pub fn set_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.destination = input;
        self
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn destination_settings(mut self, input: crate::types::DestinationSettings) -> Self {
        self.destination_settings = Some(input);
        self
    }
    /// Settings associated with the destination. Will vary based on the type of destination
    pub fn set_destination_settings(
        mut self,
        input: std::option::Option<crate::types::DestinationSettings>,
    ) -> Self {
        self.destination_settings = input;
        self
    }
    /// Indicates whether segments should be placed in subdirectories.
    pub fn directory_structure(mut self, input: crate::types::HlsDirectoryStructure) -> Self {
        self.directory_structure = Some(input);
        self
    }
    /// Indicates whether segments should be placed in subdirectories.
    pub fn set_directory_structure(
        mut self,
        input: std::option::Option<crate::types::HlsDirectoryStructure>,
    ) -> Self {
        self.directory_structure = input;
        self
    }
    /// DRM settings.
    pub fn encryption(mut self, input: crate::types::HlsEncryptionSettings) -> Self {
        self.encryption = Some(input);
        self
    }
    /// DRM settings.
    pub fn set_encryption(
        mut self,
        input: std::option::Option<crate::types::HlsEncryptionSettings>,
    ) -> Self {
        self.encryption = input;
        self
    }
    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None (NONE), to not generate any images. Choose Thumbnail (THUMBNAIL) to generate tiled thumbnails. Choose Thumbnail and full frame (THUMBNAIL_AND_FULLFRAME) to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    pub fn image_based_trick_play(mut self, input: crate::types::HlsImageBasedTrickPlay) -> Self {
        self.image_based_trick_play = Some(input);
        self
    }
    /// Specify whether MediaConvert generates images for trick play. Keep the default value, None (NONE), to not generate any images. Choose Thumbnail (THUMBNAIL) to generate tiled thumbnails. Choose Thumbnail and full frame (THUMBNAIL_AND_FULLFRAME) to generate tiled thumbnails and full-resolution images of single frames. MediaConvert creates a child manifest for each set of images that you generate and adds corresponding entries to the parent manifest. A common application for these images is Roku trick mode. The thumbnails and full-frame images that MediaConvert creates with this feature are compatible with this Roku specification: https://developer.roku.com/docs/developer-program/media-playback/trick-mode/hls-and-dash.md
    pub fn set_image_based_trick_play(
        mut self,
        input: std::option::Option<crate::types::HlsImageBasedTrickPlay>,
    ) -> Self {
        self.image_based_trick_play = input;
        self
    }
    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    pub fn image_based_trick_play_settings(
        mut self,
        input: crate::types::HlsImageBasedTrickPlaySettings,
    ) -> Self {
        self.image_based_trick_play_settings = Some(input);
        self
    }
    /// Tile and thumbnail settings applicable when imageBasedTrickPlay is ADVANCED
    pub fn set_image_based_trick_play_settings(
        mut self,
        input: std::option::Option<crate::types::HlsImageBasedTrickPlaySettings>,
    ) -> Self {
        self.image_based_trick_play_settings = input;
        self
    }
    /// When set to GZIP, compresses HLS playlist.
    pub fn manifest_compression(mut self, input: crate::types::HlsManifestCompression) -> Self {
        self.manifest_compression = Some(input);
        self
    }
    /// When set to GZIP, compresses HLS playlist.
    pub fn set_manifest_compression(
        mut self,
        input: std::option::Option<crate::types::HlsManifestCompression>,
    ) -> Self {
        self.manifest_compression = input;
        self
    }
    /// Indicates whether the output manifest should use floating point values for segment duration.
    pub fn manifest_duration_format(
        mut self,
        input: crate::types::HlsManifestDurationFormat,
    ) -> Self {
        self.manifest_duration_format = Some(input);
        self
    }
    /// Indicates whether the output manifest should use floating point values for segment duration.
    pub fn set_manifest_duration_format(
        mut self,
        input: std::option::Option<crate::types::HlsManifestDurationFormat>,
    ) -> Self {
        self.manifest_duration_format = input;
        self
    }
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    pub fn min_final_segment_length(mut self, input: f64) -> Self {
        self.min_final_segment_length = Some(input);
        self
    }
    /// Keep this setting at the default value of 0, unless you are troubleshooting a problem with how devices play back the end of your video asset. If you know that player devices are hanging on the final segment of your video because the length of your final segment is too short, use this setting to specify a minimum final segment length, in seconds. Choose a value that is greater than or equal to 1 and less than your segment length. When you specify a value for this setting, the encoder will combine any final segment that is shorter than the length that you specify with the previous segment. For example, your segment length is 3 seconds and your final segment is .5 seconds without a minimum final segment length; when you set the minimum final segment length to 1, your final segment is 3.5 seconds.
    pub fn set_min_final_segment_length(mut self, input: std::option::Option<f64>) -> Self {
        self.min_final_segment_length = input;
        self
    }
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn min_segment_length(mut self, input: i32) -> Self {
        self.min_segment_length = Some(input);
        self
    }
    /// When set, Minimum Segment Size is enforced by looking ahead and back within the specified range for a nearby avail and extending the segment size if needed.
    pub fn set_min_segment_length(mut self, input: std::option::Option<i32>) -> Self {
        self.min_segment_length = input;
        self
    }
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    pub fn output_selection(mut self, input: crate::types::HlsOutputSelection) -> Self {
        self.output_selection = Some(input);
        self
    }
    /// Indicates whether the .m3u8 manifest file should be generated for this HLS output group.
    pub fn set_output_selection(
        mut self,
        input: std::option::Option<crate::types::HlsOutputSelection>,
    ) -> Self {
        self.output_selection = input;
        self
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    pub fn program_date_time(mut self, input: crate::types::HlsProgramDateTime) -> Self {
        self.program_date_time = Some(input);
        self
    }
    /// Includes or excludes EXT-X-PROGRAM-DATE-TIME tag in .m3u8 manifest files. The value is calculated as follows: either the program date and time are initialized using the input timecode source, or the time is initialized using the input timecode source and the date is initialized using the timestamp_offset.
    pub fn set_program_date_time(
        mut self,
        input: std::option::Option<crate::types::HlsProgramDateTime>,
    ) -> Self {
        self.program_date_time = input;
        self
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn program_date_time_period(mut self, input: i32) -> Self {
        self.program_date_time_period = Some(input);
        self
    }
    /// Period of insertion of EXT-X-PROGRAM-DATE-TIME entry, in seconds.
    pub fn set_program_date_time_period(mut self, input: std::option::Option<i32>) -> Self {
        self.program_date_time_period = input;
        self
    }
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    pub fn segment_control(mut self, input: crate::types::HlsSegmentControl) -> Self {
        self.segment_control = Some(input);
        self
    }
    /// When set to SINGLE_FILE, emits program as a single media resource (.ts) file, uses #EXT-X-BYTERANGE tags to index segment for playback.
    pub fn set_segment_control(
        mut self,
        input: std::option::Option<crate::types::HlsSegmentControl>,
    ) -> Self {
        self.segment_control = input;
        self
    }
    /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control (SegmentLengthControl) to specify whether the encoder enforces this value strictly. Use Segment control (HlsSegmentControl) to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
    pub fn segment_length(mut self, input: i32) -> Self {
        self.segment_length = Some(input);
        self
    }
    /// Specify the length, in whole seconds, of each segment. When you don't specify a value, MediaConvert defaults to 10. Related settings: Use Segment length control (SegmentLengthControl) to specify whether the encoder enforces this value strictly. Use Segment control (HlsSegmentControl) to specify whether MediaConvert creates separate segment files or one content file that has metadata to mark the segment boundaries.
    pub fn set_segment_length(mut self, input: std::option::Option<i32>) -> Self {
        self.segment_length = input;
        self
    }
    /// Specify how you want MediaConvert to determine the segment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Segment length (SegmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
    pub fn segment_length_control(mut self, input: crate::types::HlsSegmentLengthControl) -> Self {
        self.segment_length_control = Some(input);
        self
    }
    /// Specify how you want MediaConvert to determine the segment length. Choose Exact (EXACT) to have the encoder use the exact length that you specify with the setting Segment length (SegmentLength). This might result in extra I-frames. Choose Multiple of GOP (GOP_MULTIPLE) to have the encoder round up the segment lengths to match the next GOP boundary.
    pub fn set_segment_length_control(
        mut self,
        input: std::option::Option<crate::types::HlsSegmentLengthControl>,
    ) -> Self {
        self.segment_length_control = input;
        self
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    pub fn segments_per_subdirectory(mut self, input: i32) -> Self {
        self.segments_per_subdirectory = Some(input);
        self
    }
    /// Number of segments to write to a subdirectory before starting a new one. directoryStructure must be SINGLE_DIRECTORY for this setting to have an effect.
    pub fn set_segments_per_subdirectory(mut self, input: std::option::Option<i32>) -> Self {
        self.segments_per_subdirectory = input;
        self
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn stream_inf_resolution(mut self, input: crate::types::HlsStreamInfResolution) -> Self {
        self.stream_inf_resolution = Some(input);
        self
    }
    /// Include or exclude RESOLUTION attribute for video in EXT-X-STREAM-INF tag of variant manifest.
    pub fn set_stream_inf_resolution(
        mut self,
        input: std::option::Option<crate::types::HlsStreamInfResolution>,
    ) -> Self {
        self.stream_inf_resolution = input;
        self
    }
    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (&gt;= 0.5) and rounded down if less than 0.5 (&lt; 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    pub fn target_duration_compatibility_mode(
        mut self,
        input: crate::types::HlsTargetDurationCompatibilityMode,
    ) -> Self {
        self.target_duration_compatibility_mode = Some(input);
        self
    }
    /// When set to LEGACY, the segment target duration is always rounded up to the nearest integer value above its current value in seconds. When set to SPEC\\_COMPLIANT, the segment target duration is rounded up to the nearest integer value if fraction seconds are greater than or equal to 0.5 (&gt;= 0.5) and rounded down if less than 0.5 (&lt; 0.5). You may need to use LEGACY if your client needs to ensure that the target duration is always longer than the actual duration of the segment. Some older players may experience interrupted playback when the actual duration of a track in a segment is longer than the target duration.
    pub fn set_target_duration_compatibility_mode(
        mut self,
        input: std::option::Option<crate::types::HlsTargetDurationCompatibilityMode>,
    ) -> Self {
        self.target_duration_compatibility_mode = input;
        self
    }
    /// Specify the type of the ID3 frame (timedMetadataId3Frame) to use for ID3 timestamps (timedMetadataId3Period) in your output. To include ID3 timestamps: Specify PRIV (PRIV) or TDRL (TDRL) and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). To exclude ID3 timestamps: Set ID3 timestamp frame type to None (NONE).
    pub fn timed_metadata_id3_frame(
        mut self,
        input: crate::types::HlsTimedMetadataId3Frame,
    ) -> Self {
        self.timed_metadata_id3_frame = Some(input);
        self
    }
    /// Specify the type of the ID3 frame (timedMetadataId3Frame) to use for ID3 timestamps (timedMetadataId3Period) in your output. To include ID3 timestamps: Specify PRIV (PRIV) or TDRL (TDRL) and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH). To exclude ID3 timestamps: Set ID3 timestamp frame type to None (NONE).
    pub fn set_timed_metadata_id3_frame(
        mut self,
        input: std::option::Option<crate::types::HlsTimedMetadataId3Frame>,
    ) -> Self {
        self.timed_metadata_id3_frame = input;
        self
    }
    /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type (timedMetadataId3Frame) to PRIV (PRIV) or TDRL (TDRL), and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH).
    pub fn timed_metadata_id3_period(mut self, input: i32) -> Self {
        self.timed_metadata_id3_period = Some(input);
        self
    }
    /// Specify the interval in seconds to write ID3 timestamps in your output. The first timestamp starts at the output timecode and date, and increases incrementally with each ID3 timestamp. To use the default interval of 10 seconds: Leave blank. To include this metadata in your output: Set ID3 timestamp frame type (timedMetadataId3Frame) to PRIV (PRIV) or TDRL (TDRL), and set ID3 metadata (timedMetadata) to Passthrough (PASSTHROUGH).
    pub fn set_timed_metadata_id3_period(mut self, input: std::option::Option<i32>) -> Self {
        self.timed_metadata_id3_period = input;
        self
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn timestamp_delta_milliseconds(mut self, input: i32) -> Self {
        self.timestamp_delta_milliseconds = Some(input);
        self
    }
    /// Provides an extra millisecond delta offset to fine tune the timestamps.
    pub fn set_timestamp_delta_milliseconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timestamp_delta_milliseconds = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsGroupSettings`](crate::types::HlsGroupSettings).
    pub fn build(self) -> crate::types::HlsGroupSettings {
        crate::types::HlsGroupSettings {
            ad_markers: self.ad_markers,
            additional_manifests: self.additional_manifests,
            audio_only_header: self.audio_only_header,
            base_url: self.base_url,
            caption_language_mappings: self.caption_language_mappings,
            caption_language_setting: self.caption_language_setting,
            caption_segment_length_control: self.caption_segment_length_control,
            client_cache: self.client_cache,
            codec_specification: self.codec_specification,
            destination: self.destination,
            destination_settings: self.destination_settings,
            directory_structure: self.directory_structure,
            encryption: self.encryption,
            image_based_trick_play: self.image_based_trick_play,
            image_based_trick_play_settings: self.image_based_trick_play_settings,
            manifest_compression: self.manifest_compression,
            manifest_duration_format: self.manifest_duration_format,
            min_final_segment_length: self.min_final_segment_length.unwrap_or_default(),
            min_segment_length: self.min_segment_length.unwrap_or_default(),
            output_selection: self.output_selection,
            program_date_time: self.program_date_time,
            program_date_time_period: self.program_date_time_period.unwrap_or_default(),
            segment_control: self.segment_control,
            segment_length: self.segment_length.unwrap_or_default(),
            segment_length_control: self.segment_length_control,
            segments_per_subdirectory: self.segments_per_subdirectory.unwrap_or_default(),
            stream_inf_resolution: self.stream_inf_resolution,
            target_duration_compatibility_mode: self.target_duration_compatibility_mode,
            timed_metadata_id3_frame: self.timed_metadata_id3_frame,
            timed_metadata_id3_period: self.timed_metadata_id3_period.unwrap_or_default(),
            timestamp_delta_milliseconds: self.timestamp_delta_milliseconds.unwrap_or_default(),
        }
    }
}
