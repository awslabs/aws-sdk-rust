// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to TTML captions. TTML is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TTML.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TtmlDestinationSettings {
    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    #[doc(hidden)]
    pub style_passthrough: std::option::Option<crate::types::TtmlStylePassthrough>,
}
impl TtmlDestinationSettings {
    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    pub fn style_passthrough(&self) -> std::option::Option<&crate::types::TtmlStylePassthrough> {
        self.style_passthrough.as_ref()
    }
}
impl TtmlDestinationSettings {
    /// Creates a new builder-style object to manufacture [`TtmlDestinationSettings`](crate::types::TtmlDestinationSettings).
    pub fn builder() -> crate::types::builders::TtmlDestinationSettingsBuilder {
        crate::types::builders::TtmlDestinationSettingsBuilder::default()
    }
}

/// A builder for [`TtmlDestinationSettings`](crate::types::TtmlDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TtmlDestinationSettingsBuilder {
    pub(crate) style_passthrough: std::option::Option<crate::types::TtmlStylePassthrough>,
}
impl TtmlDestinationSettingsBuilder {
    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    pub fn style_passthrough(mut self, input: crate::types::TtmlStylePassthrough) -> Self {
        self.style_passthrough = Some(input);
        self
    }
    /// Pass through style and position information from a TTML-like input source (TTML, IMSC, SMPTE-TT) to the TTML output.
    pub fn set_style_passthrough(
        mut self,
        input: std::option::Option<crate::types::TtmlStylePassthrough>,
    ) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Consumes the builder and constructs a [`TtmlDestinationSettings`](crate::types::TtmlDestinationSettings).
    pub fn build(self) -> crate::types::TtmlDestinationSettings {
        crate::types::TtmlDestinationSettings {
            style_passthrough: self.style_passthrough,
        }
    }
}
