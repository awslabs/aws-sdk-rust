// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Information about when jobs are submitted, started, and finished is specified in Unix epoch format in seconds.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Timing {
    /// The time, in Unix epoch format, that the transcoding job finished
    #[doc(hidden)]
    pub finish_time: std::option::Option<aws_smithy_types::DateTime>,
    /// The time, in Unix epoch format, that transcoding for the job began.
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// The time, in Unix epoch format, that you submitted the job.
    #[doc(hidden)]
    pub submit_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Timing {
    /// The time, in Unix epoch format, that the transcoding job finished
    pub fn finish_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.finish_time.as_ref()
    }
    /// The time, in Unix epoch format, that transcoding for the job began.
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// The time, in Unix epoch format, that you submitted the job.
    pub fn submit_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.submit_time.as_ref()
    }
}
impl Timing {
    /// Creates a new builder-style object to manufacture [`Timing`](crate::types::Timing).
    pub fn builder() -> crate::types::builders::TimingBuilder {
        crate::types::builders::TimingBuilder::default()
    }
}

/// A builder for [`Timing`](crate::types::Timing).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimingBuilder {
    pub(crate) finish_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) submit_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl TimingBuilder {
    /// The time, in Unix epoch format, that the transcoding job finished
    pub fn finish_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.finish_time = Some(input);
        self
    }
    /// The time, in Unix epoch format, that the transcoding job finished
    pub fn set_finish_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.finish_time = input;
        self
    }
    /// The time, in Unix epoch format, that transcoding for the job began.
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// The time, in Unix epoch format, that transcoding for the job began.
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// The time, in Unix epoch format, that you submitted the job.
    pub fn submit_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.submit_time = Some(input);
        self
    }
    /// The time, in Unix epoch format, that you submitted the job.
    pub fn set_submit_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.submit_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Timing`](crate::types::Timing).
    pub fn build(self) -> crate::types::Timing {
        crate::types::Timing {
            finish_time: self.finish_time,
            start_time: self.start_time,
            submit_time: self.submit_time,
        }
    }
}
