// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `OutputSdt`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let outputsdt = unimplemented!();
/// match outputsdt {
///     OutputSdt::SdtFollow => { /* ... */ },
///     OutputSdt::SdtFollowIfPresent => { /* ... */ },
///     OutputSdt::SdtManual => { /* ... */ },
///     OutputSdt::SdtNone => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `outputsdt` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `OutputSdt::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `OutputSdt::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `OutputSdt::NewFeature` is defined.
/// Specifically, when `outputsdt` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `OutputSdt::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Selects method of inserting SDT information into output stream.  "Follow input SDT" copies SDT information from input stream to  output stream. "Follow input SDT if present" copies SDT information from  input stream to output stream if SDT information is present in the input, otherwise it will fall back on the user-defined values. Enter "SDT  Manually" means user will enter the SDT information. "No SDT" means output  stream will not contain SDT information.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum OutputSdt {
    #[allow(missing_docs)] // documentation missing in model
    SdtFollow,
    #[allow(missing_docs)] // documentation missing in model
    SdtFollowIfPresent,
    #[allow(missing_docs)] // documentation missing in model
    SdtManual,
    #[allow(missing_docs)] // documentation missing in model
    SdtNone,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for OutputSdt {
    fn from(s: &str) -> Self {
        match s {
            "SDT_FOLLOW" => OutputSdt::SdtFollow,
            "SDT_FOLLOW_IF_PRESENT" => OutputSdt::SdtFollowIfPresent,
            "SDT_MANUAL" => OutputSdt::SdtManual,
            "SDT_NONE" => OutputSdt::SdtNone,
            other => OutputSdt::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for OutputSdt {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(OutputSdt::from(s))
    }
}
impl OutputSdt {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            OutputSdt::SdtFollow => "SDT_FOLLOW",
            OutputSdt::SdtFollowIfPresent => "SDT_FOLLOW_IF_PRESENT",
            OutputSdt::SdtManual => "SDT_MANUAL",
            OutputSdt::SdtNone => "SDT_NONE",
            OutputSdt::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "SDT_FOLLOW",
            "SDT_FOLLOW_IF_PRESENT",
            "SDT_MANUAL",
            "SDT_NONE",
        ]
    }
}
impl AsRef<str> for OutputSdt {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
