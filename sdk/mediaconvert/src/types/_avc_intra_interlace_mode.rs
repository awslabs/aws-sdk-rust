// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AvcIntraInterlaceMode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let avcintrainterlacemode = unimplemented!();
/// match avcintrainterlacemode {
///     AvcIntraInterlaceMode::BottomField => { /* ... */ },
///     AvcIntraInterlaceMode::FollowBottomField => { /* ... */ },
///     AvcIntraInterlaceMode::FollowTopField => { /* ... */ },
///     AvcIntraInterlaceMode::Progressive => { /* ... */ },
///     AvcIntraInterlaceMode::TopField => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `avcintrainterlacemode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AvcIntraInterlaceMode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AvcIntraInterlaceMode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AvcIntraInterlaceMode::NewFeature` is defined.
/// Specifically, when `avcintrainterlacemode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AvcIntraInterlaceMode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Choose the scan line type for the output. Keep the default value, Progressive (PROGRESSIVE) to create a progressive output, regardless of the scan type of your input. Use Top field first (TOP_FIELD) or Bottom field first (BOTTOM_FIELD) to create an output that's interlaced with the same field polarity throughout. Use Follow, default top (FOLLOW_TOP_FIELD) or Follow, default bottom (FOLLOW_BOTTOM_FIELD) to produce outputs with the same field polarity as the source. For jobs that have multiple inputs, the output field polarity might change over the course of the output. Follow behavior depends on the input scan type. If the source is interlaced, the output will be interlaced with the same polarity as the source. If the source is progressive, the output will be interlaced with top field bottom field first, depending on which of the Follow options you choose.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AvcIntraInterlaceMode {
    #[allow(missing_docs)] // documentation missing in model
    BottomField,
    #[allow(missing_docs)] // documentation missing in model
    FollowBottomField,
    #[allow(missing_docs)] // documentation missing in model
    FollowTopField,
    #[allow(missing_docs)] // documentation missing in model
    Progressive,
    #[allow(missing_docs)] // documentation missing in model
    TopField,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AvcIntraInterlaceMode {
    fn from(s: &str) -> Self {
        match s {
            "BOTTOM_FIELD" => AvcIntraInterlaceMode::BottomField,
            "FOLLOW_BOTTOM_FIELD" => AvcIntraInterlaceMode::FollowBottomField,
            "FOLLOW_TOP_FIELD" => AvcIntraInterlaceMode::FollowTopField,
            "PROGRESSIVE" => AvcIntraInterlaceMode::Progressive,
            "TOP_FIELD" => AvcIntraInterlaceMode::TopField,
            other => AvcIntraInterlaceMode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AvcIntraInterlaceMode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AvcIntraInterlaceMode::from(s))
    }
}
impl AvcIntraInterlaceMode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AvcIntraInterlaceMode::BottomField => "BOTTOM_FIELD",
            AvcIntraInterlaceMode::FollowBottomField => "FOLLOW_BOTTOM_FIELD",
            AvcIntraInterlaceMode::FollowTopField => "FOLLOW_TOP_FIELD",
            AvcIntraInterlaceMode::Progressive => "PROGRESSIVE",
            AvcIntraInterlaceMode::TopField => "TOP_FIELD",
            AvcIntraInterlaceMode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BOTTOM_FIELD",
            "FOLLOW_BOTTOM_FIELD",
            "FOLLOW_TOP_FIELD",
            "PROGRESSIVE",
            "TOP_FIELD",
        ]
    }
}
impl AsRef<str> for AvcIntraInterlaceMode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
