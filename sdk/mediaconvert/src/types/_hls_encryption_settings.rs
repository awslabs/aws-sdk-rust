// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for HLS encryption
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HlsEncryptionSettings {
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    #[doc(hidden)]
    pub constant_initialization_vector: std::option::Option<std::string::String>,
    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    #[doc(hidden)]
    pub encryption_method: std::option::Option<crate::types::HlsEncryptionType>,
    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    #[doc(hidden)]
    pub initialization_vector_in_manifest:
        std::option::Option<crate::types::HlsInitializationVectorInManifest>,
    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    #[doc(hidden)]
    pub offline_encrypted: std::option::Option<crate::types::HlsOfflineEncrypted>,
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    #[doc(hidden)]
    pub speke_key_provider: std::option::Option<crate::types::SpekeKeyProvider>,
    /// Use these settings to set up encryption with a static key provider.
    #[doc(hidden)]
    pub static_key_provider: std::option::Option<crate::types::StaticKeyProvider>,
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::HlsKeyProviderType>,
}
impl HlsEncryptionSettings {
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    pub fn constant_initialization_vector(&self) -> std::option::Option<&str> {
        self.constant_initialization_vector.as_deref()
    }
    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    pub fn encryption_method(&self) -> std::option::Option<&crate::types::HlsEncryptionType> {
        self.encryption_method.as_ref()
    }
    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    pub fn initialization_vector_in_manifest(
        &self,
    ) -> std::option::Option<&crate::types::HlsInitializationVectorInManifest> {
        self.initialization_vector_in_manifest.as_ref()
    }
    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    pub fn offline_encrypted(&self) -> std::option::Option<&crate::types::HlsOfflineEncrypted> {
        self.offline_encrypted.as_ref()
    }
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    pub fn speke_key_provider(&self) -> std::option::Option<&crate::types::SpekeKeyProvider> {
        self.speke_key_provider.as_ref()
    }
    /// Use these settings to set up encryption with a static key provider.
    pub fn static_key_provider(&self) -> std::option::Option<&crate::types::StaticKeyProvider> {
        self.static_key_provider.as_ref()
    }
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    pub fn r#type(&self) -> std::option::Option<&crate::types::HlsKeyProviderType> {
        self.r#type.as_ref()
    }
}
impl HlsEncryptionSettings {
    /// Creates a new builder-style object to manufacture [`HlsEncryptionSettings`](crate::types::HlsEncryptionSettings).
    pub fn builder() -> crate::types::builders::HlsEncryptionSettingsBuilder {
        crate::types::builders::HlsEncryptionSettingsBuilder::default()
    }
}

/// A builder for [`HlsEncryptionSettings`](crate::types::HlsEncryptionSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HlsEncryptionSettingsBuilder {
    pub(crate) constant_initialization_vector: std::option::Option<std::string::String>,
    pub(crate) encryption_method: std::option::Option<crate::types::HlsEncryptionType>,
    pub(crate) initialization_vector_in_manifest:
        std::option::Option<crate::types::HlsInitializationVectorInManifest>,
    pub(crate) offline_encrypted: std::option::Option<crate::types::HlsOfflineEncrypted>,
    pub(crate) speke_key_provider: std::option::Option<crate::types::SpekeKeyProvider>,
    pub(crate) static_key_provider: std::option::Option<crate::types::StaticKeyProvider>,
    pub(crate) r#type: std::option::Option<crate::types::HlsKeyProviderType>,
}
impl HlsEncryptionSettingsBuilder {
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    pub fn constant_initialization_vector(mut self, input: impl Into<std::string::String>) -> Self {
        self.constant_initialization_vector = Some(input.into());
        self
    }
    /// This is a 128-bit, 16-byte hex value represented by a 32-character text string. If this parameter is not set then the Initialization Vector will follow the segment number by default.
    pub fn set_constant_initialization_vector(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.constant_initialization_vector = input;
        self
    }
    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    pub fn encryption_method(mut self, input: crate::types::HlsEncryptionType) -> Self {
        self.encryption_method = Some(input);
        self
    }
    /// Encrypts the segments with the given encryption scheme. Leave blank to disable. Selecting 'Disabled' in the web interface also disables encryption.
    pub fn set_encryption_method(
        mut self,
        input: std::option::Option<crate::types::HlsEncryptionType>,
    ) -> Self {
        self.encryption_method = input;
        self
    }
    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    pub fn initialization_vector_in_manifest(
        mut self,
        input: crate::types::HlsInitializationVectorInManifest,
    ) -> Self {
        self.initialization_vector_in_manifest = Some(input);
        self
    }
    /// The Initialization Vector is a 128-bit number used in conjunction with the key for encrypting blocks. If set to INCLUDE, Initialization Vector is listed in the manifest. Otherwise Initialization Vector is not in the manifest.
    pub fn set_initialization_vector_in_manifest(
        mut self,
        input: std::option::Option<crate::types::HlsInitializationVectorInManifest>,
    ) -> Self {
        self.initialization_vector_in_manifest = input;
        self
    }
    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    pub fn offline_encrypted(mut self, input: crate::types::HlsOfflineEncrypted) -> Self {
        self.offline_encrypted = Some(input);
        self
    }
    /// Enable this setting to insert the EXT-X-SESSION-KEY element into the master playlist. This allows for offline Apple HLS FairPlay content protection.
    pub fn set_offline_encrypted(
        mut self,
        input: std::option::Option<crate::types::HlsOfflineEncrypted>,
    ) -> Self {
        self.offline_encrypted = input;
        self
    }
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    pub fn speke_key_provider(mut self, input: crate::types::SpekeKeyProvider) -> Self {
        self.speke_key_provider = Some(input);
        self
    }
    /// If your output group type is HLS, DASH, or Microsoft Smooth, use these settings when doing DRM encryption with a SPEKE-compliant key provider. If your output group type is CMAF, use the SpekeKeyProviderCmaf settings instead.
    pub fn set_speke_key_provider(
        mut self,
        input: std::option::Option<crate::types::SpekeKeyProvider>,
    ) -> Self {
        self.speke_key_provider = input;
        self
    }
    /// Use these settings to set up encryption with a static key provider.
    pub fn static_key_provider(mut self, input: crate::types::StaticKeyProvider) -> Self {
        self.static_key_provider = Some(input);
        self
    }
    /// Use these settings to set up encryption with a static key provider.
    pub fn set_static_key_provider(
        mut self,
        input: std::option::Option<crate::types::StaticKeyProvider>,
    ) -> Self {
        self.static_key_provider = input;
        self
    }
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    pub fn r#type(mut self, input: crate::types::HlsKeyProviderType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// Specify whether your DRM encryption key is static or from a key provider that follows the SPEKE standard. For more information about SPEKE, see https://docs.aws.amazon.com/speke/latest/documentation/what-is-speke.html.
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::HlsKeyProviderType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`HlsEncryptionSettings`](crate::types::HlsEncryptionSettings).
    pub fn build(self) -> crate::types::HlsEncryptionSettings {
        crate::types::HlsEncryptionSettings {
            constant_initialization_vector: self.constant_initialization_vector,
            encryption_method: self.encryption_method,
            initialization_vector_in_manifest: self.initialization_vector_in_manifest,
            offline_encrypted: self.offline_encrypted,
            speke_key_provider: self.speke_key_provider,
            static_key_provider: self.static_key_provider,
            r#type: self.r#type,
        }
    }
}
