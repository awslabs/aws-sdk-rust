// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AacCodingMode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let aaccodingmode = unimplemented!();
/// match aaccodingmode {
///     AacCodingMode::AdReceiverMix => { /* ... */ },
///     AacCodingMode::CodingMode10 => { /* ... */ },
///     AacCodingMode::CodingMode11 => { /* ... */ },
///     AacCodingMode::CodingMode20 => { /* ... */ },
///     AacCodingMode::CodingMode51 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `aaccodingmode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AacCodingMode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AacCodingMode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AacCodingMode::NewFeature` is defined.
/// Specifically, when `aaccodingmode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AacCodingMode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// The Coding mode that you specify determines the number of audio channels and the audio channel layout metadata in your AAC output. Valid coding modes depend on the Rate control mode and Profile that you select. The following list shows the number of audio channels and channel layout for each coding mode. * 1.0 Audio Description (Receiver Mix): One channel, C. Includes audio description data from your stereo input. For more information see ETSI TS 101 154 Annex E. * 1.0 Mono: One channel, C. * 2.0 Stereo: Two channels, L, R. * 5.1 Surround: Five channels, C, L, R, Ls, Rs, LFE.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AacCodingMode {
    #[allow(missing_docs)] // documentation missing in model
    AdReceiverMix,
    #[allow(missing_docs)] // documentation missing in model
    CodingMode10,
    #[allow(missing_docs)] // documentation missing in model
    CodingMode11,
    #[allow(missing_docs)] // documentation missing in model
    CodingMode20,
    #[allow(missing_docs)] // documentation missing in model
    CodingMode51,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AacCodingMode {
    fn from(s: &str) -> Self {
        match s {
            "AD_RECEIVER_MIX" => AacCodingMode::AdReceiverMix,
            "CODING_MODE_1_0" => AacCodingMode::CodingMode10,
            "CODING_MODE_1_1" => AacCodingMode::CodingMode11,
            "CODING_MODE_2_0" => AacCodingMode::CodingMode20,
            "CODING_MODE_5_1" => AacCodingMode::CodingMode51,
            other => {
                AacCodingMode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for AacCodingMode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AacCodingMode::from(s))
    }
}
impl AacCodingMode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AacCodingMode::AdReceiverMix => "AD_RECEIVER_MIX",
            AacCodingMode::CodingMode10 => "CODING_MODE_1_0",
            AacCodingMode::CodingMode11 => "CODING_MODE_1_1",
            AacCodingMode::CodingMode20 => "CODING_MODE_2_0",
            AacCodingMode::CodingMode51 => "CODING_MODE_5_1",
            AacCodingMode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AD_RECEIVER_MIX",
            "CODING_MODE_1_0",
            "CODING_MODE_1_1",
            "CODING_MODE_2_0",
            "CODING_MODE_5_1",
        ]
    }
}
impl AsRef<str> for AacCodingMode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
