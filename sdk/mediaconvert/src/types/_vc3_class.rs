// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Vc3Class`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let vc3class = unimplemented!();
/// match vc3class {
///     Vc3Class::Class1458Bit => { /* ... */ },
///     Vc3Class::Class22010Bit => { /* ... */ },
///     Vc3Class::Class2208Bit => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `vc3class` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Vc3Class::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Vc3Class::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Vc3Class::NewFeature` is defined.
/// Specifically, when `vc3class` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Vc3Class::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify the VC3 class to choose the quality characteristics for this output. VC3 class, together with the settings Framerate (framerateNumerator and framerateDenominator) and Resolution (height and width), determine your output bitrate. For example, say that your video resolution is 1920x1080 and your framerate is 29.97. Then Class 145 (CLASS_145) gives you an output with a bitrate of approximately 145 Mbps and Class 220 (CLASS_220) gives you and output with a bitrate of approximately 220 Mbps. VC3 class also specifies the color bit depth of your output.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Vc3Class {
    #[allow(missing_docs)] // documentation missing in model
    Class1458Bit,
    #[allow(missing_docs)] // documentation missing in model
    Class22010Bit,
    #[allow(missing_docs)] // documentation missing in model
    Class2208Bit,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Vc3Class {
    fn from(s: &str) -> Self {
        match s {
            "CLASS_145_8BIT" => Vc3Class::Class1458Bit,
            "CLASS_220_10BIT" => Vc3Class::Class22010Bit,
            "CLASS_220_8BIT" => Vc3Class::Class2208Bit,
            other => Vc3Class::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for Vc3Class {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Vc3Class::from(s))
    }
}
impl Vc3Class {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Vc3Class::Class1458Bit => "CLASS_145_8BIT",
            Vc3Class::Class22010Bit => "CLASS_220_10BIT",
            Vc3Class::Class2208Bit => "CLASS_220_8BIT",
            Vc3Class::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["CLASS_145_8BIT", "CLASS_220_10BIT", "CLASS_220_8BIT"]
    }
}
impl AsRef<str> for Vc3Class {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
