// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// If your input captions are SCC, SMI, SRT, STL, TTML, WebVTT, or IMSC 1.1 in an xml file, specify the URI of the input caption source file. If your caption source is IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FileSourceSettings {
    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    pub byte_rate_limit: ::std::option::Option<crate::types::CaptionSourceByteRateLimit>,
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    pub convert608_to708: ::std::option::Option<crate::types::FileSourceConvert608To708>,
    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    pub convert_paint_to_pop: ::std::option::Option<crate::types::CaptionSourceConvertPaintOnToPopOn>,
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    pub framerate: ::std::option::Option<crate::types::CaptionSourceFramerate>,
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
    pub source_file: ::std::option::Option<::std::string::String>,
    /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
    pub time_delta: ::std::option::Option<i32>,
    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    pub time_delta_units: ::std::option::Option<crate::types::FileSourceTimeDeltaUnits>,
}
impl FileSourceSettings {
    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    pub fn byte_rate_limit(&self) -> ::std::option::Option<&crate::types::CaptionSourceByteRateLimit> {
        self.byte_rate_limit.as_ref()
    }
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    pub fn convert608_to708(&self) -> ::std::option::Option<&crate::types::FileSourceConvert608To708> {
        self.convert608_to708.as_ref()
    }
    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    pub fn convert_paint_to_pop(&self) -> ::std::option::Option<&crate::types::CaptionSourceConvertPaintOnToPopOn> {
        self.convert_paint_to_pop.as_ref()
    }
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    pub fn framerate(&self) -> ::std::option::Option<&crate::types::CaptionSourceFramerate> {
        self.framerate.as_ref()
    }
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
    pub fn source_file(&self) -> ::std::option::Option<&str> {
        self.source_file.as_deref()
    }
    /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
    pub fn time_delta(&self) -> ::std::option::Option<i32> {
        self.time_delta
    }
    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    pub fn time_delta_units(&self) -> ::std::option::Option<&crate::types::FileSourceTimeDeltaUnits> {
        self.time_delta_units.as_ref()
    }
}
impl FileSourceSettings {
    /// Creates a new builder-style object to manufacture [`FileSourceSettings`](crate::types::FileSourceSettings).
    pub fn builder() -> crate::types::builders::FileSourceSettingsBuilder {
        crate::types::builders::FileSourceSettingsBuilder::default()
    }
}

/// A builder for [`FileSourceSettings`](crate::types::FileSourceSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FileSourceSettingsBuilder {
    pub(crate) byte_rate_limit: ::std::option::Option<crate::types::CaptionSourceByteRateLimit>,
    pub(crate) convert608_to708: ::std::option::Option<crate::types::FileSourceConvert608To708>,
    pub(crate) convert_paint_to_pop: ::std::option::Option<crate::types::CaptionSourceConvertPaintOnToPopOn>,
    pub(crate) framerate: ::std::option::Option<crate::types::CaptionSourceFramerate>,
    pub(crate) source_file: ::std::option::Option<::std::string::String>,
    pub(crate) time_delta: ::std::option::Option<i32>,
    pub(crate) time_delta_units: ::std::option::Option<crate::types::FileSourceTimeDeltaUnits>,
}
impl FileSourceSettingsBuilder {
    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    pub fn byte_rate_limit(mut self, input: crate::types::CaptionSourceByteRateLimit) -> Self {
        self.byte_rate_limit = ::std::option::Option::Some(input);
        self
    }
    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    pub fn set_byte_rate_limit(mut self, input: ::std::option::Option<crate::types::CaptionSourceByteRateLimit>) -> Self {
        self.byte_rate_limit = input;
        self
    }
    /// Choose whether to limit the byte rate at which your SCC input captions are inserted into your output. To not limit the caption rate: We recommend that you keep the default value, Disabled. MediaConvert inserts captions in your output according to the byte rates listed in the EIA-608 specification, typically 2 or 3 caption bytes per frame depending on your output frame rate. To limit your output caption rate: Choose Enabled. Choose this option if your downstream systems require a maximum of 2 caption bytes per frame. Note that this setting has no effect when your output frame rate is 30 or 60.
    pub fn get_byte_rate_limit(&self) -> &::std::option::Option<crate::types::CaptionSourceByteRateLimit> {
        &self.byte_rate_limit
    }
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    pub fn convert608_to708(mut self, input: crate::types::FileSourceConvert608To708) -> Self {
        self.convert608_to708 = ::std::option::Option::Some(input);
        self
    }
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    pub fn set_convert608_to708(mut self, input: ::std::option::Option<crate::types::FileSourceConvert608To708>) -> Self {
        self.convert608_to708 = input;
        self
    }
    /// Specify whether this set of input captions appears in your outputs in both 608 and 708 format. If you choose Upconvert, MediaConvert includes the captions data in two ways: it passes the 608 data through using the 608 compatibility bytes fields of the 708 wrapper, and it also translates the 608 data into 708.
    pub fn get_convert608_to708(&self) -> &::std::option::Option<crate::types::FileSourceConvert608To708> {
        &self.convert608_to708
    }
    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    pub fn convert_paint_to_pop(mut self, input: crate::types::CaptionSourceConvertPaintOnToPopOn) -> Self {
        self.convert_paint_to_pop = ::std::option::Option::Some(input);
        self
    }
    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    pub fn set_convert_paint_to_pop(mut self, input: ::std::option::Option<crate::types::CaptionSourceConvertPaintOnToPopOn>) -> Self {
        self.convert_paint_to_pop = input;
        self
    }
    /// Choose the presentation style of your input SCC captions. To use the same presentation style as your input: Keep the default value, Disabled. To convert paint-on captions to pop-on: Choose Enabled. We also recommend that you choose Enabled if you notice additional repeated lines in your output captions.
    pub fn get_convert_paint_to_pop(&self) -> &::std::option::Option<crate::types::CaptionSourceConvertPaintOnToPopOn> {
        &self.convert_paint_to_pop
    }
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    pub fn framerate(mut self, input: crate::types::CaptionSourceFramerate) -> Self {
        self.framerate = ::std::option::Option::Some(input);
        self
    }
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    pub fn set_framerate(mut self, input: ::std::option::Option<crate::types::CaptionSourceFramerate>) -> Self {
        self.framerate = input;
        self
    }
    /// Ignore this setting unless your input captions format is SCC. To have the service compensate for differing frame rates between your input captions and input video, specify the frame rate of the captions file. Specify this value as a fraction. For example, you might specify 24 / 1 for 24 fps, 25 / 1 for 25 fps, 24000 / 1001 for 23.976 fps, or 30000 / 1001 for 29.97 fps.
    pub fn get_framerate(&self) -> &::std::option::Option<crate::types::CaptionSourceFramerate> {
        &self.framerate
    }
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
    pub fn source_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_file = ::std::option::Option::Some(input.into());
        self
    }
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
    pub fn set_source_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_file = input;
        self
    }
    /// External caption file used for loading captions. Accepted file extensions are 'scc', 'ttml', 'dfxp', 'stl', 'srt', 'xml', 'smi', 'webvtt', and 'vtt'.
    pub fn get_source_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_file
    }
    /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
    pub fn time_delta(mut self, input: i32) -> Self {
        self.time_delta = ::std::option::Option::Some(input);
        self
    }
    /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
    pub fn set_time_delta(mut self, input: ::std::option::Option<i32>) -> Self {
        self.time_delta = input;
        self
    }
    /// Optional. Use this setting when you need to adjust the sync between your sidecar captions and your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/time-delta-use-cases.html. Enter a positive or negative number to modify the times in the captions file. For example, type 15 to add 15 seconds to all the times in the captions file. Type -5 to subtract 5 seconds from the times in the captions file. You can optionally specify your time delta in milliseconds instead of seconds. When you do so, set the related setting, Time delta units to Milliseconds. Note that, when you specify a time delta for timecode-based caption sources, such as SCC and STL, and your time delta isn't a multiple of the input frame rate, MediaConvert snaps the captions to the nearest frame. For example, when your input video frame rate is 25 fps and you specify 1010ms for time delta, MediaConvert delays your captions by 1000 ms.
    pub fn get_time_delta(&self) -> &::std::option::Option<i32> {
        &self.time_delta
    }
    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    pub fn time_delta_units(mut self, input: crate::types::FileSourceTimeDeltaUnits) -> Self {
        self.time_delta_units = ::std::option::Option::Some(input);
        self
    }
    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    pub fn set_time_delta_units(mut self, input: ::std::option::Option<crate::types::FileSourceTimeDeltaUnits>) -> Self {
        self.time_delta_units = input;
        self
    }
    /// When you use the setting Time delta to adjust the sync between your sidecar captions and your video, use this setting to specify the units for the delta that you specify. When you don't specify a value for Time delta units, MediaConvert uses seconds by default.
    pub fn get_time_delta_units(&self) -> &::std::option::Option<crate::types::FileSourceTimeDeltaUnits> {
        &self.time_delta_units
    }
    /// Consumes the builder and constructs a [`FileSourceSettings`](crate::types::FileSourceSettings).
    pub fn build(self) -> crate::types::FileSourceSettings {
        crate::types::FileSourceSettings {
            byte_rate_limit: self.byte_rate_limit,
            convert608_to708: self.convert608_to708,
            convert_paint_to_pop: self.convert_paint_to_pop,
            framerate: self.framerate,
            source_file: self.source_file,
            time_delta: self.time_delta,
            time_delta_units: self.time_delta_units,
        }
    }
}
