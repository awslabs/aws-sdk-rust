// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to teletext captions. Set up teletext captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/teletext-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to TELETEXT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TeletextDestinationSettings {
    /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
    #[doc(hidden)]
    pub page_number: std::option::Option<std::string::String>,
    /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle (PAGE_TYPE_SUBTITLE). If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
    #[doc(hidden)]
    pub page_types: std::option::Option<std::vec::Vec<crate::types::TeletextPageType>>,
}
impl TeletextDestinationSettings {
    /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
    pub fn page_number(&self) -> std::option::Option<&str> {
        self.page_number.as_deref()
    }
    /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle (PAGE_TYPE_SUBTITLE). If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
    pub fn page_types(&self) -> std::option::Option<&[crate::types::TeletextPageType]> {
        self.page_types.as_deref()
    }
}
impl TeletextDestinationSettings {
    /// Creates a new builder-style object to manufacture [`TeletextDestinationSettings`](crate::types::TeletextDestinationSettings).
    pub fn builder() -> crate::types::builders::TeletextDestinationSettingsBuilder {
        crate::types::builders::TeletextDestinationSettingsBuilder::default()
    }
}

/// A builder for [`TeletextDestinationSettings`](crate::types::TeletextDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TeletextDestinationSettingsBuilder {
    pub(crate) page_number: std::option::Option<std::string::String>,
    pub(crate) page_types: std::option::Option<std::vec::Vec<crate::types::TeletextPageType>>,
}
impl TeletextDestinationSettingsBuilder {
    /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
    pub fn page_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.page_number = Some(input.into());
        self
    }
    /// Set pageNumber to the Teletext page number for the destination captions for this output. This value must be a three-digit hexadecimal string; strings ending in -FF are invalid. If you are passing through the entire set of Teletext data, do not use this field.
    pub fn set_page_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.page_number = input;
        self
    }
    /// Appends an item to `page_types`.
    ///
    /// To override the contents of this collection use [`set_page_types`](Self::set_page_types).
    ///
    /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle (PAGE_TYPE_SUBTITLE). If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
    pub fn page_types(mut self, input: crate::types::TeletextPageType) -> Self {
        let mut v = self.page_types.unwrap_or_default();
        v.push(input);
        self.page_types = Some(v);
        self
    }
    /// Specify the page types for this Teletext page. If you don't specify a value here, the service sets the page type to the default value Subtitle (PAGE_TYPE_SUBTITLE). If you pass through the entire set of Teletext data, don't use this field. When you pass through a set of Teletext pages, your output has the same page types as your input.
    pub fn set_page_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TeletextPageType>>,
    ) -> Self {
        self.page_types = input;
        self
    }
    /// Consumes the builder and constructs a [`TeletextDestinationSettings`](crate::types::TeletextDestinationSettings).
    pub fn build(self) -> crate::types::TeletextDestinationSettings {
        crate::types::TeletextDestinationSettings {
            page_number: self.page_number,
            page_types: self.page_types,
        }
    }
}
