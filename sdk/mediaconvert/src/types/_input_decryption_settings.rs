// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings for decrypting any input files that you encrypt before you upload them to Amazon S3. MediaConvert can decrypt files only when you use AWS Key Management Service (KMS) to encrypt the data key that you use to encrypt your content.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputDecryptionSettings {
    /// Specify the encryption mode that you used to encrypt your input files.
    #[doc(hidden)]
    pub decryption_mode: std::option::Option<crate::types::DecryptionMode>,
    /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
    #[doc(hidden)]
    pub encrypted_decryption_key: std::option::Option<std::string::String>,
    /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
    #[doc(hidden)]
    pub initialization_vector: std::option::Option<std::string::String>,
    /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
    #[doc(hidden)]
    pub kms_key_region: std::option::Option<std::string::String>,
}
impl InputDecryptionSettings {
    /// Specify the encryption mode that you used to encrypt your input files.
    pub fn decryption_mode(&self) -> std::option::Option<&crate::types::DecryptionMode> {
        self.decryption_mode.as_ref()
    }
    /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
    pub fn encrypted_decryption_key(&self) -> std::option::Option<&str> {
        self.encrypted_decryption_key.as_deref()
    }
    /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
    pub fn initialization_vector(&self) -> std::option::Option<&str> {
        self.initialization_vector.as_deref()
    }
    /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
    pub fn kms_key_region(&self) -> std::option::Option<&str> {
        self.kms_key_region.as_deref()
    }
}
impl InputDecryptionSettings {
    /// Creates a new builder-style object to manufacture [`InputDecryptionSettings`](crate::types::InputDecryptionSettings).
    pub fn builder() -> crate::types::builders::InputDecryptionSettingsBuilder {
        crate::types::builders::InputDecryptionSettingsBuilder::default()
    }
}

/// A builder for [`InputDecryptionSettings`](crate::types::InputDecryptionSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputDecryptionSettingsBuilder {
    pub(crate) decryption_mode: std::option::Option<crate::types::DecryptionMode>,
    pub(crate) encrypted_decryption_key: std::option::Option<std::string::String>,
    pub(crate) initialization_vector: std::option::Option<std::string::String>,
    pub(crate) kms_key_region: std::option::Option<std::string::String>,
}
impl InputDecryptionSettingsBuilder {
    /// Specify the encryption mode that you used to encrypt your input files.
    pub fn decryption_mode(mut self, input: crate::types::DecryptionMode) -> Self {
        self.decryption_mode = Some(input);
        self
    }
    /// Specify the encryption mode that you used to encrypt your input files.
    pub fn set_decryption_mode(
        mut self,
        input: std::option::Option<crate::types::DecryptionMode>,
    ) -> Self {
        self.decryption_mode = input;
        self
    }
    /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
    pub fn encrypted_decryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encrypted_decryption_key = Some(input.into());
        self
    }
    /// Warning! Don't provide your encryption key in plaintext. Your job settings could be intercepted, making your encrypted content vulnerable. Specify the encrypted version of the data key that you used to encrypt your content. The data key must be encrypted by AWS Key Management Service (KMS). The key can be 128, 192, or 256 bits.
    pub fn set_encrypted_decryption_key(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.encrypted_decryption_key = input;
        self
    }
    /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
    pub fn initialization_vector(mut self, input: impl Into<std::string::String>) -> Self {
        self.initialization_vector = Some(input.into());
        self
    }
    /// Specify the initialization vector that you used when you encrypted your content before uploading it to Amazon S3. You can use a 16-byte initialization vector with any encryption mode. Or, you can use a 12-byte initialization vector with GCM or CTR. MediaConvert accepts only initialization vectors that are base64-encoded.
    pub fn set_initialization_vector(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.initialization_vector = input;
        self
    }
    /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
    pub fn kms_key_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_region = Some(input.into());
        self
    }
    /// Specify the AWS Region for AWS Key Management Service (KMS) that you used to encrypt your data key, if that Region is different from the one you are using for AWS Elemental MediaConvert.
    pub fn set_kms_key_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_region = input;
        self
    }
    /// Consumes the builder and constructs a [`InputDecryptionSettings`](crate::types::InputDecryptionSettings).
    pub fn build(self) -> crate::types::InputDecryptionSettings {
        crate::types::InputDecryptionSettings {
            decryption_mode: self.decryption_mode,
            encrypted_decryption_key: self.encrypted_decryption_key,
            initialization_vector: self.initialization_vector,
            kms_key_region: self.kms_key_region,
        }
    }
}
