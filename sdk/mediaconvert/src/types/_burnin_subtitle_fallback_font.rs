// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BurninSubtitleFallbackFont`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let burninsubtitlefallbackfont = unimplemented!();
/// match burninsubtitlefallbackfont {
///     BurninSubtitleFallbackFont::BestMatch => { /* ... */ },
///     BurninSubtitleFallbackFont::MonospacedSansserif => { /* ... */ },
///     BurninSubtitleFallbackFont::MonospacedSerif => { /* ... */ },
///     BurninSubtitleFallbackFont::ProportionalSansserif => { /* ... */ },
///     BurninSubtitleFallbackFont::ProportionalSerif => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `burninsubtitlefallbackfont` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BurninSubtitleFallbackFont::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BurninSubtitleFallbackFont::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BurninSubtitleFallbackFont::NewFeature` is defined.
/// Specifically, when `burninsubtitlefallbackfont` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BurninSubtitleFallbackFont::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BurninSubtitleFallbackFont {
    #[allow(missing_docs)] // documentation missing in model
    BestMatch,
    #[allow(missing_docs)] // documentation missing in model
    MonospacedSansserif,
    #[allow(missing_docs)] // documentation missing in model
    MonospacedSerif,
    #[allow(missing_docs)] // documentation missing in model
    ProportionalSansserif,
    #[allow(missing_docs)] // documentation missing in model
    ProportionalSerif,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BurninSubtitleFallbackFont {
    fn from(s: &str) -> Self {
        match s {
            "BEST_MATCH" => BurninSubtitleFallbackFont::BestMatch,
            "MONOSPACED_SANSSERIF" => BurninSubtitleFallbackFont::MonospacedSansserif,
            "MONOSPACED_SERIF" => BurninSubtitleFallbackFont::MonospacedSerif,
            "PROPORTIONAL_SANSSERIF" => BurninSubtitleFallbackFont::ProportionalSansserif,
            "PROPORTIONAL_SERIF" => BurninSubtitleFallbackFont::ProportionalSerif,
            other => BurninSubtitleFallbackFont::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for BurninSubtitleFallbackFont {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BurninSubtitleFallbackFont::from(s))
    }
}
impl BurninSubtitleFallbackFont {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BurninSubtitleFallbackFont::BestMatch => "BEST_MATCH",
            BurninSubtitleFallbackFont::MonospacedSansserif => "MONOSPACED_SANSSERIF",
            BurninSubtitleFallbackFont::MonospacedSerif => "MONOSPACED_SERIF",
            BurninSubtitleFallbackFont::ProportionalSansserif => "PROPORTIONAL_SANSSERIF",
            BurninSubtitleFallbackFont::ProportionalSerif => "PROPORTIONAL_SERIF",
            BurninSubtitleFallbackFont::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BEST_MATCH",
            "MONOSPACED_SANSSERIF",
            "MONOSPACED_SERIF",
            "PROPORTIONAL_SANSSERIF",
            "PROPORTIONAL_SERIF",
        ]
    }
}
impl AsRef<str> for BurninSubtitleFallbackFont {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
