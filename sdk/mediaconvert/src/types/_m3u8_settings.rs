// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct M3u8Settings {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub audio_duration: ::std::option::Option<crate::types::M3u8AudioDuration>,
    /// The number of audio frames to insert for each PES packet.
    pub audio_frames_per_pes: ::std::option::Option<i32>,
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    pub audio_pids: ::std::option::Option<::std::vec::Vec<i32>>,
    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    pub data_pts_control: ::std::option::Option<crate::types::M3u8DataPtsControl>,
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    pub max_pcr_interval: ::std::option::Option<i32>,
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub nielsen_id3: ::std::option::Option<crate::types::M3u8NielsenId3>,
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub pat_interval: ::std::option::Option<i32>,
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub pcr_control: ::std::option::Option<crate::types::M3u8PcrControl>,
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    pub pcr_pid: ::std::option::Option<i32>,
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub pmt_interval: ::std::option::Option<i32>,
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    pub pmt_pid: ::std::option::Option<i32>,
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    pub private_metadata_pid: ::std::option::Option<i32>,
    /// The value of the program number field in the Program Map Table.
    pub program_number: ::std::option::Option<i32>,
    /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
    pub pts_offset: ::std::option::Option<i32>,
    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    pub pts_offset_mode: ::std::option::Option<crate::types::TsPtsOffset>,
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    pub scte35_pid: ::std::option::Option<i32>,
    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    pub scte35_source: ::std::option::Option<crate::types::M3u8Scte35Source>,
    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    pub timed_metadata: ::std::option::Option<crate::types::TimedMetadata>,
    /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
    pub timed_metadata_pid: ::std::option::Option<i32>,
    /// The value of the transport stream ID field in the Program Map Table.
    pub transport_stream_id: ::std::option::Option<i32>,
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    pub video_pid: ::std::option::Option<i32>,
}
impl M3u8Settings {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(&self) -> ::std::option::Option<&crate::types::M3u8AudioDuration> {
        self.audio_duration.as_ref()
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(&self) -> ::std::option::Option<i32> {
        self.audio_frames_per_pes
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audio_pids.is_none()`.
    pub fn audio_pids(&self) -> &[i32] {
        self.audio_pids.as_deref().unwrap_or_default()
    }
    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    pub fn data_pts_control(&self) -> ::std::option::Option<&crate::types::M3u8DataPtsControl> {
        self.data_pts_control.as_ref()
    }
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    pub fn max_pcr_interval(&self) -> ::std::option::Option<i32> {
        self.max_pcr_interval
    }
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3(&self) -> ::std::option::Option<&crate::types::M3u8NielsenId3> {
        self.nielsen_id3.as_ref()
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn pat_interval(&self) -> ::std::option::Option<i32> {
        self.pat_interval
    }
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(&self) -> ::std::option::Option<&crate::types::M3u8PcrControl> {
        self.pcr_control.as_ref()
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    pub fn pcr_pid(&self) -> ::std::option::Option<i32> {
        self.pcr_pid
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn pmt_interval(&self) -> ::std::option::Option<i32> {
        self.pmt_interval
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    pub fn pmt_pid(&self) -> ::std::option::Option<i32> {
        self.pmt_pid
    }
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    pub fn private_metadata_pid(&self) -> ::std::option::Option<i32> {
        self.private_metadata_pid
    }
    /// The value of the program number field in the Program Map Table.
    pub fn program_number(&self) -> ::std::option::Option<i32> {
        self.program_number
    }
    /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
    pub fn pts_offset(&self) -> ::std::option::Option<i32> {
        self.pts_offset
    }
    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    pub fn pts_offset_mode(&self) -> ::std::option::Option<&crate::types::TsPtsOffset> {
        self.pts_offset_mode.as_ref()
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    pub fn scte35_pid(&self) -> ::std::option::Option<i32> {
        self.scte35_pid
    }
    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    pub fn scte35_source(&self) -> ::std::option::Option<&crate::types::M3u8Scte35Source> {
        self.scte35_source.as_ref()
    }
    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    pub fn timed_metadata(&self) -> ::std::option::Option<&crate::types::TimedMetadata> {
        self.timed_metadata.as_ref()
    }
    /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
    pub fn timed_metadata_pid(&self) -> ::std::option::Option<i32> {
        self.timed_metadata_pid
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn transport_stream_id(&self) -> ::std::option::Option<i32> {
        self.transport_stream_id
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    pub fn video_pid(&self) -> ::std::option::Option<i32> {
        self.video_pid
    }
}
impl M3u8Settings {
    /// Creates a new builder-style object to manufacture [`M3u8Settings`](crate::types::M3u8Settings).
    pub fn builder() -> crate::types::builders::M3u8SettingsBuilder {
        crate::types::builders::M3u8SettingsBuilder::default()
    }
}

/// A builder for [`M3u8Settings`](crate::types::M3u8Settings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct M3u8SettingsBuilder {
    pub(crate) audio_duration: ::std::option::Option<crate::types::M3u8AudioDuration>,
    pub(crate) audio_frames_per_pes: ::std::option::Option<i32>,
    pub(crate) audio_pids: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) data_pts_control: ::std::option::Option<crate::types::M3u8DataPtsControl>,
    pub(crate) max_pcr_interval: ::std::option::Option<i32>,
    pub(crate) nielsen_id3: ::std::option::Option<crate::types::M3u8NielsenId3>,
    pub(crate) pat_interval: ::std::option::Option<i32>,
    pub(crate) pcr_control: ::std::option::Option<crate::types::M3u8PcrControl>,
    pub(crate) pcr_pid: ::std::option::Option<i32>,
    pub(crate) pmt_interval: ::std::option::Option<i32>,
    pub(crate) pmt_pid: ::std::option::Option<i32>,
    pub(crate) private_metadata_pid: ::std::option::Option<i32>,
    pub(crate) program_number: ::std::option::Option<i32>,
    pub(crate) pts_offset: ::std::option::Option<i32>,
    pub(crate) pts_offset_mode: ::std::option::Option<crate::types::TsPtsOffset>,
    pub(crate) scte35_pid: ::std::option::Option<i32>,
    pub(crate) scte35_source: ::std::option::Option<crate::types::M3u8Scte35Source>,
    pub(crate) timed_metadata: ::std::option::Option<crate::types::TimedMetadata>,
    pub(crate) timed_metadata_pid: ::std::option::Option<i32>,
    pub(crate) transport_stream_id: ::std::option::Option<i32>,
    pub(crate) video_pid: ::std::option::Option<i32>,
}
impl M3u8SettingsBuilder {
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn audio_duration(mut self, input: crate::types::M3u8AudioDuration) -> Self {
        self.audio_duration = ::std::option::Option::Some(input);
        self
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn set_audio_duration(mut self, input: ::std::option::Option<crate::types::M3u8AudioDuration>) -> Self {
        self.audio_duration = input;
        self
    }
    /// Specify this setting only when your output will be consumed by a downstream repackaging workflow that is sensitive to very small duration differences between video and audio. For this situation, choose Match video duration. In all other cases, keep the default value, Default codec duration. When you choose Match video duration, MediaConvert pads the output audio streams with silence or trims them to ensure that the total duration of each audio stream is at least as long as the total duration of the video stream. After padding or trimming, the audio stream duration is no more than one frame longer than the video stream. MediaConvert applies audio padding or trimming only to the end of the last segment of the output. For unsegmented outputs, MediaConvert adds padding only to the end of the file. When you keep the default value, any minor discrepancies between audio and video duration will depend on your output audio codec.
    pub fn get_audio_duration(&self) -> &::std::option::Option<crate::types::M3u8AudioDuration> {
        &self.audio_duration
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn audio_frames_per_pes(mut self, input: i32) -> Self {
        self.audio_frames_per_pes = ::std::option::Option::Some(input);
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn set_audio_frames_per_pes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.audio_frames_per_pes = input;
        self
    }
    /// The number of audio frames to insert for each PES packet.
    pub fn get_audio_frames_per_pes(&self) -> &::std::option::Option<i32> {
        &self.audio_frames_per_pes
    }
    /// Appends an item to `audio_pids`.
    ///
    /// To override the contents of this collection use [`set_audio_pids`](Self::set_audio_pids).
    ///
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    pub fn audio_pids(mut self, input: i32) -> Self {
        let mut v = self.audio_pids.unwrap_or_default();
        v.push(input);
        self.audio_pids = ::std::option::Option::Some(v);
        self
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    pub fn set_audio_pids(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.audio_pids = input;
        self
    }
    /// Packet Identifier (PID) of the elementary audio stream(s) in the transport stream. Multiple values are accepted, and can be entered in ranges and/or by comma separation.
    pub fn get_audio_pids(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.audio_pids
    }
    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    pub fn data_pts_control(mut self, input: crate::types::M3u8DataPtsControl) -> Self {
        self.data_pts_control = ::std::option::Option::Some(input);
        self
    }
    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    pub fn set_data_pts_control(mut self, input: ::std::option::Option<crate::types::M3u8DataPtsControl>) -> Self {
        self.data_pts_control = input;
        self
    }
    /// If you select ALIGN_TO_VIDEO, MediaConvert writes captions and data packets with Presentation Timestamp (PTS) values greater than or equal to the first video packet PTS (MediaConvert drops captions and data packets with lesser PTS values). Keep the default value AUTO to allow all PTS values.
    pub fn get_data_pts_control(&self) -> &::std::option::Option<crate::types::M3u8DataPtsControl> {
        &self.data_pts_control
    }
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    pub fn max_pcr_interval(mut self, input: i32) -> Self {
        self.max_pcr_interval = ::std::option::Option::Some(input);
        self
    }
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    pub fn set_max_pcr_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_pcr_interval = input;
        self
    }
    /// Specify the maximum time, in milliseconds, between Program Clock References (PCRs) inserted into the transport stream.
    pub fn get_max_pcr_interval(&self) -> &::std::option::Option<i32> {
        &self.max_pcr_interval
    }
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn nielsen_id3(mut self, input: crate::types::M3u8NielsenId3) -> Self {
        self.nielsen_id3 = ::std::option::Option::Some(input);
        self
    }
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn set_nielsen_id3(mut self, input: ::std::option::Option<crate::types::M3u8NielsenId3>) -> Self {
        self.nielsen_id3 = input;
        self
    }
    /// If INSERT, Nielsen inaudible tones for media tracking will be detected in the input audio and an equivalent ID3 tag will be inserted in the output.
    pub fn get_nielsen_id3(&self) -> &::std::option::Option<crate::types::M3u8NielsenId3> {
        &self.nielsen_id3
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn pat_interval(mut self, input: i32) -> Self {
        self.pat_interval = ::std::option::Option::Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn set_pat_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pat_interval = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn get_pat_interval(&self) -> &::std::option::Option<i32> {
        &self.pat_interval
    }
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn pcr_control(mut self, input: crate::types::M3u8PcrControl) -> Self {
        self.pcr_control = ::std::option::Option::Some(input);
        self
    }
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn set_pcr_control(mut self, input: ::std::option::Option<crate::types::M3u8PcrControl>) -> Self {
        self.pcr_control = input;
        self
    }
    /// When set to PCR_EVERY_PES_PACKET a Program Clock Reference value is inserted for every Packetized Elementary Stream (PES) header. This parameter is effective only when the PCR PID is the same as the video or audio elementary stream.
    pub fn get_pcr_control(&self) -> &::std::option::Option<crate::types::M3u8PcrControl> {
        &self.pcr_control
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    pub fn pcr_pid(mut self, input: i32) -> Self {
        self.pcr_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    pub fn set_pcr_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pcr_pid = input;
        self
    }
    /// Packet Identifier (PID) of the Program Clock Reference (PCR) in the transport stream. When no value is given, the encoder will assign the same value as the Video PID.
    pub fn get_pcr_pid(&self) -> &::std::option::Option<i32> {
        &self.pcr_pid
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn pmt_interval(mut self, input: i32) -> Self {
        self.pmt_interval = ::std::option::Option::Some(input);
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn set_pmt_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pmt_interval = input;
        self
    }
    /// The number of milliseconds between instances of this table in the output transport stream.
    pub fn get_pmt_interval(&self) -> &::std::option::Option<i32> {
        &self.pmt_interval
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    pub fn pmt_pid(mut self, input: i32) -> Self {
        self.pmt_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    pub fn set_pmt_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pmt_pid = input;
        self
    }
    /// Packet Identifier (PID) for the Program Map Table (PMT) in the transport stream.
    pub fn get_pmt_pid(&self) -> &::std::option::Option<i32> {
        &self.pmt_pid
    }
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    pub fn private_metadata_pid(mut self, input: i32) -> Self {
        self.private_metadata_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    pub fn set_private_metadata_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.private_metadata_pid = input;
        self
    }
    /// Packet Identifier (PID) of the private metadata stream in the transport stream.
    pub fn get_private_metadata_pid(&self) -> &::std::option::Option<i32> {
        &self.private_metadata_pid
    }
    /// The value of the program number field in the Program Map Table.
    pub fn program_number(mut self, input: i32) -> Self {
        self.program_number = ::std::option::Option::Some(input);
        self
    }
    /// The value of the program number field in the Program Map Table.
    pub fn set_program_number(mut self, input: ::std::option::Option<i32>) -> Self {
        self.program_number = input;
        self
    }
    /// The value of the program number field in the Program Map Table.
    pub fn get_program_number(&self) -> &::std::option::Option<i32> {
        &self.program_number
    }
    /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
    pub fn pts_offset(mut self, input: i32) -> Self {
        self.pts_offset = ::std::option::Option::Some(input);
        self
    }
    /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
    pub fn set_pts_offset(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pts_offset = input;
        self
    }
    /// Manually specify the initial PTS offset, in seconds, when you set PTS offset to Seconds. Enter an integer from 0 to 3600. Leave blank to keep the default value 2.
    pub fn get_pts_offset(&self) -> &::std::option::Option<i32> {
        &self.pts_offset
    }
    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    pub fn pts_offset_mode(mut self, input: crate::types::TsPtsOffset) -> Self {
        self.pts_offset_mode = ::std::option::Option::Some(input);
        self
    }
    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    pub fn set_pts_offset_mode(mut self, input: ::std::option::Option<crate::types::TsPtsOffset>) -> Self {
        self.pts_offset_mode = input;
        self
    }
    /// Specify the initial presentation timestamp (PTS) offset for your transport stream output. To let MediaConvert automatically determine the initial PTS offset: Keep the default value, Auto. We recommend that you choose Auto for the widest player compatibility. The initial PTS will be at least two seconds and vary depending on your output's bitrate, HRD buffer size and HRD buffer initial fill percentage. To manually specify an initial PTS offset: Choose Seconds. Then specify the number of seconds with PTS offset.
    pub fn get_pts_offset_mode(&self) -> &::std::option::Option<crate::types::TsPtsOffset> {
        &self.pts_offset_mode
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    pub fn scte35_pid(mut self, input: i32) -> Self {
        self.scte35_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    pub fn set_scte35_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.scte35_pid = input;
        self
    }
    /// Packet Identifier (PID) of the SCTE-35 stream in the transport stream.
    pub fn get_scte35_pid(&self) -> &::std::option::Option<i32> {
        &self.scte35_pid
    }
    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    pub fn scte35_source(mut self, input: crate::types::M3u8Scte35Source) -> Self {
        self.scte35_source = ::std::option::Option::Some(input);
        self
    }
    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    pub fn set_scte35_source(mut self, input: ::std::option::Option<crate::types::M3u8Scte35Source>) -> Self {
        self.scte35_source = input;
        self
    }
    /// For SCTE-35 markers from your input-- Choose Passthrough if you want SCTE-35 markers that appear in your input to also appear in this output. Choose None if you don't want SCTE-35 markers in this output. For SCTE-35 markers from an ESAM XML document-- Choose None if you don't want manifest conditioning. Choose Passthrough and choose Ad markers if you do want manifest conditioning. In both cases, also provide the ESAM XML as a string in the setting Signal processing notification XML.
    pub fn get_scte35_source(&self) -> &::std::option::Option<crate::types::M3u8Scte35Source> {
        &self.scte35_source
    }
    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    pub fn timed_metadata(mut self, input: crate::types::TimedMetadata) -> Self {
        self.timed_metadata = ::std::option::Option::Some(input);
        self
    }
    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    pub fn set_timed_metadata(mut self, input: ::std::option::Option<crate::types::TimedMetadata>) -> Self {
        self.timed_metadata = input;
        self
    }
    /// Set ID3 metadata to Passthrough to include ID3 metadata in this output. This includes ID3 metadata from the following features: ID3 timestamp period, and Custom ID3 metadata inserter. To exclude this ID3 metadata in this output: set ID3 metadata to None or leave blank.
    pub fn get_timed_metadata(&self) -> &::std::option::Option<crate::types::TimedMetadata> {
        &self.timed_metadata
    }
    /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
    pub fn timed_metadata_pid(mut self, input: i32) -> Self {
        self.timed_metadata_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
    pub fn set_timed_metadata_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timed_metadata_pid = input;
        self
    }
    /// Packet Identifier (PID) of the ID3 metadata stream in the transport stream.
    pub fn get_timed_metadata_pid(&self) -> &::std::option::Option<i32> {
        &self.timed_metadata_pid
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn transport_stream_id(mut self, input: i32) -> Self {
        self.transport_stream_id = ::std::option::Option::Some(input);
        self
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn set_transport_stream_id(mut self, input: ::std::option::Option<i32>) -> Self {
        self.transport_stream_id = input;
        self
    }
    /// The value of the transport stream ID field in the Program Map Table.
    pub fn get_transport_stream_id(&self) -> &::std::option::Option<i32> {
        &self.transport_stream_id
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    pub fn video_pid(mut self, input: i32) -> Self {
        self.video_pid = ::std::option::Option::Some(input);
        self
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    pub fn set_video_pid(mut self, input: ::std::option::Option<i32>) -> Self {
        self.video_pid = input;
        self
    }
    /// Packet Identifier (PID) of the elementary video stream in the transport stream.
    pub fn get_video_pid(&self) -> &::std::option::Option<i32> {
        &self.video_pid
    }
    /// Consumes the builder and constructs a [`M3u8Settings`](crate::types::M3u8Settings).
    pub fn build(self) -> crate::types::M3u8Settings {
        crate::types::M3u8Settings {
            audio_duration: self.audio_duration,
            audio_frames_per_pes: self.audio_frames_per_pes,
            audio_pids: self.audio_pids,
            data_pts_control: self.data_pts_control,
            max_pcr_interval: self.max_pcr_interval,
            nielsen_id3: self.nielsen_id3,
            pat_interval: self.pat_interval,
            pcr_control: self.pcr_control,
            pcr_pid: self.pcr_pid,
            pmt_interval: self.pmt_interval,
            pmt_pid: self.pmt_pid,
            private_metadata_pid: self.private_metadata_pid,
            program_number: self.program_number,
            pts_offset: self.pts_offset,
            pts_offset_mode: self.pts_offset_mode,
            scte35_pid: self.scte35_pid,
            scte35_source: self.scte35_source,
            timed_metadata: self.timed_metadata,
            timed_metadata_pid: self.timed_metadata_pid,
            transport_stream_id: self.transport_stream_id,
            video_pid: self.video_pid,
        }
    }
}
