// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use these settings to specify static color calibration metadata, as defined by SMPTE ST 2086. These values don't affect the pixel values that are encoded in the video stream. They are intended to help the downstream video player display content in a way that reflects the intentions of the the content creator.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Hdr10Metadata {
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub blue_primary_x: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub blue_primary_y: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub green_primary_x: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub green_primary_y: i32,
    /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    #[doc(hidden)]
    pub max_content_light_level: i32,
    /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    #[doc(hidden)]
    pub max_frame_average_light_level: i32,
    /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
    #[doc(hidden)]
    pub max_luminance: i32,
    /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
    #[doc(hidden)]
    pub min_luminance: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub red_primary_x: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub red_primary_y: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub white_point_x: i32,
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    #[doc(hidden)]
    pub white_point_y: i32,
}
impl Hdr10Metadata {
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn blue_primary_x(&self) -> i32 {
        self.blue_primary_x
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn blue_primary_y(&self) -> i32 {
        self.blue_primary_y
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn green_primary_x(&self) -> i32 {
        self.green_primary_x
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn green_primary_y(&self) -> i32 {
        self.green_primary_y
    }
    /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn max_content_light_level(&self) -> i32 {
        self.max_content_light_level
    }
    /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn max_frame_average_light_level(&self) -> i32 {
        self.max_frame_average_light_level
    }
    /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
    pub fn max_luminance(&self) -> i32 {
        self.max_luminance
    }
    /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
    pub fn min_luminance(&self) -> i32 {
        self.min_luminance
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn red_primary_x(&self) -> i32 {
        self.red_primary_x
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn red_primary_y(&self) -> i32 {
        self.red_primary_y
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn white_point_x(&self) -> i32 {
        self.white_point_x
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn white_point_y(&self) -> i32 {
        self.white_point_y
    }
}
impl Hdr10Metadata {
    /// Creates a new builder-style object to manufacture [`Hdr10Metadata`](crate::types::Hdr10Metadata).
    pub fn builder() -> crate::types::builders::Hdr10MetadataBuilder {
        crate::types::builders::Hdr10MetadataBuilder::default()
    }
}

/// A builder for [`Hdr10Metadata`](crate::types::Hdr10Metadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Hdr10MetadataBuilder {
    pub(crate) blue_primary_x: std::option::Option<i32>,
    pub(crate) blue_primary_y: std::option::Option<i32>,
    pub(crate) green_primary_x: std::option::Option<i32>,
    pub(crate) green_primary_y: std::option::Option<i32>,
    pub(crate) max_content_light_level: std::option::Option<i32>,
    pub(crate) max_frame_average_light_level: std::option::Option<i32>,
    pub(crate) max_luminance: std::option::Option<i32>,
    pub(crate) min_luminance: std::option::Option<i32>,
    pub(crate) red_primary_x: std::option::Option<i32>,
    pub(crate) red_primary_y: std::option::Option<i32>,
    pub(crate) white_point_x: std::option::Option<i32>,
    pub(crate) white_point_y: std::option::Option<i32>,
}
impl Hdr10MetadataBuilder {
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn blue_primary_x(mut self, input: i32) -> Self {
        self.blue_primary_x = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_blue_primary_x(mut self, input: std::option::Option<i32>) -> Self {
        self.blue_primary_x = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn blue_primary_y(mut self, input: i32) -> Self {
        self.blue_primary_y = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_blue_primary_y(mut self, input: std::option::Option<i32>) -> Self {
        self.blue_primary_y = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn green_primary_x(mut self, input: i32) -> Self {
        self.green_primary_x = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_green_primary_x(mut self, input: std::option::Option<i32>) -> Self {
        self.green_primary_x = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn green_primary_y(mut self, input: i32) -> Self {
        self.green_primary_y = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_green_primary_y(mut self, input: std::option::Option<i32>) -> Self {
        self.green_primary_y = input;
        self
    }
    /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn max_content_light_level(mut self, input: i32) -> Self {
        self.max_content_light_level = Some(input);
        self
    }
    /// Maximum light level among all samples in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn set_max_content_light_level(mut self, input: std::option::Option<i32>) -> Self {
        self.max_content_light_level = input;
        self
    }
    /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn max_frame_average_light_level(mut self, input: i32) -> Self {
        self.max_frame_average_light_level = Some(input);
        self
    }
    /// Maximum average light level of any frame in the coded video sequence, in units of candelas per square meter. This setting doesn't have a default value; you must specify a value that is suitable for the content.
    pub fn set_max_frame_average_light_level(mut self, input: std::option::Option<i32>) -> Self {
        self.max_frame_average_light_level = input;
        self
    }
    /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
    pub fn max_luminance(mut self, input: i32) -> Self {
        self.max_luminance = Some(input);
        self
    }
    /// Nominal maximum mastering display luminance in units of of 0.0001 candelas per square meter.
    pub fn set_max_luminance(mut self, input: std::option::Option<i32>) -> Self {
        self.max_luminance = input;
        self
    }
    /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
    pub fn min_luminance(mut self, input: i32) -> Self {
        self.min_luminance = Some(input);
        self
    }
    /// Nominal minimum mastering display luminance in units of of 0.0001 candelas per square meter
    pub fn set_min_luminance(mut self, input: std::option::Option<i32>) -> Self {
        self.min_luminance = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn red_primary_x(mut self, input: i32) -> Self {
        self.red_primary_x = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_red_primary_x(mut self, input: std::option::Option<i32>) -> Self {
        self.red_primary_x = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn red_primary_y(mut self, input: i32) -> Self {
        self.red_primary_y = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_red_primary_y(mut self, input: std::option::Option<i32>) -> Self {
        self.red_primary_y = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn white_point_x(mut self, input: i32) -> Self {
        self.white_point_x = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_white_point_x(mut self, input: std::option::Option<i32>) -> Self {
        self.white_point_x = input;
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn white_point_y(mut self, input: i32) -> Self {
        self.white_point_y = Some(input);
        self
    }
    /// HDR Master Display Information must be provided by a color grader, using color grading tools. Range is 0 to 50,000, each increment represents 0.00002 in CIE1931 color coordinate. Note that this setting is not for color correction.
    pub fn set_white_point_y(mut self, input: std::option::Option<i32>) -> Self {
        self.white_point_y = input;
        self
    }
    /// Consumes the builder and constructs a [`Hdr10Metadata`](crate::types::Hdr10Metadata).
    pub fn build(self) -> crate::types::Hdr10Metadata {
        crate::types::Hdr10Metadata {
            blue_primary_x: self.blue_primary_x.unwrap_or_default(),
            blue_primary_y: self.blue_primary_y.unwrap_or_default(),
            green_primary_x: self.green_primary_x.unwrap_or_default(),
            green_primary_y: self.green_primary_y.unwrap_or_default(),
            max_content_light_level: self.max_content_light_level.unwrap_or_default(),
            max_frame_average_light_level: self.max_frame_average_light_level.unwrap_or_default(),
            max_luminance: self.max_luminance.unwrap_or_default(),
            min_luminance: self.min_luminance.unwrap_or_default(),
            red_primary_x: self.red_primary_x.unwrap_or_default(),
            red_primary_y: self.red_primary_y.unwrap_or_default(),
            white_point_x: self.white_point_x.unwrap_or_default(),
            white_point_y: self.white_point_y.unwrap_or_default(),
        }
    }
}
