// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InputTimecodeSource`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let inputtimecodesource = unimplemented!();
/// match inputtimecodesource {
///     InputTimecodeSource::Embedded => { /* ... */ },
///     InputTimecodeSource::Specifiedstart => { /* ... */ },
///     InputTimecodeSource::Zerobased => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `inputtimecodesource` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InputTimecodeSource::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InputTimecodeSource::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InputTimecodeSource::NewFeature` is defined.
/// Specifically, when `inputtimecodesource` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InputTimecodeSource::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Use this Timecode source setting, located under the input settings (InputTimecodeSource), to specify how the service counts input video frames. This input frame count affects only the behavior of features that apply to a single input at a time, such as input clipping and synchronizing some captions formats. Choose Embedded (EMBEDDED) to use the timecodes in your input video. Choose Start at zero (ZEROBASED) to start the first frame at zero. Choose Specified start (SPECIFIEDSTART) to start the first frame at the timecode that you specify in the setting Start timecode (timecodeStart). If you don't specify a value for Timecode source, the service will use Embedded by default. For more information about timecodes, see https://docs.aws.amazon.com/console/mediaconvert/timecode.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InputTimecodeSource {
    #[allow(missing_docs)] // documentation missing in model
    Embedded,
    #[allow(missing_docs)] // documentation missing in model
    Specifiedstart,
    #[allow(missing_docs)] // documentation missing in model
    Zerobased,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for InputTimecodeSource {
    fn from(s: &str) -> Self {
        match s {
            "EMBEDDED" => InputTimecodeSource::Embedded,
            "SPECIFIEDSTART" => InputTimecodeSource::Specifiedstart,
            "ZEROBASED" => InputTimecodeSource::Zerobased,
            other => InputTimecodeSource::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for InputTimecodeSource {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InputTimecodeSource::from(s))
    }
}
impl InputTimecodeSource {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InputTimecodeSource::Embedded => "EMBEDDED",
            InputTimecodeSource::Specifiedstart => "SPECIFIEDSTART",
            InputTimecodeSource::Zerobased => "ZEROBASED",
            InputTimecodeSource::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["EMBEDDED", "SPECIFIEDSTART", "ZEROBASED"]
    }
}
impl AsRef<str> for InputTimecodeSource {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
