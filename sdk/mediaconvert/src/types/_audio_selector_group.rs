// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use audio selector groups to combine multiple sidecar audio inputs so that you can assign them to a single output audio tab (AudioDescription). Note that, if you're working with embedded audio, it's simpler to assign multiple input tracks into a single audio selector rather than use an audio selector group.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioSelectorGroup {
    /// Name of an Audio Selector within the same input to include in the group. Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
    #[doc(hidden)]
    pub audio_selector_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AudioSelectorGroup {
    /// Name of an Audio Selector within the same input to include in the group. Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
    pub fn audio_selector_names(&self) -> std::option::Option<&[std::string::String]> {
        self.audio_selector_names.as_deref()
    }
}
impl AudioSelectorGroup {
    /// Creates a new builder-style object to manufacture [`AudioSelectorGroup`](crate::types::AudioSelectorGroup).
    pub fn builder() -> crate::types::builders::AudioSelectorGroupBuilder {
        crate::types::builders::AudioSelectorGroupBuilder::default()
    }
}

/// A builder for [`AudioSelectorGroup`](crate::types::AudioSelectorGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioSelectorGroupBuilder {
    pub(crate) audio_selector_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AudioSelectorGroupBuilder {
    /// Appends an item to `audio_selector_names`.
    ///
    /// To override the contents of this collection use [`set_audio_selector_names`](Self::set_audio_selector_names).
    ///
    /// Name of an Audio Selector within the same input to include in the group. Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
    pub fn audio_selector_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.audio_selector_names.unwrap_or_default();
        v.push(input.into());
        self.audio_selector_names = Some(v);
        self
    }
    /// Name of an Audio Selector within the same input to include in the group. Audio selector names are standardized, based on their order within the input (e.g., "Audio Selector 1"). The audio selector name parameter can be repeated to add any number of audio selectors to the group.
    pub fn set_audio_selector_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.audio_selector_names = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioSelectorGroup`](crate::types::AudioSelectorGroup).
    pub fn build(self) -> crate::types::AudioSelectorGroup {
        crate::types::AudioSelectorGroup {
            audio_selector_names: self.audio_selector_names,
        }
    }
}
