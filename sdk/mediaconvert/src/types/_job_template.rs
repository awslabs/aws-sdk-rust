// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// A job template is a pre-made set of encoding instructions that you can use to quickly create a job.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobTemplate {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    #[doc(hidden)]
    pub acceleration_settings: std::option::Option<crate::types::AccelerationSettings>,
    /// An identifier for this resource that is unique within all of AWS.
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// An optional category you create to organize your job templates.
    #[doc(hidden)]
    pub category: std::option::Option<std::string::String>,
    /// The timestamp in epoch seconds for Job template creation.
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// An optional description you create for each job template.
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// Optional list of hop destinations.
    #[doc(hidden)]
    pub hop_destinations: std::option::Option<std::vec::Vec<crate::types::HopDestination>>,
    /// The timestamp in epoch seconds when the Job template was last updated.
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
    /// A name you create for each job template. Each name must be unique within your account.
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// Relative priority on the job.
    #[doc(hidden)]
    pub priority: i32,
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    #[doc(hidden)]
    pub queue: std::option::Option<std::string::String>,
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    #[doc(hidden)]
    pub settings: std::option::Option<crate::types::JobTemplateSettings>,
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    #[doc(hidden)]
    pub status_update_interval: std::option::Option<crate::types::StatusUpdateInterval>,
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
}
impl JobTemplate {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    pub fn acceleration_settings(
        &self,
    ) -> std::option::Option<&crate::types::AccelerationSettings> {
        self.acceleration_settings.as_ref()
    }
    /// An identifier for this resource that is unique within all of AWS.
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// An optional category you create to organize your job templates.
    pub fn category(&self) -> std::option::Option<&str> {
        self.category.as_deref()
    }
    /// The timestamp in epoch seconds for Job template creation.
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// An optional description you create for each job template.
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// Optional list of hop destinations.
    pub fn hop_destinations(&self) -> std::option::Option<&[crate::types::HopDestination]> {
        self.hop_destinations.as_deref()
    }
    /// The timestamp in epoch seconds when the Job template was last updated.
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// A name you create for each job template. Each name must be unique within your account.
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// Relative priority on the job.
    pub fn priority(&self) -> i32 {
        self.priority
    }
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    pub fn queue(&self) -> std::option::Option<&str> {
        self.queue.as_deref()
    }
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    pub fn settings(&self) -> std::option::Option<&crate::types::JobTemplateSettings> {
        self.settings.as_ref()
    }
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    pub fn status_update_interval(
        &self,
    ) -> std::option::Option<&crate::types::StatusUpdateInterval> {
        self.status_update_interval.as_ref()
    }
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
}
impl JobTemplate {
    /// Creates a new builder-style object to manufacture [`JobTemplate`](crate::types::JobTemplate).
    pub fn builder() -> crate::types::builders::JobTemplateBuilder {
        crate::types::builders::JobTemplateBuilder::default()
    }
}

/// A builder for [`JobTemplate`](crate::types::JobTemplate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobTemplateBuilder {
    pub(crate) acceleration_settings: std::option::Option<crate::types::AccelerationSettings>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) category: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) hop_destinations: std::option::Option<std::vec::Vec<crate::types::HopDestination>>,
    pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) queue: std::option::Option<std::string::String>,
    pub(crate) settings: std::option::Option<crate::types::JobTemplateSettings>,
    pub(crate) status_update_interval: std::option::Option<crate::types::StatusUpdateInterval>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
}
impl JobTemplateBuilder {
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    pub fn acceleration_settings(mut self, input: crate::types::AccelerationSettings) -> Self {
        self.acceleration_settings = Some(input);
        self
    }
    /// Accelerated transcoding can significantly speed up jobs with long, visually complex content.
    pub fn set_acceleration_settings(
        mut self,
        input: std::option::Option<crate::types::AccelerationSettings>,
    ) -> Self {
        self.acceleration_settings = input;
        self
    }
    /// An identifier for this resource that is unique within all of AWS.
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// An identifier for this resource that is unique within all of AWS.
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// An optional category you create to organize your job templates.
    pub fn category(mut self, input: impl Into<std::string::String>) -> Self {
        self.category = Some(input.into());
        self
    }
    /// An optional category you create to organize your job templates.
    pub fn set_category(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.category = input;
        self
    }
    /// The timestamp in epoch seconds for Job template creation.
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// The timestamp in epoch seconds for Job template creation.
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// An optional description you create for each job template.
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// An optional description you create for each job template.
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `hop_destinations`.
    ///
    /// To override the contents of this collection use [`set_hop_destinations`](Self::set_hop_destinations).
    ///
    /// Optional list of hop destinations.
    pub fn hop_destinations(mut self, input: crate::types::HopDestination) -> Self {
        let mut v = self.hop_destinations.unwrap_or_default();
        v.push(input);
        self.hop_destinations = Some(v);
        self
    }
    /// Optional list of hop destinations.
    pub fn set_hop_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::HopDestination>>,
    ) -> Self {
        self.hop_destinations = input;
        self
    }
    /// The timestamp in epoch seconds when the Job template was last updated.
    pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated = Some(input);
        self
    }
    /// The timestamp in epoch seconds when the Job template was last updated.
    pub fn set_last_updated(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated = input;
        self
    }
    /// A name you create for each job template. Each name must be unique within your account.
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// A name you create for each job template. Each name must be unique within your account.
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Relative priority on the job.
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// Relative priority on the job.
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    pub fn queue(mut self, input: impl Into<std::string::String>) -> Self {
        self.queue = Some(input.into());
        self
    }
    /// Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.
    pub fn set_queue(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.queue = input;
        self
    }
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    pub fn settings(mut self, input: crate::types::JobTemplateSettings) -> Self {
        self.settings = Some(input);
        self
    }
    /// JobTemplateSettings contains all the transcode settings saved in the template that will be applied to jobs created from it.
    pub fn set_settings(
        mut self,
        input: std::option::Option<crate::types::JobTemplateSettings>,
    ) -> Self {
        self.settings = input;
        self
    }
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    pub fn status_update_interval(mut self, input: crate::types::StatusUpdateInterval) -> Self {
        self.status_update_interval = Some(input);
        self
    }
    /// Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.
    pub fn set_status_update_interval(
        mut self,
        input: std::option::Option<crate::types::StatusUpdateInterval>,
    ) -> Self {
        self.status_update_interval = input;
        self
    }
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// A job template can be of two types: system or custom. System or built-in job templates can't be modified or deleted by the user.
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`JobTemplate`](crate::types::JobTemplate).
    pub fn build(self) -> crate::types::JobTemplate {
        crate::types::JobTemplate {
            acceleration_settings: self.acceleration_settings,
            arn: self.arn,
            category: self.category,
            created_at: self.created_at,
            description: self.description,
            hop_destinations: self.hop_destinations,
            last_updated: self.last_updated,
            name: self.name,
            priority: self.priority.unwrap_or_default(),
            queue: self.queue,
            settings: self.settings,
            status_update_interval: self.status_update_interval,
            r#type: self.r#type,
        }
    }
}
