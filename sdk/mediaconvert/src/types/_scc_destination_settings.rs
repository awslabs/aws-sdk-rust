// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to SCC captions. SCC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/scc-srt-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to SCC.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SccDestinationSettings {
    /// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
    #[doc(hidden)]
    pub framerate: std::option::Option<crate::types::SccDestinationFramerate>,
}
impl SccDestinationSettings {
    /// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
    pub fn framerate(&self) -> std::option::Option<&crate::types::SccDestinationFramerate> {
        self.framerate.as_ref()
    }
}
impl SccDestinationSettings {
    /// Creates a new builder-style object to manufacture [`SccDestinationSettings`](crate::types::SccDestinationSettings).
    pub fn builder() -> crate::types::builders::SccDestinationSettingsBuilder {
        crate::types::builders::SccDestinationSettingsBuilder::default()
    }
}

/// A builder for [`SccDestinationSettings`](crate::types::SccDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SccDestinationSettingsBuilder {
    pub(crate) framerate: std::option::Option<crate::types::SccDestinationFramerate>,
}
impl SccDestinationSettingsBuilder {
    /// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
    pub fn framerate(mut self, input: crate::types::SccDestinationFramerate) -> Self {
        self.framerate = Some(input);
        self
    }
    /// Set Framerate (SccDestinationFramerate) to make sure that the captions and the video are synchronized in the output. Specify a frame rate that matches the frame rate of the associated video. If the video frame rate is 29.97, choose 29.97 dropframe (FRAMERATE_29_97_DROPFRAME) only if the video has video_insertion=true and drop_frame_timecode=true; otherwise, choose 29.97 non-dropframe (FRAMERATE_29_97_NON_DROPFRAME).
    pub fn set_framerate(
        mut self,
        input: std::option::Option<crate::types::SccDestinationFramerate>,
    ) -> Self {
        self.framerate = input;
        self
    }
    /// Consumes the builder and constructs a [`SccDestinationSettings`](crate::types::SccDestinationSettings).
    pub fn build(self) -> crate::types::SccDestinationSettings {
        crate::types::SccDestinationSettings {
            framerate: self.framerate,
        }
    }
}
