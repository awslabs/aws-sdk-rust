// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value XAVC.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct XavcSettings {
    /// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization (adaptiveQuantization) to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off (OFF). Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    #[doc(hidden)]
    pub adaptive_quantization: std::option::Option<crate::types::XavcAdaptiveQuantization>,
    /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
    #[doc(hidden)]
    pub entropy_encoding: std::option::Option<crate::types::XavcEntropyEncoding>,
    /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate that you specify in the settings FramerateNumerator and FramerateDenominator.
    #[doc(hidden)]
    pub framerate_control: std::option::Option<crate::types::XavcFramerateControl>,
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    #[doc(hidden)]
    pub framerate_conversion_algorithm:
        std::option::Option<crate::types::XavcFramerateConversionAlgorithm>,
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Frame rate. In this example, specify 23.976.
    #[doc(hidden)]
    pub framerate_denominator: i32,
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    #[doc(hidden)]
    pub framerate_numerator: i32,
    /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
    #[doc(hidden)]
    pub profile: std::option::Option<crate::types::XavcProfile>,
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    #[doc(hidden)]
    pub slow_pal: std::option::Option<crate::types::XavcSlowPal>,
    /// Ignore this setting unless your downstream workflow requires that you specify it explicitly. Otherwise, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    #[doc(hidden)]
    pub softness: i32,
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    #[doc(hidden)]
    pub spatial_adaptive_quantization:
        std::option::Option<crate::types::XavcSpatialAdaptiveQuantization>,
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    #[doc(hidden)]
    pub temporal_adaptive_quantization:
        std::option::Option<crate::types::XavcTemporalAdaptiveQuantization>,
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_CBG.
    #[doc(hidden)]
    pub xavc4k_intra_cbg_profile_settings:
        std::option::Option<crate::types::Xavc4kIntraCbgProfileSettings>,
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_VBR.
    #[doc(hidden)]
    pub xavc4k_intra_vbr_profile_settings:
        std::option::Option<crate::types::Xavc4kIntraVbrProfileSettings>,
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K.
    #[doc(hidden)]
    pub xavc4k_profile_settings: std::option::Option<crate::types::Xavc4kProfileSettings>,
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD_INTRA_CBG.
    #[doc(hidden)]
    pub xavc_hd_intra_cbg_profile_settings:
        std::option::Option<crate::types::XavcHdIntraCbgProfileSettings>,
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD.
    #[doc(hidden)]
    pub xavc_hd_profile_settings: std::option::Option<crate::types::XavcHdProfileSettings>,
}
impl XavcSettings {
    /// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization (adaptiveQuantization) to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off (OFF). Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    pub fn adaptive_quantization(
        &self,
    ) -> std::option::Option<&crate::types::XavcAdaptiveQuantization> {
        self.adaptive_quantization.as_ref()
    }
    /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
    pub fn entropy_encoding(&self) -> std::option::Option<&crate::types::XavcEntropyEncoding> {
        self.entropy_encoding.as_ref()
    }
    /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate that you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn framerate_control(&self) -> std::option::Option<&crate::types::XavcFramerateControl> {
        self.framerate_control.as_ref()
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn framerate_conversion_algorithm(
        &self,
    ) -> std::option::Option<&crate::types::XavcFramerateConversionAlgorithm> {
        self.framerate_conversion_algorithm.as_ref()
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Frame rate. In this example, specify 23.976.
    pub fn framerate_denominator(&self) -> i32 {
        self.framerate_denominator
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_numerator(&self) -> i32 {
        self.framerate_numerator
    }
    /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
    pub fn profile(&self) -> std::option::Option<&crate::types::XavcProfile> {
        self.profile.as_ref()
    }
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    pub fn slow_pal(&self) -> std::option::Option<&crate::types::XavcSlowPal> {
        self.slow_pal.as_ref()
    }
    /// Ignore this setting unless your downstream workflow requires that you specify it explicitly. Otherwise, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    pub fn softness(&self) -> i32 {
        self.softness
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    pub fn spatial_adaptive_quantization(
        &self,
    ) -> std::option::Option<&crate::types::XavcSpatialAdaptiveQuantization> {
        self.spatial_adaptive_quantization.as_ref()
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    pub fn temporal_adaptive_quantization(
        &self,
    ) -> std::option::Option<&crate::types::XavcTemporalAdaptiveQuantization> {
        self.temporal_adaptive_quantization.as_ref()
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_CBG.
    pub fn xavc4k_intra_cbg_profile_settings(
        &self,
    ) -> std::option::Option<&crate::types::Xavc4kIntraCbgProfileSettings> {
        self.xavc4k_intra_cbg_profile_settings.as_ref()
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_VBR.
    pub fn xavc4k_intra_vbr_profile_settings(
        &self,
    ) -> std::option::Option<&crate::types::Xavc4kIntraVbrProfileSettings> {
        self.xavc4k_intra_vbr_profile_settings.as_ref()
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K.
    pub fn xavc4k_profile_settings(
        &self,
    ) -> std::option::Option<&crate::types::Xavc4kProfileSettings> {
        self.xavc4k_profile_settings.as_ref()
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD_INTRA_CBG.
    pub fn xavc_hd_intra_cbg_profile_settings(
        &self,
    ) -> std::option::Option<&crate::types::XavcHdIntraCbgProfileSettings> {
        self.xavc_hd_intra_cbg_profile_settings.as_ref()
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD.
    pub fn xavc_hd_profile_settings(
        &self,
    ) -> std::option::Option<&crate::types::XavcHdProfileSettings> {
        self.xavc_hd_profile_settings.as_ref()
    }
}
impl XavcSettings {
    /// Creates a new builder-style object to manufacture [`XavcSettings`](crate::types::XavcSettings).
    pub fn builder() -> crate::types::builders::XavcSettingsBuilder {
        crate::types::builders::XavcSettingsBuilder::default()
    }
}

/// A builder for [`XavcSettings`](crate::types::XavcSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct XavcSettingsBuilder {
    pub(crate) adaptive_quantization: std::option::Option<crate::types::XavcAdaptiveQuantization>,
    pub(crate) entropy_encoding: std::option::Option<crate::types::XavcEntropyEncoding>,
    pub(crate) framerate_control: std::option::Option<crate::types::XavcFramerateControl>,
    pub(crate) framerate_conversion_algorithm:
        std::option::Option<crate::types::XavcFramerateConversionAlgorithm>,
    pub(crate) framerate_denominator: std::option::Option<i32>,
    pub(crate) framerate_numerator: std::option::Option<i32>,
    pub(crate) profile: std::option::Option<crate::types::XavcProfile>,
    pub(crate) slow_pal: std::option::Option<crate::types::XavcSlowPal>,
    pub(crate) softness: std::option::Option<i32>,
    pub(crate) spatial_adaptive_quantization:
        std::option::Option<crate::types::XavcSpatialAdaptiveQuantization>,
    pub(crate) temporal_adaptive_quantization:
        std::option::Option<crate::types::XavcTemporalAdaptiveQuantization>,
    pub(crate) xavc4k_intra_cbg_profile_settings:
        std::option::Option<crate::types::Xavc4kIntraCbgProfileSettings>,
    pub(crate) xavc4k_intra_vbr_profile_settings:
        std::option::Option<crate::types::Xavc4kIntraVbrProfileSettings>,
    pub(crate) xavc4k_profile_settings: std::option::Option<crate::types::Xavc4kProfileSettings>,
    pub(crate) xavc_hd_intra_cbg_profile_settings:
        std::option::Option<crate::types::XavcHdIntraCbgProfileSettings>,
    pub(crate) xavc_hd_profile_settings: std::option::Option<crate::types::XavcHdProfileSettings>,
}
impl XavcSettingsBuilder {
    /// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization (adaptiveQuantization) to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off (OFF). Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    pub fn adaptive_quantization(mut self, input: crate::types::XavcAdaptiveQuantization) -> Self {
        self.adaptive_quantization = Some(input);
        self
    }
    /// Keep the default value, Auto (AUTO), for this setting to have MediaConvert automatically apply the best types of quantization for your video content. When you want to apply your quantization settings manually, you must set Adaptive quantization (adaptiveQuantization) to a value other than Auto (AUTO). Use this setting to specify the strength of any adaptive quantization filters that you enable. If you don't want MediaConvert to do any adaptive quantization in this transcode, set Adaptive quantization to Off (OFF). Related settings: The value that you choose here applies to the following settings: Flicker adaptive quantization (flickerAdaptiveQuantization), Spatial adaptive quantization (spatialAdaptiveQuantization), and Temporal adaptive quantization (temporalAdaptiveQuantization).
    pub fn set_adaptive_quantization(
        mut self,
        input: std::option::Option<crate::types::XavcAdaptiveQuantization>,
    ) -> Self {
        self.adaptive_quantization = input;
        self
    }
    /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
    pub fn entropy_encoding(mut self, input: crate::types::XavcEntropyEncoding) -> Self {
        self.entropy_encoding = Some(input);
        self
    }
    /// Optional. Choose a specific entropy encoding mode only when you want to override XAVC recommendations. If you choose the value auto, MediaConvert uses the mode that the XAVC file format specifies given this output's operating point.
    pub fn set_entropy_encoding(
        mut self,
        input: std::option::Option<crate::types::XavcEntropyEncoding>,
    ) -> Self {
        self.entropy_encoding = input;
        self
    }
    /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate that you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn framerate_control(mut self, input: crate::types::XavcFramerateControl) -> Self {
        self.framerate_control = Some(input);
        self
    }
    /// If you are using the console, use the Frame rate setting to specify the frame rate for this output. If you want to keep the same frame rate as the input video, choose Follow source. If you want to do frame rate conversion, choose a frame rate from the dropdown list. The framerates shown in the dropdown list are decimal approximations of fractions. If you are creating your transcoding job specification as a JSON file without the console, use FramerateControl to specify which value the service uses for the frame rate for this output. Choose INITIALIZE_FROM_SOURCE if you want the service to use the frame rate from the input. Choose SPECIFIED if you want the service to use the frame rate that you specify in the settings FramerateNumerator and FramerateDenominator.
    pub fn set_framerate_control(
        mut self,
        input: std::option::Option<crate::types::XavcFramerateControl>,
    ) -> Self {
        self.framerate_control = input;
        self
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn framerate_conversion_algorithm(
        mut self,
        input: crate::types::XavcFramerateConversionAlgorithm,
    ) -> Self {
        self.framerate_conversion_algorithm = Some(input);
        self
    }
    /// Choose the method that you want MediaConvert to use when increasing or decreasing the frame rate. We recommend using drop duplicate (DUPLICATE_DROP) for numerically simple conversions, such as 60 fps to 30 fps. For numerically complex conversions, you can use interpolate (INTERPOLATE) to avoid stutter. This results in a smooth picture, but might introduce undesirable video artifacts. For complex frame rate conversions, especially if your source video has already been converted from its original cadence, use FrameFormer (FRAMEFORMER) to do motion-compensated interpolation. FrameFormer chooses the best conversion method frame by frame. Note that using FrameFormer increases the transcoding time and incurs a significant add-on cost.
    pub fn set_framerate_conversion_algorithm(
        mut self,
        input: std::option::Option<crate::types::XavcFramerateConversionAlgorithm>,
    ) -> Self {
        self.framerate_conversion_algorithm = input;
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Frame rate. In this example, specify 23.976.
    pub fn framerate_denominator(mut self, input: i32) -> Self {
        self.framerate_denominator = Some(input);
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateDenominator to specify the denominator of this fraction. In this example, use 1001 for the value of FramerateDenominator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Frame rate. In this example, specify 23.976.
    pub fn set_framerate_denominator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_denominator = input;
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn framerate_numerator(mut self, input: i32) -> Self {
        self.framerate_numerator = Some(input);
        self
    }
    /// When you use the API for transcode jobs that use frame rate conversion, specify the frame rate as a fraction. For example, 24000 / 1001 = 23.976 fps. Use FramerateNumerator to specify the numerator of this fraction. In this example, use 24000 for the value of FramerateNumerator. When you use the console for transcode jobs that use frame rate conversion, provide the value as a decimal number for Framerate. In this example, specify 23.976.
    pub fn set_framerate_numerator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_numerator = input;
        self
    }
    /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
    pub fn profile(mut self, input: crate::types::XavcProfile) -> Self {
        self.profile = Some(input);
        self
    }
    /// Specify the XAVC profile for this output. For more information, see the Sony documentation at https://www.xavc-info.org/. Note that MediaConvert doesn't support the interlaced video XAVC operating points for XAVC_HD_INTRA_CBG. To create an interlaced XAVC output, choose the profile XAVC_HD.
    pub fn set_profile(mut self, input: std::option::Option<crate::types::XavcProfile>) -> Self {
        self.profile = input;
        self
    }
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    pub fn slow_pal(mut self, input: crate::types::XavcSlowPal) -> Self {
        self.slow_pal = Some(input);
        self
    }
    /// Ignore this setting unless your input frame rate is 23.976 or 24 frames per second (fps). Enable slow PAL to create a 25 fps output by relabeling the video frames and resampling your audio. Note that enabling this setting will slightly reduce the duration of your video. Related settings: You must also set Frame rate to 25. In your JSON job specification, set (framerateControl) to (SPECIFIED), (framerateNumerator) to 25 and (framerateDenominator) to 1.
    pub fn set_slow_pal(mut self, input: std::option::Option<crate::types::XavcSlowPal>) -> Self {
        self.slow_pal = input;
        self
    }
    /// Ignore this setting unless your downstream workflow requires that you specify it explicitly. Otherwise, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    pub fn softness(mut self, input: i32) -> Self {
        self.softness = Some(input);
        self
    }
    /// Ignore this setting unless your downstream workflow requires that you specify it explicitly. Otherwise, we recommend that you adjust the softness of your output by using a lower value for the setting Sharpness (sharpness) or by enabling a noise reducer filter (noiseReducerFilter). The Softness (softness) setting specifies the quantization matrices that the encoder uses. Keep the default value, 0, for flat quantization. Choose the value 1 or 16 to use the default JVT softening quantization matricies from the H.264 specification. Choose a value from 17 to 128 to use planar interpolation. Increasing values from 17 to 128 result in increasing reduction of high-frequency data. The value 128 results in the softest video.
    pub fn set_softness(mut self, input: std::option::Option<i32>) -> Self {
        self.softness = input;
        self
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    pub fn spatial_adaptive_quantization(
        mut self,
        input: crate::types::XavcSpatialAdaptiveQuantization,
    ) -> Self {
        self.spatial_adaptive_quantization = Some(input);
        self
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on spatial variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas that can sustain more distortion with no noticeable visual degradation and uses more bits on areas where any small distortion will be noticeable. For example, complex textured blocks are encoded with fewer bits and smooth textured blocks are encoded with more bits. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen with a lot of complex texture, you might choose to disable this feature. Related setting: When you enable spatial adaptive quantization, set the value for Adaptive quantization (adaptiveQuantization) depending on your content. For homogeneous content, such as cartoons and video games, set it to Low. For content with a wider variety of textures, set it to High or Higher.
    pub fn set_spatial_adaptive_quantization(
        mut self,
        input: std::option::Option<crate::types::XavcSpatialAdaptiveQuantization>,
    ) -> Self {
        self.spatial_adaptive_quantization = input;
        self
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    pub fn temporal_adaptive_quantization(
        mut self,
        input: crate::types::XavcTemporalAdaptiveQuantization,
    ) -> Self {
        self.temporal_adaptive_quantization = Some(input);
        self
    }
    /// The best way to set up adaptive quantization is to keep the default value, Auto (AUTO), for the setting Adaptive quantization (adaptiveQuantization). When you do so, MediaConvert automatically applies the best types of quantization for your video content. Include this setting in your JSON job specification only when you choose to change the default value for Adaptive quantization. For this setting, keep the default value, Enabled (ENABLED), to adjust quantization within each frame based on temporal variation of content complexity. When you enable this feature, the encoder uses fewer bits on areas of the frame that aren't moving and uses more bits on complex objects with sharp edges that move a lot. For example, this feature improves the readability of text tickers on newscasts and scoreboards on sports matches. Enabling this feature will almost always improve your video quality. Note, though, that this feature doesn't take into account where the viewer's attention is likely to be. If viewers are likely to be focusing their attention on a part of the screen that doesn't have moving objects with sharp edges, such as sports athletes' faces, you might choose to disable this feature. Related setting: When you enable temporal adaptive quantization, adjust the strength of the filter with the setting Adaptive quantization (adaptiveQuantization).
    pub fn set_temporal_adaptive_quantization(
        mut self,
        input: std::option::Option<crate::types::XavcTemporalAdaptiveQuantization>,
    ) -> Self {
        self.temporal_adaptive_quantization = input;
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_CBG.
    pub fn xavc4k_intra_cbg_profile_settings(
        mut self,
        input: crate::types::Xavc4kIntraCbgProfileSettings,
    ) -> Self {
        self.xavc4k_intra_cbg_profile_settings = Some(input);
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_CBG.
    pub fn set_xavc4k_intra_cbg_profile_settings(
        mut self,
        input: std::option::Option<crate::types::Xavc4kIntraCbgProfileSettings>,
    ) -> Self {
        self.xavc4k_intra_cbg_profile_settings = input;
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_VBR.
    pub fn xavc4k_intra_vbr_profile_settings(
        mut self,
        input: crate::types::Xavc4kIntraVbrProfileSettings,
    ) -> Self {
        self.xavc4k_intra_vbr_profile_settings = Some(input);
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K_INTRA_VBR.
    pub fn set_xavc4k_intra_vbr_profile_settings(
        mut self,
        input: std::option::Option<crate::types::Xavc4kIntraVbrProfileSettings>,
    ) -> Self {
        self.xavc4k_intra_vbr_profile_settings = input;
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K.
    pub fn xavc4k_profile_settings(mut self, input: crate::types::Xavc4kProfileSettings) -> Self {
        self.xavc4k_profile_settings = Some(input);
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_4K.
    pub fn set_xavc4k_profile_settings(
        mut self,
        input: std::option::Option<crate::types::Xavc4kProfileSettings>,
    ) -> Self {
        self.xavc4k_profile_settings = input;
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD_INTRA_CBG.
    pub fn xavc_hd_intra_cbg_profile_settings(
        mut self,
        input: crate::types::XavcHdIntraCbgProfileSettings,
    ) -> Self {
        self.xavc_hd_intra_cbg_profile_settings = Some(input);
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD_INTRA_CBG.
    pub fn set_xavc_hd_intra_cbg_profile_settings(
        mut self,
        input: std::option::Option<crate::types::XavcHdIntraCbgProfileSettings>,
    ) -> Self {
        self.xavc_hd_intra_cbg_profile_settings = input;
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD.
    pub fn xavc_hd_profile_settings(mut self, input: crate::types::XavcHdProfileSettings) -> Self {
        self.xavc_hd_profile_settings = Some(input);
        self
    }
    /// Required when you set (Profile) under (VideoDescription)&gt;(CodecSettings)&gt;(XavcSettings) to the value XAVC_HD.
    pub fn set_xavc_hd_profile_settings(
        mut self,
        input: std::option::Option<crate::types::XavcHdProfileSettings>,
    ) -> Self {
        self.xavc_hd_profile_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`XavcSettings`](crate::types::XavcSettings).
    pub fn build(self) -> crate::types::XavcSettings {
        crate::types::XavcSettings {
            adaptive_quantization: self.adaptive_quantization,
            entropy_encoding: self.entropy_encoding,
            framerate_control: self.framerate_control,
            framerate_conversion_algorithm: self.framerate_conversion_algorithm,
            framerate_denominator: self.framerate_denominator.unwrap_or_default(),
            framerate_numerator: self.framerate_numerator.unwrap_or_default(),
            profile: self.profile,
            slow_pal: self.slow_pal,
            softness: self.softness.unwrap_or_default(),
            spatial_adaptive_quantization: self.spatial_adaptive_quantization,
            temporal_adaptive_quantization: self.temporal_adaptive_quantization,
            xavc4k_intra_cbg_profile_settings: self.xavc4k_intra_cbg_profile_settings,
            xavc4k_intra_vbr_profile_settings: self.xavc4k_intra_vbr_profile_settings,
            xavc4k_profile_settings: self.xavc4k_profile_settings,
            xavc_hd_intra_cbg_profile_settings: self.xavc_hd_intra_cbg_profile_settings,
            xavc_hd_profile_settings: self.xavc_hd_profile_settings,
        }
    }
}
