// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `CaptionSourceType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let captionsourcetype = unimplemented!();
/// match captionsourcetype {
///     CaptionSourceType::Ancillary => { /* ... */ },
///     CaptionSourceType::DvbSub => { /* ... */ },
///     CaptionSourceType::Embedded => { /* ... */ },
///     CaptionSourceType::Imsc => { /* ... */ },
///     CaptionSourceType::NullSource => { /* ... */ },
///     CaptionSourceType::Scc => { /* ... */ },
///     CaptionSourceType::Scte20 => { /* ... */ },
///     CaptionSourceType::Smi => { /* ... */ },
///     CaptionSourceType::SmpteTt => { /* ... */ },
///     CaptionSourceType::Srt => { /* ... */ },
///     CaptionSourceType::Stl => { /* ... */ },
///     CaptionSourceType::Teletext => { /* ... */ },
///     CaptionSourceType::Ttml => { /* ... */ },
///     CaptionSourceType::Webvtt => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `captionsourcetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `CaptionSourceType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `CaptionSourceType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `CaptionSourceType::NewFeature` is defined.
/// Specifically, when `captionsourcetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `CaptionSourceType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Use Source (SourceType) to identify the format of your input captions.  The service cannot auto-detect caption format.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum CaptionSourceType {
    #[allow(missing_docs)] // documentation missing in model
    Ancillary,
    #[allow(missing_docs)] // documentation missing in model
    DvbSub,
    #[allow(missing_docs)] // documentation missing in model
    Embedded,
    #[allow(missing_docs)] // documentation missing in model
    Imsc,
    #[allow(missing_docs)] // documentation missing in model
    NullSource,
    #[allow(missing_docs)] // documentation missing in model
    Scc,
    #[allow(missing_docs)] // documentation missing in model
    Scte20,
    #[allow(missing_docs)] // documentation missing in model
    Smi,
    #[allow(missing_docs)] // documentation missing in model
    SmpteTt,
    #[allow(missing_docs)] // documentation missing in model
    Srt,
    #[allow(missing_docs)] // documentation missing in model
    Stl,
    #[allow(missing_docs)] // documentation missing in model
    Teletext,
    #[allow(missing_docs)] // documentation missing in model
    Ttml,
    #[allow(missing_docs)] // documentation missing in model
    Webvtt,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for CaptionSourceType {
    fn from(s: &str) -> Self {
        match s {
            "ANCILLARY" => CaptionSourceType::Ancillary,
            "DVB_SUB" => CaptionSourceType::DvbSub,
            "EMBEDDED" => CaptionSourceType::Embedded,
            "IMSC" => CaptionSourceType::Imsc,
            "NULL_SOURCE" => CaptionSourceType::NullSource,
            "SCC" => CaptionSourceType::Scc,
            "SCTE20" => CaptionSourceType::Scte20,
            "SMI" => CaptionSourceType::Smi,
            "SMPTE_TT" => CaptionSourceType::SmpteTt,
            "SRT" => CaptionSourceType::Srt,
            "STL" => CaptionSourceType::Stl,
            "TELETEXT" => CaptionSourceType::Teletext,
            "TTML" => CaptionSourceType::Ttml,
            "WEBVTT" => CaptionSourceType::Webvtt,
            other => {
                CaptionSourceType::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for CaptionSourceType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(CaptionSourceType::from(s))
    }
}
impl CaptionSourceType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            CaptionSourceType::Ancillary => "ANCILLARY",
            CaptionSourceType::DvbSub => "DVB_SUB",
            CaptionSourceType::Embedded => "EMBEDDED",
            CaptionSourceType::Imsc => "IMSC",
            CaptionSourceType::NullSource => "NULL_SOURCE",
            CaptionSourceType::Scc => "SCC",
            CaptionSourceType::Scte20 => "SCTE20",
            CaptionSourceType::Smi => "SMI",
            CaptionSourceType::SmpteTt => "SMPTE_TT",
            CaptionSourceType::Srt => "SRT",
            CaptionSourceType::Stl => "STL",
            CaptionSourceType::Teletext => "TELETEXT",
            CaptionSourceType::Ttml => "TTML",
            CaptionSourceType::Webvtt => "WEBVTT",
            CaptionSourceType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANCILLARY",
            "DVB_SUB",
            "EMBEDDED",
            "IMSC",
            "NULL_SOURCE",
            "SCC",
            "SCTE20",
            "SMI",
            "SMPTE_TT",
            "SRT",
            "STL",
            "TELETEXT",
            "TTML",
            "WEBVTT",
        ]
    }
}
impl AsRef<str> for CaptionSourceType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
