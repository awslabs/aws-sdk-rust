// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use Rectangle to identify a specific area of the video frame.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Rectangle {
    /// Height of rectangle in pixels. Specify only even numbers.
    #[doc(hidden)]
    pub height: i32,
    /// Width of rectangle in pixels. Specify only even numbers.
    #[doc(hidden)]
    pub width: i32,
    /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
    #[doc(hidden)]
    pub x: i32,
    /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
    #[doc(hidden)]
    pub y: i32,
}
impl Rectangle {
    /// Height of rectangle in pixels. Specify only even numbers.
    pub fn height(&self) -> i32 {
        self.height
    }
    /// Width of rectangle in pixels. Specify only even numbers.
    pub fn width(&self) -> i32 {
        self.width
    }
    /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
    pub fn x(&self) -> i32 {
        self.x
    }
    /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
    pub fn y(&self) -> i32 {
        self.y
    }
}
impl Rectangle {
    /// Creates a new builder-style object to manufacture [`Rectangle`](crate::types::Rectangle).
    pub fn builder() -> crate::types::builders::RectangleBuilder {
        crate::types::builders::RectangleBuilder::default()
    }
}

/// A builder for [`Rectangle`](crate::types::Rectangle).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RectangleBuilder {
    pub(crate) height: std::option::Option<i32>,
    pub(crate) width: std::option::Option<i32>,
    pub(crate) x: std::option::Option<i32>,
    pub(crate) y: std::option::Option<i32>,
}
impl RectangleBuilder {
    /// Height of rectangle in pixels. Specify only even numbers.
    pub fn height(mut self, input: i32) -> Self {
        self.height = Some(input);
        self
    }
    /// Height of rectangle in pixels. Specify only even numbers.
    pub fn set_height(mut self, input: std::option::Option<i32>) -> Self {
        self.height = input;
        self
    }
    /// Width of rectangle in pixels. Specify only even numbers.
    pub fn width(mut self, input: i32) -> Self {
        self.width = Some(input);
        self
    }
    /// Width of rectangle in pixels. Specify only even numbers.
    pub fn set_width(mut self, input: std::option::Option<i32>) -> Self {
        self.width = input;
        self
    }
    /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
    pub fn x(mut self, input: i32) -> Self {
        self.x = Some(input);
        self
    }
    /// The distance, in pixels, between the rectangle and the left edge of the video frame. Specify only even numbers.
    pub fn set_x(mut self, input: std::option::Option<i32>) -> Self {
        self.x = input;
        self
    }
    /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
    pub fn y(mut self, input: i32) -> Self {
        self.y = Some(input);
        self
    }
    /// The distance, in pixels, between the rectangle and the top edge of the video frame. Specify only even numbers.
    pub fn set_y(mut self, input: std::option::Option<i32>) -> Self {
        self.y = input;
        self
    }
    /// Consumes the builder and constructs a [`Rectangle`](crate::types::Rectangle).
    pub fn build(self) -> crate::types::Rectangle {
        crate::types::Rectangle {
            height: self.height.unwrap_or_default(),
            width: self.width.unwrap_or_default(),
            x: self.x.unwrap_or_default(),
            y: self.y.unwrap_or_default(),
        }
    }
}
