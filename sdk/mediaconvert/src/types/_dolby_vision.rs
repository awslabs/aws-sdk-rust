// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Create Dolby Vision Profile 5 or Profile 8.1 compatible video output.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DolbyVision {
    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    #[doc(hidden)]
    pub l6_metadata: std::option::Option<crate::types::DolbyVisionLevel6Metadata>,
    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    #[doc(hidden)]
    pub l6_mode: std::option::Option<crate::types::DolbyVisionLevel6Mode>,
    /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
    #[doc(hidden)]
    pub mapping: std::option::Option<crate::types::DolbyVisionMapping>,
    /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
    #[doc(hidden)]
    pub profile: std::option::Option<crate::types::DolbyVisionProfile>,
}
impl DolbyVision {
    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    pub fn l6_metadata(&self) -> std::option::Option<&crate::types::DolbyVisionLevel6Metadata> {
        self.l6_metadata.as_ref()
    }
    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    pub fn l6_mode(&self) -> std::option::Option<&crate::types::DolbyVisionLevel6Mode> {
        self.l6_mode.as_ref()
    }
    /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
    pub fn mapping(&self) -> std::option::Option<&crate::types::DolbyVisionMapping> {
        self.mapping.as_ref()
    }
    /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
    pub fn profile(&self) -> std::option::Option<&crate::types::DolbyVisionProfile> {
        self.profile.as_ref()
    }
}
impl DolbyVision {
    /// Creates a new builder-style object to manufacture [`DolbyVision`](crate::types::DolbyVision).
    pub fn builder() -> crate::types::builders::DolbyVisionBuilder {
        crate::types::builders::DolbyVisionBuilder::default()
    }
}

/// A builder for [`DolbyVision`](crate::types::DolbyVision).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DolbyVisionBuilder {
    pub(crate) l6_metadata: std::option::Option<crate::types::DolbyVisionLevel6Metadata>,
    pub(crate) l6_mode: std::option::Option<crate::types::DolbyVisionLevel6Mode>,
    pub(crate) mapping: std::option::Option<crate::types::DolbyVisionMapping>,
    pub(crate) profile: std::option::Option<crate::types::DolbyVisionProfile>,
}
impl DolbyVisionBuilder {
    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    pub fn l6_metadata(mut self, input: crate::types::DolbyVisionLevel6Metadata) -> Self {
        self.l6_metadata = Some(input);
        self
    }
    /// Use these settings when you set DolbyVisionLevel6Mode to SPECIFY to override the MaxCLL and MaxFALL values in your input with new values.
    pub fn set_l6_metadata(
        mut self,
        input: std::option::Option<crate::types::DolbyVisionLevel6Metadata>,
    ) -> Self {
        self.l6_metadata = input;
        self
    }
    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    pub fn l6_mode(mut self, input: crate::types::DolbyVisionLevel6Mode) -> Self {
        self.l6_mode = Some(input);
        self
    }
    /// Use Dolby Vision Mode to choose how the service will handle Dolby Vision MaxCLL and MaxFALL properies.
    pub fn set_l6_mode(
        mut self,
        input: std::option::Option<crate::types::DolbyVisionLevel6Mode>,
    ) -> Self {
        self.l6_mode = input;
        self
    }
    /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
    pub fn mapping(mut self, input: crate::types::DolbyVisionMapping) -> Self {
        self.mapping = Some(input);
        self
    }
    /// Required when you set Dolby Vision Profile to Profile 8.1. When you set Content mapping to None, content mapping is not applied to the HDR10-compatible signal. Depending on the source peak nit level, clipping might occur on HDR devices without Dolby Vision. When you set Content mapping to HDR10 1000, the transcoder creates a 1,000 nits peak HDR10-compatible signal by applying static content mapping to the source. This mode is speed-optimized for PQ10 sources with metadata that is created from analysis. For graded Dolby Vision content, be aware that creative intent might not be guaranteed with extreme 1,000 nits trims.
    pub fn set_mapping(
        mut self,
        input: std::option::Option<crate::types::DolbyVisionMapping>,
    ) -> Self {
        self.mapping = input;
        self
    }
    /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
    pub fn profile(mut self, input: crate::types::DolbyVisionProfile) -> Self {
        self.profile = Some(input);
        self
    }
    /// Required when you enable Dolby Vision. Use Profile 5 to include frame-interleaved Dolby Vision metadata in your output. Your input must include Dolby Vision metadata or an HDR10 YUV color space. Use Profile 8.1 to include frame-interleaved Dolby Vision metadata and HDR10 metadata in your output. Your input must include Dolby Vision metadata.
    pub fn set_profile(
        mut self,
        input: std::option::Option<crate::types::DolbyVisionProfile>,
    ) -> Self {
        self.profile = input;
        self
    }
    /// Consumes the builder and constructs a [`DolbyVision`](crate::types::DolbyVision).
    pub fn build(self) -> crate::types::DolbyVision {
        crate::types::DolbyVision {
            l6_metadata: self.l6_metadata,
            l6_mode: self.l6_mode,
            mapping: self.mapping,
            profile: self.profile,
        }
    }
}
