// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AudioLanguageCodeControl`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let audiolanguagecodecontrol = unimplemented!();
/// match audiolanguagecodecontrol {
///     AudioLanguageCodeControl::FollowInput => { /* ... */ },
///     AudioLanguageCodeControl::UseConfigured => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `audiolanguagecodecontrol` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AudioLanguageCodeControl::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AudioLanguageCodeControl::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AudioLanguageCodeControl::NewFeature` is defined.
/// Specifically, when `audiolanguagecodecontrol` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AudioLanguageCodeControl::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify which source for language code takes precedence for this audio track. When you choose Follow input (FOLLOW_INPUT), the service uses the language code from the input track if it's present. If there's no languge code on the input track, the service uses the code that you specify in the setting Language code (languageCode or customLanguageCode). When you choose Use configured (USE_CONFIGURED), the service uses the language code that you specify.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AudioLanguageCodeControl {
    #[allow(missing_docs)] // documentation missing in model
    FollowInput,
    #[allow(missing_docs)] // documentation missing in model
    UseConfigured,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AudioLanguageCodeControl {
    fn from(s: &str) -> Self {
        match s {
            "FOLLOW_INPUT" => AudioLanguageCodeControl::FollowInput,
            "USE_CONFIGURED" => AudioLanguageCodeControl::UseConfigured,
            other => AudioLanguageCodeControl::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AudioLanguageCodeControl {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AudioLanguageCodeControl::from(s))
    }
}
impl AudioLanguageCodeControl {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AudioLanguageCodeControl::FollowInput => "FOLLOW_INPUT",
            AudioLanguageCodeControl::UseConfigured => "USE_CONFIGURED",
            AudioLanguageCodeControl::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FOLLOW_INPUT", "USE_CONFIGURED"]
    }
}
impl AsRef<str> for AudioLanguageCodeControl {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
