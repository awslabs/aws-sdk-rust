// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ColorSpace`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let colorspace = unimplemented!();
/// match colorspace {
///     ColorSpace::Follow => { /* ... */ },
///     ColorSpace::Hdr10 => { /* ... */ },
///     ColorSpace::Hlg2020 => { /* ... */ },
///     ColorSpace::P3D65Sdr => { /* ... */ },
///     ColorSpace::P3Dci => { /* ... */ },
///     ColorSpace::Rec601 => { /* ... */ },
///     ColorSpace::Rec709 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `colorspace` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ColorSpace::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ColorSpace::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ColorSpace::NewFeature` is defined.
/// Specifically, when `colorspace` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ColorSpace::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// If your input video has accurate color space metadata, or if you don't know about color space, leave this set to the default value Follow. The service will automatically detect your input color space. If your input video has metadata indicating the wrong color space, specify the accurate color space here. If your input video is HDR 10 and the SMPTE ST 2086 Mastering Display Color Volume static metadata isn't present in your video stream, or if that metadata is present but not accurate, choose Force HDR 10 here and specify correct values in the input HDR 10 metadata settings. For more information about MediaConvert HDR jobs, see https://docs.aws.amazon.com/console/mediaconvert/hdr. Select P3D65 (SDR) to set the input color space metadata to the following:
/// * Color primaries: Display P3
/// * Transfer characteristics: SMPTE 428M
/// * Matrix coefficients: BT.709
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ColorSpace {
    #[allow(missing_docs)] // documentation missing in model
    Follow,
    #[allow(missing_docs)] // documentation missing in model
    Hdr10,
    #[allow(missing_docs)] // documentation missing in model
    Hlg2020,
    #[allow(missing_docs)] // documentation missing in model
    P3D65Sdr,
    #[allow(missing_docs)] // documentation missing in model
    P3Dci,
    #[allow(missing_docs)] // documentation missing in model
    Rec601,
    #[allow(missing_docs)] // documentation missing in model
    Rec709,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ColorSpace {
    fn from(s: &str) -> Self {
        match s {
            "FOLLOW" => ColorSpace::Follow,
            "HDR10" => ColorSpace::Hdr10,
            "HLG_2020" => ColorSpace::Hlg2020,
            "P3D65_SDR" => ColorSpace::P3D65Sdr,
            "P3DCI" => ColorSpace::P3Dci,
            "REC_601" => ColorSpace::Rec601,
            "REC_709" => ColorSpace::Rec709,
            other => ColorSpace::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ColorSpace {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ColorSpace::from(s))
    }
}
impl ColorSpace {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ColorSpace::Follow => "FOLLOW",
            ColorSpace::Hdr10 => "HDR10",
            ColorSpace::Hlg2020 => "HLG_2020",
            ColorSpace::P3D65Sdr => "P3D65_SDR",
            ColorSpace::P3Dci => "P3DCI",
            ColorSpace::Rec601 => "REC_601",
            ColorSpace::Rec709 => "REC_709",
            ColorSpace::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "FOLLOW",
            "HDR10",
            "HLG_2020",
            "P3D65_SDR",
            "P3DCI",
            "REC_601",
            "REC_709",
        ]
    }
}
impl AsRef<str> for ColorSpace {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
