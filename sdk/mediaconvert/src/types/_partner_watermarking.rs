// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// If you work with a third party video watermarking partner, use the group of settings that correspond with your watermarking partner to include watermarks in your output.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PartnerWatermarking {
    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    #[doc(hidden)]
    pub nexguard_file_marker_settings:
        std::option::Option<crate::types::NexGuardFileMarkerSettings>,
}
impl PartnerWatermarking {
    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    pub fn nexguard_file_marker_settings(
        &self,
    ) -> std::option::Option<&crate::types::NexGuardFileMarkerSettings> {
        self.nexguard_file_marker_settings.as_ref()
    }
}
impl PartnerWatermarking {
    /// Creates a new builder-style object to manufacture [`PartnerWatermarking`](crate::types::PartnerWatermarking).
    pub fn builder() -> crate::types::builders::PartnerWatermarkingBuilder {
        crate::types::builders::PartnerWatermarkingBuilder::default()
    }
}

/// A builder for [`PartnerWatermarking`](crate::types::PartnerWatermarking).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PartnerWatermarkingBuilder {
    pub(crate) nexguard_file_marker_settings:
        std::option::Option<crate::types::NexGuardFileMarkerSettings>,
}
impl PartnerWatermarkingBuilder {
    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    pub fn nexguard_file_marker_settings(
        mut self,
        input: crate::types::NexGuardFileMarkerSettings,
    ) -> Self {
        self.nexguard_file_marker_settings = Some(input);
        self
    }
    /// For forensic video watermarking, MediaConvert supports Nagra NexGuard File Marker watermarking. MediaConvert supports both PreRelease Content (NGPR/G2) and OTT Streaming workflows.
    pub fn set_nexguard_file_marker_settings(
        mut self,
        input: std::option::Option<crate::types::NexGuardFileMarkerSettings>,
    ) -> Self {
        self.nexguard_file_marker_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`PartnerWatermarking`](crate::types::PartnerWatermarking).
    pub fn build(self) -> crate::types::PartnerWatermarking {
        crate::types::PartnerWatermarking {
            nexguard_file_marker_settings: self.nexguard_file_marker_settings,
        }
    }
}
