// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to IMSC captions. IMSC is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/ttml-and-webvtt-output-captions.html.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImscDestinationSettings {
    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub accessibility: ::std::option::Option<crate::types::ImscAccessibilitySubs>,
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    pub style_passthrough: ::std::option::Option<crate::types::ImscStylePassthrough>,
}
impl ImscDestinationSettings {
    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn accessibility(&self) -> ::std::option::Option<&crate::types::ImscAccessibilitySubs> {
        self.accessibility.as_ref()
    }
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    pub fn style_passthrough(&self) -> ::std::option::Option<&crate::types::ImscStylePassthrough> {
        self.style_passthrough.as_ref()
    }
}
impl ImscDestinationSettings {
    /// Creates a new builder-style object to manufacture [`ImscDestinationSettings`](crate::types::ImscDestinationSettings).
    pub fn builder() -> crate::types::builders::ImscDestinationSettingsBuilder {
        crate::types::builders::ImscDestinationSettingsBuilder::default()
    }
}

/// A builder for [`ImscDestinationSettings`](crate::types::ImscDestinationSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ImscDestinationSettingsBuilder {
    pub(crate) accessibility: ::std::option::Option<crate::types::ImscAccessibilitySubs>,
    pub(crate) style_passthrough: ::std::option::Option<crate::types::ImscStylePassthrough>,
}
impl ImscDestinationSettingsBuilder {
    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn accessibility(mut self, input: crate::types::ImscAccessibilitySubs) -> Self {
        self.accessibility = ::std::option::Option::Some(input);
        self
    }
    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn set_accessibility(mut self, input: ::std::option::Option<crate::types::ImscAccessibilitySubs>) -> Self {
        self.accessibility = input;
        self
    }
    /// If the IMSC captions track is intended to provide accessibility for people who are deaf or hard of hearing: Set Accessibility subtitles to Enabled. When you do, MediaConvert adds accessibility attributes to your output HLS or DASH manifest. For HLS manifests, MediaConvert adds the following accessibility attributes under EXT-X-MEDIA for this track: CHARACTERISTICS="public.accessibility.transcribes-spoken-dialog,public.accessibility.describes-music-and-sound" and AUTOSELECT="YES". For DASH manifests, MediaConvert adds the following in the adaptation set for this track: <accessibility schemeiduri="urn:mpeg:dash:role:2011" value="caption" />. If the captions track is not intended to provide such accessibility: Keep the default value, Disabled. When you do, for DASH manifests, MediaConvert instead adds the following in the adaptation set for this track: <role schemeiduri="urn:mpeg:dash:role:2011" value="subtitle" />.
    pub fn get_accessibility(&self) -> &::std::option::Option<crate::types::ImscAccessibilitySubs> {
        &self.accessibility
    }
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    pub fn style_passthrough(mut self, input: crate::types::ImscStylePassthrough) -> Self {
        self.style_passthrough = ::std::option::Option::Some(input);
        self
    }
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    pub fn set_style_passthrough(mut self, input: ::std::option::Option<crate::types::ImscStylePassthrough>) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Keep this setting enabled to have MediaConvert use the font style and position information from the captions source in the output. This option is available only when your input captions are IMSC, SMPTE-TT, or TTML. Disable this setting for simplified output captions.
    pub fn get_style_passthrough(&self) -> &::std::option::Option<crate::types::ImscStylePassthrough> {
        &self.style_passthrough
    }
    /// Consumes the builder and constructs a [`ImscDestinationSettings`](crate::types::ImscDestinationSettings).
    pub fn build(self) -> crate::types::ImscDestinationSettings {
        crate::types::ImscDestinationSettings {
            accessibility: self.accessibility,
            style_passthrough: self.style_passthrough,
        }
    }
}
