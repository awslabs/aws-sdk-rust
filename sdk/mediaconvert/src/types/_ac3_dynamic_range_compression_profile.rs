// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Ac3DynamicRangeCompressionProfile`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let ac3dynamicrangecompressionprofile = unimplemented!();
/// match ac3dynamicrangecompressionprofile {
///     Ac3DynamicRangeCompressionProfile::FilmStandard => { /* ... */ },
///     Ac3DynamicRangeCompressionProfile::None => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `ac3dynamicrangecompressionprofile` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Ac3DynamicRangeCompressionProfile::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Ac3DynamicRangeCompressionProfile::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Ac3DynamicRangeCompressionProfile::NewFeature` is defined.
/// Specifically, when `ac3dynamicrangecompressionprofile` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Ac3DynamicRangeCompressionProfile::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// When you want to add Dolby dynamic range compression (DRC) signaling to your output stream, we recommend that you use the mode-specific settings instead of Dynamic range compression profile. The mode-specific settings are Dynamic range compression profile, line mode and Dynamic range compression profile, RF mode. Note that when you specify values for all three settings, MediaConvert ignores the value of this setting in favor of the mode-specific settings. If you do use this setting instead of the mode-specific settings, choose None to leave out DRC signaling. Keep the default Film standard to set the profile to Dolby's film standard profile for all operating modes.
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Ac3DynamicRangeCompressionProfile {
    #[allow(missing_docs)] // documentation missing in model
    FilmStandard,
    #[allow(missing_docs)] // documentation missing in model
    None,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Ac3DynamicRangeCompressionProfile {
    fn from(s: &str) -> Self {
        match s {
            "FILM_STANDARD" => Ac3DynamicRangeCompressionProfile::FilmStandard,
            "NONE" => Ac3DynamicRangeCompressionProfile::None,
            other => Ac3DynamicRangeCompressionProfile::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Ac3DynamicRangeCompressionProfile {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Ac3DynamicRangeCompressionProfile::from(s))
    }
}
impl Ac3DynamicRangeCompressionProfile {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Ac3DynamicRangeCompressionProfile::FilmStandard => "FILM_STANDARD",
            Ac3DynamicRangeCompressionProfile::None => "NONE",
            Ac3DynamicRangeCompressionProfile::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FILM_STANDARD", "NONE"]
    }
}
impl ::std::convert::AsRef<str> for Ac3DynamicRangeCompressionProfile {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Ac3DynamicRangeCompressionProfile {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Ac3DynamicRangeCompressionProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Ac3DynamicRangeCompressionProfile::FilmStandard => write!(f, "FILM_STANDARD"),
            Ac3DynamicRangeCompressionProfile::None => write!(f, "NONE"),
            Ac3DynamicRangeCompressionProfile::Unknown(value) => write!(f, "{value}"),
        }
    }
}
