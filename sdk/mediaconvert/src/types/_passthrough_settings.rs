// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Optional settings when you set Codec to the value Passthrough.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PassthroughSettings {
    /// AUTO will select the highest bitrate input in the video selector source. REMUX_ALL will passthrough all the selected streams in the video selector source. When selecting streams from multiple renditions (i.e. using Stream video selector type): REMUX_ALL will only remux all streams selected, and AUTO will use the highest bitrate video stream among the selected streams as source.
    pub video_selector_mode: ::std::option::Option<crate::types::VideoSelectorMode>,
}
impl PassthroughSettings {
    /// AUTO will select the highest bitrate input in the video selector source. REMUX_ALL will passthrough all the selected streams in the video selector source. When selecting streams from multiple renditions (i.e. using Stream video selector type): REMUX_ALL will only remux all streams selected, and AUTO will use the highest bitrate video stream among the selected streams as source.
    pub fn video_selector_mode(&self) -> ::std::option::Option<&crate::types::VideoSelectorMode> {
        self.video_selector_mode.as_ref()
    }
}
impl PassthroughSettings {
    /// Creates a new builder-style object to manufacture [`PassthroughSettings`](crate::types::PassthroughSettings).
    pub fn builder() -> crate::types::builders::PassthroughSettingsBuilder {
        crate::types::builders::PassthroughSettingsBuilder::default()
    }
}

/// A builder for [`PassthroughSettings`](crate::types::PassthroughSettings).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PassthroughSettingsBuilder {
    pub(crate) video_selector_mode: ::std::option::Option<crate::types::VideoSelectorMode>,
}
impl PassthroughSettingsBuilder {
    /// AUTO will select the highest bitrate input in the video selector source. REMUX_ALL will passthrough all the selected streams in the video selector source. When selecting streams from multiple renditions (i.e. using Stream video selector type): REMUX_ALL will only remux all streams selected, and AUTO will use the highest bitrate video stream among the selected streams as source.
    pub fn video_selector_mode(mut self, input: crate::types::VideoSelectorMode) -> Self {
        self.video_selector_mode = ::std::option::Option::Some(input);
        self
    }
    /// AUTO will select the highest bitrate input in the video selector source. REMUX_ALL will passthrough all the selected streams in the video selector source. When selecting streams from multiple renditions (i.e. using Stream video selector type): REMUX_ALL will only remux all streams selected, and AUTO will use the highest bitrate video stream among the selected streams as source.
    pub fn set_video_selector_mode(mut self, input: ::std::option::Option<crate::types::VideoSelectorMode>) -> Self {
        self.video_selector_mode = input;
        self
    }
    /// AUTO will select the highest bitrate input in the video selector source. REMUX_ALL will passthrough all the selected streams in the video selector source. When selecting streams from multiple renditions (i.e. using Stream video selector type): REMUX_ALL will only remux all streams selected, and AUTO will use the highest bitrate video stream among the selected streams as source.
    pub fn get_video_selector_mode(&self) -> &::std::option::Option<crate::types::VideoSelectorMode> {
        &self.video_selector_mode
    }
    /// Consumes the builder and constructs a [`PassthroughSettings`](crate::types::PassthroughSettings).
    pub fn build(self) -> crate::types::PassthroughSettings {
        crate::types::PassthroughSettings {
            video_selector_mode: self.video_selector_mode,
        }
    }
}
