// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Settings related to SRT captions. SRT is a sidecar format that holds captions in a file that is separate from the video container. Set up sidecar captions in the same output group, but different output from your video. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to SRT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SrtDestinationSettings {
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
    #[doc(hidden)]
    pub style_passthrough: std::option::Option<crate::types::SrtStylePassthrough>,
}
impl SrtDestinationSettings {
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
    pub fn style_passthrough(&self) -> std::option::Option<&crate::types::SrtStylePassthrough> {
        self.style_passthrough.as_ref()
    }
}
impl SrtDestinationSettings {
    /// Creates a new builder-style object to manufacture [`SrtDestinationSettings`](crate::types::SrtDestinationSettings).
    pub fn builder() -> crate::types::builders::SrtDestinationSettingsBuilder {
        crate::types::builders::SrtDestinationSettingsBuilder::default()
    }
}

/// A builder for [`SrtDestinationSettings`](crate::types::SrtDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SrtDestinationSettingsBuilder {
    pub(crate) style_passthrough: std::option::Option<crate::types::SrtStylePassthrough>,
}
impl SrtDestinationSettingsBuilder {
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
    pub fn style_passthrough(mut self, input: crate::types::SrtStylePassthrough) -> Self {
        self.style_passthrough = Some(input);
        self
    }
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use simplified output captions.
    pub fn set_style_passthrough(
        mut self,
        input: std::option::Option<crate::types::SrtStylePassthrough>,
    ) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Consumes the builder and constructs a [`SrtDestinationSettings`](crate::types::SrtDestinationSettings).
    pub fn build(self) -> crate::types::SrtDestinationSettings {
        crate::types::SrtDestinationSettings {
            style_passthrough: self.style_passthrough,
        }
    }
}
