// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KantarWatermarkSettings {
    /// Provide an audio channel name from your Kantar audio license.
    #[doc(hidden)]
    pub channel_name: std::option::Option<std::string::String>,
    /// Specify a unique identifier for Kantar to use for this piece of content.
    #[doc(hidden)]
    pub content_reference: std::option::Option<std::string::String>,
    /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
    #[doc(hidden)]
    pub credentials_secret_name: std::option::Option<std::string::String>,
    /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
    #[doc(hidden)]
    pub file_offset: f64,
    /// Provide your Kantar license ID number. You should get this number from Kantar.
    #[doc(hidden)]
    pub kantar_license_id: i32,
    /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
    #[doc(hidden)]
    pub kantar_server_url: std::option::Option<std::string::String>,
    /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    #[doc(hidden)]
    pub log_destination: std::option::Option<std::string::String>,
    /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
    #[doc(hidden)]
    pub metadata3: std::option::Option<std::string::String>,
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    #[doc(hidden)]
    pub metadata4: std::option::Option<std::string::String>,
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    #[doc(hidden)]
    pub metadata5: std::option::Option<std::string::String>,
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    #[doc(hidden)]
    pub metadata6: std::option::Option<std::string::String>,
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    #[doc(hidden)]
    pub metadata7: std::option::Option<std::string::String>,
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    #[doc(hidden)]
    pub metadata8: std::option::Option<std::string::String>,
}
impl KantarWatermarkSettings {
    /// Provide an audio channel name from your Kantar audio license.
    pub fn channel_name(&self) -> std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// Specify a unique identifier for Kantar to use for this piece of content.
    pub fn content_reference(&self) -> std::option::Option<&str> {
        self.content_reference.as_deref()
    }
    /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
    pub fn credentials_secret_name(&self) -> std::option::Option<&str> {
        self.credentials_secret_name.as_deref()
    }
    /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
    pub fn file_offset(&self) -> f64 {
        self.file_offset
    }
    /// Provide your Kantar license ID number. You should get this number from Kantar.
    pub fn kantar_license_id(&self) -> i32 {
        self.kantar_license_id
    }
    /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
    pub fn kantar_server_url(&self) -> std::option::Option<&str> {
        self.kantar_server_url.as_deref()
    }
    /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    pub fn log_destination(&self) -> std::option::Option<&str> {
        self.log_destination.as_deref()
    }
    /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
    pub fn metadata3(&self) -> std::option::Option<&str> {
        self.metadata3.as_deref()
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata4(&self) -> std::option::Option<&str> {
        self.metadata4.as_deref()
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata5(&self) -> std::option::Option<&str> {
        self.metadata5.as_deref()
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata6(&self) -> std::option::Option<&str> {
        self.metadata6.as_deref()
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata7(&self) -> std::option::Option<&str> {
        self.metadata7.as_deref()
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata8(&self) -> std::option::Option<&str> {
        self.metadata8.as_deref()
    }
}
impl KantarWatermarkSettings {
    /// Creates a new builder-style object to manufacture [`KantarWatermarkSettings`](crate::types::KantarWatermarkSettings).
    pub fn builder() -> crate::types::builders::KantarWatermarkSettingsBuilder {
        crate::types::builders::KantarWatermarkSettingsBuilder::default()
    }
}

/// A builder for [`KantarWatermarkSettings`](crate::types::KantarWatermarkSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KantarWatermarkSettingsBuilder {
    pub(crate) channel_name: std::option::Option<std::string::String>,
    pub(crate) content_reference: std::option::Option<std::string::String>,
    pub(crate) credentials_secret_name: std::option::Option<std::string::String>,
    pub(crate) file_offset: std::option::Option<f64>,
    pub(crate) kantar_license_id: std::option::Option<i32>,
    pub(crate) kantar_server_url: std::option::Option<std::string::String>,
    pub(crate) log_destination: std::option::Option<std::string::String>,
    pub(crate) metadata3: std::option::Option<std::string::String>,
    pub(crate) metadata4: std::option::Option<std::string::String>,
    pub(crate) metadata5: std::option::Option<std::string::String>,
    pub(crate) metadata6: std::option::Option<std::string::String>,
    pub(crate) metadata7: std::option::Option<std::string::String>,
    pub(crate) metadata8: std::option::Option<std::string::String>,
}
impl KantarWatermarkSettingsBuilder {
    /// Provide an audio channel name from your Kantar audio license.
    pub fn channel_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_name = Some(input.into());
        self
    }
    /// Provide an audio channel name from your Kantar audio license.
    pub fn set_channel_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// Specify a unique identifier for Kantar to use for this piece of content.
    pub fn content_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_reference = Some(input.into());
        self
    }
    /// Specify a unique identifier for Kantar to use for this piece of content.
    pub fn set_content_reference(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.content_reference = input;
        self
    }
    /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
    pub fn credentials_secret_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.credentials_secret_name = Some(input.into());
        self
    }
    /// Provide the name of the AWS Secrets Manager secret where your Kantar credentials are stored. Note that your MediaConvert service role must provide access to this secret. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/granting-permissions-for-mediaconvert-to-access-secrets-manager-secret.html. For instructions on creating a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html, in the AWS Secrets Manager User Guide.
    pub fn set_credentials_secret_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.credentials_secret_name = input;
        self
    }
    /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
    pub fn file_offset(mut self, input: f64) -> Self {
        self.file_offset = Some(input);
        self
    }
    /// Optional. Specify an offset, in whole seconds, from the start of your output and the beginning of the watermarking. When you don't specify an offset, Kantar defaults to zero.
    pub fn set_file_offset(mut self, input: std::option::Option<f64>) -> Self {
        self.file_offset = input;
        self
    }
    /// Provide your Kantar license ID number. You should get this number from Kantar.
    pub fn kantar_license_id(mut self, input: i32) -> Self {
        self.kantar_license_id = Some(input);
        self
    }
    /// Provide your Kantar license ID number. You should get this number from Kantar.
    pub fn set_kantar_license_id(mut self, input: std::option::Option<i32>) -> Self {
        self.kantar_license_id = input;
        self
    }
    /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
    pub fn kantar_server_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.kantar_server_url = Some(input.into());
        self
    }
    /// Provide the HTTPS endpoint to the Kantar server. You should get this endpoint from Kantar.
    pub fn set_kantar_server_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.kantar_server_url = input;
        self
    }
    /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    pub fn log_destination(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_destination = Some(input.into());
        self
    }
    /// Optional. Specify the Amazon S3 bucket where you want MediaConvert to store your Kantar watermark XML logs. When you don't specify a bucket, MediaConvert doesn't save these logs. Note that your MediaConvert service role must provide access to this location. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html
    pub fn set_log_destination(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_destination = input;
        self
    }
    /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
    pub fn metadata3(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata3 = Some(input.into());
        self
    }
    /// You can optionally use this field to specify the first timestamp that Kantar embeds during watermarking. Kantar suggests that you be very cautious when using this Kantar feature, and that you use it only on channels that are managed specifically for use with this feature by your Audience Measurement Operator. For more information about this feature, contact Kantar technical support.
    pub fn set_metadata3(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata3 = input;
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata4(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata4 = Some(input.into());
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn set_metadata4(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata4 = input;
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata5(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata5 = Some(input.into());
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn set_metadata5(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata5 = input;
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata6(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata6 = Some(input.into());
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn set_metadata6(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata6 = input;
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata7(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata7 = Some(input.into());
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn set_metadata7(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata7 = input;
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn metadata8(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata8 = Some(input.into());
        self
    }
    /// Additional metadata that MediaConvert sends to Kantar. Maximum length is 50 characters.
    pub fn set_metadata8(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata8 = input;
        self
    }
    /// Consumes the builder and constructs a [`KantarWatermarkSettings`](crate::types::KantarWatermarkSettings).
    pub fn build(self) -> crate::types::KantarWatermarkSettings {
        crate::types::KantarWatermarkSettings {
            channel_name: self.channel_name,
            content_reference: self.content_reference,
            credentials_secret_name: self.credentials_secret_name,
            file_offset: self.file_offset.unwrap_or_default(),
            kantar_license_id: self.kantar_license_id.unwrap_or_default(),
            kantar_server_url: self.kantar_server_url,
            log_destination: self.log_destination,
            metadata3: self.metadata3,
            metadata4: self.metadata4,
            metadata5: self.metadata5,
            metadata6: self.metadata6,
            metadata7: self.metadata7,
            metadata8: self.metadata8,
        }
    }
}
