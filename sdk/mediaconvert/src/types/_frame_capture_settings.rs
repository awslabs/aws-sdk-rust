// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Required when you set (Codec) under (VideoDescription)&gt;(CodecSettings) to the value FRAME_CAPTURE.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FrameCaptureSettings {
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
    #[doc(hidden)]
    pub framerate_denominator: i32,
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
    #[doc(hidden)]
    pub framerate_numerator: i32,
    /// Maximum number of captures (encoded jpg output files).
    #[doc(hidden)]
    pub max_captures: i32,
    /// JPEG Quality - a higher value equals higher quality.
    #[doc(hidden)]
    pub quality: i32,
}
impl FrameCaptureSettings {
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
    pub fn framerate_denominator(&self) -> i32 {
        self.framerate_denominator
    }
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
    pub fn framerate_numerator(&self) -> i32 {
        self.framerate_numerator
    }
    /// Maximum number of captures (encoded jpg output files).
    pub fn max_captures(&self) -> i32 {
        self.max_captures
    }
    /// JPEG Quality - a higher value equals higher quality.
    pub fn quality(&self) -> i32 {
        self.quality
    }
}
impl FrameCaptureSettings {
    /// Creates a new builder-style object to manufacture [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
    pub fn builder() -> crate::types::builders::FrameCaptureSettingsBuilder {
        crate::types::builders::FrameCaptureSettingsBuilder::default()
    }
}

/// A builder for [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FrameCaptureSettingsBuilder {
    pub(crate) framerate_denominator: std::option::Option<i32>,
    pub(crate) framerate_numerator: std::option::Option<i32>,
    pub(crate) max_captures: std::option::Option<i32>,
    pub(crate) quality: std::option::Option<i32>,
}
impl FrameCaptureSettingsBuilder {
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
    pub fn framerate_denominator(mut self, input: i32) -> Self {
        self.framerate_denominator = Some(input);
        self
    }
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.n.jpg where n is the 0-based sequence number of each Capture.
    pub fn set_framerate_denominator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_denominator = input;
        self
    }
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
    pub fn framerate_numerator(mut self, input: i32) -> Self {
        self.framerate_numerator = Some(input);
        self
    }
    /// Frame capture will encode the first frame of the output stream, then one frame every framerateDenominator/framerateNumerator seconds. For example, settings of framerateNumerator = 1 and framerateDenominator = 3 (a rate of 1/3 frame per second) will capture the first frame, then 1 frame every 3s. Files will be named as filename.NNNNNNN.jpg where N is the 0-based frame sequence number zero padded to 7 decimal places.
    pub fn set_framerate_numerator(mut self, input: std::option::Option<i32>) -> Self {
        self.framerate_numerator = input;
        self
    }
    /// Maximum number of captures (encoded jpg output files).
    pub fn max_captures(mut self, input: i32) -> Self {
        self.max_captures = Some(input);
        self
    }
    /// Maximum number of captures (encoded jpg output files).
    pub fn set_max_captures(mut self, input: std::option::Option<i32>) -> Self {
        self.max_captures = input;
        self
    }
    /// JPEG Quality - a higher value equals higher quality.
    pub fn quality(mut self, input: i32) -> Self {
        self.quality = Some(input);
        self
    }
    /// JPEG Quality - a higher value equals higher quality.
    pub fn set_quality(mut self, input: std::option::Option<i32>) -> Self {
        self.quality = input;
        self
    }
    /// Consumes the builder and constructs a [`FrameCaptureSettings`](crate::types::FrameCaptureSettings).
    pub fn build(self) -> crate::types::FrameCaptureSettings {
        crate::types::FrameCaptureSettings {
            framerate_denominator: self.framerate_denominator.unwrap_or_default(),
            framerate_numerator: self.framerate_numerator.unwrap_or_default(),
            max_captures: self.max_captures.unwrap_or_default(),
            quality: self.quality.unwrap_or_default(),
        }
    }
}
