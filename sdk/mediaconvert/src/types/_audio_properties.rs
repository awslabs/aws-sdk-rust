// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Details about the media file's audio track.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudioProperties {
    /// The bit depth of the audio track.
    pub bit_depth: ::std::option::Option<i32>,
    /// The bit rate of the audio track, in bits per second.
    pub bit_rate: ::std::option::Option<i64>,
    /// The number of audio channels in the audio track.
    pub channels: ::std::option::Option<i32>,
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub frame_rate: ::std::option::Option<crate::types::FrameRate>,
    /// The language code of the audio track, in three character ISO 639-3 format.
    pub language_code: ::std::option::Option<::std::string::String>,
    /// The sample rate of the audio track.
    pub sample_rate: ::std::option::Option<i32>,
}
impl AudioProperties {
    /// The bit depth of the audio track.
    pub fn bit_depth(&self) -> ::std::option::Option<i32> {
        self.bit_depth
    }
    /// The bit rate of the audio track, in bits per second.
    pub fn bit_rate(&self) -> ::std::option::Option<i64> {
        self.bit_rate
    }
    /// The number of audio channels in the audio track.
    pub fn channels(&self) -> ::std::option::Option<i32> {
        self.channels
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn frame_rate(&self) -> ::std::option::Option<&crate::types::FrameRate> {
        self.frame_rate.as_ref()
    }
    /// The language code of the audio track, in three character ISO 639-3 format.
    pub fn language_code(&self) -> ::std::option::Option<&str> {
        self.language_code.as_deref()
    }
    /// The sample rate of the audio track.
    pub fn sample_rate(&self) -> ::std::option::Option<i32> {
        self.sample_rate
    }
}
impl AudioProperties {
    /// Creates a new builder-style object to manufacture [`AudioProperties`](crate::types::AudioProperties).
    pub fn builder() -> crate::types::builders::AudioPropertiesBuilder {
        crate::types::builders::AudioPropertiesBuilder::default()
    }
}

/// A builder for [`AudioProperties`](crate::types::AudioProperties).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudioPropertiesBuilder {
    pub(crate) bit_depth: ::std::option::Option<i32>,
    pub(crate) bit_rate: ::std::option::Option<i64>,
    pub(crate) channels: ::std::option::Option<i32>,
    pub(crate) frame_rate: ::std::option::Option<crate::types::FrameRate>,
    pub(crate) language_code: ::std::option::Option<::std::string::String>,
    pub(crate) sample_rate: ::std::option::Option<i32>,
}
impl AudioPropertiesBuilder {
    /// The bit depth of the audio track.
    pub fn bit_depth(mut self, input: i32) -> Self {
        self.bit_depth = ::std::option::Option::Some(input);
        self
    }
    /// The bit depth of the audio track.
    pub fn set_bit_depth(mut self, input: ::std::option::Option<i32>) -> Self {
        self.bit_depth = input;
        self
    }
    /// The bit depth of the audio track.
    pub fn get_bit_depth(&self) -> &::std::option::Option<i32> {
        &self.bit_depth
    }
    /// The bit rate of the audio track, in bits per second.
    pub fn bit_rate(mut self, input: i64) -> Self {
        self.bit_rate = ::std::option::Option::Some(input);
        self
    }
    /// The bit rate of the audio track, in bits per second.
    pub fn set_bit_rate(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bit_rate = input;
        self
    }
    /// The bit rate of the audio track, in bits per second.
    pub fn get_bit_rate(&self) -> &::std::option::Option<i64> {
        &self.bit_rate
    }
    /// The number of audio channels in the audio track.
    pub fn channels(mut self, input: i32) -> Self {
        self.channels = ::std::option::Option::Some(input);
        self
    }
    /// The number of audio channels in the audio track.
    pub fn set_channels(mut self, input: ::std::option::Option<i32>) -> Self {
        self.channels = input;
        self
    }
    /// The number of audio channels in the audio track.
    pub fn get_channels(&self) -> &::std::option::Option<i32> {
        &self.channels
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn frame_rate(mut self, input: crate::types::FrameRate) -> Self {
        self.frame_rate = ::std::option::Option::Some(input);
        self
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn set_frame_rate(mut self, input: ::std::option::Option<crate::types::FrameRate>) -> Self {
        self.frame_rate = input;
        self
    }
    /// The frame rate of the video or audio track, expressed as a fraction with numerator and denominator values.
    pub fn get_frame_rate(&self) -> &::std::option::Option<crate::types::FrameRate> {
        &self.frame_rate
    }
    /// The language code of the audio track, in three character ISO 639-3 format.
    pub fn language_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language_code = ::std::option::Option::Some(input.into());
        self
    }
    /// The language code of the audio track, in three character ISO 639-3 format.
    pub fn set_language_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language_code = input;
        self
    }
    /// The language code of the audio track, in three character ISO 639-3 format.
    pub fn get_language_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.language_code
    }
    /// The sample rate of the audio track.
    pub fn sample_rate(mut self, input: i32) -> Self {
        self.sample_rate = ::std::option::Option::Some(input);
        self
    }
    /// The sample rate of the audio track.
    pub fn set_sample_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sample_rate = input;
        self
    }
    /// The sample rate of the audio track.
    pub fn get_sample_rate(&self) -> &::std::option::Option<i32> {
        &self.sample_rate
    }
    /// Consumes the builder and constructs a [`AudioProperties`](crate::types::AudioProperties).
    pub fn build(self) -> crate::types::AudioProperties {
        crate::types::AudioProperties {
            bit_depth: self.bit_depth,
            bit_rate: self.bit_rate,
            channels: self.channels,
            frame_rate: self.frame_rate,
            language_code: self.language_code,
            sample_rate: self.sample_rate,
        }
    }
}
