// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Mp2AudioDescriptionMix`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let mp2audiodescriptionmix = unimplemented!();
/// match mp2audiodescriptionmix {
///     Mp2AudioDescriptionMix::BroadcasterMixedAd => { /* ... */ },
///     Mp2AudioDescriptionMix::None => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `mp2audiodescriptionmix` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Mp2AudioDescriptionMix::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Mp2AudioDescriptionMix::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Mp2AudioDescriptionMix::NewFeature` is defined.
/// Specifically, when `mp2audiodescriptionmix` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Mp2AudioDescriptionMix::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// Choose BROADCASTER_MIXED_AD when the input contains pre-mixed main audio + audio description (AD) as a stereo pair. The value for AudioType will be set to 3, which signals to downstream systems that this stream contains "broadcaster mixed AD". Note that the input received by the encoder must contain pre-mixed audio; the encoder does not perform the mixing. When you choose BROADCASTER_MIXED_AD, the encoder ignores any values you provide in AudioType and FollowInputAudioType. Choose NONE when the input does not contain pre-mixed audio + audio description (AD). In this case, the encoder will use any values you provide for AudioType and FollowInputAudioType.
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum Mp2AudioDescriptionMix {
    #[allow(missing_docs)] // documentation missing in model
    BroadcasterMixedAd,
    #[allow(missing_docs)] // documentation missing in model
    None,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for Mp2AudioDescriptionMix {
    fn from(s: &str) -> Self {
        match s {
            "BROADCASTER_MIXED_AD" => Mp2AudioDescriptionMix::BroadcasterMixedAd,
            "NONE" => Mp2AudioDescriptionMix::None,
            other => Mp2AudioDescriptionMix::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for Mp2AudioDescriptionMix {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(Mp2AudioDescriptionMix::from(s))
    }
}
impl Mp2AudioDescriptionMix {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Mp2AudioDescriptionMix::BroadcasterMixedAd => "BROADCASTER_MIXED_AD",
            Mp2AudioDescriptionMix::None => "NONE",
            Mp2AudioDescriptionMix::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["BROADCASTER_MIXED_AD", "NONE"]
    }
}
impl ::std::convert::AsRef<str> for Mp2AudioDescriptionMix {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl Mp2AudioDescriptionMix {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for Mp2AudioDescriptionMix {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Mp2AudioDescriptionMix::BroadcasterMixedAd => write!(f, "BROADCASTER_MIXED_AD"),
            Mp2AudioDescriptionMix::None => write!(f, "NONE"),
            Mp2AudioDescriptionMix::Unknown(value) => write!(f, "{value}"),
        }
    }
}
