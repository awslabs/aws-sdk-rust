// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ColorPrimaries`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let colorprimaries = unimplemented!();
/// match colorprimaries {
///     ColorPrimaries::Ebu3213E => { /* ... */ },
///     ColorPrimaries::GenericFilm => { /* ... */ },
///     ColorPrimaries::Ipt => { /* ... */ },
///     ColorPrimaries::Itu2020 => { /* ... */ },
///     ColorPrimaries::Itu470Bg => { /* ... */ },
///     ColorPrimaries::Itu470M => { /* ... */ },
///     ColorPrimaries::Itu709 => { /* ... */ },
///     ColorPrimaries::Last => { /* ... */ },
///     ColorPrimaries::Reserved => { /* ... */ },
///     ColorPrimaries::Smpte170M => { /* ... */ },
///     ColorPrimaries::Smpte2067Xyz => { /* ... */ },
///     ColorPrimaries::Smpte240M => { /* ... */ },
///     ColorPrimaries::Smpte4281 => { /* ... */ },
///     ColorPrimaries::Smpte4312 => { /* ... */ },
///     ColorPrimaries::SmpteEg4321 => { /* ... */ },
///     ColorPrimaries::Unspecified => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `colorprimaries` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ColorPrimaries::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ColorPrimaries::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ColorPrimaries::NewFeature` is defined.
/// Specifically, when `colorprimaries` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ColorPrimaries::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// The color space primaries of the video track, defining the red, green, and blue color coordinates used for the video. This information helps ensure accurate color reproduction during playback and transcoding.
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ColorPrimaries {
    #[allow(missing_docs)] // documentation missing in model
    Ebu3213E,
    #[allow(missing_docs)] // documentation missing in model
    GenericFilm,
    #[allow(missing_docs)] // documentation missing in model
    Ipt,
    #[allow(missing_docs)] // documentation missing in model
    Itu2020,
    #[allow(missing_docs)] // documentation missing in model
    Itu470Bg,
    #[allow(missing_docs)] // documentation missing in model
    Itu470M,
    #[allow(missing_docs)] // documentation missing in model
    Itu709,
    #[allow(missing_docs)] // documentation missing in model
    Last,
    #[allow(missing_docs)] // documentation missing in model
    Reserved,
    #[allow(missing_docs)] // documentation missing in model
    Smpte170M,
    #[allow(missing_docs)] // documentation missing in model
    Smpte2067Xyz,
    #[allow(missing_docs)] // documentation missing in model
    Smpte240M,
    #[allow(missing_docs)] // documentation missing in model
    Smpte4281,
    #[allow(missing_docs)] // documentation missing in model
    Smpte4312,
    #[allow(missing_docs)] // documentation missing in model
    SmpteEg4321,
    #[allow(missing_docs)] // documentation missing in model
    Unspecified,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ColorPrimaries {
    fn from(s: &str) -> Self {
        match s {
            "EBU_3213_E" => ColorPrimaries::Ebu3213E,
            "GENERIC_FILM" => ColorPrimaries::GenericFilm,
            "IPT" => ColorPrimaries::Ipt,
            "ITU_2020" => ColorPrimaries::Itu2020,
            "ITU_470BG" => ColorPrimaries::Itu470Bg,
            "ITU_470M" => ColorPrimaries::Itu470M,
            "ITU_709" => ColorPrimaries::Itu709,
            "LAST" => ColorPrimaries::Last,
            "RESERVED" => ColorPrimaries::Reserved,
            "SMPTE_170M" => ColorPrimaries::Smpte170M,
            "SMPTE_2067XYZ" => ColorPrimaries::Smpte2067Xyz,
            "SMPTE_240M" => ColorPrimaries::Smpte240M,
            "SMPTE_428_1" => ColorPrimaries::Smpte4281,
            "SMPTE_431_2" => ColorPrimaries::Smpte4312,
            "SMPTE_EG_432_1" => ColorPrimaries::SmpteEg4321,
            "UNSPECIFIED" => ColorPrimaries::Unspecified,
            other => ColorPrimaries::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ColorPrimaries {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ColorPrimaries::from(s))
    }
}
impl ColorPrimaries {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ColorPrimaries::Ebu3213E => "EBU_3213_E",
            ColorPrimaries::GenericFilm => "GENERIC_FILM",
            ColorPrimaries::Ipt => "IPT",
            ColorPrimaries::Itu2020 => "ITU_2020",
            ColorPrimaries::Itu470Bg => "ITU_470BG",
            ColorPrimaries::Itu470M => "ITU_470M",
            ColorPrimaries::Itu709 => "ITU_709",
            ColorPrimaries::Last => "LAST",
            ColorPrimaries::Reserved => "RESERVED",
            ColorPrimaries::Smpte170M => "SMPTE_170M",
            ColorPrimaries::Smpte2067Xyz => "SMPTE_2067XYZ",
            ColorPrimaries::Smpte240M => "SMPTE_240M",
            ColorPrimaries::Smpte4281 => "SMPTE_428_1",
            ColorPrimaries::Smpte4312 => "SMPTE_431_2",
            ColorPrimaries::SmpteEg4321 => "SMPTE_EG_432_1",
            ColorPrimaries::Unspecified => "UNSPECIFIED",
            ColorPrimaries::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "EBU_3213_E",
            "GENERIC_FILM",
            "IPT",
            "ITU_2020",
            "ITU_470BG",
            "ITU_470M",
            "ITU_709",
            "LAST",
            "RESERVED",
            "SMPTE_170M",
            "SMPTE_2067XYZ",
            "SMPTE_240M",
            "SMPTE_428_1",
            "SMPTE_431_2",
            "SMPTE_EG_432_1",
            "UNSPECIFIED",
        ]
    }
}
impl ::std::convert::AsRef<str> for ColorPrimaries {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ColorPrimaries {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ColorPrimaries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ColorPrimaries::Ebu3213E => write!(f, "EBU_3213_E"),
            ColorPrimaries::GenericFilm => write!(f, "GENERIC_FILM"),
            ColorPrimaries::Ipt => write!(f, "IPT"),
            ColorPrimaries::Itu2020 => write!(f, "ITU_2020"),
            ColorPrimaries::Itu470Bg => write!(f, "ITU_470BG"),
            ColorPrimaries::Itu470M => write!(f, "ITU_470M"),
            ColorPrimaries::Itu709 => write!(f, "ITU_709"),
            ColorPrimaries::Last => write!(f, "LAST"),
            ColorPrimaries::Reserved => write!(f, "RESERVED"),
            ColorPrimaries::Smpte170M => write!(f, "SMPTE_170M"),
            ColorPrimaries::Smpte2067Xyz => write!(f, "SMPTE_2067XYZ"),
            ColorPrimaries::Smpte240M => write!(f, "SMPTE_240M"),
            ColorPrimaries::Smpte4281 => write!(f, "SMPTE_428_1"),
            ColorPrimaries::Smpte4312 => write!(f, "SMPTE_431_2"),
            ColorPrimaries::SmpteEg4321 => write!(f, "SMPTE_EG_432_1"),
            ColorPrimaries::Unspecified => write!(f, "UNSPECIFIED"),
            ColorPrimaries::Unknown(value) => write!(f, "{}", value),
        }
    }
}
