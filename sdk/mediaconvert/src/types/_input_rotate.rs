// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `InputRotate`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let inputrotate = unimplemented!();
/// match inputrotate {
///     InputRotate::Auto => { /* ... */ },
///     InputRotate::Degrees180 => { /* ... */ },
///     InputRotate::Degrees270 => { /* ... */ },
///     InputRotate::Degrees90 => { /* ... */ },
///     InputRotate::Degree0 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `inputrotate` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `InputRotate::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `InputRotate::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `InputRotate::NewFeature` is defined.
/// Specifically, when `inputrotate` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `InputRotate::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Use Rotate (InputRotate) to specify how the service rotates your video. You can choose automatic rotation or specify a rotation. You can specify a clockwise rotation of 0, 90, 180, or 270 degrees. If your input video container is .mov or .mp4 and your input has rotation metadata, you can choose Automatic to have the service rotate your video according to the rotation specified in the metadata. The rotation must be within one degree of 90, 180, or 270 degrees. If the rotation metadata specifies any other rotation, the service will default to no rotation. By default, the service does no rotation, even if your input video has rotation metadata. The service doesn't pass through rotation metadata.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum InputRotate {
    #[allow(missing_docs)] // documentation missing in model
    Auto,
    #[allow(missing_docs)] // documentation missing in model
    Degrees180,
    #[allow(missing_docs)] // documentation missing in model
    Degrees270,
    #[allow(missing_docs)] // documentation missing in model
    Degrees90,
    #[allow(missing_docs)] // documentation missing in model
    Degree0,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for InputRotate {
    fn from(s: &str) -> Self {
        match s {
            "AUTO" => InputRotate::Auto,
            "DEGREES_180" => InputRotate::Degrees180,
            "DEGREES_270" => InputRotate::Degrees270,
            "DEGREES_90" => InputRotate::Degrees90,
            "DEGREE_0" => InputRotate::Degree0,
            other => InputRotate::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for InputRotate {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(InputRotate::from(s))
    }
}
impl InputRotate {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            InputRotate::Auto => "AUTO",
            InputRotate::Degrees180 => "DEGREES_180",
            InputRotate::Degrees270 => "DEGREES_270",
            InputRotate::Degrees90 => "DEGREES_90",
            InputRotate::Degree0 => "DEGREE_0",
            InputRotate::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTO",
            "DEGREES_180",
            "DEGREES_270",
            "DEGREES_90",
            "DEGREE_0",
        ]
    }
}
impl AsRef<str> for InputRotate {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
