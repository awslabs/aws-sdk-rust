// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Xavc4kProfileBitrateClass`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let xavc4kprofilebitrateclass = unimplemented!();
/// match xavc4kprofilebitrateclass {
///     Xavc4kProfileBitrateClass::BitrateClass100 => { /* ... */ },
///     Xavc4kProfileBitrateClass::BitrateClass140 => { /* ... */ },
///     Xavc4kProfileBitrateClass::BitrateClass200 => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `xavc4kprofilebitrateclass` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Xavc4kProfileBitrateClass::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Xavc4kProfileBitrateClass::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Xavc4kProfileBitrateClass::NewFeature` is defined.
/// Specifically, when `xavc4kprofilebitrateclass` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Xavc4kProfileBitrateClass::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Specify the XAVC 4k (Long GOP) Bitrate Class to set the bitrate of your output. Outputs of the same class have similar image quality over the operating points that are valid for that class.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Xavc4kProfileBitrateClass {
    #[allow(missing_docs)] // documentation missing in model
    BitrateClass100,
    #[allow(missing_docs)] // documentation missing in model
    BitrateClass140,
    #[allow(missing_docs)] // documentation missing in model
    BitrateClass200,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Xavc4kProfileBitrateClass {
    fn from(s: &str) -> Self {
        match s {
            "BITRATE_CLASS_100" => Xavc4kProfileBitrateClass::BitrateClass100,
            "BITRATE_CLASS_140" => Xavc4kProfileBitrateClass::BitrateClass140,
            "BITRATE_CLASS_200" => Xavc4kProfileBitrateClass::BitrateClass200,
            other => Xavc4kProfileBitrateClass::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for Xavc4kProfileBitrateClass {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Xavc4kProfileBitrateClass::from(s))
    }
}
impl Xavc4kProfileBitrateClass {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Xavc4kProfileBitrateClass::BitrateClass100 => "BITRATE_CLASS_100",
            Xavc4kProfileBitrateClass::BitrateClass140 => "BITRATE_CLASS_140",
            Xavc4kProfileBitrateClass::BitrateClass200 => "BITRATE_CLASS_200",
            Xavc4kProfileBitrateClass::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BITRATE_CLASS_100",
            "BITRATE_CLASS_140",
            "BITRATE_CLASS_200",
        ]
    }
}
impl AsRef<str> for Xavc4kProfileBitrateClass {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
