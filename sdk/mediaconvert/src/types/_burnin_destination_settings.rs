// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Burn-in is a captions delivery method, rather than a captions format. Burn-in writes the captions directly on your video frames, replacing pixels of video content with the captions. Set up burn-in captions in the same output as your video. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/burn-in-output-captions.html. When you work directly in your JSON job specification, include this object and any required children when you set destinationType to BURN_IN.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BurninDestinationSettings {
    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
    #[doc(hidden)]
    pub alignment: std::option::Option<crate::types::BurninSubtitleAlignment>,
    /// Ignore this setting unless Style passthrough (StylePassthrough) is set to Enabled and Font color (FontColor) set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color (ApplyFontColor) for additional font color controls. When you choose White text only (WHITE_TEXT_ONLY), or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    #[doc(hidden)]
    pub apply_font_color: std::option::Option<crate::types::BurninSubtitleApplyFontColor>,
    /// Specify the color of the rectangle behind the captions. Leave background color (BackgroundColor) blank and set Style passthrough (StylePassthrough) to enabled to use the background color data from your input captions, if present.
    #[doc(hidden)]
    pub background_color: std::option::Option<crate::types::BurninSubtitleBackgroundColor>,
    /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions.
    #[doc(hidden)]
    pub background_opacity: i32,
    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    #[doc(hidden)]
    pub fallback_font: std::option::Option<crate::types::BurninSubtitleFallbackFont>,
    /// Specify the color of the burned-in captions text. Leave Font color (FontColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font color data from your input captions, if present.
    #[doc(hidden)]
    pub font_color: std::option::Option<crate::types::BurninSubtitleFontColor>,
    /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    #[doc(hidden)]
    pub font_opacity: i32,
    /// Specify the Font resolution (FontResolution) in DPI (dots per inch).
    #[doc(hidden)]
    pub font_resolution: i32,
    /// Set Font script (FontScript) to Automatically determined (AUTOMATIC), or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese.
    #[doc(hidden)]
    pub font_script: std::option::Option<crate::types::FontScript>,
    /// Specify the Font size (FontSize) in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size.
    #[doc(hidden)]
    pub font_size: i32,
    /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
    #[doc(hidden)]
    pub hex_font_color: std::option::Option<std::string::String>,
    /// Specify font outline color. Leave Outline color (OutlineColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font outline color data from your input captions, if present.
    #[doc(hidden)]
    pub outline_color: std::option::Option<crate::types::BurninSubtitleOutlineColor>,
    /// Specify the Outline size (OutlineSize) of the caption text, in pixels. Leave Outline size blank and set Style passthrough (StylePassthrough) to enabled to use the outline size data from your input captions, if present.
    #[doc(hidden)]
    pub outline_size: i32,
    /// Specify the color of the shadow cast by the captions. Leave Shadow color (ShadowColor) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow color data from your input captions, if present.
    #[doc(hidden)]
    pub shadow_color: std::option::Option<crate::types::BurninSubtitleShadowColor>,
    /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to Enabled, leave Shadow opacity (ShadowOpacity) blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions.
    #[doc(hidden)]
    pub shadow_opacity: i32,
    /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.
    #[doc(hidden)]
    pub shadow_x_offset: i32,
    /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset (ShadowYOffset) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow y-offset data from your input captions, if present.
    #[doc(hidden)]
    pub shadow_y_offset: i32,
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use default settings: white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings.
    #[doc(hidden)]
    pub style_passthrough: std::option::Option<crate::types::BurnInSubtitleStylePassthrough>,
    /// Specify whether the text spacing (TeletextSpacing) in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid (FIXED_GRID) to conform to the spacing specified in the captions file more accurately. Choose proportional (PROPORTIONAL) to make the text easier to read for closed captions.
    #[doc(hidden)]
    pub teletext_spacing: std::option::Option<crate::types::BurninSubtitleTeletextSpacing>,
    /// Specify the horizontal position (XPosition) of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter.
    #[doc(hidden)]
    pub x_position: i32,
    /// Specify the vertical position (YPosition) of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output.
    #[doc(hidden)]
    pub y_position: i32,
}
impl BurninDestinationSettings {
    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
    pub fn alignment(&self) -> std::option::Option<&crate::types::BurninSubtitleAlignment> {
        self.alignment.as_ref()
    }
    /// Ignore this setting unless Style passthrough (StylePassthrough) is set to Enabled and Font color (FontColor) set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color (ApplyFontColor) for additional font color controls. When you choose White text only (WHITE_TEXT_ONLY), or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    pub fn apply_font_color(
        &self,
    ) -> std::option::Option<&crate::types::BurninSubtitleApplyFontColor> {
        self.apply_font_color.as_ref()
    }
    /// Specify the color of the rectangle behind the captions. Leave background color (BackgroundColor) blank and set Style passthrough (StylePassthrough) to enabled to use the background color data from your input captions, if present.
    pub fn background_color(
        &self,
    ) -> std::option::Option<&crate::types::BurninSubtitleBackgroundColor> {
        self.background_color.as_ref()
    }
    /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions.
    pub fn background_opacity(&self) -> i32 {
        self.background_opacity
    }
    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    pub fn fallback_font(&self) -> std::option::Option<&crate::types::BurninSubtitleFallbackFont> {
        self.fallback_font.as_ref()
    }
    /// Specify the color of the burned-in captions text. Leave Font color (FontColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font color data from your input captions, if present.
    pub fn font_color(&self) -> std::option::Option<&crate::types::BurninSubtitleFontColor> {
        self.font_color.as_ref()
    }
    /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    pub fn font_opacity(&self) -> i32 {
        self.font_opacity
    }
    /// Specify the Font resolution (FontResolution) in DPI (dots per inch).
    pub fn font_resolution(&self) -> i32 {
        self.font_resolution
    }
    /// Set Font script (FontScript) to Automatically determined (AUTOMATIC), or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese.
    pub fn font_script(&self) -> std::option::Option<&crate::types::FontScript> {
        self.font_script.as_ref()
    }
    /// Specify the Font size (FontSize) in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size.
    pub fn font_size(&self) -> i32 {
        self.font_size
    }
    /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
    pub fn hex_font_color(&self) -> std::option::Option<&str> {
        self.hex_font_color.as_deref()
    }
    /// Specify font outline color. Leave Outline color (OutlineColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font outline color data from your input captions, if present.
    pub fn outline_color(&self) -> std::option::Option<&crate::types::BurninSubtitleOutlineColor> {
        self.outline_color.as_ref()
    }
    /// Specify the Outline size (OutlineSize) of the caption text, in pixels. Leave Outline size blank and set Style passthrough (StylePassthrough) to enabled to use the outline size data from your input captions, if present.
    pub fn outline_size(&self) -> i32 {
        self.outline_size
    }
    /// Specify the color of the shadow cast by the captions. Leave Shadow color (ShadowColor) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow color data from your input captions, if present.
    pub fn shadow_color(&self) -> std::option::Option<&crate::types::BurninSubtitleShadowColor> {
        self.shadow_color.as_ref()
    }
    /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to Enabled, leave Shadow opacity (ShadowOpacity) blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions.
    pub fn shadow_opacity(&self) -> i32 {
        self.shadow_opacity
    }
    /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.
    pub fn shadow_x_offset(&self) -> i32 {
        self.shadow_x_offset
    }
    /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset (ShadowYOffset) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow y-offset data from your input captions, if present.
    pub fn shadow_y_offset(&self) -> i32 {
        self.shadow_y_offset
    }
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use default settings: white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings.
    pub fn style_passthrough(
        &self,
    ) -> std::option::Option<&crate::types::BurnInSubtitleStylePassthrough> {
        self.style_passthrough.as_ref()
    }
    /// Specify whether the text spacing (TeletextSpacing) in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid (FIXED_GRID) to conform to the spacing specified in the captions file more accurately. Choose proportional (PROPORTIONAL) to make the text easier to read for closed captions.
    pub fn teletext_spacing(
        &self,
    ) -> std::option::Option<&crate::types::BurninSubtitleTeletextSpacing> {
        self.teletext_spacing.as_ref()
    }
    /// Specify the horizontal position (XPosition) of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter.
    pub fn x_position(&self) -> i32 {
        self.x_position
    }
    /// Specify the vertical position (YPosition) of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output.
    pub fn y_position(&self) -> i32 {
        self.y_position
    }
}
impl BurninDestinationSettings {
    /// Creates a new builder-style object to manufacture [`BurninDestinationSettings`](crate::types::BurninDestinationSettings).
    pub fn builder() -> crate::types::builders::BurninDestinationSettingsBuilder {
        crate::types::builders::BurninDestinationSettingsBuilder::default()
    }
}

/// A builder for [`BurninDestinationSettings`](crate::types::BurninDestinationSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BurninDestinationSettingsBuilder {
    pub(crate) alignment: std::option::Option<crate::types::BurninSubtitleAlignment>,
    pub(crate) apply_font_color: std::option::Option<crate::types::BurninSubtitleApplyFontColor>,
    pub(crate) background_color: std::option::Option<crate::types::BurninSubtitleBackgroundColor>,
    pub(crate) background_opacity: std::option::Option<i32>,
    pub(crate) fallback_font: std::option::Option<crate::types::BurninSubtitleFallbackFont>,
    pub(crate) font_color: std::option::Option<crate::types::BurninSubtitleFontColor>,
    pub(crate) font_opacity: std::option::Option<i32>,
    pub(crate) font_resolution: std::option::Option<i32>,
    pub(crate) font_script: std::option::Option<crate::types::FontScript>,
    pub(crate) font_size: std::option::Option<i32>,
    pub(crate) hex_font_color: std::option::Option<std::string::String>,
    pub(crate) outline_color: std::option::Option<crate::types::BurninSubtitleOutlineColor>,
    pub(crate) outline_size: std::option::Option<i32>,
    pub(crate) shadow_color: std::option::Option<crate::types::BurninSubtitleShadowColor>,
    pub(crate) shadow_opacity: std::option::Option<i32>,
    pub(crate) shadow_x_offset: std::option::Option<i32>,
    pub(crate) shadow_y_offset: std::option::Option<i32>,
    pub(crate) style_passthrough: std::option::Option<crate::types::BurnInSubtitleStylePassthrough>,
    pub(crate) teletext_spacing: std::option::Option<crate::types::BurninSubtitleTeletextSpacing>,
    pub(crate) x_position: std::option::Option<i32>,
    pub(crate) y_position: std::option::Option<i32>,
}
impl BurninDestinationSettingsBuilder {
    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
    pub fn alignment(mut self, input: crate::types::BurninSubtitleAlignment) -> Self {
        self.alignment = Some(input);
        self
    }
    /// Specify the alignment of your captions. If no explicit x_position is provided, setting alignment to centered will placethe captions at the bottom center of the output. Similarly, setting a left alignment willalign captions to the bottom left of the output. If x and y positions are given in conjunction with the alignment parameter, the font will be justified (either left or centered) relative to those coordinates.
    pub fn set_alignment(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleAlignment>,
    ) -> Self {
        self.alignment = input;
        self
    }
    /// Ignore this setting unless Style passthrough (StylePassthrough) is set to Enabled and Font color (FontColor) set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color (ApplyFontColor) for additional font color controls. When you choose White text only (WHITE_TEXT_ONLY), or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    pub fn apply_font_color(mut self, input: crate::types::BurninSubtitleApplyFontColor) -> Self {
        self.apply_font_color = Some(input);
        self
    }
    /// Ignore this setting unless Style passthrough (StylePassthrough) is set to Enabled and Font color (FontColor) set to Black, Yellow, Red, Green, Blue, or Hex. Use Apply font color (ApplyFontColor) for additional font color controls. When you choose White text only (WHITE_TEXT_ONLY), or leave blank, your font color setting only applies to white text in your input captions. For example, if your font color setting is Yellow, and your input captions have red and white text, your output captions will have red and yellow text. When you choose ALL_TEXT, your font color setting applies to all of your output captions text.
    pub fn set_apply_font_color(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleApplyFontColor>,
    ) -> Self {
        self.apply_font_color = input;
        self
    }
    /// Specify the color of the rectangle behind the captions. Leave background color (BackgroundColor) blank and set Style passthrough (StylePassthrough) to enabled to use the background color data from your input captions, if present.
    pub fn background_color(mut self, input: crate::types::BurninSubtitleBackgroundColor) -> Self {
        self.background_color = Some(input);
        self
    }
    /// Specify the color of the rectangle behind the captions. Leave background color (BackgroundColor) blank and set Style passthrough (StylePassthrough) to enabled to use the background color data from your input captions, if present.
    pub fn set_background_color(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleBackgroundColor>,
    ) -> Self {
        self.background_color = input;
        self
    }
    /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions.
    pub fn background_opacity(mut self, input: i32) -> Self {
        self.background_opacity = Some(input);
        self
    }
    /// Specify the opacity of the background rectangle. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to enabled, leave blank to pass through the background style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all backgrounds from your output captions.
    pub fn set_background_opacity(mut self, input: std::option::Option<i32>) -> Self {
        self.background_opacity = input;
        self
    }
    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    pub fn fallback_font(mut self, input: crate::types::BurninSubtitleFallbackFont) -> Self {
        self.fallback_font = Some(input);
        self
    }
    /// Specify the font that you want the service to use for your burn in captions when your input captions specify a font that MediaConvert doesn't support. When you set Fallback font (FallbackFont) to best match (BEST_MATCH), or leave blank, MediaConvert uses a supported font that most closely matches the font that your input captions specify. When there are multiple unsupported fonts in your input captions, MediaConvert matches each font with the supported font that matches best. When you explicitly choose a replacement font, MediaConvert uses that font to replace all unsupported fonts from your input.
    pub fn set_fallback_font(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleFallbackFont>,
    ) -> Self {
        self.fallback_font = input;
        self
    }
    /// Specify the color of the burned-in captions text. Leave Font color (FontColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font color data from your input captions, if present.
    pub fn font_color(mut self, input: crate::types::BurninSubtitleFontColor) -> Self {
        self.font_color = Some(input);
        self
    }
    /// Specify the color of the burned-in captions text. Leave Font color (FontColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font color data from your input captions, if present.
    pub fn set_font_color(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleFontColor>,
    ) -> Self {
        self.font_color = input;
        self
    }
    /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    pub fn font_opacity(mut self, input: i32) -> Self {
        self.font_opacity = Some(input);
        self
    }
    /// Specify the opacity of the burned-in captions. 255 is opaque; 0 is transparent.
    pub fn set_font_opacity(mut self, input: std::option::Option<i32>) -> Self {
        self.font_opacity = input;
        self
    }
    /// Specify the Font resolution (FontResolution) in DPI (dots per inch).
    pub fn font_resolution(mut self, input: i32) -> Self {
        self.font_resolution = Some(input);
        self
    }
    /// Specify the Font resolution (FontResolution) in DPI (dots per inch).
    pub fn set_font_resolution(mut self, input: std::option::Option<i32>) -> Self {
        self.font_resolution = input;
        self
    }
    /// Set Font script (FontScript) to Automatically determined (AUTOMATIC), or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese.
    pub fn font_script(mut self, input: crate::types::FontScript) -> Self {
        self.font_script = Some(input);
        self
    }
    /// Set Font script (FontScript) to Automatically determined (AUTOMATIC), or leave blank, to automatically determine the font script in your input captions. Otherwise, set to Simplified Chinese (HANS) or Traditional Chinese (HANT) if your input font script uses Simplified or Traditional Chinese.
    pub fn set_font_script(mut self, input: std::option::Option<crate::types::FontScript>) -> Self {
        self.font_script = input;
        self
    }
    /// Specify the Font size (FontSize) in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size.
    pub fn font_size(mut self, input: i32) -> Self {
        self.font_size = Some(input);
        self
    }
    /// Specify the Font size (FontSize) in pixels. Must be a positive integer. Set to 0, or leave blank, for automatic font size.
    pub fn set_font_size(mut self, input: std::option::Option<i32>) -> Self {
        self.font_size = input;
        self
    }
    /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
    pub fn hex_font_color(mut self, input: impl Into<std::string::String>) -> Self {
        self.hex_font_color = Some(input.into());
        self
    }
    /// Ignore this setting unless your Font color is set to Hex. Enter either six or eight hexidecimal digits, representing red, green, and blue, with two optional extra digits for alpha. For example a value of 1122AABB is a red value of 0x11, a green value of 0x22, a blue value of 0xAA, and an alpha value of 0xBB.
    pub fn set_hex_font_color(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hex_font_color = input;
        self
    }
    /// Specify font outline color. Leave Outline color (OutlineColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font outline color data from your input captions, if present.
    pub fn outline_color(mut self, input: crate::types::BurninSubtitleOutlineColor) -> Self {
        self.outline_color = Some(input);
        self
    }
    /// Specify font outline color. Leave Outline color (OutlineColor) blank and set Style passthrough (StylePassthrough) to enabled to use the font outline color data from your input captions, if present.
    pub fn set_outline_color(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleOutlineColor>,
    ) -> Self {
        self.outline_color = input;
        self
    }
    /// Specify the Outline size (OutlineSize) of the caption text, in pixels. Leave Outline size blank and set Style passthrough (StylePassthrough) to enabled to use the outline size data from your input captions, if present.
    pub fn outline_size(mut self, input: i32) -> Self {
        self.outline_size = Some(input);
        self
    }
    /// Specify the Outline size (OutlineSize) of the caption text, in pixels. Leave Outline size blank and set Style passthrough (StylePassthrough) to enabled to use the outline size data from your input captions, if present.
    pub fn set_outline_size(mut self, input: std::option::Option<i32>) -> Self {
        self.outline_size = input;
        self
    }
    /// Specify the color of the shadow cast by the captions. Leave Shadow color (ShadowColor) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow color data from your input captions, if present.
    pub fn shadow_color(mut self, input: crate::types::BurninSubtitleShadowColor) -> Self {
        self.shadow_color = Some(input);
        self
    }
    /// Specify the color of the shadow cast by the captions. Leave Shadow color (ShadowColor) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow color data from your input captions, if present.
    pub fn set_shadow_color(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleShadowColor>,
    ) -> Self {
        self.shadow_color = input;
        self
    }
    /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to Enabled, leave Shadow opacity (ShadowOpacity) blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions.
    pub fn shadow_opacity(mut self, input: i32) -> Self {
        self.shadow_opacity = Some(input);
        self
    }
    /// Specify the opacity of the shadow. Enter a value from 0 to 255, where 0 is transparent and 255 is opaque. If Style passthrough (StylePassthrough) is set to Enabled, leave Shadow opacity (ShadowOpacity) blank to pass through the shadow style information in your input captions to your output captions. If Style passthrough is set to disabled, leave blank to use a value of 0 and remove all shadows from your output captions.
    pub fn set_shadow_opacity(mut self, input: std::option::Option<i32>) -> Self {
        self.shadow_opacity = input;
        self
    }
    /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.
    pub fn shadow_x_offset(mut self, input: i32) -> Self {
        self.shadow_x_offset = Some(input);
        self
    }
    /// Specify the horizontal offset of the shadow, relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels to the left.
    pub fn set_shadow_x_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.shadow_x_offset = input;
        self
    }
    /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset (ShadowYOffset) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow y-offset data from your input captions, if present.
    pub fn shadow_y_offset(mut self, input: i32) -> Self {
        self.shadow_y_offset = Some(input);
        self
    }
    /// Specify the vertical offset of the shadow relative to the captions in pixels. A value of -2 would result in a shadow offset 2 pixels above the text. Leave Shadow y-offset (ShadowYOffset) blank and set Style passthrough (StylePassthrough) to enabled to use the shadow y-offset data from your input captions, if present.
    pub fn set_shadow_y_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.shadow_y_offset = input;
        self
    }
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use default settings: white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings.
    pub fn style_passthrough(
        mut self,
        input: crate::types::BurnInSubtitleStylePassthrough,
    ) -> Self {
        self.style_passthrough = Some(input);
        self
    }
    /// Set Style passthrough (StylePassthrough) to ENABLED to use the available style, color, and position information from your input captions. MediaConvert uses default settings for any missing style and position information in your input captions. Set Style passthrough to DISABLED, or leave blank, to ignore the style and position information from your input captions and use default settings: white text with black outlining, bottom-center positioning, and automatic sizing. Whether you set Style passthrough to enabled or not, you can also choose to manually override any of the individual style and position settings.
    pub fn set_style_passthrough(
        mut self,
        input: std::option::Option<crate::types::BurnInSubtitleStylePassthrough>,
    ) -> Self {
        self.style_passthrough = input;
        self
    }
    /// Specify whether the text spacing (TeletextSpacing) in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid (FIXED_GRID) to conform to the spacing specified in the captions file more accurately. Choose proportional (PROPORTIONAL) to make the text easier to read for closed captions.
    pub fn teletext_spacing(mut self, input: crate::types::BurninSubtitleTeletextSpacing) -> Self {
        self.teletext_spacing = Some(input);
        self
    }
    /// Specify whether the text spacing (TeletextSpacing) in your captions is set by the captions grid, or varies depending on letter width. Choose fixed grid (FIXED_GRID) to conform to the spacing specified in the captions file more accurately. Choose proportional (PROPORTIONAL) to make the text easier to read for closed captions.
    pub fn set_teletext_spacing(
        mut self,
        input: std::option::Option<crate::types::BurninSubtitleTeletextSpacing>,
    ) -> Self {
        self.teletext_spacing = input;
        self
    }
    /// Specify the horizontal position (XPosition) of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter.
    pub fn x_position(mut self, input: i32) -> Self {
        self.x_position = Some(input);
        self
    }
    /// Specify the horizontal position (XPosition) of the captions, relative to the left side of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the left of the output. If no explicit x_position is provided, the horizontal caption position will be determined by the alignment parameter.
    pub fn set_x_position(mut self, input: std::option::Option<i32>) -> Self {
        self.x_position = input;
        self
    }
    /// Specify the vertical position (YPosition) of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output.
    pub fn y_position(mut self, input: i32) -> Self {
        self.y_position = Some(input);
        self
    }
    /// Specify the vertical position (YPosition) of the captions, relative to the top of the output in pixels. A value of 10 would result in the captions starting 10 pixels from the top of the output. If no explicit y_position is provided, the caption will be positioned towards the bottom of the output.
    pub fn set_y_position(mut self, input: std::option::Option<i32>) -> Self {
        self.y_position = input;
        self
    }
    /// Consumes the builder and constructs a [`BurninDestinationSettings`](crate::types::BurninDestinationSettings).
    pub fn build(self) -> crate::types::BurninDestinationSettings {
        crate::types::BurninDestinationSettings {
            alignment: self.alignment,
            apply_font_color: self.apply_font_color,
            background_color: self.background_color,
            background_opacity: self.background_opacity.unwrap_or_default(),
            fallback_font: self.fallback_font,
            font_color: self.font_color,
            font_opacity: self.font_opacity.unwrap_or_default(),
            font_resolution: self.font_resolution.unwrap_or_default(),
            font_script: self.font_script,
            font_size: self.font_size.unwrap_or_default(),
            hex_font_color: self.hex_font_color,
            outline_color: self.outline_color,
            outline_size: self.outline_size.unwrap_or_default(),
            shadow_color: self.shadow_color,
            shadow_opacity: self.shadow_opacity.unwrap_or_default(),
            shadow_x_offset: self.shadow_x_offset.unwrap_or_default(),
            shadow_y_offset: self.shadow_y_offset.unwrap_or_default(),
            style_passthrough: self.style_passthrough,
            teletext_spacing: self.teletext_spacing,
            x_position: self.x_position.unwrap_or_default(),
            y_position: self.y_position.unwrap_or_default(),
        }
    }
}
