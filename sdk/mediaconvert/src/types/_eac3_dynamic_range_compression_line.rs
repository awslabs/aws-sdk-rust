// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `Eac3DynamicRangeCompressionLine`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let eac3dynamicrangecompressionline = unimplemented!();
/// match eac3dynamicrangecompressionline {
///     Eac3DynamicRangeCompressionLine::FilmLight => { /* ... */ },
///     Eac3DynamicRangeCompressionLine::FilmStandard => { /* ... */ },
///     Eac3DynamicRangeCompressionLine::MusicLight => { /* ... */ },
///     Eac3DynamicRangeCompressionLine::MusicStandard => { /* ... */ },
///     Eac3DynamicRangeCompressionLine::None => { /* ... */ },
///     Eac3DynamicRangeCompressionLine::Speech => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `eac3dynamicrangecompressionline` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `Eac3DynamicRangeCompressionLine::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `Eac3DynamicRangeCompressionLine::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `Eac3DynamicRangeCompressionLine::NewFeature` is defined.
/// Specifically, when `eac3dynamicrangecompressionline` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `Eac3DynamicRangeCompressionLine::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// Choose the Dolby Digital dynamic range control (DRC) profile that MediaConvert uses when encoding the metadata in the Dolby Digital stream for the line operating mode. Related setting: When you use this setting, MediaConvert ignores any value you provide for Dynamic range compression profile (DynamicRangeCompressionProfile). For information about the Dolby Digital DRC operating modes and profiles, see the Dynamic Range Control chapter of the Dolby Metadata Guide at https://developer.dolby.com/globalassets/professional/documents/dolby-metadata-guide.pdf.
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum Eac3DynamicRangeCompressionLine {
    #[allow(missing_docs)] // documentation missing in model
    FilmLight,
    #[allow(missing_docs)] // documentation missing in model
    FilmStandard,
    #[allow(missing_docs)] // documentation missing in model
    MusicLight,
    #[allow(missing_docs)] // documentation missing in model
    MusicStandard,
    #[allow(missing_docs)] // documentation missing in model
    None,
    #[allow(missing_docs)] // documentation missing in model
    Speech,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for Eac3DynamicRangeCompressionLine {
    fn from(s: &str) -> Self {
        match s {
            "FILM_LIGHT" => Eac3DynamicRangeCompressionLine::FilmLight,
            "FILM_STANDARD" => Eac3DynamicRangeCompressionLine::FilmStandard,
            "MUSIC_LIGHT" => Eac3DynamicRangeCompressionLine::MusicLight,
            "MUSIC_STANDARD" => Eac3DynamicRangeCompressionLine::MusicStandard,
            "NONE" => Eac3DynamicRangeCompressionLine::None,
            "SPEECH" => Eac3DynamicRangeCompressionLine::Speech,
            other => Eac3DynamicRangeCompressionLine::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for Eac3DynamicRangeCompressionLine {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(Eac3DynamicRangeCompressionLine::from(s))
    }
}
impl Eac3DynamicRangeCompressionLine {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            Eac3DynamicRangeCompressionLine::FilmLight => "FILM_LIGHT",
            Eac3DynamicRangeCompressionLine::FilmStandard => "FILM_STANDARD",
            Eac3DynamicRangeCompressionLine::MusicLight => "MUSIC_LIGHT",
            Eac3DynamicRangeCompressionLine::MusicStandard => "MUSIC_STANDARD",
            Eac3DynamicRangeCompressionLine::None => "NONE",
            Eac3DynamicRangeCompressionLine::Speech => "SPEECH",
            Eac3DynamicRangeCompressionLine::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "FILM_LIGHT",
            "FILM_STANDARD",
            "MUSIC_LIGHT",
            "MUSIC_STANDARD",
            "NONE",
            "SPEECH",
        ]
    }
}
impl AsRef<str> for Eac3DynamicRangeCompressionLine {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
