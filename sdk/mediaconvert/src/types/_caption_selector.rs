// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Use captions selectors to specify the captions data from your input that you use in your outputs. You can use up to 20 captions selectors per input.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CaptionSelector {
    /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    #[doc(hidden)]
    pub custom_language_code: std::option::Option<std::string::String>,
    /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    #[doc(hidden)]
    pub language_code: std::option::Option<crate::types::LanguageCode>,
    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    #[doc(hidden)]
    pub source_settings: std::option::Option<crate::types::CaptionSourceSettings>,
}
impl CaptionSelector {
    /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn custom_language_code(&self) -> std::option::Option<&str> {
        self.custom_language_code.as_deref()
    }
    /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn language_code(&self) -> std::option::Option<&crate::types::LanguageCode> {
        self.language_code.as_ref()
    }
    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    pub fn source_settings(&self) -> std::option::Option<&crate::types::CaptionSourceSettings> {
        self.source_settings.as_ref()
    }
}
impl CaptionSelector {
    /// Creates a new builder-style object to manufacture [`CaptionSelector`](crate::types::CaptionSelector).
    pub fn builder() -> crate::types::builders::CaptionSelectorBuilder {
        crate::types::builders::CaptionSelectorBuilder::default()
    }
}

/// A builder for [`CaptionSelector`](crate::types::CaptionSelector).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CaptionSelectorBuilder {
    pub(crate) custom_language_code: std::option::Option<std::string::String>,
    pub(crate) language_code: std::option::Option<crate::types::LanguageCode>,
    pub(crate) source_settings: std::option::Option<crate::types::CaptionSourceSettings>,
}
impl CaptionSelectorBuilder {
    /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn custom_language_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_language_code = Some(input.into());
        self
    }
    /// The specific language to extract from source, using the ISO 639-2 or ISO 639-3 three-letter language code. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn set_custom_language_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_language_code = input;
        self
    }
    /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn language_code(mut self, input: crate::types::LanguageCode) -> Self {
        self.language_code = Some(input);
        self
    }
    /// The specific language to extract from source. If input is SCTE-27, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub and output is Burn-in or SMPTE-TT, complete this field and/or PID to select the caption language to extract. If input is DVB-Sub that is being passed through, omit this field (and PID field); there is no way to extract a specific language with pass-through captions.
    pub fn set_language_code(
        mut self,
        input: std::option::Option<crate::types::LanguageCode>,
    ) -> Self {
        self.language_code = input;
        self
    }
    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    pub fn source_settings(mut self, input: crate::types::CaptionSourceSettings) -> Self {
        self.source_settings = Some(input);
        self
    }
    /// If your input captions are SCC, TTML, STL, SMI, SRT, or IMSC in an xml file, specify the URI of the input captions source file. If your input captions are IMSC in an IMF package, use TrackSourceSettings instead of FileSoureSettings.
    pub fn set_source_settings(
        mut self,
        input: std::option::Option<crate::types::CaptionSourceSettings>,
    ) -> Self {
        self.source_settings = input;
        self
    }
    /// Consumes the builder and constructs a [`CaptionSelector`](crate::types::CaptionSelector).
    pub fn build(self) -> crate::types::CaptionSelector {
        crate::types::CaptionSelector {
            custom_language_code: self.custom_language_code,
            language_code: self.language_code,
            source_settings: self.source_settings,
        }
    }
}
