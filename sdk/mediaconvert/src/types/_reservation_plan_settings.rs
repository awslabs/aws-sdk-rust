// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Details about the pricing plan for your reserved queue. Required for reserved queues and not applicable to on-demand queues.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservationPlanSettings {
    /// The length of the term of your reserved queue pricing plan commitment.
    #[doc(hidden)]
    pub commitment: std::option::Option<crate::types::Commitment>,
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
    #[doc(hidden)]
    pub renewal_type: std::option::Option<crate::types::RenewalType>,
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
    #[doc(hidden)]
    pub reserved_slots: i32,
}
impl ReservationPlanSettings {
    /// The length of the term of your reserved queue pricing plan commitment.
    pub fn commitment(&self) -> std::option::Option<&crate::types::Commitment> {
        self.commitment.as_ref()
    }
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
    pub fn renewal_type(&self) -> std::option::Option<&crate::types::RenewalType> {
        self.renewal_type.as_ref()
    }
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
    pub fn reserved_slots(&self) -> i32 {
        self.reserved_slots
    }
}
impl ReservationPlanSettings {
    /// Creates a new builder-style object to manufacture [`ReservationPlanSettings`](crate::types::ReservationPlanSettings).
    pub fn builder() -> crate::types::builders::ReservationPlanSettingsBuilder {
        crate::types::builders::ReservationPlanSettingsBuilder::default()
    }
}

/// A builder for [`ReservationPlanSettings`](crate::types::ReservationPlanSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservationPlanSettingsBuilder {
    pub(crate) commitment: std::option::Option<crate::types::Commitment>,
    pub(crate) renewal_type: std::option::Option<crate::types::RenewalType>,
    pub(crate) reserved_slots: std::option::Option<i32>,
}
impl ReservationPlanSettingsBuilder {
    /// The length of the term of your reserved queue pricing plan commitment.
    pub fn commitment(mut self, input: crate::types::Commitment) -> Self {
        self.commitment = Some(input);
        self
    }
    /// The length of the term of your reserved queue pricing plan commitment.
    pub fn set_commitment(mut self, input: std::option::Option<crate::types::Commitment>) -> Self {
        self.commitment = input;
        self
    }
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
    pub fn renewal_type(mut self, input: crate::types::RenewalType) -> Self {
        self.renewal_type = Some(input);
        self
    }
    /// Specifies whether the term of your reserved queue pricing plan is automatically extended (AUTO_RENEW) or expires (EXPIRE) at the end of the term. When your term is auto renewed, you extend your commitment by 12 months from the auto renew date. You can cancel this commitment.
    pub fn set_renewal_type(
        mut self,
        input: std::option::Option<crate::types::RenewalType>,
    ) -> Self {
        self.renewal_type = input;
        self
    }
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
    pub fn reserved_slots(mut self, input: i32) -> Self {
        self.reserved_slots = Some(input);
        self
    }
    /// Specifies the number of reserved transcode slots (RTS) for this queue. The number of RTS determines how many jobs the queue can process in parallel; each RTS can process one job at a time. You can't decrease the number of RTS in your reserved queue. You can increase the number of RTS by extending your existing commitment with a new 12-month commitment for the larger number. The new commitment begins when you purchase the additional capacity. You can't cancel your commitment or revert to your original commitment after you increase the capacity.
    pub fn set_reserved_slots(mut self, input: std::option::Option<i32>) -> Self {
        self.reserved_slots = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservationPlanSettings`](crate::types::ReservationPlanSettings).
    pub fn build(self) -> crate::types::ReservationPlanSettings {
        crate::types::ReservationPlanSettings {
            commitment: self.commitment,
            renewal_type: self.renewal_type,
            reserved_slots: self.reserved_slots.unwrap_or_default(),
        }
    }
}
