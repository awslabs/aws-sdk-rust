// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdatePipeInput {
    /// <p>The name of the pipe.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the pipe.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The state the pipe should be in.</p>
    pub desired_state: ::std::option::Option<crate::types::RequestedPipeState>,
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub source_parameters: ::std::option::Option<crate::types::UpdatePipeSourceParameters>,
    /// <p>The ARN of the enrichment resource.</p>
    pub enrichment: ::std::option::Option<::std::string::String>,
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub enrichment_parameters: ::std::option::Option<crate::types::PipeEnrichmentParameters>,
    /// <p>The ARN of the target resource.</p>
    pub target: ::std::option::Option<::std::string::String>,
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub target_parameters: ::std::option::Option<crate::types::PipeTargetParameters>,
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdatePipeInput {
    /// <p>The name of the pipe.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the pipe.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The state the pipe should be in.</p>
    pub fn desired_state(&self) -> ::std::option::Option<&crate::types::RequestedPipeState> {
        self.desired_state.as_ref()
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn source_parameters(&self) -> ::std::option::Option<&crate::types::UpdatePipeSourceParameters> {
        self.source_parameters.as_ref()
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn enrichment(&self) -> ::std::option::Option<&str> {
        self.enrichment.as_deref()
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn enrichment_parameters(&self) -> ::std::option::Option<&crate::types::PipeEnrichmentParameters> {
        self.enrichment_parameters.as_ref()
    }
    /// <p>The ARN of the target resource.</p>
    pub fn target(&self) -> ::std::option::Option<&str> {
        self.target.as_deref()
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn target_parameters(&self) -> ::std::option::Option<&crate::types::PipeTargetParameters> {
        self.target_parameters.as_ref()
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl ::std::fmt::Debug for UpdatePipeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePipeInput");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("desired_state", &self.desired_state);
        formatter.field("source_parameters", &self.source_parameters);
        formatter.field("enrichment", &self.enrichment);
        formatter.field("enrichment_parameters", &self.enrichment_parameters);
        formatter.field("target", &self.target);
        formatter.field("target_parameters", &self.target_parameters);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
impl UpdatePipeInput {
    /// Creates a new builder-style object to manufacture [`UpdatePipeInput`](crate::operation::update_pipe::UpdatePipeInput).
    pub fn builder() -> crate::operation::update_pipe::builders::UpdatePipeInputBuilder {
        crate::operation::update_pipe::builders::UpdatePipeInputBuilder::default()
    }
}

/// A builder for [`UpdatePipeInput`](crate::operation::update_pipe::UpdatePipeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdatePipeInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) desired_state: ::std::option::Option<crate::types::RequestedPipeState>,
    pub(crate) source_parameters: ::std::option::Option<crate::types::UpdatePipeSourceParameters>,
    pub(crate) enrichment: ::std::option::Option<::std::string::String>,
    pub(crate) enrichment_parameters: ::std::option::Option<crate::types::PipeEnrichmentParameters>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) target_parameters: ::std::option::Option<crate::types::PipeTargetParameters>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdatePipeInputBuilder {
    /// <p>The name of the pipe.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the pipe.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the pipe.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the pipe.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the pipe.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the pipe.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The state the pipe should be in.</p>
    pub fn desired_state(mut self, input: crate::types::RequestedPipeState) -> Self {
        self.desired_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state the pipe should be in.</p>
    pub fn set_desired_state(mut self, input: ::std::option::Option<crate::types::RequestedPipeState>) -> Self {
        self.desired_state = input;
        self
    }
    /// <p>The state the pipe should be in.</p>
    pub fn get_desired_state(&self) -> &::std::option::Option<crate::types::RequestedPipeState> {
        &self.desired_state
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn source_parameters(mut self, input: crate::types::UpdatePipeSourceParameters) -> Self {
        self.source_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn set_source_parameters(mut self, input: ::std::option::Option<crate::types::UpdatePipeSourceParameters>) -> Self {
        self.source_parameters = input;
        self
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn get_source_parameters(&self) -> &::std::option::Option<crate::types::UpdatePipeSourceParameters> {
        &self.source_parameters
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn enrichment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.enrichment = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn set_enrichment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.enrichment = input;
        self
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn get_enrichment(&self) -> &::std::option::Option<::std::string::String> {
        &self.enrichment
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn enrichment_parameters(mut self, input: crate::types::PipeEnrichmentParameters) -> Self {
        self.enrichment_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn set_enrichment_parameters(mut self, input: ::std::option::Option<crate::types::PipeEnrichmentParameters>) -> Self {
        self.enrichment_parameters = input;
        self
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn get_enrichment_parameters(&self) -> &::std::option::Option<crate::types::PipeEnrichmentParameters> {
        &self.enrichment_parameters
    }
    /// <p>The ARN of the target resource.</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the target resource.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The ARN of the target resource.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn target_parameters(mut self, input: crate::types::PipeTargetParameters) -> Self {
        self.target_parameters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn set_target_parameters(mut self, input: ::std::option::Option<crate::types::PipeTargetParameters>) -> Self {
        self.target_parameters = input;
        self
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn get_target_parameters(&self) -> &::std::option::Option<crate::types::PipeTargetParameters> {
        &self.target_parameters
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`UpdatePipeInput`](crate::operation::update_pipe::UpdatePipeInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_pipe::UpdatePipeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_pipe::UpdatePipeInput {
            name: self.name,
            description: self.description,
            desired_state: self.desired_state,
            source_parameters: self.source_parameters,
            enrichment: self.enrichment,
            enrichment_parameters: self.enrichment_parameters,
            target: self.target,
            target_parameters: self.target_parameters,
            role_arn: self.role_arn,
        })
    }
}
impl ::std::fmt::Debug for UpdatePipeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePipeInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("desired_state", &self.desired_state);
        formatter.field("source_parameters", &self.source_parameters);
        formatter.field("enrichment", &self.enrichment);
        formatter.field("enrichment_parameters", &self.enrichment_parameters);
        formatter.field("target", &self.target);
        formatter.field("target_parameters", &self.target_parameters);
        formatter.field("role_arn", &self.role_arn);
        formatter.finish()
    }
}
