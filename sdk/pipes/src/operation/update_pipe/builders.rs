// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_pipe::_update_pipe_output::UpdatePipeOutputBuilder;

pub use crate::operation::update_pipe::_update_pipe_input::UpdatePipeInputBuilder;

/// Fluent builder constructing a request to `UpdatePipe`.
///
/// <p>Update an existing pipe. When you call <code>UpdatePipe</code>, only the fields that are included in the request are changed, the rest are unchanged. The exception to this is if you modify any Amazon Web Services-service specific fields in the <code>SourceParameters</code>, <code>EnrichmentParameters</code>, or <code>TargetParameters</code> objects. The fields in these objects are updated atomically as one and override existing values. This is by design and means that if you don't specify an optional field in one of these Parameters objects, that field will be set to its system-default value after the update.</p>
/// <p>For more information about pipes, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes.html"> Amazon EventBridge Pipes</a> in the Amazon EventBridge User Guide.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdatePipeFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_pipe::builders::UpdatePipeInputBuilder,
}
impl UpdatePipeFluentBuilder {
    /// Creates a new `UpdatePipe`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_pipe::UpdatePipe,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_pipe::UpdatePipeError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_pipe::UpdatePipeOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_pipe::UpdatePipeError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the pipe.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the pipe.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>A description of the pipe.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the pipe.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The state the pipe should be in.</p>
    pub fn desired_state(mut self, input: crate::types::RequestedPipeState) -> Self {
        self.inner = self.inner.desired_state(input);
        self
    }
    /// <p>The state the pipe should be in.</p>
    pub fn set_desired_state(
        mut self,
        input: std::option::Option<crate::types::RequestedPipeState>,
    ) -> Self {
        self.inner = self.inner.set_desired_state(input);
        self
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn source_parameters(mut self, input: crate::types::UpdatePipeSourceParameters) -> Self {
        self.inner = self.inner.source_parameters(input);
        self
    }
    /// <p>The parameters required to set up a source for your pipe.</p>
    pub fn set_source_parameters(
        mut self,
        input: std::option::Option<crate::types::UpdatePipeSourceParameters>,
    ) -> Self {
        self.inner = self.inner.set_source_parameters(input);
        self
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn enrichment(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.enrichment(input.into());
        self
    }
    /// <p>The ARN of the enrichment resource.</p>
    pub fn set_enrichment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_enrichment(input);
        self
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn enrichment_parameters(mut self, input: crate::types::PipeEnrichmentParameters) -> Self {
        self.inner = self.inner.enrichment_parameters(input);
        self
    }
    /// <p>The parameters required to set up enrichment on your pipe.</p>
    pub fn set_enrichment_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeEnrichmentParameters>,
    ) -> Self {
        self.inner = self.inner.set_enrichment_parameters(input);
        self
    }
    /// <p>The ARN of the target resource.</p>
    pub fn target(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target(input.into());
        self
    }
    /// <p>The ARN of the target resource.</p>
    pub fn set_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target(input);
        self
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn target_parameters(mut self, input: crate::types::PipeTargetParameters) -> Self {
        self.inner = self.inner.target_parameters(input);
        self
    }
    /// <p>The parameters required to set up a target for your pipe.</p>
    pub fn set_target_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeTargetParameters>,
    ) -> Self {
        self.inner = self.inner.set_target_parameters(input);
        self
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The ARN of the role that allows the pipe to send data to the target.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
}
