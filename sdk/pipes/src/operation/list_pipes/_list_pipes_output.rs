// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPipesOutput {
    /// <p>The pipes returned by the call.</p>
    #[doc(hidden)]
    pub pipes: std::option::Option<std::vec::Vec<crate::types::Pipe>>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPipesOutput {
    /// <p>The pipes returned by the call.</p>
    pub fn pipes(&self) -> std::option::Option<&[crate::types::Pipe]> {
        self.pipes.as_deref()
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPipesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPipesOutput");
        formatter.field("pipes", &self.pipes);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for ListPipesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPipesOutput {
    /// Creates a new builder-style object to manufacture [`ListPipesOutput`](crate::operation::list_pipes::ListPipesOutput).
    pub fn builder() -> crate::operation::list_pipes::builders::ListPipesOutputBuilder {
        crate::operation::list_pipes::builders::ListPipesOutputBuilder::default()
    }
}

/// A builder for [`ListPipesOutput`](crate::operation::list_pipes::ListPipesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ListPipesOutputBuilder {
    pub(crate) pipes: std::option::Option<std::vec::Vec<crate::types::Pipe>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPipesOutputBuilder {
    /// Appends an item to `pipes`.
    ///
    /// To override the contents of this collection use [`set_pipes`](Self::set_pipes).
    ///
    /// <p>The pipes returned by the call.</p>
    pub fn pipes(mut self, input: crate::types::Pipe) -> Self {
        let mut v = self.pipes.unwrap_or_default();
        v.push(input);
        self.pipes = Some(v);
        self
    }
    /// <p>The pipes returned by the call.</p>
    pub fn set_pipes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Pipe>>,
    ) -> Self {
        self.pipes = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPipesOutput`](crate::operation::list_pipes::ListPipesOutput).
    pub fn build(self) -> crate::operation::list_pipes::ListPipesOutput {
        crate::operation::list_pipes::ListPipesOutput {
            pipes: self.pipes,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for ListPipesOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPipesOutputBuilder");
        formatter.field("pipes", &self.pipes);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
