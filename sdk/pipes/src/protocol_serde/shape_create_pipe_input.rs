// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_pipe_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_pipe::CreatePipeInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("Description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.desired_state {
        object.key("DesiredState").string(var_2.as_str());
    }
    if let Some(var_3) = &input.enrichment {
        object.key("Enrichment").string(var_3.as_str());
    }
    if let Some(var_4) = &input.enrichment_parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("EnrichmentParameters").start_object();
        crate::protocol_serde::shape_pipe_enrichment_parameters::ser_pipe_enrichment_parameters(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.role_arn {
        object.key("RoleArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.source {
        object.key("Source").string(var_7.as_str());
    }
    if let Some(var_8) = &input.source_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("SourceParameters").start_object();
        crate::protocol_serde::shape_pipe_source_parameters::ser_pipe_source_parameters(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.tags {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tags").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.target {
        object.key("Target").string(var_14.as_str());
    }
    if let Some(var_15) = &input.target_parameters {
        #[allow(unused_mut)]
        let mut object_16 = object.key("TargetParameters").start_object();
        crate::protocol_serde::shape_pipe_target_parameters::ser_pipe_target_parameters(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    Ok(())
}
