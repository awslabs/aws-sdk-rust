// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pipe_target_timestream_parameters(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PipeTargetTimestreamParameters,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("TimeValue").string(input.time_value.as_str());
    }
    if let Some(var_1) = &input.epoch_time_unit {
        object.key("EpochTimeUnit").string(var_1.as_str());
    }
    if let Some(var_2) = &input.time_field_type {
        object.key("TimeFieldType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.timestamp_format {
        object.key("TimestampFormat").string(var_3.as_str());
    }
    {
        object.key("VersionValue").string(input.version_value.as_str());
    }
    {
        let mut array_4 = object.key("DimensionMappings").start_array();
        for item_5 in &input.dimension_mappings {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_dimension_mapping::ser_dimension_mapping(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.single_measure_mappings {
        let mut array_8 = object.key("SingleMeasureMappings").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_single_measure_mapping::ser_single_measure_mapping(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.multi_measure_mappings {
        let mut array_12 = object.key("MultiMeasureMappings").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_multi_measure_mapping::ser_multi_measure_mapping(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}

pub(crate) fn de_pipe_target_timestream_parameters<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::PipeTargetTimestreamParameters>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PipeTargetTimestreamParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "TimeValue" => {
                            builder = builder.set_time_value(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "EpochTimeUnit" => {
                            builder = builder.set_epoch_time_unit(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::EpochTimeUnit::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "TimeFieldType" => {
                            builder = builder.set_time_field_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TimeFieldType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "TimestampFormat" => {
                            builder = builder.set_timestamp_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VersionValue" => {
                            builder = builder.set_version_value(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DimensionMappings" => {
                            builder = builder.set_dimension_mappings(crate::protocol_serde::shape_dimension_mappings::de_dimension_mappings(tokens)?);
                        }
                        "SingleMeasureMappings" => {
                            builder = builder.set_single_measure_mappings(
                                crate::protocol_serde::shape_single_measure_mappings::de_single_measure_mappings(tokens)?,
                            );
                        }
                        "MultiMeasureMappings" => {
                            builder = builder
                                .set_multi_measure_mappings(crate::protocol_serde::shape_multi_measure_mappings::de_multi_measure_mappings(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::pipe_target_timestream_parameters_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
