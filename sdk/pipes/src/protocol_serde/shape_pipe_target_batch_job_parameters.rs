// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_pipe_target_batch_job_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PipeTargetBatchJobParameters,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.job_definition {
        object.key("JobDefinition").string(var_1.as_str());
    }
    if let Some(var_2) = &input.job_name {
        object.key("JobName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.array_properties {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ArrayProperties").start_object();
        crate::protocol_serde::shape_batch_array_properties::ser_batch_array_properties(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.retry_strategy {
        #[allow(unused_mut)]
        let mut object_6 = object.key("RetryStrategy").start_object();
        crate::protocol_serde::shape_batch_retry_strategy::ser_batch_retry_strategy(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.container_overrides {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ContainerOverrides").start_object();
        crate::protocol_serde::shape_batch_container_overrides::ser_batch_container_overrides(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.depends_on {
        let mut array_10 = object.key("DependsOn").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_batch_job_dependency::ser_batch_job_dependency(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_14 = object.key("Parameters").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    Ok(())
}

pub(crate) fn de_pipe_target_batch_job_parameters<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::PipeTargetBatchJobParameters>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder =
                crate::types::builders::PipeTargetBatchJobParametersBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "JobDefinition" => {
                                builder = builder.set_job_definition(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "JobName" => {
                                builder = builder.set_job_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ArrayProperties" => {
                                builder = builder.set_array_properties(
                                    crate::protocol_serde::shape_batch_array_properties::de_batch_array_properties(tokens)?
                                );
                            }
                            "RetryStrategy" => {
                                builder = builder.set_retry_strategy(
                                    crate::protocol_serde::shape_batch_retry_strategy::de_batch_retry_strategy(tokens)?
                                );
                            }
                            "ContainerOverrides" => {
                                builder = builder.set_container_overrides(
                                    crate::protocol_serde::shape_batch_container_overrides::de_batch_container_overrides(tokens)?
                                );
                            }
                            "DependsOn" => {
                                builder = builder.set_depends_on(
                                    crate::protocol_serde::shape_batch_depends_on::de_batch_depends_on(tokens)?
                                );
                            }
                            "Parameters" => {
                                builder = builder.set_parameters(
                                    crate::protocol_serde::shape_batch_parameters_map::de_batch_parameters_map(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
