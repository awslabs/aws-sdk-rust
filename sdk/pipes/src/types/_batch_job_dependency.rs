// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an Batch job dependency.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchJobDependency {
    /// <p>The job ID of the Batch job that's associated with this dependency.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The type of the job dependency.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::BatchJobDependencyType>,
}
impl BatchJobDependency {
    /// <p>The job ID of the Batch job that's associated with this dependency.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The type of the job dependency.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::BatchJobDependencyType> {
        self.r#type.as_ref()
    }
}
impl BatchJobDependency {
    /// Creates a new builder-style object to manufacture [`BatchJobDependency`](crate::types::BatchJobDependency).
    pub fn builder() -> crate::types::builders::BatchJobDependencyBuilder {
        crate::types::builders::BatchJobDependencyBuilder::default()
    }
}

/// A builder for [`BatchJobDependency`](crate::types::BatchJobDependency).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchJobDependencyBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::BatchJobDependencyType>,
}
impl BatchJobDependencyBuilder {
    /// <p>The job ID of the Batch job that's associated with this dependency.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The job ID of the Batch job that's associated with this dependency.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The type of the job dependency.</p>
    pub fn r#type(mut self, input: crate::types::BatchJobDependencyType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the job dependency.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::BatchJobDependencyType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchJobDependency`](crate::types::BatchJobDependency).
    pub fn build(self) -> crate::types::BatchJobDependency {
        crate::types::BatchJobDependency {
            job_id: self.job_id,
            r#type: self.r#type,
        }
    }
}
