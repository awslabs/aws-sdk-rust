// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using a Amazon SQS stream as a source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipeSourceSqsQueueParameters {
    /// <p>The maximum number of records to include in each batch.</p>
    #[doc(hidden)]
    pub batch_size: std::option::Option<i32>,
    /// <p>The maximum length of a time to wait for events.</p>
    #[doc(hidden)]
    pub maximum_batching_window_in_seconds: std::option::Option<i32>,
}
impl PipeSourceSqsQueueParameters {
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(&self) -> std::option::Option<i32> {
        self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(&self) -> std::option::Option<i32> {
        self.maximum_batching_window_in_seconds
    }
}
impl PipeSourceSqsQueueParameters {
    /// Creates a new builder-style object to manufacture [`PipeSourceSqsQueueParameters`](crate::types::PipeSourceSqsQueueParameters).
    pub fn builder() -> crate::types::builders::PipeSourceSqsQueueParametersBuilder {
        crate::types::builders::PipeSourceSqsQueueParametersBuilder::default()
    }
}

/// A builder for [`PipeSourceSqsQueueParameters`](crate::types::PipeSourceSqsQueueParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipeSourceSqsQueueParametersBuilder {
    pub(crate) batch_size: std::option::Option<i32>,
    pub(crate) maximum_batching_window_in_seconds: std::option::Option<i32>,
}
impl PipeSourceSqsQueueParametersBuilder {
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(mut self, input: i32) -> Self {
        self.batch_size = Some(input);
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn set_batch_size(mut self, input: std::option::Option<i32>) -> Self {
        self.batch_size = input;
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(mut self, input: i32) -> Self {
        self.maximum_batching_window_in_seconds = Some(input);
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn set_maximum_batching_window_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.maximum_batching_window_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`PipeSourceSqsQueueParameters`](crate::types::PipeSourceSqsQueueParameters).
    pub fn build(self) -> crate::types::PipeSourceSqsQueueParameters {
        crate::types::PipeSourceSqsQueueParameters {
            batch_size: self.batch_size,
            maximum_batching_window_in_seconds: self.maximum_batching_window_in_seconds,
        }
    }
}
