// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon S3 logging configuration settings for the pipe.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3LogDestination {
    /// <p>The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The prefix text with which to begin Amazon S3 log object names.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The format EventBridge uses for the log records.</p>
    /// <p>EventBridge currently only supports <code>json</code> formatting.</p>
    pub output_format: ::std::option::Option<crate::types::S3OutputFormat>,
}
impl S3LogDestination {
    /// <p>The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The prefix text with which to begin Amazon S3 log object names.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>The Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn bucket_owner(&self) -> ::std::option::Option<&str> {
        self.bucket_owner.as_deref()
    }
    /// <p>The format EventBridge uses for the log records.</p>
    /// <p>EventBridge currently only supports <code>json</code> formatting.</p>
    pub fn output_format(&self) -> ::std::option::Option<&crate::types::S3OutputFormat> {
        self.output_format.as_ref()
    }
}
impl S3LogDestination {
    /// Creates a new builder-style object to manufacture [`S3LogDestination`](crate::types::S3LogDestination).
    pub fn builder() -> crate::types::builders::S3LogDestinationBuilder {
        crate::types::builders::S3LogDestinationBuilder::default()
    }
}

/// A builder for [`S3LogDestination`](crate::types::S3LogDestination).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct S3LogDestinationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) output_format: ::std::option::Option<crate::types::S3OutputFormat>,
}
impl S3LogDestinationBuilder {
    /// <p>The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>The prefix text with which to begin Amazon S3 log object names.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix text with which to begin Amazon S3 log object names.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The prefix text with which to begin Amazon S3 log object names.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p>The Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn set_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_owner = input;
        self
    }
    /// <p>The Amazon Web Services account that owns the Amazon S3 bucket to which EventBridge delivers the log records for the pipe.</p>
    pub fn get_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_owner
    }
    /// <p>The format EventBridge uses for the log records.</p>
    /// <p>EventBridge currently only supports <code>json</code> formatting.</p>
    pub fn output_format(mut self, input: crate::types::S3OutputFormat) -> Self {
        self.output_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format EventBridge uses for the log records.</p>
    /// <p>EventBridge currently only supports <code>json</code> formatting.</p>
    pub fn set_output_format(mut self, input: ::std::option::Option<crate::types::S3OutputFormat>) -> Self {
        self.output_format = input;
        self
    }
    /// <p>The format EventBridge uses for the log records.</p>
    /// <p>EventBridge currently only supports <code>json</code> formatting.</p>
    pub fn get_output_format(&self) -> &::std::option::Option<crate::types::S3OutputFormat> {
        &self.output_format
    }
    /// Consumes the builder and constructs a [`S3LogDestination`](crate::types::S3LogDestination).
    pub fn build(self) -> crate::types::S3LogDestination {
        crate::types::S3LogDestination {
            bucket_name: self.bucket_name,
            prefix: self.prefix,
            bucket_owner: self.bucket_owner,
            output_format: self.output_format,
        }
    }
}
