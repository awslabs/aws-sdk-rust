// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using a self-managed Apache Kafka stream as a source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PipeSourceSelfManagedKafkaParameters {
    /// <p>The name of the topic that the pipe will read from.</p>
    #[doc(hidden)]
    pub topic_name: std::option::Option<std::string::String>,
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    #[doc(hidden)]
    pub starting_position: std::option::Option<crate::types::SelfManagedKafkaStartPosition>,
    /// <p>An array of server URLs.</p>
    #[doc(hidden)]
    pub additional_bootstrap_servers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of records to include in each batch.</p>
    #[doc(hidden)]
    pub batch_size: std::option::Option<i32>,
    /// <p>The maximum length of a time to wait for events.</p>
    #[doc(hidden)]
    pub maximum_batching_window_in_seconds: std::option::Option<i32>,
    /// <p>The name of the destination queue to consume.</p>
    #[doc(hidden)]
    pub consumer_group_id: std::option::Option<std::string::String>,
    /// <p>The credentials needed to access the resource.</p>
    #[doc(hidden)]
    pub credentials:
        std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationCredentials>,
    /// <p>The ARN of the Secrets Manager secret used for certification.</p>
    #[doc(hidden)]
    pub server_root_ca_certificate: std::option::Option<std::string::String>,
    /// <p>This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationVpc>,
}
impl PipeSourceSelfManagedKafkaParameters {
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn topic_name(&self) -> std::option::Option<&str> {
        self.topic_name.as_deref()
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn starting_position(
        &self,
    ) -> std::option::Option<&crate::types::SelfManagedKafkaStartPosition> {
        self.starting_position.as_ref()
    }
    /// <p>An array of server URLs.</p>
    pub fn additional_bootstrap_servers(&self) -> std::option::Option<&[std::string::String]> {
        self.additional_bootstrap_servers.as_deref()
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(&self) -> std::option::Option<i32> {
        self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(&self) -> std::option::Option<i32> {
        self.maximum_batching_window_in_seconds
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn consumer_group_id(&self) -> std::option::Option<&str> {
        self.consumer_group_id.as_deref()
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn credentials(
        &self,
    ) -> std::option::Option<&crate::types::SelfManagedKafkaAccessConfigurationCredentials> {
        self.credentials.as_ref()
    }
    /// <p>The ARN of the Secrets Manager secret used for certification.</p>
    pub fn server_root_ca_certificate(&self) -> std::option::Option<&str> {
        self.server_root_ca_certificate.as_deref()
    }
    /// <p>This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.</p>
    pub fn vpc(
        &self,
    ) -> std::option::Option<&crate::types::SelfManagedKafkaAccessConfigurationVpc> {
        self.vpc.as_ref()
    }
}
impl std::fmt::Debug for PipeSourceSelfManagedKafkaParameters {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceSelfManagedKafkaParameters");
        formatter.field("topic_name", &"*** Sensitive Data Redacted ***");
        formatter.field("starting_position", &self.starting_position);
        formatter.field(
            "additional_bootstrap_servers",
            &self.additional_bootstrap_servers,
        );
        formatter.field("batch_size", &self.batch_size);
        formatter.field(
            "maximum_batching_window_in_seconds",
            &self.maximum_batching_window_in_seconds,
        );
        formatter.field("consumer_group_id", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials", &self.credentials);
        formatter.field(
            "server_root_ca_certificate",
            &self.server_root_ca_certificate,
        );
        formatter.field("vpc", &self.vpc);
        formatter.finish()
    }
}
impl PipeSourceSelfManagedKafkaParameters {
    /// Creates a new builder-style object to manufacture [`PipeSourceSelfManagedKafkaParameters`](crate::types::PipeSourceSelfManagedKafkaParameters).
    pub fn builder() -> crate::types::builders::PipeSourceSelfManagedKafkaParametersBuilder {
        crate::types::builders::PipeSourceSelfManagedKafkaParametersBuilder::default()
    }
}

/// A builder for [`PipeSourceSelfManagedKafkaParameters`](crate::types::PipeSourceSelfManagedKafkaParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PipeSourceSelfManagedKafkaParametersBuilder {
    pub(crate) topic_name: std::option::Option<std::string::String>,
    pub(crate) starting_position: std::option::Option<crate::types::SelfManagedKafkaStartPosition>,
    pub(crate) additional_bootstrap_servers:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) batch_size: std::option::Option<i32>,
    pub(crate) maximum_batching_window_in_seconds: std::option::Option<i32>,
    pub(crate) consumer_group_id: std::option::Option<std::string::String>,
    pub(crate) credentials:
        std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationCredentials>,
    pub(crate) server_root_ca_certificate: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationVpc>,
}
impl PipeSourceSelfManagedKafkaParametersBuilder {
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn topic_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_name = Some(input.into());
        self
    }
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn set_topic_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn starting_position(mut self, input: crate::types::SelfManagedKafkaStartPosition) -> Self {
        self.starting_position = Some(input);
        self
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn set_starting_position(
        mut self,
        input: std::option::Option<crate::types::SelfManagedKafkaStartPosition>,
    ) -> Self {
        self.starting_position = input;
        self
    }
    /// Appends an item to `additional_bootstrap_servers`.
    ///
    /// To override the contents of this collection use [`set_additional_bootstrap_servers`](Self::set_additional_bootstrap_servers).
    ///
    /// <p>An array of server URLs.</p>
    pub fn additional_bootstrap_servers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.additional_bootstrap_servers.unwrap_or_default();
        v.push(input.into());
        self.additional_bootstrap_servers = Some(v);
        self
    }
    /// <p>An array of server URLs.</p>
    pub fn set_additional_bootstrap_servers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.additional_bootstrap_servers = input;
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(mut self, input: i32) -> Self {
        self.batch_size = Some(input);
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn set_batch_size(mut self, input: std::option::Option<i32>) -> Self {
        self.batch_size = input;
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(mut self, input: i32) -> Self {
        self.maximum_batching_window_in_seconds = Some(input);
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn set_maximum_batching_window_in_seconds(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.maximum_batching_window_in_seconds = input;
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn consumer_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.consumer_group_id = Some(input.into());
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn set_consumer_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.consumer_group_id = input;
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn credentials(
        mut self,
        input: crate::types::SelfManagedKafkaAccessConfigurationCredentials,
    ) -> Self {
        self.credentials = Some(input);
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn set_credentials(
        mut self,
        input: std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationCredentials>,
    ) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The ARN of the Secrets Manager secret used for certification.</p>
    pub fn server_root_ca_certificate(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_root_ca_certificate = Some(input.into());
        self
    }
    /// <p>The ARN of the Secrets Manager secret used for certification.</p>
    pub fn set_server_root_ca_certificate(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.server_root_ca_certificate = input;
        self
    }
    /// <p>This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.</p>
    pub fn vpc(mut self, input: crate::types::SelfManagedKafkaAccessConfigurationVpc) -> Self {
        self.vpc = Some(input);
        self
    }
    /// <p>This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.</p>
    pub fn set_vpc(
        mut self,
        input: std::option::Option<crate::types::SelfManagedKafkaAccessConfigurationVpc>,
    ) -> Self {
        self.vpc = input;
        self
    }
    /// Consumes the builder and constructs a [`PipeSourceSelfManagedKafkaParameters`](crate::types::PipeSourceSelfManagedKafkaParameters).
    pub fn build(self) -> crate::types::PipeSourceSelfManagedKafkaParameters {
        crate::types::PipeSourceSelfManagedKafkaParameters {
            topic_name: self.topic_name,
            starting_position: self.starting_position,
            additional_bootstrap_servers: self.additional_bootstrap_servers,
            batch_size: self.batch_size,
            maximum_batching_window_in_seconds: self.maximum_batching_window_in_seconds,
            consumer_group_id: self.consumer_group_id,
            credentials: self.credentials,
            server_root_ca_certificate: self.server_root_ca_certificate,
            vpc: self.vpc,
        }
    }
}
impl std::fmt::Debug for PipeSourceSelfManagedKafkaParametersBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceSelfManagedKafkaParametersBuilder");
        formatter.field("topic_name", &"*** Sensitive Data Redacted ***");
        formatter.field("starting_position", &self.starting_position);
        formatter.field(
            "additional_bootstrap_servers",
            &self.additional_bootstrap_servers,
        );
        formatter.field("batch_size", &self.batch_size);
        formatter.field(
            "maximum_batching_window_in_seconds",
            &self.maximum_batching_window_in_seconds,
        );
        formatter.field("consumer_group_id", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials", &self.credentials);
        formatter.field(
            "server_root_ca_certificate",
            &self.server_root_ca_certificate,
        );
        formatter.field("vpc", &self.vpc);
        formatter.finish()
    }
}
