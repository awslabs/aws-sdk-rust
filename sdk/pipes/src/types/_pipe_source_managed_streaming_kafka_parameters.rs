// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using an MSK stream as a source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PipeSourceManagedStreamingKafkaParameters {
    /// <p>The name of the topic that the pipe will read from.</p>
    pub topic_name: ::std::string::String,
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub starting_position: ::std::option::Option<crate::types::MskStartPosition>,
    /// <p>The maximum number of records to include in each batch.</p>
    pub batch_size: ::std::option::Option<i32>,
    /// <p>The maximum length of a time to wait for events.</p>
    pub maximum_batching_window_in_seconds: ::std::option::Option<i32>,
    /// <p>The name of the destination queue to consume.</p>
    pub consumer_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The credentials needed to access the resource.</p>
    pub credentials: ::std::option::Option<crate::types::MskAccessCredentials>,
}
impl PipeSourceManagedStreamingKafkaParameters {
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn topic_name(&self) -> &str {
        use std::ops::Deref;
        self.topic_name.deref()
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn starting_position(&self) -> ::std::option::Option<&crate::types::MskStartPosition> {
        self.starting_position.as_ref()
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(&self) -> ::std::option::Option<i32> {
        self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(&self) -> ::std::option::Option<i32> {
        self.maximum_batching_window_in_seconds
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn consumer_group_id(&self) -> ::std::option::Option<&str> {
        self.consumer_group_id.as_deref()
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::MskAccessCredentials> {
        self.credentials.as_ref()
    }
}
impl ::std::fmt::Debug for PipeSourceManagedStreamingKafkaParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceManagedStreamingKafkaParameters");
        formatter.field("topic_name", &"*** Sensitive Data Redacted ***");
        formatter.field("starting_position", &self.starting_position);
        formatter.field("batch_size", &self.batch_size);
        formatter.field("maximum_batching_window_in_seconds", &self.maximum_batching_window_in_seconds);
        formatter.field("consumer_group_id", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials", &self.credentials);
        formatter.finish()
    }
}
impl PipeSourceManagedStreamingKafkaParameters {
    /// Creates a new builder-style object to manufacture [`PipeSourceManagedStreamingKafkaParameters`](crate::types::PipeSourceManagedStreamingKafkaParameters).
    pub fn builder() -> crate::types::builders::PipeSourceManagedStreamingKafkaParametersBuilder {
        crate::types::builders::PipeSourceManagedStreamingKafkaParametersBuilder::default()
    }
}

/// A builder for [`PipeSourceManagedStreamingKafkaParameters`](crate::types::PipeSourceManagedStreamingKafkaParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PipeSourceManagedStreamingKafkaParametersBuilder {
    pub(crate) topic_name: ::std::option::Option<::std::string::String>,
    pub(crate) starting_position: ::std::option::Option<crate::types::MskStartPosition>,
    pub(crate) batch_size: ::std::option::Option<i32>,
    pub(crate) maximum_batching_window_in_seconds: ::std::option::Option<i32>,
    pub(crate) consumer_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) credentials: ::std::option::Option<crate::types::MskAccessCredentials>,
}
impl PipeSourceManagedStreamingKafkaParametersBuilder {
    /// <p>The name of the topic that the pipe will read from.</p>
    /// This field is required.
    pub fn topic_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.topic_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn set_topic_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.topic_name = input;
        self
    }
    /// <p>The name of the topic that the pipe will read from.</p>
    pub fn get_topic_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.topic_name
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn starting_position(mut self, input: crate::types::MskStartPosition) -> Self {
        self.starting_position = ::std::option::Option::Some(input);
        self
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn set_starting_position(mut self, input: ::std::option::Option<crate::types::MskStartPosition>) -> Self {
        self.starting_position = input;
        self
    }
    /// <p>(Streams only) The position in a stream from which to start reading.</p>
    pub fn get_starting_position(&self) -> &::std::option::Option<crate::types::MskStartPosition> {
        &self.starting_position
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(mut self, input: i32) -> Self {
        self.batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn set_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.batch_size = input;
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn get_batch_size(&self) -> &::std::option::Option<i32> {
        &self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(mut self, input: i32) -> Self {
        self.maximum_batching_window_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn set_maximum_batching_window_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_batching_window_in_seconds = input;
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn get_maximum_batching_window_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.maximum_batching_window_in_seconds
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn consumer_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumer_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn set_consumer_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumer_group_id = input;
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn get_consumer_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumer_group_id
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn credentials(mut self, input: crate::types::MskAccessCredentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::MskAccessCredentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::MskAccessCredentials> {
        &self.credentials
    }
    /// Consumes the builder and constructs a [`PipeSourceManagedStreamingKafkaParameters`](crate::types::PipeSourceManagedStreamingKafkaParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`topic_name`](crate::types::builders::PipeSourceManagedStreamingKafkaParametersBuilder::topic_name)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::PipeSourceManagedStreamingKafkaParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PipeSourceManagedStreamingKafkaParameters {
            topic_name: self.topic_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "topic_name",
                    "topic_name was not specified but it is required when building PipeSourceManagedStreamingKafkaParameters",
                )
            })?,
            starting_position: self.starting_position,
            batch_size: self.batch_size,
            maximum_batching_window_in_seconds: self.maximum_batching_window_in_seconds,
            consumer_group_id: self.consumer_group_id,
            credentials: self.credentials,
        })
    }
}
impl ::std::fmt::Debug for PipeSourceManagedStreamingKafkaParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceManagedStreamingKafkaParametersBuilder");
        formatter.field("topic_name", &"*** Sensitive Data Redacted ***");
        formatter.field("starting_position", &self.starting_position);
        formatter.field("batch_size", &self.batch_size);
        formatter.field("maximum_batching_window_in_seconds", &self.maximum_batching_window_in_seconds);
        formatter.field("consumer_group_id", &"*** Sensitive Data Redacted ***");
        formatter.field("credentials", &self.credentials);
        formatter.finish()
    }
}
