// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The overrides that are sent to a container.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchContainerOverrides {
    /// <p>The command to send to the container that overrides the default command from the Docker image or the task definition.</p>
    pub command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub environment: ::std::option::Option<::std::vec::Vec<crate::types::BatchEnvironmentVariable>>,
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub resource_requirements: ::std::option::Option<::std::vec::Vec<crate::types::BatchResourceRequirement>>,
}
impl BatchContainerOverrides {
    /// <p>The command to send to the container that overrides the default command from the Docker image or the task definition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command.is_none()`.
    pub fn command(&self) -> &[::std::string::String] {
        self.command.as_deref().unwrap_or_default()
    }
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.environment.is_none()`.
    pub fn environment(&self) -> &[crate::types::BatchEnvironmentVariable] {
        self.environment.as_deref().unwrap_or_default()
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.resource_requirements.is_none()`.
    pub fn resource_requirements(&self) -> &[crate::types::BatchResourceRequirement] {
        self.resource_requirements.as_deref().unwrap_or_default()
    }
}
impl BatchContainerOverrides {
    /// Creates a new builder-style object to manufacture [`BatchContainerOverrides`](crate::types::BatchContainerOverrides).
    pub fn builder() -> crate::types::builders::BatchContainerOverridesBuilder {
        crate::types::builders::BatchContainerOverridesBuilder::default()
    }
}

/// A builder for [`BatchContainerOverrides`](crate::types::BatchContainerOverrides).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchContainerOverridesBuilder {
    pub(crate) command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) environment: ::std::option::Option<::std::vec::Vec<crate::types::BatchEnvironmentVariable>>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) resource_requirements: ::std::option::Option<::std::vec::Vec<crate::types::BatchResourceRequirement>>,
}
impl BatchContainerOverridesBuilder {
    /// Appends an item to `command`.
    ///
    /// To override the contents of this collection use [`set_command`](Self::set_command).
    ///
    /// <p>The command to send to the container that overrides the default command from the Docker image or the task definition.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.command.unwrap_or_default();
        v.push(input.into());
        self.command = ::std::option::Option::Some(v);
        self
    }
    /// <p>The command to send to the container that overrides the default command from the Docker image or the task definition.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.command = input;
        self
    }
    /// <p>The command to send to the container that overrides the default command from the Docker image or the task definition.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.command
    }
    /// Appends an item to `environment`.
    ///
    /// To override the contents of this collection use [`set_environment`](Self::set_environment).
    ///
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn environment(mut self, input: crate::types::BatchEnvironmentVariable) -> Self {
        let mut v = self.environment.unwrap_or_default();
        v.push(input);
        self.environment = ::std::option::Option::Some(v);
        self
    }
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn set_environment(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchEnvironmentVariable>>) -> Self {
        self.environment = input;
        self
    }
    /// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
    /// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
    /// </note>
    pub fn get_environment(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchEnvironmentVariable>> {
        &self.environment
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type to use for a multi-node parallel job.</p> <note>
    /// <p>This parameter isn't applicable to single-node container jobs or jobs that run on Fargate resources, and shouldn't be provided.</p>
    /// </note>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// Appends an item to `resource_requirements`.
    ///
    /// To override the contents of this collection use [`set_resource_requirements`](Self::set_resource_requirements).
    ///
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn resource_requirements(mut self, input: crate::types::BatchResourceRequirement) -> Self {
        let mut v = self.resource_requirements.unwrap_or_default();
        v.push(input);
        self.resource_requirements = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn set_resource_requirements(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BatchResourceRequirement>>) -> Self {
        self.resource_requirements = input;
        self
    }
    /// <p>The type and amount of resources to assign to a container. This overrides the settings in the job definition. The supported resources include <code>GPU</code>, <code>MEMORY</code>, and <code>VCPU</code>.</p>
    pub fn get_resource_requirements(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BatchResourceRequirement>> {
        &self.resource_requirements
    }
    /// Consumes the builder and constructs a [`BatchContainerOverrides`](crate::types::BatchContainerOverrides).
    pub fn build(self) -> crate::types::BatchContainerOverrides {
        crate::types::BatchContainerOverrides {
            command: self.command,
            environment: self.environment,
            instance_type: self.instance_type,
            resource_requirements: self.resource_requirements,
        }
    }
}
