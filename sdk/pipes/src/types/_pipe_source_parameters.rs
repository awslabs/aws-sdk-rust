// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters required to set up a source for your pipe.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipeSourceParameters {
    /// <p>The collection of event patterns used to filter events. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    #[doc(hidden)]
    pub filter_criteria: std::option::Option<crate::types::FilterCriteria>,
    /// <p>The parameters for using a Kinesis stream as a source.</p>
    #[doc(hidden)]
    pub kinesis_stream_parameters:
        std::option::Option<crate::types::PipeSourceKinesisStreamParameters>,
    /// <p>The parameters for using a DynamoDB stream as a source.</p>
    #[doc(hidden)]
    pub dynamo_db_stream_parameters:
        std::option::Option<crate::types::PipeSourceDynamoDbStreamParameters>,
    /// <p>The parameters for using a Amazon SQS stream as a source.</p>
    #[doc(hidden)]
    pub sqs_queue_parameters: std::option::Option<crate::types::PipeSourceSqsQueueParameters>,
    /// <p>The parameters for using an Active MQ broker as a source.</p>
    #[doc(hidden)]
    pub active_mq_broker_parameters:
        std::option::Option<crate::types::PipeSourceActiveMqBrokerParameters>,
    /// <p>The parameters for using a Rabbit MQ broker as a source.</p>
    #[doc(hidden)]
    pub rabbit_mq_broker_parameters:
        std::option::Option<crate::types::PipeSourceRabbitMqBrokerParameters>,
    /// <p>The parameters for using an MSK stream as a source.</p>
    #[doc(hidden)]
    pub managed_streaming_kafka_parameters:
        std::option::Option<crate::types::PipeSourceManagedStreamingKafkaParameters>,
    /// <p>The parameters for using a self-managed Apache Kafka stream as a source.</p>
    #[doc(hidden)]
    pub self_managed_kafka_parameters:
        std::option::Option<crate::types::PipeSourceSelfManagedKafkaParameters>,
}
impl PipeSourceParameters {
    /// <p>The collection of event patterns used to filter events. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn filter_criteria(&self) -> std::option::Option<&crate::types::FilterCriteria> {
        self.filter_criteria.as_ref()
    }
    /// <p>The parameters for using a Kinesis stream as a source.</p>
    pub fn kinesis_stream_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceKinesisStreamParameters> {
        self.kinesis_stream_parameters.as_ref()
    }
    /// <p>The parameters for using a DynamoDB stream as a source.</p>
    pub fn dynamo_db_stream_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceDynamoDbStreamParameters> {
        self.dynamo_db_stream_parameters.as_ref()
    }
    /// <p>The parameters for using a Amazon SQS stream as a source.</p>
    pub fn sqs_queue_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceSqsQueueParameters> {
        self.sqs_queue_parameters.as_ref()
    }
    /// <p>The parameters for using an Active MQ broker as a source.</p>
    pub fn active_mq_broker_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceActiveMqBrokerParameters> {
        self.active_mq_broker_parameters.as_ref()
    }
    /// <p>The parameters for using a Rabbit MQ broker as a source.</p>
    pub fn rabbit_mq_broker_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceRabbitMqBrokerParameters> {
        self.rabbit_mq_broker_parameters.as_ref()
    }
    /// <p>The parameters for using an MSK stream as a source.</p>
    pub fn managed_streaming_kafka_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceManagedStreamingKafkaParameters> {
        self.managed_streaming_kafka_parameters.as_ref()
    }
    /// <p>The parameters for using a self-managed Apache Kafka stream as a source.</p>
    pub fn self_managed_kafka_parameters(
        &self,
    ) -> std::option::Option<&crate::types::PipeSourceSelfManagedKafkaParameters> {
        self.self_managed_kafka_parameters.as_ref()
    }
}
impl PipeSourceParameters {
    /// Creates a new builder-style object to manufacture [`PipeSourceParameters`](crate::types::PipeSourceParameters).
    pub fn builder() -> crate::types::builders::PipeSourceParametersBuilder {
        crate::types::builders::PipeSourceParametersBuilder::default()
    }
}

/// A builder for [`PipeSourceParameters`](crate::types::PipeSourceParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipeSourceParametersBuilder {
    pub(crate) filter_criteria: std::option::Option<crate::types::FilterCriteria>,
    pub(crate) kinesis_stream_parameters:
        std::option::Option<crate::types::PipeSourceKinesisStreamParameters>,
    pub(crate) dynamo_db_stream_parameters:
        std::option::Option<crate::types::PipeSourceDynamoDbStreamParameters>,
    pub(crate) sqs_queue_parameters:
        std::option::Option<crate::types::PipeSourceSqsQueueParameters>,
    pub(crate) active_mq_broker_parameters:
        std::option::Option<crate::types::PipeSourceActiveMqBrokerParameters>,
    pub(crate) rabbit_mq_broker_parameters:
        std::option::Option<crate::types::PipeSourceRabbitMqBrokerParameters>,
    pub(crate) managed_streaming_kafka_parameters:
        std::option::Option<crate::types::PipeSourceManagedStreamingKafkaParameters>,
    pub(crate) self_managed_kafka_parameters:
        std::option::Option<crate::types::PipeSourceSelfManagedKafkaParameters>,
}
impl PipeSourceParametersBuilder {
    /// <p>The collection of event patterns used to filter events. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn filter_criteria(mut self, input: crate::types::FilterCriteria) -> Self {
        self.filter_criteria = Some(input);
        self
    }
    /// <p>The collection of event patterns used to filter events. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Events and Event Patterns</a> in the <i>Amazon EventBridge User Guide</i>.</p>
    pub fn set_filter_criteria(
        mut self,
        input: std::option::Option<crate::types::FilterCriteria>,
    ) -> Self {
        self.filter_criteria = input;
        self
    }
    /// <p>The parameters for using a Kinesis stream as a source.</p>
    pub fn kinesis_stream_parameters(
        mut self,
        input: crate::types::PipeSourceKinesisStreamParameters,
    ) -> Self {
        self.kinesis_stream_parameters = Some(input);
        self
    }
    /// <p>The parameters for using a Kinesis stream as a source.</p>
    pub fn set_kinesis_stream_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceKinesisStreamParameters>,
    ) -> Self {
        self.kinesis_stream_parameters = input;
        self
    }
    /// <p>The parameters for using a DynamoDB stream as a source.</p>
    pub fn dynamo_db_stream_parameters(
        mut self,
        input: crate::types::PipeSourceDynamoDbStreamParameters,
    ) -> Self {
        self.dynamo_db_stream_parameters = Some(input);
        self
    }
    /// <p>The parameters for using a DynamoDB stream as a source.</p>
    pub fn set_dynamo_db_stream_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceDynamoDbStreamParameters>,
    ) -> Self {
        self.dynamo_db_stream_parameters = input;
        self
    }
    /// <p>The parameters for using a Amazon SQS stream as a source.</p>
    pub fn sqs_queue_parameters(
        mut self,
        input: crate::types::PipeSourceSqsQueueParameters,
    ) -> Self {
        self.sqs_queue_parameters = Some(input);
        self
    }
    /// <p>The parameters for using a Amazon SQS stream as a source.</p>
    pub fn set_sqs_queue_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceSqsQueueParameters>,
    ) -> Self {
        self.sqs_queue_parameters = input;
        self
    }
    /// <p>The parameters for using an Active MQ broker as a source.</p>
    pub fn active_mq_broker_parameters(
        mut self,
        input: crate::types::PipeSourceActiveMqBrokerParameters,
    ) -> Self {
        self.active_mq_broker_parameters = Some(input);
        self
    }
    /// <p>The parameters for using an Active MQ broker as a source.</p>
    pub fn set_active_mq_broker_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceActiveMqBrokerParameters>,
    ) -> Self {
        self.active_mq_broker_parameters = input;
        self
    }
    /// <p>The parameters for using a Rabbit MQ broker as a source.</p>
    pub fn rabbit_mq_broker_parameters(
        mut self,
        input: crate::types::PipeSourceRabbitMqBrokerParameters,
    ) -> Self {
        self.rabbit_mq_broker_parameters = Some(input);
        self
    }
    /// <p>The parameters for using a Rabbit MQ broker as a source.</p>
    pub fn set_rabbit_mq_broker_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceRabbitMqBrokerParameters>,
    ) -> Self {
        self.rabbit_mq_broker_parameters = input;
        self
    }
    /// <p>The parameters for using an MSK stream as a source.</p>
    pub fn managed_streaming_kafka_parameters(
        mut self,
        input: crate::types::PipeSourceManagedStreamingKafkaParameters,
    ) -> Self {
        self.managed_streaming_kafka_parameters = Some(input);
        self
    }
    /// <p>The parameters for using an MSK stream as a source.</p>
    pub fn set_managed_streaming_kafka_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceManagedStreamingKafkaParameters>,
    ) -> Self {
        self.managed_streaming_kafka_parameters = input;
        self
    }
    /// <p>The parameters for using a self-managed Apache Kafka stream as a source.</p>
    pub fn self_managed_kafka_parameters(
        mut self,
        input: crate::types::PipeSourceSelfManagedKafkaParameters,
    ) -> Self {
        self.self_managed_kafka_parameters = Some(input);
        self
    }
    /// <p>The parameters for using a self-managed Apache Kafka stream as a source.</p>
    pub fn set_self_managed_kafka_parameters(
        mut self,
        input: std::option::Option<crate::types::PipeSourceSelfManagedKafkaParameters>,
    ) -> Self {
        self.self_managed_kafka_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`PipeSourceParameters`](crate::types::PipeSourceParameters).
    pub fn build(self) -> crate::types::PipeSourceParameters {
        crate::types::PipeSourceParameters {
            filter_criteria: self.filter_criteria,
            kinesis_stream_parameters: self.kinesis_stream_parameters,
            dynamo_db_stream_parameters: self.dynamo_db_stream_parameters,
            sqs_queue_parameters: self.sqs_queue_parameters,
            active_mq_broker_parameters: self.active_mq_broker_parameters,
            rabbit_mq_broker_parameters: self.rabbit_mq_broker_parameters,
            managed_streaming_kafka_parameters: self.managed_streaming_kafka_parameters,
            self_managed_kafka_parameters: self.self_managed_kafka_parameters,
        }
    }
}
