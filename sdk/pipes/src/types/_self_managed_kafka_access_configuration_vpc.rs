// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure specifies the VPC subnets and security groups for the stream, and whether a public IP address is to be used.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SelfManagedKafkaAccessConfigurationVpc {
    /// <p>Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.</p>
    pub subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.</p>
    pub security_group: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SelfManagedKafkaAccessConfigurationVpc {
    /// <p>Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnets.is_none()`.
    pub fn subnets(&self) -> &[::std::string::String] {
        self.subnets.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group.is_none()`.
    pub fn security_group(&self) -> &[::std::string::String] {
        self.security_group.as_deref().unwrap_or_default()
    }
}
impl SelfManagedKafkaAccessConfigurationVpc {
    /// Creates a new builder-style object to manufacture [`SelfManagedKafkaAccessConfigurationVpc`](crate::types::SelfManagedKafkaAccessConfigurationVpc).
    pub fn builder() -> crate::types::builders::SelfManagedKafkaAccessConfigurationVpcBuilder {
        crate::types::builders::SelfManagedKafkaAccessConfigurationVpcBuilder::default()
    }
}

/// A builder for [`SelfManagedKafkaAccessConfigurationVpc`](crate::types::SelfManagedKafkaAccessConfigurationVpc).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SelfManagedKafkaAccessConfigurationVpcBuilder {
    pub(crate) subnets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SelfManagedKafkaAccessConfigurationVpcBuilder {
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.</p>
    pub fn subnets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input.into());
        self.subnets = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.</p>
    pub fn set_subnets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnets = input;
        self
    }
    /// <p>Specifies the subnets associated with the stream. These subnets must all be in the same VPC. You can specify as many as 16 subnets.</p>
    pub fn get_subnets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnets
    }
    /// Appends an item to `security_group`.
    ///
    /// To override the contents of this collection use [`set_security_group`](Self::set_security_group).
    ///
    /// <p>Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.</p>
    pub fn security_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group.unwrap_or_default();
        v.push(input.into());
        self.security_group = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.</p>
    pub fn set_security_group(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group = input;
        self
    }
    /// <p>Specifies the security groups associated with the stream. These security groups must all be in the same VPC. You can specify as many as five security groups. If you do not specify a security group, the default security group for the VPC is used.</p>
    pub fn get_security_group(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group
    }
    /// Consumes the builder and constructs a [`SelfManagedKafkaAccessConfigurationVpc`](crate::types::SelfManagedKafkaAccessConfigurationVpc).
    pub fn build(self) -> crate::types::SelfManagedKafkaAccessConfigurationVpc {
        crate::types::SelfManagedKafkaAccessConfigurationVpc {
            subnets: self.subnets,
            security_group: self.security_group,
        }
    }
}
