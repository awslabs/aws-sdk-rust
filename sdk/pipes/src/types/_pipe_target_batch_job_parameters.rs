// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using an Batch job as a target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PipeTargetBatchJobParameters {
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.</p>
    #[doc(hidden)]
    pub job_definition: std::option::Option<std::string::String>,
    /// <p>The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.</p>
    #[doc(hidden)]
    pub array_properties: std::option::Option<crate::types::BatchArrayProperties>,
    /// <p>The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.</p>
    #[doc(hidden)]
    pub retry_strategy: std::option::Option<crate::types::BatchRetryStrategy>,
    /// <p>The overrides that are sent to a container.</p>
    #[doc(hidden)]
    pub container_overrides: std::option::Option<crate::types::BatchContainerOverrides>,
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.</p>
    #[doc(hidden)]
    pub depends_on: std::option::Option<std::vec::Vec<crate::types::BatchJobDependency>>,
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.</p>
    #[doc(hidden)]
    pub parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PipeTargetBatchJobParameters {
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.</p>
    pub fn job_definition(&self) -> std::option::Option<&str> {
        self.job_definition.as_deref()
    }
    /// <p>The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.</p>
    pub fn array_properties(&self) -> std::option::Option<&crate::types::BatchArrayProperties> {
        self.array_properties.as_ref()
    }
    /// <p>The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.</p>
    pub fn retry_strategy(&self) -> std::option::Option<&crate::types::BatchRetryStrategy> {
        self.retry_strategy.as_ref()
    }
    /// <p>The overrides that are sent to a container.</p>
    pub fn container_overrides(
        &self,
    ) -> std::option::Option<&crate::types::BatchContainerOverrides> {
        self.container_overrides.as_ref()
    }
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.</p>
    pub fn depends_on(&self) -> std::option::Option<&[crate::types::BatchJobDependency]> {
        self.depends_on.as_deref()
    }
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.parameters.as_ref()
    }
}
impl PipeTargetBatchJobParameters {
    /// Creates a new builder-style object to manufacture [`PipeTargetBatchJobParameters`](crate::types::PipeTargetBatchJobParameters).
    pub fn builder() -> crate::types::builders::PipeTargetBatchJobParametersBuilder {
        crate::types::builders::PipeTargetBatchJobParametersBuilder::default()
    }
}

/// A builder for [`PipeTargetBatchJobParameters`](crate::types::PipeTargetBatchJobParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PipeTargetBatchJobParametersBuilder {
    pub(crate) job_definition: std::option::Option<std::string::String>,
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) array_properties: std::option::Option<crate::types::BatchArrayProperties>,
    pub(crate) retry_strategy: std::option::Option<crate::types::BatchRetryStrategy>,
    pub(crate) container_overrides: std::option::Option<crate::types::BatchContainerOverrides>,
    pub(crate) depends_on: std::option::Option<std::vec::Vec<crate::types::BatchJobDependency>>,
    pub(crate) parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PipeTargetBatchJobParametersBuilder {
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.</p>
    pub fn job_definition(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_definition = Some(input.into());
        self
    }
    /// <p>The job definition used by this job. This value can be one of <code>name</code>, <code>name:revision</code>, or the Amazon Resource Name (ARN) for the job definition. If name is specified without a revision then the latest active revision is used.</p>
    pub fn set_job_definition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_definition = input;
        self
    }
    /// <p>The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The name of the job. It can be up to 128 letters long. The first character must be alphanumeric, can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.</p>
    pub fn array_properties(mut self, input: crate::types::BatchArrayProperties) -> Self {
        self.array_properties = Some(input);
        self
    }
    /// <p>The array properties for the submitted job, such as the size of the array. The array size can be between 2 and 10,000. If you specify array properties for a job, it becomes an array job. This parameter is used only if the target is an Batch job.</p>
    pub fn set_array_properties(
        mut self,
        input: std::option::Option<crate::types::BatchArrayProperties>,
    ) -> Self {
        self.array_properties = input;
        self
    }
    /// <p>The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.</p>
    pub fn retry_strategy(mut self, input: crate::types::BatchRetryStrategy) -> Self {
        self.retry_strategy = Some(input);
        self
    }
    /// <p>The retry strategy to use for failed jobs. When a retry strategy is specified here, it overrides the retry strategy defined in the job definition.</p>
    pub fn set_retry_strategy(
        mut self,
        input: std::option::Option<crate::types::BatchRetryStrategy>,
    ) -> Self {
        self.retry_strategy = input;
        self
    }
    /// <p>The overrides that are sent to a container.</p>
    pub fn container_overrides(mut self, input: crate::types::BatchContainerOverrides) -> Self {
        self.container_overrides = Some(input);
        self
    }
    /// <p>The overrides that are sent to a container.</p>
    pub fn set_container_overrides(
        mut self,
        input: std::option::Option<crate::types::BatchContainerOverrides>,
    ) -> Self {
        self.container_overrides = input;
        self
    }
    /// Appends an item to `depends_on`.
    ///
    /// To override the contents of this collection use [`set_depends_on`](Self::set_depends_on).
    ///
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.</p>
    pub fn depends_on(mut self, input: crate::types::BatchJobDependency) -> Self {
        let mut v = self.depends_on.unwrap_or_default();
        v.push(input);
        self.depends_on = Some(v);
        self
    }
    /// <p>A list of dependencies for the job. A job can depend upon a maximum of 20 jobs. You can specify a <code>SEQUENTIAL</code> type dependency without specifying a job ID for array jobs so that each child array job completes sequentially, starting at index 0. You can also specify an <code>N_TO_N</code> type dependency with a job ID for array jobs. In that case, each index child of this job must wait for the corresponding index child of each dependency to complete before it can begin.</p>
    pub fn set_depends_on(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchJobDependency>>,
    ) -> Self {
        self.depends_on = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.parameters = Some(hash_map);
        self
    }
    /// <p>Additional parameters passed to the job that replace parameter substitution placeholders that are set in the job definition. Parameters are specified as a key and value pair mapping. Parameters included here override any corresponding parameter defaults from the job definition.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`PipeTargetBatchJobParameters`](crate::types::PipeTargetBatchJobParameters).
    pub fn build(self) -> crate::types::PipeTargetBatchJobParameters {
        crate::types::PipeTargetBatchJobParameters {
            job_definition: self.job_definition,
            job_name: self.job_name,
            array_properties: self.array_properties,
            retry_strategy: self.retry_strategy,
            container_overrides: self.container_overrides,
            depends_on: self.depends_on,
            parameters: self.parameters,
        }
    }
}
