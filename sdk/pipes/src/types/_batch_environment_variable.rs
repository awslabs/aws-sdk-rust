// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition.</p> <note>
/// <p>Environment variables cannot start with "<code>Batch</code>". This naming convention is reserved for variables that Batch sets.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchEnvironmentVariable {
    /// <p>The name of the key-value pair. For environment variables, this is the name of the environment variable.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The value of the key-value pair. For environment variables, this is the value of the environment variable.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl BatchEnvironmentVariable {
    /// <p>The name of the key-value pair. For environment variables, this is the name of the environment variable.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The value of the key-value pair. For environment variables, this is the value of the environment variable.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl BatchEnvironmentVariable {
    /// Creates a new builder-style object to manufacture [`BatchEnvironmentVariable`](crate::types::BatchEnvironmentVariable).
    pub fn builder() -> crate::types::builders::BatchEnvironmentVariableBuilder {
        crate::types::builders::BatchEnvironmentVariableBuilder::default()
    }
}

/// A builder for [`BatchEnvironmentVariable`](crate::types::BatchEnvironmentVariable).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchEnvironmentVariableBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl BatchEnvironmentVariableBuilder {
    /// <p>The name of the key-value pair. For environment variables, this is the name of the environment variable.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the key-value pair. For environment variables, this is the name of the environment variable.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the key-value pair. For environment variables, this is the value of the environment variable.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the key-value pair. For environment variables, this is the value of the environment variable.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchEnvironmentVariable`](crate::types::BatchEnvironmentVariable).
    pub fn build(self) -> crate::types::BatchEnvironmentVariable {
        crate::types::BatchEnvironmentVariable {
            name: self.name,
            value: self.value,
        }
    }
}
