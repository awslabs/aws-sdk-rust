// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a capacity provider strategy. To learn more, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CapacityProviderStrategyItem.html">CapacityProviderStrategyItem</a> in the Amazon ECS API Reference.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CapacityProviderStrategyItem {
    /// <p>The short name of the capacity provider.</p>
    #[doc(hidden)]
    pub capacity_provider: std::option::Option<std::string::String>,
    /// <p>The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.</p>
    #[doc(hidden)]
    pub weight: i32,
    /// <p>The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. </p>
    #[doc(hidden)]
    pub base: i32,
}
impl CapacityProviderStrategyItem {
    /// <p>The short name of the capacity provider.</p>
    pub fn capacity_provider(&self) -> std::option::Option<&str> {
        self.capacity_provider.as_deref()
    }
    /// <p>The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.</p>
    pub fn weight(&self) -> i32 {
        self.weight
    }
    /// <p>The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. </p>
    pub fn base(&self) -> i32 {
        self.base
    }
}
impl std::fmt::Debug for CapacityProviderStrategyItem {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CapacityProviderStrategyItem");
        formatter.field("capacity_provider", &"*** Sensitive Data Redacted ***");
        formatter.field("weight", &self.weight);
        formatter.field("base", &self.base);
        formatter.finish()
    }
}
impl CapacityProviderStrategyItem {
    /// Creates a new builder-style object to manufacture [`CapacityProviderStrategyItem`](crate::types::CapacityProviderStrategyItem).
    pub fn builder() -> crate::types::builders::CapacityProviderStrategyItemBuilder {
        crate::types::builders::CapacityProviderStrategyItemBuilder::default()
    }
}

/// A builder for [`CapacityProviderStrategyItem`](crate::types::CapacityProviderStrategyItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CapacityProviderStrategyItemBuilder {
    pub(crate) capacity_provider: std::option::Option<std::string::String>,
    pub(crate) weight: std::option::Option<i32>,
    pub(crate) base: std::option::Option<i32>,
}
impl CapacityProviderStrategyItemBuilder {
    /// <p>The short name of the capacity provider.</p>
    pub fn capacity_provider(mut self, input: impl Into<std::string::String>) -> Self {
        self.capacity_provider = Some(input.into());
        self
    }
    /// <p>The short name of the capacity provider.</p>
    pub fn set_capacity_provider(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.capacity_provider = input;
        self
    }
    /// <p>The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.</p>
    pub fn weight(mut self, input: i32) -> Self {
        self.weight = Some(input);
        self
    }
    /// <p>The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.</p>
    pub fn set_weight(mut self, input: std::option::Option<i32>) -> Self {
        self.weight = input;
        self
    }
    /// <p>The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. </p>
    pub fn base(mut self, input: i32) -> Self {
        self.base = Some(input);
        self
    }
    /// <p>The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used. </p>
    pub fn set_base(mut self, input: std::option::Option<i32>) -> Self {
        self.base = input;
        self
    }
    /// Consumes the builder and constructs a [`CapacityProviderStrategyItem`](crate::types::CapacityProviderStrategyItem).
    pub fn build(self) -> crate::types::CapacityProviderStrategyItem {
        crate::types::CapacityProviderStrategyItem {
            capacity_provider: self.capacity_provider,
            weight: self.weight.unwrap_or_default(),
            base: self.base.unwrap_or_default(),
        }
    }
}
impl std::fmt::Debug for CapacityProviderStrategyItemBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CapacityProviderStrategyItemBuilder");
        formatter.field("capacity_provider", &"*** Sensitive Data Redacted ***");
        formatter.field("weight", &self.weight);
        formatter.field("base", &self.base);
        formatter.finish()
    }
}
