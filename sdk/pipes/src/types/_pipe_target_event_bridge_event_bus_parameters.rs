// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using an EventBridge event bus as a target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PipeTargetEventBridgeEventBusParameters {
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p> <important>
    /// <p>When using Java, you must include <code>auth-crt</code> on the class path.</p>
    /// </important>
    #[doc(hidden)]
    pub endpoint_id: std::option::Option<std::string::String>,
    /// <p>A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.</p>
    #[doc(hidden)]
    pub detail_type: std::option::Option<std::string::String>,
    /// <p>The source of the event.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.</p>
    #[doc(hidden)]
    pub resources: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time stamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>. If no time stamp is provided, the time stamp of the <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html">PutEvents</a> call is used.</p>
    #[doc(hidden)]
    pub time: std::option::Option<std::string::String>,
}
impl PipeTargetEventBridgeEventBusParameters {
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p> <important>
    /// <p>When using Java, you must include <code>auth-crt</code> on the class path.</p>
    /// </important>
    pub fn endpoint_id(&self) -> std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.</p>
    pub fn detail_type(&self) -> std::option::Option<&str> {
        self.detail_type.as_deref()
    }
    /// <p>The source of the event.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.</p>
    pub fn resources(&self) -> std::option::Option<&[std::string::String]> {
        self.resources.as_deref()
    }
    /// <p>The time stamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>. If no time stamp is provided, the time stamp of the <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html">PutEvents</a> call is used.</p>
    pub fn time(&self) -> std::option::Option<&str> {
        self.time.as_deref()
    }
}
impl std::fmt::Debug for PipeTargetEventBridgeEventBusParameters {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PipeTargetEventBridgeEventBusParameters");
        formatter.field("endpoint_id", &"*** Sensitive Data Redacted ***");
        formatter.field("detail_type", &"*** Sensitive Data Redacted ***");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("resources", &self.resources);
        formatter.field("time", &self.time);
        formatter.finish()
    }
}
impl PipeTargetEventBridgeEventBusParameters {
    /// Creates a new builder-style object to manufacture [`PipeTargetEventBridgeEventBusParameters`](crate::types::PipeTargetEventBridgeEventBusParameters).
    pub fn builder() -> crate::types::builders::PipeTargetEventBridgeEventBusParametersBuilder {
        crate::types::builders::PipeTargetEventBridgeEventBusParametersBuilder::default()
    }
}

/// A builder for [`PipeTargetEventBridgeEventBusParameters`](crate::types::PipeTargetEventBridgeEventBusParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PipeTargetEventBridgeEventBusParametersBuilder {
    pub(crate) endpoint_id: std::option::Option<std::string::String>,
    pub(crate) detail_type: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) resources: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) time: std::option::Option<std::string::String>,
}
impl PipeTargetEventBridgeEventBusParametersBuilder {
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p> <important>
    /// <p>When using Java, you must include <code>auth-crt</code> on the class path.</p>
    /// </important>
    pub fn endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint_id = Some(input.into());
        self
    }
    /// <p>The URL subdomain of the endpoint. For example, if the URL for Endpoint is https://abcde.veo.endpoints.event.amazonaws.com, then the EndpointId is <code>abcde.veo</code>.</p> <important>
    /// <p>When using Java, you must include <code>auth-crt</code> on the class path.</p>
    /// </important>
    pub fn set_endpoint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.</p>
    pub fn detail_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.detail_type = Some(input.into());
        self
    }
    /// <p>A free-form string, with a maximum of 128 characters, used to decide what fields to expect in the event detail.</p>
    pub fn set_detail_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.detail_type = input;
        self
    }
    /// <p>The source of the event.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The source of the event.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// Appends an item to `resources`.
    ///
    /// To override the contents of this collection use [`set_resources`](Self::set_resources).
    ///
    /// <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.</p>
    pub fn resources(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resources.unwrap_or_default();
        v.push(input.into());
        self.resources = Some(v);
        self
    }
    /// <p>Amazon Web Services resources, identified by Amazon Resource Name (ARN), which the event primarily concerns. Any number, including zero, may be present.</p>
    pub fn set_resources(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resources = input;
        self
    }
    /// <p>The time stamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>. If no time stamp is provided, the time stamp of the <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html">PutEvents</a> call is used.</p>
    pub fn time(mut self, input: impl Into<std::string::String>) -> Self {
        self.time = Some(input.into());
        self
    }
    /// <p>The time stamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>. If no time stamp is provided, the time stamp of the <a href="https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html">PutEvents</a> call is used.</p>
    pub fn set_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.time = input;
        self
    }
    /// Consumes the builder and constructs a [`PipeTargetEventBridgeEventBusParameters`](crate::types::PipeTargetEventBridgeEventBusParameters).
    pub fn build(self) -> crate::types::PipeTargetEventBridgeEventBusParameters {
        crate::types::PipeTargetEventBridgeEventBusParameters {
            endpoint_id: self.endpoint_id,
            detail_type: self.detail_type,
            source: self.source,
            resources: self.resources,
            time: self.time,
        }
    }
}
impl std::fmt::Debug for PipeTargetEventBridgeEventBusParametersBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PipeTargetEventBridgeEventBusParametersBuilder");
        formatter.field("endpoint_id", &"*** Sensitive Data Redacted ***");
        formatter.field("detail_type", &"*** Sensitive Data Redacted ***");
        formatter.field("source", &"*** Sensitive Data Redacted ***");
        formatter.field("resources", &self.resources);
        formatter.field("time", &self.time);
        formatter.finish()
    }
}
