// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The parameters for using an Active MQ broker as a source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PipeSourceActiveMqBrokerParameters {
    /// <p>The credentials needed to access the resource.</p>
    pub credentials: ::std::option::Option<crate::types::MqBrokerAccessCredentials>,
    /// <p>The name of the destination queue to consume.</p>
    pub queue_name: ::std::string::String,
    /// <p>The maximum number of records to include in each batch.</p>
    pub batch_size: ::std::option::Option<i32>,
    /// <p>The maximum length of a time to wait for events.</p>
    pub maximum_batching_window_in_seconds: ::std::option::Option<i32>,
}
impl PipeSourceActiveMqBrokerParameters {
    /// <p>The credentials needed to access the resource.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::MqBrokerAccessCredentials> {
        self.credentials.as_ref()
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn queue_name(&self) -> &str {
        use std::ops::Deref;
        self.queue_name.deref()
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(&self) -> ::std::option::Option<i32> {
        self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(&self) -> ::std::option::Option<i32> {
        self.maximum_batching_window_in_seconds
    }
}
impl ::std::fmt::Debug for PipeSourceActiveMqBrokerParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceActiveMqBrokerParameters");
        formatter.field("credentials", &self.credentials);
        formatter.field("queue_name", &"*** Sensitive Data Redacted ***");
        formatter.field("batch_size", &self.batch_size);
        formatter.field("maximum_batching_window_in_seconds", &self.maximum_batching_window_in_seconds);
        formatter.finish()
    }
}
impl PipeSourceActiveMqBrokerParameters {
    /// Creates a new builder-style object to manufacture [`PipeSourceActiveMqBrokerParameters`](crate::types::PipeSourceActiveMqBrokerParameters).
    pub fn builder() -> crate::types::builders::PipeSourceActiveMqBrokerParametersBuilder {
        crate::types::builders::PipeSourceActiveMqBrokerParametersBuilder::default()
    }
}

/// A builder for [`PipeSourceActiveMqBrokerParameters`](crate::types::PipeSourceActiveMqBrokerParameters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PipeSourceActiveMqBrokerParametersBuilder {
    pub(crate) credentials: ::std::option::Option<crate::types::MqBrokerAccessCredentials>,
    pub(crate) queue_name: ::std::option::Option<::std::string::String>,
    pub(crate) batch_size: ::std::option::Option<i32>,
    pub(crate) maximum_batching_window_in_seconds: ::std::option::Option<i32>,
}
impl PipeSourceActiveMqBrokerParametersBuilder {
    /// <p>The credentials needed to access the resource.</p>
    /// This field is required.
    pub fn credentials(mut self, input: crate::types::MqBrokerAccessCredentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::MqBrokerAccessCredentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>The credentials needed to access the resource.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::MqBrokerAccessCredentials> {
        &self.credentials
    }
    /// <p>The name of the destination queue to consume.</p>
    /// This field is required.
    pub fn queue_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.queue_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn set_queue_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.queue_name = input;
        self
    }
    /// <p>The name of the destination queue to consume.</p>
    pub fn get_queue_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.queue_name
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn batch_size(mut self, input: i32) -> Self {
        self.batch_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn set_batch_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.batch_size = input;
        self
    }
    /// <p>The maximum number of records to include in each batch.</p>
    pub fn get_batch_size(&self) -> &::std::option::Option<i32> {
        &self.batch_size
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn maximum_batching_window_in_seconds(mut self, input: i32) -> Self {
        self.maximum_batching_window_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn set_maximum_batching_window_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.maximum_batching_window_in_seconds = input;
        self
    }
    /// <p>The maximum length of a time to wait for events.</p>
    pub fn get_maximum_batching_window_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.maximum_batching_window_in_seconds
    }
    /// Consumes the builder and constructs a [`PipeSourceActiveMqBrokerParameters`](crate::types::PipeSourceActiveMqBrokerParameters).
    /// This method will fail if any of the following fields are not set:
    /// - [`queue_name`](crate::types::builders::PipeSourceActiveMqBrokerParametersBuilder::queue_name)
    pub fn build(self) -> ::std::result::Result<crate::types::PipeSourceActiveMqBrokerParameters, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PipeSourceActiveMqBrokerParameters {
            credentials: self.credentials,
            queue_name: self.queue_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "queue_name",
                    "queue_name was not specified but it is required when building PipeSourceActiveMqBrokerParameters",
                )
            })?,
            batch_size: self.batch_size,
            maximum_batching_window_in_seconds: self.maximum_batching_window_in_seconds,
        })
    }
}
impl ::std::fmt::Debug for PipeSourceActiveMqBrokerParametersBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PipeSourceActiveMqBrokerParametersBuilder");
        formatter.field("credentials", &self.credentials);
        formatter.field("queue_name", &"*** Sensitive Data Redacted ***");
        formatter.field("batch_size", &self.batch_size);
        formatter.field("maximum_batching_window_in_seconds", &self.maximum_batching_window_in_seconds);
        formatter.finish()
    }
}
