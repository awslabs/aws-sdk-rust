// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateResourceOutput {}
impl std::fmt::Debug for UpdateResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateResourceOutput");
        formatter.finish()
    }
}
/// See [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
pub mod update_resource_output {
    /// A builder for [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
        pub fn build(self) -> crate::output::UpdateResourceOutput {
            crate::output::UpdateResourceOutput {}
        }
    }
}
impl UpdateResourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceOutput`](crate::output::UpdateResourceOutput)
    pub fn builder() -> crate::output::update_resource_output::Builder {
        crate::output::update_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePrimaryEmailAddressOutput {}
impl std::fmt::Debug for UpdatePrimaryEmailAddressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePrimaryEmailAddressOutput");
        formatter.finish()
    }
}
/// See [`UpdatePrimaryEmailAddressOutput`](crate::output::UpdatePrimaryEmailAddressOutput)
pub mod update_primary_email_address_output {
    /// A builder for [`UpdatePrimaryEmailAddressOutput`](crate::output::UpdatePrimaryEmailAddressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdatePrimaryEmailAddressOutput`](crate::output::UpdatePrimaryEmailAddressOutput)
        pub fn build(self) -> crate::output::UpdatePrimaryEmailAddressOutput {
            crate::output::UpdatePrimaryEmailAddressOutput {}
        }
    }
}
impl UpdatePrimaryEmailAddressOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePrimaryEmailAddressOutput`](crate::output::UpdatePrimaryEmailAddressOutput)
    pub fn builder() -> crate::output::update_primary_email_address_output::Builder {
        crate::output::update_primary_email_address_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateMobileDeviceAccessRuleOutput {}
impl std::fmt::Debug for UpdateMobileDeviceAccessRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMobileDeviceAccessRuleOutput");
        formatter.finish()
    }
}
/// See [`UpdateMobileDeviceAccessRuleOutput`](crate::output::UpdateMobileDeviceAccessRuleOutput)
pub mod update_mobile_device_access_rule_output {
    /// A builder for [`UpdateMobileDeviceAccessRuleOutput`](crate::output::UpdateMobileDeviceAccessRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateMobileDeviceAccessRuleOutput`](crate::output::UpdateMobileDeviceAccessRuleOutput)
        pub fn build(self) -> crate::output::UpdateMobileDeviceAccessRuleOutput {
            crate::output::UpdateMobileDeviceAccessRuleOutput {}
        }
    }
}
impl UpdateMobileDeviceAccessRuleOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMobileDeviceAccessRuleOutput`](crate::output::UpdateMobileDeviceAccessRuleOutput)
    pub fn builder() -> crate::output::update_mobile_device_access_rule_output::Builder {
        crate::output::update_mobile_device_access_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateMailboxQuotaOutput {}
impl std::fmt::Debug for UpdateMailboxQuotaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMailboxQuotaOutput");
        formatter.finish()
    }
}
/// See [`UpdateMailboxQuotaOutput`](crate::output::UpdateMailboxQuotaOutput)
pub mod update_mailbox_quota_output {
    /// A builder for [`UpdateMailboxQuotaOutput`](crate::output::UpdateMailboxQuotaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateMailboxQuotaOutput`](crate::output::UpdateMailboxQuotaOutput)
        pub fn build(self) -> crate::output::UpdateMailboxQuotaOutput {
            crate::output::UpdateMailboxQuotaOutput {}
        }
    }
}
impl UpdateMailboxQuotaOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMailboxQuotaOutput`](crate::output::UpdateMailboxQuotaOutput)
    pub fn builder() -> crate::output::update_mailbox_quota_output::Builder {
        crate::output::update_mailbox_quota_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDefaultMailDomainOutput {}
impl std::fmt::Debug for UpdateDefaultMailDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDefaultMailDomainOutput");
        formatter.finish()
    }
}
/// See [`UpdateDefaultMailDomainOutput`](crate::output::UpdateDefaultMailDomainOutput)
pub mod update_default_mail_domain_output {
    /// A builder for [`UpdateDefaultMailDomainOutput`](crate::output::UpdateDefaultMailDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDefaultMailDomainOutput`](crate::output::UpdateDefaultMailDomainOutput)
        pub fn build(self) -> crate::output::UpdateDefaultMailDomainOutput {
            crate::output::UpdateDefaultMailDomainOutput {}
        }
    }
}
impl UpdateDefaultMailDomainOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDefaultMailDomainOutput`](crate::output::UpdateDefaultMailDomainOutput)
    pub fn builder() -> crate::output::update_default_mail_domain_output::Builder {
        crate::output::update_default_mail_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartMailboxExportJobOutput {
    /// <p>The job ID.</p>
    pub job_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartMailboxExportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartMailboxExportJobOutput");
        formatter.field("job_id", &self.job_id);
        formatter.finish()
    }
}
/// See [`StartMailboxExportJobOutput`](crate::output::StartMailboxExportJobOutput)
pub mod start_mailbox_export_job_output {
    /// A builder for [`StartMailboxExportJobOutput`](crate::output::StartMailboxExportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The job ID.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The job ID.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartMailboxExportJobOutput`](crate::output::StartMailboxExportJobOutput)
        pub fn build(self) -> crate::output::StartMailboxExportJobOutput {
            crate::output::StartMailboxExportJobOutput {
                job_id: self.job_id,
            }
        }
    }
}
impl StartMailboxExportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartMailboxExportJobOutput`](crate::output::StartMailboxExportJobOutput)
    pub fn builder() -> crate::output::start_mailbox_export_job_output::Builder {
        crate::output::start_mailbox_export_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetPasswordOutput {}
impl std::fmt::Debug for ResetPasswordOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetPasswordOutput");
        formatter.finish()
    }
}
/// See [`ResetPasswordOutput`](crate::output::ResetPasswordOutput)
pub mod reset_password_output {
    /// A builder for [`ResetPasswordOutput`](crate::output::ResetPasswordOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ResetPasswordOutput`](crate::output::ResetPasswordOutput)
        pub fn build(self) -> crate::output::ResetPasswordOutput {
            crate::output::ResetPasswordOutput {}
        }
    }
}
impl ResetPasswordOutput {
    /// Creates a new builder-style object to manufacture [`ResetPasswordOutput`](crate::output::ResetPasswordOutput)
    pub fn builder() -> crate::output::reset_password_output::Builder {
        crate::output::reset_password_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterToWorkMailOutput {}
impl std::fmt::Debug for RegisterToWorkMailOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterToWorkMailOutput");
        formatter.finish()
    }
}
/// See [`RegisterToWorkMailOutput`](crate::output::RegisterToWorkMailOutput)
pub mod register_to_work_mail_output {
    /// A builder for [`RegisterToWorkMailOutput`](crate::output::RegisterToWorkMailOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RegisterToWorkMailOutput`](crate::output::RegisterToWorkMailOutput)
        pub fn build(self) -> crate::output::RegisterToWorkMailOutput {
            crate::output::RegisterToWorkMailOutput {}
        }
    }
}
impl RegisterToWorkMailOutput {
    /// Creates a new builder-style object to manufacture [`RegisterToWorkMailOutput`](crate::output::RegisterToWorkMailOutput)
    pub fn builder() -> crate::output::register_to_work_mail_output::Builder {
        crate::output::register_to_work_mail_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterMailDomainOutput {}
impl std::fmt::Debug for RegisterMailDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterMailDomainOutput");
        formatter.finish()
    }
}
/// See [`RegisterMailDomainOutput`](crate::output::RegisterMailDomainOutput)
pub mod register_mail_domain_output {
    /// A builder for [`RegisterMailDomainOutput`](crate::output::RegisterMailDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RegisterMailDomainOutput`](crate::output::RegisterMailDomainOutput)
        pub fn build(self) -> crate::output::RegisterMailDomainOutput {
            crate::output::RegisterMailDomainOutput {}
        }
    }
}
impl RegisterMailDomainOutput {
    /// Creates a new builder-style object to manufacture [`RegisterMailDomainOutput`](crate::output::RegisterMailDomainOutput)
    pub fn builder() -> crate::output::register_mail_domain_output::Builder {
        crate::output::register_mail_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutRetentionPolicyOutput {}
impl std::fmt::Debug for PutRetentionPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutRetentionPolicyOutput");
        formatter.finish()
    }
}
/// See [`PutRetentionPolicyOutput`](crate::output::PutRetentionPolicyOutput)
pub mod put_retention_policy_output {
    /// A builder for [`PutRetentionPolicyOutput`](crate::output::PutRetentionPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutRetentionPolicyOutput`](crate::output::PutRetentionPolicyOutput)
        pub fn build(self) -> crate::output::PutRetentionPolicyOutput {
            crate::output::PutRetentionPolicyOutput {}
        }
    }
}
impl PutRetentionPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutRetentionPolicyOutput`](crate::output::PutRetentionPolicyOutput)
    pub fn builder() -> crate::output::put_retention_policy_output::Builder {
        crate::output::put_retention_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMobileDeviceAccessOverrideOutput {}
impl std::fmt::Debug for PutMobileDeviceAccessOverrideOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMobileDeviceAccessOverrideOutput");
        formatter.finish()
    }
}
/// See [`PutMobileDeviceAccessOverrideOutput`](crate::output::PutMobileDeviceAccessOverrideOutput)
pub mod put_mobile_device_access_override_output {
    /// A builder for [`PutMobileDeviceAccessOverrideOutput`](crate::output::PutMobileDeviceAccessOverrideOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutMobileDeviceAccessOverrideOutput`](crate::output::PutMobileDeviceAccessOverrideOutput)
        pub fn build(self) -> crate::output::PutMobileDeviceAccessOverrideOutput {
            crate::output::PutMobileDeviceAccessOverrideOutput {}
        }
    }
}
impl PutMobileDeviceAccessOverrideOutput {
    /// Creates a new builder-style object to manufacture [`PutMobileDeviceAccessOverrideOutput`](crate::output::PutMobileDeviceAccessOverrideOutput)
    pub fn builder() -> crate::output::put_mobile_device_access_override_output::Builder {
        crate::output::put_mobile_device_access_override_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMailboxPermissionsOutput {}
impl std::fmt::Debug for PutMailboxPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMailboxPermissionsOutput");
        formatter.finish()
    }
}
/// See [`PutMailboxPermissionsOutput`](crate::output::PutMailboxPermissionsOutput)
pub mod put_mailbox_permissions_output {
    /// A builder for [`PutMailboxPermissionsOutput`](crate::output::PutMailboxPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutMailboxPermissionsOutput`](crate::output::PutMailboxPermissionsOutput)
        pub fn build(self) -> crate::output::PutMailboxPermissionsOutput {
            crate::output::PutMailboxPermissionsOutput {}
        }
    }
}
impl PutMailboxPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`PutMailboxPermissionsOutput`](crate::output::PutMailboxPermissionsOutput)
    pub fn builder() -> crate::output::put_mailbox_permissions_output::Builder {
        crate::output::put_mailbox_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutInboundDmarcSettingsOutput {}
impl std::fmt::Debug for PutInboundDmarcSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutInboundDmarcSettingsOutput");
        formatter.finish()
    }
}
/// See [`PutInboundDmarcSettingsOutput`](crate::output::PutInboundDmarcSettingsOutput)
pub mod put_inbound_dmarc_settings_output {
    /// A builder for [`PutInboundDmarcSettingsOutput`](crate::output::PutInboundDmarcSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutInboundDmarcSettingsOutput`](crate::output::PutInboundDmarcSettingsOutput)
        pub fn build(self) -> crate::output::PutInboundDmarcSettingsOutput {
            crate::output::PutInboundDmarcSettingsOutput {}
        }
    }
}
impl PutInboundDmarcSettingsOutput {
    /// Creates a new builder-style object to manufacture [`PutInboundDmarcSettingsOutput`](crate::output::PutInboundDmarcSettingsOutput)
    pub fn builder() -> crate::output::put_inbound_dmarc_settings_output::Builder {
        crate::output::put_inbound_dmarc_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAccessControlRuleOutput {}
impl std::fmt::Debug for PutAccessControlRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAccessControlRuleOutput");
        formatter.finish()
    }
}
/// See [`PutAccessControlRuleOutput`](crate::output::PutAccessControlRuleOutput)
pub mod put_access_control_rule_output {
    /// A builder for [`PutAccessControlRuleOutput`](crate::output::PutAccessControlRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutAccessControlRuleOutput`](crate::output::PutAccessControlRuleOutput)
        pub fn build(self) -> crate::output::PutAccessControlRuleOutput {
            crate::output::PutAccessControlRuleOutput {}
        }
    }
}
impl PutAccessControlRuleOutput {
    /// Creates a new builder-style object to manufacture [`PutAccessControlRuleOutput`](crate::output::PutAccessControlRuleOutput)
    pub fn builder() -> crate::output::put_access_control_rule_output::Builder {
        crate::output::put_access_control_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUsersOutput {
    /// <p>The overview of users for an organization.</p>
    pub users: std::option::Option<std::vec::Vec<crate::model::User>>,
    /// <p> The token to use to retrieve the next page of results. This value is `null` when
    /// there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListUsersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUsersOutput");
        formatter.field("users", &self.users);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUsersOutput`](crate::output::ListUsersOutput)
pub mod list_users_output {
    /// A builder for [`ListUsersOutput`](crate::output::ListUsersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) users: std::option::Option<std::vec::Vec<crate::model::User>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `users`.
        ///
        /// To override the contents of this collection use [`set_users`](Self::set_users).
        ///
        /// <p>The overview of users for an organization.</p>
        pub fn users(mut self, input: impl Into<crate::model::User>) -> Self {
            let mut v = self.users.unwrap_or_default();
            v.push(input.into());
            self.users = Some(v);
            self
        }
        /// <p>The overview of users for an organization.</p>
        pub fn set_users(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::User>>,
        ) -> Self {
            self.users = input;
            self
        }
        /// <p> The token to use to retrieve the next page of results. This value is `null` when
        /// there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The token to use to retrieve the next page of results. This value is `null` when
        /// there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUsersOutput`](crate::output::ListUsersOutput)
        pub fn build(self) -> crate::output::ListUsersOutput {
            crate::output::ListUsersOutput {
                users: self.users,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUsersOutput {
    /// Creates a new builder-style object to manufacture [`ListUsersOutput`](crate::output::ListUsersOutput)
    pub fn builder() -> crate::output::list_users_output::Builder {
        crate::output::list_users_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of tag key-value pairs.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tag key-value pairs.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>A list of tag key-value pairs.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourcesOutput {
    /// <p>One page of the organization's resource representation.</p>
    pub resources: std::option::Option<std::vec::Vec<crate::model::Resource>>,
    /// <p> The token used to paginate through all the organization's resources. While results
    /// are still available, it has an associated value. When the last page is reached, the token
    /// is empty.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListResourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourcesOutput");
        formatter.field("resources", &self.resources);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResourcesOutput`](crate::output::ListResourcesOutput)
pub mod list_resources_output {
    /// A builder for [`ListResourcesOutput`](crate::output::ListResourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resources: std::option::Option<std::vec::Vec<crate::model::Resource>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `resources`.
        ///
        /// To override the contents of this collection use [`set_resources`](Self::set_resources).
        ///
        /// <p>One page of the organization's resource representation.</p>
        pub fn resources(mut self, input: impl Into<crate::model::Resource>) -> Self {
            let mut v = self.resources.unwrap_or_default();
            v.push(input.into());
            self.resources = Some(v);
            self
        }
        /// <p>One page of the organization's resource representation.</p>
        pub fn set_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Resource>>,
        ) -> Self {
            self.resources = input;
            self
        }
        /// <p> The token used to paginate through all the organization's resources. While results
        /// are still available, it has an associated value. When the last page is reached, the token
        /// is empty.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The token used to paginate through all the organization's resources. While results
        /// are still available, it has an associated value. When the last page is reached, the token
        /// is empty.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourcesOutput`](crate::output::ListResourcesOutput)
        pub fn build(self) -> crate::output::ListResourcesOutput {
            crate::output::ListResourcesOutput {
                resources: self.resources,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListResourcesOutput`](crate::output::ListResourcesOutput)
    pub fn builder() -> crate::output::list_resources_output::Builder {
        crate::output::list_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourceDelegatesOutput {
    /// <p>One page of the resource's delegates.</p>
    pub delegates: std::option::Option<std::vec::Vec<crate::model::Delegate>>,
    /// <p>The token used to paginate through the delegates associated with a resource. While
    /// results are still available, it has an associated value. When the last page is reached, the
    /// token is empty. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListResourceDelegatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceDelegatesOutput");
        formatter.field("delegates", &self.delegates);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResourceDelegatesOutput`](crate::output::ListResourceDelegatesOutput)
pub mod list_resource_delegates_output {
    /// A builder for [`ListResourceDelegatesOutput`](crate::output::ListResourceDelegatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delegates: std::option::Option<std::vec::Vec<crate::model::Delegate>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `delegates`.
        ///
        /// To override the contents of this collection use [`set_delegates`](Self::set_delegates).
        ///
        /// <p>One page of the resource's delegates.</p>
        pub fn delegates(mut self, input: impl Into<crate::model::Delegate>) -> Self {
            let mut v = self.delegates.unwrap_or_default();
            v.push(input.into());
            self.delegates = Some(v);
            self
        }
        /// <p>One page of the resource's delegates.</p>
        pub fn set_delegates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Delegate>>,
        ) -> Self {
            self.delegates = input;
            self
        }
        /// <p>The token used to paginate through the delegates associated with a resource. While
        /// results are still available, it has an associated value. When the last page is reached, the
        /// token is empty. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token used to paginate through the delegates associated with a resource. While
        /// results are still available, it has an associated value. When the last page is reached, the
        /// token is empty. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourceDelegatesOutput`](crate::output::ListResourceDelegatesOutput)
        pub fn build(self) -> crate::output::ListResourceDelegatesOutput {
            crate::output::ListResourceDelegatesOutput {
                delegates: self.delegates,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourceDelegatesOutput {
    /// Creates a new builder-style object to manufacture [`ListResourceDelegatesOutput`](crate::output::ListResourceDelegatesOutput)
    pub fn builder() -> crate::output::list_resource_delegates_output::Builder {
        crate::output::list_resource_delegates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListOrganizationsOutput {
    /// <p>The overview of owned organizations presented as a list of organization
    /// summaries.</p>
    pub organization_summaries:
        std::option::Option<std::vec::Vec<crate::model::OrganizationSummary>>,
    /// <p>The token to use to retrieve the next page of results. The value is "null" when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListOrganizationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListOrganizationsOutput");
        formatter.field("organization_summaries", &self.organization_summaries);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListOrganizationsOutput`](crate::output::ListOrganizationsOutput)
pub mod list_organizations_output {
    /// A builder for [`ListOrganizationsOutput`](crate::output::ListOrganizationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) organization_summaries:
            std::option::Option<std::vec::Vec<crate::model::OrganizationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `organization_summaries`.
        ///
        /// To override the contents of this collection use [`set_organization_summaries`](Self::set_organization_summaries).
        ///
        /// <p>The overview of owned organizations presented as a list of organization
        /// summaries.</p>
        pub fn organization_summaries(
            mut self,
            input: impl Into<crate::model::OrganizationSummary>,
        ) -> Self {
            let mut v = self.organization_summaries.unwrap_or_default();
            v.push(input.into());
            self.organization_summaries = Some(v);
            self
        }
        /// <p>The overview of owned organizations presented as a list of organization
        /// summaries.</p>
        pub fn set_organization_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OrganizationSummary>>,
        ) -> Self {
            self.organization_summaries = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListOrganizationsOutput`](crate::output::ListOrganizationsOutput)
        pub fn build(self) -> crate::output::ListOrganizationsOutput {
            crate::output::ListOrganizationsOutput {
                organization_summaries: self.organization_summaries,
                next_token: self.next_token,
            }
        }
    }
}
impl ListOrganizationsOutput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationsOutput`](crate::output::ListOrganizationsOutput)
    pub fn builder() -> crate::output::list_organizations_output::Builder {
        crate::output::list_organizations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMobileDeviceAccessRulesOutput {
    /// <p>The list of mobile device access rules that exist under the specified Amazon WorkMail organization.</p>
    pub rules: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessRule>>,
}
impl std::fmt::Debug for ListMobileDeviceAccessRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMobileDeviceAccessRulesOutput");
        formatter.field("rules", &self.rules);
        formatter.finish()
    }
}
/// See [`ListMobileDeviceAccessRulesOutput`](crate::output::ListMobileDeviceAccessRulesOutput)
pub mod list_mobile_device_access_rules_output {
    /// A builder for [`ListMobileDeviceAccessRulesOutput`](crate::output::ListMobileDeviceAccessRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessRule>>,
    }
    impl Builder {
        /// Appends an item to `rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p>The list of mobile device access rules that exist under the specified Amazon WorkMail organization.</p>
        pub fn rules(mut self, input: impl Into<crate::model::MobileDeviceAccessRule>) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input.into());
            self.rules = Some(v);
            self
        }
        /// <p>The list of mobile device access rules that exist under the specified Amazon WorkMail organization.</p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessRule>>,
        ) -> Self {
            self.rules = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMobileDeviceAccessRulesOutput`](crate::output::ListMobileDeviceAccessRulesOutput)
        pub fn build(self) -> crate::output::ListMobileDeviceAccessRulesOutput {
            crate::output::ListMobileDeviceAccessRulesOutput { rules: self.rules }
        }
    }
}
impl ListMobileDeviceAccessRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListMobileDeviceAccessRulesOutput`](crate::output::ListMobileDeviceAccessRulesOutput)
    pub fn builder() -> crate::output::list_mobile_device_access_rules_output::Builder {
        crate::output::list_mobile_device_access_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMobileDeviceAccessOverridesOutput {
    /// <p>The list of mobile device access overrides that exist for the specified Amazon WorkMail organization and user.</p>
    pub overrides: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessOverride>>,
    /// <p>The token to use to retrieve the next page of results. The value is “null” when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListMobileDeviceAccessOverridesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMobileDeviceAccessOverridesOutput");
        formatter.field("overrides", &self.overrides);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMobileDeviceAccessOverridesOutput`](crate::output::ListMobileDeviceAccessOverridesOutput)
pub mod list_mobile_device_access_overrides_output {
    /// A builder for [`ListMobileDeviceAccessOverridesOutput`](crate::output::ListMobileDeviceAccessOverridesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) overrides:
            std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessOverride>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `overrides`.
        ///
        /// To override the contents of this collection use [`set_overrides`](Self::set_overrides).
        ///
        /// <p>The list of mobile device access overrides that exist for the specified Amazon WorkMail organization and user.</p>
        pub fn overrides(
            mut self,
            input: impl Into<crate::model::MobileDeviceAccessOverride>,
        ) -> Self {
            let mut v = self.overrides.unwrap_or_default();
            v.push(input.into());
            self.overrides = Some(v);
            self
        }
        /// <p>The list of mobile device access overrides that exist for the specified Amazon WorkMail organization and user.</p>
        pub fn set_overrides(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessOverride>>,
        ) -> Self {
            self.overrides = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is “null” when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is “null” when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMobileDeviceAccessOverridesOutput`](crate::output::ListMobileDeviceAccessOverridesOutput)
        pub fn build(self) -> crate::output::ListMobileDeviceAccessOverridesOutput {
            crate::output::ListMobileDeviceAccessOverridesOutput {
                overrides: self.overrides,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMobileDeviceAccessOverridesOutput {
    /// Creates a new builder-style object to manufacture [`ListMobileDeviceAccessOverridesOutput`](crate::output::ListMobileDeviceAccessOverridesOutput)
    pub fn builder() -> crate::output::list_mobile_device_access_overrides_output::Builder {
        crate::output::list_mobile_device_access_overrides_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMailDomainsOutput {
    /// <p>The list of mail domain summaries, specifying domains that exist in the specified Amazon WorkMail  organization, along with the information about whether the domain is or isn't the default.</p>
    pub mail_domains: std::option::Option<std::vec::Vec<crate::model::MailDomainSummary>>,
    /// <p>The token to use to retrieve the next page of results. The value becomes <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListMailDomainsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMailDomainsOutput");
        formatter.field("mail_domains", &self.mail_domains);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMailDomainsOutput`](crate::output::ListMailDomainsOutput)
pub mod list_mail_domains_output {
    /// A builder for [`ListMailDomainsOutput`](crate::output::ListMailDomainsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) mail_domains:
            std::option::Option<std::vec::Vec<crate::model::MailDomainSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `mail_domains`.
        ///
        /// To override the contents of this collection use [`set_mail_domains`](Self::set_mail_domains).
        ///
        /// <p>The list of mail domain summaries, specifying domains that exist in the specified Amazon WorkMail  organization, along with the information about whether the domain is or isn't the default.</p>
        pub fn mail_domains(mut self, input: impl Into<crate::model::MailDomainSummary>) -> Self {
            let mut v = self.mail_domains.unwrap_or_default();
            v.push(input.into());
            self.mail_domains = Some(v);
            self
        }
        /// <p>The list of mail domain summaries, specifying domains that exist in the specified Amazon WorkMail  organization, along with the information about whether the domain is or isn't the default.</p>
        pub fn set_mail_domains(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MailDomainSummary>>,
        ) -> Self {
            self.mail_domains = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value becomes <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value becomes <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMailDomainsOutput`](crate::output::ListMailDomainsOutput)
        pub fn build(self) -> crate::output::ListMailDomainsOutput {
            crate::output::ListMailDomainsOutput {
                mail_domains: self.mail_domains,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMailDomainsOutput {
    /// Creates a new builder-style object to manufacture [`ListMailDomainsOutput`](crate::output::ListMailDomainsOutput)
    pub fn builder() -> crate::output::list_mail_domains_output::Builder {
        crate::output::list_mail_domains_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMailboxPermissionsOutput {
    /// <p>One page of the user, group, or resource mailbox permissions.</p>
    pub permissions: std::option::Option<std::vec::Vec<crate::model::Permission>>,
    /// <p>The token to use to retrieve the next page of results. The value is "null" when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListMailboxPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMailboxPermissionsOutput");
        formatter.field("permissions", &self.permissions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMailboxPermissionsOutput`](crate::output::ListMailboxPermissionsOutput)
pub mod list_mailbox_permissions_output {
    /// A builder for [`ListMailboxPermissionsOutput`](crate::output::ListMailboxPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) permissions: std::option::Option<std::vec::Vec<crate::model::Permission>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `permissions`.
        ///
        /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
        ///
        /// <p>One page of the user, group, or resource mailbox permissions.</p>
        pub fn permissions(mut self, input: impl Into<crate::model::Permission>) -> Self {
            let mut v = self.permissions.unwrap_or_default();
            v.push(input.into());
            self.permissions = Some(v);
            self
        }
        /// <p>One page of the user, group, or resource mailbox permissions.</p>
        pub fn set_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Permission>>,
        ) -> Self {
            self.permissions = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMailboxPermissionsOutput`](crate::output::ListMailboxPermissionsOutput)
        pub fn build(self) -> crate::output::ListMailboxPermissionsOutput {
            crate::output::ListMailboxPermissionsOutput {
                permissions: self.permissions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMailboxPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ListMailboxPermissionsOutput`](crate::output::ListMailboxPermissionsOutput)
    pub fn builder() -> crate::output::list_mailbox_permissions_output::Builder {
        crate::output::list_mailbox_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMailboxExportJobsOutput {
    /// <p>The mailbox export job details.</p>
    pub jobs: std::option::Option<std::vec::Vec<crate::model::MailboxExportJob>>,
    /// <p>The token to use to retrieve the next page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListMailboxExportJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMailboxExportJobsOutput");
        formatter.field("jobs", &self.jobs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMailboxExportJobsOutput`](crate::output::ListMailboxExportJobsOutput)
pub mod list_mailbox_export_jobs_output {
    /// A builder for [`ListMailboxExportJobsOutput`](crate::output::ListMailboxExportJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) jobs: std::option::Option<std::vec::Vec<crate::model::MailboxExportJob>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `jobs`.
        ///
        /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
        ///
        /// <p>The mailbox export job details.</p>
        pub fn jobs(mut self, input: impl Into<crate::model::MailboxExportJob>) -> Self {
            let mut v = self.jobs.unwrap_or_default();
            v.push(input.into());
            self.jobs = Some(v);
            self
        }
        /// <p>The mailbox export job details.</p>
        pub fn set_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MailboxExportJob>>,
        ) -> Self {
            self.jobs = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMailboxExportJobsOutput`](crate::output::ListMailboxExportJobsOutput)
        pub fn build(self) -> crate::output::ListMailboxExportJobsOutput {
            crate::output::ListMailboxExportJobsOutput {
                jobs: self.jobs,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMailboxExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListMailboxExportJobsOutput`](crate::output::ListMailboxExportJobsOutput)
    pub fn builder() -> crate::output::list_mailbox_export_jobs_output::Builder {
        crate::output::list_mailbox_export_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGroupsOutput {
    /// <p>The overview of groups for an organization.</p>
    pub groups: std::option::Option<std::vec::Vec<crate::model::Group>>,
    /// <p>The token to use to retrieve the next page of results. The value is "null" when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupsOutput");
        formatter.field("groups", &self.groups);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListGroupsOutput`](crate::output::ListGroupsOutput)
pub mod list_groups_output {
    /// A builder for [`ListGroupsOutput`](crate::output::ListGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) groups: std::option::Option<std::vec::Vec<crate::model::Group>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `groups`.
        ///
        /// To override the contents of this collection use [`set_groups`](Self::set_groups).
        ///
        /// <p>The overview of groups for an organization.</p>
        pub fn groups(mut self, input: impl Into<crate::model::Group>) -> Self {
            let mut v = self.groups.unwrap_or_default();
            v.push(input.into());
            self.groups = Some(v);
            self
        }
        /// <p>The overview of groups for an organization.</p>
        pub fn set_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Group>>,
        ) -> Self {
            self.groups = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListGroupsOutput`](crate::output::ListGroupsOutput)
        pub fn build(self) -> crate::output::ListGroupsOutput {
            crate::output::ListGroupsOutput {
                groups: self.groups,
                next_token: self.next_token,
            }
        }
    }
}
impl ListGroupsOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupsOutput`](crate::output::ListGroupsOutput)
    pub fn builder() -> crate::output::list_groups_output::Builder {
        crate::output::list_groups_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGroupMembersOutput {
    /// <p>The members associated to the group.</p>
    pub members: std::option::Option<std::vec::Vec<crate::model::Member>>,
    /// <p>The token to use to retrieve the next page of results. The first call does not
    /// contain any tokens.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListGroupMembersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListGroupMembersOutput");
        formatter.field("members", &self.members);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListGroupMembersOutput`](crate::output::ListGroupMembersOutput)
pub mod list_group_members_output {
    /// A builder for [`ListGroupMembersOutput`](crate::output::ListGroupMembersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::Member>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>The members associated to the group.</p>
        pub fn members(mut self, input: impl Into<crate::model::Member>) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input.into());
            self.members = Some(v);
            self
        }
        /// <p>The members associated to the group.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Member>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The first call does not
        /// contain any tokens.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The first call does not
        /// contain any tokens.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListGroupMembersOutput`](crate::output::ListGroupMembersOutput)
        pub fn build(self) -> crate::output::ListGroupMembersOutput {
            crate::output::ListGroupMembersOutput {
                members: self.members,
                next_token: self.next_token,
            }
        }
    }
}
impl ListGroupMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListGroupMembersOutput`](crate::output::ListGroupMembersOutput)
    pub fn builder() -> crate::output::list_group_members_output::Builder {
        crate::output::list_group_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAliasesOutput {
    /// <p>The entity's paginated aliases.</p>
    pub aliases: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token to use to retrieve the next page of results. The value is "null" when there
    /// are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListAliasesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAliasesOutput");
        formatter.field("aliases", &self.aliases);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAliasesOutput`](crate::output::ListAliasesOutput)
pub mod list_aliases_output {
    /// A builder for [`ListAliasesOutput`](crate::output::ListAliasesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) aliases: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `aliases`.
        ///
        /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
        ///
        /// <p>The entity's paginated aliases.</p>
        pub fn aliases(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.aliases.unwrap_or_default();
            v.push(input.into());
            self.aliases = Some(v);
            self
        }
        /// <p>The entity's paginated aliases.</p>
        pub fn set_aliases(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.aliases = input;
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use to retrieve the next page of results. The value is "null" when there
        /// are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAliasesOutput`](crate::output::ListAliasesOutput)
        pub fn build(self) -> crate::output::ListAliasesOutput {
            crate::output::ListAliasesOutput {
                aliases: self.aliases,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAliasesOutput {
    /// Creates a new builder-style object to manufacture [`ListAliasesOutput`](crate::output::ListAliasesOutput)
    pub fn builder() -> crate::output::list_aliases_output::Builder {
        crate::output::list_aliases_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAccessControlRulesOutput {
    /// <p>The access control rules.</p>
    pub rules: std::option::Option<std::vec::Vec<crate::model::AccessControlRule>>,
}
impl std::fmt::Debug for ListAccessControlRulesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAccessControlRulesOutput");
        formatter.field("rules", &self.rules);
        formatter.finish()
    }
}
/// See [`ListAccessControlRulesOutput`](crate::output::ListAccessControlRulesOutput)
pub mod list_access_control_rules_output {
    /// A builder for [`ListAccessControlRulesOutput`](crate::output::ListAccessControlRulesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) rules: std::option::Option<std::vec::Vec<crate::model::AccessControlRule>>,
    }
    impl Builder {
        /// Appends an item to `rules`.
        ///
        /// To override the contents of this collection use [`set_rules`](Self::set_rules).
        ///
        /// <p>The access control rules.</p>
        pub fn rules(mut self, input: impl Into<crate::model::AccessControlRule>) -> Self {
            let mut v = self.rules.unwrap_or_default();
            v.push(input.into());
            self.rules = Some(v);
            self
        }
        /// <p>The access control rules.</p>
        pub fn set_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccessControlRule>>,
        ) -> Self {
            self.rules = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAccessControlRulesOutput`](crate::output::ListAccessControlRulesOutput)
        pub fn build(self) -> crate::output::ListAccessControlRulesOutput {
            crate::output::ListAccessControlRulesOutput { rules: self.rules }
        }
    }
}
impl ListAccessControlRulesOutput {
    /// Creates a new builder-style object to manufacture [`ListAccessControlRulesOutput`](crate::output::ListAccessControlRulesOutput)
    pub fn builder() -> crate::output::list_access_control_rules_output::Builder {
        crate::output::list_access_control_rules_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMobileDeviceAccessOverrideOutput {
    /// <p>The WorkMail user to which the access override applies.</p>
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The device to which the access override applies.</p>
    pub device_id: std::option::Option<std::string::String>,
    /// <p>The effect of the override, <code>ALLOW</code> or <code>DENY</code>.</p>
    pub effect: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
    /// <p>A description of the override.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The date the override was first created.</p>
    pub date_created: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The date the description was last modified.</p>
    pub date_modified: std::option::Option<aws_smithy_types::Instant>,
}
impl std::fmt::Debug for GetMobileDeviceAccessOverrideOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMobileDeviceAccessOverrideOutput");
        formatter.field("user_id", &self.user_id);
        formatter.field("device_id", &self.device_id);
        formatter.field("effect", &self.effect);
        formatter.field("description", &self.description);
        formatter.field("date_created", &self.date_created);
        formatter.field("date_modified", &self.date_modified);
        formatter.finish()
    }
}
/// See [`GetMobileDeviceAccessOverrideOutput`](crate::output::GetMobileDeviceAccessOverrideOutput)
pub mod get_mobile_device_access_override_output {
    /// A builder for [`GetMobileDeviceAccessOverrideOutput`](crate::output::GetMobileDeviceAccessOverrideOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_id: std::option::Option<std::string::String>,
        pub(crate) device_id: std::option::Option<std::string::String>,
        pub(crate) effect: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) date_created: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) date_modified: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The WorkMail user to which the access override applies.</p>
        pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_id = Some(input.into());
            self
        }
        /// <p>The WorkMail user to which the access override applies.</p>
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_id = input;
            self
        }
        /// <p>The device to which the access override applies.</p>
        pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_id = Some(input.into());
            self
        }
        /// <p>The device to which the access override applies.</p>
        pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.device_id = input;
            self
        }
        /// <p>The effect of the override, <code>ALLOW</code> or <code>DENY</code>.</p>
        pub fn effect(mut self, input: crate::model::MobileDeviceAccessRuleEffect) -> Self {
            self.effect = Some(input);
            self
        }
        /// <p>The effect of the override, <code>ALLOW</code> or <code>DENY</code>.</p>
        pub fn set_effect(
            mut self,
            input: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
        ) -> Self {
            self.effect = input;
            self
        }
        /// <p>A description of the override.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>A description of the override.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The date the override was first created.</p>
        pub fn date_created(mut self, input: aws_smithy_types::Instant) -> Self {
            self.date_created = Some(input);
            self
        }
        /// <p>The date the override was first created.</p>
        pub fn set_date_created(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.date_created = input;
            self
        }
        /// <p>The date the description was last modified.</p>
        pub fn date_modified(mut self, input: aws_smithy_types::Instant) -> Self {
            self.date_modified = Some(input);
            self
        }
        /// <p>The date the description was last modified.</p>
        pub fn set_date_modified(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.date_modified = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMobileDeviceAccessOverrideOutput`](crate::output::GetMobileDeviceAccessOverrideOutput)
        pub fn build(self) -> crate::output::GetMobileDeviceAccessOverrideOutput {
            crate::output::GetMobileDeviceAccessOverrideOutput {
                user_id: self.user_id,
                device_id: self.device_id,
                effect: self.effect,
                description: self.description,
                date_created: self.date_created,
                date_modified: self.date_modified,
            }
        }
    }
}
impl GetMobileDeviceAccessOverrideOutput {
    /// Creates a new builder-style object to manufacture [`GetMobileDeviceAccessOverrideOutput`](crate::output::GetMobileDeviceAccessOverrideOutput)
    pub fn builder() -> crate::output::get_mobile_device_access_override_output::Builder {
        crate::output::get_mobile_device_access_override_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMobileDeviceAccessEffectOutput {
    /// <p>The effect of the simulated access, <code>ALLOW</code> or <code>DENY</code>, after evaluating mobile device access rules in the Amazon WorkMail organization for the simulated
    /// user parameters.</p>
    pub effect: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
    /// <p>A list of the rules which matched the simulated user input and produced the effect.</p>
    pub matched_rules:
        std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessMatchedRule>>,
}
impl std::fmt::Debug for GetMobileDeviceAccessEffectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMobileDeviceAccessEffectOutput");
        formatter.field("effect", &self.effect);
        formatter.field("matched_rules", &self.matched_rules);
        formatter.finish()
    }
}
/// See [`GetMobileDeviceAccessEffectOutput`](crate::output::GetMobileDeviceAccessEffectOutput)
pub mod get_mobile_device_access_effect_output {
    /// A builder for [`GetMobileDeviceAccessEffectOutput`](crate::output::GetMobileDeviceAccessEffectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) effect: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
        pub(crate) matched_rules:
            std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessMatchedRule>>,
    }
    impl Builder {
        /// <p>The effect of the simulated access, <code>ALLOW</code> or <code>DENY</code>, after evaluating mobile device access rules in the Amazon WorkMail organization for the simulated
        /// user parameters.</p>
        pub fn effect(mut self, input: crate::model::MobileDeviceAccessRuleEffect) -> Self {
            self.effect = Some(input);
            self
        }
        /// <p>The effect of the simulated access, <code>ALLOW</code> or <code>DENY</code>, after evaluating mobile device access rules in the Amazon WorkMail organization for the simulated
        /// user parameters.</p>
        pub fn set_effect(
            mut self,
            input: std::option::Option<crate::model::MobileDeviceAccessRuleEffect>,
        ) -> Self {
            self.effect = input;
            self
        }
        /// Appends an item to `matched_rules`.
        ///
        /// To override the contents of this collection use [`set_matched_rules`](Self::set_matched_rules).
        ///
        /// <p>A list of the rules which matched the simulated user input and produced the effect.</p>
        pub fn matched_rules(
            mut self,
            input: impl Into<crate::model::MobileDeviceAccessMatchedRule>,
        ) -> Self {
            let mut v = self.matched_rules.unwrap_or_default();
            v.push(input.into());
            self.matched_rules = Some(v);
            self
        }
        /// <p>A list of the rules which matched the simulated user input and produced the effect.</p>
        pub fn set_matched_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MobileDeviceAccessMatchedRule>>,
        ) -> Self {
            self.matched_rules = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMobileDeviceAccessEffectOutput`](crate::output::GetMobileDeviceAccessEffectOutput)
        pub fn build(self) -> crate::output::GetMobileDeviceAccessEffectOutput {
            crate::output::GetMobileDeviceAccessEffectOutput {
                effect: self.effect,
                matched_rules: self.matched_rules,
            }
        }
    }
}
impl GetMobileDeviceAccessEffectOutput {
    /// Creates a new builder-style object to manufacture [`GetMobileDeviceAccessEffectOutput`](crate::output::GetMobileDeviceAccessEffectOutput)
    pub fn builder() -> crate::output::get_mobile_device_access_effect_output::Builder {
        crate::output::get_mobile_device_access_effect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMailDomainOutput {
    /// <p>A list of the DNS records that Amazon WorkMail recommends adding in your DNS provider for the best user experience. The records configure your domain with DMARC, SPF, DKIM, and direct incoming
    /// email traffic to SES. See admin guide for more details.</p>
    pub records: std::option::Option<std::vec::Vec<crate::model::DnsRecord>>,
    /// <p>Specifies whether the domain is a test domain provided by WorkMail, or a custom domain.</p>
    pub is_test_domain: bool,
    /// <p>Specifies whether the domain is the default domain for your organization.</p>
    pub is_default: bool,
    /// <p> Indicates the status of the domain ownership verification.</p>
    pub ownership_verification_status:
        std::option::Option<crate::model::DnsRecordVerificationStatus>,
    /// <p>Indicates the status of a DKIM verification.</p>
    pub dkim_verification_status: std::option::Option<crate::model::DnsRecordVerificationStatus>,
}
impl std::fmt::Debug for GetMailDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMailDomainOutput");
        formatter.field("records", &self.records);
        formatter.field("is_test_domain", &self.is_test_domain);
        formatter.field("is_default", &self.is_default);
        formatter.field(
            "ownership_verification_status",
            &self.ownership_verification_status,
        );
        formatter.field("dkim_verification_status", &self.dkim_verification_status);
        formatter.finish()
    }
}
/// See [`GetMailDomainOutput`](crate::output::GetMailDomainOutput)
pub mod get_mail_domain_output {
    /// A builder for [`GetMailDomainOutput`](crate::output::GetMailDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) records: std::option::Option<std::vec::Vec<crate::model::DnsRecord>>,
        pub(crate) is_test_domain: std::option::Option<bool>,
        pub(crate) is_default: std::option::Option<bool>,
        pub(crate) ownership_verification_status:
            std::option::Option<crate::model::DnsRecordVerificationStatus>,
        pub(crate) dkim_verification_status:
            std::option::Option<crate::model::DnsRecordVerificationStatus>,
    }
    impl Builder {
        /// Appends an item to `records`.
        ///
        /// To override the contents of this collection use [`set_records`](Self::set_records).
        ///
        /// <p>A list of the DNS records that Amazon WorkMail recommends adding in your DNS provider for the best user experience. The records configure your domain with DMARC, SPF, DKIM, and direct incoming
        /// email traffic to SES. See admin guide for more details.</p>
        pub fn records(mut self, input: impl Into<crate::model::DnsRecord>) -> Self {
            let mut v = self.records.unwrap_or_default();
            v.push(input.into());
            self.records = Some(v);
            self
        }
        /// <p>A list of the DNS records that Amazon WorkMail recommends adding in your DNS provider for the best user experience. The records configure your domain with DMARC, SPF, DKIM, and direct incoming
        /// email traffic to SES. See admin guide for more details.</p>
        pub fn set_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DnsRecord>>,
        ) -> Self {
            self.records = input;
            self
        }
        /// <p>Specifies whether the domain is a test domain provided by WorkMail, or a custom domain.</p>
        pub fn is_test_domain(mut self, input: bool) -> Self {
            self.is_test_domain = Some(input);
            self
        }
        /// <p>Specifies whether the domain is a test domain provided by WorkMail, or a custom domain.</p>
        pub fn set_is_test_domain(mut self, input: std::option::Option<bool>) -> Self {
            self.is_test_domain = input;
            self
        }
        /// <p>Specifies whether the domain is the default domain for your organization.</p>
        pub fn is_default(mut self, input: bool) -> Self {
            self.is_default = Some(input);
            self
        }
        /// <p>Specifies whether the domain is the default domain for your organization.</p>
        pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
            self.is_default = input;
            self
        }
        /// <p> Indicates the status of the domain ownership verification.</p>
        pub fn ownership_verification_status(
            mut self,
            input: crate::model::DnsRecordVerificationStatus,
        ) -> Self {
            self.ownership_verification_status = Some(input);
            self
        }
        /// <p> Indicates the status of the domain ownership verification.</p>
        pub fn set_ownership_verification_status(
            mut self,
            input: std::option::Option<crate::model::DnsRecordVerificationStatus>,
        ) -> Self {
            self.ownership_verification_status = input;
            self
        }
        /// <p>Indicates the status of a DKIM verification.</p>
        pub fn dkim_verification_status(
            mut self,
            input: crate::model::DnsRecordVerificationStatus,
        ) -> Self {
            self.dkim_verification_status = Some(input);
            self
        }
        /// <p>Indicates the status of a DKIM verification.</p>
        pub fn set_dkim_verification_status(
            mut self,
            input: std::option::Option<crate::model::DnsRecordVerificationStatus>,
        ) -> Self {
            self.dkim_verification_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMailDomainOutput`](crate::output::GetMailDomainOutput)
        pub fn build(self) -> crate::output::GetMailDomainOutput {
            crate::output::GetMailDomainOutput {
                records: self.records,
                is_test_domain: self.is_test_domain.unwrap_or_default(),
                is_default: self.is_default.unwrap_or_default(),
                ownership_verification_status: self.ownership_verification_status,
                dkim_verification_status: self.dkim_verification_status,
            }
        }
    }
}
impl GetMailDomainOutput {
    /// Creates a new builder-style object to manufacture [`GetMailDomainOutput`](crate::output::GetMailDomainOutput)
    pub fn builder() -> crate::output::get_mail_domain_output::Builder {
        crate::output::get_mail_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetMailboxDetailsOutput {
    /// <p>The maximum allowed mailbox size, in MB, for the specified user.</p>
    pub mailbox_quota: std::option::Option<i32>,
    /// <p>The current mailbox size, in MB, for the specified user.</p>
    pub mailbox_size: f64,
}
impl std::fmt::Debug for GetMailboxDetailsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetMailboxDetailsOutput");
        formatter.field("mailbox_quota", &self.mailbox_quota);
        formatter.field("mailbox_size", &self.mailbox_size);
        formatter.finish()
    }
}
/// See [`GetMailboxDetailsOutput`](crate::output::GetMailboxDetailsOutput)
pub mod get_mailbox_details_output {
    /// A builder for [`GetMailboxDetailsOutput`](crate::output::GetMailboxDetailsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) mailbox_quota: std::option::Option<i32>,
        pub(crate) mailbox_size: std::option::Option<f64>,
    }
    impl Builder {
        /// <p>The maximum allowed mailbox size, in MB, for the specified user.</p>
        pub fn mailbox_quota(mut self, input: i32) -> Self {
            self.mailbox_quota = Some(input);
            self
        }
        /// <p>The maximum allowed mailbox size, in MB, for the specified user.</p>
        pub fn set_mailbox_quota(mut self, input: std::option::Option<i32>) -> Self {
            self.mailbox_quota = input;
            self
        }
        /// <p>The current mailbox size, in MB, for the specified user.</p>
        pub fn mailbox_size(mut self, input: f64) -> Self {
            self.mailbox_size = Some(input);
            self
        }
        /// <p>The current mailbox size, in MB, for the specified user.</p>
        pub fn set_mailbox_size(mut self, input: std::option::Option<f64>) -> Self {
            self.mailbox_size = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMailboxDetailsOutput`](crate::output::GetMailboxDetailsOutput)
        pub fn build(self) -> crate::output::GetMailboxDetailsOutput {
            crate::output::GetMailboxDetailsOutput {
                mailbox_quota: self.mailbox_quota,
                mailbox_size: self.mailbox_size.unwrap_or_default(),
            }
        }
    }
}
impl GetMailboxDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetMailboxDetailsOutput`](crate::output::GetMailboxDetailsOutput)
    pub fn builder() -> crate::output::get_mailbox_details_output::Builder {
        crate::output::get_mailbox_details_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDefaultRetentionPolicyOutput {
    /// <p>The retention policy ID.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The retention policy name.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The retention policy description.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The retention policy folder configurations.</p>
    pub folder_configurations:
        std::option::Option<std::vec::Vec<crate::model::FolderConfiguration>>,
}
impl std::fmt::Debug for GetDefaultRetentionPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDefaultRetentionPolicyOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("folder_configurations", &self.folder_configurations);
        formatter.finish()
    }
}
/// See [`GetDefaultRetentionPolicyOutput`](crate::output::GetDefaultRetentionPolicyOutput)
pub mod get_default_retention_policy_output {
    /// A builder for [`GetDefaultRetentionPolicyOutput`](crate::output::GetDefaultRetentionPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) folder_configurations:
            std::option::Option<std::vec::Vec<crate::model::FolderConfiguration>>,
    }
    impl Builder {
        /// <p>The retention policy ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The retention policy ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The retention policy name.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The retention policy name.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The retention policy description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The retention policy description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `folder_configurations`.
        ///
        /// To override the contents of this collection use [`set_folder_configurations`](Self::set_folder_configurations).
        ///
        /// <p>The retention policy folder configurations.</p>
        pub fn folder_configurations(
            mut self,
            input: impl Into<crate::model::FolderConfiguration>,
        ) -> Self {
            let mut v = self.folder_configurations.unwrap_or_default();
            v.push(input.into());
            self.folder_configurations = Some(v);
            self
        }
        /// <p>The retention policy folder configurations.</p>
        pub fn set_folder_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FolderConfiguration>>,
        ) -> Self {
            self.folder_configurations = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDefaultRetentionPolicyOutput`](crate::output::GetDefaultRetentionPolicyOutput)
        pub fn build(self) -> crate::output::GetDefaultRetentionPolicyOutput {
            crate::output::GetDefaultRetentionPolicyOutput {
                id: self.id,
                name: self.name,
                description: self.description,
                folder_configurations: self.folder_configurations,
            }
        }
    }
}
impl GetDefaultRetentionPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetDefaultRetentionPolicyOutput`](crate::output::GetDefaultRetentionPolicyOutput)
    pub fn builder() -> crate::output::get_default_retention_policy_output::Builder {
        crate::output::get_default_retention_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAccessControlEffectOutput {
    /// <p>The rule effect.</p>
    pub effect: std::option::Option<crate::model::AccessControlRuleEffect>,
    /// <p>The rules that match the given parameters, resulting in an effect.</p>
    pub matched_rules: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for GetAccessControlEffectOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAccessControlEffectOutput");
        formatter.field("effect", &self.effect);
        formatter.field("matched_rules", &self.matched_rules);
        formatter.finish()
    }
}
/// See [`GetAccessControlEffectOutput`](crate::output::GetAccessControlEffectOutput)
pub mod get_access_control_effect_output {
    /// A builder for [`GetAccessControlEffectOutput`](crate::output::GetAccessControlEffectOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) effect: std::option::Option<crate::model::AccessControlRuleEffect>,
        pub(crate) matched_rules: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The rule effect.</p>
        pub fn effect(mut self, input: crate::model::AccessControlRuleEffect) -> Self {
            self.effect = Some(input);
            self
        }
        /// <p>The rule effect.</p>
        pub fn set_effect(
            mut self,
            input: std::option::Option<crate::model::AccessControlRuleEffect>,
        ) -> Self {
            self.effect = input;
            self
        }
        /// Appends an item to `matched_rules`.
        ///
        /// To override the contents of this collection use [`set_matched_rules`](Self::set_matched_rules).
        ///
        /// <p>The rules that match the given parameters, resulting in an effect.</p>
        pub fn matched_rules(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.matched_rules.unwrap_or_default();
            v.push(input.into());
            self.matched_rules = Some(v);
            self
        }
        /// <p>The rules that match the given parameters, resulting in an effect.</p>
        pub fn set_matched_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.matched_rules = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAccessControlEffectOutput`](crate::output::GetAccessControlEffectOutput)
        pub fn build(self) -> crate::output::GetAccessControlEffectOutput {
            crate::output::GetAccessControlEffectOutput {
                effect: self.effect,
                matched_rules: self.matched_rules,
            }
        }
    }
}
impl GetAccessControlEffectOutput {
    /// Creates a new builder-style object to manufacture [`GetAccessControlEffectOutput`](crate::output::GetAccessControlEffectOutput)
    pub fn builder() -> crate::output::get_access_control_effect_output::Builder {
        crate::output::get_access_control_effect_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateMemberFromGroupOutput {}
impl std::fmt::Debug for DisassociateMemberFromGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateMemberFromGroupOutput");
        formatter.finish()
    }
}
/// See [`DisassociateMemberFromGroupOutput`](crate::output::DisassociateMemberFromGroupOutput)
pub mod disassociate_member_from_group_output {
    /// A builder for [`DisassociateMemberFromGroupOutput`](crate::output::DisassociateMemberFromGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateMemberFromGroupOutput`](crate::output::DisassociateMemberFromGroupOutput)
        pub fn build(self) -> crate::output::DisassociateMemberFromGroupOutput {
            crate::output::DisassociateMemberFromGroupOutput {}
        }
    }
}
impl DisassociateMemberFromGroupOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateMemberFromGroupOutput`](crate::output::DisassociateMemberFromGroupOutput)
    pub fn builder() -> crate::output::disassociate_member_from_group_output::Builder {
        crate::output::disassociate_member_from_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateDelegateFromResourceOutput {}
impl std::fmt::Debug for DisassociateDelegateFromResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateDelegateFromResourceOutput");
        formatter.finish()
    }
}
/// See [`DisassociateDelegateFromResourceOutput`](crate::output::DisassociateDelegateFromResourceOutput)
pub mod disassociate_delegate_from_resource_output {
    /// A builder for [`DisassociateDelegateFromResourceOutput`](crate::output::DisassociateDelegateFromResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDelegateFromResourceOutput`](crate::output::DisassociateDelegateFromResourceOutput)
        pub fn build(self) -> crate::output::DisassociateDelegateFromResourceOutput {
            crate::output::DisassociateDelegateFromResourceOutput {}
        }
    }
}
impl DisassociateDelegateFromResourceOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDelegateFromResourceOutput`](crate::output::DisassociateDelegateFromResourceOutput)
    pub fn builder() -> crate::output::disassociate_delegate_from_resource_output::Builder {
        crate::output::disassociate_delegate_from_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeUserOutput {
    /// <p>The identifier for the described user.</p>
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The name for the user.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The email of the user.</p>
    pub email: std::option::Option<std::string::String>,
    /// <p>The display name of the user.</p>
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
    /// never registered to WorkMail).</p>
    pub state: std::option::Option<crate::model::EntityState>,
    /// <p>In certain cases, other entities are modeled as users. If interoperability is
    /// enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail
    /// organizations rely on different directory types, administrators can distinguish between an
    /// unregistered user (account is disabled and has a user role) and the directory
    /// administrators. The values are USER, RESOURCE, and SYSTEM_USER.</p>
    pub user_role: std::option::Option<crate::model::UserRole>,
    /// <p>The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch
    /// time format.</p>
    pub enabled_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch
    /// time format.</p>
    pub disabled_date: std::option::Option<aws_smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeUserOutput");
        formatter.field("user_id", &self.user_id);
        formatter.field("name", &self.name);
        formatter.field("email", &self.email);
        formatter.field("display_name", &self.display_name);
        formatter.field("state", &self.state);
        formatter.field("user_role", &self.user_role);
        formatter.field("enabled_date", &self.enabled_date);
        formatter.field("disabled_date", &self.disabled_date);
        formatter.finish()
    }
}
/// See [`DescribeUserOutput`](crate::output::DescribeUserOutput)
pub mod describe_user_output {
    /// A builder for [`DescribeUserOutput`](crate::output::DescribeUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) email: std::option::Option<std::string::String>,
        pub(crate) display_name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::EntityState>,
        pub(crate) user_role: std::option::Option<crate::model::UserRole>,
        pub(crate) enabled_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) disabled_date: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The identifier for the described user.</p>
        pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_id = Some(input.into());
            self
        }
        /// <p>The identifier for the described user.</p>
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_id = input;
            self
        }
        /// <p>The name for the user.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name for the user.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The email of the user.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.email = Some(input.into());
            self
        }
        /// <p>The email of the user.</p>
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.email = input;
            self
        }
        /// <p>The display name of the user.</p>
        pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.display_name = Some(input.into());
            self
        }
        /// <p>The display name of the user.</p>
        pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.display_name = input;
            self
        }
        /// <p>The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
        /// never registered to WorkMail).</p>
        pub fn state(mut self, input: crate::model::EntityState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of a user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
        /// never registered to WorkMail).</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::EntityState>) -> Self {
            self.state = input;
            self
        }
        /// <p>In certain cases, other entities are modeled as users. If interoperability is
        /// enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail
        /// organizations rely on different directory types, administrators can distinguish between an
        /// unregistered user (account is disabled and has a user role) and the directory
        /// administrators. The values are USER, RESOURCE, and SYSTEM_USER.</p>
        pub fn user_role(mut self, input: crate::model::UserRole) -> Self {
            self.user_role = Some(input);
            self
        }
        /// <p>In certain cases, other entities are modeled as users. If interoperability is
        /// enabled, resources are imported into Amazon WorkMail as users. Because different WorkMail
        /// organizations rely on different directory types, administrators can distinguish between an
        /// unregistered user (account is disabled and has a user role) and the directory
        /// administrators. The values are USER, RESOURCE, and SYSTEM_USER.</p>
        pub fn set_user_role(mut self, input: std::option::Option<crate::model::UserRole>) -> Self {
            self.user_role = input;
            self
        }
        /// <p>The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch
        /// time format.</p>
        pub fn enabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.enabled_date = Some(input);
            self
        }
        /// <p>The date and time at which the user was enabled for Amazon WorkMail usage, in UNIX epoch
        /// time format.</p>
        pub fn set_enabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.enabled_date = input;
            self
        }
        /// <p>The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch
        /// time format.</p>
        pub fn disabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.disabled_date = Some(input);
            self
        }
        /// <p>The date and time at which the user was disabled for Amazon WorkMail usage, in UNIX epoch
        /// time format.</p>
        pub fn set_disabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.disabled_date = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeUserOutput`](crate::output::DescribeUserOutput)
        pub fn build(self) -> crate::output::DescribeUserOutput {
            crate::output::DescribeUserOutput {
                user_id: self.user_id,
                name: self.name,
                email: self.email,
                display_name: self.display_name,
                state: self.state,
                user_role: self.user_role,
                enabled_date: self.enabled_date,
                disabled_date: self.disabled_date,
            }
        }
    }
}
impl DescribeUserOutput {
    /// Creates a new builder-style object to manufacture [`DescribeUserOutput`](crate::output::DescribeUserOutput)
    pub fn builder() -> crate::output::describe_user_output::Builder {
        crate::output::describe_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeResourceOutput {
    /// <p>The identifier of the described resource.</p>
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The email of the described resource.</p>
    pub email: std::option::Option<std::string::String>,
    /// <p>The name of the described resource.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of the described resource.</p>
    pub r#type: std::option::Option<crate::model::ResourceType>,
    /// <p>The booking options for the described resource.</p>
    pub booking_options: std::option::Option<crate::model::BookingOptions>,
    /// <p>The state of the resource: enabled (registered to Amazon WorkMail), disabled (deregistered
    /// or never registered to WorkMail), or deleted.</p>
    pub state: std::option::Option<crate::model::EntityState>,
    /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time
    /// format.</p>
    pub enabled_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time
    /// format.</p>
    pub disabled_date: std::option::Option<aws_smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeResourceOutput");
        formatter.field("resource_id", &self.resource_id);
        formatter.field("email", &self.email);
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("booking_options", &self.booking_options);
        formatter.field("state", &self.state);
        formatter.field("enabled_date", &self.enabled_date);
        formatter.field("disabled_date", &self.disabled_date);
        formatter.finish()
    }
}
/// See [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
pub mod describe_resource_output {
    /// A builder for [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_id: std::option::Option<std::string::String>,
        pub(crate) email: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<crate::model::ResourceType>,
        pub(crate) booking_options: std::option::Option<crate::model::BookingOptions>,
        pub(crate) state: std::option::Option<crate::model::EntityState>,
        pub(crate) enabled_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) disabled_date: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The identifier of the described resource.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_id = Some(input.into());
            self
        }
        /// <p>The identifier of the described resource.</p>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_id = input;
            self
        }
        /// <p>The email of the described resource.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.email = Some(input.into());
            self
        }
        /// <p>The email of the described resource.</p>
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.email = input;
            self
        }
        /// <p>The name of the described resource.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the described resource.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The type of the described resource.</p>
        pub fn r#type(mut self, input: crate::model::ResourceType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of the described resource.</p>
        pub fn set_type(mut self, input: std::option::Option<crate::model::ResourceType>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The booking options for the described resource.</p>
        pub fn booking_options(mut self, input: crate::model::BookingOptions) -> Self {
            self.booking_options = Some(input);
            self
        }
        /// <p>The booking options for the described resource.</p>
        pub fn set_booking_options(
            mut self,
            input: std::option::Option<crate::model::BookingOptions>,
        ) -> Self {
            self.booking_options = input;
            self
        }
        /// <p>The state of the resource: enabled (registered to Amazon WorkMail), disabled (deregistered
        /// or never registered to WorkMail), or deleted.</p>
        pub fn state(mut self, input: crate::model::EntityState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the resource: enabled (registered to Amazon WorkMail), disabled (deregistered
        /// or never registered to WorkMail), or deleted.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::EntityState>) -> Self {
            self.state = input;
            self
        }
        /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn enabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.enabled_date = Some(input);
            self
        }
        /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn set_enabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.enabled_date = input;
            self
        }
        /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn disabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.disabled_date = Some(input);
            self
        }
        /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn set_disabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.disabled_date = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
        pub fn build(self) -> crate::output::DescribeResourceOutput {
            crate::output::DescribeResourceOutput {
                resource_id: self.resource_id,
                email: self.email,
                name: self.name,
                r#type: self.r#type,
                booking_options: self.booking_options,
                state: self.state,
                enabled_date: self.enabled_date,
                disabled_date: self.disabled_date,
            }
        }
    }
}
impl DescribeResourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceOutput`](crate::output::DescribeResourceOutput)
    pub fn builder() -> crate::output::describe_resource_output::Builder {
        crate::output::describe_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOrganizationOutput {
    /// <p>The identifier of an organization.</p>
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The alias for an organization.</p>
    pub alias: std::option::Option<std::string::String>,
    /// <p>The state of an organization.</p>
    pub state: std::option::Option<std::string::String>,
    /// <p>The identifier for the directory associated with an Amazon WorkMail organization.</p>
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The type of directory associated with the WorkMail organization.</p>
    pub directory_type: std::option::Option<std::string::String>,
    /// <p>The default mail domain associated with the organization.</p>
    pub default_mail_domain: std::option::Option<std::string::String>,
    /// <p>The date at which the organization became usable in the WorkMail context, in UNIX epoch
    /// time format.</p>
    pub completed_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p>(Optional) The error message indicating if unexpected behavior was encountered with
    /// regards to the organization.</p>
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the organization.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOrganizationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOrganizationOutput");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("alias", &self.alias);
        formatter.field("state", &self.state);
        formatter.field("directory_id", &self.directory_id);
        formatter.field("directory_type", &self.directory_type);
        formatter.field("default_mail_domain", &self.default_mail_domain);
        formatter.field("completed_date", &self.completed_date);
        formatter.field("error_message", &self.error_message);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`DescribeOrganizationOutput`](crate::output::DescribeOrganizationOutput)
pub mod describe_organization_output {
    /// A builder for [`DescribeOrganizationOutput`](crate::output::DescribeOrganizationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) organization_id: std::option::Option<std::string::String>,
        pub(crate) alias: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<std::string::String>,
        pub(crate) directory_id: std::option::Option<std::string::String>,
        pub(crate) directory_type: std::option::Option<std::string::String>,
        pub(crate) default_mail_domain: std::option::Option<std::string::String>,
        pub(crate) completed_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) error_message: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of an organization.</p>
        pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.organization_id = Some(input.into());
            self
        }
        /// <p>The identifier of an organization.</p>
        pub fn set_organization_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.organization_id = input;
            self
        }
        /// <p>The alias for an organization.</p>
        pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.alias = Some(input.into());
            self
        }
        /// <p>The alias for an organization.</p>
        pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.alias = input;
            self
        }
        /// <p>The state of an organization.</p>
        pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
            self.state = Some(input.into());
            self
        }
        /// <p>The state of an organization.</p>
        pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state = input;
            self
        }
        /// <p>The identifier for the directory associated with an Amazon WorkMail organization.</p>
        pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.directory_id = Some(input.into());
            self
        }
        /// <p>The identifier for the directory associated with an Amazon WorkMail organization.</p>
        pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.directory_id = input;
            self
        }
        /// <p>The type of directory associated with the WorkMail organization.</p>
        pub fn directory_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.directory_type = Some(input.into());
            self
        }
        /// <p>The type of directory associated with the WorkMail organization.</p>
        pub fn set_directory_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.directory_type = input;
            self
        }
        /// <p>The default mail domain associated with the organization.</p>
        pub fn default_mail_domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.default_mail_domain = Some(input.into());
            self
        }
        /// <p>The default mail domain associated with the organization.</p>
        pub fn set_default_mail_domain(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.default_mail_domain = input;
            self
        }
        /// <p>The date at which the organization became usable in the WorkMail context, in UNIX epoch
        /// time format.</p>
        pub fn completed_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.completed_date = Some(input);
            self
        }
        /// <p>The date at which the organization became usable in the WorkMail context, in UNIX epoch
        /// time format.</p>
        pub fn set_completed_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.completed_date = input;
            self
        }
        /// <p>(Optional) The error message indicating if unexpected behavior was encountered with
        /// regards to the organization.</p>
        pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_message = Some(input.into());
            self
        }
        /// <p>(Optional) The error message indicating if unexpected behavior was encountered with
        /// regards to the organization.</p>
        pub fn set_error_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.error_message = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the organization.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the organization.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationOutput`](crate::output::DescribeOrganizationOutput)
        pub fn build(self) -> crate::output::DescribeOrganizationOutput {
            crate::output::DescribeOrganizationOutput {
                organization_id: self.organization_id,
                alias: self.alias,
                state: self.state,
                directory_id: self.directory_id,
                directory_type: self.directory_type,
                default_mail_domain: self.default_mail_domain,
                completed_date: self.completed_date,
                error_message: self.error_message,
                arn: self.arn,
            }
        }
    }
}
impl DescribeOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationOutput`](crate::output::DescribeOrganizationOutput)
    pub fn builder() -> crate::output::describe_organization_output::Builder {
        crate::output::describe_organization_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeMailboxExportJobOutput {
    /// <p>The identifier of the user or resource associated with the mailbox.</p>
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The mailbox export job description.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of the AWS Identity and Access Management (IAM) role that grants write permission to the Amazon Simple
    /// Storage Service (Amazon S3) bucket.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service (AWS KMS)
    /// key that encrypts the exported mailbox content.</p>
    pub kms_key_arn: std::option::Option<std::string::String>,
    /// <p>The name of the S3 bucket.</p>
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The S3 bucket prefix.</p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The path to the S3 bucket and file that the mailbox export job is exporting
    /// to.</p>
    pub s3_path: std::option::Option<std::string::String>,
    /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
    pub estimated_progress: i32,
    /// <p>The state of the mailbox export job.</p>
    pub state: std::option::Option<crate::model::MailboxExportJobState>,
    /// <p>Error information for failed mailbox export jobs.</p>
    pub error_info: std::option::Option<std::string::String>,
    /// <p>The mailbox export job start timestamp.</p>
    pub start_time: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The mailbox export job end timestamp.</p>
    pub end_time: std::option::Option<aws_smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeMailboxExportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeMailboxExportJobOutput");
        formatter.field("entity_id", &self.entity_id);
        formatter.field("description", &self.description);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("s3_bucket_name", &self.s3_bucket_name);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("s3_path", &self.s3_path);
        formatter.field("estimated_progress", &self.estimated_progress);
        formatter.field("state", &self.state);
        formatter.field("error_info", &self.error_info);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.finish()
    }
}
/// See [`DescribeMailboxExportJobOutput`](crate::output::DescribeMailboxExportJobOutput)
pub mod describe_mailbox_export_job_output {
    /// A builder for [`DescribeMailboxExportJobOutput`](crate::output::DescribeMailboxExportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) entity_id: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_arn: std::option::Option<std::string::String>,
        pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) s3_path: std::option::Option<std::string::String>,
        pub(crate) estimated_progress: std::option::Option<i32>,
        pub(crate) state: std::option::Option<crate::model::MailboxExportJobState>,
        pub(crate) error_info: std::option::Option<std::string::String>,
        pub(crate) start_time: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) end_time: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The identifier of the user or resource associated with the mailbox.</p>
        pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.entity_id = Some(input.into());
            self
        }
        /// <p>The identifier of the user or resource associated with the mailbox.</p>
        pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.entity_id = input;
            self
        }
        /// <p>The mailbox export job description.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The mailbox export job description.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The ARN of the AWS Identity and Access Management (IAM) role that grants write permission to the Amazon Simple
        /// Storage Service (Amazon S3) bucket.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the AWS Identity and Access Management (IAM) role that grants write permission to the Amazon Simple
        /// Storage Service (Amazon S3) bucket.</p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service (AWS KMS)
        /// key that encrypts the exported mailbox content.</p>
        pub fn kms_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the symmetric AWS Key Management Service (AWS KMS)
        /// key that encrypts the exported mailbox content.</p>
        pub fn set_kms_key_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_arn = input;
            self
        }
        /// <p>The name of the S3 bucket.</p>
        pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket_name = Some(input.into());
            self
        }
        /// <p>The name of the S3 bucket.</p>
        pub fn set_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_bucket_name = input;
            self
        }
        /// <p>The S3 bucket prefix.</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        /// <p>The S3 bucket prefix.</p>
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// <p>The path to the S3 bucket and file that the mailbox export job is exporting
        /// to.</p>
        pub fn s3_path(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_path = Some(input.into());
            self
        }
        /// <p>The path to the S3 bucket and file that the mailbox export job is exporting
        /// to.</p>
        pub fn set_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_path = input;
            self
        }
        /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
        pub fn estimated_progress(mut self, input: i32) -> Self {
            self.estimated_progress = Some(input);
            self
        }
        /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
        pub fn set_estimated_progress(mut self, input: std::option::Option<i32>) -> Self {
            self.estimated_progress = input;
            self
        }
        /// <p>The state of the mailbox export job.</p>
        pub fn state(mut self, input: crate::model::MailboxExportJobState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the mailbox export job.</p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::MailboxExportJobState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// <p>Error information for failed mailbox export jobs.</p>
        pub fn error_info(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_info = Some(input.into());
            self
        }
        /// <p>Error information for failed mailbox export jobs.</p>
        pub fn set_error_info(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.error_info = input;
            self
        }
        /// <p>The mailbox export job start timestamp.</p>
        pub fn start_time(mut self, input: aws_smithy_types::Instant) -> Self {
            self.start_time = Some(input);
            self
        }
        /// <p>The mailbox export job start timestamp.</p>
        pub fn set_start_time(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.start_time = input;
            self
        }
        /// <p>The mailbox export job end timestamp.</p>
        pub fn end_time(mut self, input: aws_smithy_types::Instant) -> Self {
            self.end_time = Some(input);
            self
        }
        /// <p>The mailbox export job end timestamp.</p>
        pub fn set_end_time(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.end_time = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMailboxExportJobOutput`](crate::output::DescribeMailboxExportJobOutput)
        pub fn build(self) -> crate::output::DescribeMailboxExportJobOutput {
            crate::output::DescribeMailboxExportJobOutput {
                entity_id: self.entity_id,
                description: self.description,
                role_arn: self.role_arn,
                kms_key_arn: self.kms_key_arn,
                s3_bucket_name: self.s3_bucket_name,
                s3_prefix: self.s3_prefix,
                s3_path: self.s3_path,
                estimated_progress: self.estimated_progress.unwrap_or_default(),
                state: self.state,
                error_info: self.error_info,
                start_time: self.start_time,
                end_time: self.end_time,
            }
        }
    }
}
impl DescribeMailboxExportJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMailboxExportJobOutput`](crate::output::DescribeMailboxExportJobOutput)
    pub fn builder() -> crate::output::describe_mailbox_export_job_output::Builder {
        crate::output::describe_mailbox_export_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInboundDmarcSettingsOutput {
    /// <p>Lists the enforcement setting of the applied policy.</p>
    pub enforced: bool,
}
impl std::fmt::Debug for DescribeInboundDmarcSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInboundDmarcSettingsOutput");
        formatter.field("enforced", &self.enforced);
        formatter.finish()
    }
}
/// See [`DescribeInboundDmarcSettingsOutput`](crate::output::DescribeInboundDmarcSettingsOutput)
pub mod describe_inbound_dmarc_settings_output {
    /// A builder for [`DescribeInboundDmarcSettingsOutput`](crate::output::DescribeInboundDmarcSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) enforced: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Lists the enforcement setting of the applied policy.</p>
        pub fn enforced(mut self, input: bool) -> Self {
            self.enforced = Some(input);
            self
        }
        /// <p>Lists the enforcement setting of the applied policy.</p>
        pub fn set_enforced(mut self, input: std::option::Option<bool>) -> Self {
            self.enforced = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInboundDmarcSettingsOutput`](crate::output::DescribeInboundDmarcSettingsOutput)
        pub fn build(self) -> crate::output::DescribeInboundDmarcSettingsOutput {
            crate::output::DescribeInboundDmarcSettingsOutput {
                enforced: self.enforced.unwrap_or_default(),
            }
        }
    }
}
impl DescribeInboundDmarcSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInboundDmarcSettingsOutput`](crate::output::DescribeInboundDmarcSettingsOutput)
    pub fn builder() -> crate::output::describe_inbound_dmarc_settings_output::Builder {
        crate::output::describe_inbound_dmarc_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGroupOutput {
    /// <p>The identifier of the described group.</p>
    pub group_id: std::option::Option<std::string::String>,
    /// <p>The name of the described group.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The email of the described group.</p>
    pub email: std::option::Option<std::string::String>,
    /// <p>The state of the user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
    /// never registered to WorkMail).</p>
    pub state: std::option::Option<crate::model::EntityState>,
    /// <p>The date and time when a user was registered to WorkMail, in UNIX epoch time
    /// format.</p>
    pub enabled_date: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The date and time when a user was deregistered from WorkMail, in UNIX epoch time
    /// format.</p>
    pub disabled_date: std::option::Option<aws_smithy_types::Instant>,
}
impl std::fmt::Debug for DescribeGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGroupOutput");
        formatter.field("group_id", &self.group_id);
        formatter.field("name", &self.name);
        formatter.field("email", &self.email);
        formatter.field("state", &self.state);
        formatter.field("enabled_date", &self.enabled_date);
        formatter.field("disabled_date", &self.disabled_date);
        formatter.finish()
    }
}
/// See [`DescribeGroupOutput`](crate::output::DescribeGroupOutput)
pub mod describe_group_output {
    /// A builder for [`DescribeGroupOutput`](crate::output::DescribeGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group_id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) email: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::EntityState>,
        pub(crate) enabled_date: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) disabled_date: std::option::Option<aws_smithy_types::Instant>,
    }
    impl Builder {
        /// <p>The identifier of the described group.</p>
        pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.group_id = Some(input.into());
            self
        }
        /// <p>The identifier of the described group.</p>
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.group_id = input;
            self
        }
        /// <p>The name of the described group.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the described group.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The email of the described group.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.email = Some(input.into());
            self
        }
        /// <p>The email of the described group.</p>
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.email = input;
            self
        }
        /// <p>The state of the user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
        /// never registered to WorkMail).</p>
        pub fn state(mut self, input: crate::model::EntityState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the user: enabled (registered to Amazon WorkMail) or disabled (deregistered or
        /// never registered to WorkMail).</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::EntityState>) -> Self {
            self.state = input;
            self
        }
        /// <p>The date and time when a user was registered to WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn enabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.enabled_date = Some(input);
            self
        }
        /// <p>The date and time when a user was registered to WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn set_enabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.enabled_date = input;
            self
        }
        /// <p>The date and time when a user was deregistered from WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn disabled_date(mut self, input: aws_smithy_types::Instant) -> Self {
            self.disabled_date = Some(input);
            self
        }
        /// <p>The date and time when a user was deregistered from WorkMail, in UNIX epoch time
        /// format.</p>
        pub fn set_disabled_date(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.disabled_date = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeGroupOutput`](crate::output::DescribeGroupOutput)
        pub fn build(self) -> crate::output::DescribeGroupOutput {
            crate::output::DescribeGroupOutput {
                group_id: self.group_id,
                name: self.name,
                email: self.email,
                state: self.state,
                enabled_date: self.enabled_date,
                disabled_date: self.disabled_date,
            }
        }
    }
}
impl DescribeGroupOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGroupOutput`](crate::output::DescribeGroupOutput)
    pub fn builder() -> crate::output::describe_group_output::Builder {
        crate::output::describe_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterMailDomainOutput {}
impl std::fmt::Debug for DeregisterMailDomainOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterMailDomainOutput");
        formatter.finish()
    }
}
/// See [`DeregisterMailDomainOutput`](crate::output::DeregisterMailDomainOutput)
pub mod deregister_mail_domain_output {
    /// A builder for [`DeregisterMailDomainOutput`](crate::output::DeregisterMailDomainOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterMailDomainOutput`](crate::output::DeregisterMailDomainOutput)
        pub fn build(self) -> crate::output::DeregisterMailDomainOutput {
            crate::output::DeregisterMailDomainOutput {}
        }
    }
}
impl DeregisterMailDomainOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterMailDomainOutput`](crate::output::DeregisterMailDomainOutput)
    pub fn builder() -> crate::output::deregister_mail_domain_output::Builder {
        crate::output::deregister_mail_domain_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterFromWorkMailOutput {}
impl std::fmt::Debug for DeregisterFromWorkMailOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterFromWorkMailOutput");
        formatter.finish()
    }
}
/// See [`DeregisterFromWorkMailOutput`](crate::output::DeregisterFromWorkMailOutput)
pub mod deregister_from_work_mail_output {
    /// A builder for [`DeregisterFromWorkMailOutput`](crate::output::DeregisterFromWorkMailOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterFromWorkMailOutput`](crate::output::DeregisterFromWorkMailOutput)
        pub fn build(self) -> crate::output::DeregisterFromWorkMailOutput {
            crate::output::DeregisterFromWorkMailOutput {}
        }
    }
}
impl DeregisterFromWorkMailOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterFromWorkMailOutput`](crate::output::DeregisterFromWorkMailOutput)
    pub fn builder() -> crate::output::deregister_from_work_mail_output::Builder {
        crate::output::deregister_from_work_mail_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUserOutput {}
impl std::fmt::Debug for DeleteUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserOutput");
        formatter.finish()
    }
}
/// See [`DeleteUserOutput`](crate::output::DeleteUserOutput)
pub mod delete_user_output {
    /// A builder for [`DeleteUserOutput`](crate::output::DeleteUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteUserOutput`](crate::output::DeleteUserOutput)
        pub fn build(self) -> crate::output::DeleteUserOutput {
            crate::output::DeleteUserOutput {}
        }
    }
}
impl DeleteUserOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserOutput`](crate::output::DeleteUserOutput)
    pub fn builder() -> crate::output::delete_user_output::Builder {
        crate::output::delete_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteRetentionPolicyOutput {}
impl std::fmt::Debug for DeleteRetentionPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteRetentionPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteRetentionPolicyOutput`](crate::output::DeleteRetentionPolicyOutput)
pub mod delete_retention_policy_output {
    /// A builder for [`DeleteRetentionPolicyOutput`](crate::output::DeleteRetentionPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteRetentionPolicyOutput`](crate::output::DeleteRetentionPolicyOutput)
        pub fn build(self) -> crate::output::DeleteRetentionPolicyOutput {
            crate::output::DeleteRetentionPolicyOutput {}
        }
    }
}
impl DeleteRetentionPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteRetentionPolicyOutput`](crate::output::DeleteRetentionPolicyOutput)
    pub fn builder() -> crate::output::delete_retention_policy_output::Builder {
        crate::output::delete_retention_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteResourceOutput {}
impl std::fmt::Debug for DeleteResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteResourceOutput");
        formatter.finish()
    }
}
/// See [`DeleteResourceOutput`](crate::output::DeleteResourceOutput)
pub mod delete_resource_output {
    /// A builder for [`DeleteResourceOutput`](crate::output::DeleteResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteResourceOutput`](crate::output::DeleteResourceOutput)
        pub fn build(self) -> crate::output::DeleteResourceOutput {
            crate::output::DeleteResourceOutput {}
        }
    }
}
impl DeleteResourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteResourceOutput`](crate::output::DeleteResourceOutput)
    pub fn builder() -> crate::output::delete_resource_output::Builder {
        crate::output::delete_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteOrganizationOutput {
    /// <p>The organization ID.</p>
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The state of the organization.</p>
    pub state: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteOrganizationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteOrganizationOutput");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`DeleteOrganizationOutput`](crate::output::DeleteOrganizationOutput)
pub mod delete_organization_output {
    /// A builder for [`DeleteOrganizationOutput`](crate::output::DeleteOrganizationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) organization_id: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The organization ID.</p>
        pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.organization_id = Some(input.into());
            self
        }
        /// <p>The organization ID.</p>
        pub fn set_organization_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.organization_id = input;
            self
        }
        /// <p>The state of the organization.</p>
        pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
            self.state = Some(input.into());
            self
        }
        /// <p>The state of the organization.</p>
        pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteOrganizationOutput`](crate::output::DeleteOrganizationOutput)
        pub fn build(self) -> crate::output::DeleteOrganizationOutput {
            crate::output::DeleteOrganizationOutput {
                organization_id: self.organization_id,
                state: self.state,
            }
        }
    }
}
impl DeleteOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteOrganizationOutput`](crate::output::DeleteOrganizationOutput)
    pub fn builder() -> crate::output::delete_organization_output::Builder {
        crate::output::delete_organization_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMobileDeviceAccessRuleOutput {}
impl std::fmt::Debug for DeleteMobileDeviceAccessRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteMobileDeviceAccessRuleOutput");
        formatter.finish()
    }
}
/// See [`DeleteMobileDeviceAccessRuleOutput`](crate::output::DeleteMobileDeviceAccessRuleOutput)
pub mod delete_mobile_device_access_rule_output {
    /// A builder for [`DeleteMobileDeviceAccessRuleOutput`](crate::output::DeleteMobileDeviceAccessRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMobileDeviceAccessRuleOutput`](crate::output::DeleteMobileDeviceAccessRuleOutput)
        pub fn build(self) -> crate::output::DeleteMobileDeviceAccessRuleOutput {
            crate::output::DeleteMobileDeviceAccessRuleOutput {}
        }
    }
}
impl DeleteMobileDeviceAccessRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMobileDeviceAccessRuleOutput`](crate::output::DeleteMobileDeviceAccessRuleOutput)
    pub fn builder() -> crate::output::delete_mobile_device_access_rule_output::Builder {
        crate::output::delete_mobile_device_access_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMobileDeviceAccessOverrideOutput {}
impl std::fmt::Debug for DeleteMobileDeviceAccessOverrideOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteMobileDeviceAccessOverrideOutput");
        formatter.finish()
    }
}
/// See [`DeleteMobileDeviceAccessOverrideOutput`](crate::output::DeleteMobileDeviceAccessOverrideOutput)
pub mod delete_mobile_device_access_override_output {
    /// A builder for [`DeleteMobileDeviceAccessOverrideOutput`](crate::output::DeleteMobileDeviceAccessOverrideOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMobileDeviceAccessOverrideOutput`](crate::output::DeleteMobileDeviceAccessOverrideOutput)
        pub fn build(self) -> crate::output::DeleteMobileDeviceAccessOverrideOutput {
            crate::output::DeleteMobileDeviceAccessOverrideOutput {}
        }
    }
}
impl DeleteMobileDeviceAccessOverrideOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMobileDeviceAccessOverrideOutput`](crate::output::DeleteMobileDeviceAccessOverrideOutput)
    pub fn builder() -> crate::output::delete_mobile_device_access_override_output::Builder {
        crate::output::delete_mobile_device_access_override_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMailboxPermissionsOutput {}
impl std::fmt::Debug for DeleteMailboxPermissionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteMailboxPermissionsOutput");
        formatter.finish()
    }
}
/// See [`DeleteMailboxPermissionsOutput`](crate::output::DeleteMailboxPermissionsOutput)
pub mod delete_mailbox_permissions_output {
    /// A builder for [`DeleteMailboxPermissionsOutput`](crate::output::DeleteMailboxPermissionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteMailboxPermissionsOutput`](crate::output::DeleteMailboxPermissionsOutput)
        pub fn build(self) -> crate::output::DeleteMailboxPermissionsOutput {
            crate::output::DeleteMailboxPermissionsOutput {}
        }
    }
}
impl DeleteMailboxPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMailboxPermissionsOutput`](crate::output::DeleteMailboxPermissionsOutput)
    pub fn builder() -> crate::output::delete_mailbox_permissions_output::Builder {
        crate::output::delete_mailbox_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteGroupOutput {}
impl std::fmt::Debug for DeleteGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteGroupOutput`](crate::output::DeleteGroupOutput)
pub mod delete_group_output {
    /// A builder for [`DeleteGroupOutput`](crate::output::DeleteGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteGroupOutput`](crate::output::DeleteGroupOutput)
        pub fn build(self) -> crate::output::DeleteGroupOutput {
            crate::output::DeleteGroupOutput {}
        }
    }
}
impl DeleteGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGroupOutput`](crate::output::DeleteGroupOutput)
    pub fn builder() -> crate::output::delete_group_output::Builder {
        crate::output::delete_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAliasOutput {}
impl std::fmt::Debug for DeleteAliasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAliasOutput");
        formatter.finish()
    }
}
/// See [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)
pub mod delete_alias_output {
    /// A builder for [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)
        pub fn build(self) -> crate::output::DeleteAliasOutput {
            crate::output::DeleteAliasOutput {}
        }
    }
}
impl DeleteAliasOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAliasOutput`](crate::output::DeleteAliasOutput)
    pub fn builder() -> crate::output::delete_alias_output::Builder {
        crate::output::delete_alias_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAccessControlRuleOutput {}
impl std::fmt::Debug for DeleteAccessControlRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAccessControlRuleOutput");
        formatter.finish()
    }
}
/// See [`DeleteAccessControlRuleOutput`](crate::output::DeleteAccessControlRuleOutput)
pub mod delete_access_control_rule_output {
    /// A builder for [`DeleteAccessControlRuleOutput`](crate::output::DeleteAccessControlRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAccessControlRuleOutput`](crate::output::DeleteAccessControlRuleOutput)
        pub fn build(self) -> crate::output::DeleteAccessControlRuleOutput {
            crate::output::DeleteAccessControlRuleOutput {}
        }
    }
}
impl DeleteAccessControlRuleOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAccessControlRuleOutput`](crate::output::DeleteAccessControlRuleOutput)
    pub fn builder() -> crate::output::delete_access_control_rule_output::Builder {
        crate::output::delete_access_control_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateUserOutput {
    /// <p>The identifier for the new user.</p>
    pub user_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUserOutput");
        formatter.field("user_id", &self.user_id);
        formatter.finish()
    }
}
/// See [`CreateUserOutput`](crate::output::CreateUserOutput)
pub mod create_user_output {
    /// A builder for [`CreateUserOutput`](crate::output::CreateUserOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the new user.</p>
        pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_id = Some(input.into());
            self
        }
        /// <p>The identifier for the new user.</p>
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.user_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserOutput`](crate::output::CreateUserOutput)
        pub fn build(self) -> crate::output::CreateUserOutput {
            crate::output::CreateUserOutput {
                user_id: self.user_id,
            }
        }
    }
}
impl CreateUserOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserOutput`](crate::output::CreateUserOutput)
    pub fn builder() -> crate::output::create_user_output::Builder {
        crate::output::create_user_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateResourceOutput {
    /// <p>The identifier of the new resource.</p>
    pub resource_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateResourceOutput");
        formatter.field("resource_id", &self.resource_id);
        formatter.finish()
    }
}
/// See [`CreateResourceOutput`](crate::output::CreateResourceOutput)
pub mod create_resource_output {
    /// A builder for [`CreateResourceOutput`](crate::output::CreateResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the new resource.</p>
        pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_id = Some(input.into());
            self
        }
        /// <p>The identifier of the new resource.</p>
        pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateResourceOutput`](crate::output::CreateResourceOutput)
        pub fn build(self) -> crate::output::CreateResourceOutput {
            crate::output::CreateResourceOutput {
                resource_id: self.resource_id,
            }
        }
    }
}
impl CreateResourceOutput {
    /// Creates a new builder-style object to manufacture [`CreateResourceOutput`](crate::output::CreateResourceOutput)
    pub fn builder() -> crate::output::create_resource_output::Builder {
        crate::output::create_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateOrganizationOutput {
    /// <p>The organization ID.</p>
    pub organization_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateOrganizationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOrganizationOutput");
        formatter.field("organization_id", &self.organization_id);
        formatter.finish()
    }
}
/// See [`CreateOrganizationOutput`](crate::output::CreateOrganizationOutput)
pub mod create_organization_output {
    /// A builder for [`CreateOrganizationOutput`](crate::output::CreateOrganizationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) organization_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The organization ID.</p>
        pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.organization_id = Some(input.into());
            self
        }
        /// <p>The organization ID.</p>
        pub fn set_organization_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.organization_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateOrganizationOutput`](crate::output::CreateOrganizationOutput)
        pub fn build(self) -> crate::output::CreateOrganizationOutput {
            crate::output::CreateOrganizationOutput {
                organization_id: self.organization_id,
            }
        }
    }
}
impl CreateOrganizationOutput {
    /// Creates a new builder-style object to manufacture [`CreateOrganizationOutput`](crate::output::CreateOrganizationOutput)
    pub fn builder() -> crate::output::create_organization_output::Builder {
        crate::output::create_organization_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateMobileDeviceAccessRuleOutput {
    /// <p>The identifier for the newly created mobile device access rule.</p>
    pub mobile_device_access_rule_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateMobileDeviceAccessRuleOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateMobileDeviceAccessRuleOutput");
        formatter.field(
            "mobile_device_access_rule_id",
            &self.mobile_device_access_rule_id,
        );
        formatter.finish()
    }
}
/// See [`CreateMobileDeviceAccessRuleOutput`](crate::output::CreateMobileDeviceAccessRuleOutput)
pub mod create_mobile_device_access_rule_output {
    /// A builder for [`CreateMobileDeviceAccessRuleOutput`](crate::output::CreateMobileDeviceAccessRuleOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) mobile_device_access_rule_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the newly created mobile device access rule.</p>
        pub fn mobile_device_access_rule_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.mobile_device_access_rule_id = Some(input.into());
            self
        }
        /// <p>The identifier for the newly created mobile device access rule.</p>
        pub fn set_mobile_device_access_rule_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.mobile_device_access_rule_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMobileDeviceAccessRuleOutput`](crate::output::CreateMobileDeviceAccessRuleOutput)
        pub fn build(self) -> crate::output::CreateMobileDeviceAccessRuleOutput {
            crate::output::CreateMobileDeviceAccessRuleOutput {
                mobile_device_access_rule_id: self.mobile_device_access_rule_id,
            }
        }
    }
}
impl CreateMobileDeviceAccessRuleOutput {
    /// Creates a new builder-style object to manufacture [`CreateMobileDeviceAccessRuleOutput`](crate::output::CreateMobileDeviceAccessRuleOutput)
    pub fn builder() -> crate::output::create_mobile_device_access_rule_output::Builder {
        crate::output::create_mobile_device_access_rule_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGroupOutput {
    /// <p>The identifier of the group.</p>
    pub group_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGroupOutput");
        formatter.field("group_id", &self.group_id);
        formatter.finish()
    }
}
/// See [`CreateGroupOutput`](crate::output::CreateGroupOutput)
pub mod create_group_output {
    /// A builder for [`CreateGroupOutput`](crate::output::CreateGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) group_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the group.</p>
        pub fn group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.group_id = Some(input.into());
            self
        }
        /// <p>The identifier of the group.</p>
        pub fn set_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.group_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGroupOutput`](crate::output::CreateGroupOutput)
        pub fn build(self) -> crate::output::CreateGroupOutput {
            crate::output::CreateGroupOutput {
                group_id: self.group_id,
            }
        }
    }
}
impl CreateGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateGroupOutput`](crate::output::CreateGroupOutput)
    pub fn builder() -> crate::output::create_group_output::Builder {
        crate::output::create_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateAliasOutput {}
impl std::fmt::Debug for CreateAliasOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAliasOutput");
        formatter.finish()
    }
}
/// See [`CreateAliasOutput`](crate::output::CreateAliasOutput)
pub mod create_alias_output {
    /// A builder for [`CreateAliasOutput`](crate::output::CreateAliasOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateAliasOutput`](crate::output::CreateAliasOutput)
        pub fn build(self) -> crate::output::CreateAliasOutput {
            crate::output::CreateAliasOutput {}
        }
    }
}
impl CreateAliasOutput {
    /// Creates a new builder-style object to manufacture [`CreateAliasOutput`](crate::output::CreateAliasOutput)
    pub fn builder() -> crate::output::create_alias_output::Builder {
        crate::output::create_alias_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelMailboxExportJobOutput {}
impl std::fmt::Debug for CancelMailboxExportJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelMailboxExportJobOutput");
        formatter.finish()
    }
}
/// See [`CancelMailboxExportJobOutput`](crate::output::CancelMailboxExportJobOutput)
pub mod cancel_mailbox_export_job_output {
    /// A builder for [`CancelMailboxExportJobOutput`](crate::output::CancelMailboxExportJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CancelMailboxExportJobOutput`](crate::output::CancelMailboxExportJobOutput)
        pub fn build(self) -> crate::output::CancelMailboxExportJobOutput {
            crate::output::CancelMailboxExportJobOutput {}
        }
    }
}
impl CancelMailboxExportJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelMailboxExportJobOutput`](crate::output::CancelMailboxExportJobOutput)
    pub fn builder() -> crate::output::cancel_mailbox_export_job_output::Builder {
        crate::output::cancel_mailbox_export_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateMemberToGroupOutput {}
impl std::fmt::Debug for AssociateMemberToGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateMemberToGroupOutput");
        formatter.finish()
    }
}
/// See [`AssociateMemberToGroupOutput`](crate::output::AssociateMemberToGroupOutput)
pub mod associate_member_to_group_output {
    /// A builder for [`AssociateMemberToGroupOutput`](crate::output::AssociateMemberToGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateMemberToGroupOutput`](crate::output::AssociateMemberToGroupOutput)
        pub fn build(self) -> crate::output::AssociateMemberToGroupOutput {
            crate::output::AssociateMemberToGroupOutput {}
        }
    }
}
impl AssociateMemberToGroupOutput {
    /// Creates a new builder-style object to manufacture [`AssociateMemberToGroupOutput`](crate::output::AssociateMemberToGroupOutput)
    pub fn builder() -> crate::output::associate_member_to_group_output::Builder {
        crate::output::associate_member_to_group_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateDelegateToResourceOutput {}
impl std::fmt::Debug for AssociateDelegateToResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateDelegateToResourceOutput");
        formatter.finish()
    }
}
/// See [`AssociateDelegateToResourceOutput`](crate::output::AssociateDelegateToResourceOutput)
pub mod associate_delegate_to_resource_output {
    /// A builder for [`AssociateDelegateToResourceOutput`](crate::output::AssociateDelegateToResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDelegateToResourceOutput`](crate::output::AssociateDelegateToResourceOutput)
        pub fn build(self) -> crate::output::AssociateDelegateToResourceOutput {
            crate::output::AssociateDelegateToResourceOutput {}
        }
    }
}
impl AssociateDelegateToResourceOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDelegateToResourceOutput`](crate::output::AssociateDelegateToResourceOutput)
    pub fn builder() -> crate::output::associate_delegate_to_resource_output::Builder {
        crate::output::associate_delegate_to_resource_output::Builder::default()
    }
}
