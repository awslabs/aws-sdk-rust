// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AssociateDelegateToResourceError {
    pub kind: AssociateDelegateToResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AssociateDelegateToResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AssociateDelegateToResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AssociateDelegateToResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            AssociateDelegateToResourceErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            AssociateDelegateToResourceErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            AssociateDelegateToResourceErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            AssociateDelegateToResourceErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            AssociateDelegateToResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AssociateDelegateToResourceError {
    fn code(&self) -> Option<&str> {
        AssociateDelegateToResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AssociateDelegateToResourceError {
    pub fn new(kind: AssociateDelegateToResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AssociateDelegateToResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AssociateDelegateToResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateDelegateToResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateDelegateToResourceErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateDelegateToResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateDelegateToResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateDelegateToResourceErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for AssociateDelegateToResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AssociateDelegateToResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            AssociateDelegateToResourceErrorKind::EntityStateException(_inner) => Some(_inner),
            AssociateDelegateToResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AssociateDelegateToResourceErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            AssociateDelegateToResourceErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            AssociateDelegateToResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AssociateMemberToGroupError {
    pub kind: AssociateMemberToGroupErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AssociateMemberToGroupErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AssociateMemberToGroupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AssociateMemberToGroupErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            AssociateMemberToGroupErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AssociateMemberToGroupError {
    fn code(&self) -> Option<&str> {
        AssociateMemberToGroupError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AssociateMemberToGroupError {
    pub fn new(kind: AssociateMemberToGroupErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AssociateMemberToGroupErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AssociateMemberToGroupErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            AssociateMemberToGroupErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for AssociateMemberToGroupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AssociateMemberToGroupErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => Some(_inner),
            AssociateMemberToGroupErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::EntityStateException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::OrganizationStateException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            AssociateMemberToGroupErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CancelMailboxExportJobError {
    pub kind: CancelMailboxExportJobErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CancelMailboxExportJobErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CancelMailboxExportJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CancelMailboxExportJobErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            CancelMailboxExportJobErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CancelMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            CancelMailboxExportJobErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            CancelMailboxExportJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CancelMailboxExportJobError {
    fn code(&self) -> Option<&str> {
        CancelMailboxExportJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CancelMailboxExportJobError {
    pub fn new(kind: CancelMailboxExportJobErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CancelMailboxExportJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CancelMailboxExportJobErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelMailboxExportJobErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelMailboxExportJobErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelMailboxExportJobErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelMailboxExportJobErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for CancelMailboxExportJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CancelMailboxExportJobErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            CancelMailboxExportJobErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CancelMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            CancelMailboxExportJobErrorKind::OrganizationStateException(_inner) => Some(_inner),
            CancelMailboxExportJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateAliasError {
    pub kind: CreateAliasErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateAliasErrorKind {
    EmailAddressInUseException(crate::error::EmailAddressInUseException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    MailDomainStateException(crate::error::MailDomainStateException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateAliasError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateAliasErrorKind::EmailAddressInUseException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::MailDomainNotFoundException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::MailDomainStateException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateAliasError {
    fn code(&self) -> Option<&str> {
        CreateAliasError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateAliasError {
    pub fn new(kind: CreateAliasErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateAliasErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateAliasErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_email_address_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::EmailAddressInUseException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, CreateAliasErrorKind::EntityNotFoundException(_))
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, CreateAliasErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(&self.kind, CreateAliasErrorKind::LimitExceededException(_))
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_mail_domain_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::MailDomainStateException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for CreateAliasError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateAliasErrorKind::EmailAddressInUseException(_inner) => Some(_inner),
            CreateAliasErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            CreateAliasErrorKind::EntityStateException(_inner) => Some(_inner),
            CreateAliasErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateAliasErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateAliasErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            CreateAliasErrorKind::MailDomainStateException(_inner) => Some(_inner),
            CreateAliasErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            CreateAliasErrorKind::OrganizationStateException(_inner) => Some(_inner),
            CreateAliasErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateGroupError {
    pub kind: CreateGroupErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateGroupErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidParameterException(crate::error::InvalidParameterException),
    NameAvailabilityException(crate::error::NameAvailabilityException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    ReservedNameException(crate::error::ReservedNameException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateGroupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateGroupErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            CreateGroupErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::NameAvailabilityException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::ReservedNameException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateGroupErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateGroupError {
    fn code(&self) -> Option<&str> {
        CreateGroupError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateGroupError {
    pub fn new(kind: CreateGroupErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateGroupErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateGroupErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_name_availability_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::NameAvailabilityException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_reserved_name_exception(&self) -> bool {
        matches!(&self.kind, CreateGroupErrorKind::ReservedNameException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateGroupErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateGroupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateGroupErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            CreateGroupErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            CreateGroupErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateGroupErrorKind::NameAvailabilityException(_inner) => Some(_inner),
            CreateGroupErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            CreateGroupErrorKind::OrganizationStateException(_inner) => Some(_inner),
            CreateGroupErrorKind::ReservedNameException(_inner) => Some(_inner),
            CreateGroupErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateGroupErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateMobileDeviceAccessRuleError {
    pub kind: CreateMobileDeviceAccessRuleErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateMobileDeviceAccessRuleErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateMobileDeviceAccessRuleError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            CreateMobileDeviceAccessRuleErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            CreateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            CreateMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateMobileDeviceAccessRuleError {
    fn code(&self) -> Option<&str> {
        CreateMobileDeviceAccessRuleError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateMobileDeviceAccessRuleError {
    pub fn new(kind: CreateMobileDeviceAccessRuleErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMobileDeviceAccessRuleErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for CreateMobileDeviceAccessRuleError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            CreateMobileDeviceAccessRuleErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            CreateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            CreateMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateOrganizationError {
    pub kind: CreateOrganizationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateOrganizationErrorKind {
    DirectoryInUseException(crate::error::DirectoryInUseException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    NameAvailabilityException(crate::error::NameAvailabilityException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateOrganizationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateOrganizationErrorKind::DirectoryInUseException(_inner) => _inner.fmt(f),
            CreateOrganizationErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            CreateOrganizationErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateOrganizationErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateOrganizationErrorKind::NameAvailabilityException(_inner) => _inner.fmt(f),
            CreateOrganizationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateOrganizationError {
    fn code(&self) -> Option<&str> {
        CreateOrganizationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateOrganizationError {
    pub fn new(kind: CreateOrganizationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateOrganizationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateOrganizationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateOrganizationErrorKind::DirectoryInUseException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateOrganizationErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateOrganizationErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateOrganizationErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_name_availability_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateOrganizationErrorKind::NameAvailabilityException(_)
        )
    }
}
impl std::error::Error for CreateOrganizationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateOrganizationErrorKind::DirectoryInUseException(_inner) => Some(_inner),
            CreateOrganizationErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            CreateOrganizationErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateOrganizationErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateOrganizationErrorKind::NameAvailabilityException(_inner) => Some(_inner),
            CreateOrganizationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateResourceError {
    pub kind: CreateResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateResourceErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidParameterException(crate::error::InvalidParameterException),
    NameAvailabilityException(crate::error::NameAvailabilityException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    ReservedNameException(crate::error::ReservedNameException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateResourceErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            CreateResourceErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::NameAvailabilityException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::ReservedNameException(_inner) => _inner.fmt(f),
            CreateResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateResourceError {
    fn code(&self) -> Option<&str> {
        CreateResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateResourceError {
    pub fn new(kind: CreateResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_name_availability_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::NameAvailabilityException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_reserved_name_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateResourceErrorKind::ReservedNameException(_)
        )
    }
}
impl std::error::Error for CreateResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateResourceErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            CreateResourceErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            CreateResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateResourceErrorKind::NameAvailabilityException(_inner) => Some(_inner),
            CreateResourceErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            CreateResourceErrorKind::OrganizationStateException(_inner) => Some(_inner),
            CreateResourceErrorKind::ReservedNameException(_inner) => Some(_inner),
            CreateResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateUserError {
    pub kind: CreateUserErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateUserErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidParameterException(crate::error::InvalidParameterException),
    InvalidPasswordException(crate::error::InvalidPasswordException),
    NameAvailabilityException(crate::error::NameAvailabilityException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    ReservedNameException(crate::error::ReservedNameException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateUserError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateUserErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            CreateUserErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::InvalidPasswordException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::NameAvailabilityException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::ReservedNameException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateUserErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateUserError {
    fn code(&self) -> Option<&str> {
        CreateUserError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateUserError {
    pub fn new(kind: CreateUserErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateUserErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateUserErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_invalid_password_exception(&self) -> bool {
        matches!(&self.kind, CreateUserErrorKind::InvalidPasswordException(_))
    }
    pub fn is_name_availability_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::NameAvailabilityException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_reserved_name_exception(&self) -> bool {
        matches!(&self.kind, CreateUserErrorKind::ReservedNameException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateUserErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateUserError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateUserErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            CreateUserErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            CreateUserErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateUserErrorKind::InvalidPasswordException(_inner) => Some(_inner),
            CreateUserErrorKind::NameAvailabilityException(_inner) => Some(_inner),
            CreateUserErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            CreateUserErrorKind::OrganizationStateException(_inner) => Some(_inner),
            CreateUserErrorKind::ReservedNameException(_inner) => Some(_inner),
            CreateUserErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateUserErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteAccessControlRuleError {
    pub kind: DeleteAccessControlRuleErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteAccessControlRuleErrorKind {
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteAccessControlRuleError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteAccessControlRuleErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteAccessControlRuleErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteAccessControlRuleErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteAccessControlRuleError {
    fn code(&self) -> Option<&str> {
        DeleteAccessControlRuleError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteAccessControlRuleError {
    pub fn new(kind: DeleteAccessControlRuleErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteAccessControlRuleErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteAccessControlRuleErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAccessControlRuleErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAccessControlRuleErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteAccessControlRuleError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteAccessControlRuleErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteAccessControlRuleErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteAccessControlRuleErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteAliasError {
    pub kind: DeleteAliasErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteAliasErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteAliasError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteAliasErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DeleteAliasErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeleteAliasErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteAliasErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteAliasErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteAliasErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteAliasError {
    fn code(&self) -> Option<&str> {
        DeleteAliasError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteAliasError {
    pub fn new(kind: DeleteAliasErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteAliasErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteAliasErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, DeleteAliasErrorKind::EntityNotFoundException(_))
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, DeleteAliasErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAliasErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAliasErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteAliasErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteAliasError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteAliasErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DeleteAliasErrorKind::EntityStateException(_inner) => Some(_inner),
            DeleteAliasErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteAliasErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteAliasErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteAliasErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteGroupError {
    pub kind: DeleteGroupErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteGroupErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteGroupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteGroupErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            DeleteGroupErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DeleteGroupErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteGroupError {
    fn code(&self) -> Option<&str> {
        DeleteGroupError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteGroupError {
    pub fn new(kind: DeleteGroupErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteGroupErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteGroupErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, DeleteGroupErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteGroupErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteGroupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteGroupErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            DeleteGroupErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            DeleteGroupErrorKind::EntityStateException(_inner) => Some(_inner),
            DeleteGroupErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteGroupErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteGroupErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteGroupErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DeleteGroupErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteMailboxPermissionsError {
    pub kind: DeleteMailboxPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteMailboxPermissionsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteMailboxPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DeleteMailboxPermissionsErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeleteMailboxPermissionsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMailboxPermissionsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteMailboxPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteMailboxPermissionsError {
    fn code(&self) -> Option<&str> {
        DeleteMailboxPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteMailboxPermissionsError {
    pub fn new(kind: DeleteMailboxPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteMailboxPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteMailboxPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMailboxPermissionsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMailboxPermissionsErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMailboxPermissionsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMailboxPermissionsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMailboxPermissionsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteMailboxPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DeleteMailboxPermissionsErrorKind::EntityStateException(_inner) => Some(_inner),
            DeleteMailboxPermissionsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DeleteMailboxPermissionsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteMailboxPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteMobileDeviceAccessOverrideError {
    pub kind: DeleteMobileDeviceAccessOverrideErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteMobileDeviceAccessOverrideErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteMobileDeviceAccessOverrideError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteMobileDeviceAccessOverrideError {
    fn code(&self) -> Option<&str> {
        DeleteMobileDeviceAccessOverrideError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteMobileDeviceAccessOverrideError {
    pub fn new(kind: DeleteMobileDeviceAccessOverrideErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteMobileDeviceAccessOverrideError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteMobileDeviceAccessRuleError {
    pub kind: DeleteMobileDeviceAccessRuleErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteMobileDeviceAccessRuleErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteMobileDeviceAccessRuleError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            DeleteMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteMobileDeviceAccessRuleError {
    fn code(&self) -> Option<&str> {
        DeleteMobileDeviceAccessRuleError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteMobileDeviceAccessRuleError {
    pub fn new(kind: DeleteMobileDeviceAccessRuleErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessRuleErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteMobileDeviceAccessRuleError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            DeleteMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteOrganizationError {
    pub kind: DeleteOrganizationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteOrganizationErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteOrganizationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteOrganizationErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteOrganizationErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteOrganizationErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteOrganizationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteOrganizationError {
    fn code(&self) -> Option<&str> {
        DeleteOrganizationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteOrganizationError {
    pub fn new(kind: DeleteOrganizationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteOrganizationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteOrganizationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteOrganizationErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteOrganizationErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteOrganizationErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteOrganizationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteOrganizationErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteOrganizationErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteOrganizationErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteOrganizationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteResourceError {
    pub kind: DeleteResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteResourceErrorKind {
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteResourceErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeleteResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteResourceErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteResourceErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteResourceError {
    fn code(&self) -> Option<&str> {
        DeleteResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteResourceError {
    pub fn new(kind: DeleteResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, DeleteResourceErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteResourceErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteResourceErrorKind::EntityStateException(_inner) => Some(_inner),
            DeleteResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteResourceErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteResourceErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteRetentionPolicyError {
    pub kind: DeleteRetentionPolicyErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteRetentionPolicyErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteRetentionPolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteRetentionPolicyErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteRetentionPolicyErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteRetentionPolicyErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteRetentionPolicyError {
    fn code(&self) -> Option<&str> {
        DeleteRetentionPolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteRetentionPolicyError {
    pub fn new(kind: DeleteRetentionPolicyErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteRetentionPolicyErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteRetentionPolicyErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteRetentionPolicyErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteRetentionPolicyErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteRetentionPolicyErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeleteRetentionPolicyError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteRetentionPolicyErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteRetentionPolicyErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteRetentionPolicyErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteUserError {
    pub kind: DeleteUserErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteUserErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteUserError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteUserErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            DeleteUserErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DeleteUserErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteUserError {
    fn code(&self) -> Option<&str> {
        DeleteUserError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteUserError {
    pub fn new(kind: DeleteUserErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteUserErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteUserErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, DeleteUserErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteUserErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteUserError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteUserErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            DeleteUserErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            DeleteUserErrorKind::EntityStateException(_inner) => Some(_inner),
            DeleteUserErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteUserErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeleteUserErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeleteUserErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DeleteUserErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterFromWorkMailError {
    pub kind: DeregisterFromWorkMailErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterFromWorkMailErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterFromWorkMailError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterFromWorkMailErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DeregisterFromWorkMailErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DeregisterFromWorkMailErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeregisterFromWorkMailErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeregisterFromWorkMailErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeregisterFromWorkMailErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterFromWorkMailError {
    fn code(&self) -> Option<&str> {
        DeregisterFromWorkMailError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterFromWorkMailError {
    pub fn new(kind: DeregisterFromWorkMailErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterFromWorkMailErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterFromWorkMailErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterFromWorkMailErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterFromWorkMailErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterFromWorkMailErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterFromWorkMailErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterFromWorkMailErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeregisterFromWorkMailError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterFromWorkMailErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DeregisterFromWorkMailErrorKind::EntityStateException(_inner) => Some(_inner),
            DeregisterFromWorkMailErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeregisterFromWorkMailErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeregisterFromWorkMailErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeregisterFromWorkMailErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterMailDomainError {
    pub kind: DeregisterMailDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterMailDomainErrorKind {
    InvalidCustomSesConfigurationException(crate::error::InvalidCustomSesConfigurationException),
    InvalidParameterException(crate::error::InvalidParameterException),
    MailDomainInUseException(crate::error::MailDomainInUseException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterMailDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterMailDomainErrorKind::InvalidCustomSesConfigurationException(_inner) => {
                _inner.fmt(f)
            }
            DeregisterMailDomainErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeregisterMailDomainErrorKind::MailDomainInUseException(_inner) => _inner.fmt(f),
            DeregisterMailDomainErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DeregisterMailDomainErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DeregisterMailDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterMailDomainError {
    fn code(&self) -> Option<&str> {
        DeregisterMailDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterMailDomainError {
    pub fn new(kind: DeregisterMailDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterMailDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterMailDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_custom_ses_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterMailDomainErrorKind::InvalidCustomSesConfigurationException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterMailDomainErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_mail_domain_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterMailDomainErrorKind::MailDomainInUseException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterMailDomainErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterMailDomainErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DeregisterMailDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterMailDomainErrorKind::InvalidCustomSesConfigurationException(_inner) => {
                Some(_inner)
            }
            DeregisterMailDomainErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeregisterMailDomainErrorKind::MailDomainInUseException(_inner) => Some(_inner),
            DeregisterMailDomainErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DeregisterMailDomainErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DeregisterMailDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeGroupError {
    pub kind: DescribeGroupErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeGroupErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeGroupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeGroupErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DescribeGroupErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeGroupErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DescribeGroupErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DescribeGroupErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeGroupError {
    fn code(&self) -> Option<&str> {
        DescribeGroupError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeGroupError {
    pub fn new(kind: DescribeGroupErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeGroupErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeGroupErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeGroupErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeGroupErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeGroupErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeGroupErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DescribeGroupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeGroupErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DescribeGroupErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeGroupErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DescribeGroupErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DescribeGroupErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeInboundDmarcSettingsError {
    pub kind: DescribeInboundDmarcSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeInboundDmarcSettingsErrorKind {
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeInboundDmarcSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeInboundDmarcSettingsErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            DescribeInboundDmarcSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeInboundDmarcSettingsError {
    fn code(&self) -> Option<&str> {
        DescribeInboundDmarcSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeInboundDmarcSettingsError {
    pub fn new(kind: DescribeInboundDmarcSettingsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeInboundDmarcSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeInboundDmarcSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeInboundDmarcSettingsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DescribeInboundDmarcSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeInboundDmarcSettingsErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            DescribeInboundDmarcSettingsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeMailboxExportJobError {
    pub kind: DescribeMailboxExportJobErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeMailboxExportJobErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeMailboxExportJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeMailboxExportJobErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DescribeMailboxExportJobErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeMailboxExportJobErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DescribeMailboxExportJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeMailboxExportJobError {
    fn code(&self) -> Option<&str> {
        DescribeMailboxExportJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeMailboxExportJobError {
    pub fn new(kind: DescribeMailboxExportJobErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeMailboxExportJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeMailboxExportJobErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeMailboxExportJobErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeMailboxExportJobErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeMailboxExportJobErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeMailboxExportJobErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DescribeMailboxExportJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeMailboxExportJobErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DescribeMailboxExportJobErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DescribeMailboxExportJobErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DescribeMailboxExportJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeOrganizationError {
    pub kind: DescribeOrganizationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeOrganizationErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeOrganizationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeOrganizationErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeOrganizationErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DescribeOrganizationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeOrganizationError {
    fn code(&self) -> Option<&str> {
        DescribeOrganizationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeOrganizationError {
    pub fn new(kind: DescribeOrganizationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeOrganizationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeOrganizationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeOrganizationErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeOrganizationErrorKind::OrganizationNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeOrganizationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeOrganizationErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeOrganizationErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DescribeOrganizationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeResourceError {
    pub kind: DescribeResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DescribeResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeResourceError {
    fn code(&self) -> Option<&str> {
        DescribeResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeResourceError {
    pub fn new(kind: DescribeResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeResourceErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DescribeResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DescribeResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeResourceErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DescribeResourceErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DescribeResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeUserError {
    pub kind: DescribeUserErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeUserErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeUserError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeUserErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DescribeUserErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeUserErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            DescribeUserErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            DescribeUserErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeUserError {
    fn code(&self) -> Option<&str> {
        DescribeUserError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeUserError {
    pub fn new(kind: DescribeUserErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeUserErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeUserErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeUserErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeUserErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeUserErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeUserErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DescribeUserError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeUserErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DescribeUserErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeUserErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            DescribeUserErrorKind::OrganizationStateException(_inner) => Some(_inner),
            DescribeUserErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisassociateDelegateFromResourceError {
    pub kind: DisassociateDelegateFromResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisassociateDelegateFromResourceErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisassociateDelegateFromResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisassociateDelegateFromResourceErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateDelegateFromResourceErrorKind::EntityStateException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateDelegateFromResourceErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateDelegateFromResourceErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateDelegateFromResourceErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateDelegateFromResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisassociateDelegateFromResourceError {
    fn code(&self) -> Option<&str> {
        DisassociateDelegateFromResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisassociateDelegateFromResourceError {
    pub fn new(kind: DisassociateDelegateFromResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisassociateDelegateFromResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisassociateDelegateFromResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateDelegateFromResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateDelegateFromResourceErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateDelegateFromResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateDelegateFromResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateDelegateFromResourceErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for DisassociateDelegateFromResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisassociateDelegateFromResourceErrorKind::EntityNotFoundException(_inner) => {
                Some(_inner)
            }
            DisassociateDelegateFromResourceErrorKind::EntityStateException(_inner) => Some(_inner),
            DisassociateDelegateFromResourceErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            DisassociateDelegateFromResourceErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DisassociateDelegateFromResourceErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            DisassociateDelegateFromResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisassociateMemberFromGroupError {
    pub kind: DisassociateMemberFromGroupErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisassociateMemberFromGroupErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisassociateMemberFromGroupError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisassociateMemberFromGroupErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => _inner.fmt(f),
            DisassociateMemberFromGroupErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateMemberFromGroupErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            DisassociateMemberFromGroupErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            DisassociateMemberFromGroupErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateMemberFromGroupErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateMemberFromGroupErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateMemberFromGroupErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DisassociateMemberFromGroupErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisassociateMemberFromGroupError {
    fn code(&self) -> Option<&str> {
        DisassociateMemberFromGroupError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisassociateMemberFromGroupError {
    pub fn new(kind: DisassociateMemberFromGroupErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisassociateMemberFromGroupErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisassociateMemberFromGroupErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisassociateMemberFromGroupErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DisassociateMemberFromGroupError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisassociateMemberFromGroupErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => Some(_inner),
            DisassociateMemberFromGroupErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            DisassociateMemberFromGroupErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            DisassociateMemberFromGroupErrorKind::EntityStateException(_inner) => Some(_inner),
            DisassociateMemberFromGroupErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DisassociateMemberFromGroupErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            DisassociateMemberFromGroupErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            DisassociateMemberFromGroupErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DisassociateMemberFromGroupErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetAccessControlEffectError {
    pub kind: GetAccessControlEffectErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetAccessControlEffectErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetAccessControlEffectError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetAccessControlEffectErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetAccessControlEffectErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetAccessControlEffectErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            GetAccessControlEffectErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            GetAccessControlEffectErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetAccessControlEffectError {
    fn code(&self) -> Option<&str> {
        GetAccessControlEffectError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetAccessControlEffectError {
    pub fn new(kind: GetAccessControlEffectErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetAccessControlEffectErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetAccessControlEffectErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetAccessControlEffectErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetAccessControlEffectErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetAccessControlEffectErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetAccessControlEffectErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for GetAccessControlEffectError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetAccessControlEffectErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetAccessControlEffectErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetAccessControlEffectErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            GetAccessControlEffectErrorKind::OrganizationStateException(_inner) => Some(_inner),
            GetAccessControlEffectErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetDefaultRetentionPolicyError {
    pub kind: GetDefaultRetentionPolicyErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetDefaultRetentionPolicyErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetDefaultRetentionPolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetDefaultRetentionPolicyErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetDefaultRetentionPolicyErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetDefaultRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetDefaultRetentionPolicyErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            GetDefaultRetentionPolicyErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetDefaultRetentionPolicyError {
    fn code(&self) -> Option<&str> {
        GetDefaultRetentionPolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetDefaultRetentionPolicyError {
    pub fn new(kind: GetDefaultRetentionPolicyErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetDefaultRetentionPolicyErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetDefaultRetentionPolicyErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDefaultRetentionPolicyErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDefaultRetentionPolicyErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDefaultRetentionPolicyErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDefaultRetentionPolicyErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for GetDefaultRetentionPolicyError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetDefaultRetentionPolicyErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetDefaultRetentionPolicyErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetDefaultRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            GetDefaultRetentionPolicyErrorKind::OrganizationStateException(_inner) => Some(_inner),
            GetDefaultRetentionPolicyErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetMailboxDetailsError {
    pub kind: GetMailboxDetailsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetMailboxDetailsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetMailboxDetailsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetMailboxDetailsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            GetMailboxDetailsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            GetMailboxDetailsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            GetMailboxDetailsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetMailboxDetailsError {
    fn code(&self) -> Option<&str> {
        GetMailboxDetailsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetMailboxDetailsError {
    pub fn new(kind: GetMailboxDetailsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetMailboxDetailsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetMailboxDetailsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailboxDetailsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailboxDetailsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailboxDetailsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for GetMailboxDetailsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetMailboxDetailsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetMailboxDetailsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            GetMailboxDetailsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            GetMailboxDetailsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetMailDomainError {
    pub kind: GetMailDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetMailDomainErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetMailDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetMailDomainErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            GetMailDomainErrorKind::MailDomainNotFoundException(_inner) => _inner.fmt(f),
            GetMailDomainErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            GetMailDomainErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            GetMailDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetMailDomainError {
    fn code(&self) -> Option<&str> {
        GetMailDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetMailDomainError {
    pub fn new(kind: GetMailDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetMailDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetMailDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailDomainErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailDomainErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailDomainErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMailDomainErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for GetMailDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetMailDomainErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetMailDomainErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            GetMailDomainErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            GetMailDomainErrorKind::OrganizationStateException(_inner) => Some(_inner),
            GetMailDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetMobileDeviceAccessEffectError {
    pub kind: GetMobileDeviceAccessEffectErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetMobileDeviceAccessEffectErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetMobileDeviceAccessEffectError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetMobileDeviceAccessEffectErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessEffectErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessEffectErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessEffectErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetMobileDeviceAccessEffectError {
    fn code(&self) -> Option<&str> {
        GetMobileDeviceAccessEffectError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetMobileDeviceAccessEffectError {
    pub fn new(kind: GetMobileDeviceAccessEffectErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetMobileDeviceAccessEffectErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetMobileDeviceAccessEffectErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessEffectErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessEffectErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessEffectErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for GetMobileDeviceAccessEffectError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetMobileDeviceAccessEffectErrorKind::InvalidParameterException(_inner) => Some(_inner),
            GetMobileDeviceAccessEffectErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessEffectErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessEffectErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetMobileDeviceAccessOverrideError {
    pub kind: GetMobileDeviceAccessOverrideErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetMobileDeviceAccessOverrideErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetMobileDeviceAccessOverrideError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessOverrideErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            GetMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetMobileDeviceAccessOverrideError {
    fn code(&self) -> Option<&str> {
        GetMobileDeviceAccessOverrideError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetMobileDeviceAccessOverrideError {
    pub fn new(kind: GetMobileDeviceAccessOverrideErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetMobileDeviceAccessOverrideErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for GetMobileDeviceAccessOverrideError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            GetMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessOverrideErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            GetMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListAccessControlRulesError {
    pub kind: ListAccessControlRulesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListAccessControlRulesErrorKind {
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListAccessControlRulesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListAccessControlRulesErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListAccessControlRulesErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListAccessControlRulesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListAccessControlRulesError {
    fn code(&self) -> Option<&str> {
        ListAccessControlRulesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListAccessControlRulesError {
    pub fn new(kind: ListAccessControlRulesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListAccessControlRulesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListAccessControlRulesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListAccessControlRulesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListAccessControlRulesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListAccessControlRulesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListAccessControlRulesErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListAccessControlRulesErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListAccessControlRulesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListAliasesError {
    pub kind: ListAliasesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListAliasesErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListAliasesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListAliasesErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListAliasesErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            ListAliasesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListAliasesErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListAliasesErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListAliasesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListAliasesError {
    fn code(&self) -> Option<&str> {
        ListAliasesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListAliasesError {
    pub fn new(kind: ListAliasesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListAliasesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListAliasesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, ListAliasesErrorKind::EntityNotFoundException(_))
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, ListAliasesErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListAliasesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListAliasesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListAliasesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListAliasesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListAliasesErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListAliasesErrorKind::EntityStateException(_inner) => Some(_inner),
            ListAliasesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListAliasesErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListAliasesErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListAliasesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListGroupMembersError {
    pub kind: ListGroupMembersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListGroupMembersErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListGroupMembersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListGroupMembersErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListGroupMembersErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            ListGroupMembersErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListGroupMembersErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListGroupMembersErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListGroupMembersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListGroupMembersError {
    fn code(&self) -> Option<&str> {
        ListGroupMembersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListGroupMembersError {
    pub fn new(kind: ListGroupMembersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListGroupMembersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListGroupMembersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupMembersErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupMembersErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupMembersErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupMembersErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupMembersErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListGroupMembersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListGroupMembersErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListGroupMembersErrorKind::EntityStateException(_inner) => Some(_inner),
            ListGroupMembersErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListGroupMembersErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListGroupMembersErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListGroupMembersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListGroupsError {
    pub kind: ListGroupsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListGroupsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListGroupsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListGroupsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListGroupsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListGroupsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListGroupsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListGroupsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListGroupsError {
    fn code(&self) -> Option<&str> {
        ListGroupsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListGroupsError {
    pub fn new(kind: ListGroupsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListGroupsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListGroupsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(&self.kind, ListGroupsErrorKind::EntityNotFoundException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListGroupsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListGroupsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListGroupsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListGroupsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListGroupsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListGroupsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListGroupsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListMailboxExportJobsError {
    pub kind: ListMailboxExportJobsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListMailboxExportJobsErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListMailboxExportJobsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListMailboxExportJobsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListMailboxExportJobsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListMailboxExportJobsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListMailboxExportJobsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListMailboxExportJobsError {
    fn code(&self) -> Option<&str> {
        ListMailboxExportJobsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListMailboxExportJobsError {
    pub fn new(kind: ListMailboxExportJobsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListMailboxExportJobsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListMailboxExportJobsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxExportJobsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxExportJobsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxExportJobsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListMailboxExportJobsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListMailboxExportJobsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListMailboxExportJobsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListMailboxExportJobsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListMailboxExportJobsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListMailboxPermissionsError {
    pub kind: ListMailboxPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListMailboxPermissionsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListMailboxPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListMailboxPermissionsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListMailboxPermissionsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListMailboxPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListMailboxPermissionsError {
    fn code(&self) -> Option<&str> {
        ListMailboxPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListMailboxPermissionsError {
    pub fn new(kind: ListMailboxPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListMailboxPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListMailboxPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxPermissionsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxPermissionsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxPermissionsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailboxPermissionsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListMailboxPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListMailboxPermissionsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListMailboxPermissionsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListMailboxPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListMailDomainsError {
    pub kind: ListMailDomainsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListMailDomainsErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListMailDomainsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListMailDomainsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListMailDomainsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListMailDomainsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListMailDomainsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListMailDomainsError {
    fn code(&self) -> Option<&str> {
        ListMailDomainsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListMailDomainsError {
    pub fn new(kind: ListMailDomainsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListMailDomainsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListMailDomainsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailDomainsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailDomainsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMailDomainsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListMailDomainsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListMailDomainsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListMailDomainsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListMailDomainsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListMailDomainsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListMobileDeviceAccessOverridesError {
    pub kind: ListMobileDeviceAccessOverridesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListMobileDeviceAccessOverridesErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListMobileDeviceAccessOverridesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListMobileDeviceAccessOverridesErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessOverridesErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessOverridesErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessOverridesErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessOverridesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListMobileDeviceAccessOverridesError {
    fn code(&self) -> Option<&str> {
        ListMobileDeviceAccessOverridesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListMobileDeviceAccessOverridesError {
    pub fn new(kind: ListMobileDeviceAccessOverridesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListMobileDeviceAccessOverridesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListMobileDeviceAccessOverridesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessOverridesErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessOverridesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessOverridesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessOverridesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListMobileDeviceAccessOverridesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListMobileDeviceAccessOverridesErrorKind::EntityNotFoundException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessOverridesErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessOverridesErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessOverridesErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessOverridesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListMobileDeviceAccessRulesError {
    pub kind: ListMobileDeviceAccessRulesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListMobileDeviceAccessRulesErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListMobileDeviceAccessRulesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListMobileDeviceAccessRulesErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessRulesErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessRulesErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            ListMobileDeviceAccessRulesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListMobileDeviceAccessRulesError {
    fn code(&self) -> Option<&str> {
        ListMobileDeviceAccessRulesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListMobileDeviceAccessRulesError {
    pub fn new(kind: ListMobileDeviceAccessRulesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListMobileDeviceAccessRulesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListMobileDeviceAccessRulesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessRulesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessRulesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListMobileDeviceAccessRulesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListMobileDeviceAccessRulesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListMobileDeviceAccessRulesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListMobileDeviceAccessRulesErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessRulesErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            ListMobileDeviceAccessRulesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListOrganizationsError {
    pub kind: ListOrganizationsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListOrganizationsErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListOrganizationsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListOrganizationsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListOrganizationsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListOrganizationsError {
    fn code(&self) -> Option<&str> {
        ListOrganizationsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListOrganizationsError {
    pub fn new(kind: ListOrganizationsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListOrganizationsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListOrganizationsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListOrganizationsErrorKind::InvalidParameterException(_)
        )
    }
}
impl std::error::Error for ListOrganizationsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListOrganizationsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListOrganizationsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListResourceDelegatesError {
    pub kind: ListResourceDelegatesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListResourceDelegatesErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListResourceDelegatesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListResourceDelegatesErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ListResourceDelegatesErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            ListResourceDelegatesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListResourceDelegatesErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListResourceDelegatesErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListResourceDelegatesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListResourceDelegatesError {
    fn code(&self) -> Option<&str> {
        ListResourceDelegatesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListResourceDelegatesError {
    pub fn new(kind: ListResourceDelegatesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListResourceDelegatesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListResourceDelegatesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourceDelegatesErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourceDelegatesErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourceDelegatesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourceDelegatesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourceDelegatesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListResourceDelegatesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListResourceDelegatesErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ListResourceDelegatesErrorKind::EntityStateException(_inner) => Some(_inner),
            ListResourceDelegatesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListResourceDelegatesErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListResourceDelegatesErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListResourceDelegatesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListResourcesError {
    pub kind: ListResourcesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListResourcesErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListResourcesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListResourcesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListResourcesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListResourcesError {
    fn code(&self) -> Option<&str> {
        ListResourcesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListResourcesError {
    pub fn new(kind: ListResourcesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListResourcesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListResourcesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourcesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourcesErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListResourcesErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListResourcesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListResourcesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListResourcesErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListResourcesErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListResourcesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListTagsForResourceError {
    pub kind: ListTagsForResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListTagsForResourceErrorKind {
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListTagsForResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListTagsForResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListTagsForResourceError {
    fn code(&self) -> Option<&str> {
        ListTagsForResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListTagsForResourceError {
    pub fn new(kind: ListTagsForResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for ListTagsForResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListTagsForResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListUsersError {
    pub kind: ListUsersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListUsersErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListUsersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListUsersErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListUsersErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ListUsersErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ListUsersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListUsersError {
    fn code(&self) -> Option<&str> {
        ListUsersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListUsersError {
    pub fn new(kind: ListUsersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListUsersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListUsersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(&self.kind, ListUsersErrorKind::InvalidParameterException(_))
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListUsersErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListUsersErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for ListUsersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListUsersErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListUsersErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ListUsersErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ListUsersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutAccessControlRuleError {
    pub kind: PutAccessControlRuleErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutAccessControlRuleErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutAccessControlRuleError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutAccessControlRuleErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            PutAccessControlRuleErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            PutAccessControlRuleErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            PutAccessControlRuleErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            PutAccessControlRuleErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            PutAccessControlRuleErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutAccessControlRuleError {
    fn code(&self) -> Option<&str> {
        PutAccessControlRuleError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutAccessControlRuleError {
    pub fn new(kind: PutAccessControlRuleErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutAccessControlRuleErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutAccessControlRuleErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutAccessControlRuleErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutAccessControlRuleErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutAccessControlRuleErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutAccessControlRuleErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutAccessControlRuleErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for PutAccessControlRuleError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutAccessControlRuleErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            PutAccessControlRuleErrorKind::InvalidParameterException(_inner) => Some(_inner),
            PutAccessControlRuleErrorKind::LimitExceededException(_inner) => Some(_inner),
            PutAccessControlRuleErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            PutAccessControlRuleErrorKind::OrganizationStateException(_inner) => Some(_inner),
            PutAccessControlRuleErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutInboundDmarcSettingsError {
    pub kind: PutInboundDmarcSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutInboundDmarcSettingsErrorKind {
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutInboundDmarcSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            PutInboundDmarcSettingsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            PutInboundDmarcSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutInboundDmarcSettingsError {
    fn code(&self) -> Option<&str> {
        PutInboundDmarcSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutInboundDmarcSettingsError {
    pub fn new(kind: PutInboundDmarcSettingsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutInboundDmarcSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutInboundDmarcSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutInboundDmarcSettingsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for PutInboundDmarcSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutInboundDmarcSettingsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            PutInboundDmarcSettingsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            PutInboundDmarcSettingsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutMailboxPermissionsError {
    pub kind: PutMailboxPermissionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutMailboxPermissionsErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutMailboxPermissionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            PutMailboxPermissionsErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            PutMailboxPermissionsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            PutMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            PutMailboxPermissionsErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            PutMailboxPermissionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutMailboxPermissionsError {
    fn code(&self) -> Option<&str> {
        PutMailboxPermissionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutMailboxPermissionsError {
    pub fn new(kind: PutMailboxPermissionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutMailboxPermissionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutMailboxPermissionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMailboxPermissionsErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMailboxPermissionsErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMailboxPermissionsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMailboxPermissionsErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMailboxPermissionsErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for PutMailboxPermissionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutMailboxPermissionsErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            PutMailboxPermissionsErrorKind::EntityStateException(_inner) => Some(_inner),
            PutMailboxPermissionsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            PutMailboxPermissionsErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            PutMailboxPermissionsErrorKind::OrganizationStateException(_inner) => Some(_inner),
            PutMailboxPermissionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutMobileDeviceAccessOverrideError {
    pub kind: PutMobileDeviceAccessOverrideErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutMobileDeviceAccessOverrideErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutMobileDeviceAccessOverrideError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            PutMobileDeviceAccessOverrideErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            PutMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            PutMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            PutMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            PutMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutMobileDeviceAccessOverrideError {
    fn code(&self) -> Option<&str> {
        PutMobileDeviceAccessOverrideError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutMobileDeviceAccessOverrideError {
    pub fn new(kind: PutMobileDeviceAccessOverrideErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutMobileDeviceAccessOverrideErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMobileDeviceAccessOverrideErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for PutMobileDeviceAccessOverrideError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutMobileDeviceAccessOverrideErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            PutMobileDeviceAccessOverrideErrorKind::EntityStateException(_inner) => Some(_inner),
            PutMobileDeviceAccessOverrideErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            PutMobileDeviceAccessOverrideErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            PutMobileDeviceAccessOverrideErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            PutMobileDeviceAccessOverrideErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PutRetentionPolicyError {
    pub kind: PutRetentionPolicyErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PutRetentionPolicyErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PutRetentionPolicyError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PutRetentionPolicyErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            PutRetentionPolicyErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            PutRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            PutRetentionPolicyErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            PutRetentionPolicyErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PutRetentionPolicyError {
    fn code(&self) -> Option<&str> {
        PutRetentionPolicyError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PutRetentionPolicyError {
    pub fn new(kind: PutRetentionPolicyErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PutRetentionPolicyErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PutRetentionPolicyErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutRetentionPolicyErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutRetentionPolicyErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutRetentionPolicyErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            PutRetentionPolicyErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for PutRetentionPolicyError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PutRetentionPolicyErrorKind::InvalidParameterException(_inner) => Some(_inner),
            PutRetentionPolicyErrorKind::LimitExceededException(_inner) => Some(_inner),
            PutRetentionPolicyErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            PutRetentionPolicyErrorKind::OrganizationStateException(_inner) => Some(_inner),
            PutRetentionPolicyErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterMailDomainError {
    pub kind: RegisterMailDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterMailDomainErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    MailDomainInUseException(crate::error::MailDomainInUseException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterMailDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterMailDomainErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RegisterMailDomainErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            RegisterMailDomainErrorKind::MailDomainInUseException(_inner) => _inner.fmt(f),
            RegisterMailDomainErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            RegisterMailDomainErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            RegisterMailDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterMailDomainError {
    fn code(&self) -> Option<&str> {
        RegisterMailDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterMailDomainError {
    pub fn new(kind: RegisterMailDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterMailDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterMailDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterMailDomainErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterMailDomainErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_mail_domain_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterMailDomainErrorKind::MailDomainInUseException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterMailDomainErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterMailDomainErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for RegisterMailDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterMailDomainErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RegisterMailDomainErrorKind::LimitExceededException(_inner) => Some(_inner),
            RegisterMailDomainErrorKind::MailDomainInUseException(_inner) => Some(_inner),
            RegisterMailDomainErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            RegisterMailDomainErrorKind::OrganizationStateException(_inner) => Some(_inner),
            RegisterMailDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterToWorkMailError {
    pub kind: RegisterToWorkMailErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterToWorkMailErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EmailAddressInUseException(crate::error::EmailAddressInUseException),
    EntityAlreadyRegisteredException(crate::error::EntityAlreadyRegisteredException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    MailDomainStateException(crate::error::MailDomainStateException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterToWorkMailError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterToWorkMailErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            RegisterToWorkMailErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::EmailAddressInUseException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::EntityAlreadyRegisteredException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::MailDomainNotFoundException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::MailDomainStateException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            RegisterToWorkMailErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterToWorkMailError {
    fn code(&self) -> Option<&str> {
        RegisterToWorkMailError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterToWorkMailError {
    pub fn new(kind: RegisterToWorkMailErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterToWorkMailErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterToWorkMailErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_email_address_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::EmailAddressInUseException(_)
        )
    }
    pub fn is_entity_already_registered_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::EntityAlreadyRegisteredException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_mail_domain_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::MailDomainStateException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterToWorkMailErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for RegisterToWorkMailError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterToWorkMailErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            RegisterToWorkMailErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::EmailAddressInUseException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::EntityAlreadyRegisteredException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::EntityStateException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::MailDomainStateException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::OrganizationStateException(_inner) => Some(_inner),
            RegisterToWorkMailErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ResetPasswordError {
    pub kind: ResetPasswordErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ResetPasswordErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    InvalidPasswordException(crate::error::InvalidPasswordException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ResetPasswordError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ResetPasswordErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                _inner.fmt(f)
            }
            ResetPasswordErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::InvalidPasswordException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            ResetPasswordErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ResetPasswordError {
    fn code(&self) -> Option<&str> {
        ResetPasswordError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ResetPasswordError {
    pub fn new(kind: ResetPasswordErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ResetPasswordErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ResetPasswordErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, ResetPasswordErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_invalid_password_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::InvalidPasswordException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetPasswordErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for ResetPasswordError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ResetPasswordErrorKind::DirectoryServiceAuthenticationFailedException(_inner) => {
                Some(_inner)
            }
            ResetPasswordErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            ResetPasswordErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            ResetPasswordErrorKind::EntityStateException(_inner) => Some(_inner),
            ResetPasswordErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ResetPasswordErrorKind::InvalidPasswordException(_inner) => Some(_inner),
            ResetPasswordErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            ResetPasswordErrorKind::OrganizationStateException(_inner) => Some(_inner),
            ResetPasswordErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            ResetPasswordErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartMailboxExportJobError {
    pub kind: StartMailboxExportJobErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartMailboxExportJobErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    LimitExceededException(crate::error::LimitExceededException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartMailboxExportJobError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartMailboxExportJobErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            StartMailboxExportJobErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            StartMailboxExportJobErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            StartMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            StartMailboxExportJobErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            StartMailboxExportJobErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartMailboxExportJobError {
    fn code(&self) -> Option<&str> {
        StartMailboxExportJobError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartMailboxExportJobError {
    pub fn new(kind: StartMailboxExportJobErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartMailboxExportJobErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartMailboxExportJobErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartMailboxExportJobErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartMailboxExportJobErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartMailboxExportJobErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartMailboxExportJobErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartMailboxExportJobErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for StartMailboxExportJobError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartMailboxExportJobErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            StartMailboxExportJobErrorKind::InvalidParameterException(_inner) => Some(_inner),
            StartMailboxExportJobErrorKind::LimitExceededException(_inner) => Some(_inner),
            StartMailboxExportJobErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            StartMailboxExportJobErrorKind::OrganizationStateException(_inner) => Some(_inner),
            StartMailboxExportJobErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct TagResourceError {
    pub kind: TagResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum TagResourceErrorKind {
    OrganizationStateException(crate::error::OrganizationStateException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for TagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            TagResourceErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::TooManyTagsException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for TagResourceError {
    fn code(&self) -> Option<&str> {
        TagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl TagResourceError {
    pub fn new(kind: TagResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: TagResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: TagResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourceErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourceErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_too_many_tags_exception(&self) -> bool {
        matches!(&self.kind, TagResourceErrorKind::TooManyTagsException(_))
    }
}
impl std::error::Error for TagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            TagResourceErrorKind::OrganizationStateException(_inner) => Some(_inner),
            TagResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            TagResourceErrorKind::TooManyTagsException(_inner) => Some(_inner),
            TagResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UntagResourceError {
    pub kind: UntagResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UntagResourceErrorKind {
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UntagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UntagResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UntagResourceError {
    fn code(&self) -> Option<&str> {
        UntagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UntagResourceError {
    pub fn new(kind: UntagResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UntagResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UntagResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourceErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for UntagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UntagResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UntagResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateDefaultMailDomainError {
    pub kind: UpdateDefaultMailDomainErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateDefaultMailDomainErrorKind {
    InvalidParameterException(crate::error::InvalidParameterException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    MailDomainStateException(crate::error::MailDomainStateException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateDefaultMailDomainError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateDefaultMailDomainErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdateDefaultMailDomainErrorKind::MailDomainNotFoundException(_inner) => _inner.fmt(f),
            UpdateDefaultMailDomainErrorKind::MailDomainStateException(_inner) => _inner.fmt(f),
            UpdateDefaultMailDomainErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdateDefaultMailDomainErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            UpdateDefaultMailDomainErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateDefaultMailDomainError {
    fn code(&self) -> Option<&str> {
        UpdateDefaultMailDomainError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateDefaultMailDomainError {
    pub fn new(kind: UpdateDefaultMailDomainErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateDefaultMailDomainErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateDefaultMailDomainErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDefaultMailDomainErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDefaultMailDomainErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_mail_domain_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDefaultMailDomainErrorKind::MailDomainStateException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDefaultMailDomainErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateDefaultMailDomainErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for UpdateDefaultMailDomainError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateDefaultMailDomainErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdateDefaultMailDomainErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            UpdateDefaultMailDomainErrorKind::MailDomainStateException(_inner) => Some(_inner),
            UpdateDefaultMailDomainErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            UpdateDefaultMailDomainErrorKind::OrganizationStateException(_inner) => Some(_inner),
            UpdateDefaultMailDomainErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateMailboxQuotaError {
    pub kind: UpdateMailboxQuotaErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateMailboxQuotaErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateMailboxQuotaError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateMailboxQuotaErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdateMailboxQuotaErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            UpdateMailboxQuotaErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdateMailboxQuotaErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            UpdateMailboxQuotaErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            UpdateMailboxQuotaErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateMailboxQuotaError {
    fn code(&self) -> Option<&str> {
        UpdateMailboxQuotaError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateMailboxQuotaError {
    pub fn new(kind: UpdateMailboxQuotaErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateMailboxQuotaErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateMailboxQuotaErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMailboxQuotaErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMailboxQuotaErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMailboxQuotaErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMailboxQuotaErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMailboxQuotaErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for UpdateMailboxQuotaError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateMailboxQuotaErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdateMailboxQuotaErrorKind::EntityStateException(_inner) => Some(_inner),
            UpdateMailboxQuotaErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdateMailboxQuotaErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            UpdateMailboxQuotaErrorKind::OrganizationStateException(_inner) => Some(_inner),
            UpdateMailboxQuotaErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateMobileDeviceAccessRuleError {
    pub kind: UpdateMobileDeviceAccessRuleErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateMobileDeviceAccessRuleErrorKind {
    EntityNotFoundException(crate::error::EntityNotFoundException),
    InvalidParameterException(crate::error::InvalidParameterException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateMobileDeviceAccessRuleError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateMobileDeviceAccessRuleErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                _inner.fmt(f)
            }
            UpdateMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateMobileDeviceAccessRuleError {
    fn code(&self) -> Option<&str> {
        UpdateMobileDeviceAccessRuleError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateMobileDeviceAccessRuleError {
    pub fn new(kind: UpdateMobileDeviceAccessRuleErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateMobileDeviceAccessRuleErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMobileDeviceAccessRuleErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for UpdateMobileDeviceAccessRuleError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateMobileDeviceAccessRuleErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdateMobileDeviceAccessRuleErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            UpdateMobileDeviceAccessRuleErrorKind::OrganizationStateException(_inner) => {
                Some(_inner)
            }
            UpdateMobileDeviceAccessRuleErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdatePrimaryEmailAddressError {
    pub kind: UpdatePrimaryEmailAddressErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdatePrimaryEmailAddressErrorKind {
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EmailAddressInUseException(crate::error::EmailAddressInUseException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    MailDomainStateException(crate::error::MailDomainStateException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdatePrimaryEmailAddressError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdatePrimaryEmailAddressErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            UpdatePrimaryEmailAddressErrorKind::EmailAddressInUseException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::MailDomainNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdatePrimaryEmailAddressErrorKind::MailDomainStateException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::OrganizationNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            UpdatePrimaryEmailAddressErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            UpdatePrimaryEmailAddressErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            UpdatePrimaryEmailAddressErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdatePrimaryEmailAddressError {
    fn code(&self) -> Option<&str> {
        UpdatePrimaryEmailAddressError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdatePrimaryEmailAddressError {
    pub fn new(kind: UpdatePrimaryEmailAddressErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdatePrimaryEmailAddressErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdatePrimaryEmailAddressErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_service_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::DirectoryServiceAuthenticationFailedException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_email_address_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::EmailAddressInUseException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::EntityStateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_mail_domain_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::MailDomainStateException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::OrganizationStateException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdatePrimaryEmailAddressErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for UpdatePrimaryEmailAddressError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdatePrimaryEmailAddressErrorKind::DirectoryServiceAuthenticationFailedException(
                _inner,
            ) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            UpdatePrimaryEmailAddressErrorKind::EmailAddressInUseException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::EntityStateException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::MailDomainStateException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::OrganizationNotFoundException(_inner) => {
                Some(_inner)
            }
            UpdatePrimaryEmailAddressErrorKind::OrganizationStateException(_inner) => Some(_inner),
            UpdatePrimaryEmailAddressErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            UpdatePrimaryEmailAddressErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateResourceError {
    pub kind: UpdateResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateResourceErrorKind {
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EmailAddressInUseException(crate::error::EmailAddressInUseException),
    EntityNotFoundException(crate::error::EntityNotFoundException),
    EntityStateException(crate::error::EntityStateException),
    InvalidConfigurationException(crate::error::InvalidConfigurationException),
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    MailDomainStateException(crate::error::MailDomainStateException),
    NameAvailabilityException(crate::error::NameAvailabilityException),
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    OrganizationStateException(crate::error::OrganizationStateException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateResourceErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::EmailAddressInUseException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::EntityNotFoundException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::EntityStateException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::InvalidConfigurationException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::MailDomainNotFoundException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::MailDomainStateException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::NameAvailabilityException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::OrganizationNotFoundException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::OrganizationStateException(_inner) => _inner.fmt(f),
            UpdateResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateResourceError {
    fn code(&self) -> Option<&str> {
        UpdateResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateResourceError {
    pub fn new(kind: UpdateResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_email_address_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::EmailAddressInUseException(_)
        )
    }
    pub fn is_entity_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::EntityNotFoundException(_)
        )
    }
    pub fn is_entity_state_exception(&self) -> bool {
        matches!(&self.kind, UpdateResourceErrorKind::EntityStateException(_))
    }
    pub fn is_invalid_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::InvalidConfigurationException(_)
        )
    }
    pub fn is_mail_domain_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::MailDomainNotFoundException(_)
        )
    }
    pub fn is_mail_domain_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::MailDomainStateException(_)
        )
    }
    pub fn is_name_availability_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::NameAvailabilityException(_)
        )
    }
    pub fn is_organization_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::OrganizationNotFoundException(_)
        )
    }
    pub fn is_organization_state_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateResourceErrorKind::OrganizationStateException(_)
        )
    }
}
impl std::error::Error for UpdateResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateResourceErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            UpdateResourceErrorKind::EmailAddressInUseException(_inner) => Some(_inner),
            UpdateResourceErrorKind::EntityNotFoundException(_inner) => Some(_inner),
            UpdateResourceErrorKind::EntityStateException(_inner) => Some(_inner),
            UpdateResourceErrorKind::InvalidConfigurationException(_inner) => Some(_inner),
            UpdateResourceErrorKind::MailDomainNotFoundException(_inner) => Some(_inner),
            UpdateResourceErrorKind::MailDomainStateException(_inner) => Some(_inner),
            UpdateResourceErrorKind::NameAvailabilityException(_inner) => Some(_inner),
            UpdateResourceErrorKind::OrganizationNotFoundException(_inner) => Some(_inner),
            UpdateResourceErrorKind::OrganizationStateException(_inner) => Some(_inner),
            UpdateResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The organization must have a valid state to perform certain
/// operations on the organization or its members.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OrganizationStateException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for OrganizationStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationStateException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl OrganizationStateException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for OrganizationStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "OrganizationStateException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for OrganizationStateException {}
/// See [`OrganizationStateException`](crate::error::OrganizationStateException)
pub mod organization_state_exception {
    /// A builder for [`OrganizationStateException`](crate::error::OrganizationStateException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`OrganizationStateException`](crate::error::OrganizationStateException)
        pub fn build(self) -> crate::error::OrganizationStateException {
            crate::error::OrganizationStateException {
                message: self.message,
            }
        }
    }
}
impl OrganizationStateException {
    /// Creates a new builder-style object to manufacture [`OrganizationStateException`](crate::error::OrganizationStateException)
    pub fn builder() -> crate::error::organization_state_exception::Builder {
        crate::error::organization_state_exception::Builder::default()
    }
}

/// <p>An operation received a valid organization identifier that either doesn't belong or
/// exist in the system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OrganizationNotFoundException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for OrganizationNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl OrganizationNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for OrganizationNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "OrganizationNotFoundException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for OrganizationNotFoundException {}
/// See [`OrganizationNotFoundException`](crate::error::OrganizationNotFoundException)
pub mod organization_not_found_exception {
    /// A builder for [`OrganizationNotFoundException`](crate::error::OrganizationNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`OrganizationNotFoundException`](crate::error::OrganizationNotFoundException)
        pub fn build(self) -> crate::error::OrganizationNotFoundException {
            crate::error::OrganizationNotFoundException {
                message: self.message,
            }
        }
    }
}
impl OrganizationNotFoundException {
    /// Creates a new builder-style object to manufacture [`OrganizationNotFoundException`](crate::error::OrganizationNotFoundException)
    pub fn builder() -> crate::error::organization_not_found_exception::Builder {
        crate::error::organization_not_found_exception::Builder::default()
    }
}

/// <p>The user, group, or resource name isn't unique in Amazon WorkMail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NameAvailabilityException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for NameAvailabilityException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NameAvailabilityException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl NameAvailabilityException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for NameAvailabilityException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "NameAvailabilityException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for NameAvailabilityException {}
/// See [`NameAvailabilityException`](crate::error::NameAvailabilityException)
pub mod name_availability_exception {
    /// A builder for [`NameAvailabilityException`](crate::error::NameAvailabilityException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`NameAvailabilityException`](crate::error::NameAvailabilityException)
        pub fn build(self) -> crate::error::NameAvailabilityException {
            crate::error::NameAvailabilityException {
                message: self.message,
            }
        }
    }
}
impl NameAvailabilityException {
    /// Creates a new builder-style object to manufacture [`NameAvailabilityException`](crate::error::NameAvailabilityException)
    pub fn builder() -> crate::error::name_availability_exception::Builder {
        crate::error::name_availability_exception::Builder::default()
    }
}

/// <p>After a domain has been added to the organization, it must be verified. The domain is
/// not yet verified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MailDomainStateException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for MailDomainStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MailDomainStateException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl MailDomainStateException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for MailDomainStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MailDomainStateException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for MailDomainStateException {}
/// See [`MailDomainStateException`](crate::error::MailDomainStateException)
pub mod mail_domain_state_exception {
    /// A builder for [`MailDomainStateException`](crate::error::MailDomainStateException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`MailDomainStateException`](crate::error::MailDomainStateException)
        pub fn build(self) -> crate::error::MailDomainStateException {
            crate::error::MailDomainStateException {
                message: self.message,
            }
        }
    }
}
impl MailDomainStateException {
    /// Creates a new builder-style object to manufacture [`MailDomainStateException`](crate::error::MailDomainStateException)
    pub fn builder() -> crate::error::mail_domain_state_exception::Builder {
        crate::error::mail_domain_state_exception::Builder::default()
    }
}

/// <p>The domain specified is not found in your organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MailDomainNotFoundException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for MailDomainNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MailDomainNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl MailDomainNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for MailDomainNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MailDomainNotFoundException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for MailDomainNotFoundException {}
/// See [`MailDomainNotFoundException`](crate::error::MailDomainNotFoundException)
pub mod mail_domain_not_found_exception {
    /// A builder for [`MailDomainNotFoundException`](crate::error::MailDomainNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`MailDomainNotFoundException`](crate::error::MailDomainNotFoundException)
        pub fn build(self) -> crate::error::MailDomainNotFoundException {
            crate::error::MailDomainNotFoundException {
                message: self.message,
            }
        }
    }
}
impl MailDomainNotFoundException {
    /// Creates a new builder-style object to manufacture [`MailDomainNotFoundException`](crate::error::MailDomainNotFoundException)
    pub fn builder() -> crate::error::mail_domain_not_found_exception::Builder {
        crate::error::mail_domain_not_found_exception::Builder::default()
    }
}

/// <p>The configuration for a resource isn't valid. A resource must either be able to
/// auto-respond to requests or have at least one delegate associated that can do so on its
/// behalf.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidConfigurationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidConfigurationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidConfigurationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidConfigurationException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidConfigurationException {}
/// See [`InvalidConfigurationException`](crate::error::InvalidConfigurationException)
pub mod invalid_configuration_exception {
    /// A builder for [`InvalidConfigurationException`](crate::error::InvalidConfigurationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidConfigurationException`](crate::error::InvalidConfigurationException)
        pub fn build(self) -> crate::error::InvalidConfigurationException {
            crate::error::InvalidConfigurationException {
                message: self.message,
            }
        }
    }
}
impl InvalidConfigurationException {
    /// Creates a new builder-style object to manufacture [`InvalidConfigurationException`](crate::error::InvalidConfigurationException)
    pub fn builder() -> crate::error::invalid_configuration_exception::Builder {
        crate::error::invalid_configuration_exception::Builder::default()
    }
}

/// <p>You are performing an operation on a user, group, or resource that isn't in the
/// expected state, such as trying to delete an active user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityStateException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityStateException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EntityStateException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityStateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityStateException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityStateException {}
/// See [`EntityStateException`](crate::error::EntityStateException)
pub mod entity_state_exception {
    /// A builder for [`EntityStateException`](crate::error::EntityStateException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityStateException`](crate::error::EntityStateException)
        pub fn build(self) -> crate::error::EntityStateException {
            crate::error::EntityStateException {
                message: self.message,
            }
        }
    }
}
impl EntityStateException {
    /// Creates a new builder-style object to manufacture [`EntityStateException`](crate::error::EntityStateException)
    pub fn builder() -> crate::error::entity_state_exception::Builder {
        crate::error::entity_state_exception::Builder::default()
    }
}

/// <p>The identifier supplied for the user, group, or resource does not exist in your
/// organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityNotFoundException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EntityNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityNotFoundException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityNotFoundException {}
/// See [`EntityNotFoundException`](crate::error::EntityNotFoundException)
pub mod entity_not_found_exception {
    /// A builder for [`EntityNotFoundException`](crate::error::EntityNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityNotFoundException`](crate::error::EntityNotFoundException)
        pub fn build(self) -> crate::error::EntityNotFoundException {
            crate::error::EntityNotFoundException {
                message: self.message,
            }
        }
    }
}
impl EntityNotFoundException {
    /// Creates a new builder-style object to manufacture [`EntityNotFoundException`](crate::error::EntityNotFoundException)
    pub fn builder() -> crate::error::entity_not_found_exception::Builder {
        crate::error::entity_not_found_exception::Builder::default()
    }
}

/// <p>The email address that you're trying to assign is already created for a different
/// user, group, or resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EmailAddressInUseException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EmailAddressInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EmailAddressInUseException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EmailAddressInUseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EmailAddressInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EmailAddressInUseException")?;
        if let Some(inner_9) = &self.message {
            write!(f, ": {}", inner_9)?;
        }
        Ok(())
    }
}
impl std::error::Error for EmailAddressInUseException {}
/// See [`EmailAddressInUseException`](crate::error::EmailAddressInUseException)
pub mod email_address_in_use_exception {
    /// A builder for [`EmailAddressInUseException`](crate::error::EmailAddressInUseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`EmailAddressInUseException`](crate::error::EmailAddressInUseException)
        pub fn build(self) -> crate::error::EmailAddressInUseException {
            crate::error::EmailAddressInUseException {
                message: self.message,
            }
        }
    }
}
impl EmailAddressInUseException {
    /// Creates a new builder-style object to manufacture [`EmailAddressInUseException`](crate::error::EmailAddressInUseException)
    pub fn builder() -> crate::error::email_address_in_use_exception::Builder {
        crate::error::email_address_in_use_exception::Builder::default()
    }
}

/// <p>The directory is unavailable. It might be located in another Region or deleted.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryUnavailableException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryUnavailableException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl DirectoryUnavailableException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryUnavailableException")?;
        if let Some(inner_10) = &self.message {
            write!(f, ": {}", inner_10)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryUnavailableException {}
/// See [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
pub mod directory_unavailable_exception {
    /// A builder for [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
        pub fn build(self) -> crate::error::DirectoryUnavailableException {
            crate::error::DirectoryUnavailableException {
                message: self.message,
            }
        }
    }
}
impl DirectoryUnavailableException {
    /// Creates a new builder-style object to manufacture [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
    pub fn builder() -> crate::error::directory_unavailable_exception::Builder {
        crate::error::directory_unavailable_exception::Builder::default()
    }
}

/// <p>You can't perform a write operation against a read-only directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsupportedOperationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsupportedOperationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl UnsupportedOperationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedOperationException")?;
        if let Some(inner_11) = &self.message {
            write!(f, ": {}", inner_11)?;
        }
        Ok(())
    }
}
impl std::error::Error for UnsupportedOperationException {}
/// See [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
pub mod unsupported_operation_exception {
    /// A builder for [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
        pub fn build(self) -> crate::error::UnsupportedOperationException {
            crate::error::UnsupportedOperationException {
                message: self.message,
            }
        }
    }
}
impl UnsupportedOperationException {
    /// Creates a new builder-style object to manufacture [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    pub fn builder() -> crate::error::unsupported_operation_exception::Builder {
        crate::error::unsupported_operation_exception::Builder::default()
    }
}

/// <p>One or more of the input parameters don't match the service's restrictions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidParameterException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidParameterException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidParameterException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidParameterException")?;
        if let Some(inner_12) = &self.message {
            write!(f, ": {}", inner_12)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidParameterException {}
/// See [`InvalidParameterException`](crate::error::InvalidParameterException)
pub mod invalid_parameter_exception {
    /// A builder for [`InvalidParameterException`](crate::error::InvalidParameterException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidParameterException`](crate::error::InvalidParameterException)
        pub fn build(self) -> crate::error::InvalidParameterException {
            crate::error::InvalidParameterException {
                message: self.message,
            }
        }
    }
}
impl InvalidParameterException {
    /// Creates a new builder-style object to manufacture [`InvalidParameterException`](crate::error::InvalidParameterException)
    pub fn builder() -> crate::error::invalid_parameter_exception::Builder {
        crate::error::invalid_parameter_exception::Builder::default()
    }
}

/// <p>The directory service doesn't recognize the credentials supplied by WorkMail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryServiceAuthenticationFailedException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryServiceAuthenticationFailedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryServiceAuthenticationFailedException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl DirectoryServiceAuthenticationFailedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryServiceAuthenticationFailedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryServiceAuthenticationFailedException")?;
        if let Some(inner_13) = &self.message {
            write!(f, ": {}", inner_13)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryServiceAuthenticationFailedException {}
/// See [`DirectoryServiceAuthenticationFailedException`](crate::error::DirectoryServiceAuthenticationFailedException)
pub mod directory_service_authentication_failed_exception {
    /// A builder for [`DirectoryServiceAuthenticationFailedException`](crate::error::DirectoryServiceAuthenticationFailedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryServiceAuthenticationFailedException`](crate::error::DirectoryServiceAuthenticationFailedException)
        pub fn build(self) -> crate::error::DirectoryServiceAuthenticationFailedException {
            crate::error::DirectoryServiceAuthenticationFailedException {
                message: self.message,
            }
        }
    }
}
impl DirectoryServiceAuthenticationFailedException {
    /// Creates a new builder-style object to manufacture [`DirectoryServiceAuthenticationFailedException`](crate::error::DirectoryServiceAuthenticationFailedException)
    pub fn builder() -> crate::error::directory_service_authentication_failed_exception::Builder {
        crate::error::directory_service_authentication_failed_exception::Builder::default()
    }
}

/// <p>The resource cannot be found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundException")?;
        if let Some(inner_14) = &self.message {
            write!(f, ": {}", inner_14)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundException {}
/// See [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
pub mod resource_not_found_exception {
    /// A builder for [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
        pub fn build(self) -> crate::error::ResourceNotFoundException {
            crate::error::ResourceNotFoundException {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    pub fn builder() -> crate::error::resource_not_found_exception::Builder {
        crate::error::resource_not_found_exception::Builder::default()
    }
}

/// <p>The resource can have up to 50 user-applied tags.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TooManyTagsException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TooManyTagsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TooManyTagsException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl TooManyTagsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TooManyTagsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TooManyTagsException")?;
        if let Some(inner_15) = &self.message {
            write!(f, ": {}", inner_15)?;
        }
        Ok(())
    }
}
impl std::error::Error for TooManyTagsException {}
/// See [`TooManyTagsException`](crate::error::TooManyTagsException)
pub mod too_many_tags_exception {
    /// A builder for [`TooManyTagsException`](crate::error::TooManyTagsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`TooManyTagsException`](crate::error::TooManyTagsException)
        pub fn build(self) -> crate::error::TooManyTagsException {
            crate::error::TooManyTagsException {
                message: self.message,
            }
        }
    }
}
impl TooManyTagsException {
    /// Creates a new builder-style object to manufacture [`TooManyTagsException`](crate::error::TooManyTagsException)
    pub fn builder() -> crate::error::too_many_tags_exception::Builder {
        crate::error::too_many_tags_exception::Builder::default()
    }
}

/// <p>The request exceeds the limit of the resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LimitExceededException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LimitExceededException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl LimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "LimitExceededException")?;
        if let Some(inner_16) = &self.message {
            write!(f, ": {}", inner_16)?;
        }
        Ok(())
    }
}
impl std::error::Error for LimitExceededException {}
/// See [`LimitExceededException`](crate::error::LimitExceededException)
pub mod limit_exceeded_exception {
    /// A builder for [`LimitExceededException`](crate::error::LimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`LimitExceededException`](crate::error::LimitExceededException)
        pub fn build(self) -> crate::error::LimitExceededException {
            crate::error::LimitExceededException {
                message: self.message,
            }
        }
    }
}
impl LimitExceededException {
    /// Creates a new builder-style object to manufacture [`LimitExceededException`](crate::error::LimitExceededException)
    pub fn builder() -> crate::error::limit_exceeded_exception::Builder {
        crate::error::limit_exceeded_exception::Builder::default()
    }
}

/// <p>The supplied password doesn't match the minimum security constraints, such as length
/// or use of special characters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidPasswordException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidPasswordException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidPasswordException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidPasswordException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidPasswordException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidPasswordException")?;
        if let Some(inner_17) = &self.message {
            write!(f, ": {}", inner_17)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidPasswordException {}
/// See [`InvalidPasswordException`](crate::error::InvalidPasswordException)
pub mod invalid_password_exception {
    /// A builder for [`InvalidPasswordException`](crate::error::InvalidPasswordException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidPasswordException`](crate::error::InvalidPasswordException)
        pub fn build(self) -> crate::error::InvalidPasswordException {
            crate::error::InvalidPasswordException {
                message: self.message,
            }
        }
    }
}
impl InvalidPasswordException {
    /// Creates a new builder-style object to manufacture [`InvalidPasswordException`](crate::error::InvalidPasswordException)
    pub fn builder() -> crate::error::invalid_password_exception::Builder {
        crate::error::invalid_password_exception::Builder::default()
    }
}

/// <p>The user, group, or resource that you're trying to register is already
/// registered.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityAlreadyRegisteredException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityAlreadyRegisteredException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityAlreadyRegisteredException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl EntityAlreadyRegisteredException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityAlreadyRegisteredException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityAlreadyRegisteredException")?;
        if let Some(inner_18) = &self.message {
            write!(f, ": {}", inner_18)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityAlreadyRegisteredException {}
/// See [`EntityAlreadyRegisteredException`](crate::error::EntityAlreadyRegisteredException)
pub mod entity_already_registered_exception {
    /// A builder for [`EntityAlreadyRegisteredException`](crate::error::EntityAlreadyRegisteredException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityAlreadyRegisteredException`](crate::error::EntityAlreadyRegisteredException)
        pub fn build(self) -> crate::error::EntityAlreadyRegisteredException {
            crate::error::EntityAlreadyRegisteredException {
                message: self.message,
            }
        }
    }
}
impl EntityAlreadyRegisteredException {
    /// Creates a new builder-style object to manufacture [`EntityAlreadyRegisteredException`](crate::error::EntityAlreadyRegisteredException)
    pub fn builder() -> crate::error::entity_already_registered_exception::Builder {
        crate::error::entity_already_registered_exception::Builder::default()
    }
}

/// <p>The domain you're trying to change is in use by another user or organization in your account. See the error message for details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MailDomainInUseException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for MailDomainInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MailDomainInUseException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl MailDomainInUseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for MailDomainInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MailDomainInUseException")?;
        if let Some(inner_19) = &self.message {
            write!(f, ": {}", inner_19)?;
        }
        Ok(())
    }
}
impl std::error::Error for MailDomainInUseException {}
/// See [`MailDomainInUseException`](crate::error::MailDomainInUseException)
pub mod mail_domain_in_use_exception {
    /// A builder for [`MailDomainInUseException`](crate::error::MailDomainInUseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`MailDomainInUseException`](crate::error::MailDomainInUseException)
        pub fn build(self) -> crate::error::MailDomainInUseException {
            crate::error::MailDomainInUseException {
                message: self.message,
            }
        }
    }
}
impl MailDomainInUseException {
    /// Creates a new builder-style object to manufacture [`MailDomainInUseException`](crate::error::MailDomainInUseException)
    pub fn builder() -> crate::error::mail_domain_in_use_exception::Builder {
        crate::error::mail_domain_in_use_exception::Builder::default()
    }
}

/// <p>You SES configuration has customizations that Amazon WorkMail cannot save. The error message lists the invalid setting. For examples of invalid settings, refer to
/// <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_CreateReceiptRule.html">CreateReceiptRule</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidCustomSesConfigurationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidCustomSesConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidCustomSesConfigurationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidCustomSesConfigurationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidCustomSesConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidCustomSesConfigurationException")?;
        if let Some(inner_20) = &self.message {
            write!(f, ": {}", inner_20)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidCustomSesConfigurationException {}
/// See [`InvalidCustomSesConfigurationException`](crate::error::InvalidCustomSesConfigurationException)
pub mod invalid_custom_ses_configuration_exception {
    /// A builder for [`InvalidCustomSesConfigurationException`](crate::error::InvalidCustomSesConfigurationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidCustomSesConfigurationException`](crate::error::InvalidCustomSesConfigurationException)
        pub fn build(self) -> crate::error::InvalidCustomSesConfigurationException {
            crate::error::InvalidCustomSesConfigurationException {
                message: self.message,
            }
        }
    }
}
impl InvalidCustomSesConfigurationException {
    /// Creates a new builder-style object to manufacture [`InvalidCustomSesConfigurationException`](crate::error::InvalidCustomSesConfigurationException)
    pub fn builder() -> crate::error::invalid_custom_ses_configuration_exception::Builder {
        crate::error::invalid_custom_ses_configuration_exception::Builder::default()
    }
}

/// <p>This user, group, or resource name is not allowed in Amazon WorkMail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReservedNameException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ReservedNameException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReservedNameException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ReservedNameException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ReservedNameException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ReservedNameException")?;
        if let Some(inner_21) = &self.message {
            write!(f, ": {}", inner_21)?;
        }
        Ok(())
    }
}
impl std::error::Error for ReservedNameException {}
/// See [`ReservedNameException`](crate::error::ReservedNameException)
pub mod reserved_name_exception {
    /// A builder for [`ReservedNameException`](crate::error::ReservedNameException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ReservedNameException`](crate::error::ReservedNameException)
        pub fn build(self) -> crate::error::ReservedNameException {
            crate::error::ReservedNameException {
                message: self.message,
            }
        }
    }
}
impl ReservedNameException {
    /// Creates a new builder-style object to manufacture [`ReservedNameException`](crate::error::ReservedNameException)
    pub fn builder() -> crate::error::reserved_name_exception::Builder {
        crate::error::reserved_name_exception::Builder::default()
    }
}

/// <p>The directory is already in use by another WorkMail organization in the same account and Region.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryInUseException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryInUseException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl DirectoryInUseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryInUseException")?;
        if let Some(inner_22) = &self.message {
            write!(f, ": {}", inner_22)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryInUseException {}
/// See [`DirectoryInUseException`](crate::error::DirectoryInUseException)
pub mod directory_in_use_exception {
    /// A builder for [`DirectoryInUseException`](crate::error::DirectoryInUseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryInUseException`](crate::error::DirectoryInUseException)
        pub fn build(self) -> crate::error::DirectoryInUseException {
            crate::error::DirectoryInUseException {
                message: self.message,
            }
        }
    }
}
impl DirectoryInUseException {
    /// Creates a new builder-style object to manufacture [`DirectoryInUseException`](crate::error::DirectoryInUseException)
    pub fn builder() -> crate::error::directory_in_use_exception::Builder {
        crate::error::directory_in_use_exception::Builder::default()
    }
}
