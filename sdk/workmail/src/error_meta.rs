// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The directory is already in use by another WorkMail organization in the same account and Region.</p>
    DirectoryInUseException(crate::error::DirectoryInUseException),
    /// <p>The directory service doesn't recognize the credentials supplied by WorkMail.</p>
    DirectoryServiceAuthenticationFailedException(
        crate::error::DirectoryServiceAuthenticationFailedException,
    ),
    /// <p>The directory is unavailable. It might be located in another Region or deleted.</p>
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    /// <p>The email address that you're trying to assign is already created for a different user, group, or resource.</p>
    EmailAddressInUseException(crate::error::EmailAddressInUseException),
    /// <p>The user, group, or resource that you're trying to register is already registered.</p>
    EntityAlreadyRegisteredException(crate::error::EntityAlreadyRegisteredException),
    /// <p>The identifier supplied for the user, group, or resource does not exist in your organization.</p>
    EntityNotFoundException(crate::error::EntityNotFoundException),
    /// <p>You are performing an operation on a user, group, or resource that isn't in the expected state, such as trying to delete an active user.</p>
    EntityStateException(crate::error::EntityStateException),
    /// <p>The configuration for a resource isn't valid. A resource must either be able to auto-respond to requests or have at least one delegate associated that can do so on its behalf.</p>
    InvalidConfigurationException(crate::error::InvalidConfigurationException),
    /// <p>You SES configuration has customizations that WorkMail cannot save. The error message lists the invalid setting. For examples of invalid settings, refer to <a href="https://docs.aws.amazon.com/ses/latest/APIReference/API_CreateReceiptRule.html">CreateReceiptRule</a>.</p>
    InvalidCustomSesConfigurationException(crate::error::InvalidCustomSesConfigurationException),
    /// <p>One or more of the input parameters don't match the service's restrictions.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The supplied password doesn't match the minimum security constraints, such as length or use of special characters.</p>
    InvalidPasswordException(crate::error::InvalidPasswordException),
    /// <p>The request exceeds the limit of the resource.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The domain you're trying to change is in use by another user or organization in your account. See the error message for details.</p>
    MailDomainInUseException(crate::error::MailDomainInUseException),
    /// <p>The domain specified is not found in your organization.</p>
    MailDomainNotFoundException(crate::error::MailDomainNotFoundException),
    /// <p>After a domain has been added to the organization, it must be verified. The domain is not yet verified.</p>
    MailDomainStateException(crate::error::MailDomainStateException),
    /// <p>The user, group, or resource name isn't unique in WorkMail.</p>
    NameAvailabilityException(crate::error::NameAvailabilityException),
    /// <p>An operation received a valid organization identifier that either doesn't belong or exist in the system.</p>
    OrganizationNotFoundException(crate::error::OrganizationNotFoundException),
    /// <p>The organization must have a valid state to perform certain operations on the organization or its members.</p>
    OrganizationStateException(crate::error::OrganizationStateException),
    /// <p>This user, group, or resource name is not allowed in WorkMail.</p>
    ReservedNameException(crate::error::ReservedNameException),
    /// <p>The resource cannot be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The resource can have up to 50 user-applied tags.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>You can't perform a write operation against a read-only directory.</p>
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DirectoryInUseException(inner) => inner.fmt(f),
            Error::DirectoryServiceAuthenticationFailedException(inner) => inner.fmt(f),
            Error::DirectoryUnavailableException(inner) => inner.fmt(f),
            Error::EmailAddressInUseException(inner) => inner.fmt(f),
            Error::EntityAlreadyRegisteredException(inner) => inner.fmt(f),
            Error::EntityNotFoundException(inner) => inner.fmt(f),
            Error::EntityStateException(inner) => inner.fmt(f),
            Error::InvalidConfigurationException(inner) => inner.fmt(f),
            Error::InvalidCustomSesConfigurationException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPasswordException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MailDomainInUseException(inner) => inner.fmt(f),
            Error::MailDomainNotFoundException(inner) => inner.fmt(f),
            Error::MailDomainStateException(inner) => inner.fmt(f),
            Error::NameAvailabilityException(inner) => inner.fmt(f),
            Error::OrganizationNotFoundException(inner) => inner.fmt(f),
            Error::OrganizationStateException(inner) => inner.fmt(f),
            Error::ReservedNameException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateDelegateToResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateDelegateToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateDelegateToResourceError> for Error {
    fn from(err: crate::error::AssociateDelegateToResourceError) -> Self {
        match err {
            crate::error::AssociateDelegateToResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::AssociateDelegateToResourceError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::AssociateDelegateToResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateDelegateToResourceError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::AssociateDelegateToResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::AssociateDelegateToResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateMemberToGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateMemberToGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateMemberToGroupError> for Error {
    fn from(err: crate::error::AssociateMemberToGroupError) -> Self {
        match err {
            crate::error::AssociateMemberToGroupError::DirectoryServiceAuthenticationFailedException(inner) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::AssociateMemberToGroupError::DirectoryUnavailableException(inner) => Error::DirectoryUnavailableException(inner),
            crate::error::AssociateMemberToGroupError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::AssociateMemberToGroupError::EntityStateException(inner) => Error::EntityStateException(inner),
            crate::error::AssociateMemberToGroupError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::AssociateMemberToGroupError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::AssociateMemberToGroupError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::AssociateMemberToGroupError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::AssociateMemberToGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssumeImpersonationRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssumeImpersonationRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssumeImpersonationRoleError> for Error {
    fn from(err: crate::error::AssumeImpersonationRoleError) -> Self {
        match err {
            crate::error::AssumeImpersonationRoleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssumeImpersonationRoleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::AssumeImpersonationRoleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::AssumeImpersonationRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssumeImpersonationRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelMailboxExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelMailboxExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelMailboxExportJobError> for Error {
    fn from(err: crate::error::CancelMailboxExportJobError) -> Self {
        match err {
            crate::error::CancelMailboxExportJobError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CancelMailboxExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelMailboxExportJobError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CancelMailboxExportJobError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CancelMailboxExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAliasError> for Error {
    fn from(err: crate::error::CreateAliasError) -> Self {
        match err {
            crate::error::CreateAliasError::EmailAddressInUseException(inner) => {
                Error::EmailAddressInUseException(inner)
            }
            crate::error::CreateAliasError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CreateAliasError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::CreateAliasError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAliasError::MailDomainNotFoundException(inner) => {
                Error::MailDomainNotFoundException(inner)
            }
            crate::error::CreateAliasError::MailDomainStateException(inner) => {
                Error::MailDomainStateException(inner)
            }
            crate::error::CreateAliasError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CreateAliasError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::CreateAvailabilityConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateAvailabilityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAvailabilityConfigurationError> for Error {
    fn from(err: crate::error::CreateAvailabilityConfigurationError) -> Self {
        match err {
            crate::error::CreateAvailabilityConfigurationError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::CreateAvailabilityConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAvailabilityConfigurationError::NameAvailabilityException(
                inner,
            ) => Error::NameAvailabilityException(inner),
            crate::error::CreateAvailabilityConfigurationError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::CreateAvailabilityConfigurationError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::CreateAvailabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err {
            crate::error::CreateGroupError::DirectoryServiceAuthenticationFailedException(
                inner,
            ) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::CreateGroupError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::CreateGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateGroupError::NameAvailabilityException(inner) => {
                Error::NameAvailabilityException(inner)
            }
            crate::error::CreateGroupError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CreateGroupError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateGroupError::ReservedNameException(inner) => {
                Error::ReservedNameException(inner)
            }
            crate::error::CreateGroupError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::CreateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateImpersonationRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateImpersonationRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateImpersonationRoleError> for Error {
    fn from(err: crate::error::CreateImpersonationRoleError) -> Self {
        match err {
            crate::error::CreateImpersonationRoleError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::CreateImpersonationRoleError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::CreateImpersonationRoleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateImpersonationRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateImpersonationRoleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CreateImpersonationRoleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateImpersonationRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMobileDeviceAccessRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateMobileDeviceAccessRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMobileDeviceAccessRuleError> for Error {
    fn from(err: crate::error::CreateMobileDeviceAccessRuleError) -> Self {
        match err {
            crate::error::CreateMobileDeviceAccessRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateMobileDeviceAccessRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateMobileDeviceAccessRuleError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::CreateMobileDeviceAccessRuleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateMobileDeviceAccessRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOrganizationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOrganizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOrganizationError> for Error {
    fn from(err: crate::error::CreateOrganizationError) -> Self {
        match err {
            crate::error::CreateOrganizationError::DirectoryInUseException(inner) => {
                Error::DirectoryInUseException(inner)
            }
            crate::error::CreateOrganizationError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::CreateOrganizationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateOrganizationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateOrganizationError::NameAvailabilityException(inner) => {
                Error::NameAvailabilityException(inner)
            }
            crate::error::CreateOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourceError> for Error {
    fn from(err: crate::error::CreateResourceError) -> Self {
        match err {
            crate::error::CreateResourceError::DirectoryServiceAuthenticationFailedException(
                inner,
            ) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::CreateResourceError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::CreateResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateResourceError::NameAvailabilityException(inner) => {
                Error::NameAvailabilityException(inner)
            }
            crate::error::CreateResourceError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CreateResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateResourceError::ReservedNameException(inner) => {
                Error::ReservedNameException(inner)
            }
            crate::error::CreateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::DirectoryServiceAuthenticationFailedException(inner) => {
                Error::DirectoryServiceAuthenticationFailedException(inner)
            }
            crate::error::CreateUserError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::CreateUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::CreateUserError::NameAvailabilityException(inner) => {
                Error::NameAvailabilityException(inner)
            }
            crate::error::CreateUserError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::CreateUserError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::CreateUserError::ReservedNameException(inner) => {
                Error::ReservedNameException(inner)
            }
            crate::error::CreateUserError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAccessControlRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAccessControlRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAccessControlRuleError> for Error {
    fn from(err: crate::error::DeleteAccessControlRuleError) -> Self {
        match err {
            crate::error::DeleteAccessControlRuleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteAccessControlRuleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteAccessControlRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAliasError> for Error {
    fn from(err: crate::error::DeleteAliasError) -> Self {
        match err {
            crate::error::DeleteAliasError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteAliasError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeleteAliasError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteAliasError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteAliasError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAvailabilityConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAvailabilityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAvailabilityConfigurationError> for Error {
    fn from(err: crate::error::DeleteAvailabilityConfigurationError) -> Self {
        match err {
            crate::error::DeleteAvailabilityConfigurationError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::DeleteAvailabilityConfigurationError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::DeleteAvailabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DeleteEmailMonitoringConfigurationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteEmailMonitoringConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEmailMonitoringConfigurationError> for Error {
    fn from(err: crate::error::DeleteEmailMonitoringConfigurationError) -> Self {
        match err {
            crate::error::DeleteEmailMonitoringConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DeleteEmailMonitoringConfigurationError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::DeleteEmailMonitoringConfigurationError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::DeleteEmailMonitoringConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err {
            crate::error::DeleteGroupError::DirectoryServiceAuthenticationFailedException(
                inner,
            ) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::DeleteGroupError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::DeleteGroupError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeleteGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteGroupError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteGroupError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteGroupError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteImpersonationRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteImpersonationRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteImpersonationRoleError> for Error {
    fn from(err: crate::error::DeleteImpersonationRoleError) -> Self {
        match err {
            crate::error::DeleteImpersonationRoleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteImpersonationRoleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteImpersonationRoleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteImpersonationRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMailboxPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMailboxPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMailboxPermissionsError> for Error {
    fn from(err: crate::error::DeleteMailboxPermissionsError) -> Self {
        match err {
            crate::error::DeleteMailboxPermissionsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteMailboxPermissionsError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeleteMailboxPermissionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteMailboxPermissionsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteMailboxPermissionsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteMailboxPermissionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteMobileDeviceAccessOverrideError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteMobileDeviceAccessOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMobileDeviceAccessOverrideError> for Error {
    fn from(err: crate::error::DeleteMobileDeviceAccessOverrideError) -> Self {
        match err {
            crate::error::DeleteMobileDeviceAccessOverrideError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeleteMobileDeviceAccessOverrideError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DeleteMobileDeviceAccessOverrideError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::DeleteMobileDeviceAccessOverrideError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::DeleteMobileDeviceAccessOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMobileDeviceAccessRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMobileDeviceAccessRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMobileDeviceAccessRuleError> for Error {
    fn from(err: crate::error::DeleteMobileDeviceAccessRuleError) -> Self {
        match err {
            crate::error::DeleteMobileDeviceAccessRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteMobileDeviceAccessRuleError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::DeleteMobileDeviceAccessRuleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteMobileDeviceAccessRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOrganizationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOrganizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOrganizationError> for Error {
    fn from(err: crate::error::DeleteOrganizationError) -> Self {
        match err {
            crate::error::DeleteOrganizationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteOrganizationError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteOrganizationError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceError> for Error {
    fn from(err: crate::error::DeleteResourceError) -> Self {
        match err {
            crate::error::DeleteResourceError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeleteResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteResourceError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRetentionPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRetentionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRetentionPolicyError> for Error {
    fn from(err: crate::error::DeleteRetentionPolicyError) -> Self {
        match err {
            crate::error::DeleteRetentionPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteRetentionPolicyError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteRetentionPolicyError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteRetentionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::DirectoryServiceAuthenticationFailedException(inner) => {
                Error::DirectoryServiceAuthenticationFailedException(inner)
            }
            crate::error::DeleteUserError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::DeleteUserError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeleteUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeleteUserError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeleteUserError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterFromWorkMailError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterFromWorkMailError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterFromWorkMailError> for Error {
    fn from(err: crate::error::DeregisterFromWorkMailError) -> Self {
        match err {
            crate::error::DeregisterFromWorkMailError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DeregisterFromWorkMailError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DeregisterFromWorkMailError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeregisterFromWorkMailError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeregisterFromWorkMailError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeregisterFromWorkMailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterMailDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterMailDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterMailDomainError> for Error {
    fn from(err: crate::error::DeregisterMailDomainError) -> Self {
        match err {
            crate::error::DeregisterMailDomainError::InvalidCustomSesConfigurationException(
                inner,
            ) => Error::InvalidCustomSesConfigurationException(inner),
            crate::error::DeregisterMailDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeregisterMailDomainError::MailDomainInUseException(inner) => {
                Error::MailDomainInUseException(inner)
            }
            crate::error::DeregisterMailDomainError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DeregisterMailDomainError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DeregisterMailDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEmailMonitoringConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEmailMonitoringConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEmailMonitoringConfigurationError> for Error {
    fn from(err: crate::error::DescribeEmailMonitoringConfigurationError) -> Self {
        match err {
            crate::error::DescribeEmailMonitoringConfigurationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DescribeEmailMonitoringConfigurationError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::DescribeEmailMonitoringConfigurationError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::DescribeEmailMonitoringConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeEmailMonitoringConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGroupError> for Error {
    fn from(err: crate::error::DescribeGroupError) -> Self {
        match err {
            crate::error::DescribeGroupError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeGroupError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DescribeGroupError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DescribeGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInboundDmarcSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInboundDmarcSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInboundDmarcSettingsError> for Error {
    fn from(err: crate::error::DescribeInboundDmarcSettingsError) -> Self {
        match err {
            crate::error::DescribeInboundDmarcSettingsError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::DescribeInboundDmarcSettingsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DescribeInboundDmarcSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMailboxExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMailboxExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMailboxExportJobError> for Error {
    fn from(err: crate::error::DescribeMailboxExportJobError) -> Self {
        match err {
            crate::error::DescribeMailboxExportJobError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeMailboxExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeMailboxExportJobError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DescribeMailboxExportJobError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DescribeMailboxExportJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationError> for Error {
    fn from(err: crate::error::DescribeOrganizationError) -> Self {
        match err {
            crate::error::DescribeOrganizationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeOrganizationError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DescribeOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourceError> for Error {
    fn from(err: crate::error::DescribeResourceError) -> Self {
        match err {
            crate::error::DescribeResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeResourceError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DescribeResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DescribeResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserError> for Error {
    fn from(err: crate::error::DescribeUserError) -> Self {
        match err {
            crate::error::DescribeUserError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DescribeUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::DescribeUserError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::DescribeUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateDelegateFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateDelegateFromResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateDelegateFromResourceError> for Error {
    fn from(err: crate::error::DisassociateDelegateFromResourceError) -> Self {
        match err {
            crate::error::DisassociateDelegateFromResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::DisassociateDelegateFromResourceError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::DisassociateDelegateFromResourceError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DisassociateDelegateFromResourceError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::DisassociateDelegateFromResourceError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::DisassociateDelegateFromResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateMemberFromGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateMemberFromGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateMemberFromGroupError> for Error {
    fn from(err: crate::error::DisassociateMemberFromGroupError) -> Self {
        match err {
            crate::error::DisassociateMemberFromGroupError::DirectoryServiceAuthenticationFailedException(inner) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::DisassociateMemberFromGroupError::DirectoryUnavailableException(inner) => Error::DirectoryUnavailableException(inner),
            crate::error::DisassociateMemberFromGroupError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::DisassociateMemberFromGroupError::EntityStateException(inner) => Error::EntityStateException(inner),
            crate::error::DisassociateMemberFromGroupError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DisassociateMemberFromGroupError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::DisassociateMemberFromGroupError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::DisassociateMemberFromGroupError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::DisassociateMemberFromGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccessControlEffectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccessControlEffectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccessControlEffectError> for Error {
    fn from(err: crate::error::GetAccessControlEffectError) -> Self {
        match err {
            crate::error::GetAccessControlEffectError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetAccessControlEffectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAccessControlEffectError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetAccessControlEffectError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetAccessControlEffectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAccessControlEffectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDefaultRetentionPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDefaultRetentionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDefaultRetentionPolicyError> for Error {
    fn from(err: crate::error::GetDefaultRetentionPolicyError) -> Self {
        match err {
            crate::error::GetDefaultRetentionPolicyError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetDefaultRetentionPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetDefaultRetentionPolicyError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetDefaultRetentionPolicyError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetDefaultRetentionPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImpersonationRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetImpersonationRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImpersonationRoleError> for Error {
    fn from(err: crate::error::GetImpersonationRoleError) -> Self {
        match err {
            crate::error::GetImpersonationRoleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetImpersonationRoleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetImpersonationRoleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetImpersonationRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetImpersonationRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImpersonationRoleEffectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetImpersonationRoleEffectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImpersonationRoleEffectError> for Error {
    fn from(err: crate::error::GetImpersonationRoleEffectError) -> Self {
        match err {
            crate::error::GetImpersonationRoleEffectError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetImpersonationRoleEffectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMailboxDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMailboxDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMailboxDetailsError> for Error {
    fn from(err: crate::error::GetMailboxDetailsError) -> Self {
        match err {
            crate::error::GetMailboxDetailsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetMailboxDetailsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetMailboxDetailsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetMailboxDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMailDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMailDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMailDomainError> for Error {
    fn from(err: crate::error::GetMailDomainError) -> Self {
        match err {
            crate::error::GetMailDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetMailDomainError::MailDomainNotFoundException(inner) => {
                Error::MailDomainNotFoundException(inner)
            }
            crate::error::GetMailDomainError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::GetMailDomainError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetMailDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMobileDeviceAccessEffectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMobileDeviceAccessEffectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMobileDeviceAccessEffectError> for Error {
    fn from(err: crate::error::GetMobileDeviceAccessEffectError) -> Self {
        match err {
            crate::error::GetMobileDeviceAccessEffectError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetMobileDeviceAccessEffectError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::GetMobileDeviceAccessEffectError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetMobileDeviceAccessEffectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMobileDeviceAccessOverrideError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMobileDeviceAccessOverrideError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMobileDeviceAccessOverrideError> for Error {
    fn from(err: crate::error::GetMobileDeviceAccessOverrideError) -> Self {
        match err {
            crate::error::GetMobileDeviceAccessOverrideError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::GetMobileDeviceAccessOverrideError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetMobileDeviceAccessOverrideError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::GetMobileDeviceAccessOverrideError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::GetMobileDeviceAccessOverrideError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMobileDeviceAccessOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAccessControlRulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAccessControlRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAccessControlRulesError> for Error {
    fn from(err: crate::error::ListAccessControlRulesError) -> Self {
        match err {
            crate::error::ListAccessControlRulesError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListAccessControlRulesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListAccessControlRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAliasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAliasesError> for Error {
    fn from(err: crate::error::ListAliasesError) -> Self {
        match err {
            crate::error::ListAliasesError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListAliasesError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::ListAliasesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListAliasesError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListAliasesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAvailabilityConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAvailabilityConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAvailabilityConfigurationsError> for Error {
    fn from(err: crate::error::ListAvailabilityConfigurationsError) -> Self {
        match err {
            crate::error::ListAvailabilityConfigurationsError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::ListAvailabilityConfigurationsError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::ListAvailabilityConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListGroupMembersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupMembersError> for Error {
    fn from(err: crate::error::ListGroupMembersError) -> Self {
        match err {
            crate::error::ListGroupMembersError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListGroupMembersError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::ListGroupMembersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListGroupMembersError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListGroupMembersError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListGroupMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err {
            crate::error::ListGroupsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListGroupsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListGroupsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListGroupsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImpersonationRolesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImpersonationRolesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImpersonationRolesError> for Error {
    fn from(err: crate::error::ListImpersonationRolesError) -> Self {
        match err {
            crate::error::ListImpersonationRolesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListImpersonationRolesError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListImpersonationRolesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListImpersonationRolesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMailboxExportJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMailboxExportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMailboxExportJobsError> for Error {
    fn from(err: crate::error::ListMailboxExportJobsError) -> Self {
        match err {
            crate::error::ListMailboxExportJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListMailboxExportJobsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListMailboxExportJobsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListMailboxExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMailboxPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMailboxPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMailboxPermissionsError> for Error {
    fn from(err: crate::error::ListMailboxPermissionsError) -> Self {
        match err {
            crate::error::ListMailboxPermissionsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListMailboxPermissionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListMailboxPermissionsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListMailboxPermissionsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListMailboxPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMailDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMailDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMailDomainsError> for Error {
    fn from(err: crate::error::ListMailDomainsError) -> Self {
        match err {
            crate::error::ListMailDomainsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListMailDomainsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListMailDomainsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListMailDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListMobileDeviceAccessOverridesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListMobileDeviceAccessOverridesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMobileDeviceAccessOverridesError> for Error {
    fn from(err: crate::error::ListMobileDeviceAccessOverridesError) -> Self {
        match err {
            crate::error::ListMobileDeviceAccessOverridesError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListMobileDeviceAccessOverridesError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::ListMobileDeviceAccessOverridesError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::ListMobileDeviceAccessOverridesError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::ListMobileDeviceAccessOverridesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMobileDeviceAccessRulesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMobileDeviceAccessRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMobileDeviceAccessRulesError> for Error {
    fn from(err: crate::error::ListMobileDeviceAccessRulesError) -> Self {
        match err {
            crate::error::ListMobileDeviceAccessRulesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListMobileDeviceAccessRulesError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::ListMobileDeviceAccessRulesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListMobileDeviceAccessRulesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOrganizationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOrganizationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOrganizationsError> for Error {
    fn from(err: crate::error::ListOrganizationsError) -> Self {
        match err {
            crate::error::ListOrganizationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListOrganizationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceDelegatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceDelegatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceDelegatesError> for Error {
    fn from(err: crate::error::ListResourceDelegatesError) -> Self {
        match err {
            crate::error::ListResourceDelegatesError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ListResourceDelegatesError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::ListResourceDelegatesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResourceDelegatesError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListResourceDelegatesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListResourceDelegatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourcesError> for Error {
    fn from(err: crate::error::ListResourcesError) -> Self {
        match err {
            crate::error::ListResourcesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResourcesError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListResourcesError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUsersError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ListUsersError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAccessControlRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAccessControlRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAccessControlRuleError> for Error {
    fn from(err: crate::error::PutAccessControlRuleError) -> Self {
        match err {
            crate::error::PutAccessControlRuleError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::PutAccessControlRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutAccessControlRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutAccessControlRuleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::PutAccessControlRuleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::PutAccessControlRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutAccessControlRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutEmailMonitoringConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutEmailMonitoringConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEmailMonitoringConfigurationError> for Error {
    fn from(err: crate::error::PutEmailMonitoringConfigurationError) -> Self {
        match err {
            crate::error::PutEmailMonitoringConfigurationError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::PutEmailMonitoringConfigurationError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::PutEmailMonitoringConfigurationError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::PutEmailMonitoringConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::PutEmailMonitoringConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutInboundDmarcSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutInboundDmarcSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutInboundDmarcSettingsError> for Error {
    fn from(err: crate::error::PutInboundDmarcSettingsError) -> Self {
        match err {
            crate::error::PutInboundDmarcSettingsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::PutInboundDmarcSettingsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::PutInboundDmarcSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMailboxPermissionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutMailboxPermissionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMailboxPermissionsError> for Error {
    fn from(err: crate::error::PutMailboxPermissionsError) -> Self {
        match err {
            crate::error::PutMailboxPermissionsError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::PutMailboxPermissionsError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::PutMailboxPermissionsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutMailboxPermissionsError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::PutMailboxPermissionsError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::PutMailboxPermissionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMobileDeviceAccessOverrideError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutMobileDeviceAccessOverrideError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMobileDeviceAccessOverrideError> for Error {
    fn from(err: crate::error::PutMobileDeviceAccessOverrideError) -> Self {
        match err {
            crate::error::PutMobileDeviceAccessOverrideError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::PutMobileDeviceAccessOverrideError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::PutMobileDeviceAccessOverrideError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutMobileDeviceAccessOverrideError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::PutMobileDeviceAccessOverrideError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::PutMobileDeviceAccessOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRetentionPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRetentionPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRetentionPolicyError> for Error {
    fn from(err: crate::error::PutRetentionPolicyError) -> Self {
        match err {
            crate::error::PutRetentionPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutRetentionPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutRetentionPolicyError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::PutRetentionPolicyError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::PutRetentionPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterMailDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterMailDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterMailDomainError> for Error {
    fn from(err: crate::error::RegisterMailDomainError) -> Self {
        match err {
            crate::error::RegisterMailDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RegisterMailDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterMailDomainError::MailDomainInUseException(inner) => {
                Error::MailDomainInUseException(inner)
            }
            crate::error::RegisterMailDomainError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::RegisterMailDomainError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::RegisterMailDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterToWorkMailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterToWorkMailError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterToWorkMailError> for Error {
    fn from(err: crate::error::RegisterToWorkMailError) -> Self {
        match err {
            crate::error::RegisterToWorkMailError::DirectoryServiceAuthenticationFailedException(inner) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::RegisterToWorkMailError::DirectoryUnavailableException(inner) => Error::DirectoryUnavailableException(inner),
            crate::error::RegisterToWorkMailError::EmailAddressInUseException(inner) => Error::EmailAddressInUseException(inner),
            crate::error::RegisterToWorkMailError::EntityAlreadyRegisteredException(inner) => Error::EntityAlreadyRegisteredException(inner),
            crate::error::RegisterToWorkMailError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::RegisterToWorkMailError::EntityStateException(inner) => Error::EntityStateException(inner),
            crate::error::RegisterToWorkMailError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::RegisterToWorkMailError::MailDomainNotFoundException(inner) => Error::MailDomainNotFoundException(inner),
            crate::error::RegisterToWorkMailError::MailDomainStateException(inner) => Error::MailDomainStateException(inner),
            crate::error::RegisterToWorkMailError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::RegisterToWorkMailError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::RegisterToWorkMailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetPasswordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResetPasswordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetPasswordError> for Error {
    fn from(err: crate::error::ResetPasswordError) -> Self {
        match err {
            crate::error::ResetPasswordError::DirectoryServiceAuthenticationFailedException(
                inner,
            ) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::ResetPasswordError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::ResetPasswordError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::ResetPasswordError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::ResetPasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ResetPasswordError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::ResetPasswordError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::ResetPasswordError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::ResetPasswordError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ResetPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMailboxExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartMailboxExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMailboxExportJobError> for Error {
    fn from(err: crate::error::StartMailboxExportJobError) -> Self {
        match err {
            crate::error::StartMailboxExportJobError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::StartMailboxExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartMailboxExportJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartMailboxExportJobError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::StartMailboxExportJobError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::StartMailboxExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestAvailabilityConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TestAvailabilityConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestAvailabilityConfigurationError> for Error {
    fn from(err: crate::error::TestAvailabilityConfigurationError) -> Self {
        match err {
            crate::error::TestAvailabilityConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TestAvailabilityConfigurationError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::TestAvailabilityConfigurationError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::TestAvailabilityConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TestAvailabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAvailabilityConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAvailabilityConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAvailabilityConfigurationError> for Error {
    fn from(err: crate::error::UpdateAvailabilityConfigurationError) -> Self {
        match err {
            crate::error::UpdateAvailabilityConfigurationError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::UpdateAvailabilityConfigurationError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::UpdateAvailabilityConfigurationError::OrganizationStateException(
                inner,
            ) => Error::OrganizationStateException(inner),
            crate::error::UpdateAvailabilityConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateAvailabilityConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDefaultMailDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDefaultMailDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDefaultMailDomainError> for Error {
    fn from(err: crate::error::UpdateDefaultMailDomainError) -> Self {
        match err {
            crate::error::UpdateDefaultMailDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateDefaultMailDomainError::MailDomainNotFoundException(inner) => {
                Error::MailDomainNotFoundException(inner)
            }
            crate::error::UpdateDefaultMailDomainError::MailDomainStateException(inner) => {
                Error::MailDomainStateException(inner)
            }
            crate::error::UpdateDefaultMailDomainError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::UpdateDefaultMailDomainError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::UpdateDefaultMailDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateImpersonationRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateImpersonationRoleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateImpersonationRoleError> for Error {
    fn from(err: crate::error::UpdateImpersonationRoleError) -> Self {
        match err {
            crate::error::UpdateImpersonationRoleError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateImpersonationRoleError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::UpdateImpersonationRoleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateImpersonationRoleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateImpersonationRoleError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::UpdateImpersonationRoleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::UpdateImpersonationRoleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateImpersonationRoleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMailboxQuotaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMailboxQuotaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMailboxQuotaError> for Error {
    fn from(err: crate::error::UpdateMailboxQuotaError) -> Self {
        match err {
            crate::error::UpdateMailboxQuotaError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateMailboxQuotaError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::UpdateMailboxQuotaError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateMailboxQuotaError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::UpdateMailboxQuotaError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::UpdateMailboxQuotaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMobileDeviceAccessRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMobileDeviceAccessRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMobileDeviceAccessRuleError> for Error {
    fn from(err: crate::error::UpdateMobileDeviceAccessRuleError) -> Self {
        match err {
            crate::error::UpdateMobileDeviceAccessRuleError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateMobileDeviceAccessRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateMobileDeviceAccessRuleError::OrganizationNotFoundException(
                inner,
            ) => Error::OrganizationNotFoundException(inner),
            crate::error::UpdateMobileDeviceAccessRuleError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::UpdateMobileDeviceAccessRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePrimaryEmailAddressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePrimaryEmailAddressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePrimaryEmailAddressError> for Error {
    fn from(err: crate::error::UpdatePrimaryEmailAddressError) -> Self {
        match err {
            crate::error::UpdatePrimaryEmailAddressError::DirectoryServiceAuthenticationFailedException(inner) => Error::DirectoryServiceAuthenticationFailedException(inner),
            crate::error::UpdatePrimaryEmailAddressError::DirectoryUnavailableException(inner) => Error::DirectoryUnavailableException(inner),
            crate::error::UpdatePrimaryEmailAddressError::EmailAddressInUseException(inner) => Error::EmailAddressInUseException(inner),
            crate::error::UpdatePrimaryEmailAddressError::EntityNotFoundException(inner) => Error::EntityNotFoundException(inner),
            crate::error::UpdatePrimaryEmailAddressError::EntityStateException(inner) => Error::EntityStateException(inner),
            crate::error::UpdatePrimaryEmailAddressError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::UpdatePrimaryEmailAddressError::MailDomainNotFoundException(inner) => Error::MailDomainNotFoundException(inner),
            crate::error::UpdatePrimaryEmailAddressError::MailDomainStateException(inner) => Error::MailDomainStateException(inner),
            crate::error::UpdatePrimaryEmailAddressError::OrganizationNotFoundException(inner) => Error::OrganizationNotFoundException(inner),
            crate::error::UpdatePrimaryEmailAddressError::OrganizationStateException(inner) => Error::OrganizationStateException(inner),
            crate::error::UpdatePrimaryEmailAddressError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::UpdatePrimaryEmailAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceError> for Error {
    fn from(err: crate::error::UpdateResourceError) -> Self {
        match err {
            crate::error::UpdateResourceError::DirectoryUnavailableException(inner) => {
                Error::DirectoryUnavailableException(inner)
            }
            crate::error::UpdateResourceError::EmailAddressInUseException(inner) => {
                Error::EmailAddressInUseException(inner)
            }
            crate::error::UpdateResourceError::EntityNotFoundException(inner) => {
                Error::EntityNotFoundException(inner)
            }
            crate::error::UpdateResourceError::EntityStateException(inner) => {
                Error::EntityStateException(inner)
            }
            crate::error::UpdateResourceError::InvalidConfigurationException(inner) => {
                Error::InvalidConfigurationException(inner)
            }
            crate::error::UpdateResourceError::MailDomainNotFoundException(inner) => {
                Error::MailDomainNotFoundException(inner)
            }
            crate::error::UpdateResourceError::MailDomainStateException(inner) => {
                Error::MailDomainStateException(inner)
            }
            crate::error::UpdateResourceError::NameAvailabilityException(inner) => {
                Error::NameAvailabilityException(inner)
            }
            crate::error::UpdateResourceError::OrganizationNotFoundException(inner) => {
                Error::OrganizationNotFoundException(inner)
            }
            crate::error::UpdateResourceError::OrganizationStateException(inner) => {
                Error::OrganizationStateException(inner)
            }
            crate::error::UpdateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::DirectoryInUseException(e) => e.request_id(),
            Self::DirectoryServiceAuthenticationFailedException(e) => e.request_id(),
            Self::DirectoryUnavailableException(e) => e.request_id(),
            Self::EmailAddressInUseException(e) => e.request_id(),
            Self::EntityAlreadyRegisteredException(e) => e.request_id(),
            Self::EntityNotFoundException(e) => e.request_id(),
            Self::EntityStateException(e) => e.request_id(),
            Self::InvalidConfigurationException(e) => e.request_id(),
            Self::InvalidCustomSesConfigurationException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidPasswordException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MailDomainInUseException(e) => e.request_id(),
            Self::MailDomainNotFoundException(e) => e.request_id(),
            Self::MailDomainStateException(e) => e.request_id(),
            Self::NameAvailabilityException(e) => e.request_id(),
            Self::OrganizationNotFoundException(e) => e.request_id(),
            Self::OrganizationStateException(e) => e.request_id(),
            Self::ReservedNameException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
