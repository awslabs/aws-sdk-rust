// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an EWS based availability provider. This is only used as input to the service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EwsAvailabilityProvider {
    /// <p>The endpoint of the remote EWS server.</p>
    pub ews_endpoint: ::std::string::String,
    /// <p>The username used to authenticate the remote EWS server.</p>
    pub ews_username: ::std::string::String,
    /// <p>The password used to authenticate the remote EWS server.</p>
    pub ews_password: ::std::string::String,
}
impl EwsAvailabilityProvider {
    /// <p>The endpoint of the remote EWS server.</p>
    pub fn ews_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.ews_endpoint.deref()
    }
    /// <p>The username used to authenticate the remote EWS server.</p>
    pub fn ews_username(&self) -> &str {
        use std::ops::Deref;
        self.ews_username.deref()
    }
    /// <p>The password used to authenticate the remote EWS server.</p>
    pub fn ews_password(&self) -> &str {
        use std::ops::Deref;
        self.ews_password.deref()
    }
}
impl ::std::fmt::Debug for EwsAvailabilityProvider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EwsAvailabilityProvider");
        formatter.field("ews_endpoint", &self.ews_endpoint);
        formatter.field("ews_username", &self.ews_username);
        formatter.field("ews_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl EwsAvailabilityProvider {
    /// Creates a new builder-style object to manufacture [`EwsAvailabilityProvider`](crate::types::EwsAvailabilityProvider).
    pub fn builder() -> crate::types::builders::EwsAvailabilityProviderBuilder {
        crate::types::builders::EwsAvailabilityProviderBuilder::default()
    }
}

/// A builder for [`EwsAvailabilityProvider`](crate::types::EwsAvailabilityProvider).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EwsAvailabilityProviderBuilder {
    pub(crate) ews_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) ews_username: ::std::option::Option<::std::string::String>,
    pub(crate) ews_password: ::std::option::Option<::std::string::String>,
}
impl EwsAvailabilityProviderBuilder {
    /// <p>The endpoint of the remote EWS server.</p>
    /// This field is required.
    pub fn ews_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ews_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint of the remote EWS server.</p>
    pub fn set_ews_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ews_endpoint = input;
        self
    }
    /// <p>The endpoint of the remote EWS server.</p>
    pub fn get_ews_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.ews_endpoint
    }
    /// <p>The username used to authenticate the remote EWS server.</p>
    /// This field is required.
    pub fn ews_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ews_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The username used to authenticate the remote EWS server.</p>
    pub fn set_ews_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ews_username = input;
        self
    }
    /// <p>The username used to authenticate the remote EWS server.</p>
    pub fn get_ews_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.ews_username
    }
    /// <p>The password used to authenticate the remote EWS server.</p>
    /// This field is required.
    pub fn ews_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ews_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password used to authenticate the remote EWS server.</p>
    pub fn set_ews_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ews_password = input;
        self
    }
    /// <p>The password used to authenticate the remote EWS server.</p>
    pub fn get_ews_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.ews_password
    }
    /// Consumes the builder and constructs a [`EwsAvailabilityProvider`](crate::types::EwsAvailabilityProvider).
    /// This method will fail if any of the following fields are not set:
    /// - [`ews_endpoint`](crate::types::builders::EwsAvailabilityProviderBuilder::ews_endpoint)
    /// - [`ews_username`](crate::types::builders::EwsAvailabilityProviderBuilder::ews_username)
    /// - [`ews_password`](crate::types::builders::EwsAvailabilityProviderBuilder::ews_password)
    pub fn build(self) -> ::std::result::Result<crate::types::EwsAvailabilityProvider, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EwsAvailabilityProvider {
            ews_endpoint: self.ews_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ews_endpoint",
                    "ews_endpoint was not specified but it is required when building EwsAvailabilityProvider",
                )
            })?,
            ews_username: self.ews_username.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ews_username",
                    "ews_username was not specified but it is required when building EwsAvailabilityProvider",
                )
            })?,
            ews_password: self.ews_password.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ews_password",
                    "ews_password was not specified but it is required when building EwsAvailabilityProvider",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for EwsAvailabilityProviderBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EwsAvailabilityProviderBuilder");
        formatter.field("ews_endpoint", &self.ews_endpoint);
        formatter.field("ews_username", &self.ews_username);
        formatter.field("ews_password", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
