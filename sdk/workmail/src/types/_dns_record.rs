// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A DNS record uploaded to your DNS provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DnsRecord {
    /// <p>The RFC 1035 record type. Possible values: <code>CNAME</code>, <code>A</code>, <code>MX</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The DNS hostname.- For example, <code>domain.example.com</code>.</p>
    #[doc(hidden)]
    pub hostname: std::option::Option<std::string::String>,
    /// <p>The value returned by the DNS for a query to that hostname and record type.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl DnsRecord {
    /// <p>The RFC 1035 record type. Possible values: <code>CNAME</code>, <code>A</code>, <code>MX</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The DNS hostname.- For example, <code>domain.example.com</code>.</p>
    pub fn hostname(&self) -> std::option::Option<&str> {
        self.hostname.as_deref()
    }
    /// <p>The value returned by the DNS for a query to that hostname and record type.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl DnsRecord {
    /// Creates a new builder-style object to manufacture [`DnsRecord`](crate::types::DnsRecord).
    pub fn builder() -> crate::types::builders::DnsRecordBuilder {
        crate::types::builders::DnsRecordBuilder::default()
    }
}

/// A builder for [`DnsRecord`](crate::types::DnsRecord).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DnsRecordBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) hostname: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl DnsRecordBuilder {
    /// <p>The RFC 1035 record type. Possible values: <code>CNAME</code>, <code>A</code>, <code>MX</code>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The RFC 1035 record type. Possible values: <code>CNAME</code>, <code>A</code>, <code>MX</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The DNS hostname.- For example, <code>domain.example.com</code>.</p>
    pub fn hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.hostname = Some(input.into());
        self
    }
    /// <p>The DNS hostname.- For example, <code>domain.example.com</code>.</p>
    pub fn set_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hostname = input;
        self
    }
    /// <p>The value returned by the DNS for a query to that hostname and record type.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value returned by the DNS for a query to that hostname and record type.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`DnsRecord`](crate::types::DnsRecord).
    pub fn build(self) -> crate::types::DnsRecord {
        crate::types::DnsRecord {
            r#type: self.r#type,
            hostname: self.hostname,
            value: self.value,
        }
    }
}
