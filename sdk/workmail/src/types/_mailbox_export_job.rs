// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a mailbox export job, including the user or resource ID associated with the mailbox and the S3 bucket that the mailbox contents are exported to.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MailboxExportJob {
    /// <p>The identifier of the mailbox export job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the user or resource associated with the mailbox.</p>
    #[doc(hidden)]
    pub entity_id: std::option::Option<std::string::String>,
    /// <p>The mailbox export job description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The name of the S3 bucket.</p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The path to the S3 bucket and file that the mailbox export job exports to.</p>
    #[doc(hidden)]
    pub s3_path: std::option::Option<std::string::String>,
    /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
    #[doc(hidden)]
    pub estimated_progress: i32,
    /// <p>The state of the mailbox export job.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::MailboxExportJobState>,
    /// <p>The mailbox export job start timestamp.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The mailbox export job end timestamp.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl MailboxExportJob {
    /// <p>The identifier of the mailbox export job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The identifier of the user or resource associated with the mailbox.</p>
    pub fn entity_id(&self) -> std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The mailbox export job description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The path to the S3 bucket and file that the mailbox export job exports to.</p>
    pub fn s3_path(&self) -> std::option::Option<&str> {
        self.s3_path.as_deref()
    }
    /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
    pub fn estimated_progress(&self) -> i32 {
        self.estimated_progress
    }
    /// <p>The state of the mailbox export job.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::MailboxExportJobState> {
        self.state.as_ref()
    }
    /// <p>The mailbox export job start timestamp.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The mailbox export job end timestamp.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
}
impl MailboxExportJob {
    /// Creates a new builder-style object to manufacture [`MailboxExportJob`](crate::types::MailboxExportJob).
    pub fn builder() -> crate::types::builders::MailboxExportJobBuilder {
        crate::types::builders::MailboxExportJobBuilder::default()
    }
}

/// A builder for [`MailboxExportJob`](crate::types::MailboxExportJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MailboxExportJobBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) entity_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) s3_path: std::option::Option<std::string::String>,
    pub(crate) estimated_progress: std::option::Option<i32>,
    pub(crate) state: std::option::Option<crate::types::MailboxExportJobState>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl MailboxExportJobBuilder {
    /// <p>The identifier of the mailbox export job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The identifier of the mailbox export job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The identifier of the user or resource associated with the mailbox.</p>
    pub fn entity_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id = Some(input.into());
        self
    }
    /// <p>The identifier of the user or resource associated with the mailbox.</p>
    pub fn set_entity_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The mailbox export job description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The mailbox export job description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket.</p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The path to the S3 bucket and file that the mailbox export job exports to.</p>
    pub fn s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_path = Some(input.into());
        self
    }
    /// <p>The path to the S3 bucket and file that the mailbox export job exports to.</p>
    pub fn set_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_path = input;
        self
    }
    /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
    pub fn estimated_progress(mut self, input: i32) -> Self {
        self.estimated_progress = Some(input);
        self
    }
    /// <p>The estimated progress of the mailbox export job, in percentage points.</p>
    pub fn set_estimated_progress(mut self, input: std::option::Option<i32>) -> Self {
        self.estimated_progress = input;
        self
    }
    /// <p>The state of the mailbox export job.</p>
    pub fn state(mut self, input: crate::types::MailboxExportJobState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the mailbox export job.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::MailboxExportJobState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The mailbox export job start timestamp.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The mailbox export job start timestamp.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The mailbox export job end timestamp.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The mailbox export job end timestamp.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`MailboxExportJob`](crate::types::MailboxExportJob).
    pub fn build(self) -> crate::types::MailboxExportJob {
        crate::types::MailboxExportJob {
            job_id: self.job_id,
            entity_id: self.entity_id,
            description: self.description,
            s3_bucket_name: self.s3_bucket_name,
            s3_path: self.s3_path,
            estimated_progress: self.estimated_progress.unwrap_or_default(),
            state: self.state,
            start_time: self.start_time,
            end_time: self.end_time,
        }
    }
}
