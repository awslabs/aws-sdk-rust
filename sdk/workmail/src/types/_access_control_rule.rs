// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule that controls access to an WorkMail organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccessControlRule {
    /// <p>The rule name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The rule effect.</p>
    #[doc(hidden)]
    pub effect: std::option::Option<crate::types::AccessControlRuleEffect>,
    /// <p>The rule description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>IPv4 CIDR ranges to include in the rule.</p>
    #[doc(hidden)]
    pub ip_ranges: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>IPv4 CIDR ranges to exclude from the rule.</p>
    #[doc(hidden)]
    pub not_ip_ranges: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    #[doc(hidden)]
    pub actions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    #[doc(hidden)]
    pub not_actions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>User IDs to include in the rule.</p>
    #[doc(hidden)]
    pub user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>User IDs to exclude from the rule.</p>
    #[doc(hidden)]
    pub not_user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The date that the rule was created.</p>
    #[doc(hidden)]
    pub date_created: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date that the rule was modified.</p>
    #[doc(hidden)]
    pub date_modified: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Impersonation role IDs to include in the rule.</p>
    #[doc(hidden)]
    pub impersonation_role_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Impersonation role IDs to exclude from the rule.</p>
    #[doc(hidden)]
    pub not_impersonation_role_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AccessControlRule {
    /// <p>The rule name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The rule effect.</p>
    pub fn effect(&self) -> std::option::Option<&crate::types::AccessControlRuleEffect> {
        self.effect.as_ref()
    }
    /// <p>The rule description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>IPv4 CIDR ranges to include in the rule.</p>
    pub fn ip_ranges(&self) -> std::option::Option<&[std::string::String]> {
        self.ip_ranges.as_deref()
    }
    /// <p>IPv4 CIDR ranges to exclude from the rule.</p>
    pub fn not_ip_ranges(&self) -> std::option::Option<&[std::string::String]> {
        self.not_ip_ranges.as_deref()
    }
    /// <p>Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn actions(&self) -> std::option::Option<&[std::string::String]> {
        self.actions.as_deref()
    }
    /// <p>Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn not_actions(&self) -> std::option::Option<&[std::string::String]> {
        self.not_actions.as_deref()
    }
    /// <p>User IDs to include in the rule.</p>
    pub fn user_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.user_ids.as_deref()
    }
    /// <p>User IDs to exclude from the rule.</p>
    pub fn not_user_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.not_user_ids.as_deref()
    }
    /// <p>The date that the rule was created.</p>
    pub fn date_created(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.date_created.as_ref()
    }
    /// <p>The date that the rule was modified.</p>
    pub fn date_modified(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.date_modified.as_ref()
    }
    /// <p>Impersonation role IDs to include in the rule.</p>
    pub fn impersonation_role_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.impersonation_role_ids.as_deref()
    }
    /// <p>Impersonation role IDs to exclude from the rule.</p>
    pub fn not_impersonation_role_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.not_impersonation_role_ids.as_deref()
    }
}
impl AccessControlRule {
    /// Creates a new builder-style object to manufacture [`AccessControlRule`](crate::types::AccessControlRule).
    pub fn builder() -> crate::types::builders::AccessControlRuleBuilder {
        crate::types::builders::AccessControlRuleBuilder::default()
    }
}

/// A builder for [`AccessControlRule`](crate::types::AccessControlRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccessControlRuleBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) effect: std::option::Option<crate::types::AccessControlRuleEffect>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) ip_ranges: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_ip_ranges: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) actions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_actions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_user_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) date_created: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) date_modified: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) impersonation_role_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_impersonation_role_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl AccessControlRuleBuilder {
    /// <p>The rule name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The rule name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The rule effect.</p>
    pub fn effect(mut self, input: crate::types::AccessControlRuleEffect) -> Self {
        self.effect = Some(input);
        self
    }
    /// <p>The rule effect.</p>
    pub fn set_effect(
        mut self,
        input: std::option::Option<crate::types::AccessControlRuleEffect>,
    ) -> Self {
        self.effect = input;
        self
    }
    /// <p>The rule description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The rule description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `ip_ranges`.
    ///
    /// To override the contents of this collection use [`set_ip_ranges`](Self::set_ip_ranges).
    ///
    /// <p>IPv4 CIDR ranges to include in the rule.</p>
    pub fn ip_ranges(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ip_ranges.unwrap_or_default();
        v.push(input.into());
        self.ip_ranges = Some(v);
        self
    }
    /// <p>IPv4 CIDR ranges to include in the rule.</p>
    pub fn set_ip_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ip_ranges = input;
        self
    }
    /// Appends an item to `not_ip_ranges`.
    ///
    /// To override the contents of this collection use [`set_not_ip_ranges`](Self::set_not_ip_ranges).
    ///
    /// <p>IPv4 CIDR ranges to exclude from the rule.</p>
    pub fn not_ip_ranges(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_ip_ranges.unwrap_or_default();
        v.push(input.into());
        self.not_ip_ranges = Some(v);
        self
    }
    /// <p>IPv4 CIDR ranges to exclude from the rule.</p>
    pub fn set_not_ip_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_ip_ranges = input;
        self
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn actions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input.into());
        self.actions = Some(v);
        self
    }
    /// <p>Access protocol actions to include in the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn set_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.actions = input;
        self
    }
    /// Appends an item to `not_actions`.
    ///
    /// To override the contents of this collection use [`set_not_actions`](Self::set_not_actions).
    ///
    /// <p>Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn not_actions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_actions.unwrap_or_default();
        v.push(input.into());
        self.not_actions = Some(v);
        self
    }
    /// <p>Access protocol actions to exclude from the rule. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn set_not_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_actions = input;
        self
    }
    /// Appends an item to `user_ids`.
    ///
    /// To override the contents of this collection use [`set_user_ids`](Self::set_user_ids).
    ///
    /// <p>User IDs to include in the rule.</p>
    pub fn user_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_ids.unwrap_or_default();
        v.push(input.into());
        self.user_ids = Some(v);
        self
    }
    /// <p>User IDs to include in the rule.</p>
    pub fn set_user_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_ids = input;
        self
    }
    /// Appends an item to `not_user_ids`.
    ///
    /// To override the contents of this collection use [`set_not_user_ids`](Self::set_not_user_ids).
    ///
    /// <p>User IDs to exclude from the rule.</p>
    pub fn not_user_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_user_ids.unwrap_or_default();
        v.push(input.into());
        self.not_user_ids = Some(v);
        self
    }
    /// <p>User IDs to exclude from the rule.</p>
    pub fn set_not_user_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_user_ids = input;
        self
    }
    /// <p>The date that the rule was created.</p>
    pub fn date_created(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.date_created = Some(input);
        self
    }
    /// <p>The date that the rule was created.</p>
    pub fn set_date_created(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.date_created = input;
        self
    }
    /// <p>The date that the rule was modified.</p>
    pub fn date_modified(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.date_modified = Some(input);
        self
    }
    /// <p>The date that the rule was modified.</p>
    pub fn set_date_modified(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.date_modified = input;
        self
    }
    /// Appends an item to `impersonation_role_ids`.
    ///
    /// To override the contents of this collection use [`set_impersonation_role_ids`](Self::set_impersonation_role_ids).
    ///
    /// <p>Impersonation role IDs to include in the rule.</p>
    pub fn impersonation_role_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.impersonation_role_ids.unwrap_or_default();
        v.push(input.into());
        self.impersonation_role_ids = Some(v);
        self
    }
    /// <p>Impersonation role IDs to include in the rule.</p>
    pub fn set_impersonation_role_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.impersonation_role_ids = input;
        self
    }
    /// Appends an item to `not_impersonation_role_ids`.
    ///
    /// To override the contents of this collection use [`set_not_impersonation_role_ids`](Self::set_not_impersonation_role_ids).
    ///
    /// <p>Impersonation role IDs to exclude from the rule.</p>
    pub fn not_impersonation_role_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_impersonation_role_ids.unwrap_or_default();
        v.push(input.into());
        self.not_impersonation_role_ids = Some(v);
        self
    }
    /// <p>Impersonation role IDs to exclude from the rule.</p>
    pub fn set_not_impersonation_role_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_impersonation_role_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`AccessControlRule`](crate::types::AccessControlRule).
    pub fn build(self) -> crate::types::AccessControlRule {
        crate::types::AccessControlRule {
            name: self.name,
            effect: self.effect,
            description: self.description,
            ip_ranges: self.ip_ranges,
            not_ip_ranges: self.not_ip_ranges,
            actions: self.actions,
            not_actions: self.not_actions,
            user_ids: self.user_ids,
            not_user_ids: self.not_user_ids,
            date_created: self.date_created,
            date_modified: self.date_modified,
            impersonation_role_ids: self.impersonation_role_ids,
            not_impersonation_role_ids: self.not_impersonation_role_ids,
        }
    }
}
