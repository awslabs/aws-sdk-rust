// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The rules for the given impersonation role.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImpersonationRule {
    /// <p>The identifier of the rule.</p>
    #[doc(hidden)]
    pub impersonation_rule_id: std::option::Option<std::string::String>,
    /// <p>The rule name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The rule description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The effect of the rule when it matches the input. Allowed effect values are <code>ALLOW</code> or <code>DENY</code>.</p>
    #[doc(hidden)]
    pub effect: std::option::Option<crate::types::AccessEffect>,
    /// <p>A list of user IDs that match the rule.</p>
    #[doc(hidden)]
    pub target_users: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of user IDs that don't match the rule.</p>
    #[doc(hidden)]
    pub not_target_users: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ImpersonationRule {
    /// <p>The identifier of the rule.</p>
    pub fn impersonation_rule_id(&self) -> std::option::Option<&str> {
        self.impersonation_rule_id.as_deref()
    }
    /// <p>The rule name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The rule description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The effect of the rule when it matches the input. Allowed effect values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn effect(&self) -> std::option::Option<&crate::types::AccessEffect> {
        self.effect.as_ref()
    }
    /// <p>A list of user IDs that match the rule.</p>
    pub fn target_users(&self) -> std::option::Option<&[std::string::String]> {
        self.target_users.as_deref()
    }
    /// <p>A list of user IDs that don't match the rule.</p>
    pub fn not_target_users(&self) -> std::option::Option<&[std::string::String]> {
        self.not_target_users.as_deref()
    }
}
impl ImpersonationRule {
    /// Creates a new builder-style object to manufacture [`ImpersonationRule`](crate::types::ImpersonationRule).
    pub fn builder() -> crate::types::builders::ImpersonationRuleBuilder {
        crate::types::builders::ImpersonationRuleBuilder::default()
    }
}

/// A builder for [`ImpersonationRule`](crate::types::ImpersonationRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImpersonationRuleBuilder {
    pub(crate) impersonation_rule_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) effect: std::option::Option<crate::types::AccessEffect>,
    pub(crate) target_users: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_target_users: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ImpersonationRuleBuilder {
    /// <p>The identifier of the rule.</p>
    pub fn impersonation_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.impersonation_rule_id = Some(input.into());
        self
    }
    /// <p>The identifier of the rule.</p>
    pub fn set_impersonation_rule_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.impersonation_rule_id = input;
        self
    }
    /// <p>The rule name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The rule name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The rule description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The rule description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The effect of the rule when it matches the input. Allowed effect values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn effect(mut self, input: crate::types::AccessEffect) -> Self {
        self.effect = Some(input);
        self
    }
    /// <p>The effect of the rule when it matches the input. Allowed effect values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn set_effect(mut self, input: std::option::Option<crate::types::AccessEffect>) -> Self {
        self.effect = input;
        self
    }
    /// Appends an item to `target_users`.
    ///
    /// To override the contents of this collection use [`set_target_users`](Self::set_target_users).
    ///
    /// <p>A list of user IDs that match the rule.</p>
    pub fn target_users(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_users.unwrap_or_default();
        v.push(input.into());
        self.target_users = Some(v);
        self
    }
    /// <p>A list of user IDs that match the rule.</p>
    pub fn set_target_users(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_users = input;
        self
    }
    /// Appends an item to `not_target_users`.
    ///
    /// To override the contents of this collection use [`set_not_target_users`](Self::set_not_target_users).
    ///
    /// <p>A list of user IDs that don't match the rule.</p>
    pub fn not_target_users(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_target_users.unwrap_or_default();
        v.push(input.into());
        self.not_target_users = Some(v);
        self
    }
    /// <p>A list of user IDs that don't match the rule.</p>
    pub fn set_not_target_users(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_target_users = input;
        self
    }
    /// Consumes the builder and constructs a [`ImpersonationRule`](crate::types::ImpersonationRule).
    pub fn build(self) -> crate::types::ImpersonationRule {
        crate::types::ImpersonationRule {
            impersonation_rule_id: self.impersonation_rule_id,
            name: self.name,
            description: self.description,
            effect: self.effect,
            target_users: self.target_users,
            not_target_users: self.not_target_users,
        }
    }
}
