// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data for a given domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MailDomainSummary {
    /// <p>The domain name.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>Whether the domain is default or not.</p>
    #[doc(hidden)]
    pub default_domain: bool,
}
impl MailDomainSummary {
    /// <p>The domain name.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>Whether the domain is default or not.</p>
    pub fn default_domain(&self) -> bool {
        self.default_domain
    }
}
impl MailDomainSummary {
    /// Creates a new builder-style object to manufacture [`MailDomainSummary`](crate::types::MailDomainSummary).
    pub fn builder() -> crate::types::builders::MailDomainSummaryBuilder {
        crate::types::builders::MailDomainSummaryBuilder::default()
    }
}

/// A builder for [`MailDomainSummary`](crate::types::MailDomainSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MailDomainSummaryBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) default_domain: std::option::Option<bool>,
}
impl MailDomainSummaryBuilder {
    /// <p>The domain name.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>Whether the domain is default or not.</p>
    pub fn default_domain(mut self, input: bool) -> Self {
        self.default_domain = Some(input);
        self
    }
    /// <p>Whether the domain is default or not.</p>
    pub fn set_default_domain(mut self, input: std::option::Option<bool>) -> Self {
        self.default_domain = input;
        self
    }
    /// Consumes the builder and constructs a [`MailDomainSummary`](crate::types::MailDomainSummary).
    pub fn build(self) -> crate::types::MailDomainSummary {
        crate::types::MailDomainSummary {
            domain_name: self.domain_name,
            default_domain: self.default_domain.unwrap_or_default(),
        }
    }
}
