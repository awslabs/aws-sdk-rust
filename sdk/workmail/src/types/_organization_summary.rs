// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The representation of an organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OrganizationSummary {
    /// <p>The identifier associated with the organization.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The alias associated with the organization.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>The default email domain associated with the organization.</p>
    #[doc(hidden)]
    pub default_mail_domain: std::option::Option<std::string::String>,
    /// <p>The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The state associated with the organization.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
}
impl OrganizationSummary {
    /// <p>The identifier associated with the organization.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The alias associated with the organization.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The default email domain associated with the organization.</p>
    pub fn default_mail_domain(&self) -> std::option::Option<&str> {
        self.default_mail_domain.as_deref()
    }
    /// <p>The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The state associated with the organization.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl OrganizationSummary {
    /// Creates a new builder-style object to manufacture [`OrganizationSummary`](crate::types::OrganizationSummary).
    pub fn builder() -> crate::types::builders::OrganizationSummaryBuilder {
        crate::types::builders::OrganizationSummaryBuilder::default()
    }
}

/// A builder for [`OrganizationSummary`](crate::types::OrganizationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OrganizationSummaryBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) alias: std::option::Option<std::string::String>,
    pub(crate) default_mail_domain: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
}
impl OrganizationSummaryBuilder {
    /// <p>The identifier associated with the organization.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The identifier associated with the organization.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The alias associated with the organization.</p>
    pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.alias = Some(input.into());
        self
    }
    /// <p>The alias associated with the organization.</p>
    pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The default email domain associated with the organization.</p>
    pub fn default_mail_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_mail_domain = Some(input.into());
        self
    }
    /// <p>The default email domain associated with the organization.</p>
    pub fn set_default_mail_domain(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_mail_domain = input;
        self
    }
    /// <p>The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message associated with the organization. It is only present if unexpected behavior has occurred with regards to the organization. It provides insight or solutions regarding unexpected behavior.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The state associated with the organization.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state associated with the organization.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`OrganizationSummary`](crate::types::OrganizationSummary).
    pub fn build(self) -> crate::types::OrganizationSummary {
        crate::types::OrganizationSummary {
            organization_id: self.organization_id,
            alias: self.alias,
            default_mail_domain: self.default_mail_domain,
            error_message: self.error_message,
            state: self.state,
        }
    }
}
