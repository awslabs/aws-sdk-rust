// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The impersonation rule that matched the input.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImpersonationMatchedRule {
    /// <p>The ID of the rule that matched the input</p>
    #[doc(hidden)]
    pub impersonation_rule_id: std::option::Option<std::string::String>,
    /// <p>The name of the rule that matched the input.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl ImpersonationMatchedRule {
    /// <p>The ID of the rule that matched the input</p>
    pub fn impersonation_rule_id(&self) -> std::option::Option<&str> {
        self.impersonation_rule_id.as_deref()
    }
    /// <p>The name of the rule that matched the input.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl ImpersonationMatchedRule {
    /// Creates a new builder-style object to manufacture [`ImpersonationMatchedRule`](crate::types::ImpersonationMatchedRule).
    pub fn builder() -> crate::types::builders::ImpersonationMatchedRuleBuilder {
        crate::types::builders::ImpersonationMatchedRuleBuilder::default()
    }
}

/// A builder for [`ImpersonationMatchedRule`](crate::types::ImpersonationMatchedRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImpersonationMatchedRuleBuilder {
    pub(crate) impersonation_rule_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl ImpersonationMatchedRuleBuilder {
    /// <p>The ID of the rule that matched the input</p>
    pub fn impersonation_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.impersonation_rule_id = Some(input.into());
        self
    }
    /// <p>The ID of the rule that matched the input</p>
    pub fn set_impersonation_rule_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.impersonation_rule_id = input;
        self
    }
    /// <p>The name of the rule that matched the input.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule that matched the input.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`ImpersonationMatchedRule`](crate::types::ImpersonationMatchedRule).
    pub fn build(self) -> crate::types::ImpersonationMatchedRule {
        crate::types::ImpersonationMatchedRule {
            impersonation_rule_id: self.impersonation_rule_id,
            name: self.name,
        }
    }
}
