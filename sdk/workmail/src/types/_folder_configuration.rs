// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration applied to an organization's folders by its retention policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FolderConfiguration {
    /// <p>The folder name.</p>
    pub name: crate::types::FolderName,
    /// <p>The action to take on the folder contents at the end of the folder configuration period.</p>
    pub action: crate::types::RetentionAction,
    /// <p>The number of days for which the folder-configuration action applies.</p>
    pub period: ::std::option::Option<i32>,
}
impl FolderConfiguration {
    /// <p>The folder name.</p>
    pub fn name(&self) -> &crate::types::FolderName {
        &self.name
    }
    /// <p>The action to take on the folder contents at the end of the folder configuration period.</p>
    pub fn action(&self) -> &crate::types::RetentionAction {
        &self.action
    }
    /// <p>The number of days for which the folder-configuration action applies.</p>
    pub fn period(&self) -> ::std::option::Option<i32> {
        self.period
    }
}
impl FolderConfiguration {
    /// Creates a new builder-style object to manufacture [`FolderConfiguration`](crate::types::FolderConfiguration).
    pub fn builder() -> crate::types::builders::FolderConfigurationBuilder {
        crate::types::builders::FolderConfigurationBuilder::default()
    }
}

/// A builder for [`FolderConfiguration`](crate::types::FolderConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FolderConfigurationBuilder {
    pub(crate) name: ::std::option::Option<crate::types::FolderName>,
    pub(crate) action: ::std::option::Option<crate::types::RetentionAction>,
    pub(crate) period: ::std::option::Option<i32>,
}
impl FolderConfigurationBuilder {
    /// <p>The folder name.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::FolderName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The folder name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::FolderName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The folder name.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::FolderName> {
        &self.name
    }
    /// <p>The action to take on the folder contents at the end of the folder configuration period.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::RetentionAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to take on the folder contents at the end of the folder configuration period.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::RetentionAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action to take on the folder contents at the end of the folder configuration period.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::RetentionAction> {
        &self.action
    }
    /// <p>The number of days for which the folder-configuration action applies.</p>
    pub fn period(mut self, input: i32) -> Self {
        self.period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which the folder-configuration action applies.</p>
    pub fn set_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// <p>The number of days for which the folder-configuration action applies.</p>
    pub fn get_period(&self) -> &::std::option::Option<i32> {
        &self.period
    }
    /// Consumes the builder and constructs a [`FolderConfiguration`](crate::types::FolderConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FolderConfigurationBuilder::name)
    /// - [`action`](crate::types::builders::FolderConfigurationBuilder::action)
    pub fn build(self) -> ::std::result::Result<crate::types::FolderConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FolderConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FolderConfiguration",
                )
            })?,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building FolderConfiguration",
                )
            })?,
            period: self.period,
        })
    }
}
