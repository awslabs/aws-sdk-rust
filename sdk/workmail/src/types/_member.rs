// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The representation of a user or group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Member {
    /// <p>The identifier of the member.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the member.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A member can be a user or group.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::MemberType>,
    /// <p>The state of the member, which can be ENABLED, DISABLED, or DELETED.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::EntityState>,
    /// <p>The date indicating when the member was enabled for WorkMail use.</p>
    #[doc(hidden)]
    pub enabled_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date indicating when the member was disabled from WorkMail use.</p>
    #[doc(hidden)]
    pub disabled_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl Member {
    /// <p>The identifier of the member.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the member.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A member can be a user or group.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::MemberType> {
        self.r#type.as_ref()
    }
    /// <p>The state of the member, which can be ENABLED, DISABLED, or DELETED.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::EntityState> {
        self.state.as_ref()
    }
    /// <p>The date indicating when the member was enabled for WorkMail use.</p>
    pub fn enabled_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.enabled_date.as_ref()
    }
    /// <p>The date indicating when the member was disabled from WorkMail use.</p>
    pub fn disabled_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.disabled_date.as_ref()
    }
}
impl Member {
    /// Creates a new builder-style object to manufacture [`Member`](crate::types::Member).
    pub fn builder() -> crate::types::builders::MemberBuilder {
        crate::types::builders::MemberBuilder::default()
    }
}

/// A builder for [`Member`](crate::types::Member).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MemberBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::MemberType>,
    pub(crate) state: std::option::Option<crate::types::EntityState>,
    pub(crate) enabled_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) disabled_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl MemberBuilder {
    /// <p>The identifier of the member.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of the member.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the member.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the member.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A member can be a user or group.</p>
    pub fn r#type(mut self, input: crate::types::MemberType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>A member can be a user or group.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::MemberType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The state of the member, which can be ENABLED, DISABLED, or DELETED.</p>
    pub fn state(mut self, input: crate::types::EntityState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the member, which can be ENABLED, DISABLED, or DELETED.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::EntityState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The date indicating when the member was enabled for WorkMail use.</p>
    pub fn enabled_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.enabled_date = Some(input);
        self
    }
    /// <p>The date indicating when the member was enabled for WorkMail use.</p>
    pub fn set_enabled_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.enabled_date = input;
        self
    }
    /// <p>The date indicating when the member was disabled from WorkMail use.</p>
    pub fn disabled_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.disabled_date = Some(input);
        self
    }
    /// <p>The date indicating when the member was disabled from WorkMail use.</p>
    pub fn set_disabled_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.disabled_date = input;
        self
    }
    /// Consumes the builder and constructs a [`Member`](crate::types::Member).
    pub fn build(self) -> crate::types::Member {
        crate::types::Member {
            id: self.id,
            name: self.name,
            r#type: self.r#type,
            state: self.state,
            enabled_date: self.enabled_date,
            disabled_date: self.disabled_date,
        }
    }
}
