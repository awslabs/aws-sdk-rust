// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PutRetentionPolicyInput {
    /// <p>The organization ID.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The retention policy ID.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The retention policy name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The retention policy description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The retention policy folder configurations.</p>
    pub folder_configurations: ::std::option::Option<::std::vec::Vec<crate::types::FolderConfiguration>>,
}
impl PutRetentionPolicyInput {
    /// <p>The organization ID.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The retention policy ID.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The retention policy name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The retention policy description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The retention policy folder configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.folder_configurations.is_none()`.
    pub fn folder_configurations(&self) -> &[crate::types::FolderConfiguration] {
        self.folder_configurations.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PutRetentionPolicyInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutRetentionPolicyInput");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_configurations", &self.folder_configurations);
        formatter.finish()
    }
}
impl PutRetentionPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutRetentionPolicyInput`](crate::operation::put_retention_policy::PutRetentionPolicyInput).
    pub fn builder() -> crate::operation::put_retention_policy::builders::PutRetentionPolicyInputBuilder {
        crate::operation::put_retention_policy::builders::PutRetentionPolicyInputBuilder::default()
    }
}

/// A builder for [`PutRetentionPolicyInput`](crate::operation::put_retention_policy::PutRetentionPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PutRetentionPolicyInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) folder_configurations: ::std::option::Option<::std::vec::Vec<crate::types::FolderConfiguration>>,
}
impl PutRetentionPolicyInputBuilder {
    /// <p>The organization ID.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization ID.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The organization ID.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The retention policy ID.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The retention policy ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The retention policy ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The retention policy name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The retention policy name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The retention policy name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The retention policy description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The retention policy description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The retention policy description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `folder_configurations`.
    ///
    /// To override the contents of this collection use [`set_folder_configurations`](Self::set_folder_configurations).
    ///
    /// <p>The retention policy folder configurations.</p>
    pub fn folder_configurations(mut self, input: crate::types::FolderConfiguration) -> Self {
        let mut v = self.folder_configurations.unwrap_or_default();
        v.push(input);
        self.folder_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The retention policy folder configurations.</p>
    pub fn set_folder_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FolderConfiguration>>) -> Self {
        self.folder_configurations = input;
        self
    }
    /// <p>The retention policy folder configurations.</p>
    pub fn get_folder_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FolderConfiguration>> {
        &self.folder_configurations
    }
    /// Consumes the builder and constructs a [`PutRetentionPolicyInput`](crate::operation::put_retention_policy::PutRetentionPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_retention_policy::PutRetentionPolicyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_retention_policy::PutRetentionPolicyInput {
            organization_id: self.organization_id,
            id: self.id,
            name: self.name,
            description: self.description,
            folder_configurations: self.folder_configurations,
        })
    }
}
impl ::std::fmt::Debug for PutRetentionPolicyInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PutRetentionPolicyInputBuilder");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("folder_configurations", &self.folder_configurations);
        formatter.finish()
    }
}
