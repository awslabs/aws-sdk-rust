// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutMailboxPermissionsInput {
    /// <p>The identifier of the organization under which the user, group, or resource exists.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user or resource for which to update mailbox permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity name: entity</p> </li>
    /// </ul>
    pub entity_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user, group, or resource to which to grant the permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Grantee ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: grantee@domain.tld</p> </li>
    /// <li> <p>Grantee name: grantee</p> </li>
    /// </ul>
    pub grantee_id: ::std::option::Option<::std::string::String>,
    /// <p>The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.</p>
    pub permission_values: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>,
}
impl PutMailboxPermissionsInput {
    /// <p>The identifier of the organization under which the user, group, or resource exists.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The identifier of the user or resource for which to update mailbox permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity name: entity</p> </li>
    /// </ul>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
    /// <p>The identifier of the user, group, or resource to which to grant the permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Grantee ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: grantee@domain.tld</p> </li>
    /// <li> <p>Grantee name: grantee</p> </li>
    /// </ul>
    pub fn grantee_id(&self) -> ::std::option::Option<&str> {
        self.grantee_id.as_deref()
    }
    /// <p>The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.permission_values.is_none()`.
    pub fn permission_values(&self) -> &[crate::types::PermissionType] {
        self.permission_values.as_deref().unwrap_or_default()
    }
}
impl PutMailboxPermissionsInput {
    /// Creates a new builder-style object to manufacture [`PutMailboxPermissionsInput`](crate::operation::put_mailbox_permissions::PutMailboxPermissionsInput).
    pub fn builder() -> crate::operation::put_mailbox_permissions::builders::PutMailboxPermissionsInputBuilder {
        crate::operation::put_mailbox_permissions::builders::PutMailboxPermissionsInputBuilder::default()
    }
}

/// A builder for [`PutMailboxPermissionsInput`](crate::operation::put_mailbox_permissions::PutMailboxPermissionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutMailboxPermissionsInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) grantee_id: ::std::option::Option<::std::string::String>,
    pub(crate) permission_values: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>,
}
impl PutMailboxPermissionsInputBuilder {
    /// <p>The identifier of the organization under which the user, group, or resource exists.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the organization under which the user, group, or resource exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The identifier of the organization under which the user, group, or resource exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The identifier of the user or resource for which to update mailbox permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity name: entity</p> </li>
    /// </ul>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user or resource for which to update mailbox permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity name: entity</p> </li>
    /// </ul>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The identifier of the user or resource for which to update mailbox permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity name: entity</p> </li>
    /// </ul>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>The identifier of the user, group, or resource to which to grant the permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Grantee ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: grantee@domain.tld</p> </li>
    /// <li> <p>Grantee name: grantee</p> </li>
    /// </ul>
    /// This field is required.
    pub fn grantee_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grantee_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user, group, or resource to which to grant the permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Grantee ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: grantee@domain.tld</p> </li>
    /// <li> <p>Grantee name: grantee</p> </li>
    /// </ul>
    pub fn set_grantee_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grantee_id = input;
        self
    }
    /// <p>The identifier of the user, group, or resource to which to grant the permissions.</p>
    /// <p>The identifier can be <i>UserId, ResourceID, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Grantee ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: grantee@domain.tld</p> </li>
    /// <li> <p>Grantee name: grantee</p> </li>
    /// </ul>
    pub fn get_grantee_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.grantee_id
    }
    /// Appends an item to `permission_values`.
    ///
    /// To override the contents of this collection use [`set_permission_values`](Self::set_permission_values).
    ///
    /// <p>The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.</p>
    pub fn permission_values(mut self, input: crate::types::PermissionType) -> Self {
        let mut v = self.permission_values.unwrap_or_default();
        v.push(input);
        self.permission_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.</p>
    pub fn set_permission_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PermissionType>>) -> Self {
        self.permission_values = input;
        self
    }
    /// <p>The permissions granted to the grantee. SEND_AS allows the grantee to send email as the owner of the mailbox (the grantee is not mentioned on these emails). SEND_ON_BEHALF allows the grantee to send email on behalf of the owner of the mailbox (the grantee is not mentioned as the physical sender of these emails). FULL_ACCESS allows the grantee full access to the mailbox, irrespective of other folder-level permissions set on the mailbox.</p>
    pub fn get_permission_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PermissionType>> {
        &self.permission_values
    }
    /// Consumes the builder and constructs a [`PutMailboxPermissionsInput`](crate::operation::put_mailbox_permissions::PutMailboxPermissionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_mailbox_permissions::PutMailboxPermissionsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_mailbox_permissions::PutMailboxPermissionsInput {
            organization_id: self.organization_id,
            entity_id: self.entity_id,
            grantee_id: self.grantee_id,
            permission_values: self.permission_values,
        })
    }
}
