// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateImpersonationRoleOutput {
    /// <p>The new impersonation role ID.</p>
    #[doc(hidden)]
    pub impersonation_role_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateImpersonationRoleOutput {
    /// <p>The new impersonation role ID.</p>
    pub fn impersonation_role_id(&self) -> std::option::Option<&str> {
        self.impersonation_role_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateImpersonationRoleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateImpersonationRoleOutput {
    /// Creates a new builder-style object to manufacture [`CreateImpersonationRoleOutput`](crate::operation::create_impersonation_role::CreateImpersonationRoleOutput).
    pub fn builder(
    ) -> crate::operation::create_impersonation_role::builders::CreateImpersonationRoleOutputBuilder
    {
        crate::operation::create_impersonation_role::builders::CreateImpersonationRoleOutputBuilder::default()
    }
}

/// A builder for [`CreateImpersonationRoleOutput`](crate::operation::create_impersonation_role::CreateImpersonationRoleOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateImpersonationRoleOutputBuilder {
    pub(crate) impersonation_role_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateImpersonationRoleOutputBuilder {
    /// <p>The new impersonation role ID.</p>
    pub fn impersonation_role_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.impersonation_role_id = Some(input.into());
        self
    }
    /// <p>The new impersonation role ID.</p>
    pub fn set_impersonation_role_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.impersonation_role_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateImpersonationRoleOutput`](crate::operation::create_impersonation_role::CreateImpersonationRoleOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_impersonation_role::CreateImpersonationRoleOutput {
        crate::operation::create_impersonation_role::CreateImpersonationRoleOutput {
            impersonation_role_id: self.impersonation_role_id,
            _request_id: self._request_id,
        }
    }
}
