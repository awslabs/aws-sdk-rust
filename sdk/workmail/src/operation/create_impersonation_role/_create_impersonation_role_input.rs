// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateImpersonationRoleInput {
    /// <p>The idempotency token for the client request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The WorkMail organization to create the new impersonation role within.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the new impersonation role.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The impersonation role's type. The available impersonation role types are <code>READ_ONLY</code> or <code>FULL_ACCESS</code>.</p>
    pub r#type: ::std::option::Option<crate::types::ImpersonationRoleType>,
    /// <p>The description of the new impersonation role.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The list of rules for the impersonation role.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::ImpersonationRule>>,
}
impl CreateImpersonationRoleInput {
    /// <p>The idempotency token for the client request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The WorkMail organization to create the new impersonation role within.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The name of the new impersonation role.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The impersonation role's type. The available impersonation role types are <code>READ_ONLY</code> or <code>FULL_ACCESS</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ImpersonationRoleType> {
        self.r#type.as_ref()
    }
    /// <p>The description of the new impersonation role.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The list of rules for the impersonation role.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::ImpersonationRule] {
        self.rules.as_deref().unwrap_or_default()
    }
}
impl CreateImpersonationRoleInput {
    /// Creates a new builder-style object to manufacture [`CreateImpersonationRoleInput`](crate::operation::create_impersonation_role::CreateImpersonationRoleInput).
    pub fn builder() -> crate::operation::create_impersonation_role::builders::CreateImpersonationRoleInputBuilder {
        crate::operation::create_impersonation_role::builders::CreateImpersonationRoleInputBuilder::default()
    }
}

/// A builder for [`CreateImpersonationRoleInput`](crate::operation::create_impersonation_role::CreateImpersonationRoleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateImpersonationRoleInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ImpersonationRoleType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::ImpersonationRule>>,
}
impl CreateImpersonationRoleInputBuilder {
    /// <p>The idempotency token for the client request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token for the client request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token for the client request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The WorkMail organization to create the new impersonation role within.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The WorkMail organization to create the new impersonation role within.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The WorkMail organization to create the new impersonation role within.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The name of the new impersonation role.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new impersonation role.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the new impersonation role.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The impersonation role's type. The available impersonation role types are <code>READ_ONLY</code> or <code>FULL_ACCESS</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ImpersonationRoleType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The impersonation role's type. The available impersonation role types are <code>READ_ONLY</code> or <code>FULL_ACCESS</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ImpersonationRoleType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The impersonation role's type. The available impersonation role types are <code>READ_ONLY</code> or <code>FULL_ACCESS</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ImpersonationRoleType> {
        &self.r#type
    }
    /// <p>The description of the new impersonation role.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the new impersonation role.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the new impersonation role.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The list of rules for the impersonation role.</p>
    pub fn rules(mut self, input: crate::types::ImpersonationRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of rules for the impersonation role.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ImpersonationRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The list of rules for the impersonation role.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ImpersonationRule>> {
        &self.rules
    }
    /// Consumes the builder and constructs a [`CreateImpersonationRoleInput`](crate::operation::create_impersonation_role::CreateImpersonationRoleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_impersonation_role::CreateImpersonationRoleInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_impersonation_role::CreateImpersonationRoleInput {
            client_token: self.client_token,
            organization_id: self.organization_id,
            name: self.name,
            r#type: self.r#type,
            description: self.description,
            rules: self.rules,
        })
    }
}
