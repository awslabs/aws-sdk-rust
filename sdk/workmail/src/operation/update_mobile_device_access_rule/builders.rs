// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_mobile_device_access_rule::_update_mobile_device_access_rule_output::UpdateMobileDeviceAccessRuleOutputBuilder;

pub use crate::operation::update_mobile_device_access_rule::_update_mobile_device_access_rule_input::UpdateMobileDeviceAccessRuleInputBuilder;

impl UpdateMobileDeviceAccessRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_mobile_device_access_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateMobileDeviceAccessRule`.
///
/// <p>Updates a mobile device access rule for the specified WorkMail organization.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateMobileDeviceAccessRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_mobile_device_access_rule::builders::UpdateMobileDeviceAccessRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleOutput,
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleError,
    > for UpdateMobileDeviceAccessRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleOutput,
            crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateMobileDeviceAccessRuleFluentBuilder {
    /// Creates a new `UpdateMobileDeviceAccessRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateMobileDeviceAccessRule as a reference.
    pub fn as_input(&self) -> &crate::operation::update_mobile_device_access_rule::builders::UpdateMobileDeviceAccessRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleOutput,
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_organization_id()
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn mobile_device_access_rule_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mobile_device_access_rule_id(input.into());
        self
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn set_mobile_device_access_rule_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mobile_device_access_rule_id(input);
        self
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn get_mobile_device_access_rule_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mobile_device_access_rule_id()
    }
    /// <p>The updated rule name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The updated rule name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The updated rule name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The updated rule description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The updated rule description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The updated rule description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn effect(mut self, input: crate::types::MobileDeviceAccessRuleEffect) -> Self {
        self.inner = self.inner.effect(input);
        self
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn set_effect(mut self, input: ::std::option::Option<crate::types::MobileDeviceAccessRuleEffect>) -> Self {
        self.inner = self.inner.set_effect(input);
        self
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn get_effect(&self) -> &::std::option::Option<crate::types::MobileDeviceAccessRuleEffect> {
        self.inner.get_effect()
    }
    /// Appends an item to `DeviceTypes`.
    ///
    /// To override the contents of this collection use [`set_device_types`](Self::set_device_types).
    ///
    /// <p>Device types that the updated rule will match.</p>
    pub fn device_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_types(input.into());
        self
    }
    /// <p>Device types that the updated rule will match.</p>
    pub fn set_device_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_device_types(input);
        self
    }
    /// <p>Device types that the updated rule will match.</p>
    pub fn get_device_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_device_types()
    }
    /// Appends an item to `NotDeviceTypes`.
    ///
    /// To override the contents of this collection use [`set_not_device_types`](Self::set_not_device_types).
    ///
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn not_device_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.not_device_types(input.into());
        self
    }
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn set_not_device_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_not_device_types(input);
        self
    }
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn get_not_device_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_not_device_types()
    }
    /// Appends an item to `DeviceModels`.
    ///
    /// To override the contents of this collection use [`set_device_models`](Self::set_device_models).
    ///
    /// <p>Device models that the updated rule will match.</p>
    pub fn device_models(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_models(input.into());
        self
    }
    /// <p>Device models that the updated rule will match.</p>
    pub fn set_device_models(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_device_models(input);
        self
    }
    /// <p>Device models that the updated rule will match.</p>
    pub fn get_device_models(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_device_models()
    }
    /// Appends an item to `NotDeviceModels`.
    ///
    /// To override the contents of this collection use [`set_not_device_models`](Self::set_not_device_models).
    ///
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn not_device_models(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.not_device_models(input.into());
        self
    }
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn set_not_device_models(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_not_device_models(input);
        self
    }
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn get_not_device_models(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_not_device_models()
    }
    /// Appends an item to `DeviceOperatingSystems`.
    ///
    /// To override the contents of this collection use [`set_device_operating_systems`](Self::set_device_operating_systems).
    ///
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn device_operating_systems(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_operating_systems(input.into());
        self
    }
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn set_device_operating_systems(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_device_operating_systems(input);
        self
    }
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn get_device_operating_systems(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_device_operating_systems()
    }
    /// Appends an item to `NotDeviceOperatingSystems`.
    ///
    /// To override the contents of this collection use [`set_not_device_operating_systems`](Self::set_not_device_operating_systems).
    ///
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn not_device_operating_systems(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.not_device_operating_systems(input.into());
        self
    }
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn set_not_device_operating_systems(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_not_device_operating_systems(input);
        self
    }
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn get_not_device_operating_systems(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_not_device_operating_systems()
    }
    /// Appends an item to `DeviceUserAgents`.
    ///
    /// To override the contents of this collection use [`set_device_user_agents`](Self::set_device_user_agents).
    ///
    /// <p>User agents that the updated rule will match.</p>
    pub fn device_user_agents(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_user_agents(input.into());
        self
    }
    /// <p>User agents that the updated rule will match.</p>
    pub fn set_device_user_agents(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_device_user_agents(input);
        self
    }
    /// <p>User agents that the updated rule will match.</p>
    pub fn get_device_user_agents(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_device_user_agents()
    }
    /// Appends an item to `NotDeviceUserAgents`.
    ///
    /// To override the contents of this collection use [`set_not_device_user_agents`](Self::set_not_device_user_agents).
    ///
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn not_device_user_agents(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.not_device_user_agents(input.into());
        self
    }
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn set_not_device_user_agents(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_not_device_user_agents(input);
        self
    }
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn get_not_device_user_agents(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_not_device_user_agents()
    }
}
