// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMobileDeviceAccessRuleInput {
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the rule to be updated.</p>
    #[doc(hidden)]
    pub mobile_device_access_rule_id: std::option::Option<std::string::String>,
    /// <p>The updated rule name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated rule description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    #[doc(hidden)]
    pub effect: std::option::Option<crate::types::MobileDeviceAccessRuleEffect>,
    /// <p>Device types that the updated rule will match.</p>
    #[doc(hidden)]
    pub device_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    #[doc(hidden)]
    pub not_device_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Device models that the updated rule will match.</p>
    #[doc(hidden)]
    pub device_models: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    #[doc(hidden)]
    pub not_device_models: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Device operating systems that the updated rule will match.</p>
    #[doc(hidden)]
    pub device_operating_systems: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    #[doc(hidden)]
    pub not_device_operating_systems: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>User agents that the updated rule will match.</p>
    #[doc(hidden)]
    pub device_user_agents: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    #[doc(hidden)]
    pub not_device_user_agents: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateMobileDeviceAccessRuleInput {
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn mobile_device_access_rule_id(&self) -> std::option::Option<&str> {
        self.mobile_device_access_rule_id.as_deref()
    }
    /// <p>The updated rule name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated rule description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn effect(&self) -> std::option::Option<&crate::types::MobileDeviceAccessRuleEffect> {
        self.effect.as_ref()
    }
    /// <p>Device types that the updated rule will match.</p>
    pub fn device_types(&self) -> std::option::Option<&[std::string::String]> {
        self.device_types.as_deref()
    }
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn not_device_types(&self) -> std::option::Option<&[std::string::String]> {
        self.not_device_types.as_deref()
    }
    /// <p>Device models that the updated rule will match.</p>
    pub fn device_models(&self) -> std::option::Option<&[std::string::String]> {
        self.device_models.as_deref()
    }
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn not_device_models(&self) -> std::option::Option<&[std::string::String]> {
        self.not_device_models.as_deref()
    }
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn device_operating_systems(&self) -> std::option::Option<&[std::string::String]> {
        self.device_operating_systems.as_deref()
    }
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn not_device_operating_systems(&self) -> std::option::Option<&[std::string::String]> {
        self.not_device_operating_systems.as_deref()
    }
    /// <p>User agents that the updated rule will match.</p>
    pub fn device_user_agents(&self) -> std::option::Option<&[std::string::String]> {
        self.device_user_agents.as_deref()
    }
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn not_device_user_agents(&self) -> std::option::Option<&[std::string::String]> {
        self.not_device_user_agents.as_deref()
    }
}
impl UpdateMobileDeviceAccessRuleInput {
    /// Creates a new builder-style object to manufacture [`UpdateMobileDeviceAccessRuleInput`](crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleInput).
    pub fn builder() -> crate::operation::update_mobile_device_access_rule::builders::UpdateMobileDeviceAccessRuleInputBuilder{
        crate::operation::update_mobile_device_access_rule::builders::UpdateMobileDeviceAccessRuleInputBuilder::default()
    }
}

/// A builder for [`UpdateMobileDeviceAccessRuleInput`](crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateMobileDeviceAccessRuleInputBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) mobile_device_access_rule_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) effect: std::option::Option<crate::types::MobileDeviceAccessRuleEffect>,
    pub(crate) device_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_device_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) device_models: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_device_models: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) device_operating_systems: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_device_operating_systems:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) device_user_agents: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) not_device_user_agents: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateMobileDeviceAccessRuleInputBuilder {
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The WorkMail organization under which the rule will be updated.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn mobile_device_access_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.mobile_device_access_rule_id = Some(input.into());
        self
    }
    /// <p>The identifier of the rule to be updated.</p>
    pub fn set_mobile_device_access_rule_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.mobile_device_access_rule_id = input;
        self
    }
    /// <p>The updated rule name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated rule name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated rule description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated rule description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn effect(mut self, input: crate::types::MobileDeviceAccessRuleEffect) -> Self {
        self.effect = Some(input);
        self
    }
    /// <p>The effect of the rule when it matches. Allowed values are <code>ALLOW</code> or <code>DENY</code>.</p>
    pub fn set_effect(
        mut self,
        input: std::option::Option<crate::types::MobileDeviceAccessRuleEffect>,
    ) -> Self {
        self.effect = input;
        self
    }
    /// Appends an item to `device_types`.
    ///
    /// To override the contents of this collection use [`set_device_types`](Self::set_device_types).
    ///
    /// <p>Device types that the updated rule will match.</p>
    pub fn device_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.device_types.unwrap_or_default();
        v.push(input.into());
        self.device_types = Some(v);
        self
    }
    /// <p>Device types that the updated rule will match.</p>
    pub fn set_device_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.device_types = input;
        self
    }
    /// Appends an item to `not_device_types`.
    ///
    /// To override the contents of this collection use [`set_not_device_types`](Self::set_not_device_types).
    ///
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn not_device_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_device_types.unwrap_or_default();
        v.push(input.into());
        self.not_device_types = Some(v);
        self
    }
    /// <p>Device types that the updated rule <b>will not</b> match. All other device types will match.</p>
    pub fn set_not_device_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_device_types = input;
        self
    }
    /// Appends an item to `device_models`.
    ///
    /// To override the contents of this collection use [`set_device_models`](Self::set_device_models).
    ///
    /// <p>Device models that the updated rule will match.</p>
    pub fn device_models(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.device_models.unwrap_or_default();
        v.push(input.into());
        self.device_models = Some(v);
        self
    }
    /// <p>Device models that the updated rule will match.</p>
    pub fn set_device_models(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.device_models = input;
        self
    }
    /// Appends an item to `not_device_models`.
    ///
    /// To override the contents of this collection use [`set_not_device_models`](Self::set_not_device_models).
    ///
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn not_device_models(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_device_models.unwrap_or_default();
        v.push(input.into());
        self.not_device_models = Some(v);
        self
    }
    /// <p>Device models that the updated rule <b>will not</b> match. All other device models will match.</p>
    pub fn set_not_device_models(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_device_models = input;
        self
    }
    /// Appends an item to `device_operating_systems`.
    ///
    /// To override the contents of this collection use [`set_device_operating_systems`](Self::set_device_operating_systems).
    ///
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn device_operating_systems(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.device_operating_systems.unwrap_or_default();
        v.push(input.into());
        self.device_operating_systems = Some(v);
        self
    }
    /// <p>Device operating systems that the updated rule will match.</p>
    pub fn set_device_operating_systems(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.device_operating_systems = input;
        self
    }
    /// Appends an item to `not_device_operating_systems`.
    ///
    /// To override the contents of this collection use [`set_not_device_operating_systems`](Self::set_not_device_operating_systems).
    ///
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn not_device_operating_systems(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_device_operating_systems.unwrap_or_default();
        v.push(input.into());
        self.not_device_operating_systems = Some(v);
        self
    }
    /// <p>Device operating systems that the updated rule <b>will not</b> match. All other device operating systems will match.</p>
    pub fn set_not_device_operating_systems(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_device_operating_systems = input;
        self
    }
    /// Appends an item to `device_user_agents`.
    ///
    /// To override the contents of this collection use [`set_device_user_agents`](Self::set_device_user_agents).
    ///
    /// <p>User agents that the updated rule will match.</p>
    pub fn device_user_agents(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.device_user_agents.unwrap_or_default();
        v.push(input.into());
        self.device_user_agents = Some(v);
        self
    }
    /// <p>User agents that the updated rule will match.</p>
    pub fn set_device_user_agents(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.device_user_agents = input;
        self
    }
    /// Appends an item to `not_device_user_agents`.
    ///
    /// To override the contents of this collection use [`set_not_device_user_agents`](Self::set_not_device_user_agents).
    ///
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn not_device_user_agents(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.not_device_user_agents.unwrap_or_default();
        v.push(input.into());
        self.not_device_user_agents = Some(v);
        self
    }
    /// <p>User agents that the updated rule <b>will not</b> match. All other user agents will match.</p>
    pub fn set_not_device_user_agents(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.not_device_user_agents = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateMobileDeviceAccessRuleInput`](crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_mobile_device_access_rule::UpdateMobileDeviceAccessRuleInput {
                organization_id: self.organization_id,
                mobile_device_access_rule_id: self.mobile_device_access_rule_id,
                name: self.name,
                description: self.description,
                effect: self.effect,
                device_types: self.device_types,
                not_device_types: self.not_device_types,
                device_models: self.device_models,
                not_device_models: self.not_device_models,
                device_operating_systems: self.device_operating_systems,
                not_device_operating_systems: self.not_device_operating_systems,
                device_user_agents: self.device_user_agents,
                not_device_user_agents: self.not_device_user_agents,
            },
        )
    }
}
