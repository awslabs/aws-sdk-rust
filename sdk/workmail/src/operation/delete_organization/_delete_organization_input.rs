// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteOrganizationInput {
    /// <p>The idempotency token associated with the request.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The organization ID.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>If true, deletes the AWS Directory Service directory associated with the organization.</p>
    pub delete_directory: ::std::option::Option<bool>,
    /// <p>Deletes a WorkMail organization even if the organization has enabled users.</p>
    pub force_delete: ::std::option::Option<bool>,
}
impl DeleteOrganizationInput {
    /// <p>The idempotency token associated with the request.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The organization ID.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>If true, deletes the AWS Directory Service directory associated with the organization.</p>
    pub fn delete_directory(&self) -> ::std::option::Option<bool> {
        self.delete_directory
    }
    /// <p>Deletes a WorkMail organization even if the organization has enabled users.</p>
    pub fn force_delete(&self) -> ::std::option::Option<bool> {
        self.force_delete
    }
}
impl DeleteOrganizationInput {
    /// Creates a new builder-style object to manufacture [`DeleteOrganizationInput`](crate::operation::delete_organization::DeleteOrganizationInput).
    pub fn builder() -> crate::operation::delete_organization::builders::DeleteOrganizationInputBuilder {
        crate::operation::delete_organization::builders::DeleteOrganizationInputBuilder::default()
    }
}

/// A builder for [`DeleteOrganizationInput`](crate::operation::delete_organization::DeleteOrganizationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteOrganizationInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) delete_directory: ::std::option::Option<bool>,
    pub(crate) force_delete: ::std::option::Option<bool>,
}
impl DeleteOrganizationInputBuilder {
    /// <p>The idempotency token associated with the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The idempotency token associated with the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The idempotency token associated with the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The organization ID.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization ID.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The organization ID.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>If true, deletes the AWS Directory Service directory associated with the organization.</p>
    /// This field is required.
    pub fn delete_directory(mut self, input: bool) -> Self {
        self.delete_directory = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, deletes the AWS Directory Service directory associated with the organization.</p>
    pub fn set_delete_directory(mut self, input: ::std::option::Option<bool>) -> Self {
        self.delete_directory = input;
        self
    }
    /// <p>If true, deletes the AWS Directory Service directory associated with the organization.</p>
    pub fn get_delete_directory(&self) -> &::std::option::Option<bool> {
        &self.delete_directory
    }
    /// <p>Deletes a WorkMail organization even if the organization has enabled users.</p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.force_delete = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deletes a WorkMail organization even if the organization has enabled users.</p>
    pub fn set_force_delete(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_delete = input;
        self
    }
    /// <p>Deletes a WorkMail organization even if the organization has enabled users.</p>
    pub fn get_force_delete(&self) -> &::std::option::Option<bool> {
        &self.force_delete
    }
    /// Consumes the builder and constructs a [`DeleteOrganizationInput`](crate::operation::delete_organization::DeleteOrganizationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_organization::DeleteOrganizationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_organization::DeleteOrganizationInput {
            client_token: self.client_token,
            organization_id: self.organization_id,
            delete_directory: self.delete_directory,
            force_delete: self.force_delete,
        })
    }
}
