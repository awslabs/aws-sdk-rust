// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssumeImpersonationRoleOutput {
    /// <p>The authentication token for the impersonation role.</p>
    #[doc(hidden)]
    pub token: std::option::Option<std::string::String>,
    /// <p>The authentication token's validity, in seconds.</p>
    #[doc(hidden)]
    pub expires_in: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl AssumeImpersonationRoleOutput {
    /// <p>The authentication token for the impersonation role.</p>
    pub fn token(&self) -> std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>The authentication token's validity, in seconds.</p>
    pub fn expires_in(&self) -> std::option::Option<i64> {
        self.expires_in
    }
}
impl aws_http::request_id::RequestId for AssumeImpersonationRoleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssumeImpersonationRoleOutput {
    /// Creates a new builder-style object to manufacture [`AssumeImpersonationRoleOutput`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput).
    pub fn builder(
    ) -> crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleOutputBuilder
    {
        crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleOutputBuilder::default()
    }
}

/// A builder for [`AssumeImpersonationRoleOutput`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssumeImpersonationRoleOutputBuilder {
    pub(crate) token: std::option::Option<std::string::String>,
    pub(crate) expires_in: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl AssumeImpersonationRoleOutputBuilder {
    /// <p>The authentication token for the impersonation role.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.token = Some(input.into());
        self
    }
    /// <p>The authentication token for the impersonation role.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The authentication token's validity, in seconds.</p>
    pub fn expires_in(mut self, input: i64) -> Self {
        self.expires_in = Some(input);
        self
    }
    /// <p>The authentication token's validity, in seconds.</p>
    pub fn set_expires_in(mut self, input: std::option::Option<i64>) -> Self {
        self.expires_in = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AssumeImpersonationRoleOutput`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput).
    pub fn build(
        self,
    ) -> crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput {
        crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput {
            token: self.token,
            expires_in: self.expires_in,
            _request_id: self._request_id,
        }
    }
}
