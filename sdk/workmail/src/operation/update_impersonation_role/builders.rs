// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_impersonation_role::_update_impersonation_role_output::UpdateImpersonationRoleOutputBuilder;

pub use crate::operation::update_impersonation_role::_update_impersonation_role_input::UpdateImpersonationRoleInputBuilder;

/// Fluent builder constructing a request to `UpdateImpersonationRole`.
///
/// <p>Updates an impersonation role for the given WorkMail organization.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateImpersonationRoleFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::update_impersonation_role::builders::UpdateImpersonationRoleInputBuilder,
}
impl UpdateImpersonationRoleFluentBuilder {
    /// Creates a new `UpdateImpersonationRole`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_impersonation_role::UpdateImpersonationRole,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_impersonation_role::UpdateImpersonationRoleError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_impersonation_role::UpdateImpersonationRoleOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_impersonation_role::UpdateImpersonationRoleError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The ID of the impersonation role to update.</p>
    pub fn impersonation_role_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.impersonation_role_id(input.into());
        self
    }
    /// <p>The ID of the impersonation role to update.</p>
    pub fn set_impersonation_role_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_impersonation_role_id(input);
        self
    }
    /// <p>The updated impersonation role name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The updated impersonation role name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The updated impersonation role type.</p>
    pub fn r#type(mut self, input: crate::types::ImpersonationRoleType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The updated impersonation role type.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ImpersonationRoleType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The updated impersonation role description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>The updated impersonation role description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Appends an item to `Rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The updated list of rules.</p>
    pub fn rules(mut self, input: crate::types::ImpersonationRule) -> Self {
        self.inner = self.inner.rules(input);
        self
    }
    /// <p>The updated list of rules.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImpersonationRule>>,
    ) -> Self {
        self.inner = self.inner.set_rules(input);
        self
    }
}
