// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateImpersonationRoleInput {
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The ID of the impersonation role to update.</p>
    #[doc(hidden)]
    pub impersonation_role_id: std::option::Option<std::string::String>,
    /// <p>The updated impersonation role name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated impersonation role type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ImpersonationRoleType>,
    /// <p>The updated impersonation role description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated list of rules.</p>
    #[doc(hidden)]
    pub rules: std::option::Option<std::vec::Vec<crate::types::ImpersonationRule>>,
}
impl UpdateImpersonationRoleInput {
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The ID of the impersonation role to update.</p>
    pub fn impersonation_role_id(&self) -> std::option::Option<&str> {
        self.impersonation_role_id.as_deref()
    }
    /// <p>The updated impersonation role name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated impersonation role type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ImpersonationRoleType> {
        self.r#type.as_ref()
    }
    /// <p>The updated impersonation role description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated list of rules.</p>
    pub fn rules(&self) -> std::option::Option<&[crate::types::ImpersonationRule]> {
        self.rules.as_deref()
    }
}
impl UpdateImpersonationRoleInput {
    /// Creates a new builder-style object to manufacture [`UpdateImpersonationRoleInput`](crate::operation::update_impersonation_role::UpdateImpersonationRoleInput).
    pub fn builder(
    ) -> crate::operation::update_impersonation_role::builders::UpdateImpersonationRoleInputBuilder
    {
        crate::operation::update_impersonation_role::builders::UpdateImpersonationRoleInputBuilder::default()
    }
}

/// A builder for [`UpdateImpersonationRoleInput`](crate::operation::update_impersonation_role::UpdateImpersonationRoleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateImpersonationRoleInputBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) impersonation_role_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ImpersonationRoleType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) rules: std::option::Option<std::vec::Vec<crate::types::ImpersonationRule>>,
}
impl UpdateImpersonationRoleInputBuilder {
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The WorkMail organization that contains the impersonation role to update.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The ID of the impersonation role to update.</p>
    pub fn impersonation_role_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.impersonation_role_id = Some(input.into());
        self
    }
    /// <p>The ID of the impersonation role to update.</p>
    pub fn set_impersonation_role_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.impersonation_role_id = input;
        self
    }
    /// <p>The updated impersonation role name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated impersonation role name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated impersonation role type.</p>
    pub fn r#type(mut self, input: crate::types::ImpersonationRoleType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The updated impersonation role type.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ImpersonationRoleType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The updated impersonation role description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated impersonation role description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The updated list of rules.</p>
    pub fn rules(mut self, input: crate::types::ImpersonationRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = Some(v);
        self
    }
    /// <p>The updated list of rules.</p>
    pub fn set_rules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImpersonationRule>>,
    ) -> Self {
        self.rules = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateImpersonationRoleInput`](crate::operation::update_impersonation_role::UpdateImpersonationRoleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_impersonation_role::UpdateImpersonationRoleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_impersonation_role::UpdateImpersonationRoleInput {
                organization_id: self.organization_id,
                impersonation_role_id: self.impersonation_role_id,
                name: self.name,
                r#type: self.r#type,
                description: self.description,
                rules: self.rules,
            },
        )
    }
}
