// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeResourceOutput {
    /// <p>The identifier of the described resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>The email of the described resource.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
    /// <p>The name of the described resource.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of the described resource.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ResourceType>,
    /// <p>The booking options for the described resource.</p>
    #[doc(hidden)]
    pub booking_options: std::option::Option<crate::types::BookingOptions>,
    /// <p>The state of the resource: enabled (registered to WorkMail), disabled (deregistered or never registered to WorkMail), or deleted.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::EntityState>,
    /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time format.</p>
    #[doc(hidden)]
    pub enabled_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time format.</p>
    #[doc(hidden)]
    pub disabled_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeResourceOutput {
    /// <p>The identifier of the described resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The email of the described resource.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The name of the described resource.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the described resource.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.r#type.as_ref()
    }
    /// <p>The booking options for the described resource.</p>
    pub fn booking_options(&self) -> std::option::Option<&crate::types::BookingOptions> {
        self.booking_options.as_ref()
    }
    /// <p>The state of the resource: enabled (registered to WorkMail), disabled (deregistered or never registered to WorkMail), or deleted.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::EntityState> {
        self.state.as_ref()
    }
    /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time format.</p>
    pub fn enabled_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.enabled_date.as_ref()
    }
    /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time format.</p>
    pub fn disabled_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.disabled_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeResourceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeResourceOutput`](crate::operation::describe_resource::DescribeResourceOutput).
    pub fn builder() -> crate::operation::describe_resource::builders::DescribeResourceOutputBuilder
    {
        crate::operation::describe_resource::builders::DescribeResourceOutputBuilder::default()
    }
}

/// A builder for [`DescribeResourceOutput`](crate::operation::describe_resource::DescribeResourceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeResourceOutputBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) email: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::ResourceType>,
    pub(crate) booking_options: std::option::Option<crate::types::BookingOptions>,
    pub(crate) state: std::option::Option<crate::types::EntityState>,
    pub(crate) enabled_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) disabled_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeResourceOutputBuilder {
    /// <p>The identifier of the described resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The identifier of the described resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The email of the described resource.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.email = Some(input.into());
        self
    }
    /// <p>The email of the described resource.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The name of the described resource.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the described resource.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of the described resource.</p>
    pub fn r#type(mut self, input: crate::types::ResourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the described resource.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ResourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The booking options for the described resource.</p>
    pub fn booking_options(mut self, input: crate::types::BookingOptions) -> Self {
        self.booking_options = Some(input);
        self
    }
    /// <p>The booking options for the described resource.</p>
    pub fn set_booking_options(
        mut self,
        input: std::option::Option<crate::types::BookingOptions>,
    ) -> Self {
        self.booking_options = input;
        self
    }
    /// <p>The state of the resource: enabled (registered to WorkMail), disabled (deregistered or never registered to WorkMail), or deleted.</p>
    pub fn state(mut self, input: crate::types::EntityState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the resource: enabled (registered to WorkMail), disabled (deregistered or never registered to WorkMail), or deleted.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::EntityState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time format.</p>
    pub fn enabled_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.enabled_date = Some(input);
        self
    }
    /// <p>The date and time when a resource was enabled for WorkMail, in UNIX epoch time format.</p>
    pub fn set_enabled_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.enabled_date = input;
        self
    }
    /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time format.</p>
    pub fn disabled_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.disabled_date = Some(input);
        self
    }
    /// <p>The date and time when a resource was disabled from WorkMail, in UNIX epoch time format.</p>
    pub fn set_disabled_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.disabled_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeResourceOutput`](crate::operation::describe_resource::DescribeResourceOutput).
    pub fn build(self) -> crate::operation::describe_resource::DescribeResourceOutput {
        crate::operation::describe_resource::DescribeResourceOutput {
            resource_id: self.resource_id,
            email: self.email,
            name: self.name,
            r#type: self.r#type,
            booking_options: self.booking_options,
            state: self.state,
            enabled_date: self.enabled_date,
            disabled_date: self.disabled_date,
            _request_id: self._request_id,
        }
    }
}
