// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMobileDeviceAccessEffectInput {
    /// <p>The WorkMail organization to simulate the access effect for.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>Device type the simulated user will report.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<std::string::String>,
    /// <p>Device model the simulated user will report.</p>
    #[doc(hidden)]
    pub device_model: std::option::Option<std::string::String>,
    /// <p>Device operating system the simulated user will report.</p>
    #[doc(hidden)]
    pub device_operating_system: std::option::Option<std::string::String>,
    /// <p>Device user agent the simulated user will report.</p>
    #[doc(hidden)]
    pub device_user_agent: std::option::Option<std::string::String>,
}
impl GetMobileDeviceAccessEffectInput {
    /// <p>The WorkMail organization to simulate the access effect for.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>Device type the simulated user will report.</p>
    pub fn device_type(&self) -> std::option::Option<&str> {
        self.device_type.as_deref()
    }
    /// <p>Device model the simulated user will report.</p>
    pub fn device_model(&self) -> std::option::Option<&str> {
        self.device_model.as_deref()
    }
    /// <p>Device operating system the simulated user will report.</p>
    pub fn device_operating_system(&self) -> std::option::Option<&str> {
        self.device_operating_system.as_deref()
    }
    /// <p>Device user agent the simulated user will report.</p>
    pub fn device_user_agent(&self) -> std::option::Option<&str> {
        self.device_user_agent.as_deref()
    }
}
impl GetMobileDeviceAccessEffectInput {
    /// Creates a new builder-style object to manufacture [`GetMobileDeviceAccessEffectInput`](crate::operation::get_mobile_device_access_effect::GetMobileDeviceAccessEffectInput).
    pub fn builder() -> crate::operation::get_mobile_device_access_effect::builders::GetMobileDeviceAccessEffectInputBuilder{
        crate::operation::get_mobile_device_access_effect::builders::GetMobileDeviceAccessEffectInputBuilder::default()
    }
}

/// A builder for [`GetMobileDeviceAccessEffectInput`](crate::operation::get_mobile_device_access_effect::GetMobileDeviceAccessEffectInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMobileDeviceAccessEffectInputBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) device_type: std::option::Option<std::string::String>,
    pub(crate) device_model: std::option::Option<std::string::String>,
    pub(crate) device_operating_system: std::option::Option<std::string::String>,
    pub(crate) device_user_agent: std::option::Option<std::string::String>,
}
impl GetMobileDeviceAccessEffectInputBuilder {
    /// <p>The WorkMail organization to simulate the access effect for.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The WorkMail organization to simulate the access effect for.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>Device type the simulated user will report.</p>
    pub fn device_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_type = Some(input.into());
        self
    }
    /// <p>Device type the simulated user will report.</p>
    pub fn set_device_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>Device model the simulated user will report.</p>
    pub fn device_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_model = Some(input.into());
        self
    }
    /// <p>Device model the simulated user will report.</p>
    pub fn set_device_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_model = input;
        self
    }
    /// <p>Device operating system the simulated user will report.</p>
    pub fn device_operating_system(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_operating_system = Some(input.into());
        self
    }
    /// <p>Device operating system the simulated user will report.</p>
    pub fn set_device_operating_system(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_operating_system = input;
        self
    }
    /// <p>Device user agent the simulated user will report.</p>
    pub fn device_user_agent(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_user_agent = Some(input.into());
        self
    }
    /// <p>Device user agent the simulated user will report.</p>
    pub fn set_device_user_agent(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_user_agent = input;
        self
    }
    /// Consumes the builder and constructs a [`GetMobileDeviceAccessEffectInput`](crate::operation::get_mobile_device_access_effect::GetMobileDeviceAccessEffectInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_mobile_device_access_effect::GetMobileDeviceAccessEffectInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_mobile_device_access_effect::GetMobileDeviceAccessEffectInput {
                organization_id: self.organization_id,
                device_type: self.device_type,
                device_model: self.device_model,
                device_operating_system: self.device_operating_system,
                device_user_agent: self.device_user_agent,
            },
        )
    }
}
