// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateUserInput {
    /// <p>The identifier for the organization under which the user exists.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub role: ::std::option::Option<crate::types::UserRole>,
    /// <p>Updates the display name of the user.</p>
    pub display_name: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's first name.</p>
    pub first_name: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's last name.</p>
    pub last_name: ::std::option::Option<::std::string::String>,
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub hidden_from_global_address_list: ::std::option::Option<bool>,
    /// <p>Updates the user's initials.</p>
    pub initials: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's contact details.</p>
    pub telephone: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's street address.</p>
    pub street: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's job title.</p>
    pub job_title: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's city.</p>
    pub city: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's company.</p>
    pub company: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's zipcode.</p>
    pub zip_code: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's department.</p>
    pub department: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's country.</p>
    pub country: ::std::option::Option<::std::string::String>,
    /// <p>Updates the user's office.</p>
    pub office: ::std::option::Option<::std::string::String>,
}
impl UpdateUserInput {
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn role(&self) -> ::std::option::Option<&crate::types::UserRole> {
        self.role.as_ref()
    }
    /// <p>Updates the display name of the user.</p>
    pub fn display_name(&self) -> ::std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>Updates the user's first name.</p>
    pub fn first_name(&self) -> ::std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>Updates the user's last name.</p>
    pub fn last_name(&self) -> ::std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn hidden_from_global_address_list(&self) -> ::std::option::Option<bool> {
        self.hidden_from_global_address_list
    }
    /// <p>Updates the user's initials.</p>
    pub fn initials(&self) -> ::std::option::Option<&str> {
        self.initials.as_deref()
    }
    /// <p>Updates the user's contact details.</p>
    pub fn telephone(&self) -> ::std::option::Option<&str> {
        self.telephone.as_deref()
    }
    /// <p>Updates the user's street address.</p>
    pub fn street(&self) -> ::std::option::Option<&str> {
        self.street.as_deref()
    }
    /// <p>Updates the user's job title.</p>
    pub fn job_title(&self) -> ::std::option::Option<&str> {
        self.job_title.as_deref()
    }
    /// <p>Updates the user's city.</p>
    pub fn city(&self) -> ::std::option::Option<&str> {
        self.city.as_deref()
    }
    /// <p>Updates the user's company.</p>
    pub fn company(&self) -> ::std::option::Option<&str> {
        self.company.as_deref()
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn zip_code(&self) -> ::std::option::Option<&str> {
        self.zip_code.as_deref()
    }
    /// <p>Updates the user's department.</p>
    pub fn department(&self) -> ::std::option::Option<&str> {
        self.department.as_deref()
    }
    /// <p>Updates the user's country.</p>
    pub fn country(&self) -> ::std::option::Option<&str> {
        self.country.as_deref()
    }
    /// <p>Updates the user's office.</p>
    pub fn office(&self) -> ::std::option::Option<&str> {
        self.office.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateUserInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserInput");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("role", &self.role);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("hidden_from_global_address_list", &self.hidden_from_global_address_list);
        formatter.field("initials", &"*** Sensitive Data Redacted ***");
        formatter.field("telephone", &"*** Sensitive Data Redacted ***");
        formatter.field("street", &"*** Sensitive Data Redacted ***");
        formatter.field("job_title", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("zip_code", &"*** Sensitive Data Redacted ***");
        formatter.field("department", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("office", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateUserInput {
    /// Creates a new builder-style object to manufacture [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn builder() -> crate::operation::update_user::builders::UpdateUserInputBuilder {
        crate::operation::update_user::builders::UpdateUserInputBuilder::default()
    }
}

/// A builder for [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateUserInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) role: ::std::option::Option<crate::types::UserRole>,
    pub(crate) display_name: ::std::option::Option<::std::string::String>,
    pub(crate) first_name: ::std::option::Option<::std::string::String>,
    pub(crate) last_name: ::std::option::Option<::std::string::String>,
    pub(crate) hidden_from_global_address_list: ::std::option::Option<bool>,
    pub(crate) initials: ::std::option::Option<::std::string::String>,
    pub(crate) telephone: ::std::option::Option<::std::string::String>,
    pub(crate) street: ::std::option::Option<::std::string::String>,
    pub(crate) job_title: ::std::option::Option<::std::string::String>,
    pub(crate) city: ::std::option::Option<::std::string::String>,
    pub(crate) company: ::std::option::Option<::std::string::String>,
    pub(crate) zip_code: ::std::option::Option<::std::string::String>,
    pub(crate) department: ::std::option::Option<::std::string::String>,
    pub(crate) country: ::std::option::Option<::std::string::String>,
    pub(crate) office: ::std::option::Option<::std::string::String>,
}
impl UpdateUserInputBuilder {
    /// <p>The identifier for the organization under which the user exists.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn role(mut self, input: crate::types::UserRole) -> Self {
        self.role = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::UserRole>) -> Self {
        self.role = input;
        self
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::UserRole> {
        &self.role
    }
    /// <p>Updates the display name of the user.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.display_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the display name of the user.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>Updates the display name of the user.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.display_name
    }
    /// <p>Updates the user's first name.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.first_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's first name.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>Updates the user's first name.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.first_name
    }
    /// <p>Updates the user's last name.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's last name.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>Updates the user's last name.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_name
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn hidden_from_global_address_list(mut self, input: bool) -> Self {
        self.hidden_from_global_address_list = ::std::option::Option::Some(input);
        self
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn set_hidden_from_global_address_list(mut self, input: ::std::option::Option<bool>) -> Self {
        self.hidden_from_global_address_list = input;
        self
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn get_hidden_from_global_address_list(&self) -> &::std::option::Option<bool> {
        &self.hidden_from_global_address_list
    }
    /// <p>Updates the user's initials.</p>
    pub fn initials(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initials = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's initials.</p>
    pub fn set_initials(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initials = input;
        self
    }
    /// <p>Updates the user's initials.</p>
    pub fn get_initials(&self) -> &::std::option::Option<::std::string::String> {
        &self.initials
    }
    /// <p>Updates the user's contact details.</p>
    pub fn telephone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.telephone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's contact details.</p>
    pub fn set_telephone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.telephone = input;
        self
    }
    /// <p>Updates the user's contact details.</p>
    pub fn get_telephone(&self) -> &::std::option::Option<::std::string::String> {
        &self.telephone
    }
    /// <p>Updates the user's street address.</p>
    pub fn street(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.street = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's street address.</p>
    pub fn set_street(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.street = input;
        self
    }
    /// <p>Updates the user's street address.</p>
    pub fn get_street(&self) -> &::std::option::Option<::std::string::String> {
        &self.street
    }
    /// <p>Updates the user's job title.</p>
    pub fn job_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's job title.</p>
    pub fn set_job_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_title = input;
        self
    }
    /// <p>Updates the user's job title.</p>
    pub fn get_job_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_title
    }
    /// <p>Updates the user's city.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.city = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's city.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.city = input;
        self
    }
    /// <p>Updates the user's city.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        &self.city
    }
    /// <p>Updates the user's company.</p>
    pub fn company(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.company = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's company.</p>
    pub fn set_company(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.company = input;
        self
    }
    /// <p>Updates the user's company.</p>
    pub fn get_company(&self) -> &::std::option::Option<::std::string::String> {
        &self.company
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn zip_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.zip_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn set_zip_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.zip_code = input;
        self
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn get_zip_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.zip_code
    }
    /// <p>Updates the user's department.</p>
    pub fn department(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.department = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's department.</p>
    pub fn set_department(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.department = input;
        self
    }
    /// <p>Updates the user's department.</p>
    pub fn get_department(&self) -> &::std::option::Option<::std::string::String> {
        &self.department
    }
    /// <p>Updates the user's country.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.country = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.country = input;
        self
    }
    /// <p>Updates the user's country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        &self.country
    }
    /// <p>Updates the user's office.</p>
    pub fn office(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.office = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the user's office.</p>
    pub fn set_office(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.office = input;
        self
    }
    /// <p>Updates the user's office.</p>
    pub fn get_office(&self) -> &::std::option::Option<::std::string::String> {
        &self.office
    }
    /// Consumes the builder and constructs a [`UpdateUserInput`](crate::operation::update_user::UpdateUserInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_user::UpdateUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_user::UpdateUserInput {
            organization_id: self.organization_id,
            user_id: self.user_id,
            role: self.role,
            display_name: self.display_name,
            first_name: self.first_name,
            last_name: self.last_name,
            hidden_from_global_address_list: self.hidden_from_global_address_list,
            initials: self.initials,
            telephone: self.telephone,
            street: self.street,
            job_title: self.job_title,
            city: self.city,
            company: self.company,
            zip_code: self.zip_code,
            department: self.department,
            country: self.country,
            office: self.office,
        })
    }
}
impl ::std::fmt::Debug for UpdateUserInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserInputBuilder");
        formatter.field("organization_id", &self.organization_id);
        formatter.field("user_id", &self.user_id);
        formatter.field("role", &self.role);
        formatter.field("display_name", &"*** Sensitive Data Redacted ***");
        formatter.field("first_name", &"*** Sensitive Data Redacted ***");
        formatter.field("last_name", &"*** Sensitive Data Redacted ***");
        formatter.field("hidden_from_global_address_list", &self.hidden_from_global_address_list);
        formatter.field("initials", &"*** Sensitive Data Redacted ***");
        formatter.field("telephone", &"*** Sensitive Data Redacted ***");
        formatter.field("street", &"*** Sensitive Data Redacted ***");
        formatter.field("job_title", &"*** Sensitive Data Redacted ***");
        formatter.field("city", &"*** Sensitive Data Redacted ***");
        formatter.field("company", &"*** Sensitive Data Redacted ***");
        formatter.field("zip_code", &"*** Sensitive Data Redacted ***");
        formatter.field("department", &"*** Sensitive Data Redacted ***");
        formatter.field("country", &"*** Sensitive Data Redacted ***");
        formatter.field("office", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
