// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_user::_update_user_output::UpdateUserOutputBuilder;

pub use crate::operation::update_user::_update_user_input::UpdateUserInputBuilder;

impl UpdateUserInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_user::UpdateUserOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_user::UpdateUserError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_user();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateUser`.
///
/// <p>Updates data for the user. To have the latest information, it must be preceded by a <code>DescribeUser</code> call. The dataset in the request should be the one expected when performing another <code>DescribeUser</code> call.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateUserFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_user::builders::UpdateUserInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_user::UpdateUserOutput,
        crate::operation::update_user::UpdateUserError,
    > for UpdateUserFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_user::UpdateUserOutput,
            crate::operation::update_user::UpdateUserError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateUserFluentBuilder {
    /// Creates a new `UpdateUser`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateUser as a reference.
    pub fn as_input(&self) -> &crate::operation::update_user::builders::UpdateUserInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_user::UpdateUserOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_user::UpdateUserError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_user::UpdateUser::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_user::UpdateUser::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_user::UpdateUserOutput,
        crate::operation::update_user::UpdateUserError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.organization_id(input.into());
        self
    }
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_organization_id(input);
        self
    }
    /// <p>The identifier for the organization under which the user exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_organization_id()
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_id(input.into());
        self
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_id(input);
        self
    }
    /// <p>The identifier for the user to be updated.</p>
    /// <p>The identifier can be the <i>UserId</i>, <i>Username</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>User ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: user@domain.tld</p> </li>
    /// <li> <p>User name: user</p> </li>
    /// </ul>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_id()
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn role(mut self, input: crate::types::UserRole) -> Self {
        self.inner = self.inner.role(input);
        self
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn set_role(mut self, input: ::std::option::Option<crate::types::UserRole>) -> Self {
        self.inner = self.inner.set_role(input);
        self
    }
    /// <p>Updates the user role.</p>
    /// <p>You cannot pass <i>SYSTEM_USER</i> or <i>RESOURCE</i>.</p>
    pub fn get_role(&self) -> &::std::option::Option<crate::types::UserRole> {
        self.inner.get_role()
    }
    /// <p>Updates the display name of the user.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>Updates the display name of the user.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>Updates the display name of the user.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>Updates the user's first name.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.first_name(input.into());
        self
    }
    /// <p>Updates the user's first name.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_first_name(input);
        self
    }
    /// <p>Updates the user's first name.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_first_name()
    }
    /// <p>Updates the user's last name.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.last_name(input.into());
        self
    }
    /// <p>Updates the user's last name.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_last_name(input);
        self
    }
    /// <p>Updates the user's last name.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_last_name()
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn hidden_from_global_address_list(mut self, input: bool) -> Self {
        self.inner = self.inner.hidden_from_global_address_list(input);
        self
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn set_hidden_from_global_address_list(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_hidden_from_global_address_list(input);
        self
    }
    /// <p>If enabled, the user is hidden from the global address list.</p>
    pub fn get_hidden_from_global_address_list(&self) -> &::std::option::Option<bool> {
        self.inner.get_hidden_from_global_address_list()
    }
    /// <p>Updates the user's initials.</p>
    pub fn initials(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.initials(input.into());
        self
    }
    /// <p>Updates the user's initials.</p>
    pub fn set_initials(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_initials(input);
        self
    }
    /// <p>Updates the user's initials.</p>
    pub fn get_initials(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_initials()
    }
    /// <p>Updates the user's contact details.</p>
    pub fn telephone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.telephone(input.into());
        self
    }
    /// <p>Updates the user's contact details.</p>
    pub fn set_telephone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_telephone(input);
        self
    }
    /// <p>Updates the user's contact details.</p>
    pub fn get_telephone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_telephone()
    }
    /// <p>Updates the user's street address.</p>
    pub fn street(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.street(input.into());
        self
    }
    /// <p>Updates the user's street address.</p>
    pub fn set_street(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_street(input);
        self
    }
    /// <p>Updates the user's street address.</p>
    pub fn get_street(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_street()
    }
    /// <p>Updates the user's job title.</p>
    pub fn job_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_title(input.into());
        self
    }
    /// <p>Updates the user's job title.</p>
    pub fn set_job_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_title(input);
        self
    }
    /// <p>Updates the user's job title.</p>
    pub fn get_job_title(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_title()
    }
    /// <p>Updates the user's city.</p>
    pub fn city(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.city(input.into());
        self
    }
    /// <p>Updates the user's city.</p>
    pub fn set_city(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_city(input);
        self
    }
    /// <p>Updates the user's city.</p>
    pub fn get_city(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_city()
    }
    /// <p>Updates the user's company.</p>
    pub fn company(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.company(input.into());
        self
    }
    /// <p>Updates the user's company.</p>
    pub fn set_company(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_company(input);
        self
    }
    /// <p>Updates the user's company.</p>
    pub fn get_company(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_company()
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn zip_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.zip_code(input.into());
        self
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn set_zip_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_zip_code(input);
        self
    }
    /// <p>Updates the user's zipcode.</p>
    pub fn get_zip_code(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_zip_code()
    }
    /// <p>Updates the user's department.</p>
    pub fn department(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.department(input.into());
        self
    }
    /// <p>Updates the user's department.</p>
    pub fn set_department(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_department(input);
        self
    }
    /// <p>Updates the user's department.</p>
    pub fn get_department(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_department()
    }
    /// <p>Updates the user's country.</p>
    pub fn country(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.country(input.into());
        self
    }
    /// <p>Updates the user's country.</p>
    pub fn set_country(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_country(input);
        self
    }
    /// <p>Updates the user's country.</p>
    pub fn get_country(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_country()
    }
    /// <p>Updates the user's office.</p>
    pub fn office(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.office(input.into());
        self
    }
    /// <p>Updates the user's office.</p>
    pub fn set_office(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_office(input);
        self
    }
    /// <p>Updates the user's office.</p>
    pub fn get_office(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_office()
    }
}
