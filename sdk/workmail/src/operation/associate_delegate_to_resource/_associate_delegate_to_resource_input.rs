// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateDelegateToResourceInput {
    /// <p>The organization under which the resource exists.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The resource for which members (users or groups) are associated.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The member (user or group) to associate to the resource.</p>
    /// <p>The entity ID can accept <i>UserId or GroupID</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity: entity</p> </li>
    /// </ul>
    pub entity_id: ::std::option::Option<::std::string::String>,
}
impl AssociateDelegateToResourceInput {
    /// <p>The organization under which the resource exists.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The resource for which members (users or groups) are associated.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The member (user or group) to associate to the resource.</p>
    /// <p>The entity ID can accept <i>UserId or GroupID</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity: entity</p> </li>
    /// </ul>
    pub fn entity_id(&self) -> ::std::option::Option<&str> {
        self.entity_id.as_deref()
    }
}
impl AssociateDelegateToResourceInput {
    /// Creates a new builder-style object to manufacture [`AssociateDelegateToResourceInput`](crate::operation::associate_delegate_to_resource::AssociateDelegateToResourceInput).
    pub fn builder() -> crate::operation::associate_delegate_to_resource::builders::AssociateDelegateToResourceInputBuilder {
        crate::operation::associate_delegate_to_resource::builders::AssociateDelegateToResourceInputBuilder::default()
    }
}

/// A builder for [`AssociateDelegateToResourceInput`](crate::operation::associate_delegate_to_resource::AssociateDelegateToResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateDelegateToResourceInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
}
impl AssociateDelegateToResourceInputBuilder {
    /// <p>The organization under which the resource exists.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization under which the resource exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The organization under which the resource exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The resource for which members (users or groups) are associated.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource for which members (users or groups) are associated.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The resource for which members (users or groups) are associated.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The member (user or group) to associate to the resource.</p>
    /// <p>The entity ID can accept <i>UserId or GroupID</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity: entity</p> </li>
    /// </ul>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member (user or group) to associate to the resource.</p>
    /// <p>The entity ID can accept <i>UserId or GroupID</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity: entity</p> </li>
    /// </ul>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>The member (user or group) to associate to the resource.</p>
    /// <p>The entity ID can accept <i>UserId or GroupID</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Entity: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: entity@domain.tld</p> </li>
    /// <li> <p>Entity: entity</p> </li>
    /// </ul>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// Consumes the builder and constructs a [`AssociateDelegateToResourceInput`](crate::operation::associate_delegate_to_resource::AssociateDelegateToResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_delegate_to_resource::AssociateDelegateToResourceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_delegate_to_resource::AssociateDelegateToResourceInput {
            organization_id: self.organization_id,
            resource_id: self.resource_id,
            entity_id: self.entity_id,
        })
    }
}
