// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListImpersonationRolesInput {
    /// <p>The WorkMail organization to which the listed impersonation roles belong.</p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    /// <p>The token used to retrieve the next page of results. The first call doesn't require a token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results returned in a single call.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListImpersonationRolesInput {
    /// <p>The WorkMail organization to which the listed impersonation roles belong.</p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The token used to retrieve the next page of results. The first call doesn't require a token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results returned in a single call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListImpersonationRolesInput {
    /// Creates a new builder-style object to manufacture [`ListImpersonationRolesInput`](crate::operation::list_impersonation_roles::ListImpersonationRolesInput).
    pub fn builder(
    ) -> crate::operation::list_impersonation_roles::builders::ListImpersonationRolesInputBuilder
    {
        crate::operation::list_impersonation_roles::builders::ListImpersonationRolesInputBuilder::default()
    }
}

/// A builder for [`ListImpersonationRolesInput`](crate::operation::list_impersonation_roles::ListImpersonationRolesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListImpersonationRolesInputBuilder {
    pub(crate) organization_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListImpersonationRolesInputBuilder {
    /// <p>The WorkMail organization to which the listed impersonation roles belong.</p>
    pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_id = Some(input.into());
        self
    }
    /// <p>The WorkMail organization to which the listed impersonation roles belong.</p>
    pub fn set_organization_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The token used to retrieve the next page of results. The first call doesn't require a token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token used to retrieve the next page of results. The first call doesn't require a token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results returned in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results returned in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListImpersonationRolesInput`](crate::operation::list_impersonation_roles::ListImpersonationRolesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_impersonation_roles::ListImpersonationRolesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_impersonation_roles::ListImpersonationRolesInput {
                organization_id: self.organization_id,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
