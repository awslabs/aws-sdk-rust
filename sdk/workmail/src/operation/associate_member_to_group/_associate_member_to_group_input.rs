// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssociateMemberToGroupInput {
    /// <p>The organization under which the group exists.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The group to which the member (user or group) is associated.</p>
    /// <p>The identifier can accept <i>GroupId</i>, <i>Groupname</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Group ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: group@domain.tld</p> </li>
    /// <li> <p>Group name: group</p> </li>
    /// </ul>
    pub group_id: ::std::option::Option<::std::string::String>,
    /// <p>The member (user or group) to associate to the group.</p>
    /// <p>The member ID can accept <i>UserID or GroupId</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Member: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: member@domain.tld</p> </li>
    /// <li> <p>Member name: member</p> </li>
    /// </ul>
    pub member_id: ::std::option::Option<::std::string::String>,
}
impl AssociateMemberToGroupInput {
    /// <p>The organization under which the group exists.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The group to which the member (user or group) is associated.</p>
    /// <p>The identifier can accept <i>GroupId</i>, <i>Groupname</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Group ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: group@domain.tld</p> </li>
    /// <li> <p>Group name: group</p> </li>
    /// </ul>
    pub fn group_id(&self) -> ::std::option::Option<&str> {
        self.group_id.as_deref()
    }
    /// <p>The member (user or group) to associate to the group.</p>
    /// <p>The member ID can accept <i>UserID or GroupId</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Member: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: member@domain.tld</p> </li>
    /// <li> <p>Member name: member</p> </li>
    /// </ul>
    pub fn member_id(&self) -> ::std::option::Option<&str> {
        self.member_id.as_deref()
    }
}
impl AssociateMemberToGroupInput {
    /// Creates a new builder-style object to manufacture [`AssociateMemberToGroupInput`](crate::operation::associate_member_to_group::AssociateMemberToGroupInput).
    pub fn builder() -> crate::operation::associate_member_to_group::builders::AssociateMemberToGroupInputBuilder {
        crate::operation::associate_member_to_group::builders::AssociateMemberToGroupInputBuilder::default()
    }
}

/// A builder for [`AssociateMemberToGroupInput`](crate::operation::associate_member_to_group::AssociateMemberToGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssociateMemberToGroupInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) group_id: ::std::option::Option<::std::string::String>,
    pub(crate) member_id: ::std::option::Option<::std::string::String>,
}
impl AssociateMemberToGroupInputBuilder {
    /// <p>The organization under which the group exists.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The organization under which the group exists.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The organization under which the group exists.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The group to which the member (user or group) is associated.</p>
    /// <p>The identifier can accept <i>GroupId</i>, <i>Groupname</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Group ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: group@domain.tld</p> </li>
    /// <li> <p>Group name: group</p> </li>
    /// </ul>
    /// This field is required.
    pub fn group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The group to which the member (user or group) is associated.</p>
    /// <p>The identifier can accept <i>GroupId</i>, <i>Groupname</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Group ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: group@domain.tld</p> </li>
    /// <li> <p>Group name: group</p> </li>
    /// </ul>
    pub fn set_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group_id = input;
        self
    }
    /// <p>The group to which the member (user or group) is associated.</p>
    /// <p>The identifier can accept <i>GroupId</i>, <i>Groupname</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Group ID: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: group@domain.tld</p> </li>
    /// <li> <p>Group name: group</p> </li>
    /// </ul>
    pub fn get_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.group_id
    }
    /// <p>The member (user or group) to associate to the group.</p>
    /// <p>The member ID can accept <i>UserID or GroupId</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Member: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: member@domain.tld</p> </li>
    /// <li> <p>Member name: member</p> </li>
    /// </ul>
    /// This field is required.
    pub fn member_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member (user or group) to associate to the group.</p>
    /// <p>The member ID can accept <i>UserID or GroupId</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Member: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: member@domain.tld</p> </li>
    /// <li> <p>Member name: member</p> </li>
    /// </ul>
    pub fn set_member_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_id = input;
        self
    }
    /// <p>The member (user or group) to associate to the group.</p>
    /// <p>The member ID can accept <i>UserID or GroupId</i>, <i>Username or Groupname</i>, or <i>email</i>.</p>
    /// <ul>
    /// <li> <p>Member: 12345678-1234-1234-1234-123456789012 or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>
    /// <li> <p>Email address: member@domain.tld</p> </li>
    /// <li> <p>Member name: member</p> </li>
    /// </ul>
    pub fn get_member_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_id
    }
    /// Consumes the builder and constructs a [`AssociateMemberToGroupInput`](crate::operation::associate_member_to_group::AssociateMemberToGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_member_to_group::AssociateMemberToGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::associate_member_to_group::AssociateMemberToGroupInput {
            organization_id: self.organization_id,
            group_id: self.group_id,
            member_id: self.member_id,
        })
    }
}
