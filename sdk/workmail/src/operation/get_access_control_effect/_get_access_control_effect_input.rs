// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetAccessControlEffectInput {
    /// <p>The identifier for the organization.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 address.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub action: ::std::option::Option<::std::string::String>,
    /// <p>The user ID.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
    /// <p>The impersonation role ID.</p>
    pub impersonation_role_id: ::std::option::Option<::std::string::String>,
}
impl GetAccessControlEffectInput {
    /// <p>The identifier for the organization.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The IPv4 address.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn action(&self) -> ::std::option::Option<&str> {
        self.action.as_deref()
    }
    /// <p>The user ID.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The impersonation role ID.</p>
    pub fn impersonation_role_id(&self) -> ::std::option::Option<&str> {
        self.impersonation_role_id.as_deref()
    }
}
impl GetAccessControlEffectInput {
    /// Creates a new builder-style object to manufacture [`GetAccessControlEffectInput`](crate::operation::get_access_control_effect::GetAccessControlEffectInput).
    pub fn builder() -> crate::operation::get_access_control_effect::builders::GetAccessControlEffectInputBuilder {
        crate::operation::get_access_control_effect::builders::GetAccessControlEffectInputBuilder::default()
    }
}

/// A builder for [`GetAccessControlEffectInput`](crate::operation::get_access_control_effect::GetAccessControlEffectInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetAccessControlEffectInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
    pub(crate) impersonation_role_id: ::std::option::Option<::std::string::String>,
}
impl GetAccessControlEffectInputBuilder {
    /// <p>The identifier for the organization.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the organization.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The identifier for the organization.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The IPv4 address.</p>
    /// This field is required.
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IPv4 address.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The IPv4 address.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    /// This field is required.
    pub fn action(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action = input;
        self
    }
    /// <p>The access protocol action. Valid values include <code>ActiveSync</code>, <code>AutoDiscover</code>, <code>EWS</code>, <code>IMAP</code>, <code>SMTP</code>, <code>WindowsOutlook</code>, and <code>WebMail</code>.</p>
    pub fn get_action(&self) -> &::std::option::Option<::std::string::String> {
        &self.action
    }
    /// <p>The user ID.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user ID.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The user ID.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// <p>The impersonation role ID.</p>
    pub fn impersonation_role_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.impersonation_role_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The impersonation role ID.</p>
    pub fn set_impersonation_role_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.impersonation_role_id = input;
        self
    }
    /// <p>The impersonation role ID.</p>
    pub fn get_impersonation_role_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.impersonation_role_id
    }
    /// Consumes the builder and constructs a [`GetAccessControlEffectInput`](crate::operation::get_access_control_effect::GetAccessControlEffectInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_access_control_effect::GetAccessControlEffectInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_access_control_effect::GetAccessControlEffectInput {
            organization_id: self.organization_id,
            ip_address: self.ip_address,
            action: self.action,
            user_id: self.user_id,
            impersonation_role_id: self.impersonation_role_id,
        })
    }
}
