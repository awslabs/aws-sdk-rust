// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListResourceDelegatesInput {
    /// <p>The identifier for the organization that contains the resource for which delegates are listed.</p>
    pub organization_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the resource whose delegates are listed.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The token used to paginate through the delegates associated with a resource.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The number of maximum results in a page.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListResourceDelegatesInput {
    /// <p>The identifier for the organization that contains the resource for which delegates are listed.</p>
    pub fn organization_id(&self) -> ::std::option::Option<&str> {
        self.organization_id.as_deref()
    }
    /// <p>The identifier for the resource whose delegates are listed.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>The token used to paginate through the delegates associated with a resource.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The number of maximum results in a page.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListResourceDelegatesInput {
    /// Creates a new builder-style object to manufacture [`ListResourceDelegatesInput`](crate::operation::list_resource_delegates::ListResourceDelegatesInput).
    pub fn builder() -> crate::operation::list_resource_delegates::builders::ListResourceDelegatesInputBuilder {
        crate::operation::list_resource_delegates::builders::ListResourceDelegatesInputBuilder::default()
    }
}

/// A builder for [`ListResourceDelegatesInput`](crate::operation::list_resource_delegates::ListResourceDelegatesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListResourceDelegatesInputBuilder {
    pub(crate) organization_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListResourceDelegatesInputBuilder {
    /// <p>The identifier for the organization that contains the resource for which delegates are listed.</p>
    /// This field is required.
    pub fn organization_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the organization that contains the resource for which delegates are listed.</p>
    pub fn set_organization_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_id = input;
        self
    }
    /// <p>The identifier for the organization that contains the resource for which delegates are listed.</p>
    pub fn get_organization_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_id
    }
    /// <p>The identifier for the resource whose delegates are listed.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the resource whose delegates are listed.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The identifier for the resource whose delegates are listed.</p>
    /// <p>The identifier can accept <i>ResourceId</i>, <i>Resourcename</i>, or <i>email</i>. The following identity formats are available:</p>
    /// <ul>
    /// <li> <p>Resource ID: r-0123456789a0123456789b0123456789</p> </li>
    /// <li> <p>Email address: resource@domain.tld</p> </li>
    /// <li> <p>Resource name: resource</p> </li>
    /// </ul>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>The token used to paginate through the delegates associated with a resource.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token used to paginate through the delegates associated with a resource.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token used to paginate through the delegates associated with a resource.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The number of maximum results in a page.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of maximum results in a page.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The number of maximum results in a page.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListResourceDelegatesInput`](crate::operation::list_resource_delegates::ListResourceDelegatesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_resource_delegates::ListResourceDelegatesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_resource_delegates::ListResourceDelegatesInput {
            organization_id: self.organization_id,
            resource_id: self.resource_id,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
