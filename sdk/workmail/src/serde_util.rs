// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn delegate_correct_errors(mut builder: crate::types::builders::DelegateBuilder) -> crate::types::builders::DelegateBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::MemberType>().ok()
    }
    builder
}

pub(crate) fn folder_configuration_correct_errors(
    mut builder: crate::types::builders::FolderConfigurationBuilder,
) -> crate::types::builders::FolderConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::FolderName>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::RetentionAction>().ok()
    }
    builder
}

pub(crate) fn impersonation_rule_correct_errors(
    mut builder: crate::types::builders::ImpersonationRuleBuilder,
) -> crate::types::builders::ImpersonationRuleBuilder {
    if builder.impersonation_rule_id.is_none() {
        builder.impersonation_rule_id = Some(Default::default())
    }
    if builder.effect.is_none() {
        builder.effect = "no value was set".parse::<crate::types::AccessEffect>().ok()
    }
    builder
}

pub(crate) fn permission_correct_errors(mut builder: crate::types::builders::PermissionBuilder) -> crate::types::builders::PermissionBuilder {
    if builder.grantee_id.is_none() {
        builder.grantee_id = Some(Default::default())
    }
    if builder.grantee_type.is_none() {
        builder.grantee_type = "no value was set".parse::<crate::types::MemberType>().ok()
    }
    if builder.permission_values.is_none() {
        builder.permission_values = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_availability_provider_correct_errors(
    mut builder: crate::types::builders::LambdaAvailabilityProviderBuilder,
) -> crate::types::builders::LambdaAvailabilityProviderBuilder {
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}
