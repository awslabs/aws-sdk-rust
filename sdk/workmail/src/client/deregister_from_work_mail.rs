// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterFromWorkMail`](crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`organization_id(impl Into<String>)`](crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder::organization_id) / [`set_organization_id(Option<String>)`](crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder::set_organization_id):<br>required: **true**<br><p>The identifier for the organization under which the WorkMail entity exists.</p><br>
    ///   - [`entity_id(impl Into<String>)`](crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder::entity_id) / [`set_entity_id(Option<String>)`](crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder::set_entity_id):<br>required: **true**<br><p>The identifier for the member to be updated.</p>  <p>The identifier can be <i>UserId, ResourceId, or Group Id</i>, <i>Username, Resourcename, or Groupname</i>, or <i>email</i>.</p>  <ul>   <li> <p>Entity ID: 12345678-1234-1234-1234-123456789012, r-0123456789a0123456789b0123456789, or S-1-1-12-1234567890-123456789-123456789-1234</p> </li>   <li> <p>Email address: entity@domain.tld</p> </li>   <li> <p>Entity name: entity</p> </li>  </ul><br>
    /// - On success, responds with [`DeregisterFromWorkMailOutput`](crate::operation::deregister_from_work_mail::DeregisterFromWorkMailOutput)
    /// - On failure, responds with [`SdkError<DeregisterFromWorkMailError>`](crate::operation::deregister_from_work_mail::DeregisterFromWorkMailError)
    pub fn deregister_from_work_mail(&self) -> crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder {
        crate::operation::deregister_from_work_mail::builders::DeregisterFromWorkMailFluentBuilder::new(self.handle.clone())
    }
}
