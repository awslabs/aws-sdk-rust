// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssumeImpersonationRole`](crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`organization_id(impl Into<String>)`](crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder::organization_id) / [`set_organization_id(Option<String>)`](crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder::set_organization_id): <p>The WorkMail organization under which the impersonation role will be assumed.</p>
    ///   - [`impersonation_role_id(impl Into<String>)`](crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder::impersonation_role_id) / [`set_impersonation_role_id(Option<String>)`](crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder::set_impersonation_role_id): <p>The impersonation role ID to assume.</p>
    /// - On success, responds with [`AssumeImpersonationRoleOutput`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput) with field(s):
    ///   - [`token(Option<String>)`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput::token): <p>The authentication token for the impersonation role.</p>
    ///   - [`expires_in(Option<i64>)`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleOutput::expires_in): <p>The authentication token's validity, in seconds.</p>
    /// - On failure, responds with [`SdkError<AssumeImpersonationRoleError>`](crate::operation::assume_impersonation_role::AssumeImpersonationRoleError)
    pub fn assume_impersonation_role(
        &self,
    ) -> crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder
    {
        crate::operation::assume_impersonation_role::builders::AssumeImpersonationRoleFluentBuilder::new(self.handle.clone())
    }
}
