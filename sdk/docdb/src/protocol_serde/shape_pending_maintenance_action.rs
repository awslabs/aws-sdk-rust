// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::needless_question_mark)]
pub fn de_pending_maintenance_action(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::PendingMaintenanceAction, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PendingMaintenanceAction::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Action") /* Action com.amazonaws.docdb#PendingMaintenanceAction$Action */ =>  {
                let var_1 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_action(var_1);
            }
            ,
            s if s.matches("AutoAppliedAfterDate") /* AutoAppliedAfterDate com.amazonaws.docdb#PendingMaintenanceAction$AutoAppliedAfterDate */ =>  {
                let var_2 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.docdb#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_auto_applied_after_date(var_2);
            }
            ,
            s if s.matches("ForcedApplyDate") /* ForcedApplyDate com.amazonaws.docdb#PendingMaintenanceAction$ForcedApplyDate */ =>  {
                let var_3 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.docdb#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_forced_apply_date(var_3);
            }
            ,
            s if s.matches("OptInStatus") /* OptInStatus com.amazonaws.docdb#PendingMaintenanceAction$OptInStatus */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_opt_in_status(var_4);
            }
            ,
            s if s.matches("CurrentApplyDate") /* CurrentApplyDate com.amazonaws.docdb#PendingMaintenanceAction$CurrentApplyDate */ =>  {
                let var_5 =
                    Some(
                        ::aws_smithy_types::DateTime::from_str(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , ::aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|::aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.docdb#TStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_current_apply_date(var_5);
            }
            ,
            s if s.matches("Description") /* Description com.amazonaws.docdb#PendingMaintenanceAction$Description */ =>  {
                let var_6 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_description(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
