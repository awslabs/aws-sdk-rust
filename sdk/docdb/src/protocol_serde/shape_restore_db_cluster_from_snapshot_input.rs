// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_from_snapshot_input_input(
    input: &crate::operation::restore_db_cluster_from_snapshot::RestoreDbClusterFromSnapshotInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("AvailabilityZones");
    if let Some(var_2) = &input.availability_zones {
        let mut list_4 = scope_1.start_list(false, Some("AvailabilityZone"));
        for item_3 in var_2 {
            #[allow(unused_mut)]
            let mut entry_5 = list_4.entry();
            entry_5.string(item_3);
        }
        list_4.finish();
    }
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("DBClusterIdentifier");
    if let Some(var_7) = &input.db_cluster_identifier {
        scope_6.string(var_7);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("SnapshotIdentifier");
    if let Some(var_9) = &input.snapshot_identifier {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("Engine");
    if let Some(var_11) = &input.engine {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EngineVersion");
    if let Some(var_13) = &input.engine_version {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Port");
    if let Some(var_15) = &input.port {
        scope_14.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_15).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("DBSubnetGroupName");
    if let Some(var_17) = &input.db_subnet_group_name {
        scope_16.string(var_17);
    }
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_19) = &input.vpc_security_group_ids {
        let mut list_21 = scope_18.start_list(false, Some("VpcSecurityGroupId"));
        for item_20 in var_19 {
            #[allow(unused_mut)]
            let mut entry_22 = list_21.entry();
            entry_22.string(item_20);
        }
        list_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Tags");
    if let Some(var_24) = &input.tags {
        let mut list_26 = scope_23.start_list(false, Some("Tag"));
        for item_25 in var_24 {
            #[allow(unused_mut)]
            let mut entry_27 = list_26.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_27, item_25)?;
        }
        list_26.finish();
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("KmsKeyId");
    if let Some(var_29) = &input.kms_key_id {
        scope_28.string(var_29);
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_31) = &input.enable_cloudwatch_logs_exports {
        let mut list_33 = scope_30.start_list(false, None);
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            entry_34.string(item_32);
        }
        list_33.finish();
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("DeletionProtection");
    if let Some(var_36) = &input.deletion_protection {
        scope_35.boolean(*var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_38) = &input.db_cluster_parameter_group_name {
        scope_37.string(var_38);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
