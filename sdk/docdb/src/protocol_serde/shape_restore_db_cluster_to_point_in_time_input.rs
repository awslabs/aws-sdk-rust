// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_restore_db_cluster_to_point_in_time_input_input(
    input: &crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RestoreType");
    if let Some(var_4) = &input.restore_type {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_6) = &input.source_db_cluster_identifier {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("RestoreToTime");
    if let Some(var_8) = &input.restore_to_time {
        scope_7.date_time(var_8, ::aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("UseLatestRestorableTime");
    if let Some(var_10) = &input.use_latest_restorable_time {
        scope_9.boolean(*var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Port");
    if let Some(var_12) = &input.port {
        scope_11.number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DBSubnetGroupName");
    if let Some(var_14) = &input.db_subnet_group_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_16) = &input.vpc_security_group_ids {
        let mut list_18 = scope_15.start_list(false, Some("VpcSecurityGroupId"));
        for item_17 in var_16 {
            #[allow(unused_mut)]
            let mut entry_19 = list_18.entry();
            entry_19.string(item_17);
        }
        list_18.finish();
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Tags");
    if let Some(var_21) = &input.tags {
        let mut list_23 = scope_20.start_list(false, Some("Tag"));
        for item_22 in var_21 {
            #[allow(unused_mut)]
            let mut entry_24 = list_23.entry();
            crate::protocol_serde::shape_tag::ser_tag(entry_24, item_22)?;
        }
        list_23.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("KmsKeyId");
    if let Some(var_26) = &input.kms_key_id {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_28) = &input.enable_cloudwatch_logs_exports {
        let mut list_30 = scope_27.start_list(false, None);
        for item_29 in var_28 {
            #[allow(unused_mut)]
            let mut entry_31 = list_30.entry();
            entry_31.string(item_29);
        }
        list_30.finish();
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("DeletionProtection");
    if let Some(var_33) = &input.deletion_protection {
        scope_32.boolean(*var_33);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
