// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified CIDR IP or Amazon EC2 security group isn't authorized for the specified security group.</p>
    /// <p>Amazon DocumentDB also might not be authorized to perform necessary actions on your behalf using IAM.</p>
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    /// <p> <code>CertificateIdentifier</code> doesn't refer to an existing certificate. </p>
    CertificateNotFoundFault(crate::error::CertificateNotFoundFault),
    /// <p>You already have a cluster with the given identifier.</p>
    DbClusterAlreadyExistsFault(crate::error::DbClusterAlreadyExistsFault),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing cluster. </p>
    DbClusterNotFoundFault(crate::error::DbClusterNotFoundFault),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing cluster parameter group. </p>
    DbClusterParameterGroupNotFoundFault(crate::error::DbClusterParameterGroupNotFoundFault),
    /// <p>The cluster can't be created because you have reached the maximum allowed quota of clusters.</p>
    DbClusterQuotaExceededFault(crate::error::DbClusterQuotaExceededFault),
    /// <p>You already have a cluster snapshot with the given identifier.</p>
    DbClusterSnapshotAlreadyExistsFault(crate::error::DbClusterSnapshotAlreadyExistsFault),
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing cluster snapshot. </p>
    DbClusterSnapshotNotFoundFault(crate::error::DbClusterSnapshotNotFoundFault),
    /// <p>You already have a instance with the given identifier.</p>
    DbInstanceAlreadyExistsFault(crate::error::DbInstanceAlreadyExistsFault),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing instance. </p>
    DbInstanceNotFoundFault(crate::error::DbInstanceNotFoundFault),
    /// <p>A parameter group with the same name already exists.</p>
    DbParameterGroupAlreadyExistsFault(crate::error::DbParameterGroupAlreadyExistsFault),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing parameter group. </p>
    DbParameterGroupNotFoundFault(crate::error::DbParameterGroupNotFoundFault),
    /// <p>This request would cause you to exceed the allowed number of parameter groups.</p>
    DbParameterGroupQuotaExceededFault(crate::error::DbParameterGroupQuotaExceededFault),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing security group. </p>
    DbSecurityGroupNotFoundFault(crate::error::DbSecurityGroupNotFoundFault),
    /// <p> <code>DBSnapshotIdentifier</code> is already being used by an existing snapshot. </p>
    DbSnapshotAlreadyExistsFault(crate::error::DbSnapshotAlreadyExistsFault),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing snapshot. </p>
    DbSnapshotNotFoundFault(crate::error::DbSnapshotNotFoundFault),
    /// <p> <code>DBSubnetGroupName</code> is already being used by an existing subnet group. </p>
    DbSubnetGroupAlreadyExistsFault(crate::error::DbSubnetGroupAlreadyExistsFault),
    /// <p>Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DbSubnetGroupDoesNotCoverEnoughAZs(crate::error::DbSubnetGroupDoesNotCoverEnoughAZs),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing subnet group. </p>
    DbSubnetGroupNotFoundFault(crate::error::DbSubnetGroupNotFoundFault),
    /// <p>The request would cause you to exceed the allowed number of subnet groups.</p>
    DbSubnetGroupQuotaExceededFault(crate::error::DbSubnetGroupQuotaExceededFault),
    /// <p>The request would cause you to exceed the allowed number of subnets in a subnet group.</p>
    DbSubnetQuotaExceededFault(crate::error::DbSubnetQuotaExceededFault),
    /// <p>The upgrade failed because a resource that the depends on can't be modified.</p>
    DbUpgradeDependencyFailureFault(crate::error::DbUpgradeDependencyFailureFault),
    /// <p>You have reached the maximum number of event subscriptions. </p>
    EventSubscriptionQuotaExceededFault(crate::error::EventSubscriptionQuotaExceededFault),
    /// <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global cluster identifier (unique name) to create a new global cluster. </p>
    GlobalClusterAlreadyExistsFault(crate::error::GlobalClusterAlreadyExistsFault),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global cluster.</p>
    GlobalClusterNotFoundFault(crate::error::GlobalClusterNotFoundFault),
    /// <p>The number of global clusters for this account is already at the maximum allowed.</p>
    GlobalClusterQuotaExceededFault(crate::error::GlobalClusterQuotaExceededFault),
    /// <p>The request would cause you to exceed the allowed number of instances.</p>
    InstanceQuotaExceededFault(crate::error::InstanceQuotaExceededFault),
    /// <p>The cluster doesn't have enough capacity for the current operation.</p>
    InsufficientDbClusterCapacityFault(crate::error::InsufficientDbClusterCapacityFault),
    /// <p>The specified instance class isn't available in the specified Availability Zone.</p>
    InsufficientDbInstanceCapacityFault(crate::error::InsufficientDbInstanceCapacityFault),
    /// <p>There is not enough storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available. </p>
    InsufficientStorageClusterCapacityFault(crate::error::InsufficientStorageClusterCapacityFault),
    /// <p>The provided value isn't a valid cluster snapshot state.</p>
    InvalidDbClusterSnapshotStateFault(crate::error::InvalidDbClusterSnapshotStateFault),
    /// <p>The cluster isn't in a valid state.</p>
    InvalidDbClusterStateFault(crate::error::InvalidDbClusterStateFault),
    /// <p> The specified instance isn't in the <i>available</i> state. </p>
    InvalidDbInstanceStateFault(crate::error::InvalidDbInstanceStateFault),
    /// <p>The parameter group is in use, or it is in a state that is not valid. If you are trying to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDbParameterGroupStateFault(crate::error::InvalidDbParameterGroupStateFault),
    /// <p>The state of the security group doesn't allow deletion.</p>
    InvalidDbSecurityGroupStateFault(crate::error::InvalidDbSecurityGroupStateFault),
    /// <p>The state of the snapshot doesn't allow deletion.</p>
    InvalidDbSnapshotStateFault(crate::error::InvalidDbSnapshotStateFault),
    /// <p>The subnet group can't be deleted because it's in use.</p>
    InvalidDbSubnetGroupStateFault(crate::error::InvalidDbSubnetGroupStateFault),
    /// <p> The subnet isn't in the <i>available</i> state. </p>
    InvalidDbSubnetStateFault(crate::error::InvalidDbSubnetStateFault),
    /// <p>Someone else might be modifying a subscription. Wait a few seconds, and try again.</p>
    InvalidEventSubscriptionStateFault(crate::error::InvalidEventSubscriptionStateFault),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidGlobalClusterStateFault(crate::error::InvalidGlobalClusterStateFault),
    /// <p>You cannot restore from a virtual private cloud (VPC) backup to a non-VPC DB instance.</p>
    InvalidRestoreFault(crate::error::InvalidRestoreFault),
    /// <p>The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).</p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p>The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.</p>
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    /// <p>An error occurred when accessing an KMS key.</p>
    KmsKeyNotAccessibleFault(crate::error::KmsKeyNotAccessibleFault),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    /// <p>Amazon SNS has responded that there is a problem with the specified topic. </p>
    SnsInvalidTopicFault(crate::error::SnsInvalidTopicFault),
    /// <p>You do not have permission to publish to the SNS topic Amazon Resource Name (ARN). </p>
    SnsNoAuthorizationFault(crate::error::SnsNoAuthorizationFault),
    /// <p>The SNS topic Amazon Resource Name (ARN) does not exist. </p>
    SnsTopicArnNotFoundFault(crate::error::SnsTopicArnNotFoundFault),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with. </p>
    SharedSnapshotQuotaExceededFault(crate::error::SharedSnapshotQuotaExceededFault),
    /// <p>The request would cause you to exceed the allowed number of snapshots.</p>
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    /// <p>The requested source could not be found. </p>
    SourceNotFoundFault(crate::error::SourceNotFoundFault),
    /// <p>The request would cause you to exceed the allowed amount of storage available across all instances.</p>
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    /// <p>Storage of the specified <code>StorageType</code> can't be associated with the DB instance. </p>
    StorageTypeNotSupportedFault(crate::error::StorageTypeNotSupportedFault),
    /// <p>The subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    /// <p>The provided subscription name already exists. </p>
    SubscriptionAlreadyExistFault(crate::error::SubscriptionAlreadyExistFault),
    /// <p>The provided category does not exist. </p>
    SubscriptionCategoryNotFoundFault(crate::error::SubscriptionCategoryNotFoundFault),
    /// <p>The subscription name does not exist. </p>
    SubscriptionNotFoundFault(crate::error::SubscriptionNotFoundFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::CertificateNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbUpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.fmt(f),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalClusterNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::InstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::InsufficientDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientDbInstanceCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceStateFault(inner) => inner.fmt(f),
            Error::InvalidDbParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetStateFault(inner) => inner.fmt(f),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidRestoreFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::SnsTopicArnNotFoundFault(inner) => inner.fmt(f),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SourceNotFoundFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::StorageTypeNotSupportedFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::SubscriptionAlreadyExistFault(inner) => inner.fmt(f),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.fmt(f),
            Error::SubscriptionNotFoundFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AddSourceIdentifierToSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AddSourceIdentifierToSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddSourceIdentifierToSubscriptionError> for Error {
    fn from(err: crate::error::AddSourceIdentifierToSubscriptionError) -> Self {
        match err {
            crate::error::AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(
                inner,
            ) => Error::SubscriptionNotFoundFault(inner),
            crate::error::AddSourceIdentifierToSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::error::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::error::ApplyPendingMaintenanceActionError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::InvalidDbInstanceStateFault(
                inner,
            ) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CopyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(
                inner,
            ) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CopyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CopyDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterError> for Error {
    fn from(err: crate::error::CreateDBClusterError) -> Self {
        match err {
            crate::error::CreateDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBClusterError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CreateDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CreateDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CreateDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CreateDBClusterSnapshotError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBInstanceError> for Error {
    fn from(err: crate::error::CreateDBInstanceError) -> Self {
        match err {
            crate::error::CreateDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::CreateDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::CreateDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBSubnetGroupError> for Error {
    fn from(err: crate::error::CreateDBSubnetGroupError) -> Self {
        match err {
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupAlreadyExistsFault(inner) => {
                Error::DbSubnetGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupQuotaExceededFault(inner) => {
                Error::DbSubnetGroupQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventSubscriptionError> for Error {
    fn from(err: crate::error::CreateEventSubscriptionError) -> Self {
        match err {
            crate::error::CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionAlreadyExistFault(inner) => {
                Error::SubscriptionAlreadyExistFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGlobalClusterError> for Error {
    fn from(err: crate::error::CreateGlobalClusterError) -> Self {
        match err {
            crate::error::CreateGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(inner) => {
                Error::GlobalClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterQuotaExceededFault(inner) => {
                Error::GlobalClusterQuotaExceededFault(inner)
            }
            crate::error::CreateGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterError> for Error {
    fn from(err: crate::error::DeleteDBClusterError) -> Self {
        match err {
            crate::error::DeleteDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBClusterError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::DeleteDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::DeleteDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterSnapshotError> for Error {
    fn from(err: crate::error::DeleteDBClusterSnapshotError) -> Self {
        match err {
            crate::error::DeleteDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::DeleteDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBInstanceError> for Error {
    fn from(err: crate::error::DeleteDBInstanceError) -> Self {
        match err {
            crate::error::DeleteDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DeleteDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteDBSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetStateFault(inner) => {
                Error::InvalidDbSubnetStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::error::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::error::DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(
                inner,
            ) => Error::InvalidEventSubscriptionStateFault(inner),
            crate::error::DeleteEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGlobalClusterError> for Error {
    fn from(err: crate::error::DeleteGlobalClusterError) -> Self {
        match err {
            crate::error::DeleteGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DeleteGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::DeleteGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCertificatesError> for Error {
    fn from(err: crate::error::DescribeCertificatesError) -> Self {
        match err {
            crate::error::DescribeCertificatesError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::DescribeCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterParameterGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeDBClusterParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeDBClusterParameterGroupsError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParametersError> for Error {
    fn from(err: crate::error::DescribeDBClusterParametersError) -> Self {
        match err {
            crate::error::DescribeDBClusterParametersError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClustersError> for Error {
    fn from(err: crate::error::DescribeDBClustersError) -> Self {
        match err {
            crate::error::DescribeDBClustersError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotAttributesError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotAttributesError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotAttributesError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotsError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotsError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotsError::DbClusterSnapshotNotFoundFault(
                inner,
            ) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBEngineVersionsError> for Error {
    fn from(err: crate::error::DescribeDBEngineVersionsError) -> Self {
        match err {
            crate::error::DescribeDBEngineVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBInstancesError> for Error {
    fn from(err: crate::error::DescribeDBInstancesError) -> Self {
        match err {
            crate::error::DescribeDBInstancesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DescribeDBInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeDBSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeDBSubnetGroupsError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultClusterParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultClusterParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventCategoriesError> for Error {
    fn from(err: crate::error::DescribeEventCategoriesError) -> Self {
        match err {
            crate::error::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::error::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::error::DescribeEventSubscriptionsError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DescribeEventSubscriptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGlobalClustersError> for Error {
    fn from(err: crate::error::DescribeGlobalClustersError) -> Self {
        match err {
            crate::error::DescribeGlobalClustersError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DescribeGlobalClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeOrderableDBInstanceOptionsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrderableDBInstanceOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrderableDBInstanceOptionsError> for Error {
    fn from(err: crate::error::DescribeOrderableDBInstanceOptionsError) -> Self {
        match err {
            crate::error::DescribeOrderableDBInstanceOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::error::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::error::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverDBClusterError> for Error {
    fn from(err: crate::error::FailoverDBClusterError) -> Self {
        match err {
            crate::error::FailoverDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::FailoverDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterError> for Error {
    fn from(err: crate::error::ModifyDBClusterError) -> Self {
        match err {
            crate::error::ModifyDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::ModifyDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ModifyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ModifyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterSnapshotAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ModifyDBClusterSnapshotAttributeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterSnapshotAttributeError> for Error {
    fn from(err: crate::error::ModifyDBClusterSnapshotAttributeError) -> Self {
        match err {
            crate::error::ModifyDBClusterSnapshotAttributeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(inner) => Error::SharedSnapshotQuotaExceededFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBInstanceError> for Error {
    fn from(err: crate::error::ModifyDBInstanceError) -> Self {
        match err {
            crate::error::ModifyDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbUpgradeDependencyFailureFault(inner) => {
                Error::DbUpgradeDependencyFailureFault(inner)
            }
            crate::error::ModifyDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::ModifyDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBSubnetGroupError> for Error {
    fn from(err: crate::error::ModifyDBSubnetGroupError) -> Self {
        match err {
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::ModifyDBSubnetGroupError::SubnetAlreadyInUse(inner) => {
                Error::SubnetAlreadyInUse(inner)
            }
            crate::error::ModifyDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::error::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::error::ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::ModifyEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyGlobalClusterError> for Error {
    fn from(err: crate::error::ModifyGlobalClusterError) -> Self {
        match err {
            crate::error::ModifyGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::ModifyGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::ModifyGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootDBInstanceError> for Error {
    fn from(err: crate::error::RebootDBInstanceError) -> Self {
        match err {
            crate::error::RebootDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RebootDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RebootDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveFromGlobalClusterError> for Error {
    fn from(err: crate::error::RemoveFromGlobalClusterError) -> Self {
        match err {
            crate::error::RemoveFromGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveSourceIdentifierFromSubscriptionError> for Error {
    fn from(err: crate::error::RemoveSourceIdentifierFromSubscriptionError) -> Self {
        match err {
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ResetDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ResetDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ResetDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ResetDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterFromSnapshotError> for Error {
    fn from(err: crate::error::RestoreDBClusterFromSnapshotError) -> Self {
        match err {
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterToPointInTimeError> for Error {
    fn from(err: crate::error::RestoreDBClusterToPointInTimeError) -> Self {
        match err {
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDBClusterError> for Error {
    fn from(err: crate::error::StartDBClusterError) -> Self {
        match err {
            crate::error::StartDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StartDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDBClusterError> for Error {
    fn from(err: crate::error::StopDBClusterError) -> Self {
        match err {
            crate::error::StopDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StopDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AuthorizationNotFoundFault(e) => e.request_id(),
            Self::CertificateNotFoundFault(e) => e.request_id(),
            Self::DbClusterAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterNotFoundFault(e) => e.request_id(),
            Self::DbClusterParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbClusterQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSecurityGroupNotFoundFault(e) => e.request_id(),
            Self::DbSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::DbSubnetGroupNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSubnetQuotaExceededFault(e) => e.request_id(),
            Self::DbUpgradeDependencyFailureFault(e) => e.request_id(),
            Self::EventSubscriptionQuotaExceededFault(e) => e.request_id(),
            Self::GlobalClusterAlreadyExistsFault(e) => e.request_id(),
            Self::GlobalClusterNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterQuotaExceededFault(e) => e.request_id(),
            Self::InstanceQuotaExceededFault(e) => e.request_id(),
            Self::InsufficientDbClusterCapacityFault(e) => e.request_id(),
            Self::InsufficientDbInstanceCapacityFault(e) => e.request_id(),
            Self::InsufficientStorageClusterCapacityFault(e) => e.request_id(),
            Self::InvalidDbClusterSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbClusterStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceStateFault(e) => e.request_id(),
            Self::InvalidDbParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSecurityGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetStateFault(e) => e.request_id(),
            Self::InvalidEventSubscriptionStateFault(e) => e.request_id(),
            Self::InvalidGlobalClusterStateFault(e) => e.request_id(),
            Self::InvalidRestoreFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::SnsTopicArnNotFoundFault(e) => e.request_id(),
            Self::SharedSnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SourceNotFoundFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::StorageTypeNotSupportedFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::SubscriptionAlreadyExistFault(e) => e.request_id(),
            Self::SubscriptionCategoryNotFoundFault(e) => e.request_id(),
            Self::SubscriptionNotFoundFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
