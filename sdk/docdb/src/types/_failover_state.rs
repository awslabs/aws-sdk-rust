// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the state of scheduled or in-process operations on an Amazon DocumentDB global cluster. This data type is empty unless a switchover or failover operation is scheduled or is in progress on the global cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailoverState {
    /// <p>The current status of the global cluster. Possible values are as follows:</p>
    /// <ul>
    /// <li>
    /// <p><b>pending</b> – The service received a request to switch over or fail over the global cluster. The global cluster's primary cluster and the specified secondary cluster are being verified before the operation starts.</p></li>
    /// <li>
    /// <p><b>failing-over</b> – The chosen secondary cluster is being promoted to become the new primary cluster to fail over the global cluster.</p></li>
    /// <li>
    /// <p><b>cancelling</b> – The request to switch over or fail over the global cluster was cancelled and the primary cluster and the selected secondary cluster are returning to their previous states.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::FailoverStatus>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being demoted, and which is associated with this state.</p>
    pub from_db_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being promoted, and which is associated with this state.</p>
    pub to_db_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.</p>
    pub is_data_loss_allowed: ::std::option::Option<bool>,
}
impl FailoverState {
    /// <p>The current status of the global cluster. Possible values are as follows:</p>
    /// <ul>
    /// <li>
    /// <p><b>pending</b> – The service received a request to switch over or fail over the global cluster. The global cluster's primary cluster and the specified secondary cluster are being verified before the operation starts.</p></li>
    /// <li>
    /// <p><b>failing-over</b> – The chosen secondary cluster is being promoted to become the new primary cluster to fail over the global cluster.</p></li>
    /// <li>
    /// <p><b>cancelling</b> – The request to switch over or fail over the global cluster was cancelled and the primary cluster and the selected secondary cluster are returning to their previous states.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::FailoverStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being demoted, and which is associated with this state.</p>
    pub fn from_db_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.from_db_cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being promoted, and which is associated with this state.</p>
    pub fn to_db_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.to_db_cluster_arn.as_deref()
    }
    /// <p>Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.</p>
    pub fn is_data_loss_allowed(&self) -> ::std::option::Option<bool> {
        self.is_data_loss_allowed
    }
}
impl FailoverState {
    /// Creates a new builder-style object to manufacture [`FailoverState`](crate::types::FailoverState).
    pub fn builder() -> crate::types::builders::FailoverStateBuilder {
        crate::types::builders::FailoverStateBuilder::default()
    }
}

/// A builder for [`FailoverState`](crate::types::FailoverState).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FailoverStateBuilder {
    pub(crate) status: ::std::option::Option<crate::types::FailoverStatus>,
    pub(crate) from_db_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) to_db_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_data_loss_allowed: ::std::option::Option<bool>,
}
impl FailoverStateBuilder {
    /// <p>The current status of the global cluster. Possible values are as follows:</p>
    /// <ul>
    /// <li>
    /// <p><b>pending</b> – The service received a request to switch over or fail over the global cluster. The global cluster's primary cluster and the specified secondary cluster are being verified before the operation starts.</p></li>
    /// <li>
    /// <p><b>failing-over</b> – The chosen secondary cluster is being promoted to become the new primary cluster to fail over the global cluster.</p></li>
    /// <li>
    /// <p><b>cancelling</b> – The request to switch over or fail over the global cluster was cancelled and the primary cluster and the selected secondary cluster are returning to their previous states.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::FailoverStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the global cluster. Possible values are as follows:</p>
    /// <ul>
    /// <li>
    /// <p><b>pending</b> – The service received a request to switch over or fail over the global cluster. The global cluster's primary cluster and the specified secondary cluster are being verified before the operation starts.</p></li>
    /// <li>
    /// <p><b>failing-over</b> – The chosen secondary cluster is being promoted to become the new primary cluster to fail over the global cluster.</p></li>
    /// <li>
    /// <p><b>cancelling</b> – The request to switch over or fail over the global cluster was cancelled and the primary cluster and the selected secondary cluster are returning to their previous states.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FailoverStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the global cluster. Possible values are as follows:</p>
    /// <ul>
    /// <li>
    /// <p><b>pending</b> – The service received a request to switch over or fail over the global cluster. The global cluster's primary cluster and the specified secondary cluster are being verified before the operation starts.</p></li>
    /// <li>
    /// <p><b>failing-over</b> – The chosen secondary cluster is being promoted to become the new primary cluster to fail over the global cluster.</p></li>
    /// <li>
    /// <p><b>cancelling</b> – The request to switch over or fail over the global cluster was cancelled and the primary cluster and the selected secondary cluster are returning to their previous states.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FailoverStatus> {
        &self.status
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being demoted, and which is associated with this state.</p>
    pub fn from_db_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_db_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being demoted, and which is associated with this state.</p>
    pub fn set_from_db_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_db_cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being demoted, and which is associated with this state.</p>
    pub fn get_from_db_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_db_cluster_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being promoted, and which is associated with this state.</p>
    pub fn to_db_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to_db_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being promoted, and which is associated with this state.</p>
    pub fn set_to_db_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to_db_cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon DocumentDB cluster that is currently being promoted, and which is associated with this state.</p>
    pub fn get_to_db_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.to_db_cluster_arn
    }
    /// <p>Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.</p>
    pub fn is_data_loss_allowed(mut self, input: bool) -> Self {
        self.is_data_loss_allowed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.</p>
    pub fn set_is_data_loss_allowed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_data_loss_allowed = input;
        self
    }
    /// <p>Indicates whether the operation is a global switchover or a global failover. If data loss is allowed, then the operation is a global failover. Otherwise, it's a switchover.</p>
    pub fn get_is_data_loss_allowed(&self) -> &::std::option::Option<bool> {
        &self.is_data_loss_allowed
    }
    /// Consumes the builder and constructs a [`FailoverState`](crate::types::FailoverState).
    pub fn build(self) -> crate::types::FailoverState {
        crate::types::FailoverState {
            status: self.status,
            from_db_cluster_arn: self.from_db_cluster_arn,
            to_db_cluster_arn: self.to_db_cluster_arn,
            is_data_loss_allowed: self.is_data_loss_allowed,
        }
    }
}
