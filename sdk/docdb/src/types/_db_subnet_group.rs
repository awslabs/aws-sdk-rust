// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about a subnet group. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbSubnetGroup {
    /// <p>The name of the subnet group.</p>
    #[doc(hidden)]
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>Provides the description of the subnet group.</p>
    #[doc(hidden)]
    pub db_subnet_group_description: std::option::Option<std::string::String>,
    /// <p>Provides the virtual private cloud (VPC) ID of the subnet group.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Provides the status of the subnet group.</p>
    #[doc(hidden)]
    pub subnet_group_status: std::option::Option<std::string::String>,
    /// <p>Detailed information about one or more subnets within a subnet group.</p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    /// <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
    #[doc(hidden)]
    pub db_subnet_group_arn: std::option::Option<std::string::String>,
}
impl DbSubnetGroup {
    /// <p>The name of the subnet group.</p>
    pub fn db_subnet_group_name(&self) -> std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>Provides the description of the subnet group.</p>
    pub fn db_subnet_group_description(&self) -> std::option::Option<&str> {
        self.db_subnet_group_description.as_deref()
    }
    /// <p>Provides the virtual private cloud (VPC) ID of the subnet group.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Provides the status of the subnet group.</p>
    pub fn subnet_group_status(&self) -> std::option::Option<&str> {
        self.subnet_group_status.as_deref()
    }
    /// <p>Detailed information about one or more subnets within a subnet group.</p>
    pub fn subnets(&self) -> std::option::Option<&[crate::types::Subnet]> {
        self.subnets.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
    pub fn db_subnet_group_arn(&self) -> std::option::Option<&str> {
        self.db_subnet_group_arn.as_deref()
    }
}
impl DbSubnetGroup {
    /// Creates a new builder-style object to manufacture [`DbSubnetGroup`](crate::types::DbSubnetGroup).
    pub fn builder() -> crate::types::builders::DbSubnetGroupBuilder {
        crate::types::builders::DbSubnetGroupBuilder::default()
    }
}

/// A builder for [`DbSubnetGroup`](crate::types::DbSubnetGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbSubnetGroupBuilder {
    pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
    pub(crate) db_subnet_group_description: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_group_status: std::option::Option<std::string::String>,
    pub(crate) subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    pub(crate) db_subnet_group_arn: std::option::Option<std::string::String>,
}
impl DbSubnetGroupBuilder {
    /// <p>The name of the subnet group.</p>
    pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group_name = Some(input.into());
        self
    }
    /// <p>The name of the subnet group.</p>
    pub fn set_db_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>Provides the description of the subnet group.</p>
    pub fn db_subnet_group_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group_description = Some(input.into());
        self
    }
    /// <p>Provides the description of the subnet group.</p>
    pub fn set_db_subnet_group_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_subnet_group_description = input;
        self
    }
    /// <p>Provides the virtual private cloud (VPC) ID of the subnet group.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>Provides the virtual private cloud (VPC) ID of the subnet group.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Provides the status of the subnet group.</p>
    pub fn subnet_group_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_group_status = Some(input.into());
        self
    }
    /// <p>Provides the status of the subnet group.</p>
    pub fn set_subnet_group_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.subnet_group_status = input;
        self
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>Detailed information about one or more subnets within a subnet group.</p>
    pub fn subnets(mut self, input: crate::types::Subnet) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input);
        self.subnets = Some(v);
        self
    }
    /// <p>Detailed information about one or more subnets within a subnet group.</p>
    pub fn set_subnets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    ) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
    pub fn db_subnet_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
    pub fn set_db_subnet_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_subnet_group_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DbSubnetGroup`](crate::types::DbSubnetGroup).
    pub fn build(self) -> crate::types::DbSubnetGroup {
        crate::types::DbSubnetGroup {
            db_subnet_group_name: self.db_subnet_group_name,
            db_subnet_group_description: self.db_subnet_group_description,
            vpc_id: self.vpc_id,
            subnet_group_status: self.subnet_group_status,
            subnets: self.subnets,
            db_subnet_group_arn: self.db_subnet_group_arn,
        }
    }
}
