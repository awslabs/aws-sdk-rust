// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> One or more modified settings for an instance. These modified settings have been requested, but haven't been applied yet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingModifiedValues {
    /// <p> Contains the new <code>DBInstanceClass</code> for the instance that will be applied or is currently being applied. </p>
    #[doc(hidden)]
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p> Contains the new <code>AllocatedStorage</code> size for then instance that will be applied or is currently being applied. </p>
    #[doc(hidden)]
    pub allocated_storage: std::option::Option<i32>,
    /// <p>Contains the pending or currently in-progress change of the master credentials for the instance.</p>
    #[doc(hidden)]
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>Specifies the pending port for the instance.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p>Specifies the pending number of days for which automated backups are retained.</p>
    #[doc(hidden)]
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>Indicates that the Single-AZ instance is to change to a Multi-AZ deployment.</p>
    #[doc(hidden)]
    pub multi_az: std::option::Option<bool>,
    /// <p>Indicates the database engine version.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The license model for the instance.</p>
    /// <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>, <code>general-public-license</code> </p>
    #[doc(hidden)]
    pub license_model: std::option::Option<std::string::String>,
    /// <p>Specifies the new Provisioned IOPS value for the instance that will be applied or is currently being applied.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p> Contains the new <code>DBInstanceIdentifier</code> for the instance that will be applied or is currently being applied. </p>
    #[doc(hidden)]
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the storage type to be associated with the instance.</p>
    #[doc(hidden)]
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>Specifies the identifier of the certificate authority (CA) certificate for the DB instance.</p>
    #[doc(hidden)]
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
    /// <p>The new subnet group for the instance. </p>
    #[doc(hidden)]
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.</p>
    #[doc(hidden)]
    pub pending_cloudwatch_logs_exports:
        std::option::Option<crate::types::PendingCloudwatchLogsExports>,
}
impl PendingModifiedValues {
    /// <p> Contains the new <code>DBInstanceClass</code> for the instance that will be applied or is currently being applied. </p>
    pub fn db_instance_class(&self) -> std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p> Contains the new <code>AllocatedStorage</code> size for then instance that will be applied or is currently being applied. </p>
    pub fn allocated_storage(&self) -> std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>Contains the pending or currently in-progress change of the master credentials for the instance.</p>
    pub fn master_user_password(&self) -> std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>Specifies the pending port for the instance.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p>Specifies the pending number of days for which automated backups are retained.</p>
    pub fn backup_retention_period(&self) -> std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>Indicates that the Single-AZ instance is to change to a Multi-AZ deployment.</p>
    pub fn multi_az(&self) -> std::option::Option<bool> {
        self.multi_az
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The license model for the instance.</p>
    /// <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>, <code>general-public-license</code> </p>
    pub fn license_model(&self) -> std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>Specifies the new Provisioned IOPS value for the instance that will be applied or is currently being applied.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p> Contains the new <code>DBInstanceIdentifier</code> for the instance that will be applied or is currently being applied. </p>
    pub fn db_instance_identifier(&self) -> std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>Specifies the storage type to be associated with the instance.</p>
    pub fn storage_type(&self) -> std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>Specifies the identifier of the certificate authority (CA) certificate for the DB instance.</p>
    pub fn ca_certificate_identifier(&self) -> std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
    /// <p>The new subnet group for the instance. </p>
    pub fn db_subnet_group_name(&self) -> std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.</p>
    pub fn pending_cloudwatch_logs_exports(
        &self,
    ) -> std::option::Option<&crate::types::PendingCloudwatchLogsExports> {
        self.pending_cloudwatch_logs_exports.as_ref()
    }
}
impl PendingModifiedValues {
    /// Creates a new builder-style object to manufacture [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn builder() -> crate::types::builders::PendingModifiedValuesBuilder {
        crate::types::builders::PendingModifiedValuesBuilder::default()
    }
}

/// A builder for [`PendingModifiedValues`](crate::types::PendingModifiedValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingModifiedValuesBuilder {
    pub(crate) db_instance_class: std::option::Option<std::string::String>,
    pub(crate) allocated_storage: std::option::Option<i32>,
    pub(crate) master_user_password: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) backup_retention_period: std::option::Option<i32>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) license_model: std::option::Option<std::string::String>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    pub(crate) storage_type: std::option::Option<std::string::String>,
    pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
    pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
    pub(crate) pending_cloudwatch_logs_exports:
        std::option::Option<crate::types::PendingCloudwatchLogsExports>,
}
impl PendingModifiedValuesBuilder {
    /// <p> Contains the new <code>DBInstanceClass</code> for the instance that will be applied or is currently being applied. </p>
    pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_class = Some(input.into());
        self
    }
    /// <p> Contains the new <code>DBInstanceClass</code> for the instance that will be applied or is currently being applied. </p>
    pub fn set_db_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p> Contains the new <code>AllocatedStorage</code> size for then instance that will be applied or is currently being applied. </p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = Some(input);
        self
    }
    /// <p> Contains the new <code>AllocatedStorage</code> size for then instance that will be applied or is currently being applied. </p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>Contains the pending or currently in-progress change of the master credentials for the instance.</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_user_password = Some(input.into());
        self
    }
    /// <p>Contains the pending or currently in-progress change of the master credentials for the instance.</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>Specifies the pending port for the instance.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>Specifies the pending port for the instance.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Specifies the pending number of days for which automated backups are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = Some(input);
        self
    }
    /// <p>Specifies the pending number of days for which automated backups are retained.</p>
    pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>Indicates that the Single-AZ instance is to change to a Multi-AZ deployment.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p>Indicates that the Single-AZ instance is to change to a Multi-AZ deployment.</p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The license model for the instance.</p>
    /// <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>, <code>general-public-license</code> </p>
    pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_model = Some(input.into());
        self
    }
    /// <p>The license model for the instance.</p>
    /// <p>Valid values: <code>license-included</code>, <code>bring-your-own-license</code>, <code>general-public-license</code> </p>
    pub fn set_license_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>Specifies the new Provisioned IOPS value for the instance that will be applied or is currently being applied.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>Specifies the new Provisioned IOPS value for the instance that will be applied or is currently being applied.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p> Contains the new <code>DBInstanceIdentifier</code> for the instance that will be applied or is currently being applied. </p>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_identifier = Some(input.into());
        self
    }
    /// <p> Contains the new <code>DBInstanceIdentifier</code> for the instance that will be applied or is currently being applied. </p>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>Specifies the storage type to be associated with the instance.</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_type = Some(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the instance.</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Specifies the identifier of the certificate authority (CA) certificate for the DB instance.</p>
    pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_identifier = Some(input.into());
        self
    }
    /// <p>Specifies the identifier of the certificate authority (CA) certificate for the DB instance.</p>
    pub fn set_ca_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// <p>The new subnet group for the instance. </p>
    pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group_name = Some(input.into());
        self
    }
    /// <p>The new subnet group for the instance. </p>
    pub fn set_db_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.</p>
    pub fn pending_cloudwatch_logs_exports(
        mut self,
        input: crate::types::PendingCloudwatchLogsExports,
    ) -> Self {
        self.pending_cloudwatch_logs_exports = Some(input);
        self
    }
    /// <p>A list of the log types whose configuration is still pending. These log types are in the process of being activated or deactivated.</p>
    pub fn set_pending_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<crate::types::PendingCloudwatchLogsExports>,
    ) -> Self {
        self.pending_cloudwatch_logs_exports = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn build(self) -> crate::types::PendingModifiedValues {
        crate::types::PendingModifiedValues {
            db_instance_class: self.db_instance_class,
            allocated_storage: self.allocated_storage,
            master_user_password: self.master_user_password,
            port: self.port,
            backup_retention_period: self.backup_retention_period,
            multi_az: self.multi_az,
            engine_version: self.engine_version,
            license_model: self.license_model,
            iops: self.iops,
            db_instance_identifier: self.db_instance_identifier,
            storage_type: self.storage_type,
            ca_certificate_identifier: self.ca_certificate_identifier,
            db_subnet_group_name: self.db_subnet_group_name,
            pending_cloudwatch_logs_exports: self.pending_cloudwatch_logs_exports,
        }
    }
}
