// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The options that are available for an instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrderableDbInstanceOption {
    /// <p>The engine type of an instance.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The engine version of an instance.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The instance class for an instance.</p>
    pub db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The license model for an instance.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>A list of Availability Zones for an instance.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
    /// <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
    pub vpc: ::std::option::Option<bool>,
}
impl OrderableDbInstanceOption {
    /// <p>The engine type of an instance.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The engine version of an instance.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The instance class for an instance.</p>
    pub fn db_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The license model for an instance.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>A list of Availability Zones for an instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[crate::types::AvailabilityZone] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
    pub fn vpc(&self) -> ::std::option::Option<bool> {
        self.vpc
    }
}
impl OrderableDbInstanceOption {
    /// Creates a new builder-style object to manufacture [`OrderableDbInstanceOption`](crate::types::OrderableDbInstanceOption).
    pub fn builder() -> crate::types::builders::OrderableDbInstanceOptionBuilder {
        crate::types::builders::OrderableDbInstanceOptionBuilder::default()
    }
}

/// A builder for [`OrderableDbInstanceOption`](crate::types::OrderableDbInstanceOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrderableDbInstanceOptionBuilder {
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>,
    pub(crate) vpc: ::std::option::Option<bool>,
}
impl OrderableDbInstanceOptionBuilder {
    /// <p>The engine type of an instance.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine type of an instance.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The engine type of an instance.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The engine version of an instance.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine version of an instance.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The engine version of an instance.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The instance class for an instance.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance class for an instance.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The instance class for an instance.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_class
    }
    /// <p>The license model for an instance.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model for an instance.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model for an instance.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>A list of Availability Zones for an instance.</p>
    pub fn availability_zones(mut self, input: crate::types::AvailabilityZone) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input);
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Availability Zones for an instance.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>A list of Availability Zones for an instance.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZone>> {
        &self.availability_zones
    }
    /// <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
    pub fn vpc(mut self, input: bool) -> Self {
        self.vpc = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
    pub fn set_vpc(mut self, input: ::std::option::Option<bool>) -> Self {
        self.vpc = input;
        self
    }
    /// <p>Indicates whether an instance is in a virtual private cloud (VPC).</p>
    pub fn get_vpc(&self) -> &::std::option::Option<bool> {
        &self.vpc
    }
    /// Consumes the builder and constructs a [`OrderableDbInstanceOption`](crate::types::OrderableDbInstanceOption).
    pub fn build(self) -> crate::types::OrderableDbInstanceOption {
        crate::types::OrderableDbInstanceOption {
            engine: self.engine,
            engine_version: self.engine_version,
            db_instance_class: self.db_instance_class,
            license_model: self.license_model,
            availability_zones: self.availability_zones,
            vpc: self.vpc,
        }
    }
}
