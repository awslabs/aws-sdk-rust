// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a list of status information for an instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbInstanceStatusInfo {
    /// <p>This value is currently "<code>read replication</code>."</p>
    #[doc(hidden)]
    pub status_type: std::option::Option<std::string::String>,
    /// <p>A Boolean value that is <code>true</code> if the instance is operating normally, or <code>false</code> if the instance is in an error state.</p>
    #[doc(hidden)]
    pub normal: bool,
    /// <p>Status of the instance. For a <code>StatusType</code> of read replica, the values can be <code>replicating</code>, error, <code>stopped</code>, or <code>terminated</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl DbInstanceStatusInfo {
    /// <p>This value is currently "<code>read replication</code>."</p>
    pub fn status_type(&self) -> std::option::Option<&str> {
        self.status_type.as_deref()
    }
    /// <p>A Boolean value that is <code>true</code> if the instance is operating normally, or <code>false</code> if the instance is in an error state.</p>
    pub fn normal(&self) -> bool {
        self.normal
    }
    /// <p>Status of the instance. For a <code>StatusType</code> of read replica, the values can be <code>replicating</code>, error, <code>stopped</code>, or <code>terminated</code>.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl DbInstanceStatusInfo {
    /// Creates a new builder-style object to manufacture [`DbInstanceStatusInfo`](crate::types::DbInstanceStatusInfo).
    pub fn builder() -> crate::types::builders::DbInstanceStatusInfoBuilder {
        crate::types::builders::DbInstanceStatusInfoBuilder::default()
    }
}

/// A builder for [`DbInstanceStatusInfo`](crate::types::DbInstanceStatusInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbInstanceStatusInfoBuilder {
    pub(crate) status_type: std::option::Option<std::string::String>,
    pub(crate) normal: std::option::Option<bool>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl DbInstanceStatusInfoBuilder {
    /// <p>This value is currently "<code>read replication</code>."</p>
    pub fn status_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_type = Some(input.into());
        self
    }
    /// <p>This value is currently "<code>read replication</code>."</p>
    pub fn set_status_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_type = input;
        self
    }
    /// <p>A Boolean value that is <code>true</code> if the instance is operating normally, or <code>false</code> if the instance is in an error state.</p>
    pub fn normal(mut self, input: bool) -> Self {
        self.normal = Some(input);
        self
    }
    /// <p>A Boolean value that is <code>true</code> if the instance is operating normally, or <code>false</code> if the instance is in an error state.</p>
    pub fn set_normal(mut self, input: std::option::Option<bool>) -> Self {
        self.normal = input;
        self
    }
    /// <p>Status of the instance. For a <code>StatusType</code> of read replica, the values can be <code>replicating</code>, error, <code>stopped</code>, or <code>terminated</code>.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Status of the instance. For a <code>StatusType</code> of read replica, the values can be <code>replicating</code>, error, <code>stopped</code>, or <code>terminated</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`DbInstanceStatusInfo`](crate::types::DbInstanceStatusInfo).
    pub fn build(self) -> crate::types::DbInstanceStatusInfo {
        crate::types::DbInstanceStatusInfo {
            status_type: self.status_type,
            normal: self.normal.unwrap_or_default(),
            status: self.status,
            message: self.message,
        }
    }
}
