// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration setting for the log types to be enabled for export to Amazon CloudWatch Logs for a specific instance or cluster.</p>
/// <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs are exported (or not exported) to CloudWatch Logs. The values within these arrays depend on the engine that is being used.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudwatchLogsExportConfiguration {
    /// <p>The list of log types to enable.</p>
    #[doc(hidden)]
    pub enable_log_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The list of log types to disable.</p>
    #[doc(hidden)]
    pub disable_log_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CloudwatchLogsExportConfiguration {
    /// <p>The list of log types to enable.</p>
    pub fn enable_log_types(&self) -> std::option::Option<&[std::string::String]> {
        self.enable_log_types.as_deref()
    }
    /// <p>The list of log types to disable.</p>
    pub fn disable_log_types(&self) -> std::option::Option<&[std::string::String]> {
        self.disable_log_types.as_deref()
    }
}
impl CloudwatchLogsExportConfiguration {
    /// Creates a new builder-style object to manufacture [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
    pub fn builder() -> crate::types::builders::CloudwatchLogsExportConfigurationBuilder {
        crate::types::builders::CloudwatchLogsExportConfigurationBuilder::default()
    }
}

/// A builder for [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudwatchLogsExportConfigurationBuilder {
    pub(crate) enable_log_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) disable_log_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl CloudwatchLogsExportConfigurationBuilder {
    /// Appends an item to `enable_log_types`.
    ///
    /// To override the contents of this collection use [`set_enable_log_types`](Self::set_enable_log_types).
    ///
    /// <p>The list of log types to enable.</p>
    pub fn enable_log_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.enable_log_types.unwrap_or_default();
        v.push(input.into());
        self.enable_log_types = Some(v);
        self
    }
    /// <p>The list of log types to enable.</p>
    pub fn set_enable_log_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.enable_log_types = input;
        self
    }
    /// Appends an item to `disable_log_types`.
    ///
    /// To override the contents of this collection use [`set_disable_log_types`](Self::set_disable_log_types).
    ///
    /// <p>The list of log types to disable.</p>
    pub fn disable_log_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.disable_log_types.unwrap_or_default();
        v.push(input.into());
        self.disable_log_types = Some(v);
        self
    }
    /// <p>The list of log types to disable.</p>
    pub fn set_disable_log_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.disable_log_types = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudwatchLogsExportConfiguration`](crate::types::CloudwatchLogsExportConfiguration).
    pub fn build(self) -> crate::types::CloudwatchLogsExportConfiguration {
        crate::types::CloudwatchLogsExportConfiguration {
            enable_log_types: self.enable_log_types,
            disable_log_types: self.disable_log_types,
        }
    }
}
