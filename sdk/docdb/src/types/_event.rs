// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Event {
    /// <p>Provides the identifier for the source of the event.</p>
    #[doc(hidden)]
    pub source_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the source type for this event.</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::SourceType>,
    /// <p>Provides the text of this event.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>Specifies the category for the event.</p>
    #[doc(hidden)]
    pub event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the date and time of the event.</p>
    #[doc(hidden)]
    pub date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) for the event.</p>
    #[doc(hidden)]
    pub source_arn: std::option::Option<std::string::String>,
}
impl Event {
    /// <p>Provides the identifier for the source of the event.</p>
    pub fn source_identifier(&self) -> std::option::Option<&str> {
        self.source_identifier.as_deref()
    }
    /// <p>Specifies the source type for this event.</p>
    pub fn source_type(&self) -> std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
    /// <p>Provides the text of this event.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>Specifies the category for the event.</p>
    pub fn event_categories(&self) -> std::option::Option<&[std::string::String]> {
        self.event_categories.as_deref()
    }
    /// <p>Specifies the date and time of the event.</p>
    pub fn date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.date.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the event.</p>
    pub fn source_arn(&self) -> std::option::Option<&str> {
        self.source_arn.as_deref()
    }
}
impl Event {
    /// Creates a new builder-style object to manufacture [`Event`](crate::types::Event).
    pub fn builder() -> crate::types::builders::EventBuilder {
        crate::types::builders::EventBuilder::default()
    }
}

/// A builder for [`Event`](crate::types::Event).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventBuilder {
    pub(crate) source_identifier: std::option::Option<std::string::String>,
    pub(crate) source_type: std::option::Option<crate::types::SourceType>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) source_arn: std::option::Option<std::string::String>,
}
impl EventBuilder {
    /// <p>Provides the identifier for the source of the event.</p>
    pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_identifier = Some(input.into());
        self
    }
    /// <p>Provides the identifier for the source of the event.</p>
    pub fn set_source_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_identifier = input;
        self
    }
    /// <p>Specifies the source type for this event.</p>
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// <p>Specifies the source type for this event.</p>
    pub fn set_source_type(mut self, input: std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>Provides the text of this event.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Provides the text of this event.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Appends an item to `event_categories`.
    ///
    /// To override the contents of this collection use [`set_event_categories`](Self::set_event_categories).
    ///
    /// <p>Specifies the category for the event.</p>
    pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.event_categories.unwrap_or_default();
        v.push(input.into());
        self.event_categories = Some(v);
        self
    }
    /// <p>Specifies the category for the event.</p>
    pub fn set_event_categories(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.event_categories = input;
        self
    }
    /// <p>Specifies the date and time of the event.</p>
    pub fn date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.date = Some(input);
        self
    }
    /// <p>Specifies the date and time of the event.</p>
    pub fn set_date(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.date = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the event.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`Event`](crate::types::Event).
    pub fn build(self) -> crate::types::Event {
        crate::types::Event {
            source_identifier: self.source_identifier,
            source_type: self.source_type,
            message: self.message,
            event_categories: self.event_categories,
            date: self.date,
            source_arn: self.source_arn,
        }
    }
}
