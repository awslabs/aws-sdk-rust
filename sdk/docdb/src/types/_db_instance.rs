// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an instance. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbInstance {
    /// <p>Contains a user-provided database identifier. This identifier is the unique key that identifies an instance.</p>
    #[doc(hidden)]
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>Contains the name of the compute and memory capacity class of the instance.</p>
    #[doc(hidden)]
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>Provides the name of the database engine to be used for this instance.</p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>Specifies the current state of this database.</p>
    #[doc(hidden)]
    pub db_instance_status: std::option::Option<std::string::String>,
    /// <p>Specifies the connection endpoint.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<crate::types::Endpoint>,
    /// <p>Provides the date and time that the instance was created.</p>
    #[doc(hidden)]
    pub instance_create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>Specifies the number of days for which automatic snapshots are retained.</p>
    #[doc(hidden)]
    pub backup_retention_period: i32,
    /// <p>Provides a list of VPC security group elements that the instance belongs to.</p>
    #[doc(hidden)]
    pub vpc_security_groups:
        std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    /// <p>Specifies the name of the Availability Zone that the instance is located in.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group.</p>
    #[doc(hidden)]
    pub db_subnet_group: std::option::Option<crate::types::DbSubnetGroup>,
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.</p>
    #[doc(hidden)]
    pub pending_modified_values: std::option::Option<crate::types::PendingModifiedValues>,
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    #[doc(hidden)]
    pub latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the database engine version.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>Does not apply. This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
    #[doc(hidden)]
    pub auto_minor_version_upgrade: bool,
    /// <p>Not supported. Amazon DocumentDB does not currently support public endpoints. The value of <code>PubliclyAccessible</code> is always <code>false</code>.</p>
    #[doc(hidden)]
    pub publicly_accessible: bool,
    /// <p>The status of a read replica. If the instance is not a read replica, this is blank.</p>
    #[doc(hidden)]
    pub status_infos: std::option::Option<std::vec::Vec<crate::types::DbInstanceStatusInfo>>,
    /// <p>Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster.</p>
    #[doc(hidden)]
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies whether or not the instance is encrypted.</p>
    #[doc(hidden)]
    pub storage_encrypted: bool,
    /// <p> If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for the encrypted instance. </p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the instance. This identifier is found in CloudTrail log entries whenever the KMS key for the instance is accessed.</p>
    #[doc(hidden)]
    pub dbi_resource_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    #[doc(hidden)]
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    #[doc(hidden)]
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p>
    #[doc(hidden)]
    pub promotion_tier: std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) for the instance.</p>
    #[doc(hidden)]
    pub db_instance_arn: std::option::Option<std::string::String>,
    /// <p>A list of log types that this instance is configured to export to CloudWatch Logs.</p>
    #[doc(hidden)]
    pub enabled_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DbInstance {
    /// <p>Contains a user-provided database identifier. This identifier is the unique key that identifies an instance.</p>
    pub fn db_instance_identifier(&self) -> std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>Contains the name of the compute and memory capacity class of the instance.</p>
    pub fn db_instance_class(&self) -> std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>Provides the name of the database engine to be used for this instance.</p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>Specifies the current state of this database.</p>
    pub fn db_instance_status(&self) -> std::option::Option<&str> {
        self.db_instance_status.as_deref()
    }
    /// <p>Specifies the connection endpoint.</p>
    pub fn endpoint(&self) -> std::option::Option<&crate::types::Endpoint> {
        self.endpoint.as_ref()
    }
    /// <p>Provides the date and time that the instance was created.</p>
    pub fn instance_create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.instance_create_time.as_ref()
    }
    /// <p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>Specifies the number of days for which automatic snapshots are retained.</p>
    pub fn backup_retention_period(&self) -> i32 {
        self.backup_retention_period
    }
    /// <p>Provides a list of VPC security group elements that the instance belongs to.</p>
    pub fn vpc_security_groups(
        &self,
    ) -> std::option::Option<&[crate::types::VpcSecurityGroupMembership]> {
        self.vpc_security_groups.as_deref()
    }
    /// <p>Specifies the name of the Availability Zone that the instance is located in.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(&self) -> std::option::Option<&crate::types::DbSubnetGroup> {
        self.db_subnet_group.as_ref()
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(
        &self,
    ) -> std::option::Option<&crate::types::PendingModifiedValues> {
        self.pending_modified_values.as_ref()
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.latest_restorable_time.as_ref()
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Does not apply. This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
    pub fn auto_minor_version_upgrade(&self) -> bool {
        self.auto_minor_version_upgrade
    }
    /// <p>Not supported. Amazon DocumentDB does not currently support public endpoints. The value of <code>PubliclyAccessible</code> is always <code>false</code>.</p>
    pub fn publicly_accessible(&self) -> bool {
        self.publicly_accessible
    }
    /// <p>The status of a read replica. If the instance is not a read replica, this is blank.</p>
    pub fn status_infos(&self) -> std::option::Option<&[crate::types::DbInstanceStatusInfo]> {
        self.status_infos.as_deref()
    }
    /// <p>Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster.</p>
    pub fn db_cluster_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>Specifies whether or not the instance is encrypted.</p>
    pub fn storage_encrypted(&self) -> bool {
        self.storage_encrypted
    }
    /// <p> If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for the encrypted instance. </p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the instance. This identifier is found in CloudTrail log entries whenever the KMS key for the instance is accessed.</p>
    pub fn dbi_resource_id(&self) -> std::option::Option<&str> {
        self.dbi_resource_id.as_deref()
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    pub fn ca_certificate_identifier(&self) -> std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn copy_tags_to_snapshot(&self) -> std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p>
    pub fn promotion_tier(&self) -> std::option::Option<i32> {
        self.promotion_tier
    }
    /// <p>The Amazon Resource Name (ARN) for the instance.</p>
    pub fn db_instance_arn(&self) -> std::option::Option<&str> {
        self.db_instance_arn.as_deref()
    }
    /// <p>A list of log types that this instance is configured to export to CloudWatch Logs.</p>
    pub fn enabled_cloudwatch_logs_exports(&self) -> std::option::Option<&[std::string::String]> {
        self.enabled_cloudwatch_logs_exports.as_deref()
    }
}
impl DbInstance {
    /// Creates a new builder-style object to manufacture [`DbInstance`](crate::types::DbInstance).
    pub fn builder() -> crate::types::builders::DbInstanceBuilder {
        crate::types::builders::DbInstanceBuilder::default()
    }
}

/// A builder for [`DbInstance`](crate::types::DbInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbInstanceBuilder {
    pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    pub(crate) db_instance_class: std::option::Option<std::string::String>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) db_instance_status: std::option::Option<std::string::String>,
    pub(crate) endpoint: std::option::Option<crate::types::Endpoint>,
    pub(crate) instance_create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) backup_retention_period: std::option::Option<i32>,
    pub(crate) vpc_security_groups:
        std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) db_subnet_group: std::option::Option<crate::types::DbSubnetGroup>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) pending_modified_values: std::option::Option<crate::types::PendingModifiedValues>,
    pub(crate) latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) status_infos: std::option::Option<std::vec::Vec<crate::types::DbInstanceStatusInfo>>,
    pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) storage_encrypted: std::option::Option<bool>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) dbi_resource_id: std::option::Option<std::string::String>,
    pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
    pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
    pub(crate) promotion_tier: std::option::Option<i32>,
    pub(crate) db_instance_arn: std::option::Option<std::string::String>,
    pub(crate) enabled_cloudwatch_logs_exports:
        std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DbInstanceBuilder {
    /// <p>Contains a user-provided database identifier. This identifier is the unique key that identifies an instance.</p>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_identifier = Some(input.into());
        self
    }
    /// <p>Contains a user-provided database identifier. This identifier is the unique key that identifies an instance.</p>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>Contains the name of the compute and memory capacity class of the instance.</p>
    pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_class = Some(input.into());
        self
    }
    /// <p>Contains the name of the compute and memory capacity class of the instance.</p>
    pub fn set_db_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>Provides the name of the database engine to be used for this instance.</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>Provides the name of the database engine to be used for this instance.</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>Specifies the current state of this database.</p>
    pub fn db_instance_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_status = Some(input.into());
        self
    }
    /// <p>Specifies the current state of this database.</p>
    pub fn set_db_instance_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_status = input;
        self
    }
    /// <p>Specifies the connection endpoint.</p>
    pub fn endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.endpoint = Some(input);
        self
    }
    /// <p>Specifies the connection endpoint.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<crate::types::Endpoint>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>Provides the date and time that the instance was created.</p>
    pub fn instance_create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.instance_create_time = Some(input);
        self
    }
    /// <p>Provides the date and time that the instance was created.</p>
    pub fn set_instance_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.instance_create_time = input;
        self
    }
    /// <p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p> Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>. </p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>Specifies the number of days for which automatic snapshots are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = Some(input);
        self
    }
    /// <p>Specifies the number of days for which automatic snapshots are retained.</p>
    pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// Appends an item to `vpc_security_groups`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_groups`](Self::set_vpc_security_groups).
    ///
    /// <p>Provides a list of VPC security group elements that the instance belongs to.</p>
    pub fn vpc_security_groups(mut self, input: crate::types::VpcSecurityGroupMembership) -> Self {
        let mut v = self.vpc_security_groups.unwrap_or_default();
        v.push(input);
        self.vpc_security_groups = Some(v);
        self
    }
    /// <p>Provides a list of VPC security group elements that the instance belongs to.</p>
    pub fn set_vpc_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    ) -> Self {
        self.vpc_security_groups = input;
        self
    }
    /// <p>Specifies the name of the Availability Zone that the instance is located in.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>Specifies the name of the Availability Zone that the instance is located in.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(mut self, input: crate::types::DbSubnetGroup) -> Self {
        self.db_subnet_group = Some(input);
        self
    }
    /// <p>Specifies information on the subnet group that is associated with the instance, including the name, description, and subnets in the subnet group.</p>
    pub fn set_db_subnet_group(
        mut self,
        input: std::option::Option<crate::types::DbSubnetGroup>,
    ) -> Self {
        self.db_subnet_group = input;
        self
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(mut self, input: crate::types::PendingModifiedValues) -> Self {
        self.pending_modified_values = Some(input);
        self
    }
    /// <p>Specifies that changes to the instance are pending. This element is included only when changes are pending. Specific changes are identified by subelements.</p>
    pub fn set_pending_modified_values(
        mut self,
        input: std::option::Option<crate::types::PendingModifiedValues>,
    ) -> Self {
        self.pending_modified_values = input;
        self
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.latest_restorable_time = Some(input);
        self
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn set_latest_restorable_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.latest_restorable_time = input;
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Does not apply. This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = Some(input);
        self
    }
    /// <p>Does not apply. This parameter does not apply to Amazon DocumentDB. Amazon DocumentDB does not perform minor version upgrades regardless of the value set.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>Not supported. Amazon DocumentDB does not currently support public endpoints. The value of <code>PubliclyAccessible</code> is always <code>false</code>.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>Not supported. Amazon DocumentDB does not currently support public endpoints. The value of <code>PubliclyAccessible</code> is always <code>false</code>.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// Appends an item to `status_infos`.
    ///
    /// To override the contents of this collection use [`set_status_infos`](Self::set_status_infos).
    ///
    /// <p>The status of a read replica. If the instance is not a read replica, this is blank.</p>
    pub fn status_infos(mut self, input: crate::types::DbInstanceStatusInfo) -> Self {
        let mut v = self.status_infos.unwrap_or_default();
        v.push(input);
        self.status_infos = Some(v);
        self
    }
    /// <p>The status of a read replica. If the instance is not a read replica, this is blank.</p>
    pub fn set_status_infos(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DbInstanceStatusInfo>>,
    ) -> Self {
        self.status_infos = input;
        self
    }
    /// <p>Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster.</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_identifier = Some(input.into());
        self
    }
    /// <p>Contains the name of the cluster that the instance is a member of if the instance is a member of a cluster.</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>Specifies whether or not the instance is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = Some(input);
        self
    }
    /// <p>Specifies whether or not the instance is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p> If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for the encrypted instance. </p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p> If <code>StorageEncrypted</code> is <code>true</code>, the KMS key identifier for the encrypted instance. </p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the instance. This identifier is found in CloudTrail log entries whenever the KMS key for the instance is accessed.</p>
    pub fn dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dbi_resource_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the instance. This identifier is found in CloudTrail log entries whenever the KMS key for the instance is accessed.</p>
    pub fn set_dbi_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dbi_resource_id = input;
        self
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    pub fn set_ca_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = Some(input);
        self
    }
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p>
    pub fn promotion_tier(mut self, input: i32) -> Self {
        self.promotion_tier = Some(input);
        self
    }
    /// <p>A value that specifies the order in which an Amazon DocumentDB replica is promoted to the primary instance after a failure of the existing primary instance.</p>
    pub fn set_promotion_tier(mut self, input: std::option::Option<i32>) -> Self {
        self.promotion_tier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the instance.</p>
    pub fn db_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the instance.</p>
    pub fn set_db_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_instance_arn = input;
        self
    }
    /// Appends an item to `enabled_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enabled_cloudwatch_logs_exports`](Self::set_enabled_cloudwatch_logs_exports).
    ///
    /// <p>A list of log types that this instance is configured to export to CloudWatch Logs.</p>
    pub fn enabled_cloudwatch_logs_exports(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.enabled_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enabled_cloudwatch_logs_exports = Some(v);
        self
    }
    /// <p>A list of log types that this instance is configured to export to CloudWatch Logs.</p>
    pub fn set_enabled_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.enabled_cloudwatch_logs_exports = input;
        self
    }
    /// Consumes the builder and constructs a [`DbInstance`](crate::types::DbInstance).
    pub fn build(self) -> crate::types::DbInstance {
        crate::types::DbInstance {
            db_instance_identifier: self.db_instance_identifier,
            db_instance_class: self.db_instance_class,
            engine: self.engine,
            db_instance_status: self.db_instance_status,
            endpoint: self.endpoint,
            instance_create_time: self.instance_create_time,
            preferred_backup_window: self.preferred_backup_window,
            backup_retention_period: self.backup_retention_period.unwrap_or_default(),
            vpc_security_groups: self.vpc_security_groups,
            availability_zone: self.availability_zone,
            db_subnet_group: self.db_subnet_group,
            preferred_maintenance_window: self.preferred_maintenance_window,
            pending_modified_values: self.pending_modified_values,
            latest_restorable_time: self.latest_restorable_time,
            engine_version: self.engine_version,
            auto_minor_version_upgrade: self.auto_minor_version_upgrade.unwrap_or_default(),
            publicly_accessible: self.publicly_accessible.unwrap_or_default(),
            status_infos: self.status_infos,
            db_cluster_identifier: self.db_cluster_identifier,
            storage_encrypted: self.storage_encrypted.unwrap_or_default(),
            kms_key_id: self.kms_key_id,
            dbi_resource_id: self.dbi_resource_id,
            ca_certificate_identifier: self.ca_certificate_identifier,
            copy_tags_to_snapshot: self.copy_tags_to_snapshot,
            promotion_tier: self.promotion_tier,
            db_instance_arn: self.db_instance_arn,
            enabled_cloudwatch_logs_exports: self.enabled_cloudwatch_logs_exports,
        }
    }
}
