// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeGlobalClustersOutput {
    /// <p></p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub global_clusters: std::option::Option<std::vec::Vec<crate::types::GlobalCluster>>,
    _request_id: Option<String>,
}
impl DescribeGlobalClustersOutput {
    /// <p></p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p></p>
    pub fn global_clusters(&self) -> std::option::Option<&[crate::types::GlobalCluster]> {
        self.global_clusters.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeGlobalClustersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeGlobalClustersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGlobalClustersOutput`](crate::operation::describe_global_clusters::DescribeGlobalClustersOutput).
    pub fn builder(
    ) -> crate::operation::describe_global_clusters::builders::DescribeGlobalClustersOutputBuilder
    {
        crate::operation::describe_global_clusters::builders::DescribeGlobalClustersOutputBuilder::default()
    }
}

/// A builder for [`DescribeGlobalClustersOutput`](crate::operation::describe_global_clusters::DescribeGlobalClustersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeGlobalClustersOutputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) global_clusters: std::option::Option<std::vec::Vec<crate::types::GlobalCluster>>,
    _request_id: Option<String>,
}
impl DescribeGlobalClustersOutputBuilder {
    /// <p></p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Appends an item to `global_clusters`.
    ///
    /// To override the contents of this collection use [`set_global_clusters`](Self::set_global_clusters).
    ///
    /// <p></p>
    pub fn global_clusters(mut self, input: crate::types::GlobalCluster) -> Self {
        let mut v = self.global_clusters.unwrap_or_default();
        v.push(input);
        self.global_clusters = Some(v);
        self
    }
    /// <p></p>
    pub fn set_global_clusters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::GlobalCluster>>,
    ) -> Self {
        self.global_clusters = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeGlobalClustersOutput`](crate::operation::describe_global_clusters::DescribeGlobalClustersOutput).
    pub fn build(self) -> crate::operation::describe_global_clusters::DescribeGlobalClustersOutput {
        crate::operation::describe_global_clusters::DescribeGlobalClustersOutput {
            marker: self.marker,
            global_clusters: self.global_clusters,
            _request_id: self._request_id,
        }
    }
}
