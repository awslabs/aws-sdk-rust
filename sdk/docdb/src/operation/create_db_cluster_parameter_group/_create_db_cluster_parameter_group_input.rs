// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of <code>CreateDBClusterParameterGroup</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDbClusterParameterGroupInput {
    /// <p>The name of the cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The cluster parameter group family name.</p>
    pub db_parameter_group_family: ::std::option::Option<::std::string::String>,
    /// <p>The description for the cluster parameter group.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be assigned to the cluster parameter group.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbClusterParameterGroupInput {
    /// <p>The name of the cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn db_cluster_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_cluster_parameter_group_name.as_deref()
    }
    /// <p>The cluster parameter group family name.</p>
    pub fn db_parameter_group_family(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_family.as_deref()
    }
    /// <p>The description for the cluster parameter group.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The tags to be assigned to the cluster parameter group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateDbClusterParameterGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
    pub fn builder() -> crate::operation::create_db_cluster_parameter_group::builders::CreateDbClusterParameterGroupInputBuilder {
        crate::operation::create_db_cluster_parameter_group::builders::CreateDbClusterParameterGroupInputBuilder::default()
    }
}

/// A builder for [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDbClusterParameterGroupInputBuilder {
    pub(crate) db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) db_parameter_group_family: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbClusterParameterGroupInputBuilder {
    /// <p>The name of the cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    /// This field is required.
    pub fn db_cluster_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn set_db_cluster_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = input;
        self
    }
    /// <p>The name of the cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing <code>DBClusterParameterGroup</code>.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn get_db_cluster_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_parameter_group_name
    }
    /// <p>The cluster parameter group family name.</p>
    /// This field is required.
    pub fn db_parameter_group_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster parameter group family name.</p>
    pub fn set_db_parameter_group_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_family = input;
        self
    }
    /// <p>The cluster parameter group family name.</p>
    pub fn get_db_parameter_group_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_family
    }
    /// <p>The description for the cluster parameter group.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the cluster parameter group.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the cluster parameter group.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the cluster parameter group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to be assigned to the cluster parameter group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be assigned to the cluster parameter group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput {
            db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            db_parameter_group_family: self.db_parameter_group_family,
            description: self.description,
            tags: self.tags,
        })
    }
}
