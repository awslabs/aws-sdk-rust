// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input to <code>RebootDBInstance</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RebootDbInstanceInput {
    /// <p>The instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li>
    /// </ul>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>
    pub force_failover: ::std::option::Option<bool>,
}
impl RebootDbInstanceInput {
    /// <p>The instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>
    pub fn force_failover(&self) -> ::std::option::Option<bool> {
        self.force_failover
    }
}
impl RebootDbInstanceInput {
    /// Creates a new builder-style object to manufacture [`RebootDbInstanceInput`](crate::operation::reboot_db_instance::RebootDbInstanceInput).
    pub fn builder() -> crate::operation::reboot_db_instance::builders::RebootDbInstanceInputBuilder {
        crate::operation::reboot_db_instance::builders::RebootDbInstanceInputBuilder::default()
    }
}

/// A builder for [`RebootDbInstanceInput`](crate::operation::reboot_db_instance::RebootDbInstanceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RebootDbInstanceInputBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) force_failover: ::std::option::Option<bool>,
}
impl RebootDbInstanceInputBuilder {
    /// <p>The instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li>
    /// </ul>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>The instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing <code>DBInstance</code>.</p> </li>
    /// </ul>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>
    pub fn force_failover(mut self, input: bool) -> Self {
        self.force_failover = ::std::option::Option::Some(input);
        self
    }
    /// <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>
    pub fn set_force_failover(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_failover = input;
        self
    }
    /// <p> When <code>true</code>, the reboot is conducted through a Multi-AZ failover. </p>
    /// <p>Constraint: You can't specify <code>true</code> if the instance is not configured for Multi-AZ.</p>
    pub fn get_force_failover(&self) -> &::std::option::Option<bool> {
        &self.force_failover
    }
    /// Consumes the builder and constructs a [`RebootDbInstanceInput`](crate::operation::reboot_db_instance::RebootDbInstanceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::reboot_db_instance::RebootDbInstanceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::reboot_db_instance::RebootDbInstanceInput {
            db_instance_identifier: self.db_instance_identifier,
            force_failover: self.force_failover,
        })
    }
}
