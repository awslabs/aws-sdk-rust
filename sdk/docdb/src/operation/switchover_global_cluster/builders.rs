// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::switchover_global_cluster::_switchover_global_cluster_output::SwitchoverGlobalClusterOutputBuilder;

pub use crate::operation::switchover_global_cluster::_switchover_global_cluster_input::SwitchoverGlobalClusterInputBuilder;

impl crate::operation::switchover_global_cluster::builders::SwitchoverGlobalClusterInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.switchover_global_cluster();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SwitchoverGlobalCluster`.
///
/// <p>Switches over the specified secondary Amazon DocumentDB cluster to be the new primary Amazon DocumentDB cluster in the global database cluster.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SwitchoverGlobalClusterFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::switchover_global_cluster::builders::SwitchoverGlobalClusterInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterOutput,
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError,
    > for SwitchoverGlobalClusterFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterOutput,
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SwitchoverGlobalClusterFluentBuilder {
    /// Creates a new `SwitchoverGlobalCluster`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SwitchoverGlobalCluster as a reference.
    pub fn as_input(&self) -> &crate::operation::switchover_global_cluster::builders::SwitchoverGlobalClusterInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::switchover_global_cluster::SwitchoverGlobalCluster::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::switchover_global_cluster::SwitchoverGlobalCluster::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterOutput,
        crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the Amazon DocumentDB global database cluster to switch over. The identifier is the unique key assigned by the user when the cluster is created. In other words, it's the name of the global cluster. This parameter isn’t case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing global cluster (Amazon DocumentDB global database).</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn global_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.global_cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the Amazon DocumentDB global database cluster to switch over. The identifier is the unique key assigned by the user when the cluster is created. In other words, it's the name of the global cluster. This parameter isn’t case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing global cluster (Amazon DocumentDB global database).</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn set_global_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_global_cluster_identifier(input);
        self
    }
    /// <p>The identifier of the Amazon DocumentDB global database cluster to switch over. The identifier is the unique key assigned by the user when the cluster is created. In other words, it's the name of the global cluster. This parameter isn’t case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing global cluster (Amazon DocumentDB global database).</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn get_global_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_global_cluster_identifier()
    }
    /// <p>The identifier of the secondary Amazon DocumentDB cluster to promote to the new primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Amazon DocumentDB can locate the cluster in its Amazon Web Services region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing secondary cluster.</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn target_db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_db_cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the secondary Amazon DocumentDB cluster to promote to the new primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Amazon DocumentDB can locate the cluster in its Amazon Web Services region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing secondary cluster.</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn set_target_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_db_cluster_identifier(input);
        self
    }
    /// <p>The identifier of the secondary Amazon DocumentDB cluster to promote to the new primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Amazon DocumentDB can locate the cluster in its Amazon Web Services region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing secondary cluster.</p></li>
    /// <li>
    /// <p>Minimum length of 1. Maximum length of 255.</p></li>
    /// </ul>
    /// <p>Pattern: <code>[A-Za-z][0-9A-Za-z-:._]*</code></p>
    pub fn get_target_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_db_cluster_identifier()
    }
}
