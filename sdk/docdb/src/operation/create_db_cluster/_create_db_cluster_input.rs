// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input to <code>CreateDBCluster</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDbClusterInput {
    /// <p>A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35.</p></li>
    /// </ul>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster</code></p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the cluster parameter group to associate with this cluster.</p>
    pub db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of EC2 VPC security groups to associate with this cluster.</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A subnet group to associate with this cluster.</p>
    /// <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code></p>
    pub db_subnet_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database engine to be used for this cluster.</p>
    /// <p>Valid values: <code>docdb</code></p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The port number on which the instances in the cluster accept connections.</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The name of the master user for the cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be from 1 to 63 letters or numbers.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub master_username: ::std::option::Option<::std::string::String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p>Constraints: Must contain from 8 to 100 characters.</p>
    pub master_user_password: ::std::option::Option<::std::string::String>,
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub preferred_backup_window: ::std::option::Option<::std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be assigned to the cluster.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies whether the cluster is encrypted.</p>
    pub storage_encrypted: ::std::option::Option<bool>,
    /// <p>The KMS key identifier for an encrypted cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
    /// <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key.</p></li>
    /// </ul>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Not currently supported.</p>
    pub pre_signed_url: ::std::option::Option<::std::string::String>,
    /// <p>A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html"> Auditing Amazon DocumentDB Events</a> and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html"> Profiling Amazon DocumentDB Operations</a>.</p>
    pub enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>The cluster identifier of the new global cluster.</p>
    pub global_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The storage type to associate with the DB cluster.</p>
    /// <p>For information on storage types for Amazon DocumentDB clusters, see Cluster storage configurations in the <i>Amazon DocumentDB Developer Guide</i>.</p>
    /// <p>Valid values for storage type - <code>standard | iopt1</code></p>
    /// <p>Default value is <code>standard </code></p><note>
    /// <p>When you create an Amazon DocumentDB cluster with the storage type set to <code>iopt1</code>, the storage type is returned in the response. The storage type isn't returned when you set it to <code>standard</code>.</p>
    /// </note>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>Contains the scaling configuration of an Amazon DocumentDB Serverless cluster.</p>
    pub serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>Constraint: You can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p>
    pub manage_master_user_password: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub master_user_secret_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The network type of the cluster.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/vpc-clusters.html">DocumentDB clusters in a VPC</a> in the Amazon DocumentDB Developer Guide.</p>
    /// <p>Valid Values: <code>IPV4</code> | <code>DUAL</code></p>
    pub network_type: ::std::option::Option<::std::string::String>,
}
impl CreateDbClusterInput {
    /// <p>A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35.</p></li>
    /// </ul>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster</code></p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>The name of the cluster parameter group to associate with this cluster.</p>
    pub fn db_cluster_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_cluster_parameter_group_name.as_deref()
    }
    /// <p>A list of EC2 VPC security groups to associate with this cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A subnet group to associate with this cluster.</p>
    /// <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code></p>
    pub fn db_subnet_group_name(&self) -> ::std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>The name of the database engine to be used for this cluster.</p>
    /// <p>Valid values: <code>docdb</code></p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The port number on which the instances in the cluster accept connections.</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The name of the master user for the cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be from 1 to 63 letters or numbers.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn master_username(&self) -> ::std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p>Constraints: Must contain from 8 to 100 characters.</p>
    pub fn master_user_password(&self) -> ::std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn preferred_backup_window(&self) -> ::std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(&self) -> ::std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>The tags to be assigned to the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the cluster is encrypted.</p>
    pub fn storage_encrypted(&self) -> ::std::option::Option<bool> {
        self.storage_encrypted
    }
    /// <p>The KMS key identifier for an encrypted cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
    /// <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key.</p></li>
    /// </ul>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Not currently supported.</p>
    pub fn pre_signed_url(&self) -> ::std::option::Option<&str> {
        self.pre_signed_url.as_deref()
    }
    /// <p>A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html"> Auditing Amazon DocumentDB Events</a> and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html"> Profiling Amazon DocumentDB Operations</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_cloudwatch_logs_exports.is_none()`.
    pub fn enable_cloudwatch_logs_exports(&self) -> &[::std::string::String] {
        self.enable_cloudwatch_logs_exports.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>The cluster identifier of the new global cluster.</p>
    pub fn global_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.global_cluster_identifier.as_deref()
    }
    /// <p>The storage type to associate with the DB cluster.</p>
    /// <p>For information on storage types for Amazon DocumentDB clusters, see Cluster storage configurations in the <i>Amazon DocumentDB Developer Guide</i>.</p>
    /// <p>Valid values for storage type - <code>standard | iopt1</code></p>
    /// <p>Default value is <code>standard </code></p><note>
    /// <p>When you create an Amazon DocumentDB cluster with the storage type set to <code>iopt1</code>, the storage type is returned in the response. The storage type isn't returned when you set it to <code>standard</code>.</p>
    /// </note>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>Contains the scaling configuration of an Amazon DocumentDB Serverless cluster.</p>
    pub fn serverless_v2_scaling_configuration(&self) -> ::std::option::Option<&crate::types::ServerlessV2ScalingConfiguration> {
        self.serverless_v2_scaling_configuration.as_ref()
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>Constraint: You can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p>
    pub fn manage_master_user_password(&self) -> ::std::option::Option<bool> {
        self.manage_master_user_password
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn master_user_secret_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.master_user_secret_kms_key_id.as_deref()
    }
    /// <p>The network type of the cluster.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/vpc-clusters.html">DocumentDB clusters in a VPC</a> in the Amazon DocumentDB Developer Guide.</p>
    /// <p>Valid Values: <code>IPV4</code> | <code>DUAL</code></p>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
}
impl CreateDbClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterInput`](crate::operation::create_db_cluster::CreateDbClusterInput).
    pub fn builder() -> crate::operation::create_db_cluster::builders::CreateDbClusterInputBuilder {
        crate::operation::create_db_cluster::builders::CreateDbClusterInputBuilder::default()
    }
}

/// A builder for [`CreateDbClusterInput`](crate::operation::create_db_cluster::CreateDbClusterInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct CreateDbClusterInputBuilder {
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) db_subnet_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) master_username: ::std::option::Option<::std::string::String>,
    pub(crate) master_user_password: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_backup_window: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) storage_encrypted: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) pre_signed_url: ::std::option::Option<::std::string::String>,
    pub(crate) enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) global_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    pub(crate) manage_master_user_password: ::std::option::Option<bool>,
    pub(crate) master_user_secret_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
}
impl CreateDbClusterInputBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>A list of Amazon EC2 Availability Zones that instances in the cluster can be created in.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35.</p></li>
    /// </ul>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35.</p></li>
    /// </ul>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35.</p></li>
    /// </ul>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster</code></p>
    /// This field is required.
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster</code></p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster</code></p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>The name of the cluster parameter group to associate with this cluster.</p>
    pub fn db_cluster_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster parameter group to associate with this cluster.</p>
    pub fn set_db_cluster_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = input;
        self
    }
    /// <p>The name of the cluster parameter group to associate with this cluster.</p>
    pub fn get_db_cluster_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_parameter_group_name
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with this cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this cluster.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this cluster.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// <p>A subnet group to associate with this cluster.</p>
    /// <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code></p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_subnet_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A subnet group to associate with this cluster.</p>
    /// <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code></p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>A subnet group to associate with this cluster.</p>
    /// <p>Constraints: Must match the name of an existing <code>DBSubnetGroup</code>. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code></p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_subnet_group_name
    }
    /// <p>The name of the database engine to be used for this cluster.</p>
    /// <p>Valid values: <code>docdb</code></p>
    /// This field is required.
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database engine to be used for this cluster.</p>
    /// <p>Valid values: <code>docdb</code></p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the database engine to be used for this cluster.</p>
    /// <p>Valid values: <code>docdb</code></p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version number of the database engine to use. The <code>--engine-version</code> will default to the latest major engine version. For production workloads, we recommend explicitly declaring this parameter with the intended major engine version.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The port number on which the instances in the cluster accept connections.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number on which the instances in the cluster accept connections.</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number on which the instances in the cluster accept connections.</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The name of the master user for the cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be from 1 to 63 letters or numbers.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the master user for the cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be from 1 to 63 letters or numbers.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The name of the master user for the cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be from 1 to 63 letters or numbers.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Cannot be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_username
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p>Constraints: Must contain from 8 to 100 characters.</p>
    pub fn master_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_user_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p>Constraints: Must contain from 8 to 100 characters.</p>
    pub fn set_master_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except forward slash (/), double quote ("), or the "at" symbol (@).</p>
    /// <p>Constraints: Must contain from 8 to 100 characters.</p>
    pub fn get_master_user_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_user_password
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_backup_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_backup_window
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the cluster.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to be assigned to the cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be assigned to the cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Specifies whether the cluster is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the cluster is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>Specifies whether the cluster is encrypted.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        &self.storage_encrypted
    }
    /// <p>The KMS key identifier for an encrypted cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
    /// <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key.</p></li>
    /// </ul>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The KMS key identifier for an encrypted cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
    /// <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key.</p></li>
    /// </ul>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The KMS key identifier for an encrypted cluster.</p>
    /// <p>The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a cluster using the same Amazon Web Services account that owns the KMS encryption key that is used to encrypt the new cluster, you can use the KMS key alias instead of the ARN for the KMS encryption key.</p>
    /// <p>If an encryption key is not specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is <code>true</code>, Amazon DocumentDB uses your default encryption key.</p></li>
    /// </ul>
    /// <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Regions.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Not currently supported.</p>
    pub fn pre_signed_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pre_signed_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Not currently supported.</p>
    pub fn set_pre_signed_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pre_signed_url = input;
        self
    }
    /// <p>Not currently supported.</p>
    pub fn get_pre_signed_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.pre_signed_url
    }
    /// Appends an item to `enable_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html"> Auditing Amazon DocumentDB Events</a> and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html"> Profiling Amazon DocumentDB Operations</a>.</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enable_cloudwatch_logs_exports = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html"> Auditing Amazon DocumentDB Events</a> and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html"> Profiling Amazon DocumentDB Operations</a>.</p>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enable_cloudwatch_logs_exports = input;
        self
    }
    /// <p>A list of log types that need to be enabled for exporting to Amazon CloudWatch Logs. You can enable audit logs or profiler logs. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html"> Auditing Amazon DocumentDB Events</a> and <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html"> Profiling Amazon DocumentDB Operations</a>.</p>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enable_cloudwatch_logs_exports
    }
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether this cluster can be deleted. If <code>DeletionProtection</code> is enabled, the cluster cannot be deleted unless it is modified and <code>DeletionProtection</code> is disabled. <code>DeletionProtection</code> protects clusters from being accidentally deleted.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// <p>The cluster identifier of the new global cluster.</p>
    pub fn global_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.global_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The cluster identifier of the new global cluster.</p>
    pub fn set_global_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.global_cluster_identifier = input;
        self
    }
    /// <p>The cluster identifier of the new global cluster.</p>
    pub fn get_global_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.global_cluster_identifier
    }
    /// <p>The storage type to associate with the DB cluster.</p>
    /// <p>For information on storage types for Amazon DocumentDB clusters, see Cluster storage configurations in the <i>Amazon DocumentDB Developer Guide</i>.</p>
    /// <p>Valid values for storage type - <code>standard | iopt1</code></p>
    /// <p>Default value is <code>standard </code></p><note>
    /// <p>When you create an Amazon DocumentDB cluster with the storage type set to <code>iopt1</code>, the storage type is returned in the response. The storage type isn't returned when you set it to <code>standard</code>.</p>
    /// </note>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type to associate with the DB cluster.</p>
    /// <p>For information on storage types for Amazon DocumentDB clusters, see Cluster storage configurations in the <i>Amazon DocumentDB Developer Guide</i>.</p>
    /// <p>Valid values for storage type - <code>standard | iopt1</code></p>
    /// <p>Default value is <code>standard </code></p><note>
    /// <p>When you create an Amazon DocumentDB cluster with the storage type set to <code>iopt1</code>, the storage type is returned in the response. The storage type isn't returned when you set it to <code>standard</code>.</p>
    /// </note>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type to associate with the DB cluster.</p>
    /// <p>For information on storage types for Amazon DocumentDB clusters, see Cluster storage configurations in the <i>Amazon DocumentDB Developer Guide</i>.</p>
    /// <p>Valid values for storage type - <code>standard | iopt1</code></p>
    /// <p>Default value is <code>standard </code></p><note>
    /// <p>When you create an Amazon DocumentDB cluster with the storage type set to <code>iopt1</code>, the storage type is returned in the response. The storage type isn't returned when you set it to <code>standard</code>.</p>
    /// </note>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>Contains the scaling configuration of an Amazon DocumentDB Serverless cluster.</p>
    pub fn serverless_v2_scaling_configuration(mut self, input: crate::types::ServerlessV2ScalingConfiguration) -> Self {
        self.serverless_v2_scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the scaling configuration of an Amazon DocumentDB Serverless cluster.</p>
    pub fn set_serverless_v2_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>) -> Self {
        self.serverless_v2_scaling_configuration = input;
        self
    }
    /// <p>Contains the scaling configuration of an Amazon DocumentDB Serverless cluster.</p>
    pub fn get_serverless_v2_scaling_configuration(&self) -> &::std::option::Option<crate::types::ServerlessV2ScalingConfiguration> {
        &self.serverless_v2_scaling_configuration
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>Constraint: You can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p>
    pub fn manage_master_user_password(mut self, input: bool) -> Self {
        self.manage_master_user_password = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>Constraint: You can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p>
    pub fn set_manage_master_user_password(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manage_master_user_password = input;
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>Constraint: You can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p>
    pub fn get_manage_master_user_password(&self) -> &::std::option::Option<bool> {
        &self.manage_master_user_password
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn master_user_secret_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_user_secret_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn set_master_user_secret_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_user_secret_kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager. This setting is valid only if the master user password is managed by Amazon DocumentDB in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn get_master_user_secret_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_user_secret_kms_key_id
    }
    /// <p>The network type of the cluster.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/vpc-clusters.html">DocumentDB clusters in a VPC</a> in the Amazon DocumentDB Developer Guide.</p>
    /// <p>Valid Values: <code>IPV4</code> | <code>DUAL</code></p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network type of the cluster.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/vpc-clusters.html">DocumentDB clusters in a VPC</a> in the Amazon DocumentDB Developer Guide.</p>
    /// <p>Valid Values: <code>IPV4</code> | <code>DUAL</code></p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The network type of the cluster.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/vpc-clusters.html">DocumentDB clusters in a VPC</a> in the Amazon DocumentDB Developer Guide.</p>
    /// <p>Valid Values: <code>IPV4</code> | <code>DUAL</code></p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// Consumes the builder and constructs a [`CreateDbClusterInput`](crate::operation::create_db_cluster::CreateDbClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_db_cluster::CreateDbClusterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_db_cluster::CreateDbClusterInput {
            availability_zones: self.availability_zones,
            backup_retention_period: self.backup_retention_period,
            db_cluster_identifier: self.db_cluster_identifier,
            db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            vpc_security_group_ids: self.vpc_security_group_ids,
            db_subnet_group_name: self.db_subnet_group_name,
            engine: self.engine,
            engine_version: self.engine_version,
            port: self.port,
            master_username: self.master_username,
            master_user_password: self.master_user_password,
            preferred_backup_window: self.preferred_backup_window,
            preferred_maintenance_window: self.preferred_maintenance_window,
            tags: self.tags,
            storage_encrypted: self.storage_encrypted,
            kms_key_id: self.kms_key_id,
            pre_signed_url: self.pre_signed_url,
            enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
            deletion_protection: self.deletion_protection,
            global_cluster_identifier: self.global_cluster_identifier,
            storage_type: self.storage_type,
            serverless_v2_scaling_configuration: self.serverless_v2_scaling_configuration,
            manage_master_user_password: self.manage_master_user_password,
            master_user_secret_kms_key_id: self.master_user_secret_kms_key_id,
            network_type: self.network_type,
        })
    }
}
