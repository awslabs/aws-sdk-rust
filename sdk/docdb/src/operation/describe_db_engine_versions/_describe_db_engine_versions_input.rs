// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input to <code>DescribeDBEngineVersions</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDbEngineVersionsInput {
    /// <p>The database engine to return.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>3.6.0</code> </p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The name of a specific parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li>
    /// </ul>
    pub db_parameter_group_family: ::std::option::Option<::std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>
    pub default_only: ::std::option::Option<bool>,
    /// <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub list_supported_character_sets: ::std::option::Option<bool>,
    /// <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub list_supported_timezones: ::std::option::Option<bool>,
}
impl DescribeDbEngineVersionsInput {
    /// <p>The database engine to return.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>3.6.0</code> </p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li>
    /// </ul>
    pub fn db_parameter_group_family(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_family.as_deref()
    }
    /// <p>This parameter is not currently supported.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn default_only(&self) -> ::std::option::Option<bool> {
        self.default_only
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub fn list_supported_character_sets(&self) -> ::std::option::Option<bool> {
        self.list_supported_character_sets
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub fn list_supported_timezones(&self) -> ::std::option::Option<bool> {
        self.list_supported_timezones
    }
}
impl DescribeDbEngineVersionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
    pub fn builder() -> crate::operation::describe_db_engine_versions::builders::DescribeDbEngineVersionsInputBuilder {
        crate::operation::describe_db_engine_versions::builders::DescribeDbEngineVersionsInputBuilder::default()
    }
}

/// A builder for [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDbEngineVersionsInputBuilder {
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) db_parameter_group_family: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) default_only: ::std::option::Option<bool>,
    pub(crate) list_supported_character_sets: ::std::option::Option<bool>,
    pub(crate) list_supported_timezones: ::std::option::Option<bool>,
}
impl DescribeDbEngineVersionsInputBuilder {
    /// <p>The database engine to return.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine to return.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine to return.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>3.6.0</code> </p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>3.6.0</code> </p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>3.6.0</code> </p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li>
    /// </ul>
    pub fn db_parameter_group_family(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_family = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li>
    /// </ul>
    pub fn set_db_parameter_group_family(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_family = input;
        self
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If provided, must match an existing <code>DBParameterGroupFamily</code>.</p> </li>
    /// </ul>
    pub fn get_db_parameter_group_family(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_family
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter is not currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>This parameter is not currently supported.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>This parameter is not currently supported.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p> The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token (marker) is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn default_only(mut self, input: bool) -> Self {
        self.default_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn set_default_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_only = input;
        self
    }
    /// <p>Indicates that only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn get_default_only(&self) -> &::std::option::Option<bool> {
        &self.default_only
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub fn list_supported_character_sets(mut self, input: bool) -> Self {
        self.list_supported_character_sets = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub fn set_list_supported_character_sets(mut self, input: ::std::option::Option<bool>) -> Self {
        self.list_supported_character_sets = input;
        self
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version. </p>
    pub fn get_list_supported_character_sets(&self) -> &::std::option::Option<bool> {
        &self.list_supported_character_sets
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub fn list_supported_timezones(mut self, input: bool) -> Self {
        self.list_supported_timezones = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub fn set_list_supported_timezones(mut self, input: ::std::option::Option<bool>) -> Self {
        self.list_supported_timezones = input;
        self
    }
    /// <p>If this parameter is specified and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version. </p>
    pub fn get_list_supported_timezones(&self) -> &::std::option::Option<bool> {
        &self.list_supported_timezones
    }
    /// Consumes the builder and constructs a [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput {
            engine: self.engine,
            engine_version: self.engine_version,
            db_parameter_group_family: self.db_parameter_group_family,
            filters: self.filters,
            max_records: self.max_records,
            marker: self.marker,
            default_only: self.default_only,
            list_supported_character_sets: self.list_supported_character_sets,
            list_supported_timezones: self.list_supported_timezones,
        })
    }
}
