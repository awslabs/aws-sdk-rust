// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("SubscriptionName");
    if let Some(var_2) = &input.subscription_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("SourceIdentifier");
    if let Some(var_4) = &input.source_identifier {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceName");
    if let Some(var_6) = &input.resource_name {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tags");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(false, Some("Tag"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("ResourceIdentifier");
    if let Some(var_13) = &input.resource_identifier {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ApplyAction");
    if let Some(var_15) = &input.apply_action {
        scope_14.string(var_15);
    }
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("OptInType");
    if let Some(var_17) = &input.opt_in_type {
        scope_16.string(var_17);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_19) = &input.source_db_cluster_parameter_group_identifier {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_21) = &input.target_db_cluster_parameter_group_identifier {
        scope_20.string(var_21);
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_23) = &input.target_db_cluster_parameter_group_description {
        scope_22.string(var_23);
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("Tags");
    if let Some(var_25) = &input.tags {
        let mut list_27 = scope_24.start_list(false, Some("Tag"));
        for item_26 in var_25 {
            #[allow(unused_mut)]
            let mut entry_28 = list_27.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_28, item_26)?;
        }
        list_27.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_30) = &input.source_db_cluster_snapshot_identifier {
        scope_29.string(var_30);
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_32) = &input.target_db_cluster_snapshot_identifier {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("KmsKeyId");
    if let Some(var_34) = &input.kms_key_id {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("PreSignedUrl");
    if let Some(var_36) = &input.pre_signed_url {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("CopyTags");
    if let Some(var_38) = &input.copy_tags {
        scope_37.boolean(*var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("Tags");
    if let Some(var_40) = &input.tags {
        let mut list_42 = scope_39.start_list(false, Some("Tag"));
        for item_41 in var_40 {
            #[allow(unused_mut)]
            let mut entry_43 = list_42.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_43, item_41)?;
        }
        list_42.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("AvailabilityZones");
    if let Some(var_45) = &input.availability_zones {
        let mut list_47 = scope_44.start_list(false, Some("AvailabilityZone"));
        for item_46 in var_45 {
            #[allow(unused_mut)]
            let mut entry_48 = list_47.entry();
            entry_48.string(item_46);
        }
        list_47.finish();
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_50) = &input.backup_retention_period {
        scope_49.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("DBClusterIdentifier");
    if let Some(var_52) = &input.db_cluster_identifier {
        scope_51.string(var_52);
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_54) = &input.db_cluster_parameter_group_name {
        scope_53.string(var_54);
    }
    #[allow(unused_mut)]
    let mut scope_55 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_56) = &input.vpc_security_group_ids {
        let mut list_58 = scope_55.start_list(false, Some("VpcSecurityGroupId"));
        for item_57 in var_56 {
            #[allow(unused_mut)]
            let mut entry_59 = list_58.entry();
            entry_59.string(item_57);
        }
        list_58.finish();
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("DBSubnetGroupName");
    if let Some(var_61) = &input.db_subnet_group_name {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("Engine");
    if let Some(var_63) = &input.engine {
        scope_62.string(var_63);
    }
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("EngineVersion");
    if let Some(var_65) = &input.engine_version {
        scope_64.string(var_65);
    }
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("Port");
    if let Some(var_67) = &input.port {
        scope_66.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("MasterUsername");
    if let Some(var_69) = &input.master_username {
        scope_68.string(var_69);
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("MasterUserPassword");
    if let Some(var_71) = &input.master_user_password {
        scope_70.string(var_71);
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("PreferredBackupWindow");
    if let Some(var_73) = &input.preferred_backup_window {
        scope_72.string(var_73);
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_75) = &input.preferred_maintenance_window {
        scope_74.string(var_75);
    }
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("Tags");
    if let Some(var_77) = &input.tags {
        let mut list_79 = scope_76.start_list(false, Some("Tag"));
        for item_78 in var_77 {
            #[allow(unused_mut)]
            let mut entry_80 = list_79.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_80, item_78)?;
        }
        list_79.finish();
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("StorageEncrypted");
    if let Some(var_82) = &input.storage_encrypted {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("KmsKeyId");
    if let Some(var_84) = &input.kms_key_id {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("PreSignedUrl");
    if let Some(var_86) = &input.pre_signed_url {
        scope_85.string(var_86);
    }
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_88) = &input.enable_cloudwatch_logs_exports {
        let mut list_90 = scope_87.start_list(false, None);
        for item_89 in var_88 {
            #[allow(unused_mut)]
            let mut entry_91 = list_90.entry();
            entry_91.string(item_89);
        }
        list_90.finish();
    }
    #[allow(unused_mut)]
    let mut scope_92 = writer.prefix("DeletionProtection");
    if let Some(var_93) = &input.deletion_protection {
        scope_92.boolean(*var_93);
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_95) = &input.global_cluster_identifier {
        scope_94.string(var_95);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_96 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_97) = &input.db_cluster_parameter_group_name {
        scope_96.string(var_97);
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_99) = &input.db_parameter_group_family {
        scope_98.string(var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("Description");
    if let Some(var_101) = &input.description {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("Tags");
    if let Some(var_103) = &input.tags {
        let mut list_105 = scope_102.start_list(false, Some("Tag"));
        for item_104 in var_103 {
            #[allow(unused_mut)]
            let mut entry_106 = list_105.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_106, item_104)?;
        }
        list_105.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_108) = &input.db_cluster_snapshot_identifier {
        scope_107.string(var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("DBClusterIdentifier");
    if let Some(var_110) = &input.db_cluster_identifier {
        scope_109.string(var_110);
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("Tags");
    if let Some(var_112) = &input.tags {
        let mut list_114 = scope_111.start_list(false, Some("Tag"));
        for item_113 in var_112 {
            #[allow(unused_mut)]
            let mut entry_115 = list_114.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_115, item_113)?;
        }
        list_114.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_117) = &input.db_instance_identifier {
        scope_116.string(var_117);
    }
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("DBInstanceClass");
    if let Some(var_119) = &input.db_instance_class {
        scope_118.string(var_119);
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("Engine");
    if let Some(var_121) = &input.engine {
        scope_120.string(var_121);
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("AvailabilityZone");
    if let Some(var_123) = &input.availability_zone {
        scope_122.string(var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_125) = &input.preferred_maintenance_window {
        scope_124.string(var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_127) = &input.auto_minor_version_upgrade {
        scope_126.boolean(*var_127);
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("Tags");
    if let Some(var_129) = &input.tags {
        let mut list_131 = scope_128.start_list(false, Some("Tag"));
        for item_130 in var_129 {
            #[allow(unused_mut)]
            let mut entry_132 = list_131.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_132, item_130)?;
        }
        list_131.finish();
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("DBClusterIdentifier");
    if let Some(var_134) = &input.db_cluster_identifier {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PromotionTier");
    if let Some(var_136) = &input.promotion_tier {
        scope_135.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_138) = &input.enable_performance_insights {
        scope_137.boolean(*var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_140) = &input.performance_insights_kms_key_id {
        scope_139.string(var_140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("DBSubnetGroupName");
    if let Some(var_142) = &input.db_subnet_group_name {
        scope_141.string(var_142);
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_144) = &input.db_subnet_group_description {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("SubnetIds");
    if let Some(var_146) = &input.subnet_ids {
        let mut list_148 = scope_145.start_list(false, Some("SubnetIdentifier"));
        for item_147 in var_146 {
            #[allow(unused_mut)]
            let mut entry_149 = list_148.entry();
            entry_149.string(item_147);
        }
        list_148.finish();
    }
    #[allow(unused_mut)]
    let mut scope_150 = writer.prefix("Tags");
    if let Some(var_151) = &input.tags {
        let mut list_153 = scope_150.start_list(false, Some("Tag"));
        for item_152 in var_151 {
            #[allow(unused_mut)]
            let mut entry_154 = list_153.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_154, item_152)?;
        }
        list_153.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("SubscriptionName");
    if let Some(var_156) = &input.subscription_name {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("SnsTopicArn");
    if let Some(var_158) = &input.sns_topic_arn {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("SourceType");
    if let Some(var_160) = &input.source_type {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("EventCategories");
    if let Some(var_162) = &input.event_categories {
        let mut list_164 = scope_161.start_list(false, Some("EventCategory"));
        for item_163 in var_162 {
            #[allow(unused_mut)]
            let mut entry_165 = list_164.entry();
            entry_165.string(item_163);
        }
        list_164.finish();
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("SourceIds");
    if let Some(var_167) = &input.source_ids {
        let mut list_169 = scope_166.start_list(false, Some("SourceId"));
        for item_168 in var_167 {
            #[allow(unused_mut)]
            let mut entry_170 = list_169.entry();
            entry_170.string(item_168);
        }
        list_169.finish();
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("Enabled");
    if let Some(var_172) = &input.enabled {
        scope_171.boolean(*var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("Tags");
    if let Some(var_174) = &input.tags {
        let mut list_176 = scope_173.start_list(false, Some("Tag"));
        for item_175 in var_174 {
            #[allow(unused_mut)]
            let mut entry_177 = list_176.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_177, item_175)?;
        }
        list_176.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(
    input: &crate::input::CreateGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_179) = &input.global_cluster_identifier {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_181) = &input.source_db_cluster_identifier {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Engine");
    if let Some(var_183) = &input.engine {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("EngineVersion");
    if let Some(var_185) = &input.engine_version {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("DeletionProtection");
    if let Some(var_187) = &input.deletion_protection {
        scope_186.boolean(*var_187);
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("DatabaseName");
    if let Some(var_189) = &input.database_name {
        scope_188.string(var_189);
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("StorageEncrypted");
    if let Some(var_191) = &input.storage_encrypted {
        scope_190.boolean(*var_191);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("DBClusterIdentifier");
    if let Some(var_193) = &input.db_cluster_identifier {
        scope_192.string(var_193);
    }
    #[allow(unused_mut)]
    let mut scope_194 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_194.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_196) = &input.final_db_snapshot_identifier {
        scope_195.string(var_196);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_198) = &input.db_cluster_parameter_group_name {
        scope_197.string(var_198);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_200) = &input.db_cluster_snapshot_identifier {
        scope_199.string(var_200);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_202) = &input.db_instance_identifier {
        scope_201.string(var_202);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("DBSubnetGroupName");
    if let Some(var_204) = &input.db_subnet_group_name {
        scope_203.string(var_204);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("SubscriptionName");
    if let Some(var_206) = &input.subscription_name {
        scope_205.string(var_206);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(
    input: &crate::input::DeleteGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_208) = &input.global_cluster_identifier {
        scope_207.string(var_208);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_certificates(
    input: &crate::input::DescribeCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("CertificateIdentifier");
    if let Some(var_210) = &input.certificate_identifier {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Filters");
    if let Some(var_212) = &input.filters {
        let mut list_214 = scope_211.start_list(false, Some("Filter"));
        for item_213 in var_212 {
            #[allow(unused_mut)]
            let mut entry_215 = list_214.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_215, item_213)?;
        }
        list_214.finish();
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("MaxRecords");
    if let Some(var_217) = &input.max_records {
        scope_216.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_217).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("Marker");
    if let Some(var_219) = &input.marker {
        scope_218.string(var_219);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_221) = &input.db_cluster_parameter_group_name {
        scope_220.string(var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("Filters");
    if let Some(var_223) = &input.filters {
        let mut list_225 = scope_222.start_list(false, Some("Filter"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_226, item_224)?;
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("MaxRecords");
    if let Some(var_228) = &input.max_records {
        scope_227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_228).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("Marker");
    if let Some(var_230) = &input.marker {
        scope_229.string(var_230);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_232) = &input.db_cluster_parameter_group_name {
        scope_231.string(var_232);
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("Source");
    if let Some(var_234) = &input.source {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("Filters");
    if let Some(var_236) = &input.filters {
        let mut list_238 = scope_235.start_list(false, Some("Filter"));
        for item_237 in var_236 {
            #[allow(unused_mut)]
            let mut entry_239 = list_238.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_239, item_237)?;
        }
        list_238.finish();
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("MaxRecords");
    if let Some(var_241) = &input.max_records {
        scope_240.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_241).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("Marker");
    if let Some(var_243) = &input.marker {
        scope_242.string(var_243);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DBClusterIdentifier");
    if let Some(var_245) = &input.db_cluster_identifier {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("Filters");
    if let Some(var_247) = &input.filters {
        let mut list_249 = scope_246.start_list(false, Some("Filter"));
        for item_248 in var_247 {
            #[allow(unused_mut)]
            let mut entry_250 = list_249.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_250, item_248)?;
        }
        list_249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("MaxRecords");
    if let Some(var_252) = &input.max_records {
        scope_251.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_252).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("Marker");
    if let Some(var_254) = &input.marker {
        scope_253.string(var_254);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_256) = &input.db_cluster_snapshot_identifier {
        scope_255.string(var_256);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_257 = writer.prefix("DBClusterIdentifier");
    if let Some(var_258) = &input.db_cluster_identifier {
        scope_257.string(var_258);
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_260) = &input.db_cluster_snapshot_identifier {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("SnapshotType");
    if let Some(var_262) = &input.snapshot_type {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("Filters");
    if let Some(var_264) = &input.filters {
        let mut list_266 = scope_263.start_list(false, Some("Filter"));
        for item_265 in var_264 {
            #[allow(unused_mut)]
            let mut entry_267 = list_266.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_267, item_265)?;
        }
        list_266.finish();
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("MaxRecords");
    if let Some(var_269) = &input.max_records {
        scope_268.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_269).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("Marker");
    if let Some(var_271) = &input.marker {
        scope_270.string(var_271);
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_272.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_273.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("Engine");
    if let Some(var_275) = &input.engine {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("EngineVersion");
    if let Some(var_277) = &input.engine_version {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_279) = &input.db_parameter_group_family {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("Filters");
    if let Some(var_281) = &input.filters {
        let mut list_283 = scope_280.start_list(false, Some("Filter"));
        for item_282 in var_281 {
            #[allow(unused_mut)]
            let mut entry_284 = list_283.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_284, item_282)?;
        }
        list_283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("MaxRecords");
    if let Some(var_286) = &input.max_records {
        scope_285.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_286).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("Marker");
    if let Some(var_288) = &input.marker {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_289.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_291) = &input.list_supported_character_sets {
        scope_290.boolean(*var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("ListSupportedTimezones");
    if let Some(var_293) = &input.list_supported_timezones {
        scope_292.boolean(*var_293);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_295) = &input.db_instance_identifier {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Filters");
    if let Some(var_297) = &input.filters {
        let mut list_299 = scope_296.start_list(false, Some("Filter"));
        for item_298 in var_297 {
            #[allow(unused_mut)]
            let mut entry_300 = list_299.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_300, item_298)?;
        }
        list_299.finish();
    }
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("MaxRecords");
    if let Some(var_302) = &input.max_records {
        scope_301.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_302).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Marker");
    if let Some(var_304) = &input.marker {
        scope_303.string(var_304);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("DBSubnetGroupName");
    if let Some(var_306) = &input.db_subnet_group_name {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("Filters");
    if let Some(var_308) = &input.filters {
        let mut list_310 = scope_307.start_list(false, Some("Filter"));
        for item_309 in var_308 {
            #[allow(unused_mut)]
            let mut entry_311 = list_310.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_311, item_309)?;
        }
        list_310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("MaxRecords");
    if let Some(var_313) = &input.max_records {
        scope_312.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_313).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Marker");
    if let Some(var_315) = &input.marker {
        scope_314.string(var_315);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_317) = &input.db_parameter_group_family {
        scope_316.string(var_317);
    }
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("Filters");
    if let Some(var_319) = &input.filters {
        let mut list_321 = scope_318.start_list(false, Some("Filter"));
        for item_320 in var_319 {
            #[allow(unused_mut)]
            let mut entry_322 = list_321.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_322, item_320)?;
        }
        list_321.finish();
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("MaxRecords");
    if let Some(var_324) = &input.max_records {
        scope_323.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("Marker");
    if let Some(var_326) = &input.marker {
        scope_325.string(var_326);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("SourceType");
    if let Some(var_328) = &input.source_type {
        scope_327.string(var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("Filters");
    if let Some(var_330) = &input.filters {
        let mut list_332 = scope_329.start_list(false, Some("Filter"));
        for item_331 in var_330 {
            #[allow(unused_mut)]
            let mut entry_333 = list_332.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_333, item_331)?;
        }
        list_332.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("SourceIdentifier");
    if let Some(var_335) = &input.source_identifier {
        scope_334.string(var_335);
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("SourceType");
    if let Some(var_337) = &input.source_type {
        scope_336.string(var_337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("StartTime");
    if let Some(var_339) = &input.start_time {
        scope_338.date_time(var_339, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("EndTime");
    if let Some(var_341) = &input.end_time {
        scope_340.date_time(var_341, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_342 = writer.prefix("Duration");
    if let Some(var_343) = &input.duration {
        scope_342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_344 = writer.prefix("EventCategories");
    if let Some(var_345) = &input.event_categories {
        let mut list_347 = scope_344.start_list(false, Some("EventCategory"));
        for item_346 in var_345 {
            #[allow(unused_mut)]
            let mut entry_348 = list_347.entry();
            entry_348.string(item_346);
        }
        list_347.finish();
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("Filters");
    if let Some(var_350) = &input.filters {
        let mut list_352 = scope_349.start_list(false, Some("Filter"));
        for item_351 in var_350 {
            #[allow(unused_mut)]
            let mut entry_353 = list_352.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_353, item_351)?;
        }
        list_352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("MaxRecords");
    if let Some(var_355) = &input.max_records {
        scope_354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("Marker");
    if let Some(var_357) = &input.marker {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("SubscriptionName");
    if let Some(var_359) = &input.subscription_name {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("Filters");
    if let Some(var_361) = &input.filters {
        let mut list_363 = scope_360.start_list(false, Some("Filter"));
        for item_362 in var_361 {
            #[allow(unused_mut)]
            let mut entry_364 = list_363.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_364, item_362)?;
        }
        list_363.finish();
    }
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("MaxRecords");
    if let Some(var_366) = &input.max_records {
        scope_365.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_366).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("Marker");
    if let Some(var_368) = &input.marker {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(
    input: &crate::input::DescribeGlobalClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_370) = &input.global_cluster_identifier {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("Filters");
    if let Some(var_372) = &input.filters {
        let mut list_374 = scope_371.start_list(false, Some("Filter"));
        for item_373 in var_372 {
            #[allow(unused_mut)]
            let mut entry_375 = list_374.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_375, item_373)?;
        }
        list_374.finish();
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("MaxRecords");
    if let Some(var_377) = &input.max_records {
        scope_376.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_377).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("Marker");
    if let Some(var_379) = &input.marker {
        scope_378.string(var_379);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("Engine");
    if let Some(var_381) = &input.engine {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("EngineVersion");
    if let Some(var_383) = &input.engine_version {
        scope_382.string(var_383);
    }
    #[allow(unused_mut)]
    let mut scope_384 = writer.prefix("DBInstanceClass");
    if let Some(var_385) = &input.db_instance_class {
        scope_384.string(var_385);
    }
    #[allow(unused_mut)]
    let mut scope_386 = writer.prefix("LicenseModel");
    if let Some(var_387) = &input.license_model {
        scope_386.string(var_387);
    }
    #[allow(unused_mut)]
    let mut scope_388 = writer.prefix("Vpc");
    if let Some(var_389) = &input.vpc {
        scope_388.boolean(*var_389);
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("Filters");
    if let Some(var_391) = &input.filters {
        let mut list_393 = scope_390.start_list(false, Some("Filter"));
        for item_392 in var_391 {
            #[allow(unused_mut)]
            let mut entry_394 = list_393.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_394, item_392)?;
        }
        list_393.finish();
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("MaxRecords");
    if let Some(var_396) = &input.max_records {
        scope_395.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("Marker");
    if let Some(var_398) = &input.marker {
        scope_397.string(var_398);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("ResourceIdentifier");
    if let Some(var_400) = &input.resource_identifier {
        scope_399.string(var_400);
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Filters");
    if let Some(var_402) = &input.filters {
        let mut list_404 = scope_401.start_list(false, Some("Filter"));
        for item_403 in var_402 {
            #[allow(unused_mut)]
            let mut entry_405 = list_404.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_405, item_403)?;
        }
        list_404.finish();
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("Marker");
    if let Some(var_407) = &input.marker {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("MaxRecords");
    if let Some(var_409) = &input.max_records {
        scope_408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("DBClusterIdentifier");
    if let Some(var_411) = &input.db_cluster_identifier {
        scope_410.string(var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_413) = &input.target_db_instance_identifier {
        scope_412.string(var_413);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("ResourceName");
    if let Some(var_415) = &input.resource_name {
        scope_414.string(var_415);
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("Filters");
    if let Some(var_417) = &input.filters {
        let mut list_419 = scope_416.start_list(false, Some("Filter"));
        for item_418 in var_417 {
            #[allow(unused_mut)]
            let mut entry_420 = list_419.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_420, item_418)?;
        }
        list_419.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DBClusterIdentifier");
    if let Some(var_422) = &input.db_cluster_identifier {
        scope_421.string(var_422);
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_424) = &input.new_db_cluster_identifier {
        scope_423.string(var_424);
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_425.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_427) = &input.backup_retention_period {
        scope_426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_429) = &input.db_cluster_parameter_group_name {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_431) = &input.vpc_security_group_ids {
        let mut list_433 = scope_430.start_list(false, Some("VpcSecurityGroupId"));
        for item_432 in var_431 {
            #[allow(unused_mut)]
            let mut entry_434 = list_433.entry();
            entry_434.string(item_432);
        }
        list_433.finish();
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("Port");
    if let Some(var_436) = &input.port {
        scope_435.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("MasterUserPassword");
    if let Some(var_438) = &input.master_user_password {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("PreferredBackupWindow");
    if let Some(var_440) = &input.preferred_backup_window {
        scope_439.string(var_440);
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_442) = &input.preferred_maintenance_window {
        scope_441.string(var_442);
    }
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_444) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_443, var_444,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("EngineVersion");
    if let Some(var_446) = &input.engine_version {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("DeletionProtection");
    if let Some(var_448) = &input.deletion_protection {
        scope_447.boolean(*var_448);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_450) = &input.db_cluster_parameter_group_name {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("Parameters");
    if let Some(var_452) = &input.parameters {
        let mut list_454 = scope_451.start_list(false, Some("Parameter"));
        for item_453 in var_452 {
            #[allow(unused_mut)]
            let mut entry_455 = list_454.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_455, item_453)?;
        }
        list_454.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_456 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_457) = &input.db_cluster_snapshot_identifier {
        scope_456.string(var_457);
    }
    #[allow(unused_mut)]
    let mut scope_458 = writer.prefix("AttributeName");
    if let Some(var_459) = &input.attribute_name {
        scope_458.string(var_459);
    }
    #[allow(unused_mut)]
    let mut scope_460 = writer.prefix("ValuesToAdd");
    if let Some(var_461) = &input.values_to_add {
        let mut list_463 = scope_460.start_list(false, Some("AttributeValue"));
        for item_462 in var_461 {
            #[allow(unused_mut)]
            let mut entry_464 = list_463.entry();
            entry_464.string(item_462);
        }
        list_463.finish();
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("ValuesToRemove");
    if let Some(var_466) = &input.values_to_remove {
        let mut list_468 = scope_465.start_list(false, Some("AttributeValue"));
        for item_467 in var_466 {
            #[allow(unused_mut)]
            let mut entry_469 = list_468.entry();
            entry_469.string(item_467);
        }
        list_468.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_471) = &input.db_instance_identifier {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("DBInstanceClass");
    if let Some(var_473) = &input.db_instance_class {
        scope_472.string(var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_474.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_476) = &input.preferred_maintenance_window {
        scope_475.string(var_476);
    }
    #[allow(unused_mut)]
    let mut scope_477 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_478) = &input.auto_minor_version_upgrade {
        scope_477.boolean(*var_478);
    }
    #[allow(unused_mut)]
    let mut scope_479 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_480) = &input.new_db_instance_identifier {
        scope_479.string(var_480);
    }
    #[allow(unused_mut)]
    let mut scope_481 = writer.prefix("CACertificateIdentifier");
    if let Some(var_482) = &input.ca_certificate_identifier {
        scope_481.string(var_482);
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("PromotionTier");
    if let Some(var_484) = &input.promotion_tier {
        scope_483.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_484).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_486) = &input.enable_performance_insights {
        scope_485.boolean(*var_486);
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_488) = &input.performance_insights_kms_key_id {
        scope_487.string(var_488);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("DBSubnetGroupName");
    if let Some(var_490) = &input.db_subnet_group_name {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_492) = &input.db_subnet_group_description {
        scope_491.string(var_492);
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("SubnetIds");
    if let Some(var_494) = &input.subnet_ids {
        let mut list_496 = scope_493.start_list(false, Some("SubnetIdentifier"));
        for item_495 in var_494 {
            #[allow(unused_mut)]
            let mut entry_497 = list_496.entry();
            entry_497.string(item_495);
        }
        list_496.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("SubscriptionName");
    if let Some(var_499) = &input.subscription_name {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("SnsTopicArn");
    if let Some(var_501) = &input.sns_topic_arn {
        scope_500.string(var_501);
    }
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("SourceType");
    if let Some(var_503) = &input.source_type {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("EventCategories");
    if let Some(var_505) = &input.event_categories {
        let mut list_507 = scope_504.start_list(false, Some("EventCategory"));
        for item_506 in var_505 {
            #[allow(unused_mut)]
            let mut entry_508 = list_507.entry();
            entry_508.string(item_506);
        }
        list_507.finish();
    }
    #[allow(unused_mut)]
    let mut scope_509 = writer.prefix("Enabled");
    if let Some(var_510) = &input.enabled {
        scope_509.boolean(*var_510);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(
    input: &crate::input::ModifyGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_512) = &input.global_cluster_identifier {
        scope_511.string(var_512);
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_514) = &input.new_global_cluster_identifier {
        scope_513.string(var_514);
    }
    #[allow(unused_mut)]
    let mut scope_515 = writer.prefix("DeletionProtection");
    if let Some(var_516) = &input.deletion_protection {
        scope_515.boolean(*var_516);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_518) = &input.db_instance_identifier {
        scope_517.string(var_518);
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("ForceFailover");
    if let Some(var_520) = &input.force_failover {
        scope_519.boolean(*var_520);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(
    input: &crate::input::RemoveFromGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_522) = &input.global_cluster_identifier {
        scope_521.string(var_522);
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("DbClusterIdentifier");
    if let Some(var_524) = &input.db_cluster_identifier {
        scope_523.string(var_524);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_525 = writer.prefix("SubscriptionName");
    if let Some(var_526) = &input.subscription_name {
        scope_525.string(var_526);
    }
    #[allow(unused_mut)]
    let mut scope_527 = writer.prefix("SourceIdentifier");
    if let Some(var_528) = &input.source_identifier {
        scope_527.string(var_528);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_529 = writer.prefix("ResourceName");
    if let Some(var_530) = &input.resource_name {
        scope_529.string(var_530);
    }
    #[allow(unused_mut)]
    let mut scope_531 = writer.prefix("TagKeys");
    if let Some(var_532) = &input.tag_keys {
        let mut list_534 = scope_531.start_list(false, None);
        for item_533 in var_532 {
            #[allow(unused_mut)]
            let mut entry_535 = list_534.entry();
            entry_535.string(item_533);
        }
        list_534.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_537) = &input.db_cluster_parameter_group_name {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_538.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_539 = writer.prefix("Parameters");
    if let Some(var_540) = &input.parameters {
        let mut list_542 = scope_539.start_list(false, Some("Parameter"));
        for item_541 in var_540 {
            #[allow(unused_mut)]
            let mut entry_543 = list_542.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_543, item_541)?;
        }
        list_542.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("AvailabilityZones");
    if let Some(var_545) = &input.availability_zones {
        let mut list_547 = scope_544.start_list(false, Some("AvailabilityZone"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            entry_548.string(item_546);
        }
        list_547.finish();
    }
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("DBClusterIdentifier");
    if let Some(var_550) = &input.db_cluster_identifier {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("SnapshotIdentifier");
    if let Some(var_552) = &input.snapshot_identifier {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("Engine");
    if let Some(var_554) = &input.engine {
        scope_553.string(var_554);
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("EngineVersion");
    if let Some(var_556) = &input.engine_version {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("Port");
    if let Some(var_558) = &input.port {
        scope_557.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_558).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("DBSubnetGroupName");
    if let Some(var_560) = &input.db_subnet_group_name {
        scope_559.string(var_560);
    }
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_562) = &input.vpc_security_group_ids {
        let mut list_564 = scope_561.start_list(false, Some("VpcSecurityGroupId"));
        for item_563 in var_562 {
            #[allow(unused_mut)]
            let mut entry_565 = list_564.entry();
            entry_565.string(item_563);
        }
        list_564.finish();
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Tags");
    if let Some(var_567) = &input.tags {
        let mut list_569 = scope_566.start_list(false, Some("Tag"));
        for item_568 in var_567 {
            #[allow(unused_mut)]
            let mut entry_570 = list_569.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_570, item_568)?;
        }
        list_569.finish();
    }
    #[allow(unused_mut)]
    let mut scope_571 = writer.prefix("KmsKeyId");
    if let Some(var_572) = &input.kms_key_id {
        scope_571.string(var_572);
    }
    #[allow(unused_mut)]
    let mut scope_573 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_574) = &input.enable_cloudwatch_logs_exports {
        let mut list_576 = scope_573.start_list(false, None);
        for item_575 in var_574 {
            #[allow(unused_mut)]
            let mut entry_577 = list_576.entry();
            entry_577.string(item_575);
        }
        list_576.finish();
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("DeletionProtection");
    if let Some(var_579) = &input.deletion_protection {
        scope_578.boolean(*var_579);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("DBClusterIdentifier");
    if let Some(var_581) = &input.db_cluster_identifier {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_583) = &input.source_db_cluster_identifier {
        scope_582.string(var_583);
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("RestoreToTime");
    if let Some(var_585) = &input.restore_to_time {
        scope_584.date_time(var_585, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_586.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("Port");
    if let Some(var_588) = &input.port {
        scope_587.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_588).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_589 = writer.prefix("DBSubnetGroupName");
    if let Some(var_590) = &input.db_subnet_group_name {
        scope_589.string(var_590);
    }
    #[allow(unused_mut)]
    let mut scope_591 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_592) = &input.vpc_security_group_ids {
        let mut list_594 = scope_591.start_list(false, Some("VpcSecurityGroupId"));
        for item_593 in var_592 {
            #[allow(unused_mut)]
            let mut entry_595 = list_594.entry();
            entry_595.string(item_593);
        }
        list_594.finish();
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("Tags");
    if let Some(var_597) = &input.tags {
        let mut list_599 = scope_596.start_list(false, Some("Tag"));
        for item_598 in var_597 {
            #[allow(unused_mut)]
            let mut entry_600 = list_599.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_600, item_598)?;
        }
        list_599.finish();
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("KmsKeyId");
    if let Some(var_602) = &input.kms_key_id {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_604) = &input.enable_cloudwatch_logs_exports {
        let mut list_606 = scope_603.start_list(false, None);
        for item_605 in var_604 {
            #[allow(unused_mut)]
            let mut entry_607 = list_606.entry();
            entry_607.string(item_605);
        }
        list_606.finish();
    }
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("DeletionProtection");
    if let Some(var_609) = &input.deletion_protection {
        scope_608.boolean(*var_609);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("DBClusterIdentifier");
    if let Some(var_611) = &input.db_cluster_identifier {
        scope_610.string(var_611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("DBClusterIdentifier");
    if let Some(var_613) = &input.db_cluster_identifier {
        scope_612.string(var_613);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
