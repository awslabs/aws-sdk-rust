// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_token_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTokenInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.client_id {
        object.key("clientId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_secret {
        object.key("clientSecret").string(var_2.as_str());
    }
    if let Some(var_3) = &input.code {
        object.key("code").string(var_3.as_str());
    }
    if let Some(var_4) = &input.device_code {
        object.key("deviceCode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.grant_type {
        object.key("grantType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.redirect_uri {
        object.key("redirectUri").string(var_6.as_str());
    }
    if let Some(var_7) = &input.refresh_token {
        object.key("refreshToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.scope {
        let mut array_9 = object.key("scope").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterClientInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.client_name {
        object.key("clientName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.client_type {
        object.key("clientType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.scopes {
        let mut array_14 = object.key("scopes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_device_authorization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDeviceAuthorizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.client_id {
        object.key("clientId").string(var_16.as_str());
    }
    if let Some(var_17) = &input.client_secret {
        object.key("clientSecret").string(var_17.as_str());
    }
    if let Some(var_18) = &input.start_url {
        object.key("startUrl").string(var_18.as_str());
    }
    Ok(())
}
