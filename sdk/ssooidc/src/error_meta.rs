// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccessDeniedException(crate::error::AccessDeniedException),
    AuthorizationPendingException(crate::error::AuthorizationPendingException),
    ExpiredTokenException(crate::error::ExpiredTokenException),
    InternalServerException(crate::error::InternalServerException),
    InvalidClientException(crate::error::InvalidClientException),
    InvalidClientMetadataException(crate::error::InvalidClientMetadataException),
    InvalidGrantException(crate::error::InvalidGrantException),
    InvalidRequestException(crate::error::InvalidRequestException),
    InvalidScopeException(crate::error::InvalidScopeException),
    SlowDownException(crate::error::SlowDownException),
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    UnsupportedGrantTypeException(crate::error::UnsupportedGrantTypeException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AuthorizationPendingException(inner) => inner.fmt(f),
            Error::ExpiredTokenException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidClientException(inner) => inner.fmt(f),
            Error::InvalidClientMetadataException(inner) => inner.fmt(f),
            Error::InvalidGrantException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::InvalidScopeException(inner) => inner.fmt(f),
            Error::SlowDownException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::UnsupportedGrantTypeException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTokenErrorKind::AccessDeniedException(inner) => {
                    Error::AccessDeniedException(inner)
                }
                crate::error::CreateTokenErrorKind::AuthorizationPendingException(inner) => {
                    Error::AuthorizationPendingException(inner)
                }
                crate::error::CreateTokenErrorKind::ExpiredTokenException(inner) => {
                    Error::ExpiredTokenException(inner)
                }
                crate::error::CreateTokenErrorKind::InternalServerException(inner) => {
                    Error::InternalServerException(inner)
                }
                crate::error::CreateTokenErrorKind::InvalidClientException(inner) => {
                    Error::InvalidClientException(inner)
                }
                crate::error::CreateTokenErrorKind::InvalidGrantException(inner) => {
                    Error::InvalidGrantException(inner)
                }
                crate::error::CreateTokenErrorKind::InvalidRequestException(inner) => {
                    Error::InvalidRequestException(inner)
                }
                crate::error::CreateTokenErrorKind::InvalidScopeException(inner) => {
                    Error::InvalidScopeException(inner)
                }
                crate::error::CreateTokenErrorKind::SlowDownException(inner) => {
                    Error::SlowDownException(inner)
                }
                crate::error::CreateTokenErrorKind::UnauthorizedClientException(inner) => {
                    Error::UnauthorizedClientException(inner)
                }
                crate::error::CreateTokenErrorKind::UnsupportedGrantTypeException(inner) => {
                    Error::UnsupportedGrantTypeException(inner)
                }
                crate::error::CreateTokenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RegisterClientError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RegisterClientError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RegisterClientErrorKind::InternalServerException(inner) => {
                    Error::InternalServerException(inner)
                }
                crate::error::RegisterClientErrorKind::InvalidClientMetadataException(inner) => {
                    Error::InvalidClientMetadataException(inner)
                }
                crate::error::RegisterClientErrorKind::InvalidRequestException(inner) => {
                    Error::InvalidRequestException(inner)
                }
                crate::error::RegisterClientErrorKind::InvalidScopeException(inner) => {
                    Error::InvalidScopeException(inner)
                }
                crate::error::RegisterClientErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartDeviceAuthorizationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::StartDeviceAuthorizationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartDeviceAuthorizationErrorKind::InternalServerException(inner) => {
                    Error::InternalServerException(inner)
                }
                crate::error::StartDeviceAuthorizationErrorKind::InvalidClientException(inner) => {
                    Error::InvalidClientException(inner)
                }
                crate::error::StartDeviceAuthorizationErrorKind::InvalidRequestException(inner) => {
                    Error::InvalidRequestException(inner)
                }
                crate::error::StartDeviceAuthorizationErrorKind::SlowDownException(inner) => {
                    Error::SlowDownException(inner)
                }
                crate::error::StartDeviceAuthorizationErrorKind::UnauthorizedClientException(
                    inner,
                ) => Error::UnauthorizedClientException(inner),
                crate::error::StartDeviceAuthorizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
