// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AclAlreadyExistsFault(crate::error::AclAlreadyExistsFault),
    /// <p></p>
    AclNotFoundFault(crate::error::AclNotFoundFault),
    /// <p></p>
    AclQuotaExceededFault(crate::error::AclQuotaExceededFault),
    /// <p></p>
    ApiCallRateForCustomerExceededFault(crate::error::ApiCallRateForCustomerExceededFault),
    /// <p></p>
    ClusterAlreadyExistsFault(crate::error::ClusterAlreadyExistsFault),
    /// <p></p>
    ClusterNotFoundFault(crate::error::ClusterNotFoundFault),
    /// <p></p>
    ClusterQuotaForCustomerExceededFault(crate::error::ClusterQuotaForCustomerExceededFault),
    /// <p></p>
    DefaultUserRequired(crate::error::DefaultUserRequired),
    /// <p></p>
    DuplicateUserNameFault(crate::error::DuplicateUserNameFault),
    /// <p></p>
    InsufficientClusterCapacityFault(crate::error::InsufficientClusterCapacityFault),
    /// <p></p>
    InvalidAclStateFault(crate::error::InvalidAclStateFault),
    /// <p></p>
    InvalidArnFault(crate::error::InvalidArnFault),
    /// <p></p>
    InvalidClusterStateFault(crate::error::InvalidClusterStateFault),
    /// <p></p>
    InvalidCredentialsException(crate::error::InvalidCredentialsException),
    /// <p></p>
    InvalidKmsKeyFault(crate::error::InvalidKmsKeyFault),
    /// <p></p>
    InvalidNodeStateFault(crate::error::InvalidNodeStateFault),
    /// <p></p>
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    /// <p></p>
    InvalidParameterGroupStateFault(crate::error::InvalidParameterGroupStateFault),
    /// <p></p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p></p>
    InvalidSnapshotStateFault(crate::error::InvalidSnapshotStateFault),
    /// <p></p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p></p>
    InvalidUserStateFault(crate::error::InvalidUserStateFault),
    /// <p></p>
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    /// <p></p>
    NoOperationFault(crate::error::NoOperationFault),
    /// <p></p>
    NodeQuotaForClusterExceededFault(crate::error::NodeQuotaForClusterExceededFault),
    /// <p></p>
    NodeQuotaForCustomerExceededFault(crate::error::NodeQuotaForCustomerExceededFault),
    /// <p></p>
    ParameterGroupAlreadyExistsFault(crate::error::ParameterGroupAlreadyExistsFault),
    /// <p></p>
    ParameterGroupNotFoundFault(crate::error::ParameterGroupNotFoundFault),
    /// <p></p>
    ParameterGroupQuotaExceededFault(crate::error::ParameterGroupQuotaExceededFault),
    /// <p>You already have a reservation with the given identifier.</p>
    ReservedNodeAlreadyExistsFault(crate::error::ReservedNodeAlreadyExistsFault),
    /// <p>The requested node does not exist.</p>
    ReservedNodeNotFoundFault(crate::error::ReservedNodeNotFoundFault),
    /// <p>The request cannot be processed because it would exceed the user's node quota.</p>
    ReservedNodeQuotaExceededFault(crate::error::ReservedNodeQuotaExceededFault),
    /// <p>The requested node offering does not exist. </p>
    ReservedNodesOfferingNotFoundFault(crate::error::ReservedNodesOfferingNotFoundFault),
    /// <p></p>
    ServiceLinkedRoleNotFoundFault(crate::error::ServiceLinkedRoleNotFoundFault),
    /// <p></p>
    ServiceUpdateNotFoundFault(crate::error::ServiceUpdateNotFoundFault),
    /// <p></p>
    ShardNotFoundFault(crate::error::ShardNotFoundFault),
    /// <p></p>
    ShardsPerClusterQuotaExceededFault(crate::error::ShardsPerClusterQuotaExceededFault),
    /// <p></p>
    SnapshotAlreadyExistsFault(crate::error::SnapshotAlreadyExistsFault),
    /// <p></p>
    SnapshotNotFoundFault(crate::error::SnapshotNotFoundFault),
    /// <p></p>
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    /// <p></p>
    SubnetGroupAlreadyExistsFault(crate::error::SubnetGroupAlreadyExistsFault),
    /// <p></p>
    SubnetGroupInUseFault(crate::error::SubnetGroupInUseFault),
    /// <p></p>
    SubnetGroupNotFoundFault(crate::error::SubnetGroupNotFoundFault),
    /// <p></p>
    SubnetGroupQuotaExceededFault(crate::error::SubnetGroupQuotaExceededFault),
    /// <p></p>
    SubnetInUse(crate::error::SubnetInUse),
    /// <p></p>
    SubnetNotAllowedFault(crate::error::SubnetNotAllowedFault),
    /// <p></p>
    SubnetQuotaExceededFault(crate::error::SubnetQuotaExceededFault),
    /// <p></p>
    TagNotFoundFault(crate::error::TagNotFoundFault),
    /// <p></p>
    TagQuotaPerResourceExceeded(crate::error::TagQuotaPerResourceExceeded),
    /// <p></p>
    TestFailoverNotAvailableFault(crate::error::TestFailoverNotAvailableFault),
    /// <p></p>
    UserAlreadyExistsFault(crate::error::UserAlreadyExistsFault),
    /// <p></p>
    UserNotFoundFault(crate::error::UserNotFoundFault),
    /// <p></p>
    UserQuotaExceededFault(crate::error::UserQuotaExceededFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AclAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AclNotFoundFault(inner) => inner.fmt(f),
            Error::AclQuotaExceededFault(inner) => inner.fmt(f),
            Error::ApiCallRateForCustomerExceededFault(inner) => inner.fmt(f),
            Error::ClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ClusterNotFoundFault(inner) => inner.fmt(f),
            Error::ClusterQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::DefaultUserRequired(inner) => inner.fmt(f),
            Error::DuplicateUserNameFault(inner) => inner.fmt(f),
            Error::InsufficientClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidAclStateFault(inner) => inner.fmt(f),
            Error::InvalidArnFault(inner) => inner.fmt(f),
            Error::InvalidClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidCredentialsException(inner) => inner.fmt(f),
            Error::InvalidKmsKeyFault(inner) => inner.fmt(f),
            Error::InvalidNodeStateFault(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidUserStateFault(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::NoOperationFault(inner) => inner.fmt(f),
            Error::NodeQuotaForClusterExceededFault(inner) => inner.fmt(f),
            Error::NodeQuotaForCustomerExceededFault(inner) => inner.fmt(f),
            Error::ParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::ParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedNodeAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedNodeNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedNodeQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedNodesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceLinkedRoleNotFoundFault(inner) => inner.fmt(f),
            Error::ServiceUpdateNotFoundFault(inner) => inner.fmt(f),
            Error::ShardNotFoundFault(inner) => inner.fmt(f),
            Error::ShardsPerClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::SnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::SubnetGroupInUseFault(inner) => inner.fmt(f),
            Error::SubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::SubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::SubnetInUse(inner) => inner.fmt(f),
            Error::SubnetNotAllowedFault(inner) => inner.fmt(f),
            Error::SubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::TagNotFoundFault(inner) => inner.fmt(f),
            Error::TagQuotaPerResourceExceeded(inner) => inner.fmt(f),
            Error::TestFailoverNotAvailableFault(inner) => inner.fmt(f),
            Error::UserAlreadyExistsFault(inner) => inner.fmt(f),
            Error::UserNotFoundFault(inner) => inner.fmt(f),
            Error::UserQuotaExceededFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchUpdateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchUpdateClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchUpdateClusterError> for Error {
    fn from(err: crate::error::BatchUpdateClusterError) -> Self {
        match err {
            crate::error::BatchUpdateClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::BatchUpdateClusterError::ServiceUpdateNotFoundFault(inner) => {
                Error::ServiceUpdateNotFoundFault(inner)
            }
            crate::error::BatchUpdateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CopySnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopySnapshotError> for Error {
    fn from(err: crate::error::CopySnapshotError) -> Self {
        match err {
            crate::error::CopySnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CopySnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CopySnapshotError::InvalidSnapshotStateFault(inner) => {
                Error::InvalidSnapshotStateFault(inner)
            }
            crate::error::CopySnapshotError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::CopySnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopySnapshotError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CopySnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateACLError> for Error {
    fn from(err: crate::error::CreateACLError) -> Self {
        match err {
            crate::error::CreateACLError::AclAlreadyExistsFault(inner) => {
                Error::AclAlreadyExistsFault(inner)
            }
            crate::error::CreateACLError::AclQuotaExceededFault(inner) => {
                Error::AclQuotaExceededFault(inner)
            }
            crate::error::CreateACLError::DefaultUserRequired(inner) => {
                Error::DefaultUserRequired(inner)
            }
            crate::error::CreateACLError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::CreateACLError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateACLError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateACLError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::CreateACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateClusterError> for Error {
    fn from(err: crate::error::CreateClusterError) -> Self {
        match err {
            crate::error::CreateClusterError::AclNotFoundFault(inner) => {
                Error::AclNotFoundFault(inner)
            }
            crate::error::CreateClusterError::ClusterAlreadyExistsFault(inner) => {
                Error::ClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateClusterError::ClusterQuotaForCustomerExceededFault(inner) => {
                Error::ClusterQuotaForCustomerExceededFault(inner)
            }
            crate::error::CreateClusterError::InsufficientClusterCapacityFault(inner) => {
                Error::InsufficientClusterCapacityFault(inner)
            }
            crate::error::CreateClusterError::InvalidAclStateFault(inner) => {
                Error::InvalidAclStateFault(inner)
            }
            crate::error::CreateClusterError::InvalidCredentialsException(inner) => {
                Error::InvalidCredentialsException(inner)
            }
            crate::error::CreateClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateClusterError::NodeQuotaForClusterExceededFault(inner) => {
                Error::NodeQuotaForClusterExceededFault(inner)
            }
            crate::error::CreateClusterError::NodeQuotaForCustomerExceededFault(inner) => {
                Error::NodeQuotaForCustomerExceededFault(inner)
            }
            crate::error::CreateClusterError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateClusterError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateClusterError::ShardsPerClusterQuotaExceededFault(inner) => {
                Error::ShardsPerClusterQuotaExceededFault(inner)
            }
            crate::error::CreateClusterError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateClusterError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateParameterGroupError> for Error {
    fn from(err: crate::error::CreateParameterGroupError) -> Self {
        match err {
            crate::error::CreateParameterGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateParameterGroupError::InvalidParameterGroupStateFault(inner) => {
                Error::InvalidParameterGroupStateFault(inner)
            }
            crate::error::CreateParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateParameterGroupError::ParameterGroupAlreadyExistsFault(inner) => {
                Error::ParameterGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateParameterGroupError::ParameterGroupQuotaExceededFault(inner) => {
                Error::ParameterGroupQuotaExceededFault(inner)
            }
            crate::error::CreateParameterGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateParameterGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSnapshotError> for Error {
    fn from(err: crate::error::CreateSnapshotError) -> Self {
        match err {
            crate::error::CreateSnapshotError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::CreateSnapshotError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::CreateSnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateSnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateSnapshotError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateSnapshotError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::CreateSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateSnapshotError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSubnetGroupError> for Error {
    fn from(err: crate::error::CreateSubnetGroupError) -> Self {
        match err {
            crate::error::CreateSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateSubnetGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::CreateSubnetGroupError::SubnetGroupAlreadyExistsFault(inner) => {
                Error::SubnetGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateSubnetGroupError::SubnetGroupQuotaExceededFault(inner) => {
                Error::SubnetGroupQuotaExceededFault(inner)
            }
            crate::error::CreateSubnetGroupError::SubnetNotAllowedFault(inner) => {
                Error::SubnetNotAllowedFault(inner)
            }
            crate::error::CreateSubnetGroupError::SubnetQuotaExceededFault(inner) => {
                Error::SubnetQuotaExceededFault(inner)
            }
            crate::error::CreateSubnetGroupError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserError> for Error {
    fn from(err: crate::error::CreateUserError) -> Self {
        match err {
            crate::error::CreateUserError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::CreateUserError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::CreateUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateUserError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::CreateUserError::UserAlreadyExistsFault(inner) => {
                Error::UserAlreadyExistsFault(inner)
            }
            crate::error::CreateUserError::UserQuotaExceededFault(inner) => {
                Error::UserQuotaExceededFault(inner)
            }
            crate::error::CreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteACLError> for Error {
    fn from(err: crate::error::DeleteACLError) -> Self {
        match err {
            crate::error::DeleteACLError::AclNotFoundFault(inner) => Error::AclNotFoundFault(inner),
            crate::error::DeleteACLError::InvalidAclStateFault(inner) => {
                Error::InvalidAclStateFault(inner)
            }
            crate::error::DeleteACLError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteClusterError> for Error {
    fn from(err: crate::error::DeleteClusterError) -> Self {
        match err {
            crate::error::DeleteClusterError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::DeleteClusterError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::DeleteClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DeleteClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteClusterError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteClusterError::SnapshotAlreadyExistsFault(inner) => {
                Error::SnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteParameterGroupError> for Error {
    fn from(err: crate::error::DeleteParameterGroupError) -> Self {
        match err {
            crate::error::DeleteParameterGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DeleteParameterGroupError::InvalidParameterGroupStateFault(inner) => {
                Error::InvalidParameterGroupStateFault(inner)
            }
            crate::error::DeleteParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteParameterGroupError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::DeleteParameterGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSnapshotError> for Error {
    fn from(err: crate::error::DeleteSnapshotError) -> Self {
        match err {
            crate::error::DeleteSnapshotError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DeleteSnapshotError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteSnapshotError::InvalidSnapshotStateFault(inner) => {
                Error::InvalidSnapshotStateFault(inner)
            }
            crate::error::DeleteSnapshotError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteSnapshotError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::DeleteSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteSubnetGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DeleteSubnetGroupError::SubnetGroupInUseFault(inner) => {
                Error::SubnetGroupInUseFault(inner)
            }
            crate::error::DeleteSubnetGroupError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::DeleteSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteUserError::InvalidUserStateFault(inner) => {
                Error::InvalidUserStateFault(inner)
            }
            crate::error::DeleteUserError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeACLsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeACLsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeACLsError> for Error {
    fn from(err: crate::error::DescribeACLsError) -> Self {
        match err {
            crate::error::DescribeACLsError::AclNotFoundFault(inner) => {
                Error::AclNotFoundFault(inner)
            }
            crate::error::DescribeACLsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeACLsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeClustersError> for Error {
    fn from(err: crate::error::DescribeClustersError) -> Self {
        match err {
            crate::error::DescribeClustersError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::DescribeClustersError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeClustersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeClustersError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEngineVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineVersionsError> for Error {
    fn from(err: crate::error::DescribeEngineVersionsError) -> Self {
        match err {
            crate::error::DescribeEngineVersionsError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeEngineVersionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeEngineVersionsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeEngineVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeEventsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeEventsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeParameterGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeParameterGroupsError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeParameterGroupsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeParameterGroupsError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeParameterGroupsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeParameterGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeParametersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeParametersError> for Error {
    fn from(err: crate::error::DescribeParametersError) -> Self {
        match err {
            crate::error::DescribeParametersError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeParametersError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeParametersError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeParametersError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedNodesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReservedNodesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedNodesError> for Error {
    fn from(err: crate::error::DescribeReservedNodesError) -> Self {
        match err {
            crate::error::DescribeReservedNodesError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeReservedNodesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeReservedNodesError::ReservedNodeNotFoundFault(inner) => {
                Error::ReservedNodeNotFoundFault(inner)
            }
            crate::error::DescribeReservedNodesError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeReservedNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedNodesOfferingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedNodesOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedNodesOfferingsError> for Error {
    fn from(err: crate::error::DescribeReservedNodesOfferingsError) -> Self {
        match err {
            crate::error::DescribeReservedNodesOfferingsError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeReservedNodesOfferingsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DescribeReservedNodesOfferingsError::ReservedNodesOfferingNotFoundFault(inner) => Error::ReservedNodesOfferingNotFoundFault(inner),
            crate::error::DescribeReservedNodesOfferingsError::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
            crate::error::DescribeReservedNodesOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeServiceUpdatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeServiceUpdatesError> for Error {
    fn from(err: crate::error::DescribeServiceUpdatesError) -> Self {
        match err {
            crate::error::DescribeServiceUpdatesError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::DescribeServiceUpdatesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeServiceUpdatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSnapshotsError> for Error {
    fn from(err: crate::error::DescribeSnapshotsError) -> Self {
        match err {
            crate::error::DescribeSnapshotsError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeSnapshotsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DescribeSnapshotsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeSnapshotsError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::DescribeSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSubnetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeSubnetGroupsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::DescribeSubnetGroupsError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::DescribeSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUsersError> for Error {
    fn from(err: crate::error::DescribeUsersError) -> Self {
        match err {
            crate::error::DescribeUsersError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::DescribeUsersError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::DescribeUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverShardError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::FailoverShardError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverShardError> for Error {
    fn from(err: crate::error::FailoverShardError) -> Self {
        match err {
            crate::error::FailoverShardError::ApiCallRateForCustomerExceededFault(inner) => {
                Error::ApiCallRateForCustomerExceededFault(inner)
            }
            crate::error::FailoverShardError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::FailoverShardError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::FailoverShardError::InvalidKmsKeyFault(inner) => {
                Error::InvalidKmsKeyFault(inner)
            }
            crate::error::FailoverShardError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::FailoverShardError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::FailoverShardError::ShardNotFoundFault(inner) => {
                Error::ShardNotFoundFault(inner)
            }
            crate::error::FailoverShardError::TestFailoverNotAvailableFault(inner) => {
                Error::TestFailoverNotAvailableFault(inner)
            }
            crate::error::FailoverShardError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAllowedNodeTypeUpdatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAllowedNodeTypeUpdatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAllowedNodeTypeUpdatesError> for Error {
    fn from(err: crate::error::ListAllowedNodeTypeUpdatesError) -> Self {
        match err {
            crate::error::ListAllowedNodeTypeUpdatesError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::ListAllowedNodeTypeUpdatesError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::ListAllowedNodeTypeUpdatesError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::ListAllowedNodeTypeUpdatesError::ServiceLinkedRoleNotFoundFault(
                inner,
            ) => Error::ServiceLinkedRoleNotFoundFault(inner),
            crate::error::ListAllowedNodeTypeUpdatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::AclNotFoundFault(inner) => Error::AclNotFoundFault(inner),
            crate::error::ListTagsError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::ListTagsError::InvalidArnFault(inner) => Error::InvalidArnFault(inner),
            crate::error::ListTagsError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::ListTagsError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::ListTagsError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::ListTagsError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::ListTagsError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::ListTagsError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PurchaseReservedNodesOfferingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PurchaseReservedNodesOfferingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseReservedNodesOfferingError> for Error {
    fn from(err: crate::error::PurchaseReservedNodesOfferingError) -> Self {
        match err {
            crate::error::PurchaseReservedNodesOfferingError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::PurchaseReservedNodesOfferingError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::PurchaseReservedNodesOfferingError::ReservedNodeAlreadyExistsFault(inner) => Error::ReservedNodeAlreadyExistsFault(inner),
            crate::error::PurchaseReservedNodesOfferingError::ReservedNodeQuotaExceededFault(inner) => Error::ReservedNodeQuotaExceededFault(inner),
            crate::error::PurchaseReservedNodesOfferingError::ReservedNodesOfferingNotFoundFault(inner) => Error::ReservedNodesOfferingNotFoundFault(inner),
            crate::error::PurchaseReservedNodesOfferingError::ServiceLinkedRoleNotFoundFault(inner) => Error::ServiceLinkedRoleNotFoundFault(inner),
            crate::error::PurchaseReservedNodesOfferingError::TagQuotaPerResourceExceeded(inner) => Error::TagQuotaPerResourceExceeded(inner),
            crate::error::PurchaseReservedNodesOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetParameterGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetParameterGroupError> for Error {
    fn from(err: crate::error::ResetParameterGroupError) -> Self {
        match err {
            crate::error::ResetParameterGroupError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::ResetParameterGroupError::InvalidParameterGroupStateFault(inner) => {
                Error::InvalidParameterGroupStateFault(inner)
            }
            crate::error::ResetParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ResetParameterGroupError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::ResetParameterGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::ResetParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AclNotFoundFault(inner) => {
                Error::AclNotFoundFault(inner)
            }
            crate::error::TagResourceError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::TagResourceError::InvalidArnFault(inner) => Error::InvalidArnFault(inner),
            crate::error::TagResourceError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::TagResourceError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::TagResourceError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::TagResourceError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::TagResourceError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::TagResourceError::TagQuotaPerResourceExceeded(inner) => {
                Error::TagQuotaPerResourceExceeded(inner)
            }
            crate::error::TagResourceError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AclNotFoundFault(inner) => {
                Error::AclNotFoundFault(inner)
            }
            crate::error::UntagResourceError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::UntagResourceError::InvalidArnFault(inner) => {
                Error::InvalidArnFault(inner)
            }
            crate::error::UntagResourceError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::UntagResourceError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::UntagResourceError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::UntagResourceError::SnapshotNotFoundFault(inner) => {
                Error::SnapshotNotFoundFault(inner)
            }
            crate::error::UntagResourceError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::UntagResourceError::TagNotFoundFault(inner) => {
                Error::TagNotFoundFault(inner)
            }
            crate::error::UntagResourceError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateACLError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateACLError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateACLError> for Error {
    fn from(err: crate::error::UpdateACLError) -> Self {
        match err {
            crate::error::UpdateACLError::AclNotFoundFault(inner) => Error::AclNotFoundFault(inner),
            crate::error::UpdateACLError::DefaultUserRequired(inner) => {
                Error::DefaultUserRequired(inner)
            }
            crate::error::UpdateACLError::DuplicateUserNameFault(inner) => {
                Error::DuplicateUserNameFault(inner)
            }
            crate::error::UpdateACLError::InvalidAclStateFault(inner) => {
                Error::InvalidAclStateFault(inner)
            }
            crate::error::UpdateACLError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::UpdateACLError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateACLError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::UpdateACLError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClusterError> for Error {
    fn from(err: crate::error::UpdateClusterError) -> Self {
        match err {
            crate::error::UpdateClusterError::AclNotFoundFault(inner) => {
                Error::AclNotFoundFault(inner)
            }
            crate::error::UpdateClusterError::ClusterNotFoundFault(inner) => {
                Error::ClusterNotFoundFault(inner)
            }
            crate::error::UpdateClusterError::ClusterQuotaForCustomerExceededFault(inner) => {
                Error::ClusterQuotaForCustomerExceededFault(inner)
            }
            crate::error::UpdateClusterError::InvalidAclStateFault(inner) => {
                Error::InvalidAclStateFault(inner)
            }
            crate::error::UpdateClusterError::InvalidClusterStateFault(inner) => {
                Error::InvalidClusterStateFault(inner)
            }
            crate::error::UpdateClusterError::InvalidKmsKeyFault(inner) => {
                Error::InvalidKmsKeyFault(inner)
            }
            crate::error::UpdateClusterError::InvalidNodeStateFault(inner) => {
                Error::InvalidNodeStateFault(inner)
            }
            crate::error::UpdateClusterError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::UpdateClusterError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::UpdateClusterError::NodeQuotaForClusterExceededFault(inner) => {
                Error::NodeQuotaForClusterExceededFault(inner)
            }
            crate::error::UpdateClusterError::NodeQuotaForCustomerExceededFault(inner) => {
                Error::NodeQuotaForCustomerExceededFault(inner)
            }
            crate::error::UpdateClusterError::NoOperationFault(inner) => {
                Error::NoOperationFault(inner)
            }
            crate::error::UpdateClusterError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::UpdateClusterError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::UpdateClusterError::ShardsPerClusterQuotaExceededFault(inner) => {
                Error::ShardsPerClusterQuotaExceededFault(inner)
            }
            crate::error::UpdateClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateParameterGroupError> for Error {
    fn from(err: crate::error::UpdateParameterGroupError) -> Self {
        match err {
            crate::error::UpdateParameterGroupError::InvalidParameterCombinationException(
                inner,
            ) => Error::InvalidParameterCombinationException(inner),
            crate::error::UpdateParameterGroupError::InvalidParameterGroupStateFault(inner) => {
                Error::InvalidParameterGroupStateFault(inner)
            }
            crate::error::UpdateParameterGroupError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateParameterGroupError::ParameterGroupNotFoundFault(inner) => {
                Error::ParameterGroupNotFoundFault(inner)
            }
            crate::error::UpdateParameterGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::UpdateParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSubnetGroupError> for Error {
    fn from(err: crate::error::UpdateSubnetGroupError) -> Self {
        match err {
            crate::error::UpdateSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::UpdateSubnetGroupError::ServiceLinkedRoleNotFoundFault(inner) => {
                Error::ServiceLinkedRoleNotFoundFault(inner)
            }
            crate::error::UpdateSubnetGroupError::SubnetGroupNotFoundFault(inner) => {
                Error::SubnetGroupNotFoundFault(inner)
            }
            crate::error::UpdateSubnetGroupError::SubnetInUse(inner) => Error::SubnetInUse(inner),
            crate::error::UpdateSubnetGroupError::SubnetNotAllowedFault(inner) => {
                Error::SubnetNotAllowedFault(inner)
            }
            crate::error::UpdateSubnetGroupError::SubnetQuotaExceededFault(inner) => {
                Error::SubnetQuotaExceededFault(inner)
            }
            crate::error::UpdateSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserError> for Error {
    fn from(err: crate::error::UpdateUserError) -> Self {
        match err {
            crate::error::UpdateUserError::InvalidParameterCombinationException(inner) => {
                Error::InvalidParameterCombinationException(inner)
            }
            crate::error::UpdateUserError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateUserError::InvalidUserStateFault(inner) => {
                Error::InvalidUserStateFault(inner)
            }
            crate::error::UpdateUserError::UserNotFoundFault(inner) => {
                Error::UserNotFoundFault(inner)
            }
            crate::error::UpdateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AclAlreadyExistsFault(e) => e.request_id(),
            Self::AclNotFoundFault(e) => e.request_id(),
            Self::AclQuotaExceededFault(e) => e.request_id(),
            Self::ApiCallRateForCustomerExceededFault(e) => e.request_id(),
            Self::ClusterAlreadyExistsFault(e) => e.request_id(),
            Self::ClusterNotFoundFault(e) => e.request_id(),
            Self::ClusterQuotaForCustomerExceededFault(e) => e.request_id(),
            Self::DefaultUserRequired(e) => e.request_id(),
            Self::DuplicateUserNameFault(e) => e.request_id(),
            Self::InsufficientClusterCapacityFault(e) => e.request_id(),
            Self::InvalidAclStateFault(e) => e.request_id(),
            Self::InvalidArnFault(e) => e.request_id(),
            Self::InvalidClusterStateFault(e) => e.request_id(),
            Self::InvalidCredentialsException(e) => e.request_id(),
            Self::InvalidKmsKeyFault(e) => e.request_id(),
            Self::InvalidNodeStateFault(e) => e.request_id(),
            Self::InvalidParameterCombinationException(e) => e.request_id(),
            Self::InvalidParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidSnapshotStateFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidUserStateFault(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::NoOperationFault(e) => e.request_id(),
            Self::NodeQuotaForClusterExceededFault(e) => e.request_id(),
            Self::NodeQuotaForCustomerExceededFault(e) => e.request_id(),
            Self::ParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::ParameterGroupNotFoundFault(e) => e.request_id(),
            Self::ParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::ReservedNodeAlreadyExistsFault(e) => e.request_id(),
            Self::ReservedNodeNotFoundFault(e) => e.request_id(),
            Self::ReservedNodeQuotaExceededFault(e) => e.request_id(),
            Self::ReservedNodesOfferingNotFoundFault(e) => e.request_id(),
            Self::ServiceLinkedRoleNotFoundFault(e) => e.request_id(),
            Self::ServiceUpdateNotFoundFault(e) => e.request_id(),
            Self::ShardNotFoundFault(e) => e.request_id(),
            Self::ShardsPerClusterQuotaExceededFault(e) => e.request_id(),
            Self::SnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::SnapshotNotFoundFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::SubnetGroupInUseFault(e) => e.request_id(),
            Self::SubnetGroupNotFoundFault(e) => e.request_id(),
            Self::SubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::SubnetInUse(e) => e.request_id(),
            Self::SubnetNotAllowedFault(e) => e.request_id(),
            Self::SubnetQuotaExceededFault(e) => e.request_id(),
            Self::TagNotFoundFault(e) => e.request_id(),
            Self::TagQuotaPerResourceExceeded(e) => e.request_id(),
            Self::TestFailoverNotAvailableFault(e) => e.request_id(),
            Self::UserAlreadyExistsFault(e) => e.request_id(),
            Self::UserNotFoundFault(e) => e.request_id(),
            Self::UserQuotaExceededFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
