// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon MemoryDB
///
/// Client for invoking operations on Amazon MemoryDB. Each operation on Amazon MemoryDB is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_memorydb::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_memorydb::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_memorydb::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchUpdateCluster`](crate::client::fluent_builders::BatchUpdateCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_names(Vec<String>)`](crate::client::fluent_builders::BatchUpdateCluster::cluster_names) / [`set_cluster_names(Option<Vec<String>>)`](crate::client::fluent_builders::BatchUpdateCluster::set_cluster_names): <p>The cluster names to apply the updates.</p>
    ///   - [`service_update(ServiceUpdateRequest)`](crate::client::fluent_builders::BatchUpdateCluster::service_update) / [`set_service_update(Option<ServiceUpdateRequest>)`](crate::client::fluent_builders::BatchUpdateCluster::set_service_update): <p>The unique ID of the service update</p>
    /// - On success, responds with [`BatchUpdateClusterOutput`](crate::output::BatchUpdateClusterOutput) with field(s):
    ///   - [`processed_clusters(Option<Vec<Cluster>>)`](crate::output::BatchUpdateClusterOutput::processed_clusters): <p>The list of clusters that have been updated.</p>
    ///   - [`unprocessed_clusters(Option<Vec<UnprocessedCluster>>)`](crate::output::BatchUpdateClusterOutput::unprocessed_clusters): <p>The list of clusters where updates have not been applied.</p>
    /// - On failure, responds with [`SdkError<BatchUpdateClusterError>`](crate::error::BatchUpdateClusterError)
    pub fn batch_update_cluster(&self) -> crate::client::fluent_builders::BatchUpdateCluster {
        crate::client::fluent_builders::BatchUpdateCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CopySnapshot`](crate::client::fluent_builders::CopySnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_snapshot_name(impl Into<String>)`](crate::client::fluent_builders::CopySnapshot::source_snapshot_name) / [`set_source_snapshot_name(Option<String>)`](crate::client::fluent_builders::CopySnapshot::set_source_snapshot_name): <p>The name of an existing snapshot from which to make a copy.</p>
    ///   - [`target_snapshot_name(impl Into<String>)`](crate::client::fluent_builders::CopySnapshot::target_snapshot_name) / [`set_target_snapshot_name(Option<String>)`](crate::client::fluent_builders::CopySnapshot::set_target_snapshot_name): <p>A name for the snapshot copy. MemoryDB does not permit overwriting a snapshot, therefore this name must be unique within its context - MemoryDB or an Amazon S3 bucket if exporting.</p>
    ///   - [`target_bucket(impl Into<String>)`](crate::client::fluent_builders::CopySnapshot::target_bucket) / [`set_target_bucket(Option<String>)`](crate::client::fluent_builders::CopySnapshot::set_target_bucket): <p>The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure MemoryDB has the needed permissions to this S3 bucket. For more information, see <a href="https://docs.aws.amazon.com/MemoryDB/latest/devguide/snapshots-exporting.html">Step 2: Grant MemoryDB Access to Your Amazon S3 Bucket</a>. </p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CopySnapshot::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CopySnapshot::set_kms_key_id): <p>The ID of the KMS key used to encrypt the target snapshot.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CopySnapshot::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CopySnapshot::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CopySnapshotOutput`](crate::output::CopySnapshotOutput) with field(s):
    ///   - [`snapshot(Option<Snapshot>)`](crate::output::CopySnapshotOutput::snapshot): <p>Represents a copy of an entire cluster as of the time when the snapshot was taken.</p>
    /// - On failure, responds with [`SdkError<CopySnapshotError>`](crate::error::CopySnapshotError)
    pub fn copy_snapshot(&self) -> crate::client::fluent_builders::CopySnapshot {
        crate::client::fluent_builders::CopySnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateACL`](crate::client::fluent_builders::CreateACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::CreateACL::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::CreateACL::set_acl_name): <p>The name of the Access Control List.</p>
    ///   - [`user_names(Vec<String>)`](crate::client::fluent_builders::CreateACL::user_names) / [`set_user_names(Option<Vec<String>>)`](crate::client::fluent_builders::CreateACL::set_user_names): <p>The list of users that belong to the Access Control List.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateACL::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateACL::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CreateAclOutput`](crate::output::CreateAclOutput) with field(s):
    ///   - [`acl(Option<Acl>)`](crate::output::CreateAclOutput::acl): <p>The newly-created Access Control List.</p>
    /// - On failure, responds with [`SdkError<CreateACLError>`](crate::error::CreateACLError)
    pub fn create_acl(&self) -> crate::client::fluent_builders::CreateACL {
        crate::client::fluent_builders::CreateACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCluster`](crate::client::fluent_builders::CreateCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_cluster_name): <p>The name of the cluster. This value must be unique as it also serves as the cluster identifier.</p>
    ///   - [`node_type(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::node_type) / [`set_node_type(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_node_type): <p>The compute and memory capacity of the nodes in the cluster.</p>
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_parameter_group_name): <p>The name of the parameter group associated with the cluster.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_description): <p>An optional description of the cluster.</p>
    ///   - [`num_shards(i32)`](crate::client::fluent_builders::CreateCluster::num_shards) / [`set_num_shards(Option<i32>)`](crate::client::fluent_builders::CreateCluster::set_num_shards): <p>The number of shards the cluster will contain. The default value is 1. </p>
    ///   - [`num_replicas_per_shard(i32)`](crate::client::fluent_builders::CreateCluster::num_replicas_per_shard) / [`set_num_replicas_per_shard(Option<i32>)`](crate::client::fluent_builders::CreateCluster::set_num_replicas_per_shard): <p>The number of replicas to apply to each shard. The default value is 1. The maximum is 5. </p>
    ///   - [`subnet_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::subnet_group_name) / [`set_subnet_group_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_subnet_group_name): <p>The name of the subnet group to be used for the cluster.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::CreateCluster::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateCluster::set_security_group_ids): <p>A list of security group names to associate with this cluster.</p>
    ///   - [`maintenance_window(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::maintenance_window) / [`set_maintenance_window(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_maintenance_window): <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>  <p>Valid values for <code>ddd</code> are:</p>  <ul>   <li> <p> <code>sun</code> </p> </li>   <li> <p> <code>mon</code> </p> </li>   <li> <p> <code>tue</code> </p> </li>   <li> <p> <code>wed</code> </p> </li>   <li> <p> <code>thu</code> </p> </li>   <li> <p> <code>fri</code> </p> </li>   <li> <p> <code>sat</code> </p> </li>  </ul>  <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    ///   - [`port(i32)`](crate::client::fluent_builders::CreateCluster::port) / [`set_port(Option<i32>)`](crate::client::fluent_builders::CreateCluster::set_port): <p>The port number on which each of the nodes accepts connections.</p>
    ///   - [`sns_topic_arn(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::sns_topic_arn) / [`set_sns_topic_arn(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_sns_topic_arn): <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.</p>
    ///   - [`tls_enabled(bool)`](crate::client::fluent_builders::CreateCluster::tls_enabled) / [`set_tls_enabled(Option<bool>)`](crate::client::fluent_builders::CreateCluster::set_tls_enabled): <p>A flag to enable in-transit encryption on the cluster.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_kms_key_id): <p>The ID of the KMS key used to encrypt the cluster.</p>
    ///   - [`snapshot_arns(Vec<String>)`](crate::client::fluent_builders::CreateCluster::snapshot_arns) / [`set_snapshot_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateCluster::set_snapshot_arns): <p>A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_snapshot_name): <p>The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.</p>
    ///   - [`snapshot_retention_limit(i32)`](crate::client::fluent_builders::CreateCluster::snapshot_retention_limit) / [`set_snapshot_retention_limit(Option<i32>)`](crate::client::fluent_builders::CreateCluster::set_snapshot_retention_limit): <p>The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateCluster::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateCluster::set_tags): <p>A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key=myKey, Value=myKeyValue. You can include multiple tags as shown following: Key=myKey, Value=myKeyValue Key=mySecondKey, Value=mySecondKeyValue.</p>
    ///   - [`snapshot_window(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::snapshot_window) / [`set_snapshot_window(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_snapshot_window): <p>The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard.</p>  <p> Example: 05:00-09:00</p>  <p> If you do not specify this parameter, MemoryDB automatically chooses an appropriate time range.</p>
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_acl_name): <p>The name of the Access Control List to associate with the cluster.</p>
    ///   - [`engine_version(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::engine_version) / [`set_engine_version(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_engine_version): <p>The version number of the Redis engine to be used for the cluster.</p>
    ///   - [`auto_minor_version_upgrade(bool)`](crate::client::fluent_builders::CreateCluster::auto_minor_version_upgrade) / [`set_auto_minor_version_upgrade(Option<bool>)`](crate::client::fluent_builders::CreateCluster::set_auto_minor_version_upgrade): <p>When set to true, the cluster will automatically receive minor engine version upgrades after launch.</p>
    ///   - [`data_tiering(bool)`](crate::client::fluent_builders::CreateCluster::data_tiering) / [`set_data_tiering(Option<bool>)`](crate::client::fluent_builders::CreateCluster::set_data_tiering): <p>Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set when using r6gd nodes. For more information, see <a href="https://docs.aws.amazon.com/memorydb/latest/devguide/data-tiering.html">Data tiering</a>.</p>
    /// - On success, responds with [`CreateClusterOutput`](crate::output::CreateClusterOutput) with field(s):
    ///   - [`cluster(Option<Cluster>)`](crate::output::CreateClusterOutput::cluster): <p>The newly-created cluster.</p>
    /// - On failure, responds with [`SdkError<CreateClusterError>`](crate::error::CreateClusterError)
    pub fn create_cluster(&self) -> crate::client::fluent_builders::CreateCluster {
        crate::client::fluent_builders::CreateCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateParameterGroup`](crate::client::fluent_builders::CreateParameterGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateParameterGroup::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::CreateParameterGroup::set_parameter_group_name): <p>The name of the parameter group.</p>
    ///   - [`family(impl Into<String>)`](crate::client::fluent_builders::CreateParameterGroup::family) / [`set_family(Option<String>)`](crate::client::fluent_builders::CreateParameterGroup::set_family): <p>The name of the parameter group family that the parameter group can be used with.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateParameterGroup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateParameterGroup::set_description): <p>An optional description of the parameter group.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateParameterGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateParameterGroup::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CreateParameterGroupOutput`](crate::output::CreateParameterGroupOutput) with field(s):
    ///   - [`parameter_group(Option<ParameterGroup>)`](crate::output::CreateParameterGroupOutput::parameter_group): <p>The newly-created parameter group.</p>
    /// - On failure, responds with [`SdkError<CreateParameterGroupError>`](crate::error::CreateParameterGroupError)
    pub fn create_parameter_group(&self) -> crate::client::fluent_builders::CreateParameterGroup {
        crate::client::fluent_builders::CreateParameterGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSnapshot`](crate::client::fluent_builders::CreateSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::CreateSnapshot::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::CreateSnapshot::set_cluster_name): <p>The snapshot is created from this cluster.</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::CreateSnapshot::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::CreateSnapshot::set_snapshot_name): <p>A name for the snapshot being created.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateSnapshot::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CreateSnapshot::set_kms_key_id): <p>The ID of the KMS key used to encrypt the snapshot.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSnapshot::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSnapshot::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CreateSnapshotOutput`](crate::output::CreateSnapshotOutput) with field(s):
    ///   - [`snapshot(Option<Snapshot>)`](crate::output::CreateSnapshotOutput::snapshot): <p>The newly-created snapshot.</p>
    /// - On failure, responds with [`SdkError<CreateSnapshotError>`](crate::error::CreateSnapshotError)
    pub fn create_snapshot(&self) -> crate::client::fluent_builders::CreateSnapshot {
        crate::client::fluent_builders::CreateSnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSubnetGroup`](crate::client::fluent_builders::CreateSubnetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subnet_group_name(impl Into<String>)`](crate::client::fluent_builders::CreateSubnetGroup::subnet_group_name) / [`set_subnet_group_name(Option<String>)`](crate::client::fluent_builders::CreateSubnetGroup::set_subnet_group_name): <p>The name of the subnet group.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSubnetGroup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSubnetGroup::set_description): <p>A description for the subnet group.</p>
    ///   - [`subnet_ids(Vec<String>)`](crate::client::fluent_builders::CreateSubnetGroup::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateSubnetGroup::set_subnet_ids): <p>A list of VPC subnet IDs for the subnet group.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateSubnetGroup::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateSubnetGroup::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CreateSubnetGroupOutput`](crate::output::CreateSubnetGroupOutput) with field(s):
    ///   - [`subnet_group(Option<SubnetGroup>)`](crate::output::CreateSubnetGroupOutput::subnet_group): <p>The newly-created subnet group</p>
    /// - On failure, responds with [`SdkError<CreateSubnetGroupError>`](crate::error::CreateSubnetGroupError)
    pub fn create_subnet_group(&self) -> crate::client::fluent_builders::CreateSubnetGroup {
        crate::client::fluent_builders::CreateSubnetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateUser`](crate::client::fluent_builders::CreateUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::CreateUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::CreateUser::set_user_name): <p>The name of the user. This value must be unique as it also serves as the user identifier.</p>
    ///   - [`authentication_mode(AuthenticationMode)`](crate::client::fluent_builders::CreateUser::authentication_mode) / [`set_authentication_mode(Option<AuthenticationMode>)`](crate::client::fluent_builders::CreateUser::set_authentication_mode): <p>Denotes the user's authentication properties, such as whether it requires a password to authenticate.</p>
    ///   - [`access_string(impl Into<String>)`](crate::client::fluent_builders::CreateUser::access_string) / [`set_access_string(Option<String>)`](crate::client::fluent_builders::CreateUser::set_access_string): <p>Access permissions string used for this user.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateUser::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateUser::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`CreateUserOutput`](crate::output::CreateUserOutput) with field(s):
    ///   - [`user(Option<User>)`](crate::output::CreateUserOutput::user): <p>The newly-created user.</p>
    /// - On failure, responds with [`SdkError<CreateUserError>`](crate::error::CreateUserError)
    pub fn create_user(&self) -> crate::client::fluent_builders::CreateUser {
        crate::client::fluent_builders::CreateUser::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteACL`](crate::client::fluent_builders::DeleteACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::DeleteACL::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::DeleteACL::set_acl_name): <p>The name of the Access Control List to delete</p>
    /// - On success, responds with [`DeleteAclOutput`](crate::output::DeleteAclOutput) with field(s):
    ///   - [`acl(Option<Acl>)`](crate::output::DeleteAclOutput::acl): <p>The Access Control List object that has been deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteACLError>`](crate::error::DeleteACLError)
    pub fn delete_acl(&self) -> crate::client::fluent_builders::DeleteACL {
        crate::client::fluent_builders::DeleteACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCluster`](crate::client::fluent_builders::DeleteCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::DeleteCluster::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::DeleteCluster::set_cluster_name): <p>The name of the cluster to be deleted</p>
    ///   - [`final_snapshot_name(impl Into<String>)`](crate::client::fluent_builders::DeleteCluster::final_snapshot_name) / [`set_final_snapshot_name(Option<String>)`](crate::client::fluent_builders::DeleteCluster::set_final_snapshot_name): <p>The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.</p>
    /// - On success, responds with [`DeleteClusterOutput`](crate::output::DeleteClusterOutput) with field(s):
    ///   - [`cluster(Option<Cluster>)`](crate::output::DeleteClusterOutput::cluster): <p>The cluster object that has been deleted</p>
    /// - On failure, responds with [`SdkError<DeleteClusterError>`](crate::error::DeleteClusterError)
    pub fn delete_cluster(&self) -> crate::client::fluent_builders::DeleteCluster {
        crate::client::fluent_builders::DeleteCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteParameterGroup`](crate::client::fluent_builders::DeleteParameterGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::DeleteParameterGroup::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::DeleteParameterGroup::set_parameter_group_name): <p>The name of the parameter group to delete.</p>
    /// - On success, responds with [`DeleteParameterGroupOutput`](crate::output::DeleteParameterGroupOutput) with field(s):
    ///   - [`parameter_group(Option<ParameterGroup>)`](crate::output::DeleteParameterGroupOutput::parameter_group): <p>The parameter group that has been deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteParameterGroupError>`](crate::error::DeleteParameterGroupError)
    pub fn delete_parameter_group(&self) -> crate::client::fluent_builders::DeleteParameterGroup {
        crate::client::fluent_builders::DeleteParameterGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSnapshot`](crate::client::fluent_builders::DeleteSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::DeleteSnapshot::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::DeleteSnapshot::set_snapshot_name): <p>The name of the snapshot to delete</p>
    /// - On success, responds with [`DeleteSnapshotOutput`](crate::output::DeleteSnapshotOutput) with field(s):
    ///   - [`snapshot(Option<Snapshot>)`](crate::output::DeleteSnapshotOutput::snapshot): <p>The snapshot object that has been deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteSnapshotError>`](crate::error::DeleteSnapshotError)
    pub fn delete_snapshot(&self) -> crate::client::fluent_builders::DeleteSnapshot {
        crate::client::fluent_builders::DeleteSnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSubnetGroup`](crate::client::fluent_builders::DeleteSubnetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subnet_group_name(impl Into<String>)`](crate::client::fluent_builders::DeleteSubnetGroup::subnet_group_name) / [`set_subnet_group_name(Option<String>)`](crate::client::fluent_builders::DeleteSubnetGroup::set_subnet_group_name): <p>The name of the subnet group to delete</p>
    /// - On success, responds with [`DeleteSubnetGroupOutput`](crate::output::DeleteSubnetGroupOutput) with field(s):
    ///   - [`subnet_group(Option<SubnetGroup>)`](crate::output::DeleteSubnetGroupOutput::subnet_group): <p>The subnet group object that has been deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteSubnetGroupError>`](crate::error::DeleteSubnetGroupError)
    pub fn delete_subnet_group(&self) -> crate::client::fluent_builders::DeleteSubnetGroup {
        crate::client::fluent_builders::DeleteSubnetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteUser`](crate::client::fluent_builders::DeleteUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::DeleteUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::DeleteUser::set_user_name): <p>The name of the user to delete</p>
    /// - On success, responds with [`DeleteUserOutput`](crate::output::DeleteUserOutput) with field(s):
    ///   - [`user(Option<User>)`](crate::output::DeleteUserOutput::user): <p>The user object that has been deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteUserError>`](crate::error::DeleteUserError)
    pub fn delete_user(&self) -> crate::client::fluent_builders::DeleteUser {
        crate::client::fluent_builders::DeleteUser::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeACLs`](crate::client::fluent_builders::DescribeACLs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeACLs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::DescribeACLs::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::DescribeACLs::set_acl_name): <p>The name of the ACL</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeACLs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeACLs::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeACLs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeACLs::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeAcLsOutput`](crate::output::DescribeAcLsOutput) with field(s):
    ///   - [`ac_ls(Option<Vec<Acl>>)`](crate::output::DescribeAcLsOutput::ac_ls): <p>The list of ACLs</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeAcLsOutput::next_token): <p>If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On failure, responds with [`SdkError<DescribeACLsError>`](crate::error::DescribeACLsError)
    pub fn describe_ac_ls(&self) -> crate::client::fluent_builders::DescribeACLs {
        crate::client::fluent_builders::DescribeACLs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeClusters`](crate::client::fluent_builders::DescribeClusters) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeClusters::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::DescribeClusters::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::DescribeClusters::set_cluster_name): <p>The name of the cluster</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeClusters::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeClusters::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeClusters::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeClusters::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`show_shard_details(bool)`](crate::client::fluent_builders::DescribeClusters::show_shard_details) / [`set_show_shard_details(Option<bool>)`](crate::client::fluent_builders::DescribeClusters::set_show_shard_details): <p>An optional flag that can be included in the request to retrieve information about the individual shard(s).</p>
    /// - On success, responds with [`DescribeClustersOutput`](crate::output::DescribeClustersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeClustersOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`clusters(Option<Vec<Cluster>>)`](crate::output::DescribeClustersOutput::clusters): <p>A list of clusters</p>
    /// - On failure, responds with [`SdkError<DescribeClustersError>`](crate::error::DescribeClustersError)
    pub fn describe_clusters(&self) -> crate::client::fluent_builders::DescribeClusters {
        crate::client::fluent_builders::DescribeClusters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEngineVersions`](crate::client::fluent_builders::DescribeEngineVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeEngineVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`engine_version(impl Into<String>)`](crate::client::fluent_builders::DescribeEngineVersions::engine_version) / [`set_engine_version(Option<String>)`](crate::client::fluent_builders::DescribeEngineVersions::set_engine_version): <p>The Redis engine version</p>
    ///   - [`parameter_group_family(impl Into<String>)`](crate::client::fluent_builders::DescribeEngineVersions::parameter_group_family) / [`set_parameter_group_family(Option<String>)`](crate::client::fluent_builders::DescribeEngineVersions::set_parameter_group_family): <p>The name of a specific parameter group family to return details for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeEngineVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeEngineVersions::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeEngineVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeEngineVersions::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`default_only(bool)`](crate::client::fluent_builders::DescribeEngineVersions::default_only) / [`set_default_only(bool)`](crate::client::fluent_builders::DescribeEngineVersions::set_default_only): <p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>
    /// - On success, responds with [`DescribeEngineVersionsOutput`](crate::output::DescribeEngineVersionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeEngineVersionsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`engine_versions(Option<Vec<EngineVersionInfo>>)`](crate::output::DescribeEngineVersionsOutput::engine_versions): <p>A list of engine version details. Each element in the list contains detailed information about one engine version.</p>
    /// - On failure, responds with [`SdkError<DescribeEngineVersionsError>`](crate::error::DescribeEngineVersionsError)
    pub fn describe_engine_versions(
        &self,
    ) -> crate::client::fluent_builders::DescribeEngineVersions {
        crate::client::fluent_builders::DescribeEngineVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeEvents`](crate::client::fluent_builders::DescribeEvents) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeEvents::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_name(impl Into<String>)`](crate::client::fluent_builders::DescribeEvents::source_name) / [`set_source_name(Option<String>)`](crate::client::fluent_builders::DescribeEvents::set_source_name): <p>The identifier of the event source for which events are returned. If not specified, all sources are included in the response.</p>
    ///   - [`source_type(SourceType)`](crate::client::fluent_builders::DescribeEvents::source_type) / [`set_source_type(Option<SourceType>)`](crate::client::fluent_builders::DescribeEvents::set_source_type): <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::DescribeEvents::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::DescribeEvents::set_start_time): <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::DescribeEvents::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::DescribeEvents::set_end_time): <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>
    ///   - [`duration(i32)`](crate::client::fluent_builders::DescribeEvents::duration) / [`set_duration(Option<i32>)`](crate::client::fluent_builders::DescribeEvents::set_duration): <p>The number of minutes worth of events to retrieve.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeEvents::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeEvents::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeEvents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeEvents::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeEventsOutput`](crate::output::DescribeEventsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeEventsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`events(Option<Vec<Event>>)`](crate::output::DescribeEventsOutput::events): <p>A list of events. Each element in the list contains detailed information about one event.</p>
    /// - On failure, responds with [`SdkError<DescribeEventsError>`](crate::error::DescribeEventsError)
    pub fn describe_events(&self) -> crate::client::fluent_builders::DescribeEvents {
        crate::client::fluent_builders::DescribeEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeParameterGroups`](crate::client::fluent_builders::DescribeParameterGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeParameterGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeParameterGroups::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::DescribeParameterGroups::set_parameter_group_name): <p>The name of a specific parameter group to return details for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeParameterGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeParameterGroups::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeParameterGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeParameterGroups::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeParameterGroupsOutput`](crate::output::DescribeParameterGroupsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeParameterGroupsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`parameter_groups(Option<Vec<ParameterGroup>>)`](crate::output::DescribeParameterGroupsOutput::parameter_groups): <p>A list of parameter groups. Each element in the list contains detailed information about one parameter group.</p>
    /// - On failure, responds with [`SdkError<DescribeParameterGroupsError>`](crate::error::DescribeParameterGroupsError)
    pub fn describe_parameter_groups(
        &self,
    ) -> crate::client::fluent_builders::DescribeParameterGroups {
        crate::client::fluent_builders::DescribeParameterGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeParameters`](crate::client::fluent_builders::DescribeParameters) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeParameters::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeParameters::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::DescribeParameters::set_parameter_group_name): <p>he name of a specific parameter group to return details for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeParameters::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeParameters::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeParameters::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeParameters::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeParametersOutput`](crate::output::DescribeParametersOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeParametersOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`parameters(Option<Vec<Parameter>>)`](crate::output::DescribeParametersOutput::parameters): <p>A list of parameters specific to a particular parameter group. Each element in the list contains detailed information about one parameter.</p>
    /// - On failure, responds with [`SdkError<DescribeParametersError>`](crate::error::DescribeParametersError)
    pub fn describe_parameters(&self) -> crate::client::fluent_builders::DescribeParameters {
        crate::client::fluent_builders::DescribeParameters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeReservedNodes`](crate::client::fluent_builders::DescribeReservedNodes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeReservedNodes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reservation_id(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::reservation_id) / [`set_reservation_id(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_reservation_id): <p>The reserved node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.</p>
    ///   - [`reserved_nodes_offering_id(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::reserved_nodes_offering_id) / [`set_reserved_nodes_offering_id(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_reserved_nodes_offering_id): <p>The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.</p>
    ///   - [`node_type(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::node_type) / [`set_node_type(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_node_type): <p>The node type filter value. Use this parameter to show only those reservations matching the specified node type. For more information, see <a href="https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.reserved.html#reserved-nodes-supported">Supported node types</a>.</p>
    ///   - [`duration(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::duration) / [`set_duration(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_duration): <p>The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.</p>
    ///   - [`offering_type(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::offering_type) / [`set_offering_type(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_offering_type): <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "All Upfront"|"Partial Upfront"| "No Upfront"</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeReservedNodes::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeReservedNodes::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodes::set_next_token): <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    /// - On success, responds with [`DescribeReservedNodesOutput`](crate::output::DescribeReservedNodesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeReservedNodesOutput::next_token): <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    ///   - [`reserved_nodes(Option<Vec<ReservedNode>>)`](crate::output::DescribeReservedNodesOutput::reserved_nodes): <p>Returns information about reserved nodes for this account, or about a specified reserved node.</p>
    /// - On failure, responds with [`SdkError<DescribeReservedNodesError>`](crate::error::DescribeReservedNodesError)
    pub fn describe_reserved_nodes(&self) -> crate::client::fluent_builders::DescribeReservedNodes {
        crate::client::fluent_builders::DescribeReservedNodes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeReservedNodesOfferings`](crate::client::fluent_builders::DescribeReservedNodesOfferings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeReservedNodesOfferings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reserved_nodes_offering_id(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::reserved_nodes_offering_id) / [`set_reserved_nodes_offering_id(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_reserved_nodes_offering_id): <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
    ///   - [`node_type(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::node_type) / [`set_node_type(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_node_type): <p>The node type for the reserved nodes. For more information, see <a href="https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.reserved.html#reserved-nodes-supported">Supported node types</a>.</p>
    ///   - [`duration(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::duration) / [`set_duration(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_duration): <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p>
    ///   - [`offering_type(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::offering_type) / [`set_offering_type(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_offering_type): <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "All Upfront"|"Partial Upfront"| "No Upfront"</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeReservedNodesOfferings::set_next_token): <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    /// - On success, responds with [`DescribeReservedNodesOfferingsOutput`](crate::output::DescribeReservedNodesOfferingsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeReservedNodesOfferingsOutput::next_token): <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    ///   - [`reserved_nodes_offerings(Option<Vec<ReservedNodesOffering>>)`](crate::output::DescribeReservedNodesOfferingsOutput::reserved_nodes_offerings): <p>Lists available reserved node offerings.</p>
    /// - On failure, responds with [`SdkError<DescribeReservedNodesOfferingsError>`](crate::error::DescribeReservedNodesOfferingsError)
    pub fn describe_reserved_nodes_offerings(
        &self,
    ) -> crate::client::fluent_builders::DescribeReservedNodesOfferings {
        crate::client::fluent_builders::DescribeReservedNodesOfferings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeServiceUpdates`](crate::client::fluent_builders::DescribeServiceUpdates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeServiceUpdates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`service_update_name(impl Into<String>)`](crate::client::fluent_builders::DescribeServiceUpdates::service_update_name) / [`set_service_update_name(Option<String>)`](crate::client::fluent_builders::DescribeServiceUpdates::set_service_update_name): <p>The unique ID of the service update to describe.</p>
    ///   - [`cluster_names(Vec<String>)`](crate::client::fluent_builders::DescribeServiceUpdates::cluster_names) / [`set_cluster_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeServiceUpdates::set_cluster_names): <p>The list of cluster names to identify service updates to apply</p>
    ///   - [`status(Vec<ServiceUpdateStatus>)`](crate::client::fluent_builders::DescribeServiceUpdates::status) / [`set_status(Option<Vec<ServiceUpdateStatus>>)`](crate::client::fluent_builders::DescribeServiceUpdates::set_status): <p>The status(es) of the service updates to filter on</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeServiceUpdates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeServiceUpdates::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeServiceUpdates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeServiceUpdates::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeServiceUpdatesOutput`](crate::output::DescribeServiceUpdatesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeServiceUpdatesOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`service_updates(Option<Vec<ServiceUpdate>>)`](crate::output::DescribeServiceUpdatesOutput::service_updates): <p>A list of service updates</p>
    /// - On failure, responds with [`SdkError<DescribeServiceUpdatesError>`](crate::error::DescribeServiceUpdatesError)
    pub fn describe_service_updates(
        &self,
    ) -> crate::client::fluent_builders::DescribeServiceUpdates {
        crate::client::fluent_builders::DescribeServiceUpdates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSnapshots`](crate::client::fluent_builders::DescribeSnapshots) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeSnapshots::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::DescribeSnapshots::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::DescribeSnapshots::set_cluster_name): <p>A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described.</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::DescribeSnapshots::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::DescribeSnapshots::set_snapshot_name): <p>A user-supplied name of the snapshot. If this parameter is specified, only this named snapshot is described.</p>
    ///   - [`source(impl Into<String>)`](crate::client::fluent_builders::DescribeSnapshots::source) / [`set_source(Option<String>)`](crate::client::fluent_builders::DescribeSnapshots::set_source): <p>If set to system, the output shows snapshots that were automatically created by MemoryDB. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeSnapshots::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeSnapshots::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeSnapshots::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeSnapshots::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`show_detail(bool)`](crate::client::fluent_builders::DescribeSnapshots::show_detail) / [`set_show_detail(Option<bool>)`](crate::client::fluent_builders::DescribeSnapshots::set_show_detail): <p>A Boolean value which if true, the shard configuration is included in the snapshot description.</p>
    /// - On success, responds with [`DescribeSnapshotsOutput`](crate::output::DescribeSnapshotsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeSnapshotsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`snapshots(Option<Vec<Snapshot>>)`](crate::output::DescribeSnapshotsOutput::snapshots): <p>A list of snapshots. Each item in the list contains detailed information about one snapshot.</p>
    /// - On failure, responds with [`SdkError<DescribeSnapshotsError>`](crate::error::DescribeSnapshotsError)
    pub fn describe_snapshots(&self) -> crate::client::fluent_builders::DescribeSnapshots {
        crate::client::fluent_builders::DescribeSnapshots::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSubnetGroups`](crate::client::fluent_builders::DescribeSubnetGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeSubnetGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`subnet_group_name(impl Into<String>)`](crate::client::fluent_builders::DescribeSubnetGroups::subnet_group_name) / [`set_subnet_group_name(Option<String>)`](crate::client::fluent_builders::DescribeSubnetGroups::set_subnet_group_name): <p>The name of the subnet group to return details for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeSubnetGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeSubnetGroups::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeSubnetGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeSubnetGroups::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeSubnetGroupsOutput`](crate::output::DescribeSubnetGroupsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeSubnetGroupsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`subnet_groups(Option<Vec<SubnetGroup>>)`](crate::output::DescribeSubnetGroupsOutput::subnet_groups): <p>A list of subnet groups. Each element in the list contains detailed information about one group.</p>
    /// - On failure, responds with [`SdkError<DescribeSubnetGroupsError>`](crate::error::DescribeSubnetGroupsError)
    pub fn describe_subnet_groups(&self) -> crate::client::fluent_builders::DescribeSubnetGroups {
        crate::client::fluent_builders::DescribeSubnetGroups::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeUsers`](crate::client::fluent_builders::DescribeUsers) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeUsers::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::DescribeUsers::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::DescribeUsers::set_user_name): <p>The name of the user</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::DescribeUsers::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::DescribeUsers::set_filters): <p>Filter to determine the list of users to return.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeUsers::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeUsers::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeUsers::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeUsers::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeUsersOutput`](crate::output::DescribeUsersOutput) with field(s):
    ///   - [`users(Option<Vec<User>>)`](crate::output::DescribeUsersOutput::users): <p>A list of users.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeUsersOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On failure, responds with [`SdkError<DescribeUsersError>`](crate::error::DescribeUsersError)
    pub fn describe_users(&self) -> crate::client::fluent_builders::DescribeUsers {
        crate::client::fluent_builders::DescribeUsers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`FailoverShard`](crate::client::fluent_builders::FailoverShard) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::FailoverShard::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::FailoverShard::set_cluster_name): <p>The cluster being failed over</p>
    ///   - [`shard_name(impl Into<String>)`](crate::client::fluent_builders::FailoverShard::shard_name) / [`set_shard_name(Option<String>)`](crate::client::fluent_builders::FailoverShard::set_shard_name): <p>The name of the shard</p>
    /// - On success, responds with [`FailoverShardOutput`](crate::output::FailoverShardOutput) with field(s):
    ///   - [`cluster(Option<Cluster>)`](crate::output::FailoverShardOutput::cluster): <p>The cluster being failed over</p>
    /// - On failure, responds with [`SdkError<FailoverShardError>`](crate::error::FailoverShardError)
    pub fn failover_shard(&self) -> crate::client::fluent_builders::FailoverShard {
        crate::client::fluent_builders::FailoverShard::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListAllowedNodeTypeUpdates`](crate::client::fluent_builders::ListAllowedNodeTypeUpdates) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::ListAllowedNodeTypeUpdates::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::ListAllowedNodeTypeUpdates::set_cluster_name): <p>The name of the cluster you want to scale. MemoryDB uses the cluster name to identify the current node type being used by this cluster, and from that to create a list of node types you can scale up to.</p>
    /// - On success, responds with [`ListAllowedNodeTypeUpdatesOutput`](crate::output::ListAllowedNodeTypeUpdatesOutput) with field(s):
    ///   - [`scale_up_node_types(Option<Vec<String>>)`](crate::output::ListAllowedNodeTypeUpdatesOutput::scale_up_node_types): <p>A list node types which you can use to scale up your cluster.</p>
    ///   - [`scale_down_node_types(Option<Vec<String>>)`](crate::output::ListAllowedNodeTypeUpdatesOutput::scale_down_node_types): <p>A list node types which you can use to scale down your cluster.</p>
    /// - On failure, responds with [`SdkError<ListAllowedNodeTypeUpdatesError>`](crate::error::ListAllowedNodeTypeUpdatesError)
    pub fn list_allowed_node_type_updates(
        &self,
    ) -> crate::client::fluent_builders::ListAllowedNodeTypeUpdates {
        crate::client::fluent_builders::ListAllowedNodeTypeUpdates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTags`](crate::client::fluent_builders::ListTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTags::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTags::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource for which you want the list of tags</p>
    /// - On success, responds with [`ListTagsOutput`](crate::output::ListTagsOutput) with field(s):
    ///   - [`tag_list(Option<Vec<Tag>>)`](crate::output::ListTagsOutput::tag_list): <p>A list of tags as key-value pairs.</p>
    /// - On failure, responds with [`SdkError<ListTagsError>`](crate::error::ListTagsError)
    pub fn list_tags(&self) -> crate::client::fluent_builders::ListTags {
        crate::client::fluent_builders::ListTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PurchaseReservedNodesOffering`](crate::client::fluent_builders::PurchaseReservedNodesOffering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reserved_nodes_offering_id(impl Into<String>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::reserved_nodes_offering_id) / [`set_reserved_nodes_offering_id(Option<String>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::set_reserved_nodes_offering_id): <p>The ID of the reserved node offering to purchase.</p>
    ///   - [`reservation_id(impl Into<String>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::reservation_id) / [`set_reservation_id(Option<String>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::set_reservation_id): <p>A customer-specified identifier to track this reservation.</p>
    ///   - [`node_count(i32)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::node_count) / [`set_node_count(Option<i32>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::set_node_count): <p>The number of node instances to reserve.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::PurchaseReservedNodesOffering::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`PurchaseReservedNodesOfferingOutput`](crate::output::PurchaseReservedNodesOfferingOutput) with field(s):
    ///   - [`reserved_node(Option<ReservedNode>)`](crate::output::PurchaseReservedNodesOfferingOutput::reserved_node): <p>Represents the output of a <code>PurchaseReservedNodesOffering</code> operation.</p>
    /// - On failure, responds with [`SdkError<PurchaseReservedNodesOfferingError>`](crate::error::PurchaseReservedNodesOfferingError)
    pub fn purchase_reserved_nodes_offering(
        &self,
    ) -> crate::client::fluent_builders::PurchaseReservedNodesOffering {
        crate::client::fluent_builders::PurchaseReservedNodesOffering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ResetParameterGroup`](crate::client::fluent_builders::ResetParameterGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::ResetParameterGroup::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::ResetParameterGroup::set_parameter_group_name): <p>The name of the parameter group to reset.</p>
    ///   - [`all_parameters(bool)`](crate::client::fluent_builders::ResetParameterGroup::all_parameters) / [`set_all_parameters(bool)`](crate::client::fluent_builders::ResetParameterGroup::set_all_parameters): <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    ///   - [`parameter_names(Vec<String>)`](crate::client::fluent_builders::ResetParameterGroup::parameter_names) / [`set_parameter_names(Option<Vec<String>>)`](crate::client::fluent_builders::ResetParameterGroup::set_parameter_names): <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    /// - On success, responds with [`ResetParameterGroupOutput`](crate::output::ResetParameterGroupOutput) with field(s):
    ///   - [`parameter_group(Option<ParameterGroup>)`](crate::output::ResetParameterGroupOutput::parameter_group): <p>The parameter group being reset.</p>
    /// - On failure, responds with [`SdkError<ResetParameterGroupError>`](crate::error::ResetParameterGroupError)
    pub fn reset_parameter_group(&self) -> crate::client::fluent_builders::ResetParameterGroup {
        crate::client::fluent_builders::ResetParameterGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be added</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput) with field(s):
    ///   - [`tag_list(Option<Vec<Tag>>)`](crate::output::TagResourceOutput::tag_list): <p>A list of tags as key-value pairs.</p>
    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource to which the tags are to be removed</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of keys of the tags that are to be removed</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput) with field(s):
    ///   - [`tag_list(Option<Vec<Tag>>)`](crate::output::UntagResourceOutput::tag_list): <p>The list of tags removed</p>
    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateACL`](crate::client::fluent_builders::UpdateACL) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::UpdateACL::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::UpdateACL::set_acl_name): <p>The name of the Access Control List</p>
    ///   - [`user_names_to_add(Vec<String>)`](crate::client::fluent_builders::UpdateACL::user_names_to_add) / [`set_user_names_to_add(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateACL::set_user_names_to_add): <p>The list of users to add to the Access Control List</p>
    ///   - [`user_names_to_remove(Vec<String>)`](crate::client::fluent_builders::UpdateACL::user_names_to_remove) / [`set_user_names_to_remove(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateACL::set_user_names_to_remove): <p>The list of users to remove from the Access Control List</p>
    /// - On success, responds with [`UpdateAclOutput`](crate::output::UpdateAclOutput) with field(s):
    ///   - [`acl(Option<Acl>)`](crate::output::UpdateAclOutput::acl): <p>The updated Access Control List</p>
    /// - On failure, responds with [`SdkError<UpdateACLError>`](crate::error::UpdateACLError)
    pub fn update_acl(&self) -> crate::client::fluent_builders::UpdateACL {
        crate::client::fluent_builders::UpdateACL::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCluster`](crate::client::fluent_builders::UpdateCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_cluster_name): <p>The name of the cluster to update</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_description): <p>The description of the cluster to update</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::client::fluent_builders::UpdateCluster::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateCluster::set_security_group_ids): <p>The SecurityGroupIds to update</p>
    ///   - [`maintenance_window(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::maintenance_window) / [`set_maintenance_window(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_maintenance_window): <p>Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.</p>  <p>Valid values for <code>ddd</code> are:</p>  <ul>   <li> <p> <code>sun</code> </p> </li>   <li> <p> <code>mon</code> </p> </li>   <li> <p> <code>tue</code> </p> </li>   <li> <p> <code>wed</code> </p> </li>   <li> <p> <code>thu</code> </p> </li>   <li> <p> <code>fri</code> </p> </li>   <li> <p> <code>sat</code> </p> </li>  </ul>  <p>Example: <code>sun:23:00-mon:01:30</code> </p>
    ///   - [`sns_topic_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::sns_topic_arn) / [`set_sns_topic_arn(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_sns_topic_arn): <p>The SNS topic ARN to update</p>
    ///   - [`sns_topic_status(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::sns_topic_status) / [`set_sns_topic_status(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_sns_topic_status): <p>The status of the Amazon SNS notification topic. Notifications are sent only if the status is active.</p>
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_parameter_group_name): <p>The name of the parameter group to update</p>
    ///   - [`snapshot_window(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::snapshot_window) / [`set_snapshot_window(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_snapshot_window): <p>The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.</p>
    ///   - [`snapshot_retention_limit(i32)`](crate::client::fluent_builders::UpdateCluster::snapshot_retention_limit) / [`set_snapshot_retention_limit(Option<i32>)`](crate::client::fluent_builders::UpdateCluster::set_snapshot_retention_limit): <p>The number of days for which MemoryDB retains automatic cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.</p>
    ///   - [`node_type(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::node_type) / [`set_node_type(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_node_type): <p>A valid node type that you want to scale this cluster up or down to.</p>
    ///   - [`engine_version(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::engine_version) / [`set_engine_version(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_engine_version): <p>The upgraded version of the engine to be run on the nodes. You can upgrade to a newer engine version, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version.</p>
    ///   - [`replica_configuration(ReplicaConfigurationRequest)`](crate::client::fluent_builders::UpdateCluster::replica_configuration) / [`set_replica_configuration(Option<ReplicaConfigurationRequest>)`](crate::client::fluent_builders::UpdateCluster::set_replica_configuration): <p>The number of replicas that will reside in each shard</p>
    ///   - [`shard_configuration(ShardConfigurationRequest)`](crate::client::fluent_builders::UpdateCluster::shard_configuration) / [`set_shard_configuration(Option<ShardConfigurationRequest>)`](crate::client::fluent_builders::UpdateCluster::set_shard_configuration): <p>The number of shards in the cluster</p>
    ///   - [`acl_name(impl Into<String>)`](crate::client::fluent_builders::UpdateCluster::acl_name) / [`set_acl_name(Option<String>)`](crate::client::fluent_builders::UpdateCluster::set_acl_name): <p>The Access Control List that is associated with the cluster</p>
    /// - On success, responds with [`UpdateClusterOutput`](crate::output::UpdateClusterOutput) with field(s):
    ///   - [`cluster(Option<Cluster>)`](crate::output::UpdateClusterOutput::cluster): <p>The updated cluster</p>
    /// - On failure, responds with [`SdkError<UpdateClusterError>`](crate::error::UpdateClusterError)
    pub fn update_cluster(&self) -> crate::client::fluent_builders::UpdateCluster {
        crate::client::fluent_builders::UpdateCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateParameterGroup`](crate::client::fluent_builders::UpdateParameterGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`parameter_group_name(impl Into<String>)`](crate::client::fluent_builders::UpdateParameterGroup::parameter_group_name) / [`set_parameter_group_name(Option<String>)`](crate::client::fluent_builders::UpdateParameterGroup::set_parameter_group_name): <p>The name of the parameter group to update.</p>
    ///   - [`parameter_name_values(Vec<ParameterNameValue>)`](crate::client::fluent_builders::UpdateParameterGroup::parameter_name_values) / [`set_parameter_name_values(Option<Vec<ParameterNameValue>>)`](crate::client::fluent_builders::UpdateParameterGroup::set_parameter_name_values): <p>An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be updated per request.</p>
    /// - On success, responds with [`UpdateParameterGroupOutput`](crate::output::UpdateParameterGroupOutput) with field(s):
    ///   - [`parameter_group(Option<ParameterGroup>)`](crate::output::UpdateParameterGroupOutput::parameter_group): <p>The updated parameter group</p>
    /// - On failure, responds with [`SdkError<UpdateParameterGroupError>`](crate::error::UpdateParameterGroupError)
    pub fn update_parameter_group(&self) -> crate::client::fluent_builders::UpdateParameterGroup {
        crate::client::fluent_builders::UpdateParameterGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSubnetGroup`](crate::client::fluent_builders::UpdateSubnetGroup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subnet_group_name(impl Into<String>)`](crate::client::fluent_builders::UpdateSubnetGroup::subnet_group_name) / [`set_subnet_group_name(Option<String>)`](crate::client::fluent_builders::UpdateSubnetGroup::set_subnet_group_name): <p>The name of the subnet group</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateSubnetGroup::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateSubnetGroup::set_description): <p>A description of the subnet group</p>
    ///   - [`subnet_ids(Vec<String>)`](crate::client::fluent_builders::UpdateSubnetGroup::subnet_ids) / [`set_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateSubnetGroup::set_subnet_ids): <p>The EC2 subnet IDs for the subnet group.</p>
    /// - On success, responds with [`UpdateSubnetGroupOutput`](crate::output::UpdateSubnetGroupOutput) with field(s):
    ///   - [`subnet_group(Option<SubnetGroup>)`](crate::output::UpdateSubnetGroupOutput::subnet_group): <p>The updated subnet group</p>
    /// - On failure, responds with [`SdkError<UpdateSubnetGroupError>`](crate::error::UpdateSubnetGroupError)
    pub fn update_subnet_group(&self) -> crate::client::fluent_builders::UpdateSubnetGroup {
        crate::client::fluent_builders::UpdateSubnetGroup::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateUser`](crate::client::fluent_builders::UpdateUser) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`user_name(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::user_name) / [`set_user_name(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_user_name): <p>The name of the user</p>
    ///   - [`authentication_mode(AuthenticationMode)`](crate::client::fluent_builders::UpdateUser::authentication_mode) / [`set_authentication_mode(Option<AuthenticationMode>)`](crate::client::fluent_builders::UpdateUser::set_authentication_mode): <p>Denotes the user's authentication properties, such as whether it requires a password to authenticate.</p>
    ///   - [`access_string(impl Into<String>)`](crate::client::fluent_builders::UpdateUser::access_string) / [`set_access_string(Option<String>)`](crate::client::fluent_builders::UpdateUser::set_access_string): <p>Access permissions string used for this user.</p>
    /// - On success, responds with [`UpdateUserOutput`](crate::output::UpdateUserOutput) with field(s):
    ///   - [`user(Option<User>)`](crate::output::UpdateUserOutput::user): <p>The updated user</p>
    /// - On failure, responds with [`SdkError<UpdateUserError>`](crate::error::UpdateUserError)
    pub fn update_user(&self) -> crate::client::fluent_builders::UpdateUser {
        crate::client::fluent_builders::UpdateUser::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
