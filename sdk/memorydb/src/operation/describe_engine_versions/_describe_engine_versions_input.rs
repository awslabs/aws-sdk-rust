// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEngineVersionsInput {
    /// <p>The Redis engine version</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The name of a specific parameter group family to return details for.</p>
    #[doc(hidden)]
    pub parameter_group_family: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>
    #[doc(hidden)]
    pub default_only: bool,
}
impl DescribeEngineVersionsInput {
    /// <p>The Redis engine version</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    pub fn parameter_group_family(&self) -> std::option::Option<&str> {
        self.parameter_group_family.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>
    pub fn default_only(&self) -> bool {
        self.default_only
    }
}
impl DescribeEngineVersionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEngineVersionsInput`](crate::operation::describe_engine_versions::DescribeEngineVersionsInput).
    pub fn builder(
    ) -> crate::operation::describe_engine_versions::builders::DescribeEngineVersionsInputBuilder
    {
        crate::operation::describe_engine_versions::builders::DescribeEngineVersionsInputBuilder::default()
    }
}

/// A builder for [`DescribeEngineVersionsInput`](crate::operation::describe_engine_versions::DescribeEngineVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEngineVersionsInputBuilder {
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) parameter_group_family: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) default_only: std::option::Option<bool>,
}
impl DescribeEngineVersionsInputBuilder {
    /// <p>The Redis engine version</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The Redis engine version</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    pub fn parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_group_family = Some(input.into());
        self
    }
    /// <p>The name of a specific parameter group family to return details for.</p>
    pub fn set_parameter_group_family(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parameter_group_family = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>
    pub fn default_only(mut self, input: bool) -> Self {
        self.default_only = Some(input);
        self
    }
    /// <p>If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.</p>
    pub fn set_default_only(mut self, input: std::option::Option<bool>) -> Self {
        self.default_only = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEngineVersionsInput`](crate::operation::describe_engine_versions::DescribeEngineVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_engine_versions::DescribeEngineVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_engine_versions::DescribeEngineVersionsInput {
                engine_version: self.engine_version,
                parameter_group_family: self.parameter_group_family,
                max_results: self.max_results,
                next_token: self.next_token,
                default_only: self.default_only.unwrap_or_default(),
            },
        )
    }
}
