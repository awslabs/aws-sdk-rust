// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PurchaseReservedNodesOfferingInput {
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub reserved_nodes_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of node instances to reserve.</p>
    pub node_count: ::std::option::Option<i32>,
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PurchaseReservedNodesOfferingInput {
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn reserved_nodes_offering_id(&self) -> ::std::option::Option<&str> {
        self.reserved_nodes_offering_id.as_deref()
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_id(&self) -> ::std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn node_count(&self) -> ::std::option::Option<i32> {
        self.node_count
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PurchaseReservedNodesOfferingInput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedNodesOfferingInput`](crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingInput).
    pub fn builder() -> crate::operation::purchase_reserved_nodes_offering::builders::PurchaseReservedNodesOfferingInputBuilder {
        crate::operation::purchase_reserved_nodes_offering::builders::PurchaseReservedNodesOfferingInputBuilder::default()
    }
}

/// A builder for [`PurchaseReservedNodesOfferingInput`](crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PurchaseReservedNodesOfferingInputBuilder {
    pub(crate) reserved_nodes_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_count: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl PurchaseReservedNodesOfferingInputBuilder {
    /// <p>The ID of the reserved node offering to purchase.</p>
    /// This field is required.
    pub fn reserved_nodes_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_nodes_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn set_reserved_nodes_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_nodes_offering_id = input;
        self
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn get_reserved_nodes_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_nodes_offering_id
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn set_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_id = input;
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn get_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_id
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn node_count(mut self, input: i32) -> Self {
        self.node_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn set_node_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.node_count = input;
        self
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn get_node_count(&self) -> &::std::option::Option<i32> {
        &self.node_count
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PurchaseReservedNodesOfferingInput`](crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingInput {
            reserved_nodes_offering_id: self.reserved_nodes_offering_id,
            reservation_id: self.reservation_id,
            node_count: self.node_count,
            tags: self.tags,
        })
    }
}
