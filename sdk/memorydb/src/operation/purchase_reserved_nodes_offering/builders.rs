// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::purchase_reserved_nodes_offering::_purchase_reserved_nodes_offering_output::PurchaseReservedNodesOfferingOutputBuilder;

pub use crate::operation::purchase_reserved_nodes_offering::_purchase_reserved_nodes_offering_input::PurchaseReservedNodesOfferingInputBuilder;

/// Fluent builder constructing a request to `PurchaseReservedNodesOffering`.
///
/// <p>Allows you to purchase a reserved node offering. Reserved nodes are not eligible for cancellation and are non-refundable.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PurchaseReservedNodesOfferingFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::purchase_reserved_nodes_offering::builders::PurchaseReservedNodesOfferingInputBuilder
            }
impl PurchaseReservedNodesOfferingFluentBuilder {
    /// Creates a new `PurchaseReservedNodesOffering`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOffering,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_reserved_nodes_offering::PurchaseReservedNodesOfferingError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn reserved_nodes_offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reserved_nodes_offering_id(input.into());
        self
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn set_reserved_nodes_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reserved_nodes_offering_id(input);
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reservation_id(input.into());
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn set_reservation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_reservation_id(input);
        self
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn node_count(mut self, input: i32) -> Self {
        self.inner = self.inner.node_count(input);
        self
    }
    /// <p>The number of node instances to reserve.</p>
    pub fn set_node_count(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_node_count(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
