// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reset_parameter_group::_reset_parameter_group_output::ResetParameterGroupOutputBuilder;

pub use crate::operation::reset_parameter_group::_reset_parameter_group_input::ResetParameterGroupInputBuilder;

/// Fluent builder constructing a request to `ResetParameterGroup`.
///
/// <p>Modifies the parameters of a parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire parameter group, specify the AllParameters and ParameterGroupName parameters.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ResetParameterGroupFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reset_parameter_group::builders::ResetParameterGroupInputBuilder,
}
impl ResetParameterGroupFluentBuilder {
    /// Creates a new `ResetParameterGroup`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::reset_parameter_group::ResetParameterGroup,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::reset_parameter_group::ResetParameterGroupError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::reset_parameter_group::ResetParameterGroupOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::reset_parameter_group::ResetParameterGroupError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the parameter group to reset.</p>
    pub fn parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parameter_group_name(input.into());
        self
    }
    /// <p>The name of the parameter group to reset.</p>
    pub fn set_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_parameter_group_name(input);
        self
    }
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    pub fn all_parameters(mut self, input: bool) -> Self {
        self.inner = self.inner.all_parameters(input);
        self
    }
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    pub fn set_all_parameters(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_all_parameters(input);
        self
    }
    /// Appends an item to `ParameterNames`.
    ///
    /// To override the contents of this collection use [`set_parameter_names`](Self::set_parameter_names).
    ///
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    pub fn parameter_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.parameter_names(input.into());
        self
    }
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    pub fn set_parameter_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_parameter_names(input);
        self
    }
}
