// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResetParameterGroupInput {
    /// <p>The name of the parameter group to reset.</p>
    #[doc(hidden)]
    pub parameter_group_name: std::option::Option<std::string::String>,
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    #[doc(hidden)]
    pub all_parameters: bool,
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    #[doc(hidden)]
    pub parameter_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResetParameterGroupInput {
    /// <p>The name of the parameter group to reset.</p>
    pub fn parameter_group_name(&self) -> std::option::Option<&str> {
        self.parameter_group_name.as_deref()
    }
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    pub fn all_parameters(&self) -> bool {
        self.all_parameters
    }
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    pub fn parameter_names(&self) -> std::option::Option<&[std::string::String]> {
        self.parameter_names.as_deref()
    }
}
impl ResetParameterGroupInput {
    /// Creates a new builder-style object to manufacture [`ResetParameterGroupInput`](crate::operation::reset_parameter_group::ResetParameterGroupInput).
    pub fn builder(
    ) -> crate::operation::reset_parameter_group::builders::ResetParameterGroupInputBuilder {
        crate::operation::reset_parameter_group::builders::ResetParameterGroupInputBuilder::default(
        )
    }
}

/// A builder for [`ResetParameterGroupInput`](crate::operation::reset_parameter_group::ResetParameterGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResetParameterGroupInputBuilder {
    pub(crate) parameter_group_name: std::option::Option<std::string::String>,
    pub(crate) all_parameters: std::option::Option<bool>,
    pub(crate) parameter_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ResetParameterGroupInputBuilder {
    /// <p>The name of the parameter group to reset.</p>
    pub fn parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_group_name = Some(input.into());
        self
    }
    /// <p>The name of the parameter group to reset.</p>
    pub fn set_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parameter_group_name = input;
        self
    }
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    pub fn all_parameters(mut self, input: bool) -> Self {
        self.all_parameters = Some(input);
        self
    }
    /// <p>If true, all parameters in the parameter group are reset to their default values. If false, only the parameters listed by ParameterNames are reset to their default values.</p>
    pub fn set_all_parameters(mut self, input: std::option::Option<bool>) -> Self {
        self.all_parameters = input;
        self
    }
    /// Appends an item to `parameter_names`.
    ///
    /// To override the contents of this collection use [`set_parameter_names`](Self::set_parameter_names).
    ///
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    pub fn parameter_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.parameter_names.unwrap_or_default();
        v.push(input.into());
        self.parameter_names = Some(v);
        self
    }
    /// <p>An array of parameter names to reset to their default values. If AllParameters is true, do not use ParameterNames. If AllParameters is false, you must specify the name of at least one parameter to reset.</p>
    pub fn set_parameter_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.parameter_names = input;
        self
    }
    /// Consumes the builder and constructs a [`ResetParameterGroupInput`](crate::operation::reset_parameter_group::ResetParameterGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::reset_parameter_group::ResetParameterGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::reset_parameter_group::ResetParameterGroupInput {
                parameter_group_name: self.parameter_group_name,
                all_parameters: self.all_parameters.unwrap_or_default(),
                parameter_names: self.parameter_names,
            },
        )
    }
}
