// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateAclInput {
    /// <p>The name of the Access Control List</p>
    pub acl_name: ::std::option::Option<::std::string::String>,
    /// <p>The list of users to add to the Access Control List</p>
    pub user_names_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The list of users to remove from the Access Control List</p>
    pub user_names_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateAclInput {
    /// <p>The name of the Access Control List</p>
    pub fn acl_name(&self) -> ::std::option::Option<&str> {
        self.acl_name.as_deref()
    }
    /// <p>The list of users to add to the Access Control List</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_names_to_add.is_none()`.
    pub fn user_names_to_add(&self) -> &[::std::string::String] {
        self.user_names_to_add.as_deref().unwrap_or_default()
    }
    /// <p>The list of users to remove from the Access Control List</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_names_to_remove.is_none()`.
    pub fn user_names_to_remove(&self) -> &[::std::string::String] {
        self.user_names_to_remove.as_deref().unwrap_or_default()
    }
}
impl UpdateAclInput {
    /// Creates a new builder-style object to manufacture [`UpdateAclInput`](crate::operation::update_acl::UpdateAclInput).
    pub fn builder() -> crate::operation::update_acl::builders::UpdateAclInputBuilder {
        crate::operation::update_acl::builders::UpdateAclInputBuilder::default()
    }
}

/// A builder for [`UpdateAclInput`](crate::operation::update_acl::UpdateAclInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateAclInputBuilder {
    pub(crate) acl_name: ::std::option::Option<::std::string::String>,
    pub(crate) user_names_to_add: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) user_names_to_remove: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateAclInputBuilder {
    /// <p>The name of the Access Control List</p>
    /// This field is required.
    pub fn acl_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.acl_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Access Control List</p>
    pub fn set_acl_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.acl_name = input;
        self
    }
    /// <p>The name of the Access Control List</p>
    pub fn get_acl_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.acl_name
    }
    /// Appends an item to `user_names_to_add`.
    ///
    /// To override the contents of this collection use [`set_user_names_to_add`](Self::set_user_names_to_add).
    ///
    /// <p>The list of users to add to the Access Control List</p>
    pub fn user_names_to_add(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_names_to_add.unwrap_or_default();
        v.push(input.into());
        self.user_names_to_add = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of users to add to the Access Control List</p>
    pub fn set_user_names_to_add(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_names_to_add = input;
        self
    }
    /// <p>The list of users to add to the Access Control List</p>
    pub fn get_user_names_to_add(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_names_to_add
    }
    /// Appends an item to `user_names_to_remove`.
    ///
    /// To override the contents of this collection use [`set_user_names_to_remove`](Self::set_user_names_to_remove).
    ///
    /// <p>The list of users to remove from the Access Control List</p>
    pub fn user_names_to_remove(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_names_to_remove.unwrap_or_default();
        v.push(input.into());
        self.user_names_to_remove = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of users to remove from the Access Control List</p>
    pub fn set_user_names_to_remove(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_names_to_remove = input;
        self
    }
    /// <p>The list of users to remove from the Access Control List</p>
    pub fn get_user_names_to_remove(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_names_to_remove
    }
    /// Consumes the builder and constructs a [`UpdateAclInput`](crate::operation::update_acl::UpdateAclInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_acl::UpdateAclInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_acl::UpdateAclInput {
            acl_name: self.acl_name,
            user_names_to_add: self.user_names_to_add,
            user_names_to_remove: self.user_names_to_remove,
        })
    }
}
