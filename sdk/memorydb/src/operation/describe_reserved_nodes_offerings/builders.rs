// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_reserved_nodes_offerings::_describe_reserved_nodes_offerings_output::DescribeReservedNodesOfferingsOutputBuilder;

pub use crate::operation::describe_reserved_nodes_offerings::_describe_reserved_nodes_offerings_input::DescribeReservedNodesOfferingsInputBuilder;

/// Fluent builder constructing a request to `DescribeReservedNodesOfferings`.
///
/// <p>Lists available reserved node offerings.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReservedNodesOfferingsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_reserved_nodes_offerings::builders::DescribeReservedNodesOfferingsInputBuilder
            }
impl DescribeReservedNodesOfferingsFluentBuilder {
    /// Creates a new `DescribeReservedNodesOfferings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferings, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferingsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferingsOutput, aws_smithy_http::result::SdkError<crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferingsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_reserved_nodes_offerings::paginator::DescribeReservedNodesOfferingsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_reserved_nodes_offerings::paginator::DescribeReservedNodesOfferingsPaginator{
        crate::operation::describe_reserved_nodes_offerings::paginator::DescribeReservedNodesOfferingsPaginator::new(self.handle, self.inner)
    }
    /// <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
    pub fn reserved_nodes_offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.reserved_nodes_offering_id(input.into());
        self
    }
    /// <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
    pub fn set_reserved_nodes_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_reserved_nodes_offering_id(input);
        self
    }
    /// <p>The node type for the reserved nodes. For more information, see <a href="https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.reserved.html#reserved-nodes-supported">Supported node types</a>.</p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_type(input.into());
        self
    }
    /// <p>The node type for the reserved nodes. For more information, see <a href="https://docs.aws.amazon.com/memorydb/latest/devguide/nodes.reserved.html#reserved-nodes-supported">Supported node types</a>.</p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_type(input);
        self
    }
    /// <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p>
    pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.duration(input.into());
        self
    }
    /// <p>Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.</p>
    pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_duration(input);
        self
    }
    /// <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "All Upfront"|"Partial Upfront"| "No Upfront"</p>
    pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.offering_type(input.into());
        self
    }
    /// <p>The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "All Upfront"|"Partial Upfront"| "No Upfront"</p>
    pub fn set_offering_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_offering_type(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
