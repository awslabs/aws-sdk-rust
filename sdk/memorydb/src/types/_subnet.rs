// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the subnet associated with a cluster. This parameter refers to subnets defined in Amazon Virtual Private Cloud (Amazon VPC) and used with MemoryDB.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Subnet {
    /// <p>The unique identifier for the subnet.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>The Availability Zone where the subnet resides</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<crate::types::AvailabilityZone>,
}
impl Subnet {
    /// <p>The unique identifier for the subnet.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The Availability Zone where the subnet resides</p>
    pub fn availability_zone(&self) -> std::option::Option<&crate::types::AvailabilityZone> {
        self.availability_zone.as_ref()
    }
}
impl Subnet {
    /// Creates a new builder-style object to manufacture [`Subnet`](crate::types::Subnet).
    pub fn builder() -> crate::types::builders::SubnetBuilder {
        crate::types::builders::SubnetBuilder::default()
    }
}

/// A builder for [`Subnet`](crate::types::Subnet).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubnetBuilder {
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<crate::types::AvailabilityZone>,
}
impl SubnetBuilder {
    /// <p>The unique identifier for the subnet.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>The unique identifier for the subnet.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The Availability Zone where the subnet resides</p>
    pub fn availability_zone(mut self, input: crate::types::AvailabilityZone) -> Self {
        self.availability_zone = Some(input);
        self
    }
    /// <p>The Availability Zone where the subnet resides</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<crate::types::AvailabilityZone>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// Consumes the builder and constructs a [`Subnet`](crate::types::Subnet).
    pub fn build(self) -> crate::types::Subnet {
        crate::types::Subnet {
            identifier: self.identifier,
            availability_zone: self.availability_zone,
        }
    }
}
