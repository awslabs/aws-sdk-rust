// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to apply a service update</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceUpdateRequest {
    /// <p>The unique ID of the service update</p>
    #[doc(hidden)]
    pub service_update_name_to_apply: std::option::Option<std::string::String>,
}
impl ServiceUpdateRequest {
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name_to_apply(&self) -> std::option::Option<&str> {
        self.service_update_name_to_apply.as_deref()
    }
}
impl ServiceUpdateRequest {
    /// Creates a new builder-style object to manufacture [`ServiceUpdateRequest`](crate::types::ServiceUpdateRequest).
    pub fn builder() -> crate::types::builders::ServiceUpdateRequestBuilder {
        crate::types::builders::ServiceUpdateRequestBuilder::default()
    }
}

/// A builder for [`ServiceUpdateRequest`](crate::types::ServiceUpdateRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceUpdateRequestBuilder {
    pub(crate) service_update_name_to_apply: std::option::Option<std::string::String>,
}
impl ServiceUpdateRequestBuilder {
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name_to_apply(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_update_name_to_apply = Some(input.into());
        self
    }
    /// <p>The unique ID of the service update</p>
    pub fn set_service_update_name_to_apply(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_update_name_to_apply = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceUpdateRequest`](crate::types::ServiceUpdateRequest).
    pub fn build(self) -> crate::types::ServiceUpdateRequest {
        crate::types::ServiceUpdateRequest {
            service_update_name_to_apply: self.service_update_name_to_apply,
        }
    }
}
