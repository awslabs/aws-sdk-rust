// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of one of the following operations:</p>
/// <ul>
/// <li> <p>CreateSubnetGroup</p> </li>
/// <li> <p>UpdateSubnetGroup</p> </li>
/// </ul>
/// <p>A subnet group is a collection of subnets (typically private) that you can designate for your clusters running in an Amazon Virtual Private Cloud (VPC) environment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubnetGroup {
    /// <p>The name of the subnet group</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the subnet group</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>A list of subnets associated with the subnet group.</p>
    #[doc(hidden)]
    pub subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    /// <p>The ARN (Amazon Resource Name) of the subnet group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
}
impl SubnetGroup {
    /// <p>The name of the subnet group</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the subnet group</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>A list of subnets associated with the subnet group.</p>
    pub fn subnets(&self) -> std::option::Option<&[crate::types::Subnet]> {
        self.subnets.as_deref()
    }
    /// <p>The ARN (Amazon Resource Name) of the subnet group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl SubnetGroup {
    /// Creates a new builder-style object to manufacture [`SubnetGroup`](crate::types::SubnetGroup).
    pub fn builder() -> crate::types::builders::SubnetGroupBuilder {
        crate::types::builders::SubnetGroupBuilder::default()
    }
}

/// A builder for [`SubnetGroup`](crate::types::SubnetGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubnetGroupBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnets: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    pub(crate) arn: std::option::Option<std::string::String>,
}
impl SubnetGroupBuilder {
    /// <p>The name of the subnet group</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the subnet group</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the subnet group</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the subnet group</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Appends an item to `subnets`.
    ///
    /// To override the contents of this collection use [`set_subnets`](Self::set_subnets).
    ///
    /// <p>A list of subnets associated with the subnet group.</p>
    pub fn subnets(mut self, input: crate::types::Subnet) -> Self {
        let mut v = self.subnets.unwrap_or_default();
        v.push(input);
        self.subnets = Some(v);
        self
    }
    /// <p>A list of subnets associated with the subnet group.</p>
    pub fn set_subnets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Subnet>>,
    ) -> Self {
        self.subnets = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the subnet group.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the subnet group.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Consumes the builder and constructs a [`SubnetGroup`](crate::types::SubnetGroup).
    pub fn build(self) -> crate::types::SubnetGroup {
        crate::types::SubnetGroup {
            name: self.name,
            description: self.description,
            vpc_id: self.vpc_id,
            subnets: self.subnets,
            arn: self.arn,
        }
    }
}
