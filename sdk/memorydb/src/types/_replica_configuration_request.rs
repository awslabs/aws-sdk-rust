// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to configure the number of replicas in a shard</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicaConfigurationRequest {
    /// <p>The number of replicas to scale up or down to</p>
    #[doc(hidden)]
    pub replica_count: i32,
}
impl ReplicaConfigurationRequest {
    /// <p>The number of replicas to scale up or down to</p>
    pub fn replica_count(&self) -> i32 {
        self.replica_count
    }
}
impl ReplicaConfigurationRequest {
    /// Creates a new builder-style object to manufacture [`ReplicaConfigurationRequest`](crate::types::ReplicaConfigurationRequest).
    pub fn builder() -> crate::types::builders::ReplicaConfigurationRequestBuilder {
        crate::types::builders::ReplicaConfigurationRequestBuilder::default()
    }
}

/// A builder for [`ReplicaConfigurationRequest`](crate::types::ReplicaConfigurationRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicaConfigurationRequestBuilder {
    pub(crate) replica_count: std::option::Option<i32>,
}
impl ReplicaConfigurationRequestBuilder {
    /// <p>The number of replicas to scale up or down to</p>
    pub fn replica_count(mut self, input: i32) -> Self {
        self.replica_count = Some(input);
        self
    }
    /// <p>The number of replicas to scale up or down to</p>
    pub fn set_replica_count(mut self, input: std::option::Option<i32>) -> Self {
        self.replica_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicaConfigurationRequest`](crate::types::ReplicaConfigurationRequest).
    pub fn build(self) -> crate::types::ReplicaConfigurationRequest {
        crate::types::ReplicaConfigurationRequest {
            replica_count: self.replica_count.unwrap_or_default(),
        }
    }
}
