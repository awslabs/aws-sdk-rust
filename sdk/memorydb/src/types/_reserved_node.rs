// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of a <code>PurchaseReservedNodesOffering</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReservedNode {
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub reservation_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub reserved_nodes_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>The node type for the reserved nodes.</p>
    pub node_type: ::std::option::Option<::std::string::String>,
    /// <p>The time the reservation started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The duration of the reservation in seconds.</p>
    pub duration: i32,
    /// <p>The fixed price charged for this reserved node.</p>
    pub fixed_price: f64,
    /// <p>The number of nodes that have been reserved.</p>
    pub node_count: i32,
    /// <p>The offering type of this reserved node.</p>
    pub offering_type: ::std::option::Option<::std::string::String>,
    /// <p>The state of the reserved node.</p>
    pub state: ::std::option::Option<::std::string::String>,
    /// <p>The recurring price charged to run this reserved node.</p>
    pub recurring_charges: ::std::option::Option<::std::vec::Vec<crate::types::RecurringCharge>>,
    /// <p>The Amazon Resource Name (ARN) of the reserved node.</p>
    pub arn: ::std::option::Option<::std::string::String>,
}
impl ReservedNode {
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_id(&self) -> ::std::option::Option<&str> {
        self.reservation_id.as_deref()
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn reserved_nodes_offering_id(&self) -> ::std::option::Option<&str> {
        self.reserved_nodes_offering_id.as_deref()
    }
    /// <p>The node type for the reserved nodes.</p>
    pub fn node_type(&self) -> ::std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The time the reservation started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The fixed price charged for this reserved node.</p>
    pub fn fixed_price(&self) -> f64 {
        self.fixed_price
    }
    /// <p>The number of nodes that have been reserved.</p>
    pub fn node_count(&self) -> i32 {
        self.node_count
    }
    /// <p>The offering type of this reserved node.</p>
    pub fn offering_type(&self) -> ::std::option::Option<&str> {
        self.offering_type.as_deref()
    }
    /// <p>The state of the reserved node.</p>
    pub fn state(&self) -> ::std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The recurring price charged to run this reserved node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recurring_charges.is_none()`.
    pub fn recurring_charges(&self) -> &[crate::types::RecurringCharge] {
        self.recurring_charges.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the reserved node.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl ReservedNode {
    /// Creates a new builder-style object to manufacture [`ReservedNode`](crate::types::ReservedNode).
    pub fn builder() -> crate::types::builders::ReservedNodeBuilder {
        crate::types::builders::ReservedNodeBuilder::default()
    }
}

/// A builder for [`ReservedNode`](crate::types::ReservedNode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReservedNodeBuilder {
    pub(crate) reservation_id: ::std::option::Option<::std::string::String>,
    pub(crate) reserved_nodes_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) node_type: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration: ::std::option::Option<i32>,
    pub(crate) fixed_price: ::std::option::Option<f64>,
    pub(crate) node_count: ::std::option::Option<i32>,
    pub(crate) offering_type: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<::std::string::String>,
    pub(crate) recurring_charges: ::std::option::Option<::std::vec::Vec<crate::types::RecurringCharge>>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
}
impl ReservedNodeBuilder {
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn set_reservation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_id = input;
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn get_reservation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_id
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn reserved_nodes_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_nodes_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn set_reserved_nodes_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_nodes_offering_id = input;
        self
    }
    /// <p>The ID of the reserved node offering to purchase.</p>
    pub fn get_reserved_nodes_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_nodes_offering_id
    }
    /// <p>The node type for the reserved nodes.</p>
    pub fn node_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node type for the reserved nodes.</p>
    pub fn set_node_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The node type for the reserved nodes.</p>
    pub fn get_node_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_type
    }
    /// <p>The time the reservation started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the reservation started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time the reservation started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn set_duration(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn get_duration(&self) -> &::std::option::Option<i32> {
        &self.duration
    }
    /// <p>The fixed price charged for this reserved node.</p>
    pub fn fixed_price(mut self, input: f64) -> Self {
        self.fixed_price = ::std::option::Option::Some(input);
        self
    }
    /// <p>The fixed price charged for this reserved node.</p>
    pub fn set_fixed_price(mut self, input: ::std::option::Option<f64>) -> Self {
        self.fixed_price = input;
        self
    }
    /// <p>The fixed price charged for this reserved node.</p>
    pub fn get_fixed_price(&self) -> &::std::option::Option<f64> {
        &self.fixed_price
    }
    /// <p>The number of nodes that have been reserved.</p>
    pub fn node_count(mut self, input: i32) -> Self {
        self.node_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of nodes that have been reserved.</p>
    pub fn set_node_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.node_count = input;
        self
    }
    /// <p>The number of nodes that have been reserved.</p>
    pub fn get_node_count(&self) -> &::std::option::Option<i32> {
        &self.node_count
    }
    /// <p>The offering type of this reserved node.</p>
    pub fn offering_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.offering_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The offering type of this reserved node.</p>
    pub fn set_offering_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.offering_type = input;
        self
    }
    /// <p>The offering type of this reserved node.</p>
    pub fn get_offering_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.offering_type
    }
    /// <p>The state of the reserved node.</p>
    pub fn state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The state of the reserved node.</p>
    pub fn set_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The state of the reserved node.</p>
    pub fn get_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.state
    }
    /// Appends an item to `recurring_charges`.
    ///
    /// To override the contents of this collection use [`set_recurring_charges`](Self::set_recurring_charges).
    ///
    /// <p>The recurring price charged to run this reserved node.</p>
    pub fn recurring_charges(mut self, input: crate::types::RecurringCharge) -> Self {
        let mut v = self.recurring_charges.unwrap_or_default();
        v.push(input);
        self.recurring_charges = ::std::option::Option::Some(v);
        self
    }
    /// <p>The recurring price charged to run this reserved node.</p>
    pub fn set_recurring_charges(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecurringCharge>>) -> Self {
        self.recurring_charges = input;
        self
    }
    /// <p>The recurring price charged to run this reserved node.</p>
    pub fn get_recurring_charges(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecurringCharge>> {
        &self.recurring_charges
    }
    /// <p>The Amazon Resource Name (ARN) of the reserved node.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reserved node.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the reserved node.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Consumes the builder and constructs a [`ReservedNode`](crate::types::ReservedNode).
    pub fn build(self) -> crate::types::ReservedNode {
        crate::types::ReservedNode {
            reservation_id: self.reservation_id,
            reserved_nodes_offering_id: self.reserved_nodes_offering_id,
            node_type: self.node_type,
            start_time: self.start_time,
            duration: self.duration.unwrap_or_default(),
            fixed_price: self.fixed_price.unwrap_or_default(),
            node_count: self.node_count.unwrap_or_default(),
            offering_type: self.offering_type,
            state: self.state,
            recurring_charges: self.recurring_charges,
            arn: self.arn,
        }
    }
}
