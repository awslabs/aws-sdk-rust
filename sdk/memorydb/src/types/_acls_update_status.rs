// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the ACL update</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AcLsUpdateStatus {
    /// <p>A list of ACLs pending to be applied.</p>
    pub acl_to_apply: ::std::option::Option<::std::string::String>,
}
impl AcLsUpdateStatus {
    /// <p>A list of ACLs pending to be applied.</p>
    pub fn acl_to_apply(&self) -> ::std::option::Option<&str> {
        self.acl_to_apply.as_deref()
    }
}
impl AcLsUpdateStatus {
    /// Creates a new builder-style object to manufacture [`AcLsUpdateStatus`](crate::types::AcLsUpdateStatus).
    pub fn builder() -> crate::types::builders::AcLsUpdateStatusBuilder {
        crate::types::builders::AcLsUpdateStatusBuilder::default()
    }
}

/// A builder for [`AcLsUpdateStatus`](crate::types::AcLsUpdateStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AcLsUpdateStatusBuilder {
    pub(crate) acl_to_apply: ::std::option::Option<::std::string::String>,
}
impl AcLsUpdateStatusBuilder {
    /// <p>A list of ACLs pending to be applied.</p>
    pub fn acl_to_apply(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.acl_to_apply = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of ACLs pending to be applied.</p>
    pub fn set_acl_to_apply(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.acl_to_apply = input;
        self
    }
    /// <p>A list of ACLs pending to be applied.</p>
    pub fn get_acl_to_apply(&self) -> &::std::option::Option<::std::string::String> {
        &self.acl_to_apply
    }
    /// Consumes the builder and constructs a [`AcLsUpdateStatus`](crate::types::AcLsUpdateStatus).
    pub fn build(self) -> crate::types::AcLsUpdateStatus {
        crate::types::AcLsUpdateStatus {
            acl_to_apply: self.acl_to_apply,
        }
    }
}
