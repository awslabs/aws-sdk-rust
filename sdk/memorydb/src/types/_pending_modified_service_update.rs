// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Update action that has yet to be processed for the corresponding apply/stop request</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingModifiedServiceUpdate {
    /// <p>The unique ID of the service update</p>
    #[doc(hidden)]
    pub service_update_name: std::option::Option<std::string::String>,
    /// <p>The status of the service update</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ServiceUpdateStatus>,
}
impl PendingModifiedServiceUpdate {
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name(&self) -> std::option::Option<&str> {
        self.service_update_name.as_deref()
    }
    /// <p>The status of the service update</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ServiceUpdateStatus> {
        self.status.as_ref()
    }
}
impl PendingModifiedServiceUpdate {
    /// Creates a new builder-style object to manufacture [`PendingModifiedServiceUpdate`](crate::types::PendingModifiedServiceUpdate).
    pub fn builder() -> crate::types::builders::PendingModifiedServiceUpdateBuilder {
        crate::types::builders::PendingModifiedServiceUpdateBuilder::default()
    }
}

/// A builder for [`PendingModifiedServiceUpdate`](crate::types::PendingModifiedServiceUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingModifiedServiceUpdateBuilder {
    pub(crate) service_update_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ServiceUpdateStatus>,
}
impl PendingModifiedServiceUpdateBuilder {
    /// <p>The unique ID of the service update</p>
    pub fn service_update_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_update_name = Some(input.into());
        self
    }
    /// <p>The unique ID of the service update</p>
    pub fn set_service_update_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.service_update_name = input;
        self
    }
    /// <p>The status of the service update</p>
    pub fn status(mut self, input: crate::types::ServiceUpdateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the service update</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ServiceUpdateStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingModifiedServiceUpdate`](crate::types::PendingModifiedServiceUpdate).
    pub fn build(self) -> crate::types::PendingModifiedServiceUpdate {
        crate::types::PendingModifiedServiceUpdate {
            service_update_name: self.service_update_name,
            status: self.status,
        }
    }
}
