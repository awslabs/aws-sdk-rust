// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of updates being applied to the cluster</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterPendingUpdates {
    /// <p>The status of an online resharding operation.</p>
    pub resharding: ::std::option::Option<crate::types::ReshardingStatus>,
    /// <p>A list of ACLs associated with the cluster that are being updated</p>
    pub acls: ::std::option::Option<crate::types::AcLsUpdateStatus>,
    /// <p>A list of service updates being applied to the cluster</p>
    pub service_updates: ::std::option::Option<::std::vec::Vec<crate::types::PendingModifiedServiceUpdate>>,
}
impl ClusterPendingUpdates {
    /// <p>The status of an online resharding operation.</p>
    pub fn resharding(&self) -> ::std::option::Option<&crate::types::ReshardingStatus> {
        self.resharding.as_ref()
    }
    /// <p>A list of ACLs associated with the cluster that are being updated</p>
    pub fn acls(&self) -> ::std::option::Option<&crate::types::AcLsUpdateStatus> {
        self.acls.as_ref()
    }
    /// <p>A list of service updates being applied to the cluster</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.service_updates.is_none()`.
    pub fn service_updates(&self) -> &[crate::types::PendingModifiedServiceUpdate] {
        self.service_updates.as_deref().unwrap_or_default()
    }
}
impl ClusterPendingUpdates {
    /// Creates a new builder-style object to manufacture [`ClusterPendingUpdates`](crate::types::ClusterPendingUpdates).
    pub fn builder() -> crate::types::builders::ClusterPendingUpdatesBuilder {
        crate::types::builders::ClusterPendingUpdatesBuilder::default()
    }
}

/// A builder for [`ClusterPendingUpdates`](crate::types::ClusterPendingUpdates).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusterPendingUpdatesBuilder {
    pub(crate) resharding: ::std::option::Option<crate::types::ReshardingStatus>,
    pub(crate) acls: ::std::option::Option<crate::types::AcLsUpdateStatus>,
    pub(crate) service_updates: ::std::option::Option<::std::vec::Vec<crate::types::PendingModifiedServiceUpdate>>,
}
impl ClusterPendingUpdatesBuilder {
    /// <p>The status of an online resharding operation.</p>
    pub fn resharding(mut self, input: crate::types::ReshardingStatus) -> Self {
        self.resharding = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn set_resharding(mut self, input: ::std::option::Option<crate::types::ReshardingStatus>) -> Self {
        self.resharding = input;
        self
    }
    /// <p>The status of an online resharding operation.</p>
    pub fn get_resharding(&self) -> &::std::option::Option<crate::types::ReshardingStatus> {
        &self.resharding
    }
    /// <p>A list of ACLs associated with the cluster that are being updated</p>
    pub fn acls(mut self, input: crate::types::AcLsUpdateStatus) -> Self {
        self.acls = ::std::option::Option::Some(input);
        self
    }
    /// <p>A list of ACLs associated with the cluster that are being updated</p>
    pub fn set_acls(mut self, input: ::std::option::Option<crate::types::AcLsUpdateStatus>) -> Self {
        self.acls = input;
        self
    }
    /// <p>A list of ACLs associated with the cluster that are being updated</p>
    pub fn get_acls(&self) -> &::std::option::Option<crate::types::AcLsUpdateStatus> {
        &self.acls
    }
    /// Appends an item to `service_updates`.
    ///
    /// To override the contents of this collection use [`set_service_updates`](Self::set_service_updates).
    ///
    /// <p>A list of service updates being applied to the cluster</p>
    pub fn service_updates(mut self, input: crate::types::PendingModifiedServiceUpdate) -> Self {
        let mut v = self.service_updates.unwrap_or_default();
        v.push(input);
        self.service_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of service updates being applied to the cluster</p>
    pub fn set_service_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PendingModifiedServiceUpdate>>) -> Self {
        self.service_updates = input;
        self
    }
    /// <p>A list of service updates being applied to the cluster</p>
    pub fn get_service_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PendingModifiedServiceUpdate>> {
        &self.service_updates
    }
    /// Consumes the builder and constructs a [`ClusterPendingUpdates`](crate::types::ClusterPendingUpdates).
    pub fn build(self) -> crate::types::ClusterPendingUpdates {
        crate::types::ClusterPendingUpdates {
            resharding: self.resharding,
            acls: self.acls,
            service_updates: self.service_updates,
        }
    }
}
