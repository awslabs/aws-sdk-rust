// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of cluster configuration options. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClusterConfiguration {
    /// <p>The name of the cluster</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the cluster configuration</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The node type used for the cluster</p>
    #[doc(hidden)]
    pub node_type: std::option::Option<std::string::String>,
    /// <p>The Redis engine version used by the cluster</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The specified maintenance window for the cluster</p>
    #[doc(hidden)]
    pub maintenance_window: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the SNS notification topic for the cluster</p>
    #[doc(hidden)]
    pub topic_arn: std::option::Option<std::string::String>,
    /// <p>The port used by the cluster</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p>The name of parameter group used by the cluster</p>
    #[doc(hidden)]
    pub parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the subnet group used by the cluster</p>
    #[doc(hidden)]
    pub subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC the cluster belongs to</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The snapshot retention limit set by the cluster</p>
    #[doc(hidden)]
    pub snapshot_retention_limit: std::option::Option<i32>,
    /// <p>The snapshot window set by the cluster</p>
    #[doc(hidden)]
    pub snapshot_window: std::option::Option<std::string::String>,
    /// <p>The number of shards in the cluster</p>
    #[doc(hidden)]
    pub num_shards: std::option::Option<i32>,
    /// <p>The list of shards in the cluster</p>
    #[doc(hidden)]
    pub shards: std::option::Option<std::vec::Vec<crate::types::ShardDetail>>,
}
impl ClusterConfiguration {
    /// <p>The name of the cluster</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the cluster configuration</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The node type used for the cluster</p>
    pub fn node_type(&self) -> std::option::Option<&str> {
        self.node_type.as_deref()
    }
    /// <p>The Redis engine version used by the cluster</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The specified maintenance window for the cluster</p>
    pub fn maintenance_window(&self) -> std::option::Option<&str> {
        self.maintenance_window.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the SNS notification topic for the cluster</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
    /// <p>The port used by the cluster</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p>The name of parameter group used by the cluster</p>
    pub fn parameter_group_name(&self) -> std::option::Option<&str> {
        self.parameter_group_name.as_deref()
    }
    /// <p>The name of the subnet group used by the cluster</p>
    pub fn subnet_group_name(&self) -> std::option::Option<&str> {
        self.subnet_group_name.as_deref()
    }
    /// <p>The ID of the VPC the cluster belongs to</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The snapshot retention limit set by the cluster</p>
    pub fn snapshot_retention_limit(&self) -> std::option::Option<i32> {
        self.snapshot_retention_limit
    }
    /// <p>The snapshot window set by the cluster</p>
    pub fn snapshot_window(&self) -> std::option::Option<&str> {
        self.snapshot_window.as_deref()
    }
    /// <p>The number of shards in the cluster</p>
    pub fn num_shards(&self) -> std::option::Option<i32> {
        self.num_shards
    }
    /// <p>The list of shards in the cluster</p>
    pub fn shards(&self) -> std::option::Option<&[crate::types::ShardDetail]> {
        self.shards.as_deref()
    }
}
impl ClusterConfiguration {
    /// Creates a new builder-style object to manufacture [`ClusterConfiguration`](crate::types::ClusterConfiguration).
    pub fn builder() -> crate::types::builders::ClusterConfigurationBuilder {
        crate::types::builders::ClusterConfigurationBuilder::default()
    }
}

/// A builder for [`ClusterConfiguration`](crate::types::ClusterConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusterConfigurationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) node_type: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) maintenance_window: std::option::Option<std::string::String>,
    pub(crate) topic_arn: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) parameter_group_name: std::option::Option<std::string::String>,
    pub(crate) subnet_group_name: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) snapshot_retention_limit: std::option::Option<i32>,
    pub(crate) snapshot_window: std::option::Option<std::string::String>,
    pub(crate) num_shards: std::option::Option<i32>,
    pub(crate) shards: std::option::Option<std::vec::Vec<crate::types::ShardDetail>>,
}
impl ClusterConfigurationBuilder {
    /// <p>The name of the cluster</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the cluster</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the cluster configuration</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the cluster configuration</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The node type used for the cluster</p>
    pub fn node_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_type = Some(input.into());
        self
    }
    /// <p>The node type used for the cluster</p>
    pub fn set_node_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_type = input;
        self
    }
    /// <p>The Redis engine version used by the cluster</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The Redis engine version used by the cluster</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The specified maintenance window for the cluster</p>
    pub fn maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.maintenance_window = Some(input.into());
        self
    }
    /// <p>The specified maintenance window for the cluster</p>
    pub fn set_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.maintenance_window = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SNS notification topic for the cluster</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.topic_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SNS notification topic for the cluster</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.topic_arn = input;
        self
    }
    /// <p>The port used by the cluster</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port used by the cluster</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The name of parameter group used by the cluster</p>
    pub fn parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_group_name = Some(input.into());
        self
    }
    /// <p>The name of parameter group used by the cluster</p>
    pub fn set_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parameter_group_name = input;
        self
    }
    /// <p>The name of the subnet group used by the cluster</p>
    pub fn subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_group_name = Some(input.into());
        self
    }
    /// <p>The name of the subnet group used by the cluster</p>
    pub fn set_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.subnet_group_name = input;
        self
    }
    /// <p>The ID of the VPC the cluster belongs to</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC the cluster belongs to</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The snapshot retention limit set by the cluster</p>
    pub fn snapshot_retention_limit(mut self, input: i32) -> Self {
        self.snapshot_retention_limit = Some(input);
        self
    }
    /// <p>The snapshot retention limit set by the cluster</p>
    pub fn set_snapshot_retention_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.snapshot_retention_limit = input;
        self
    }
    /// <p>The snapshot window set by the cluster</p>
    pub fn snapshot_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_window = Some(input.into());
        self
    }
    /// <p>The snapshot window set by the cluster</p>
    pub fn set_snapshot_window(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_window = input;
        self
    }
    /// <p>The number of shards in the cluster</p>
    pub fn num_shards(mut self, input: i32) -> Self {
        self.num_shards = Some(input);
        self
    }
    /// <p>The number of shards in the cluster</p>
    pub fn set_num_shards(mut self, input: std::option::Option<i32>) -> Self {
        self.num_shards = input;
        self
    }
    /// Appends an item to `shards`.
    ///
    /// To override the contents of this collection use [`set_shards`](Self::set_shards).
    ///
    /// <p>The list of shards in the cluster</p>
    pub fn shards(mut self, input: crate::types::ShardDetail) -> Self {
        let mut v = self.shards.unwrap_or_default();
        v.push(input);
        self.shards = Some(v);
        self
    }
    /// <p>The list of shards in the cluster</p>
    pub fn set_shards(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ShardDetail>>,
    ) -> Self {
        self.shards = input;
        self
    }
    /// Consumes the builder and constructs a [`ClusterConfiguration`](crate::types::ClusterConfiguration).
    pub fn build(self) -> crate::types::ClusterConfiguration {
        crate::types::ClusterConfiguration {
            name: self.name,
            description: self.description,
            node_type: self.node_type,
            engine_version: self.engine_version,
            maintenance_window: self.maintenance_window,
            topic_arn: self.topic_arn,
            port: self.port,
            parameter_group_name: self.parameter_group_name,
            subnet_group_name: self.subnet_group_name,
            vpc_id: self.vpc_id,
            snapshot_retention_limit: self.snapshot_retention_limit,
            snapshot_window: self.snapshot_window,
            num_shards: self.num_shards,
            shards: self.shards,
        }
    }
}
