// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_acls_output_next_token(
    input: &crate::operation::describe_acls::DescribeAcLsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_clusters_output_next_token(
    input: &crate::operation::describe_clusters::DescribeClustersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_engine_versions_output_next_token(
    input: &crate::operation::describe_engine_versions::DescribeEngineVersionsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_events_output_next_token(
    input: &crate::operation::describe_events::DescribeEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_parameter_groups_output_next_token(
    input: &crate::operation::describe_parameter_groups::DescribeParameterGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_parameters_output_next_token(
    input: &crate::operation::describe_parameters::DescribeParametersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_reserved_nodes_output_next_token(
    input: &crate::operation::describe_reserved_nodes::DescribeReservedNodesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_reserved_nodes_offerings_output_next_token(
    input: &crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferingsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_service_updates_output_next_token(
    input: &crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_snapshots_output_next_token(
    input: &crate::operation::describe_snapshots::DescribeSnapshotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_subnet_groups_output_next_token(
    input: &crate::operation::describe_subnet_groups::DescribeSubnetGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_users_output_next_token(
    input: &crate::operation::describe_users::DescribeUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_acls_output_acls(
    input: crate::operation::describe_acls::DescribeAcLsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Acl>> {
    let input = match input.acls {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_clusters_output_clusters(
    input: crate::operation::describe_clusters::DescribeClustersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Cluster>> {
    let input = match input.clusters {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_engine_versions_output_engine_versions(
    input: crate::operation::describe_engine_versions::DescribeEngineVersionsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EngineVersionInfo>> {
    let input = match input.engine_versions {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_events_output_events(
    input: crate::operation::describe_events::DescribeEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Event>> {
    let input = match input.events {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_parameter_groups_output_parameter_groups(
    input: crate::operation::describe_parameter_groups::DescribeParameterGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ParameterGroup>> {
    let input = match input.parameter_groups {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_parameters_output_parameters(
    input: crate::operation::describe_parameters::DescribeParametersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
    let input = match input.parameters {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_reserved_nodes_output_reserved_nodes(
    input: crate::operation::describe_reserved_nodes::DescribeReservedNodesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ReservedNode>> {
    let input = match input.reserved_nodes {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_reserved_nodes_offerings_output_reserved_nodes_offerings(
    input: crate::operation::describe_reserved_nodes_offerings::DescribeReservedNodesOfferingsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ReservedNodesOffering>> {
    let input = match input.reserved_nodes_offerings {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_service_updates_output_service_updates(
    input: crate::operation::describe_service_updates::DescribeServiceUpdatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ServiceUpdate>> {
    let input = match input.service_updates {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_snapshots_output_snapshots(
    input: crate::operation::describe_snapshots::DescribeSnapshotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Snapshot>> {
    let input = match input.snapshots {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_subnet_groups_output_subnet_groups(
    input: crate::operation::describe_subnet_groups::DescribeSubnetGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SubnetGroup>> {
    let input = match input.subnet_groups {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_users_output_users(
    input: crate::operation::describe_users::DescribeUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::User>> {
    let input = match input.users {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
