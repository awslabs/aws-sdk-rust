// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeEvents`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_name(impl Into<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::source_name) / [`set_source_name(Option<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_source_name): <p>The identifier of the event source for which events are returned. If not specified, all sources are included in the response.</p>
    ///   - [`source_type(SourceType)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::source_type) / [`set_source_type(Option<SourceType>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_source_type): <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
    ///   - [`start_time(DateTime)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_start_time): <p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>
    ///   - [`end_time(DateTime)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_end_time): <p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. Example: 2017-03-30T07:03:49.555Z</p>
    ///   - [`duration(i32)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::duration) / [`set_duration(Option<i32>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_duration): <p>The number of minutes worth of events to retrieve.</p>
    ///   - [`max_results(i32)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_max_results): <p>The maximum number of records to include in the response. If more records exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// - On success, responds with [`DescribeEventsOutput`](crate::operation::describe_events::DescribeEventsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::describe_events::DescribeEventsOutput::next_token): <p>An optional argument to pass in case the total number of records exceeds the value of MaxResults. If nextToken is returned, there are more results available. The value of nextToken is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    ///   - [`events(Option<Vec<Event>>)`](crate::operation::describe_events::DescribeEventsOutput::events): <p>A list of events. Each element in the list contains detailed information about one event.</p>
    /// - On failure, responds with [`SdkError<DescribeEventsError>`](crate::operation::describe_events::DescribeEventsError)
    pub fn describe_events(
        &self,
    ) -> crate::operation::describe_events::builders::DescribeEventsFluentBuilder {
        crate::operation::describe_events::builders::DescribeEventsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
