// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the source database metadata.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceDatabaseMetadata {
    /// <p>The type of the source database metadata.</p>
    pub r#type: crate::types::SourceDatabase,
    /// <p>The capture tool of the source database metadata.</p>
    pub capture_tool: crate::types::CaptureTool,
}
impl SourceDatabaseMetadata {
    /// <p>The type of the source database metadata.</p>
    pub fn r#type(&self) -> &crate::types::SourceDatabase {
        &self.r#type
    }
    /// <p>The capture tool of the source database metadata.</p>
    pub fn capture_tool(&self) -> &crate::types::CaptureTool {
        &self.capture_tool
    }
}
impl SourceDatabaseMetadata {
    /// Creates a new builder-style object to manufacture [`SourceDatabaseMetadata`](crate::types::SourceDatabaseMetadata).
    pub fn builder() -> crate::types::builders::SourceDatabaseMetadataBuilder {
        crate::types::builders::SourceDatabaseMetadataBuilder::default()
    }
}

/// A builder for [`SourceDatabaseMetadata`](crate::types::SourceDatabaseMetadata).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SourceDatabaseMetadataBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SourceDatabase>,
    pub(crate) capture_tool: ::std::option::Option<crate::types::CaptureTool>,
}
impl SourceDatabaseMetadataBuilder {
    /// <p>The type of the source database metadata.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SourceDatabase) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the source database metadata.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SourceDatabase>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the source database metadata.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SourceDatabase> {
        &self.r#type
    }
    /// <p>The capture tool of the source database metadata.</p>
    /// This field is required.
    pub fn capture_tool(mut self, input: crate::types::CaptureTool) -> Self {
        self.capture_tool = ::std::option::Option::Some(input);
        self
    }
    /// <p>The capture tool of the source database metadata.</p>
    pub fn set_capture_tool(mut self, input: ::std::option::Option<crate::types::CaptureTool>) -> Self {
        self.capture_tool = input;
        self
    }
    /// <p>The capture tool of the source database metadata.</p>
    pub fn get_capture_tool(&self) -> &::std::option::Option<crate::types::CaptureTool> {
        &self.capture_tool
    }
    /// Consumes the builder and constructs a [`SourceDatabaseMetadata`](crate::types::SourceDatabaseMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SourceDatabaseMetadataBuilder::type)
    /// - [`capture_tool`](crate::types::builders::SourceDatabaseMetadataBuilder::capture_tool)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceDatabaseMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceDatabaseMetadata {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SourceDatabaseMetadata",
                )
            })?,
            capture_tool: self.capture_tool.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "capture_tool",
                    "capture_tool was not specified but it is required when building SourceDatabaseMetadata",
                )
            })?,
        })
    }
}
