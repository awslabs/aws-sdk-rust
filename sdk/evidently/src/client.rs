// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon CloudWatch Evidently
///
/// Client for invoking operations on Amazon CloudWatch Evidently. Each operation on Amazon CloudWatch Evidently is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_evidently::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_evidently::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_evidently::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchEvaluateFeature`](crate::client::fluent_builders::BatchEvaluateFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::BatchEvaluateFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::BatchEvaluateFeature::set_project): <p>The name or ARN of the project that contains the feature being evaluated.</p>
    ///   - [`requests(Vec<EvaluationRequest>)`](crate::client::fluent_builders::BatchEvaluateFeature::requests) / [`set_requests(Option<Vec<EvaluationRequest>>)`](crate::client::fluent_builders::BatchEvaluateFeature::set_requests): <p>An array of structures, where each structure assigns a feature variation to one user session.</p>
    /// - On success, responds with [`BatchEvaluateFeatureOutput`](crate::output::BatchEvaluateFeatureOutput) with field(s):
    ///   - [`results(Option<Vec<EvaluationResult>>)`](crate::output::BatchEvaluateFeatureOutput::results): <p>An array of structures, where each structure displays the results of one feature evaluation assignment to one user session.</p>
    /// - On failure, responds with [`SdkError<BatchEvaluateFeatureError>`](crate::error::BatchEvaluateFeatureError)
    pub fn batch_evaluate_feature(&self) -> crate::client::fluent_builders::BatchEvaluateFeature {
        crate::client::fluent_builders::BatchEvaluateFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateExperiment`](crate::client::fluent_builders::CreateExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::CreateExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::CreateExperiment::set_project): <p>The name or ARN of the project that you want to create the new experiment in.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateExperiment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateExperiment::set_name): <p>A name for the new experiment.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateExperiment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateExperiment::set_description): <p>An optional description of the experiment.</p>
    ///   - [`treatments(Vec<TreatmentConfig>)`](crate::client::fluent_builders::CreateExperiment::treatments) / [`set_treatments(Option<Vec<TreatmentConfig>>)`](crate::client::fluent_builders::CreateExperiment::set_treatments): <p>An array of structures that describe the configuration of each feature variation used in the experiment.</p>
    ///   - [`metric_goals(Vec<MetricGoalConfig>)`](crate::client::fluent_builders::CreateExperiment::metric_goals) / [`set_metric_goals(Option<Vec<MetricGoalConfig>>)`](crate::client::fluent_builders::CreateExperiment::set_metric_goals): <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    ///   - [`randomization_salt(impl Into<String>)`](crate::client::fluent_builders::CreateExperiment::randomization_salt) / [`set_randomization_salt(Option<String>)`](crate::client::fluent_builders::CreateExperiment::set_randomization_salt): <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    ///   - [`sampling_rate(i64)`](crate::client::fluent_builders::CreateExperiment::sampling_rate) / [`set_sampling_rate(Option<i64>)`](crate::client::fluent_builders::CreateExperiment::set_sampling_rate): <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>  <p>This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.</p>
    ///   - [`online_ab_config(OnlineAbConfig)`](crate::client::fluent_builders::CreateExperiment::online_ab_config) / [`set_online_ab_config(Option<OnlineAbConfig>)`](crate::client::fluent_builders::CreateExperiment::set_online_ab_config): <p>A structure that contains the configuration of which variation to use as the "control" version. tThe "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    ///   - [`segment(impl Into<String>)`](crate::client::fluent_builders::CreateExperiment::segment) / [`set_segment(Option<String>)`](crate::client::fluent_builders::CreateExperiment::set_segment): <p>Specifies an audience <i>segment</i> to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateExperiment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExperiment::set_tags): <p>Assigns one or more tags (key-value pairs) to the experiment.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with an experiment.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On success, responds with [`CreateExperimentOutput`](crate::output::CreateExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::CreateExperimentOutput::experiment): <p>A structure containing the configuration details of the experiment that you created.</p>
    /// - On failure, responds with [`SdkError<CreateExperimentError>`](crate::error::CreateExperimentError)
    pub fn create_experiment(&self) -> crate::client::fluent_builders::CreateExperiment {
        crate::client::fluent_builders::CreateExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFeature`](crate::client::fluent_builders::CreateFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::CreateFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::CreateFeature::set_project): <p>The name or ARN of the project that is to contain the new feature.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateFeature::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateFeature::set_name): <p>The name for the new feature.</p>
    ///   - [`evaluation_strategy(FeatureEvaluationStrategy)`](crate::client::fluent_builders::CreateFeature::evaluation_strategy) / [`set_evaluation_strategy(Option<FeatureEvaluationStrategy>)`](crate::client::fluent_builders::CreateFeature::set_evaluation_strategy): <p>Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateFeature::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateFeature::set_description): <p>An optional description of the feature.</p>
    ///   - [`variations(Vec<VariationConfig>)`](crate::client::fluent_builders::CreateFeature::variations) / [`set_variations(Option<Vec<VariationConfig>>)`](crate::client::fluent_builders::CreateFeature::set_variations): <p>An array of structures that contain the configuration of the feature's different variations.</p>
    ///   - [`default_variation(impl Into<String>)`](crate::client::fluent_builders::CreateFeature::default_variation) / [`set_default_variation(Option<String>)`](crate::client::fluent_builders::CreateFeature::set_default_variation): <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>  <p>This variation must also be listed in the <code>variations</code> structure.</p>  <p>If you omit <code>defaultVariation</code>, the first variation listed in the <code>variations</code> structure is used as the default variation.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateFeature::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateFeature::set_tags): <p>Assigns one or more tags (key-value pairs) to the feature.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with a feature.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    ///   - [`entity_overrides(HashMap<String, String>)`](crate::client::fluent_builders::CreateFeature::entity_overrides) / [`set_entity_overrides(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateFeature::set_entity_overrides): <p>Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p>
    /// - On success, responds with [`CreateFeatureOutput`](crate::output::CreateFeatureOutput) with field(s):
    ///   - [`feature(Option<Feature>)`](crate::output::CreateFeatureOutput::feature): <p>A structure that contains information about the new feature.</p>
    /// - On failure, responds with [`SdkError<CreateFeatureError>`](crate::error::CreateFeatureError)
    pub fn create_feature(&self) -> crate::client::fluent_builders::CreateFeature {
        crate::client::fluent_builders::CreateFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateLaunch`](crate::client::fluent_builders::CreateLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::CreateLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::CreateLaunch::set_project): <p>The name or ARN of the project that you want to create the launch in.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateLaunch::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateLaunch::set_name): <p>The name for the new launch.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateLaunch::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateLaunch::set_description): <p>An optional description for the launch.</p>
    ///   - [`scheduled_splits_config(ScheduledSplitsLaunchConfig)`](crate::client::fluent_builders::CreateLaunch::scheduled_splits_config) / [`set_scheduled_splits_config(Option<ScheduledSplitsLaunchConfig>)`](crate::client::fluent_builders::CreateLaunch::set_scheduled_splits_config): <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    ///   - [`metric_monitors(Vec<MetricMonitorConfig>)`](crate::client::fluent_builders::CreateLaunch::metric_monitors) / [`set_metric_monitors(Option<Vec<MetricMonitorConfig>>)`](crate::client::fluent_builders::CreateLaunch::set_metric_monitors): <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    ///   - [`groups(Vec<LaunchGroupConfig>)`](crate::client::fluent_builders::CreateLaunch::groups) / [`set_groups(Option<Vec<LaunchGroupConfig>>)`](crate::client::fluent_builders::CreateLaunch::set_groups): <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    ///   - [`randomization_salt(impl Into<String>)`](crate::client::fluent_builders::CreateLaunch::randomization_salt) / [`set_randomization_salt(Option<String>)`](crate::client::fluent_builders::CreateLaunch::set_randomization_salt): <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateLaunch::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateLaunch::set_tags): <p>Assigns one or more tags (key-value pairs) to the launch.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with a launch.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On success, responds with [`CreateLaunchOutput`](crate::output::CreateLaunchOutput) with field(s):
    ///   - [`launch(Option<Launch>)`](crate::output::CreateLaunchOutput::launch): <p>A structure that contains the configuration of the launch that was created.</p>
    /// - On failure, responds with [`SdkError<CreateLaunchError>`](crate::error::CreateLaunchError)
    pub fn create_launch(&self) -> crate::client::fluent_builders::CreateLaunch {
        crate::client::fluent_builders::CreateLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateProject`](crate::client::fluent_builders::CreateProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateProject::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateProject::set_name): <p>The name for the project.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateProject::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateProject::set_description): <p>An optional description of the project.</p>
    ///   - [`data_delivery(ProjectDataDeliveryConfig)`](crate::client::fluent_builders::CreateProject::data_delivery) / [`set_data_delivery(Option<ProjectDataDeliveryConfig>)`](crate::client::fluent_builders::CreateProject::set_data_delivery): <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.</p>
    ///   - [`app_config_resource(ProjectAppConfigResourceConfig)`](crate::client::fluent_builders::CreateProject::app_config_resource) / [`set_app_config_resource(Option<ProjectAppConfigResourceConfig>)`](crate::client::fluent_builders::CreateProject::set_app_config_resource): <p>Use this parameter if the project will use <i>client-side evaluation powered by AppConfig</i>. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation. This mitigates the latency and availability risks that come with an API call. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-client-side-evaluation.html"> Client-side evaluation - powered by AppConfig.</a> </p>  <p>This parameter is a structure that contains information about the AppConfig application and environment that will be used as for client-side evaluation.</p>  <p>To create a project that uses client-side evaluation, you must have the <code>evidently:ExportProjectAsConfiguration</code> permission.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateProject::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateProject::set_tags): <p>Assigns one or more tags (key-value pairs) to the project.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with a project.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On success, responds with [`CreateProjectOutput`](crate::output::CreateProjectOutput) with field(s):
    ///   - [`project(Option<Project>)`](crate::output::CreateProjectOutput::project): <p>A structure that contains information about the created project.</p>
    /// - On failure, responds with [`SdkError<CreateProjectError>`](crate::error::CreateProjectError)
    pub fn create_project(&self) -> crate::client::fluent_builders::CreateProject {
        crate::client::fluent_builders::CreateProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSegment`](crate::client::fluent_builders::CreateSegment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateSegment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateSegment::set_name): <p>A name for the segment.</p>
    ///   - [`pattern(impl Into<String>)`](crate::client::fluent_builders::CreateSegment::pattern) / [`set_pattern(Option<String>)`](crate::client::fluent_builders::CreateSegment::set_pattern): <p>The pattern to use for the segment. For more information about pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html"> Segment rule pattern syntax</a>.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateSegment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateSegment::set_description): <p>An optional description for this segment.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateSegment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateSegment::set_tags): <p>Assigns one or more tags (key-value pairs) to the segment.</p>  <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p>  <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>  <p>You can associate as many as 50 tags with a segment.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On success, responds with [`CreateSegmentOutput`](crate::output::CreateSegmentOutput) with field(s):
    ///   - [`segment(Option<Segment>)`](crate::output::CreateSegmentOutput::segment): <p>A structure that contains the complete information about the segment that was just created.</p>
    /// - On failure, responds with [`SdkError<CreateSegmentError>`](crate::error::CreateSegmentError)
    pub fn create_segment(&self) -> crate::client::fluent_builders::CreateSegment {
        crate::client::fluent_builders::CreateSegment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteExperiment`](crate::client::fluent_builders::DeleteExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::DeleteExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::DeleteExperiment::set_project): <p>The name or ARN of the project that contains the experiment to delete.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::DeleteExperiment::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::DeleteExperiment::set_experiment): <p>The name of the experiment to delete.</p>
    /// - On success, responds with [`DeleteExperimentOutput`](crate::output::DeleteExperimentOutput)

    /// - On failure, responds with [`SdkError<DeleteExperimentError>`](crate::error::DeleteExperimentError)
    pub fn delete_experiment(&self) -> crate::client::fluent_builders::DeleteExperiment {
        crate::client::fluent_builders::DeleteExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFeature`](crate::client::fluent_builders::DeleteFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::DeleteFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::DeleteFeature::set_project): <p>The name or ARN of the project that contains the feature to delete.</p>
    ///   - [`feature(impl Into<String>)`](crate::client::fluent_builders::DeleteFeature::feature) / [`set_feature(Option<String>)`](crate::client::fluent_builders::DeleteFeature::set_feature): <p>The name of the feature to delete.</p>
    /// - On success, responds with [`DeleteFeatureOutput`](crate::output::DeleteFeatureOutput)

    /// - On failure, responds with [`SdkError<DeleteFeatureError>`](crate::error::DeleteFeatureError)
    pub fn delete_feature(&self) -> crate::client::fluent_builders::DeleteFeature {
        crate::client::fluent_builders::DeleteFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteLaunch`](crate::client::fluent_builders::DeleteLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::DeleteLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::DeleteLaunch::set_project): <p>The name or ARN of the project that contains the launch to delete.</p>
    ///   - [`launch(impl Into<String>)`](crate::client::fluent_builders::DeleteLaunch::launch) / [`set_launch(Option<String>)`](crate::client::fluent_builders::DeleteLaunch::set_launch): <p>The name of the launch to delete.</p>
    /// - On success, responds with [`DeleteLaunchOutput`](crate::output::DeleteLaunchOutput)

    /// - On failure, responds with [`SdkError<DeleteLaunchError>`](crate::error::DeleteLaunchError)
    pub fn delete_launch(&self) -> crate::client::fluent_builders::DeleteLaunch {
        crate::client::fluent_builders::DeleteLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProject`](crate::client::fluent_builders::DeleteProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::DeleteProject::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::DeleteProject::set_project): <p>The name or ARN of the project to delete.</p>
    /// - On success, responds with [`DeleteProjectOutput`](crate::output::DeleteProjectOutput)

    /// - On failure, responds with [`SdkError<DeleteProjectError>`](crate::error::DeleteProjectError)
    pub fn delete_project(&self) -> crate::client::fluent_builders::DeleteProject {
        crate::client::fluent_builders::DeleteProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSegment`](crate::client::fluent_builders::DeleteSegment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`segment(impl Into<String>)`](crate::client::fluent_builders::DeleteSegment::segment) / [`set_segment(Option<String>)`](crate::client::fluent_builders::DeleteSegment::set_segment): <p>Specifies the segment to delete.</p>
    /// - On success, responds with [`DeleteSegmentOutput`](crate::output::DeleteSegmentOutput)

    /// - On failure, responds with [`SdkError<DeleteSegmentError>`](crate::error::DeleteSegmentError)
    pub fn delete_segment(&self) -> crate::client::fluent_builders::DeleteSegment {
        crate::client::fluent_builders::DeleteSegment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EvaluateFeature`](crate::client::fluent_builders::EvaluateFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::EvaluateFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::EvaluateFeature::set_project): <p>The name or ARN of the project that contains this feature.</p>
    ///   - [`feature(impl Into<String>)`](crate::client::fluent_builders::EvaluateFeature::feature) / [`set_feature(Option<String>)`](crate::client::fluent_builders::EvaluateFeature::set_feature): <p>The name of the feature being evaluated.</p>
    ///   - [`entity_id(impl Into<String>)`](crate::client::fluent_builders::EvaluateFeature::entity_id) / [`set_entity_id(Option<String>)`](crate::client::fluent_builders::EvaluateFeature::set_entity_id): <p>An internal ID that represents a unique user of the application. This <code>entityID</code> is checked against any override rules assigned for this feature.</p>
    ///   - [`evaluation_context(impl Into<String>)`](crate::client::fluent_builders::EvaluateFeature::evaluation_context) / [`set_evaluation_context(Option<String>)`](crate::client::fluent_builders::EvaluateFeature::set_evaluation_context): <p>A JSON object of attributes that you can optionally pass in as part of the evaluation event sent to Evidently from the user session. Evidently can use this value to match user sessions with defined audience segments. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Use segments to focus your audience</a>.</p>  <p>If you include this parameter, the value must be a JSON object. A JSON array is not supported.</p>
    /// - On success, responds with [`EvaluateFeatureOutput`](crate::output::EvaluateFeatureOutput) with field(s):
    ///   - [`variation(Option<String>)`](crate::output::EvaluateFeatureOutput::variation): <p>The name of the variation that was served to the user session.</p>
    ///   - [`value(Option<VariableValue>)`](crate::output::EvaluateFeatureOutput::value): <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    ///   - [`reason(Option<String>)`](crate::output::EvaluateFeatureOutput::reason): <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment; or <code>ENTITY_OVERRIDES_MATCH</code>, if the user's <code>entityId</code> matches an override rule.</p>
    ///   - [`details(Option<String>)`](crate::output::EvaluateFeatureOutput::details): <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    /// - On failure, responds with [`SdkError<EvaluateFeatureError>`](crate::error::EvaluateFeatureError)
    pub fn evaluate_feature(&self) -> crate::client::fluent_builders::EvaluateFeature {
        crate::client::fluent_builders::EvaluateFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExperiment`](crate::client::fluent_builders::GetExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetExperiment::set_project): <p>The name or ARN of the project that contains the experiment.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::GetExperiment::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::GetExperiment::set_experiment): <p>The name of the experiment that you want to see the details of.</p>
    /// - On success, responds with [`GetExperimentOutput`](crate::output::GetExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::GetExperimentOutput::experiment): <p>A structure containing the configuration details of the experiment.</p>
    /// - On failure, responds with [`SdkError<GetExperimentError>`](crate::error::GetExperimentError)
    pub fn get_experiment(&self) -> crate::client::fluent_builders::GetExperiment {
        crate::client::fluent_builders::GetExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExperimentResults`](crate::client::fluent_builders::GetExperimentResults) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetExperimentResults::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetExperimentResults::set_project): <p>The name or ARN of the project that contains the experiment that you want to see the results of.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::GetExperimentResults::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::GetExperimentResults::set_experiment): <p>The name of the experiment to retrieve the results of.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::GetExperimentResults::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::GetExperimentResults::set_start_time): <p>The date and time that the experiment started.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::GetExperimentResults::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::GetExperimentResults::set_end_time): <p>The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.</p>
    ///   - [`metric_names(Vec<String>)`](crate::client::fluent_builders::GetExperimentResults::metric_names) / [`set_metric_names(Option<Vec<String>>)`](crate::client::fluent_builders::GetExperimentResults::set_metric_names): <p>The names of the experiment metrics that you want to see the results of.</p>
    ///   - [`treatment_names(Vec<String>)`](crate::client::fluent_builders::GetExperimentResults::treatment_names) / [`set_treatment_names(Option<Vec<String>>)`](crate::client::fluent_builders::GetExperimentResults::set_treatment_names): <p>The names of the experiment treatments that you want to see the results for.</p>
    ///   - [`base_stat(ExperimentBaseStat)`](crate::client::fluent_builders::GetExperimentResults::base_stat) / [`set_base_stat(Option<ExperimentBaseStat>)`](crate::client::fluent_builders::GetExperimentResults::set_base_stat): <p>The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.</p>
    ///   - [`result_stats(Vec<ExperimentResultRequestType>)`](crate::client::fluent_builders::GetExperimentResults::result_stats) / [`set_result_stats(Option<Vec<ExperimentResultRequestType>>)`](crate::client::fluent_builders::GetExperimentResults::set_result_stats): <p>The statistics that you want to see in the returned results.</p>  <ul>   <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li>   <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li>   <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li>   <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li>  </ul>
    ///   - [`report_names(Vec<ExperimentReportName>)`](crate::client::fluent_builders::GetExperimentResults::report_names) / [`set_report_names(Option<Vec<ExperimentReportName>>)`](crate::client::fluent_builders::GetExperimentResults::set_report_names): <p>The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.</p>
    ///   - [`period(i64)`](crate::client::fluent_builders::GetExperimentResults::period) / [`set_period(i64)`](crate::client::fluent_builders::GetExperimentResults::set_period): <p>In seconds, the amount of time to aggregate results together. </p>
    /// - On success, responds with [`GetExperimentResultsOutput`](crate::output::GetExperimentResultsOutput) with field(s):
    ///   - [`results_data(Option<Vec<ExperimentResultsData>>)`](crate::output::GetExperimentResultsOutput::results_data): <p>An array of structures that include experiment results including metric names and values. </p>
    ///   - [`reports(Option<Vec<ExperimentReport>>)`](crate::output::GetExperimentResultsOutput::reports): <p>An array of structures that include the reports that you requested.</p>
    ///   - [`timestamps(Option<Vec<DateTime>>)`](crate::output::GetExperimentResultsOutput::timestamps): <p>The timestamps of each result returned.</p>
    ///   - [`details(Option<String>)`](crate::output::GetExperimentResultsOutput::details): <p>If the experiment doesn't yet have enough events to provide valid results, this field is returned with the message <code>Not enough events to generate results</code>. If there are enough events to provide valid results, this field is not returned.</p>
    /// - On failure, responds with [`SdkError<GetExperimentResultsError>`](crate::error::GetExperimentResultsError)
    pub fn get_experiment_results(&self) -> crate::client::fluent_builders::GetExperimentResults {
        crate::client::fluent_builders::GetExperimentResults::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetFeature`](crate::client::fluent_builders::GetFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetFeature::set_project): <p>The name or ARN of the project that contains the feature.</p>
    ///   - [`feature(impl Into<String>)`](crate::client::fluent_builders::GetFeature::feature) / [`set_feature(Option<String>)`](crate::client::fluent_builders::GetFeature::set_feature): <p>The name of the feature that you want to retrieve information for.</p>
    /// - On success, responds with [`GetFeatureOutput`](crate::output::GetFeatureOutput) with field(s):
    ///   - [`feature(Option<Feature>)`](crate::output::GetFeatureOutput::feature): <p>A structure containing the configuration details of the feature.</p>
    /// - On failure, responds with [`SdkError<GetFeatureError>`](crate::error::GetFeatureError)
    pub fn get_feature(&self) -> crate::client::fluent_builders::GetFeature {
        crate::client::fluent_builders::GetFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLaunch`](crate::client::fluent_builders::GetLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetLaunch::set_project): <p>The name or ARN of the project that contains the launch.</p>
    ///   - [`launch(impl Into<String>)`](crate::client::fluent_builders::GetLaunch::launch) / [`set_launch(Option<String>)`](crate::client::fluent_builders::GetLaunch::set_launch): <p>The name of the launch that you want to see the details of.</p>
    /// - On success, responds with [`GetLaunchOutput`](crate::output::GetLaunchOutput) with field(s):
    ///   - [`launch(Option<Launch>)`](crate::output::GetLaunchOutput::launch): <p>A structure containing the configuration details of the launch.</p>
    /// - On failure, responds with [`SdkError<GetLaunchError>`](crate::error::GetLaunchError)
    pub fn get_launch(&self) -> crate::client::fluent_builders::GetLaunch {
        crate::client::fluent_builders::GetLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetProject`](crate::client::fluent_builders::GetProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetProject::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetProject::set_project): <p>The name or ARN of the project that you want to see the details of.</p>
    /// - On success, responds with [`GetProjectOutput`](crate::output::GetProjectOutput) with field(s):
    ///   - [`project(Option<Project>)`](crate::output::GetProjectOutput::project): <p>A structure containing the configuration details of the project.</p>
    /// - On failure, responds with [`SdkError<GetProjectError>`](crate::error::GetProjectError)
    pub fn get_project(&self) -> crate::client::fluent_builders::GetProject {
        crate::client::fluent_builders::GetProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSegment`](crate::client::fluent_builders::GetSegment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`segment(impl Into<String>)`](crate::client::fluent_builders::GetSegment::segment) / [`set_segment(Option<String>)`](crate::client::fluent_builders::GetSegment::set_segment): <p>The ARN of the segment to return information for.</p>
    /// - On success, responds with [`GetSegmentOutput`](crate::output::GetSegmentOutput) with field(s):
    ///   - [`segment(Option<Segment>)`](crate::output::GetSegmentOutput::segment): <p>A structure that contains the complete information about the segment.</p>
    /// - On failure, responds with [`SdkError<GetSegmentError>`](crate::error::GetSegmentError)
    pub fn get_segment(&self) -> crate::client::fluent_builders::GetSegment {
        crate::client::fluent_builders::GetSegment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListExperiments`](crate::client::fluent_builders::ListExperiments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListExperiments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::ListExperiments::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::ListExperiments::set_project): <p>The name or ARN of the project to return the experiment list from.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListExperiments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListExperiments::set_max_results): <p>The maximum number of results to include in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListExperiments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListExperiments::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListExperiments</code> operation.</p>
    ///   - [`status(ExperimentStatus)`](crate::client::fluent_builders::ListExperiments::status) / [`set_status(Option<ExperimentStatus>)`](crate::client::fluent_builders::ListExperiments::set_status): <p>Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.</p>
    /// - On success, responds with [`ListExperimentsOutput`](crate::output::ListExperimentsOutput) with field(s):
    ///   - [`experiments(Option<Vec<Experiment>>)`](crate::output::ListExperimentsOutput::experiments): <p>An array of structures that contain the configuration details of the experiments in the specified project.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListExperimentsOutput::next_token): <p>The token to use in a subsequent <code>ListExperiments</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListExperimentsError>`](crate::error::ListExperimentsError)
    pub fn list_experiments(&self) -> crate::client::fluent_builders::ListExperiments {
        crate::client::fluent_builders::ListExperiments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFeatures`](crate::client::fluent_builders::ListFeatures) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFeatures::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::ListFeatures::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::ListFeatures::set_project): <p>The name or ARN of the project to return the feature list from.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFeatures::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFeatures::set_max_results): <p>The maximum number of results to include in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFeatures::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFeatures::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListFeatures</code> operation.</p>
    /// - On success, responds with [`ListFeaturesOutput`](crate::output::ListFeaturesOutput) with field(s):
    ///   - [`features(Option<Vec<FeatureSummary>>)`](crate::output::ListFeaturesOutput::features): <p>An array of structures that contain the configuration details of the features in the specified project.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFeaturesOutput::next_token): <p>The token to use in a subsequent <code>ListFeatures</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListFeaturesError>`](crate::error::ListFeaturesError)
    pub fn list_features(&self) -> crate::client::fluent_builders::ListFeatures {
        crate::client::fluent_builders::ListFeatures::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListLaunches`](crate::client::fluent_builders::ListLaunches) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLaunches::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::ListLaunches::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::ListLaunches::set_project): <p>The name or ARN of the project to return the launch list from.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLaunches::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLaunches::set_max_results): <p>The maximum number of results to include in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLaunches::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLaunches::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.</p>
    ///   - [`status(LaunchStatus)`](crate::client::fluent_builders::ListLaunches::status) / [`set_status(Option<LaunchStatus>)`](crate::client::fluent_builders::ListLaunches::set_status): <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
    /// - On success, responds with [`ListLaunchesOutput`](crate::output::ListLaunchesOutput) with field(s):
    ///   - [`launches(Option<Vec<Launch>>)`](crate::output::ListLaunchesOutput::launches): <p>An array of structures that contain the configuration details of the launches in the specified project.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLaunchesOutput::next_token): <p>The token to use in a subsequent <code>ListLaunches</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLaunchesError>`](crate::error::ListLaunchesError)
    pub fn list_launches(&self) -> crate::client::fluent_builders::ListLaunches {
        crate::client::fluent_builders::ListLaunches::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProjects`](crate::client::fluent_builders::ListProjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListProjects::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListProjects::set_max_results): <p>The maximum number of results to include in the response.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProjects::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProjects::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListProjects</code> operation.</p>
    /// - On success, responds with [`ListProjectsOutput`](crate::output::ListProjectsOutput) with field(s):
    ///   - [`projects(Option<Vec<ProjectSummary>>)`](crate::output::ListProjectsOutput::projects): <p>An array of structures that contain the configuration details of the projects in the Region.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListProjectsOutput::next_token): <p>The token to use in a subsequent <code>ListProjects</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListProjectsError>`](crate::error::ListProjectsError)
    pub fn list_projects(&self) -> crate::client::fluent_builders::ListProjects {
        crate::client::fluent_builders::ListProjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSegmentReferences`](crate::client::fluent_builders::ListSegmentReferences) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSegmentReferences::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`segment(impl Into<String>)`](crate::client::fluent_builders::ListSegmentReferences::segment) / [`set_segment(Option<String>)`](crate::client::fluent_builders::ListSegmentReferences::set_segment): <p>The ARN of the segment that you want to view information for.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSegmentReferences::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSegmentReferences::set_max_results): <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSegmentReferences::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSegmentReferences::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.</p>
    ///   - [`r#type(SegmentReferenceResourceType)`](crate::client::fluent_builders::ListSegmentReferences::type) / [`set_type(Option<SegmentReferenceResourceType>)`](crate::client::fluent_builders::ListSegmentReferences::set_type): <p>Specifies whether to return information about launches or experiments that use this segment.</p>
    /// - On success, responds with [`ListSegmentReferencesOutput`](crate::output::ListSegmentReferencesOutput) with field(s):
    ///   - [`referenced_by(Option<Vec<RefResource>>)`](crate::output::ListSegmentReferencesOutput::referenced_by): <p>An array of structures, where each structure contains information about one experiment or launch that uses this segment. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSegmentReferencesOutput::next_token): <p>The token to use in a subsequent <code>ListSegmentReferences</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListSegmentReferencesError>`](crate::error::ListSegmentReferencesError)
    pub fn list_segment_references(&self) -> crate::client::fluent_builders::ListSegmentReferences {
        crate::client::fluent_builders::ListSegmentReferences::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSegments`](crate::client::fluent_builders::ListSegments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSegments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListSegments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListSegments::set_max_results): <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSegments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSegments::set_next_token): <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegments</code> operation.</p>
    /// - On success, responds with [`ListSegmentsOutput`](crate::output::ListSegmentsOutput) with field(s):
    ///   - [`segments(Option<Vec<Segment>>)`](crate::output::ListSegmentsOutput::segments): <p>An array of structures that contain information about the segments in this Region.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSegmentsOutput::next_token): <p>The token to use in a subsequent <code>ListSegments</code> operation to return the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListSegmentsError>`](crate::error::ListSegmentsError)
    pub fn list_segments(&self) -> crate::client::fluent_builders::ListSegments {
        crate::client::fluent_builders::ListSegments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource that you want to see the tags of.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The list of tag keys and values associated with the resource you specified.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutProjectEvents`](crate::client::fluent_builders::PutProjectEvents) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::PutProjectEvents::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::PutProjectEvents::set_project): <p>The name or ARN of the project to write the events to.</p>
    ///   - [`events(Vec<Event>)`](crate::client::fluent_builders::PutProjectEvents::events) / [`set_events(Option<Vec<Event>>)`](crate::client::fluent_builders::PutProjectEvents::set_events): <p>An array of event structures that contain the performance data that is being sent to Evidently.</p>
    /// - On success, responds with [`PutProjectEventsOutput`](crate::output::PutProjectEventsOutput) with field(s):
    ///   - [`failed_event_count(Option<i32>)`](crate::output::PutProjectEventsOutput::failed_event_count): <p>The number of events in the operation that could not be used by Evidently.</p>
    ///   - [`event_results(Option<Vec<PutProjectEventsResultEntry>>)`](crate::output::PutProjectEventsOutput::event_results): <p>A structure that contains Evidently's response to the sent events, including an event ID and error codes, if any.</p>
    /// - On failure, responds with [`SdkError<PutProjectEventsError>`](crate::error::PutProjectEventsError)
    pub fn put_project_events(&self) -> crate::client::fluent_builders::PutProjectEvents {
        crate::client::fluent_builders::PutProjectEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartExperiment`](crate::client::fluent_builders::StartExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::StartExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::StartExperiment::set_project): <p>The name or ARN of the project that contains the experiment to start.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::StartExperiment::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::StartExperiment::set_experiment): <p>The name of the experiment to start.</p>
    ///   - [`analysis_complete_time(DateTime)`](crate::client::fluent_builders::StartExperiment::analysis_complete_time) / [`set_analysis_complete_time(Option<DateTime>)`](crate::client::fluent_builders::StartExperiment::set_analysis_complete_time): <p>The date and time to end the experiment. This must be no more than 30 days after the experiment starts.</p>
    /// - On success, responds with [`StartExperimentOutput`](crate::output::StartExperimentOutput) with field(s):
    ///   - [`started_time(Option<DateTime>)`](crate::output::StartExperimentOutput::started_time): <p>A timestamp that indicates when the experiment started.</p>
    /// - On failure, responds with [`SdkError<StartExperimentError>`](crate::error::StartExperimentError)
    pub fn start_experiment(&self) -> crate::client::fluent_builders::StartExperiment {
        crate::client::fluent_builders::StartExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartLaunch`](crate::client::fluent_builders::StartLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::StartLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::StartLaunch::set_project): <p>The name or ARN of the project that contains the launch to start.</p>
    ///   - [`launch(impl Into<String>)`](crate::client::fluent_builders::StartLaunch::launch) / [`set_launch(Option<String>)`](crate::client::fluent_builders::StartLaunch::set_launch): <p>The name of the launch to start.</p>
    /// - On success, responds with [`StartLaunchOutput`](crate::output::StartLaunchOutput) with field(s):
    ///   - [`launch(Option<Launch>)`](crate::output::StartLaunchOutput::launch): <p>A structure that contains information about the launch that was started.</p>
    /// - On failure, responds with [`SdkError<StartLaunchError>`](crate::error::StartLaunchError)
    pub fn start_launch(&self) -> crate::client::fluent_builders::StartLaunch {
        crate::client::fluent_builders::StartLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopExperiment`](crate::client::fluent_builders::StopExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::StopExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::StopExperiment::set_project): <p>The name or ARN of the project that contains the experiment to stop.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::StopExperiment::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::StopExperiment::set_experiment): <p>The name of the experiment to stop.</p>
    ///   - [`desired_state(ExperimentStopDesiredState)`](crate::client::fluent_builders::StopExperiment::desired_state) / [`set_desired_state(Option<ExperimentStopDesiredState>)`](crate::client::fluent_builders::StopExperiment::set_desired_state): <p>Specify whether the experiment is to be considered <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.</p>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::StopExperiment::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::StopExperiment::set_reason): <p>A string that describes why you are stopping the experiment.</p>
    /// - On success, responds with [`StopExperimentOutput`](crate::output::StopExperimentOutput) with field(s):
    ///   - [`ended_time(Option<DateTime>)`](crate::output::StopExperimentOutput::ended_time): <p>The date and time that the experiment stopped.</p>
    /// - On failure, responds with [`SdkError<StopExperimentError>`](crate::error::StopExperimentError)
    pub fn stop_experiment(&self) -> crate::client::fluent_builders::StopExperiment {
        crate::client::fluent_builders::StopExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopLaunch`](crate::client::fluent_builders::StopLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::StopLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::StopLaunch::set_project): <p>The name or ARN of the project that contains the launch that you want to stop.</p>
    ///   - [`launch(impl Into<String>)`](crate::client::fluent_builders::StopLaunch::launch) / [`set_launch(Option<String>)`](crate::client::fluent_builders::StopLaunch::set_launch): <p>The name of the launch to stop.</p>
    ///   - [`desired_state(LaunchStopDesiredState)`](crate::client::fluent_builders::StopLaunch::desired_state) / [`set_desired_state(Option<LaunchStopDesiredState>)`](crate::client::fluent_builders::StopLaunch::set_desired_state): <p>Specify whether to consider the launch as <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.</p>
    ///   - [`reason(impl Into<String>)`](crate::client::fluent_builders::StopLaunch::reason) / [`set_reason(Option<String>)`](crate::client::fluent_builders::StopLaunch::set_reason): <p>A string that describes why you are stopping the launch.</p>
    /// - On success, responds with [`StopLaunchOutput`](crate::output::StopLaunchOutput) with field(s):
    ///   - [`ended_time(Option<DateTime>)`](crate::output::StopLaunchOutput::ended_time): <p>The date and time that the launch stopped.</p>
    /// - On failure, responds with [`SdkError<StopLaunchError>`](crate::error::StopLaunchError)
    pub fn stop_launch(&self) -> crate::client::fluent_builders::StopLaunch {
        crate::client::fluent_builders::StopLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the CloudWatch Evidently resource that you're adding tags to.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The list of key-value pairs to associate with the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TestSegmentPattern`](crate::client::fluent_builders::TestSegmentPattern) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`pattern(impl Into<String>)`](crate::client::fluent_builders::TestSegmentPattern::pattern) / [`set_pattern(Option<String>)`](crate::client::fluent_builders::TestSegmentPattern::set_pattern): <p>The pattern to test.</p>
    ///   - [`payload(impl Into<String>)`](crate::client::fluent_builders::TestSegmentPattern::payload) / [`set_payload(Option<String>)`](crate::client::fluent_builders::TestSegmentPattern::set_payload): <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
    /// - On success, responds with [`TestSegmentPatternOutput`](crate::output::TestSegmentPatternOutput) with field(s):
    ///   - [`r#match(Option<bool>)`](crate::output::TestSegmentPatternOutput::match): <p>Returns <code>true</code> if the pattern matches the payload.</p>
    /// - On failure, responds with [`SdkError<TestSegmentPatternError>`](crate::error::TestSegmentPatternError)
    pub fn test_segment_pattern(&self) -> crate::client::fluent_builders::TestSegmentPattern {
        crate::client::fluent_builders::TestSegmentPattern::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the CloudWatch Evidently resource that you're removing tags from.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The list of tag keys to remove from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateExperiment`](crate::client::fluent_builders::UpdateExperiment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::UpdateExperiment::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::UpdateExperiment::set_project): <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::UpdateExperiment::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::UpdateExperiment::set_experiment): <p>The name of the experiment to update.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateExperiment::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateExperiment::set_description): <p>An optional description of the experiment.</p>
    ///   - [`treatments(Vec<TreatmentConfig>)`](crate::client::fluent_builders::UpdateExperiment::treatments) / [`set_treatments(Option<Vec<TreatmentConfig>>)`](crate::client::fluent_builders::UpdateExperiment::set_treatments): <p>An array of structures that define the variations being tested in the experiment.</p>
    ///   - [`metric_goals(Vec<MetricGoalConfig>)`](crate::client::fluent_builders::UpdateExperiment::metric_goals) / [`set_metric_goals(Option<Vec<MetricGoalConfig>>)`](crate::client::fluent_builders::UpdateExperiment::set_metric_goals): <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    ///   - [`randomization_salt(impl Into<String>)`](crate::client::fluent_builders::UpdateExperiment::randomization_salt) / [`set_randomization_salt(Option<String>)`](crate::client::fluent_builders::UpdateExperiment::set_randomization_salt): <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    ///   - [`sampling_rate(i64)`](crate::client::fluent_builders::UpdateExperiment::sampling_rate) / [`set_sampling_rate(Option<i64>)`](crate::client::fluent_builders::UpdateExperiment::set_sampling_rate): <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>  <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    ///   - [`segment(impl Into<String>)`](crate::client::fluent_builders::UpdateExperiment::segment) / [`set_segment(Option<String>)`](crate::client::fluent_builders::UpdateExperiment::set_segment): <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    ///   - [`remove_segment(bool)`](crate::client::fluent_builders::UpdateExperiment::remove_segment) / [`set_remove_segment(bool)`](crate::client::fluent_builders::UpdateExperiment::set_remove_segment): <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    ///   - [`online_ab_config(OnlineAbConfig)`](crate::client::fluent_builders::UpdateExperiment::online_ab_config) / [`set_online_ab_config(Option<OnlineAbConfig>)`](crate::client::fluent_builders::UpdateExperiment::set_online_ab_config): <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    /// - On success, responds with [`UpdateExperimentOutput`](crate::output::UpdateExperimentOutput) with field(s):
    ///   - [`experiment(Option<Experiment>)`](crate::output::UpdateExperimentOutput::experiment): <p>A structure containing the configuration details of the experiment that was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateExperimentError>`](crate::error::UpdateExperimentError)
    pub fn update_experiment(&self) -> crate::client::fluent_builders::UpdateExperiment {
        crate::client::fluent_builders::UpdateExperiment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFeature`](crate::client::fluent_builders::UpdateFeature) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::UpdateFeature::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::UpdateFeature::set_project): <p>The name or ARN of the project that contains the feature to be updated.</p>
    ///   - [`feature(impl Into<String>)`](crate::client::fluent_builders::UpdateFeature::feature) / [`set_feature(Option<String>)`](crate::client::fluent_builders::UpdateFeature::set_feature): <p>The name of the feature to be updated.</p>
    ///   - [`evaluation_strategy(FeatureEvaluationStrategy)`](crate::client::fluent_builders::UpdateFeature::evaluation_strategy) / [`set_evaluation_strategy(Option<FeatureEvaluationStrategy>)`](crate::client::fluent_builders::UpdateFeature::set_evaluation_strategy): <p>Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFeature::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFeature::set_description): <p>An optional description of the feature.</p>
    ///   - [`add_or_update_variations(Vec<VariationConfig>)`](crate::client::fluent_builders::UpdateFeature::add_or_update_variations) / [`set_add_or_update_variations(Option<Vec<VariationConfig>>)`](crate::client::fluent_builders::UpdateFeature::set_add_or_update_variations): <p>To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.</p>
    ///   - [`remove_variations(Vec<String>)`](crate::client::fluent_builders::UpdateFeature::remove_variations) / [`set_remove_variations(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateFeature::set_remove_variations): <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this makes no change and does not report an error.</p>  <p>This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.</p>
    ///   - [`default_variation(impl Into<String>)`](crate::client::fluent_builders::UpdateFeature::default_variation) / [`set_default_variation(Option<String>)`](crate::client::fluent_builders::UpdateFeature::set_default_variation): <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    ///   - [`entity_overrides(HashMap<String, String>)`](crate::client::fluent_builders::UpdateFeature::entity_overrides) / [`set_entity_overrides(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateFeature::set_entity_overrides): <p>Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p>
    /// - On success, responds with [`UpdateFeatureOutput`](crate::output::UpdateFeatureOutput) with field(s):
    ///   - [`feature(Option<Feature>)`](crate::output::UpdateFeatureOutput::feature): <p>A structure that contains information about the updated feature.</p>
    /// - On failure, responds with [`SdkError<UpdateFeatureError>`](crate::error::UpdateFeatureError)
    pub fn update_feature(&self) -> crate::client::fluent_builders::UpdateFeature {
        crate::client::fluent_builders::UpdateFeature::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateLaunch`](crate::client::fluent_builders::UpdateLaunch) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::UpdateLaunch::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::UpdateLaunch::set_project): <p>The name or ARN of the project that contains the launch that you want to update.</p>
    ///   - [`launch(impl Into<String>)`](crate::client::fluent_builders::UpdateLaunch::launch) / [`set_launch(Option<String>)`](crate::client::fluent_builders::UpdateLaunch::set_launch): <p>The name of the launch that is to be updated.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateLaunch::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateLaunch::set_description): <p>An optional description for the launch.</p>
    ///   - [`groups(Vec<LaunchGroupConfig>)`](crate::client::fluent_builders::UpdateLaunch::groups) / [`set_groups(Option<Vec<LaunchGroupConfig>>)`](crate::client::fluent_builders::UpdateLaunch::set_groups): <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    ///   - [`metric_monitors(Vec<MetricMonitorConfig>)`](crate::client::fluent_builders::UpdateLaunch::metric_monitors) / [`set_metric_monitors(Option<Vec<MetricMonitorConfig>>)`](crate::client::fluent_builders::UpdateLaunch::set_metric_monitors): <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    ///   - [`randomization_salt(impl Into<String>)`](crate::client::fluent_builders::UpdateLaunch::randomization_salt) / [`set_randomization_salt(Option<String>)`](crate::client::fluent_builders::UpdateLaunch::set_randomization_salt): <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    ///   - [`scheduled_splits_config(ScheduledSplitsLaunchConfig)`](crate::client::fluent_builders::UpdateLaunch::scheduled_splits_config) / [`set_scheduled_splits_config(Option<ScheduledSplitsLaunchConfig>)`](crate::client::fluent_builders::UpdateLaunch::set_scheduled_splits_config): <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    /// - On success, responds with [`UpdateLaunchOutput`](crate::output::UpdateLaunchOutput) with field(s):
    ///   - [`launch(Option<Launch>)`](crate::output::UpdateLaunchOutput::launch): <p>A structure that contains the new configuration of the launch that was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateLaunchError>`](crate::error::UpdateLaunchError)
    pub fn update_launch(&self) -> crate::client::fluent_builders::UpdateLaunch {
        crate::client::fluent_builders::UpdateLaunch::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateProject`](crate::client::fluent_builders::UpdateProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::UpdateProject::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::UpdateProject::set_project): <p>The name or ARN of the project to update.</p>
    ///   - [`app_config_resource(ProjectAppConfigResourceConfig)`](crate::client::fluent_builders::UpdateProject::app_config_resource) / [`set_app_config_resource(Option<ProjectAppConfigResourceConfig>)`](crate::client::fluent_builders::UpdateProject::set_app_config_resource): <p>Use this parameter if the project will use client-side evaluation powered by AppConfig. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation. This mitigates the latency and availability risks that come with an API call. allows you to</p>  <p>This parameter is a structure that contains information about the AppConfig application that will be used for client-side evaluation.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateProject::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateProject::set_description): <p>An optional description of the project.</p>
    /// - On success, responds with [`UpdateProjectOutput`](crate::output::UpdateProjectOutput) with field(s):
    ///   - [`project(Option<Project>)`](crate::output::UpdateProjectOutput::project): <p>A structure containing information about the updated project.</p>
    /// - On failure, responds with [`SdkError<UpdateProjectError>`](crate::error::UpdateProjectError)
    pub fn update_project(&self) -> crate::client::fluent_builders::UpdateProject {
        crate::client::fluent_builders::UpdateProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateProjectDataDelivery`](crate::client::fluent_builders::UpdateProjectDataDelivery) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::UpdateProjectDataDelivery::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::UpdateProjectDataDelivery::set_project): <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    ///   - [`s3_destination(S3DestinationConfig)`](crate::client::fluent_builders::UpdateProjectDataDelivery::s3_destination) / [`set_s3_destination(Option<S3DestinationConfig>)`](crate::client::fluent_builders::UpdateProjectDataDelivery::set_s3_destination): <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    ///   - [`cloud_watch_logs(CloudWatchLogsDestinationConfig)`](crate::client::fluent_builders::UpdateProjectDataDelivery::cloud_watch_logs) / [`set_cloud_watch_logs(Option<CloudWatchLogsDestinationConfig>)`](crate::client::fluent_builders::UpdateProjectDataDelivery::set_cloud_watch_logs): <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    /// - On success, responds with [`UpdateProjectDataDeliveryOutput`](crate::output::UpdateProjectDataDeliveryOutput) with field(s):
    ///   - [`project(Option<Project>)`](crate::output::UpdateProjectDataDeliveryOutput::project): <p>A structure containing details about the project that you updated.</p>
    /// - On failure, responds with [`SdkError<UpdateProjectDataDeliveryError>`](crate::error::UpdateProjectDataDeliveryError)
    pub fn update_project_data_delivery(
        &self,
    ) -> crate::client::fluent_builders::UpdateProjectDataDelivery {
        crate::client::fluent_builders::UpdateProjectDataDelivery::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
