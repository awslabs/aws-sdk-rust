// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_experiments_output_next_token(
    input: &crate::operation::list_experiments::ListExperimentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_features_output_next_token(
    input: &crate::operation::list_features::ListFeaturesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_launches_output_next_token(
    input: &crate::operation::list_launches::ListLaunchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_segment_references_output_next_token(
    input: &crate::operation::list_segment_references::ListSegmentReferencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_segments_output_next_token(
    input: &crate::operation::list_segments::ListSegmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_experiments_output_experiments(
    input: crate::operation::list_experiments::ListExperimentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Experiment>> {
    let input = match input.experiments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_features_output_features(
    input: crate::operation::list_features::ListFeaturesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FeatureSummary>> {
    let input = match input.features {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_launches_output_launches(
    input: crate::operation::list_launches::ListLaunchesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Launch>> {
    let input = match input.launches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_projects_output_projects(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProjectSummary>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_segment_references_output_referenced_by(
    input: crate::operation::list_segment_references::ListSegmentReferencesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RefResource>> {
    let input = match input.referenced_by {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_segments_output_segments(
    input: crate::operation::list_segments::ListSegmentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Segment>> {
    let input = match input.segments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
