// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_experiments_output_next_token(
    input: &crate::output::ListExperimentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_features_output_next_token(
    input: &crate::output::ListFeaturesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_launches_output_next_token(
    input: &crate::output::ListLaunchesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_projects_output_next_token(
    input: &crate::output::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_experiments_output_experiments(
    input: crate::output::ListExperimentsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Experiment>> {
    let input = match input.experiments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_features_output_features(
    input: crate::output::ListFeaturesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FeatureSummary>> {
    let input = match input.features {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_launches_output_launches(
    input: crate::output::ListLaunchesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Launch>> {
    let input = match input.launches {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_projects_output_projects(
    input: crate::output::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProjectSummary>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
