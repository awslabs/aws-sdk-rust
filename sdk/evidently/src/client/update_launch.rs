// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLaunch`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::project) / [`set_project(Option<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_project):<br>required: **true**<br><p>The name or ARN of the project that contains the launch that you want to update.</p><br>
    ///   - [`launch(impl Into<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::launch) / [`set_launch(Option<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_launch):<br>required: **true**<br><p>The name of the launch that is to be updated.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_description):<br>required: **false**<br><p>An optional description for the launch.</p><br>
    ///   - [`groups(LaunchGroupConfig)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::groups) / [`set_groups(Option<Vec::<LaunchGroupConfig>>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_groups):<br>required: **false**<br><p>An array of structures that contains the feature and variations that are to be used for the launch.</p><br>
    ///   - [`metric_monitors(MetricMonitorConfig)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::metric_monitors) / [`set_metric_monitors(Option<Vec::<MetricMonitorConfig>>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_metric_monitors):<br>required: **false**<br><p>An array of structures that define the metrics that will be used to monitor the launch performance.</p><br>
    ///   - [`randomization_salt(impl Into<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::randomization_salt) / [`set_randomization_salt(Option<String>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_randomization_salt):<br>required: **false**<br><p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p><br>
    ///   - [`scheduled_splits_config(ScheduledSplitsLaunchConfig)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::scheduled_splits_config) / [`set_scheduled_splits_config(Option<ScheduledSplitsLaunchConfig>)`](crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::set_scheduled_splits_config):<br>required: **false**<br><p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p><br>
    /// - On success, responds with [`UpdateLaunchOutput`](crate::operation::update_launch::UpdateLaunchOutput) with field(s):
    ///   - [`launch(Option<Launch>)`](crate::operation::update_launch::UpdateLaunchOutput::launch): <p>A structure that contains the new configuration of the launch that was updated.</p>
    /// - On failure, responds with [`SdkError<UpdateLaunchError>`](crate::operation::update_launch::UpdateLaunchError)
    pub fn update_launch(&self) -> crate::operation::update_launch::builders::UpdateLaunchFluentBuilder {
        crate::operation::update_launch::builders::UpdateLaunchFluentBuilder::new(self.handle.clone())
    }
}
