// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetExperimentResults`](crate::client::fluent_builders::GetExperimentResults) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project(impl Into<String>)`](crate::client::fluent_builders::GetExperimentResults::project) / [`set_project(Option<String>)`](crate::client::fluent_builders::GetExperimentResults::set_project): <p>The name or ARN of the project that contains the experiment that you want to see the results of.</p>
    ///   - [`experiment(impl Into<String>)`](crate::client::fluent_builders::GetExperimentResults::experiment) / [`set_experiment(Option<String>)`](crate::client::fluent_builders::GetExperimentResults::set_experiment): <p>The name of the experiment to retrieve the results of.</p>
    ///   - [`start_time(DateTime)`](crate::client::fluent_builders::GetExperimentResults::start_time) / [`set_start_time(Option<DateTime>)`](crate::client::fluent_builders::GetExperimentResults::set_start_time): <p>The date and time that the experiment started.</p>
    ///   - [`end_time(DateTime)`](crate::client::fluent_builders::GetExperimentResults::end_time) / [`set_end_time(Option<DateTime>)`](crate::client::fluent_builders::GetExperimentResults::set_end_time): <p>The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.</p>
    ///   - [`metric_names(Vec<String>)`](crate::client::fluent_builders::GetExperimentResults::metric_names) / [`set_metric_names(Option<Vec<String>>)`](crate::client::fluent_builders::GetExperimentResults::set_metric_names): <p>The names of the experiment metrics that you want to see the results of.</p>
    ///   - [`treatment_names(Vec<String>)`](crate::client::fluent_builders::GetExperimentResults::treatment_names) / [`set_treatment_names(Option<Vec<String>>)`](crate::client::fluent_builders::GetExperimentResults::set_treatment_names): <p>The names of the experiment treatments that you want to see the results for.</p>
    ///   - [`base_stat(ExperimentBaseStat)`](crate::client::fluent_builders::GetExperimentResults::base_stat) / [`set_base_stat(Option<ExperimentBaseStat>)`](crate::client::fluent_builders::GetExperimentResults::set_base_stat): <p>The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.</p>
    ///   - [`result_stats(Vec<ExperimentResultRequestType>)`](crate::client::fluent_builders::GetExperimentResults::result_stats) / [`set_result_stats(Option<Vec<ExperimentResultRequestType>>)`](crate::client::fluent_builders::GetExperimentResults::set_result_stats): <p>The statistics that you want to see in the returned results.</p>  <ul>   <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li>   <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li>   <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li>   <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li>  </ul>
    ///   - [`report_names(Vec<ExperimentReportName>)`](crate::client::fluent_builders::GetExperimentResults::report_names) / [`set_report_names(Option<Vec<ExperimentReportName>>)`](crate::client::fluent_builders::GetExperimentResults::set_report_names): <p>The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.</p>
    ///   - [`period(i64)`](crate::client::fluent_builders::GetExperimentResults::period) / [`set_period(i64)`](crate::client::fluent_builders::GetExperimentResults::set_period): <p>In seconds, the amount of time to aggregate results together. </p>
    /// - On success, responds with [`GetExperimentResultsOutput`](crate::output::GetExperimentResultsOutput) with field(s):
    ///   - [`results_data(Option<Vec<ExperimentResultsData>>)`](crate::output::GetExperimentResultsOutput::results_data): <p>An array of structures that include experiment results including metric names and values. </p>
    ///   - [`reports(Option<Vec<ExperimentReport>>)`](crate::output::GetExperimentResultsOutput::reports): <p>An array of structures that include the reports that you requested.</p>
    ///   - [`timestamps(Option<Vec<DateTime>>)`](crate::output::GetExperimentResultsOutput::timestamps): <p>The timestamps of each result returned.</p>
    ///   - [`details(Option<String>)`](crate::output::GetExperimentResultsOutput::details): <p>If the experiment doesn't yet have enough events to provide valid results, this field is returned with the message <code>Not enough events to generate results</code>. If there are enough events to provide valid results, this field is not returned.</p>
    /// - On failure, responds with [`SdkError<GetExperimentResultsError>`](crate::error::GetExperimentResultsError)
    pub fn get_experiment_results(&self) -> crate::client::fluent_builders::GetExperimentResults {
        crate::client::fluent_builders::GetExperimentResults::new(self.handle.clone())
    }
}
