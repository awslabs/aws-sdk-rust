// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_experiment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_experiment::UpdateExperimentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1.as_str());
    }
    if let Some(var_2) = &input.metric_goals {
        let mut array_3 = object.key("metricGoals").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_metric_goal_config::ser_metric_goal_config(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.online_ab_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("onlineAbConfig").start_object();
        crate::protocol_serde::shape_online_ab_config::ser_online_ab_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.randomization_salt {
        object.key("randomizationSalt").string(var_8.as_str());
    }
    if input.remove_segment {
        object.key("removeSegment").boolean(input.remove_segment);
    }
    if let Some(var_9) = &input.sampling_rate {
        object.key("samplingRate").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.segment {
        object.key("segment").string(var_10.as_str());
    }
    if let Some(var_11) = &input.treatments {
        let mut array_12 = object.key("treatments").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_treatment_config::ser_treatment_config(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
