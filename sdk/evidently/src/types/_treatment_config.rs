// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TreatmentConfig {
    /// <p>A name for this treatment.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description for this treatment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The feature that this experiment is testing.</p>
    #[doc(hidden)]
    pub feature: std::option::Option<std::string::String>,
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    #[doc(hidden)]
    pub variation: std::option::Option<std::string::String>,
}
impl TreatmentConfig {
    /// <p>A name for this treatment.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description for this treatment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn feature(&self) -> std::option::Option<&str> {
        self.feature.as_deref()
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn variation(&self) -> std::option::Option<&str> {
        self.variation.as_deref()
    }
}
impl TreatmentConfig {
    /// Creates a new builder-style object to manufacture [`TreatmentConfig`](crate::types::TreatmentConfig).
    pub fn builder() -> crate::types::builders::TreatmentConfigBuilder {
        crate::types::builders::TreatmentConfigBuilder::default()
    }
}

/// A builder for [`TreatmentConfig`](crate::types::TreatmentConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TreatmentConfigBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) feature: std::option::Option<std::string::String>,
    pub(crate) variation: std::option::Option<std::string::String>,
}
impl TreatmentConfigBuilder {
    /// <p>A name for this treatment.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A name for this treatment.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description for this treatment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for this treatment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn feature(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature = Some(input.into());
        self
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn set_feature(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn variation(mut self, input: impl Into<std::string::String>) -> Self {
        self.variation = Some(input.into());
        self
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn set_variation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.variation = input;
        self
    }
    /// Consumes the builder and constructs a [`TreatmentConfig`](crate::types::TreatmentConfig).
    pub fn build(self) -> crate::types::TreatmentConfig {
        crate::types::TreatmentConfig {
            name: self.name,
            description: self.description,
            feature: self.feature,
            variation: self.variation,
        }
    }
}
