// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TreatmentConfig {
    /// <p>A name for this treatment.</p>
    pub name: ::std::string::String,
    /// <p>A description for this treatment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The feature that this experiment is testing.</p>
    pub feature: ::std::string::String,
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub variation: ::std::string::String,
}
impl TreatmentConfig {
    /// <p>A name for this treatment.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A description for this treatment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn feature(&self) -> &str {
        use std::ops::Deref;
        self.feature.deref()
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn variation(&self) -> &str {
        use std::ops::Deref;
        self.variation.deref()
    }
}
impl TreatmentConfig {
    /// Creates a new builder-style object to manufacture [`TreatmentConfig`](crate::types::TreatmentConfig).
    pub fn builder() -> crate::types::builders::TreatmentConfigBuilder {
        crate::types::builders::TreatmentConfigBuilder::default()
    }
}

/// A builder for [`TreatmentConfig`](crate::types::TreatmentConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TreatmentConfigBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) feature: ::std::option::Option<::std::string::String>,
    pub(crate) variation: ::std::option::Option<::std::string::String>,
}
impl TreatmentConfigBuilder {
    /// <p>A name for this treatment.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for this treatment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for this treatment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description for this treatment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for this treatment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for this treatment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The feature that this experiment is testing.</p>
    /// This field is required.
    pub fn feature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The feature that this experiment is testing.</p>
    pub fn get_feature(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    /// This field is required.
    pub fn variation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn set_variation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variation = input;
        self
    }
    /// <p>The name of the variation to use as this treatment in the experiment.</p>
    pub fn get_variation(&self) -> &::std::option::Option<::std::string::String> {
        &self.variation
    }
    /// Consumes the builder and constructs a [`TreatmentConfig`](crate::types::TreatmentConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::TreatmentConfigBuilder::name)
    /// - [`feature`](crate::types::builders::TreatmentConfigBuilder::feature)
    /// - [`variation`](crate::types::builders::TreatmentConfigBuilder::variation)
    pub fn build(self) -> ::std::result::Result<crate::types::TreatmentConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TreatmentConfig {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building TreatmentConfig",
                )
            })?,
            description: self.description,
            feature: self.feature.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "feature",
                    "feature was not specified but it is required when building TreatmentConfig",
                )
            })?,
            variation: self.variation.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "variation",
                    "variation was not specified but it is required when building TreatmentConfig",
                )
            })?,
        })
    }
}
