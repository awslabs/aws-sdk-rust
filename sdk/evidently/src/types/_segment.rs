// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one audience <i>segment</i>. You can use segments in your experiments and launches to narrow the user sessions used for experiment or launch to only the user sessions that match one or more criteria.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Segment {
    /// <p>The ARN of the segment.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the segment.</p>
    pub name: ::std::string::String,
    /// <p>The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Segment rule pattern syntax</a>.</p>
    pub pattern: ::std::string::String,
    /// <p>The date and time that this segment was created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time that this segment was most recently updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>The customer-created description for this segment.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.</p>
    pub experiment_count: ::std::option::Option<i64>,
    /// <p>The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.</p>
    pub launch_count: ::std::option::Option<i64>,
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Segment {
    /// <p>The ARN of the segment.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the segment.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Segment rule pattern syntax</a>.</p>
    pub fn pattern(&self) -> &str {
        use std::ops::Deref;
        self.pattern.deref()
    }
    /// <p>The date and time that this segment was created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time that this segment was most recently updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>The customer-created description for this segment.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.</p>
    pub fn experiment_count(&self) -> ::std::option::Option<i64> {
        self.experiment_count
    }
    /// <p>The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.</p>
    pub fn launch_count(&self) -> ::std::option::Option<i64> {
        self.launch_count
    }
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl Segment {
    /// Creates a new builder-style object to manufacture [`Segment`](crate::types::Segment).
    pub fn builder() -> crate::types::builders::SegmentBuilder {
        crate::types::builders::SegmentBuilder::default()
    }
}

/// A builder for [`Segment`](crate::types::Segment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SegmentBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) pattern: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) experiment_count: ::std::option::Option<i64>,
    pub(crate) launch_count: ::std::option::Option<i64>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl SegmentBuilder {
    /// <p>The ARN of the segment.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the segment.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the segment.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the segment.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the segment.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the segment.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Segment rule pattern syntax</a>.</p>
    /// This field is required.
    pub fn pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Segment rule pattern syntax</a>.</p>
    pub fn set_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>The pattern that defines the attributes to use to evalute whether a user session will be in the segment. For more information about the pattern syntax, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html">Segment rule pattern syntax</a>.</p>
    pub fn get_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.pattern
    }
    /// <p>The date and time that this segment was created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this segment was created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that this segment was created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time that this segment was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that this segment was most recently updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time that this segment was most recently updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The customer-created description for this segment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer-created description for this segment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The customer-created description for this segment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.</p>
    pub fn experiment_count(mut self, input: i64) -> Self {
        self.experiment_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.</p>
    pub fn set_experiment_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.experiment_count = input;
        self
    }
    /// <p>The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.</p>
    pub fn get_experiment_count(&self) -> &::std::option::Option<i64> {
        &self.experiment_count
    }
    /// <p>The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.</p>
    pub fn launch_count(mut self, input: i64) -> Self {
        self.launch_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.</p>
    pub fn set_launch_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.launch_count = input;
        self
    }
    /// <p>The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.</p>
    pub fn get_launch_count(&self) -> &::std::option::Option<i64> {
        &self.launch_count
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Segment`](crate::types::Segment).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::SegmentBuilder::arn)
    /// - [`name`](crate::types::builders::SegmentBuilder::name)
    /// - [`pattern`](crate::types::builders::SegmentBuilder::pattern)
    /// - [`created_time`](crate::types::builders::SegmentBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::SegmentBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::Segment, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Segment {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Segment",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Segment",
                )
            })?,
            pattern: self.pattern.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pattern",
                    "pattern was not specified but it is required when building Segment",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building Segment",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building Segment",
                )
            })?,
            description: self.description,
            experiment_count: self.experiment_count,
            launch_count: self.launch_count,
            tags: self.tags,
        })
    }
}
