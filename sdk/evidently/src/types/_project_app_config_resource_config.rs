// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Use this parameter to configure client-side evaluation for your project. Client-side evaluation allows your application to assign variations to user sessions locally instead of by calling the <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html">EvaluateFeature</a> operation to assign the variations. This mitigates the latency and availability risks that come with an API call.</p>
/// <p> <code>ProjectAppConfigResource</code> is a structure that defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProjectAppConfigResourceConfig {
    /// <p>The ID of the AppConfig application to use for client-side evaluation. </p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The ID of the AppConfig environment to use for client-side evaluation. This must be an environment that is within the application that you specify for <code>applicationId</code>.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
}
impl ProjectAppConfigResourceConfig {
    /// <p>The ID of the AppConfig application to use for client-side evaluation. </p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The ID of the AppConfig environment to use for client-side evaluation. This must be an environment that is within the application that you specify for <code>applicationId</code>.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
}
impl ProjectAppConfigResourceConfig {
    /// Creates a new builder-style object to manufacture [`ProjectAppConfigResourceConfig`](crate::types::ProjectAppConfigResourceConfig).
    pub fn builder() -> crate::types::builders::ProjectAppConfigResourceConfigBuilder {
        crate::types::builders::ProjectAppConfigResourceConfigBuilder::default()
    }
}

/// A builder for [`ProjectAppConfigResourceConfig`](crate::types::ProjectAppConfigResourceConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProjectAppConfigResourceConfigBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
}
impl ProjectAppConfigResourceConfigBuilder {
    /// <p>The ID of the AppConfig application to use for client-side evaluation. </p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The ID of the AppConfig application to use for client-side evaluation. </p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The ID of the AppConfig environment to use for client-side evaluation. This must be an environment that is within the application that you specify for <code>applicationId</code>.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The ID of the AppConfig environment to use for client-side evaluation. This must be an environment that is within the application that you specify for <code>applicationId</code>.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ProjectAppConfigResourceConfig`](crate::types::ProjectAppConfigResourceConfig).
    pub fn build(self) -> crate::types::ProjectAppConfigResourceConfig {
        crate::types::ProjectAppConfigResourceConfig {
            application_id: self.application_id,
            environment_id: self.environment_id,
        }
    }
}
