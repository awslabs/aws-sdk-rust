// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that tells Evidently whether higher or lower values are desired for a metric that is used in an experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricGoal {
    /// <p>A structure that contains details about the metric.</p>
    #[doc(hidden)]
    pub metric_definition: std::option::Option<crate::types::MetricDefinition>,
    /// <p> <code>INCREASE</code> means that a variation with a higher number for this metric is performing better.</p>
    /// <p> <code>DECREASE</code> means that a variation with a lower number for this metric is performing better.</p>
    #[doc(hidden)]
    pub desired_change: std::option::Option<crate::types::ChangeDirectionEnum>,
}
impl MetricGoal {
    /// <p>A structure that contains details about the metric.</p>
    pub fn metric_definition(&self) -> std::option::Option<&crate::types::MetricDefinition> {
        self.metric_definition.as_ref()
    }
    /// <p> <code>INCREASE</code> means that a variation with a higher number for this metric is performing better.</p>
    /// <p> <code>DECREASE</code> means that a variation with a lower number for this metric is performing better.</p>
    pub fn desired_change(&self) -> std::option::Option<&crate::types::ChangeDirectionEnum> {
        self.desired_change.as_ref()
    }
}
impl MetricGoal {
    /// Creates a new builder-style object to manufacture [`MetricGoal`](crate::types::MetricGoal).
    pub fn builder() -> crate::types::builders::MetricGoalBuilder {
        crate::types::builders::MetricGoalBuilder::default()
    }
}

/// A builder for [`MetricGoal`](crate::types::MetricGoal).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricGoalBuilder {
    pub(crate) metric_definition: std::option::Option<crate::types::MetricDefinition>,
    pub(crate) desired_change: std::option::Option<crate::types::ChangeDirectionEnum>,
}
impl MetricGoalBuilder {
    /// <p>A structure that contains details about the metric.</p>
    pub fn metric_definition(mut self, input: crate::types::MetricDefinition) -> Self {
        self.metric_definition = Some(input);
        self
    }
    /// <p>A structure that contains details about the metric.</p>
    pub fn set_metric_definition(
        mut self,
        input: std::option::Option<crate::types::MetricDefinition>,
    ) -> Self {
        self.metric_definition = input;
        self
    }
    /// <p> <code>INCREASE</code> means that a variation with a higher number for this metric is performing better.</p>
    /// <p> <code>DECREASE</code> means that a variation with a lower number for this metric is performing better.</p>
    pub fn desired_change(mut self, input: crate::types::ChangeDirectionEnum) -> Self {
        self.desired_change = Some(input);
        self
    }
    /// <p> <code>INCREASE</code> means that a variation with a higher number for this metric is performing better.</p>
    /// <p> <code>DECREASE</code> means that a variation with a lower number for this metric is performing better.</p>
    pub fn set_desired_change(
        mut self,
        input: std::option::Option<crate::types::ChangeDirectionEnum>,
    ) -> Self {
        self.desired_change = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricGoal`](crate::types::MetricGoal).
    pub fn build(self) -> crate::types::MetricGoal {
        crate::types::MetricGoal {
            metric_definition: self.metric_definition,
            desired_change: self.desired_change,
        }
    }
}
