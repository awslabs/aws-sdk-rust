// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Project {
    /// <p>The name or ARN of the project.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the project.</p>
    pub name: ::std::string::String,
    /// <p>The current state of the project.</p>
    pub status: crate::types::ProjectStatus,
    /// <p>The user-entered description of the project.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the project is created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time that the project was most recently updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>The number of features currently in the project.</p>
    pub feature_count: ::std::option::Option<i64>,
    /// <p>The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.</p>
    pub launch_count: ::std::option::Option<i64>,
    /// <p>The number of ongoing launches currently in the project.</p>
    pub active_launch_count: ::std::option::Option<i64>,
    /// <p>The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.</p>
    pub experiment_count: ::std::option::Option<i64>,
    /// <p>The number of ongoing experiments currently in the project.</p>
    pub active_experiment_count: ::std::option::Option<i64>,
    /// <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage.</p>
    pub data_delivery: ::std::option::Option<crate::types::ProjectDataDelivery>,
    /// <p>This structure defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
    pub app_config_resource: ::std::option::Option<crate::types::ProjectAppConfigResource>,
    /// <p>The list of tag keys and values associated with this project.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Project {
    /// <p>The name or ARN of the project.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the project.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The current state of the project.</p>
    pub fn status(&self) -> &crate::types::ProjectStatus {
        &self.status
    }
    /// <p>The user-entered description of the project.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time that the project is created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time that the project was most recently updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>The number of features currently in the project.</p>
    pub fn feature_count(&self) -> ::std::option::Option<i64> {
        self.feature_count
    }
    /// <p>The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn launch_count(&self) -> ::std::option::Option<i64> {
        self.launch_count
    }
    /// <p>The number of ongoing launches currently in the project.</p>
    pub fn active_launch_count(&self) -> ::std::option::Option<i64> {
        self.active_launch_count
    }
    /// <p>The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn experiment_count(&self) -> ::std::option::Option<i64> {
        self.experiment_count
    }
    /// <p>The number of ongoing experiments currently in the project.</p>
    pub fn active_experiment_count(&self) -> ::std::option::Option<i64> {
        self.active_experiment_count
    }
    /// <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage.</p>
    pub fn data_delivery(&self) -> ::std::option::Option<&crate::types::ProjectDataDelivery> {
        self.data_delivery.as_ref()
    }
    /// <p>This structure defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
    pub fn app_config_resource(&self) -> ::std::option::Option<&crate::types::ProjectAppConfigResource> {
        self.app_config_resource.as_ref()
    }
    /// <p>The list of tag keys and values associated with this project.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl Project {
    /// Creates a new builder-style object to manufacture [`Project`](crate::types::Project).
    pub fn builder() -> crate::types::builders::ProjectBuilder {
        crate::types::builders::ProjectBuilder::default()
    }
}

/// A builder for [`Project`](crate::types::Project).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProjectBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ProjectStatus>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) feature_count: ::std::option::Option<i64>,
    pub(crate) launch_count: ::std::option::Option<i64>,
    pub(crate) active_launch_count: ::std::option::Option<i64>,
    pub(crate) experiment_count: ::std::option::Option<i64>,
    pub(crate) active_experiment_count: ::std::option::Option<i64>,
    pub(crate) data_delivery: ::std::option::Option<crate::types::ProjectDataDelivery>,
    pub(crate) app_config_resource: ::std::option::Option<crate::types::ProjectAppConfigResource>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ProjectBuilder {
    /// <p>The name or ARN of the project.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the project.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name or ARN of the project.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the project.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the project.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The current state of the project.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ProjectStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the project.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProjectStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of the project.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProjectStatus> {
        &self.status
    }
    /// <p>The user-entered description of the project.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-entered description of the project.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The user-entered description of the project.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The date and time that the project is created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the project is created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that the project is created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time that the project was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the project was most recently updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time that the project was most recently updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>The number of features currently in the project.</p>
    pub fn feature_count(mut self, input: i64) -> Self {
        self.feature_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of features currently in the project.</p>
    pub fn set_feature_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.feature_count = input;
        self
    }
    /// <p>The number of features currently in the project.</p>
    pub fn get_feature_count(&self) -> &::std::option::Option<i64> {
        &self.feature_count
    }
    /// <p>The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn launch_count(mut self, input: i64) -> Self {
        self.launch_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn set_launch_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.launch_count = input;
        self
    }
    /// <p>The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn get_launch_count(&self) -> &::std::option::Option<i64> {
        &self.launch_count
    }
    /// <p>The number of ongoing launches currently in the project.</p>
    pub fn active_launch_count(mut self, input: i64) -> Self {
        self.active_launch_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of ongoing launches currently in the project.</p>
    pub fn set_active_launch_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.active_launch_count = input;
        self
    }
    /// <p>The number of ongoing launches currently in the project.</p>
    pub fn get_active_launch_count(&self) -> &::std::option::Option<i64> {
        &self.active_launch_count
    }
    /// <p>The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn experiment_count(mut self, input: i64) -> Self {
        self.experiment_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn set_experiment_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.experiment_count = input;
        self
    }
    /// <p>The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.</p>
    pub fn get_experiment_count(&self) -> &::std::option::Option<i64> {
        &self.experiment_count
    }
    /// <p>The number of ongoing experiments currently in the project.</p>
    pub fn active_experiment_count(mut self, input: i64) -> Self {
        self.active_experiment_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of ongoing experiments currently in the project.</p>
    pub fn set_active_experiment_count(mut self, input: ::std::option::Option<i64>) -> Self {
        self.active_experiment_count = input;
        self
    }
    /// <p>The number of ongoing experiments currently in the project.</p>
    pub fn get_active_experiment_count(&self) -> &::std::option::Option<i64> {
        &self.active_experiment_count
    }
    /// <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage.</p>
    pub fn data_delivery(mut self, input: crate::types::ProjectDataDelivery) -> Self {
        self.data_delivery = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage.</p>
    pub fn set_data_delivery(mut self, input: ::std::option::Option<crate::types::ProjectDataDelivery>) -> Self {
        self.data_delivery = input;
        self
    }
    /// <p>A structure that contains information about where Evidently is to store evaluation events for longer term storage.</p>
    pub fn get_data_delivery(&self) -> &::std::option::Option<crate::types::ProjectDataDelivery> {
        &self.data_delivery
    }
    /// <p>This structure defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
    pub fn app_config_resource(mut self, input: crate::types::ProjectAppConfigResource) -> Self {
        self.app_config_resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>This structure defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
    pub fn set_app_config_resource(mut self, input: ::std::option::Option<crate::types::ProjectAppConfigResource>) -> Self {
        self.app_config_resource = input;
        self
    }
    /// <p>This structure defines the configuration of how your application integrates with AppConfig to run client-side evaluation.</p>
    pub fn get_app_config_resource(&self) -> &::std::option::Option<crate::types::ProjectAppConfigResource> {
        &self.app_config_resource
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys and values associated with this project.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tag keys and values associated with this project.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tag keys and values associated with this project.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Project`](crate::types::Project).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ProjectBuilder::arn)
    /// - [`name`](crate::types::builders::ProjectBuilder::name)
    /// - [`status`](crate::types::builders::ProjectBuilder::status)
    /// - [`created_time`](crate::types::builders::ProjectBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::ProjectBuilder::last_updated_time)
    pub fn build(self) -> ::std::result::Result<crate::types::Project, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Project {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building Project",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building Project",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building Project",
                )
            })?,
            description: self.description,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building Project",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building Project",
                )
            })?,
            feature_count: self.feature_count,
            launch_count: self.launch_count,
            active_launch_count: self.active_launch_count,
            experiment_count: self.experiment_count,
            active_experiment_count: self.active_experiment_count,
            data_delivery: self.data_delivery,
            app_config_resource: self.app_config_resource,
            tags: self.tags,
        })
    }
}
