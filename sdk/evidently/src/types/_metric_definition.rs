// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines a metric that is being used to evaluate the variations during a launch or experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricDefinition {
    /// <p>The name of the metric.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded.</p>
    #[doc(hidden)]
    pub entity_id_key: std::option::Option<std::string::String>,
    /// <p>The value that is tracked to produce the metric.</p>
    #[doc(hidden)]
    pub value_key: std::option::Option<std::string::String>,
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    #[doc(hidden)]
    pub event_pattern: std::option::Option<std::string::String>,
    /// <p>The label for the units that the metric is measuring.</p>
    #[doc(hidden)]
    pub unit_label: std::option::Option<std::string::String>,
}
impl MetricDefinition {
    /// <p>The name of the metric.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded.</p>
    pub fn entity_id_key(&self) -> std::option::Option<&str> {
        self.entity_id_key.as_deref()
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn value_key(&self) -> std::option::Option<&str> {
        self.value_key.as_deref()
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn event_pattern(&self) -> std::option::Option<&str> {
        self.event_pattern.as_deref()
    }
    /// <p>The label for the units that the metric is measuring.</p>
    pub fn unit_label(&self) -> std::option::Option<&str> {
        self.unit_label.as_deref()
    }
}
impl MetricDefinition {
    /// Creates a new builder-style object to manufacture [`MetricDefinition`](crate::types::MetricDefinition).
    pub fn builder() -> crate::types::builders::MetricDefinitionBuilder {
        crate::types::builders::MetricDefinitionBuilder::default()
    }
}

/// A builder for [`MetricDefinition`](crate::types::MetricDefinition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricDefinitionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) entity_id_key: std::option::Option<std::string::String>,
    pub(crate) value_key: std::option::Option<std::string::String>,
    pub(crate) event_pattern: std::option::Option<std::string::String>,
    pub(crate) unit_label: std::option::Option<std::string::String>,
}
impl MetricDefinitionBuilder {
    /// <p>The name of the metric.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded.</p>
    pub fn entity_id_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_id_key = Some(input.into());
        self
    }
    /// <p>The entity, such as a user or session, that does an action that causes a metric value to be recorded.</p>
    pub fn set_entity_id_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entity_id_key = input;
        self
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn value_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.value_key = Some(input.into());
        self
    }
    /// <p>The value that is tracked to produce the metric.</p>
    pub fn set_value_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value_key = input;
        self
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn event_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_pattern = Some(input.into());
        self
    }
    /// <p>The EventBridge event pattern that defines how the metric is recorded.</p>
    /// <p>For more information about EventBridge event patterns, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a>.</p>
    pub fn set_event_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_pattern = input;
        self
    }
    /// <p>The label for the units that the metric is measuring.</p>
    pub fn unit_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit_label = Some(input.into());
        self
    }
    /// <p>The label for the units that the metric is measuring.</p>
    pub fn set_unit_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit_label = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricDefinition`](crate::types::MetricDefinition).
    pub fn build(self) -> crate::types::MetricDefinition {
        crate::types::MetricDefinition {
            name: self.name,
            entity_id_key: self.entity_id_key,
            value_key: self.value_key,
            event_pattern: self.event_pattern,
            unit_label: self.unit_label,
        }
    }
}
