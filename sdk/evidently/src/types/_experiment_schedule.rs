// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the time and date that Evidently completed the analysis of the experiment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExperimentSchedule {
    /// <p>The time and date that Evidently completed the analysis of the experiment.</p>
    #[doc(hidden)]
    pub analysis_complete_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ExperimentSchedule {
    /// <p>The time and date that Evidently completed the analysis of the experiment.</p>
    pub fn analysis_complete_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.analysis_complete_time.as_ref()
    }
}
impl ExperimentSchedule {
    /// Creates a new builder-style object to manufacture [`ExperimentSchedule`](crate::types::ExperimentSchedule).
    pub fn builder() -> crate::types::builders::ExperimentScheduleBuilder {
        crate::types::builders::ExperimentScheduleBuilder::default()
    }
}

/// A builder for [`ExperimentSchedule`](crate::types::ExperimentSchedule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExperimentScheduleBuilder {
    pub(crate) analysis_complete_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ExperimentScheduleBuilder {
    /// <p>The time and date that Evidently completed the analysis of the experiment.</p>
    pub fn analysis_complete_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.analysis_complete_time = Some(input);
        self
    }
    /// <p>The time and date that Evidently completed the analysis of the experiment.</p>
    pub fn set_analysis_complete_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.analysis_complete_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ExperimentSchedule`](crate::types::ExperimentSchedule).
    pub fn build(self) -> crate::types::ExperimentSchedule {
        crate::types::ExperimentSchedule {
            analysis_complete_time: self.analysis_complete_time,
        }
    }
}
