// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that defines a metric to be used to monitor performance of the variations during a launch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricMonitor {
    /// <p>A structure that defines the metric.</p>
    #[doc(hidden)]
    pub metric_definition: std::option::Option<crate::types::MetricDefinition>,
}
impl MetricMonitor {
    /// <p>A structure that defines the metric.</p>
    pub fn metric_definition(&self) -> std::option::Option<&crate::types::MetricDefinition> {
        self.metric_definition.as_ref()
    }
}
impl MetricMonitor {
    /// Creates a new builder-style object to manufacture [`MetricMonitor`](crate::types::MetricMonitor).
    pub fn builder() -> crate::types::builders::MetricMonitorBuilder {
        crate::types::builders::MetricMonitorBuilder::default()
    }
}

/// A builder for [`MetricMonitor`](crate::types::MetricMonitor).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricMonitorBuilder {
    pub(crate) metric_definition: std::option::Option<crate::types::MetricDefinition>,
}
impl MetricMonitorBuilder {
    /// <p>A structure that defines the metric.</p>
    pub fn metric_definition(mut self, input: crate::types::MetricDefinition) -> Self {
        self.metric_definition = Some(input);
        self
    }
    /// <p>A structure that defines the metric.</p>
    pub fn set_metric_definition(
        mut self,
        input: std::option::Option<crate::types::MetricDefinition>,
    ) -> Self {
        self.metric_definition = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricMonitor`](crate::types::MetricMonitor).
    pub fn build(self) -> crate::types::MetricMonitor {
        crate::types::MetricMonitor {
            metric_definition: self.metric_definition,
        }
    }
}
