// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure displays the results of one feature evaluation assignment to one user session.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EvaluationResult {
    /// <p>The name or ARN of the project that contains the feature being evaluated.</p>
    pub project: ::std::option::Option<::std::string::String>,
    /// <p>The name of the feature being evaluated.</p>
    pub feature: ::std::string::String,
    /// <p>The name of the variation that was served to the user session.</p>
    pub variation: ::std::option::Option<::std::string::String>,
    /// <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    pub value: ::std::option::Option<crate::types::VariableValue>,
    /// <p>An internal ID that represents a unique user session of the application.</p>
    pub entity_id: ::std::string::String,
    /// <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment.</p>
    pub reason: ::std::option::Option<::std::string::String>,
    /// <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    pub details: ::std::option::Option<::std::string::String>,
}
impl EvaluationResult {
    /// <p>The name or ARN of the project that contains the feature being evaluated.</p>
    pub fn project(&self) -> ::std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The name of the feature being evaluated.</p>
    pub fn feature(&self) -> &str {
        use std::ops::Deref;
        self.feature.deref()
    }
    /// <p>The name of the variation that was served to the user session.</p>
    pub fn variation(&self) -> ::std::option::Option<&str> {
        self.variation.as_deref()
    }
    /// <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    pub fn value(&self) -> ::std::option::Option<&crate::types::VariableValue> {
        self.value.as_ref()
    }
    /// <p>An internal ID that represents a unique user session of the application.</p>
    pub fn entity_id(&self) -> &str {
        use std::ops::Deref;
        self.entity_id.deref()
    }
    /// <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment.</p>
    pub fn reason(&self) -> ::std::option::Option<&str> {
        self.reason.as_deref()
    }
    /// <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    pub fn details(&self) -> ::std::option::Option<&str> {
        self.details.as_deref()
    }
}
impl EvaluationResult {
    /// Creates a new builder-style object to manufacture [`EvaluationResult`](crate::types::EvaluationResult).
    pub fn builder() -> crate::types::builders::EvaluationResultBuilder {
        crate::types::builders::EvaluationResultBuilder::default()
    }
}

/// A builder for [`EvaluationResult`](crate::types::EvaluationResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EvaluationResultBuilder {
    pub(crate) project: ::std::option::Option<::std::string::String>,
    pub(crate) feature: ::std::option::Option<::std::string::String>,
    pub(crate) variation: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<crate::types::VariableValue>,
    pub(crate) entity_id: ::std::option::Option<::std::string::String>,
    pub(crate) reason: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<::std::string::String>,
}
impl EvaluationResultBuilder {
    /// <p>The name or ARN of the project that contains the feature being evaluated.</p>
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the feature being evaluated.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name or ARN of the project that contains the feature being evaluated.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        &self.project
    }
    /// <p>The name of the feature being evaluated.</p>
    /// This field is required.
    pub fn feature(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the feature being evaluated.</p>
    pub fn set_feature(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The name of the feature being evaluated.</p>
    pub fn get_feature(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature
    }
    /// <p>The name of the variation that was served to the user session.</p>
    pub fn variation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.variation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variation that was served to the user session.</p>
    pub fn set_variation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.variation = input;
        self
    }
    /// <p>The name of the variation that was served to the user session.</p>
    pub fn get_variation(&self) -> &::std::option::Option<::std::string::String> {
        &self.variation
    }
    /// <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    pub fn value(mut self, input: crate::types::VariableValue) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    pub fn set_value(mut self, input: ::std::option::Option<crate::types::VariableValue>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value assigned to this variation to differentiate it from the other variations of this feature.</p>
    pub fn get_value(&self) -> &::std::option::Option<crate::types::VariableValue> {
        &self.value
    }
    /// <p>An internal ID that represents a unique user session of the application.</p>
    /// This field is required.
    pub fn entity_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.entity_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An internal ID that represents a unique user session of the application.</p>
    pub fn set_entity_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.entity_id = input;
        self
    }
    /// <p>An internal ID that represents a unique user session of the application.</p>
    pub fn get_entity_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.entity_id
    }
    /// <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment.</p>
    pub fn reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment.</p>
    pub fn set_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reason = input;
        self
    }
    /// <p>Specifies the reason that the user session was assigned this variation. Possible values include <code>DEFAULT</code>, meaning the user was served the default variation; <code>LAUNCH_RULE_MATCH</code>, if the user session was enrolled in a launch; or <code>EXPERIMENT_RULE_MATCH</code>, if the user session was enrolled in an experiment.</p>
    pub fn get_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.reason
    }
    /// <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    pub fn details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    pub fn set_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.details = input;
        self
    }
    /// <p>If this user was assigned to a launch or experiment, this field lists the launch or experiment name.</p>
    pub fn get_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.details
    }
    /// Consumes the builder and constructs a [`EvaluationResult`](crate::types::EvaluationResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`feature`](crate::types::builders::EvaluationResultBuilder::feature)
    /// - [`entity_id`](crate::types::builders::EvaluationResultBuilder::entity_id)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationResult {
            project: self.project,
            feature: self.feature.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "feature",
                    "feature was not specified but it is required when building EvaluationResult",
                )
            })?,
            variation: self.variation,
            value: self.value,
            entity_id: self.entity_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entity_id",
                    "entity_id was not specified but it is required when building EvaluationResult",
                )
            })?,
            reason: self.reason,
            details: self.details,
        })
    }
}
