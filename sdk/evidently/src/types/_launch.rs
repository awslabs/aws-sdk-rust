// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the configuration details of one Evidently launch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Launch {
    /// <p>The ARN of the launch.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the launch.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The name or ARN of the project that contains the launch.</p>
    #[doc(hidden)]
    pub project: std::option::Option<std::string::String>,
    /// <p>The current state of the launch.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LaunchStatus>,
    /// <p>If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>The description of the launch.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The date and time that the launch is created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the launch was most recently updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A structure that contains information about the start and end times of the launch.</p>
    #[doc(hidden)]
    pub execution: std::option::Option<crate::types::LaunchExecution>,
    /// <p>An array of structures that define the feature variations that are being used in the launch.</p>
    #[doc(hidden)]
    pub groups: std::option::Option<std::vec::Vec<crate::types::LaunchGroup>>,
    /// <p>An array of structures that define the metrics that are being used to monitor the launch performance.</p>
    #[doc(hidden)]
    pub metric_monitors: std::option::Option<std::vec::Vec<crate::types::MetricMonitor>>,
    /// <p>This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>.</p>
    #[doc(hidden)]
    pub randomization_salt: std::option::Option<std::string::String>,
    /// <p>The type of launch.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::LaunchType>,
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    #[doc(hidden)]
    pub scheduled_splits_definition:
        std::option::Option<crate::types::ScheduledSplitsLaunchDefinition>,
    /// <p>The list of tag keys and values associated with this launch.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Launch {
    /// <p>The ARN of the launch.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the launch.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name or ARN of the project that contains the launch.</p>
    pub fn project(&self) -> std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The current state of the launch.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::LaunchStatus> {
        self.status.as_ref()
    }
    /// <p>If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>The description of the launch.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The date and time that the launch is created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The date and time that the launch was most recently updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>A structure that contains information about the start and end times of the launch.</p>
    pub fn execution(&self) -> std::option::Option<&crate::types::LaunchExecution> {
        self.execution.as_ref()
    }
    /// <p>An array of structures that define the feature variations that are being used in the launch.</p>
    pub fn groups(&self) -> std::option::Option<&[crate::types::LaunchGroup]> {
        self.groups.as_deref()
    }
    /// <p>An array of structures that define the metrics that are being used to monitor the launch performance.</p>
    pub fn metric_monitors(&self) -> std::option::Option<&[crate::types::MetricMonitor]> {
        self.metric_monitors.as_deref()
    }
    /// <p>This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(&self) -> std::option::Option<&str> {
        self.randomization_salt.as_deref()
    }
    /// <p>The type of launch.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::LaunchType> {
        self.r#type.as_ref()
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn scheduled_splits_definition(
        &self,
    ) -> std::option::Option<&crate::types::ScheduledSplitsLaunchDefinition> {
        self.scheduled_splits_definition.as_ref()
    }
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl Launch {
    /// Creates a new builder-style object to manufacture [`Launch`](crate::types::Launch).
    pub fn builder() -> crate::types::builders::LaunchBuilder {
        crate::types::builders::LaunchBuilder::default()
    }
}

/// A builder for [`Launch`](crate::types::Launch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LaunchBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) project: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::LaunchStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) execution: std::option::Option<crate::types::LaunchExecution>,
    pub(crate) groups: std::option::Option<std::vec::Vec<crate::types::LaunchGroup>>,
    pub(crate) metric_monitors: std::option::Option<std::vec::Vec<crate::types::MetricMonitor>>,
    pub(crate) randomization_salt: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::LaunchType>,
    pub(crate) scheduled_splits_definition:
        std::option::Option<crate::types::ScheduledSplitsLaunchDefinition>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl LaunchBuilder {
    /// <p>The ARN of the launch.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the launch.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the launch.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the launch.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name or ARN of the project that contains the launch.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.project = Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the launch.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The current state of the launch.</p>
    pub fn status(mut self, input: crate::types::LaunchStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the launch.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::LaunchStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The description of the launch.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the launch.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The date and time that the launch is created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The date and time that the launch is created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that the launch was most recently updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The date and time that the launch was most recently updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>A structure that contains information about the start and end times of the launch.</p>
    pub fn execution(mut self, input: crate::types::LaunchExecution) -> Self {
        self.execution = Some(input);
        self
    }
    /// <p>A structure that contains information about the start and end times of the launch.</p>
    pub fn set_execution(
        mut self,
        input: std::option::Option<crate::types::LaunchExecution>,
    ) -> Self {
        self.execution = input;
        self
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>An array of structures that define the feature variations that are being used in the launch.</p>
    pub fn groups(mut self, input: crate::types::LaunchGroup) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = Some(v);
        self
    }
    /// <p>An array of structures that define the feature variations that are being used in the launch.</p>
    pub fn set_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LaunchGroup>>,
    ) -> Self {
        self.groups = input;
        self
    }
    /// Appends an item to `metric_monitors`.
    ///
    /// To override the contents of this collection use [`set_metric_monitors`](Self::set_metric_monitors).
    ///
    /// <p>An array of structures that define the metrics that are being used to monitor the launch performance.</p>
    pub fn metric_monitors(mut self, input: crate::types::MetricMonitor) -> Self {
        let mut v = self.metric_monitors.unwrap_or_default();
        v.push(input);
        self.metric_monitors = Some(v);
        self
    }
    /// <p>An array of structures that define the metrics that are being used to monitor the launch performance.</p>
    pub fn set_metric_monitors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricMonitor>>,
    ) -> Self {
        self.metric_monitors = input;
        self
    }
    /// <p>This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(mut self, input: impl Into<std::string::String>) -> Self {
        self.randomization_salt = Some(input.into());
        self
    }
    /// <p>This value is used when Evidently assigns a particular user session to the launch, to help create a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>.</p>
    pub fn set_randomization_salt(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.randomization_salt = input;
        self
    }
    /// <p>The type of launch.</p>
    pub fn r#type(mut self, input: crate::types::LaunchType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of launch.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::LaunchType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn scheduled_splits_definition(
        mut self,
        input: crate::types::ScheduledSplitsLaunchDefinition,
    ) -> Self {
        self.scheduled_splits_definition = Some(input);
        self
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn set_scheduled_splits_definition(
        mut self,
        input: std::option::Option<crate::types::ScheduledSplitsLaunchDefinition>,
    ) -> Self {
        self.scheduled_splits_definition = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The list of tag keys and values associated with this launch.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Launch`](crate::types::Launch).
    pub fn build(self) -> crate::types::Launch {
        crate::types::Launch {
            arn: self.arn,
            name: self.name,
            project: self.project,
            status: self.status,
            status_reason: self.status_reason,
            description: self.description,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            execution: self.execution,
            groups: self.groups,
            metric_monitors: self.metric_monitors,
            randomization_salt: self.randomization_salt,
            r#type: self.r#type,
            scheduled_splits_definition: self.scheduled_splits_definition,
            tags: self.tags,
        }
    }
}
