// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains information about one Evidently feature in your account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FeatureSummary {
    /// <p>The ARN of the feature.</p>
    pub arn: ::std::string::String,
    /// <p>The name of the feature.</p>
    pub name: ::std::string::String,
    /// <p>The name or ARN of the project that contains the feature.</p>
    pub project: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the feature.</p>
    pub status: crate::types::FeatureStatus,
    /// <p>The date and time that the feature is created.</p>
    pub created_time: ::aws_smithy_types::DateTime,
    /// <p>The date and time that the feature was most recently updated.</p>
    pub last_updated_time: ::aws_smithy_types::DateTime,
    /// <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>, the default variation is being served to all users.</p>
    pub evaluation_strategy: crate::types::FeatureEvaluationStrategy,
    /// <p>An array of structures that define</p>
    pub evaluation_rules: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationRule>>,
    /// <p>The name of the variation that is used as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    pub default_variation: ::std::option::Option<::std::string::String>,
    /// <p>The list of tag keys and values associated with this feature.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl FeatureSummary {
    /// <p>The ARN of the feature.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The name of the feature.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The name or ARN of the project that contains the feature.</p>
    pub fn project(&self) -> ::std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The current state of the feature.</p>
    pub fn status(&self) -> &crate::types::FeatureStatus {
        &self.status
    }
    /// <p>The date and time that the feature is created.</p>
    pub fn created_time(&self) -> &::aws_smithy_types::DateTime {
        &self.created_time
    }
    /// <p>The date and time that the feature was most recently updated.</p>
    pub fn last_updated_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_time
    }
    /// <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>, the default variation is being served to all users.</p>
    pub fn evaluation_strategy(&self) -> &crate::types::FeatureEvaluationStrategy {
        &self.evaluation_strategy
    }
    /// <p>An array of structures that define</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.evaluation_rules.is_none()`.
    pub fn evaluation_rules(&self) -> &[crate::types::EvaluationRule] {
        self.evaluation_rules.as_deref().unwrap_or_default()
    }
    /// <p>The name of the variation that is used as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    pub fn default_variation(&self) -> ::std::option::Option<&str> {
        self.default_variation.as_deref()
    }
    /// <p>The list of tag keys and values associated with this feature.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl FeatureSummary {
    /// Creates a new builder-style object to manufacture [`FeatureSummary`](crate::types::FeatureSummary).
    pub fn builder() -> crate::types::builders::FeatureSummaryBuilder {
        crate::types::builders::FeatureSummaryBuilder::default()
    }
}

/// A builder for [`FeatureSummary`](crate::types::FeatureSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FeatureSummaryBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) project: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::FeatureStatus>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) evaluation_strategy: ::std::option::Option<crate::types::FeatureEvaluationStrategy>,
    pub(crate) evaluation_rules: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationRule>>,
    pub(crate) default_variation: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl FeatureSummaryBuilder {
    /// <p>The ARN of the feature.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the feature.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the feature.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the feature.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the feature.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the feature.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name or ARN of the project that contains the feature.</p>
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the feature.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name or ARN of the project that contains the feature.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        &self.project
    }
    /// <p>The current state of the feature.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::FeatureStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the feature.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of the feature.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::FeatureStatus> {
        &self.status
    }
    /// <p>The date and time that the feature is created.</p>
    /// This field is required.
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the feature is created.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The date and time that the feature is created.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// <p>The date and time that the feature was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the feature was most recently updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time that the feature was most recently updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>, the default variation is being served to all users.</p>
    /// This field is required.
    pub fn evaluation_strategy(mut self, input: crate::types::FeatureEvaluationStrategy) -> Self {
        self.evaluation_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>, the default variation is being served to all users.</p>
    pub fn set_evaluation_strategy(mut self, input: ::std::option::Option<crate::types::FeatureEvaluationStrategy>) -> Self {
        self.evaluation_strategy = input;
        self
    }
    /// <p>If this value is <code>ALL_RULES</code>, the traffic allocation specified by any ongoing launches or experiments is being used. If this is <code>DEFAULT_VARIATION</code>, the default variation is being served to all users.</p>
    pub fn get_evaluation_strategy(&self) -> &::std::option::Option<crate::types::FeatureEvaluationStrategy> {
        &self.evaluation_strategy
    }
    /// Appends an item to `evaluation_rules`.
    ///
    /// To override the contents of this collection use [`set_evaluation_rules`](Self::set_evaluation_rules).
    ///
    /// <p>An array of structures that define</p>
    pub fn evaluation_rules(mut self, input: crate::types::EvaluationRule) -> Self {
        let mut v = self.evaluation_rules.unwrap_or_default();
        v.push(input);
        self.evaluation_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that define</p>
    pub fn set_evaluation_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationRule>>) -> Self {
        self.evaluation_rules = input;
        self
    }
    /// <p>An array of structures that define</p>
    pub fn get_evaluation_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EvaluationRule>> {
        &self.evaluation_rules
    }
    /// <p>The name of the variation that is used as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    pub fn default_variation(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_variation = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the variation that is used as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    pub fn set_default_variation(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_variation = input;
        self
    }
    /// <p>The name of the variation that is used as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p>
    pub fn get_default_variation(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_variation
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tag keys and values associated with this feature.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tag keys and values associated with this feature.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tag keys and values associated with this feature.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`FeatureSummary`](crate::types::FeatureSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::FeatureSummaryBuilder::arn)
    /// - [`name`](crate::types::builders::FeatureSummaryBuilder::name)
    /// - [`status`](crate::types::builders::FeatureSummaryBuilder::status)
    /// - [`created_time`](crate::types::builders::FeatureSummaryBuilder::created_time)
    /// - [`last_updated_time`](crate::types::builders::FeatureSummaryBuilder::last_updated_time)
    /// - [`evaluation_strategy`](crate::types::builders::FeatureSummaryBuilder::evaluation_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::FeatureSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FeatureSummary {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building FeatureSummary",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FeatureSummary",
                )
            })?,
            project: self.project,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building FeatureSummary",
                )
            })?,
            created_time: self.created_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_time",
                    "created_time was not specified but it is required when building FeatureSummary",
                )
            })?,
            last_updated_time: self.last_updated_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_time",
                    "last_updated_time was not specified but it is required when building FeatureSummary",
                )
            })?,
            evaluation_strategy: self.evaluation_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "evaluation_strategy",
                    "evaluation_strategy was not specified but it is required when building FeatureSummary",
                )
            })?,
            evaluation_rules: self.evaluation_rules,
            default_variation: self.default_variation,
            tags: self.tags,
        })
    }
}
