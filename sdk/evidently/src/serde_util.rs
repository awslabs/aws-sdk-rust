// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_experiment_output_correct_errors(
    mut builder: crate::operation::create_experiment::builders::CreateExperimentOutputBuilder,
) -> crate::operation::create_experiment::builders::CreateExperimentOutputBuilder {
    if builder.experiment.is_none() {
        builder.experiment = {
            let builder = crate::types::builders::ExperimentBuilder::default();
            crate::serde_util::experiment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_launch_output_correct_errors(
    mut builder: crate::operation::create_launch::builders::CreateLaunchOutputBuilder,
) -> crate::operation::create_launch::builders::CreateLaunchOutputBuilder {
    if builder.launch.is_none() {
        builder.launch = {
            let builder = crate::types::builders::LaunchBuilder::default();
            crate::serde_util::launch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_project_output_correct_errors(
    mut builder: crate::operation::create_project::builders::CreateProjectOutputBuilder,
) -> crate::operation::create_project::builders::CreateProjectOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectBuilder::default();
            crate::serde_util::project_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_segment_output_correct_errors(
    mut builder: crate::operation::create_segment::builders::CreateSegmentOutputBuilder,
) -> crate::operation::create_segment::builders::CreateSegmentOutputBuilder {
    if builder.segment.is_none() {
        builder.segment = {
            let builder = crate::types::builders::SegmentBuilder::default();
            crate::serde_util::segment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_feature_output_correct_errors(
    mut builder: crate::operation::get_feature::builders::GetFeatureOutputBuilder,
) -> crate::operation::get_feature::builders::GetFeatureOutputBuilder {
    if builder.feature.is_none() {
        builder.feature = {
            let builder = crate::types::builders::FeatureBuilder::default();
            crate::serde_util::feature_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_project_output_correct_errors(
    mut builder: crate::operation::get_project::builders::GetProjectOutputBuilder,
) -> crate::operation::get_project::builders::GetProjectOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectBuilder::default();
            crate::serde_util::project_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_segment_output_correct_errors(
    mut builder: crate::operation::get_segment::builders::GetSegmentOutputBuilder,
) -> crate::operation::get_segment::builders::GetSegmentOutputBuilder {
    if builder.segment.is_none() {
        builder.segment = {
            let builder = crate::types::builders::SegmentBuilder::default();
            crate::serde_util::segment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn start_launch_output_correct_errors(
    mut builder: crate::operation::start_launch::builders::StartLaunchOutputBuilder,
) -> crate::operation::start_launch::builders::StartLaunchOutputBuilder {
    if builder.launch.is_none() {
        builder.launch = {
            let builder = crate::types::builders::LaunchBuilder::default();
            crate::serde_util::launch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn test_segment_pattern_output_correct_errors(
    mut builder: crate::operation::test_segment_pattern::builders::TestSegmentPatternOutputBuilder,
) -> crate::operation::test_segment_pattern::builders::TestSegmentPatternOutputBuilder {
    if builder.r#match.is_none() {
        builder.r#match = Some(Default::default())
    }
    builder
}

pub(crate) fn update_experiment_output_correct_errors(
    mut builder: crate::operation::update_experiment::builders::UpdateExperimentOutputBuilder,
) -> crate::operation::update_experiment::builders::UpdateExperimentOutputBuilder {
    if builder.experiment.is_none() {
        builder.experiment = {
            let builder = crate::types::builders::ExperimentBuilder::default();
            crate::serde_util::experiment_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_feature_output_correct_errors(
    mut builder: crate::operation::update_feature::builders::UpdateFeatureOutputBuilder,
) -> crate::operation::update_feature::builders::UpdateFeatureOutputBuilder {
    if builder.feature.is_none() {
        builder.feature = {
            let builder = crate::types::builders::FeatureBuilder::default();
            crate::serde_util::feature_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_launch_output_correct_errors(
    mut builder: crate::operation::update_launch::builders::UpdateLaunchOutputBuilder,
) -> crate::operation::update_launch::builders::UpdateLaunchOutputBuilder {
    if builder.launch.is_none() {
        builder.launch = {
            let builder = crate::types::builders::LaunchBuilder::default();
            crate::serde_util::launch_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_project_output_correct_errors(
    mut builder: crate::operation::update_project::builders::UpdateProjectOutputBuilder,
) -> crate::operation::update_project::builders::UpdateProjectOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectBuilder::default();
            crate::serde_util::project_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_project_data_delivery_output_correct_errors(
    mut builder: crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryOutputBuilder,
) -> crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryOutputBuilder {
    if builder.project.is_none() {
        builder.project = {
            let builder = crate::types::builders::ProjectBuilder::default();
            crate::serde_util::project_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn experiment_correct_errors(mut builder: crate::types::builders::ExperimentBuilder) -> crate::types::builders::ExperimentBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExperimentStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ExperimentType>().ok()
    }
    builder
}

pub(crate) fn launch_correct_errors(mut builder: crate::types::builders::LaunchBuilder) -> crate::types::builders::LaunchBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::LaunchStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::LaunchType>().ok()
    }
    builder
}

pub(crate) fn project_correct_errors(mut builder: crate::types::builders::ProjectBuilder) -> crate::types::builders::ProjectBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProjectStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn segment_correct_errors(mut builder: crate::types::builders::SegmentBuilder) -> crate::types::builders::SegmentBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn feature_correct_errors(mut builder: crate::types::builders::FeatureBuilder) -> crate::types::builders::FeatureBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FeatureStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.evaluation_strategy.is_none() {
        builder.evaluation_strategy = "no value was set".parse::<crate::types::FeatureEvaluationStrategy>().ok()
    }
    if builder.value_type.is_none() {
        builder.value_type = "no value was set".parse::<crate::types::VariationValueType>().ok()
    }
    if builder.variations.is_none() {
        builder.variations = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_result_correct_errors(
    mut builder: crate::types::builders::EvaluationResultBuilder,
) -> crate::types::builders::EvaluationResultBuilder {
    if builder.feature.is_none() {
        builder.feature = Some(Default::default())
    }
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    builder
}

pub(crate) fn feature_summary_correct_errors(
    mut builder: crate::types::builders::FeatureSummaryBuilder,
) -> crate::types::builders::FeatureSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FeatureStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.evaluation_strategy.is_none() {
        builder.evaluation_strategy = "no value was set".parse::<crate::types::FeatureEvaluationStrategy>().ok()
    }
    builder
}

pub(crate) fn project_app_config_resource_correct_errors(
    mut builder: crate::types::builders::ProjectAppConfigResourceBuilder,
) -> crate::types::builders::ProjectAppConfigResourceBuilder {
    if builder.application_id.is_none() {
        builder.application_id = Some(Default::default())
    }
    if builder.environment_id.is_none() {
        builder.environment_id = Some(Default::default())
    }
    if builder.configuration_profile_id.is_none() {
        builder.configuration_profile_id = Some(Default::default())
    }
    builder
}

pub(crate) fn project_summary_correct_errors(
    mut builder: crate::types::builders::ProjectSummaryBuilder,
) -> crate::types::builders::ProjectSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProjectStatus>().ok()
    }
    if builder.created_time.is_none() {
        builder.created_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_time.is_none() {
        builder.last_updated_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ref_resource_correct_errors(mut builder: crate::types::builders::RefResourceBuilder) -> crate::types::builders::RefResourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_rule_correct_errors(
    mut builder: crate::types::builders::EvaluationRuleBuilder,
) -> crate::types::builders::EvaluationRuleBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn launch_group_correct_errors(mut builder: crate::types::builders::LaunchGroupBuilder) -> crate::types::builders::LaunchGroupBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.feature_variations.is_none() {
        builder.feature_variations = Some(Default::default())
    }
    builder
}

pub(crate) fn metric_goal_correct_errors(mut builder: crate::types::builders::MetricGoalBuilder) -> crate::types::builders::MetricGoalBuilder {
    if builder.metric_definition.is_none() {
        builder.metric_definition = {
            let builder = crate::types::builders::MetricDefinitionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn metric_monitor_correct_errors(
    mut builder: crate::types::builders::MetricMonitorBuilder,
) -> crate::types::builders::MetricMonitorBuilder {
    if builder.metric_definition.is_none() {
        builder.metric_definition = {
            let builder = crate::types::builders::MetricDefinitionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn treatment_correct_errors(mut builder: crate::types::builders::TreatmentBuilder) -> crate::types::builders::TreatmentBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduled_split_correct_errors(
    mut builder: crate::types::builders::ScheduledSplitBuilder,
) -> crate::types::builders::ScheduledSplitBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn segment_override_correct_errors(
    mut builder: crate::types::builders::SegmentOverrideBuilder,
) -> crate::types::builders::SegmentOverrideBuilder {
    if builder.segment.is_none() {
        builder.segment = Some(Default::default())
    }
    if builder.evaluation_order.is_none() {
        builder.evaluation_order = Some(Default::default())
    }
    if builder.weights.is_none() {
        builder.weights = Some(Default::default())
    }
    builder
}
