// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSegmentReferencesInput {
    /// <p>The ARN of the segment that you want to view information for.</p>
    #[doc(hidden)]
    pub segment: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifies whether to return information about launches or experiments that use this segment.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SegmentReferenceResourceType>,
}
impl ListSegmentReferencesInput {
    /// <p>The ARN of the segment that you want to view information for.</p>
    pub fn segment(&self) -> std::option::Option<&str> {
        self.segment.as_deref()
    }
    /// <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies whether to return information about launches or experiments that use this segment.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SegmentReferenceResourceType> {
        self.r#type.as_ref()
    }
}
impl ListSegmentReferencesInput {
    /// Creates a new builder-style object to manufacture [`ListSegmentReferencesInput`](crate::operation::list_segment_references::ListSegmentReferencesInput).
    pub fn builder(
    ) -> crate::operation::list_segment_references::builders::ListSegmentReferencesInputBuilder
    {
        crate::operation::list_segment_references::builders::ListSegmentReferencesInputBuilder::default()
    }
}

/// A builder for [`ListSegmentReferencesInput`](crate::operation::list_segment_references::ListSegmentReferencesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSegmentReferencesInputBuilder {
    pub(crate) segment: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::SegmentReferenceResourceType>,
}
impl ListSegmentReferencesInputBuilder {
    /// <p>The ARN of the segment that you want to view information for.</p>
    pub fn segment(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment = Some(input.into());
        self
    }
    /// <p>The ARN of the segment that you want to view information for.</p>
    pub fn set_segment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment = input;
        self
    }
    /// <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If you omit this, the default of 50 is used.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifies whether to return information about launches or experiments that use this segment.</p>
    pub fn r#type(mut self, input: crate::types::SegmentReferenceResourceType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Specifies whether to return information about launches or experiments that use this segment.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::SegmentReferenceResourceType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSegmentReferencesInput`](crate::operation::list_segment_references::ListSegmentReferencesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_segment_references::ListSegmentReferencesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_segment_references::ListSegmentReferencesInput {
                segment: self.segment,
                max_results: self.max_results,
                next_token: self.next_token,
                r#type: self.r#type,
            },
        )
    }
}
