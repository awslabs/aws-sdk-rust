// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestSegmentPatternOutput {
    /// <p>Returns <code>true</code> if the pattern matches the payload.</p>
    #[doc(hidden)]
    pub r#match: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl TestSegmentPatternOutput {
    /// <p>Returns <code>true</code> if the pattern matches the payload.</p>
    pub fn r#match(&self) -> std::option::Option<bool> {
        self.r#match
    }
}
impl aws_http::request_id::RequestId for TestSegmentPatternOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TestSegmentPatternOutput {
    /// Creates a new builder-style object to manufacture [`TestSegmentPatternOutput`](crate::operation::test_segment_pattern::TestSegmentPatternOutput).
    pub fn builder(
    ) -> crate::operation::test_segment_pattern::builders::TestSegmentPatternOutputBuilder {
        crate::operation::test_segment_pattern::builders::TestSegmentPatternOutputBuilder::default()
    }
}

/// A builder for [`TestSegmentPatternOutput`](crate::operation::test_segment_pattern::TestSegmentPatternOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestSegmentPatternOutputBuilder {
    pub(crate) r#match: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl TestSegmentPatternOutputBuilder {
    /// <p>Returns <code>true</code> if the pattern matches the payload.</p>
    pub fn r#match(mut self, input: bool) -> Self {
        self.r#match = Some(input);
        self
    }
    /// <p>Returns <code>true</code> if the pattern matches the payload.</p>
    pub fn set_match(mut self, input: std::option::Option<bool>) -> Self {
        self.r#match = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TestSegmentPatternOutput`](crate::operation::test_segment_pattern::TestSegmentPatternOutput).
    pub fn build(self) -> crate::operation::test_segment_pattern::TestSegmentPatternOutput {
        crate::operation::test_segment_pattern::TestSegmentPatternOutput {
            r#match: self.r#match,
            _request_id: self._request_id,
        }
    }
}
