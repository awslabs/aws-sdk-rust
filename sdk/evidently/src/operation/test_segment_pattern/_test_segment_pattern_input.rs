// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestSegmentPatternInput {
    /// <p>The pattern to test.</p>
    #[doc(hidden)]
    pub pattern: std::option::Option<std::string::String>,
    /// <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
    #[doc(hidden)]
    pub payload: std::option::Option<std::string::String>,
}
impl TestSegmentPatternInput {
    /// <p>The pattern to test.</p>
    pub fn pattern(&self) -> std::option::Option<&str> {
        self.pattern.as_deref()
    }
    /// <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
    pub fn payload(&self) -> std::option::Option<&str> {
        self.payload.as_deref()
    }
}
impl TestSegmentPatternInput {
    /// Creates a new builder-style object to manufacture [`TestSegmentPatternInput`](crate::operation::test_segment_pattern::TestSegmentPatternInput).
    pub fn builder(
    ) -> crate::operation::test_segment_pattern::builders::TestSegmentPatternInputBuilder {
        crate::operation::test_segment_pattern::builders::TestSegmentPatternInputBuilder::default()
    }
}

/// A builder for [`TestSegmentPatternInput`](crate::operation::test_segment_pattern::TestSegmentPatternInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestSegmentPatternInputBuilder {
    pub(crate) pattern: std::option::Option<std::string::String>,
    pub(crate) payload: std::option::Option<std::string::String>,
}
impl TestSegmentPatternInputBuilder {
    /// <p>The pattern to test.</p>
    pub fn pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.pattern = Some(input.into());
        self
    }
    /// <p>The pattern to test.</p>
    pub fn set_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
    pub fn payload(mut self, input: impl Into<std::string::String>) -> Self {
        self.payload = Some(input.into());
        self
    }
    /// <p>A sample <code>evaluationContext</code> JSON block to test against the specified pattern.</p>
    pub fn set_payload(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.payload = input;
        self
    }
    /// Consumes the builder and constructs a [`TestSegmentPatternInput`](crate::operation::test_segment_pattern::TestSegmentPatternInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_segment_pattern::TestSegmentPatternInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::test_segment_pattern::TestSegmentPatternInput {
                pattern: self.pattern,
                payload: self.payload,
            },
        )
    }
}
