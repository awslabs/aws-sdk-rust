// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateExperimentInput {
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    #[doc(hidden)]
    pub project: std::option::Option<std::string::String>,
    /// <p>The name of the experiment to update.</p>
    #[doc(hidden)]
    pub experiment: std::option::Option<std::string::String>,
    /// <p>An optional description of the experiment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    #[doc(hidden)]
    pub treatments: std::option::Option<std::vec::Vec<crate::types::TreatmentConfig>>,
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    #[doc(hidden)]
    pub metric_goals: std::option::Option<std::vec::Vec<crate::types::MetricGoalConfig>>,
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    #[doc(hidden)]
    pub randomization_salt: std::option::Option<std::string::String>,
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    #[doc(hidden)]
    pub sampling_rate: std::option::Option<i64>,
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    #[doc(hidden)]
    pub segment: std::option::Option<std::string::String>,
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    #[doc(hidden)]
    pub remove_segment: bool,
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    #[doc(hidden)]
    pub online_ab_config: std::option::Option<crate::types::OnlineAbConfig>,
}
impl UpdateExperimentInput {
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn project(&self) -> std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The name of the experiment to update.</p>
    pub fn experiment(&self) -> std::option::Option<&str> {
        self.experiment.as_deref()
    }
    /// <p>An optional description of the experiment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn treatments(&self) -> std::option::Option<&[crate::types::TreatmentConfig]> {
        self.treatments.as_deref()
    }
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn metric_goals(&self) -> std::option::Option<&[crate::types::MetricGoalConfig]> {
        self.metric_goals.as_deref()
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(&self) -> std::option::Option<&str> {
        self.randomization_salt.as_deref()
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn sampling_rate(&self) -> std::option::Option<i64> {
        self.sampling_rate
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn segment(&self) -> std::option::Option<&str> {
        self.segment.as_deref()
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn remove_segment(&self) -> bool {
        self.remove_segment
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn online_ab_config(&self) -> std::option::Option<&crate::types::OnlineAbConfig> {
        self.online_ab_config.as_ref()
    }
}
impl UpdateExperimentInput {
    /// Creates a new builder-style object to manufacture [`UpdateExperimentInput`](crate::operation::update_experiment::UpdateExperimentInput).
    pub fn builder() -> crate::operation::update_experiment::builders::UpdateExperimentInputBuilder
    {
        crate::operation::update_experiment::builders::UpdateExperimentInputBuilder::default()
    }
}

/// A builder for [`UpdateExperimentInput`](crate::operation::update_experiment::UpdateExperimentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateExperimentInputBuilder {
    pub(crate) project: std::option::Option<std::string::String>,
    pub(crate) experiment: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) treatments: std::option::Option<std::vec::Vec<crate::types::TreatmentConfig>>,
    pub(crate) metric_goals: std::option::Option<std::vec::Vec<crate::types::MetricGoalConfig>>,
    pub(crate) randomization_salt: std::option::Option<std::string::String>,
    pub(crate) sampling_rate: std::option::Option<i64>,
    pub(crate) segment: std::option::Option<std::string::String>,
    pub(crate) remove_segment: std::option::Option<bool>,
    pub(crate) online_ab_config: std::option::Option<crate::types::OnlineAbConfig>,
}
impl UpdateExperimentInputBuilder {
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.project = Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name of the experiment to update.</p>
    pub fn experiment(mut self, input: impl Into<std::string::String>) -> Self {
        self.experiment = Some(input.into());
        self
    }
    /// <p>The name of the experiment to update.</p>
    pub fn set_experiment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.experiment = input;
        self
    }
    /// <p>An optional description of the experiment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>An optional description of the experiment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `treatments`.
    ///
    /// To override the contents of this collection use [`set_treatments`](Self::set_treatments).
    ///
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn treatments(mut self, input: crate::types::TreatmentConfig) -> Self {
        let mut v = self.treatments.unwrap_or_default();
        v.push(input);
        self.treatments = Some(v);
        self
    }
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn set_treatments(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TreatmentConfig>>,
    ) -> Self {
        self.treatments = input;
        self
    }
    /// Appends an item to `metric_goals`.
    ///
    /// To override the contents of this collection use [`set_metric_goals`](Self::set_metric_goals).
    ///
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn metric_goals(mut self, input: crate::types::MetricGoalConfig) -> Self {
        let mut v = self.metric_goals.unwrap_or_default();
        v.push(input);
        self.metric_goals = Some(v);
        self
    }
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn set_metric_goals(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MetricGoalConfig>>,
    ) -> Self {
        self.metric_goals = input;
        self
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(mut self, input: impl Into<std::string::String>) -> Self {
        self.randomization_salt = Some(input.into());
        self
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn set_randomization_salt(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.randomization_salt = input;
        self
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn sampling_rate(mut self, input: i64) -> Self {
        self.sampling_rate = Some(input);
        self
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn set_sampling_rate(mut self, input: std::option::Option<i64>) -> Self {
        self.sampling_rate = input;
        self
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn segment(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment = Some(input.into());
        self
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn set_segment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment = input;
        self
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn remove_segment(mut self, input: bool) -> Self {
        self.remove_segment = Some(input);
        self
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn set_remove_segment(mut self, input: std::option::Option<bool>) -> Self {
        self.remove_segment = input;
        self
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn online_ab_config(mut self, input: crate::types::OnlineAbConfig) -> Self {
        self.online_ab_config = Some(input);
        self
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn set_online_ab_config(
        mut self,
        input: std::option::Option<crate::types::OnlineAbConfig>,
    ) -> Self {
        self.online_ab_config = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateExperimentInput`](crate::operation::update_experiment::UpdateExperimentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_experiment::UpdateExperimentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_experiment::UpdateExperimentInput {
            project: self.project,
            experiment: self.experiment,
            description: self.description,
            treatments: self.treatments,
            metric_goals: self.metric_goals,
            randomization_salt: self.randomization_salt,
            sampling_rate: self.sampling_rate,
            segment: self.segment,
            remove_segment: self.remove_segment.unwrap_or_default(),
            online_ab_config: self.online_ab_config,
        })
    }
}
