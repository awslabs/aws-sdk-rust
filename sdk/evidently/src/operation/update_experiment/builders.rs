// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_experiment::_update_experiment_output::UpdateExperimentOutputBuilder;

pub use crate::operation::update_experiment::_update_experiment_input::UpdateExperimentInputBuilder;

impl UpdateExperimentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_experiment::UpdateExperimentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_experiment::UpdateExperimentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_experiment();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateExperiment`.
///
/// <p>Updates an Evidently experiment. </p>
/// <p>Don't use this operation to update an experiment's tag. Instead, use <a href="https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html">TagResource</a>. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateExperimentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_experiment::builders::UpdateExperimentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_experiment::UpdateExperimentOutput,
        crate::operation::update_experiment::UpdateExperimentError,
    > for UpdateExperimentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_experiment::UpdateExperimentOutput,
            crate::operation::update_experiment::UpdateExperimentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateExperimentFluentBuilder {
    /// Creates a new `UpdateExperiment`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateExperiment as a reference.
    pub fn as_input(&self) -> &crate::operation::update_experiment::builders::UpdateExperimentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_experiment::UpdateExperimentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_experiment::UpdateExperimentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_experiment::UpdateExperiment::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_experiment::UpdateExperiment::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_experiment::UpdateExperimentOutput,
        crate::operation::update_experiment::UpdateExperimentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.project(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_project(input);
        self
    }
    /// <p>The name or ARN of the project that contains the experiment that you want to update.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_project()
    }
    /// <p>The name of the experiment to update.</p>
    pub fn experiment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.experiment(input.into());
        self
    }
    /// <p>The name of the experiment to update.</p>
    pub fn set_experiment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_experiment(input);
        self
    }
    /// <p>The name of the experiment to update.</p>
    pub fn get_experiment(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_experiment()
    }
    /// <p>An optional description of the experiment.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>An optional description of the experiment.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>An optional description of the experiment.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// Appends an item to `treatments`.
    ///
    /// To override the contents of this collection use [`set_treatments`](Self::set_treatments).
    ///
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn treatments(mut self, input: crate::types::TreatmentConfig) -> Self {
        self.inner = self.inner.treatments(input);
        self
    }
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn set_treatments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TreatmentConfig>>) -> Self {
        self.inner = self.inner.set_treatments(input);
        self
    }
    /// <p>An array of structures that define the variations being tested in the experiment.</p>
    pub fn get_treatments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TreatmentConfig>> {
        self.inner.get_treatments()
    }
    /// Appends an item to `metricGoals`.
    ///
    /// To override the contents of this collection use [`set_metric_goals`](Self::set_metric_goals).
    ///
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn metric_goals(mut self, input: crate::types::MetricGoalConfig) -> Self {
        self.inner = self.inner.metric_goals(input);
        self
    }
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn set_metric_goals(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricGoalConfig>>) -> Self {
        self.inner = self.inner.set_metric_goals(input);
        self
    }
    /// <p>An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.</p>
    pub fn get_metric_goals(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricGoalConfig>> {
        self.inner.get_metric_goals()
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.randomization_salt(input.into());
        self
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn set_randomization_salt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_randomization_salt(input);
        self
    }
    /// <p>When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.</p>
    pub fn get_randomization_salt(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_randomization_salt()
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn sampling_rate(mut self, input: i64) -> Self {
        self.inner = self.inner.sampling_rate(input);
        self
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn set_sampling_rate(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_sampling_rate(input);
        self
    }
    /// <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p>
    /// <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
    pub fn get_sampling_rate(&self) -> &::std::option::Option<i64> {
        self.inner.get_sampling_rate()
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn segment(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.segment(input.into());
        self
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn set_segment(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_segment(input);
        self
    }
    /// <p>Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn get_segment(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_segment()
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn remove_segment(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_segment(input);
        self
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn set_remove_segment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_segment(input);
        self
    }
    /// <p>Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.</p>
    pub fn get_remove_segment(&self) -> &::std::option::Option<bool> {
        self.inner.get_remove_segment()
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn online_ab_config(mut self, input: crate::types::OnlineAbConfig) -> Self {
        self.inner = self.inner.online_ab_config(input);
        self
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn set_online_ab_config(mut self, input: ::std::option::Option<crate::types::OnlineAbConfig>) -> Self {
        self.inner = self.inner.set_online_ab_config(input);
        self
    }
    /// <p>A structure that contains the configuration of which variation o use as the "control" version. The "control" version is used for comparison with other variations. This structure also specifies how much experiment traffic is allocated to each variation.</p>
    pub fn get_online_ab_config(&self) -> &::std::option::Option<crate::types::OnlineAbConfig> {
        self.inner.get_online_ab_config()
    }
}
