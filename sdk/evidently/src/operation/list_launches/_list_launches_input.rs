// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLaunchesInput {
    /// <p>The name or ARN of the project to return the launch list from.</p>
    #[doc(hidden)]
    pub project: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to include in the response.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LaunchStatus>,
}
impl ListLaunchesInput {
    /// <p>The name or ARN of the project to return the launch list from.</p>
    pub fn project(&self) -> std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The maximum number of results to include in the response.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::LaunchStatus> {
        self.status.as_ref()
    }
}
impl ListLaunchesInput {
    /// Creates a new builder-style object to manufacture [`ListLaunchesInput`](crate::operation::list_launches::ListLaunchesInput).
    pub fn builder() -> crate::operation::list_launches::builders::ListLaunchesInputBuilder {
        crate::operation::list_launches::builders::ListLaunchesInputBuilder::default()
    }
}

/// A builder for [`ListLaunchesInput`](crate::operation::list_launches::ListLaunchesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListLaunchesInputBuilder {
    pub(crate) project: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::LaunchStatus>,
}
impl ListLaunchesInputBuilder {
    /// <p>The name or ARN of the project to return the launch list from.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.project = Some(input.into());
        self
    }
    /// <p>The name or ARN of the project to return the launch list from.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The maximum number of results to include in the response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
    pub fn status(mut self, input: crate::types::LaunchStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Use this optional parameter to limit the returned results to only the launches with the status that you specify here.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::LaunchStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ListLaunchesInput`](crate::operation::list_launches::ListLaunchesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_launches::ListLaunchesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_launches::ListLaunchesInput {
            project: self.project,
            max_results: self.max_results,
            next_token: self.next_token,
            status: self.status,
        })
    }
}
