// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_project_data_delivery::_update_project_data_delivery_output::UpdateProjectDataDeliveryOutputBuilder;

pub use crate::operation::update_project_data_delivery::_update_project_data_delivery_input::UpdateProjectDataDeliveryInputBuilder;

impl crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_project_data_delivery();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateProjectDataDelivery`.
///
/// <p>Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.</p>
/// <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateProjectDataDeliveryFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
    > for UpdateProjectDataDeliveryFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateProjectDataDeliveryFluentBuilder {
    /// Creates a new `UpdateProjectDataDelivery`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateProjectDataDelivery as a reference.
    pub fn as_input(&self) -> &crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_project_data_delivery::UpdateProjectDataDelivery::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_project_data_delivery::UpdateProjectDataDelivery::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.project(input.into());
        self
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_project(input);
        self
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_project()
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn s3_destination(mut self, input: crate::types::S3DestinationConfig) -> Self {
        self.inner = self.inner.s3_destination(input);
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn set_s3_destination(mut self, input: ::std::option::Option<crate::types::S3DestinationConfig>) -> Self {
        self.inner = self.inner.set_s3_destination(input);
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn get_s3_destination(&self) -> &::std::option::Option<crate::types::S3DestinationConfig> {
        self.inner.get_s3_destination()
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn cloud_watch_logs(mut self, input: crate::types::CloudWatchLogsDestinationConfig) -> Self {
        self.inner = self.inner.cloud_watch_logs(input);
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn set_cloud_watch_logs(mut self, input: ::std::option::Option<crate::types::CloudWatchLogsDestinationConfig>) -> Self {
        self.inner = self.inner.set_cloud_watch_logs(input);
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn get_cloud_watch_logs(&self) -> &::std::option::Option<crate::types::CloudWatchLogsDestinationConfig> {
        self.inner.get_cloud_watch_logs()
    }
}
