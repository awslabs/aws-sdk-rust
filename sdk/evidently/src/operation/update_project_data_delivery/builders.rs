// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_project_data_delivery::_update_project_data_delivery_output::UpdateProjectDataDeliveryOutputBuilder;

pub use crate::operation::update_project_data_delivery::_update_project_data_delivery_input::UpdateProjectDataDeliveryInputBuilder;

/// Fluent builder constructing a request to `UpdateProjectDataDelivery`.
///
/// <p>Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.</p>
/// <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProjectDataDeliveryFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder
            }
impl UpdateProjectDataDeliveryFluentBuilder {
    /// Creates a new `UpdateProjectDataDelivery`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_project_data_delivery::UpdateProjectDataDelivery,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.project(input.into());
        self
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_project(input);
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn s3_destination(mut self, input: crate::types::S3DestinationConfig) -> Self {
        self.inner = self.inner.s3_destination(input);
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfig>,
    ) -> Self {
        self.inner = self.inner.set_s3_destination(input);
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn cloud_watch_logs(
        mut self,
        input: crate::types::CloudWatchLogsDestinationConfig,
    ) -> Self {
        self.inner = self.inner.cloud_watch_logs(input);
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn set_cloud_watch_logs(
        mut self,
        input: std::option::Option<crate::types::CloudWatchLogsDestinationConfig>,
    ) -> Self {
        self.inner = self.inner.set_cloud_watch_logs(input);
        self
    }
}
