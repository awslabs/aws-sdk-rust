// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateProjectDataDeliveryInput {
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    #[doc(hidden)]
    pub project: std::option::Option<std::string::String>,
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    #[doc(hidden)]
    pub s3_destination: std::option::Option<crate::types::S3DestinationConfig>,
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    #[doc(hidden)]
    pub cloud_watch_logs: std::option::Option<crate::types::CloudWatchLogsDestinationConfig>,
}
impl UpdateProjectDataDeliveryInput {
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn project(&self) -> std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn s3_destination(&self) -> std::option::Option<&crate::types::S3DestinationConfig> {
        self.s3_destination.as_ref()
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn cloud_watch_logs(
        &self,
    ) -> std::option::Option<&crate::types::CloudWatchLogsDestinationConfig> {
        self.cloud_watch_logs.as_ref()
    }
}
impl UpdateProjectDataDeliveryInput {
    /// Creates a new builder-style object to manufacture [`UpdateProjectDataDeliveryInput`](crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryInput).
    pub fn builder() -> crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder{
        crate::operation::update_project_data_delivery::builders::UpdateProjectDataDeliveryInputBuilder::default()
    }
}

/// A builder for [`UpdateProjectDataDeliveryInput`](crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateProjectDataDeliveryInputBuilder {
    pub(crate) project: std::option::Option<std::string::String>,
    pub(crate) s3_destination: std::option::Option<crate::types::S3DestinationConfig>,
    pub(crate) cloud_watch_logs: std::option::Option<crate::types::CloudWatchLogsDestinationConfig>,
}
impl UpdateProjectDataDeliveryInputBuilder {
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.project = Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that you want to modify the data storage options for.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn s3_destination(mut self, input: crate::types::S3DestinationConfig) -> Self {
        self.s3_destination = Some(input);
        self
    }
    /// <p>A structure containing the S3 bucket name and bucket prefix where you want to store evaluation events.</p>
    pub fn set_s3_destination(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfig>,
    ) -> Self {
        self.s3_destination = input;
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn cloud_watch_logs(
        mut self,
        input: crate::types::CloudWatchLogsDestinationConfig,
    ) -> Self {
        self.cloud_watch_logs = Some(input);
        self
    }
    /// <p>A structure containing the CloudWatch Logs log group where you want to store evaluation events.</p>
    pub fn set_cloud_watch_logs(
        mut self,
        input: std::option::Option<crate::types::CloudWatchLogsDestinationConfig>,
    ) -> Self {
        self.cloud_watch_logs = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateProjectDataDeliveryInput`](crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_project_data_delivery::UpdateProjectDataDeliveryInput {
                project: self.project,
                s3_destination: self.s3_destination,
                cloud_watch_logs: self.cloud_watch_logs,
            },
        )
    }
}
