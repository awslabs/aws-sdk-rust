// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSegmentInput {
    /// <p>The ARN of the segment to return information for.</p>
    #[doc(hidden)]
    pub segment: std::option::Option<std::string::String>,
}
impl GetSegmentInput {
    /// <p>The ARN of the segment to return information for.</p>
    pub fn segment(&self) -> std::option::Option<&str> {
        self.segment.as_deref()
    }
}
impl GetSegmentInput {
    /// Creates a new builder-style object to manufacture [`GetSegmentInput`](crate::operation::get_segment::GetSegmentInput).
    pub fn builder() -> crate::operation::get_segment::builders::GetSegmentInputBuilder {
        crate::operation::get_segment::builders::GetSegmentInputBuilder::default()
    }
}

/// A builder for [`GetSegmentInput`](crate::operation::get_segment::GetSegmentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSegmentInputBuilder {
    pub(crate) segment: std::option::Option<std::string::String>,
}
impl GetSegmentInputBuilder {
    /// <p>The ARN of the segment to return information for.</p>
    pub fn segment(mut self, input: impl Into<std::string::String>) -> Self {
        self.segment = Some(input.into());
        self
    }
    /// <p>The ARN of the segment to return information for.</p>
    pub fn set_segment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.segment = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSegmentInput`](crate::operation::get_segment::GetSegmentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_segment::GetSegmentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_segment::GetSegmentInput {
            segment: self.segment,
        })
    }
}
