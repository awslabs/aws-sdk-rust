// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLaunchInput {
    /// <p>The name or ARN of the project that contains the launch that you want to update.</p>
    pub project: ::std::option::Option<::std::string::String>,
    /// <p>The name of the launch that is to be updated.</p>
    pub launch: ::std::option::Option<::std::string::String>,
    /// <p>An optional description for the launch.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::LaunchGroupConfig>>,
    /// <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    pub metric_monitors: ::std::option::Option<::std::vec::Vec<crate::types::MetricMonitorConfig>>,
    /// <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    pub randomization_salt: ::std::option::Option<::std::string::String>,
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub scheduled_splits_config: ::std::option::Option<crate::types::ScheduledSplitsLaunchConfig>,
}
impl UpdateLaunchInput {
    /// <p>The name or ARN of the project that contains the launch that you want to update.</p>
    pub fn project(&self) -> ::std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The name of the launch that is to be updated.</p>
    pub fn launch(&self) -> ::std::option::Option<&str> {
        self.launch.as_deref()
    }
    /// <p>An optional description for the launch.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::LaunchGroupConfig] {
        self.groups.as_deref().unwrap_or_default()
    }
    /// <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.metric_monitors.is_none()`.
    pub fn metric_monitors(&self) -> &[crate::types::MetricMonitorConfig] {
        self.metric_monitors.as_deref().unwrap_or_default()
    }
    /// <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(&self) -> ::std::option::Option<&str> {
        self.randomization_salt.as_deref()
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn scheduled_splits_config(&self) -> ::std::option::Option<&crate::types::ScheduledSplitsLaunchConfig> {
        self.scheduled_splits_config.as_ref()
    }
}
impl UpdateLaunchInput {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchInput`](crate::operation::update_launch::UpdateLaunchInput).
    pub fn builder() -> crate::operation::update_launch::builders::UpdateLaunchInputBuilder {
        crate::operation::update_launch::builders::UpdateLaunchInputBuilder::default()
    }
}

/// A builder for [`UpdateLaunchInput`](crate::operation::update_launch::UpdateLaunchInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLaunchInputBuilder {
    pub(crate) project: ::std::option::Option<::std::string::String>,
    pub(crate) launch: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::LaunchGroupConfig>>,
    pub(crate) metric_monitors: ::std::option::Option<::std::vec::Vec<crate::types::MetricMonitorConfig>>,
    pub(crate) randomization_salt: ::std::option::Option<::std::string::String>,
    pub(crate) scheduled_splits_config: ::std::option::Option<crate::types::ScheduledSplitsLaunchConfig>,
}
impl UpdateLaunchInputBuilder {
    /// <p>The name or ARN of the project that contains the launch that you want to update.</p>
    /// This field is required.
    pub fn project(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the launch that you want to update.</p>
    pub fn set_project(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name or ARN of the project that contains the launch that you want to update.</p>
    pub fn get_project(&self) -> &::std::option::Option<::std::string::String> {
        &self.project
    }
    /// <p>The name of the launch that is to be updated.</p>
    /// This field is required.
    pub fn launch(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the launch that is to be updated.</p>
    pub fn set_launch(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch = input;
        self
    }
    /// <p>The name of the launch that is to be updated.</p>
    pub fn get_launch(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch
    }
    /// <p>An optional description for the launch.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description for the launch.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description for the launch.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    pub fn groups(mut self, input: crate::types::LaunchGroupConfig) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LaunchGroupConfig>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>An array of structures that contains the feature and variations that are to be used for the launch.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LaunchGroupConfig>> {
        &self.groups
    }
    /// Appends an item to `metric_monitors`.
    ///
    /// To override the contents of this collection use [`set_metric_monitors`](Self::set_metric_monitors).
    ///
    /// <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    pub fn metric_monitors(mut self, input: crate::types::MetricMonitorConfig) -> Self {
        let mut v = self.metric_monitors.unwrap_or_default();
        v.push(input);
        self.metric_monitors = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    pub fn set_metric_monitors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MetricMonitorConfig>>) -> Self {
        self.metric_monitors = input;
        self
    }
    /// <p>An array of structures that define the metrics that will be used to monitor the launch performance.</p>
    pub fn get_metric_monitors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MetricMonitorConfig>> {
        &self.metric_monitors
    }
    /// <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    pub fn randomization_salt(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.randomization_salt = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    pub fn set_randomization_salt(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.randomization_salt = input;
        self
    }
    /// <p>When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.</p>
    pub fn get_randomization_salt(&self) -> &::std::option::Option<::std::string::String> {
        &self.randomization_salt
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn scheduled_splits_config(mut self, input: crate::types::ScheduledSplitsLaunchConfig) -> Self {
        self.scheduled_splits_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn set_scheduled_splits_config(mut self, input: ::std::option::Option<crate::types::ScheduledSplitsLaunchConfig>) -> Self {
        self.scheduled_splits_config = input;
        self
    }
    /// <p>An array of structures that define the traffic allocation percentages among the feature variations during each step of the launch.</p>
    pub fn get_scheduled_splits_config(&self) -> &::std::option::Option<crate::types::ScheduledSplitsLaunchConfig> {
        &self.scheduled_splits_config
    }
    /// Consumes the builder and constructs a [`UpdateLaunchInput`](crate::operation::update_launch::UpdateLaunchInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_launch::UpdateLaunchInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_launch::UpdateLaunchInput {
            project: self.project,
            launch: self.launch,
            description: self.description,
            groups: self.groups,
            metric_monitors: self.metric_monitors,
            randomization_salt: self.randomization_salt,
            scheduled_splits_config: self.scheduled_splits_config,
        })
    }
}
