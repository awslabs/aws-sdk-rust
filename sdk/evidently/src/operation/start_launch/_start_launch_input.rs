// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartLaunchInput {
    /// <p>The name or ARN of the project that contains the launch to start.</p>
    #[doc(hidden)]
    pub project: std::option::Option<std::string::String>,
    /// <p>The name of the launch to start.</p>
    #[doc(hidden)]
    pub launch: std::option::Option<std::string::String>,
}
impl StartLaunchInput {
    /// <p>The name or ARN of the project that contains the launch to start.</p>
    pub fn project(&self) -> std::option::Option<&str> {
        self.project.as_deref()
    }
    /// <p>The name of the launch to start.</p>
    pub fn launch(&self) -> std::option::Option<&str> {
        self.launch.as_deref()
    }
}
impl StartLaunchInput {
    /// Creates a new builder-style object to manufacture [`StartLaunchInput`](crate::operation::start_launch::StartLaunchInput).
    pub fn builder() -> crate::operation::start_launch::builders::StartLaunchInputBuilder {
        crate::operation::start_launch::builders::StartLaunchInputBuilder::default()
    }
}

/// A builder for [`StartLaunchInput`](crate::operation::start_launch::StartLaunchInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartLaunchInputBuilder {
    pub(crate) project: std::option::Option<std::string::String>,
    pub(crate) launch: std::option::Option<std::string::String>,
}
impl StartLaunchInputBuilder {
    /// <p>The name or ARN of the project that contains the launch to start.</p>
    pub fn project(mut self, input: impl Into<std::string::String>) -> Self {
        self.project = Some(input.into());
        self
    }
    /// <p>The name or ARN of the project that contains the launch to start.</p>
    pub fn set_project(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project = input;
        self
    }
    /// <p>The name of the launch to start.</p>
    pub fn launch(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch = Some(input.into());
        self
    }
    /// <p>The name of the launch to start.</p>
    pub fn set_launch(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.launch = input;
        self
    }
    /// Consumes the builder and constructs a [`StartLaunchInput`](crate::operation::start_launch::StartLaunchInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_launch::StartLaunchInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_launch::StartLaunchInput {
            project: self.project,
            launch: self.launch,
        })
    }
}
