// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_get_resolver_query_log_config_policy_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyOutput,
    crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InternalServiceErrorException" => {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InternalServiceErrorException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServiceErrorExceptionBuilder::default();
                    output = crate::protocol_serde::shape_internal_service_error_exception::de_internal_service_error_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidParameterException" => {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InvalidParameterException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                            .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    crate::serde_util::invalid_parameter_exception_correct_errors(output)
                        .build()
                        .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?
                };
                tmp
            })
        }
        "InvalidRequestException" => {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidRequestExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_request_exception::de_invalid_request_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "UnknownResourceException" => {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::UnknownResourceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnknownResourceExceptionBuilder::default();
                    output = crate::protocol_serde::shape_unknown_resource_exception::de_unknown_resource_exception_json_err(_response_body, output)
                        .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_resolver_query_log_config_policy_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyOutput,
    crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_resolver_query_log_config_policy::builders::GetResolverQueryLogConfigPolicyOutputBuilder::default();
        output = crate::protocol_serde::shape_get_resolver_query_log_config_policy::de_get_resolver_query_log_config_policy(_response_body, output)
            .map_err(crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_get_resolver_query_log_config_policy_input(
    input: &crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_get_resolver_query_log_config_policy_input::ser_get_resolver_query_log_config_policy_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_get_resolver_query_log_config_policy(
    value: &[u8],
    mut builder: crate::operation::get_resolver_query_log_config_policy::builders::GetResolverQueryLogConfigPolicyOutputBuilder,
) -> Result<
    crate::operation::get_resolver_query_log_config_policy::builders::GetResolverQueryLogConfigPolicyOutputBuilder,
    ::aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "ResolverQueryLogConfigPolicy" => {
                    builder = builder.set_resolver_query_log_config_policy(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
