// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateOutpostResolverInput {
    /// <p>A unique string that identifies Resolver on an Outpost.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>Name of the Resolver on the Outpost.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 instance count for a Resolver on the Outpost.</p>
    pub instance_count: ::std::option::Option<i32>,
    /// <p> Amazon EC2 instance type. </p>
    pub preferred_instance_type: ::std::option::Option<::std::string::String>,
}
impl UpdateOutpostResolverInput {
    /// <p>A unique string that identifies Resolver on an Outpost.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Name of the Resolver on the Outpost.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon EC2 instance count for a Resolver on the Outpost.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
    /// <p> Amazon EC2 instance type. </p>
    pub fn preferred_instance_type(&self) -> ::std::option::Option<&str> {
        self.preferred_instance_type.as_deref()
    }
}
impl UpdateOutpostResolverInput {
    /// Creates a new builder-style object to manufacture [`UpdateOutpostResolverInput`](crate::operation::update_outpost_resolver::UpdateOutpostResolverInput).
    pub fn builder() -> crate::operation::update_outpost_resolver::builders::UpdateOutpostResolverInputBuilder {
        crate::operation::update_outpost_resolver::builders::UpdateOutpostResolverInputBuilder::default()
    }
}

/// A builder for [`UpdateOutpostResolverInput`](crate::operation::update_outpost_resolver::UpdateOutpostResolverInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateOutpostResolverInputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
    pub(crate) preferred_instance_type: ::std::option::Option<::std::string::String>,
}
impl UpdateOutpostResolverInputBuilder {
    /// <p>A unique string that identifies Resolver on an Outpost.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique string that identifies Resolver on an Outpost.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A unique string that identifies Resolver on an Outpost.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Name of the Resolver on the Outpost.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the Resolver on the Outpost.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the Resolver on the Outpost.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon EC2 instance count for a Resolver on the Outpost.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon EC2 instance count for a Resolver on the Outpost.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The Amazon EC2 instance count for a Resolver on the Outpost.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// <p> Amazon EC2 instance type. </p>
    pub fn preferred_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Amazon EC2 instance type. </p>
    pub fn set_preferred_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_instance_type = input;
        self
    }
    /// <p> Amazon EC2 instance type. </p>
    pub fn get_preferred_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_instance_type
    }
    /// Consumes the builder and constructs a [`UpdateOutpostResolverInput`](crate::operation::update_outpost_resolver::UpdateOutpostResolverInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_outpost_resolver::UpdateOutpostResolverInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_outpost_resolver::UpdateOutpostResolverInput {
            id: self.id,
            name: self.name,
            instance_count: self.instance_count,
            preferred_instance_type: self.preferred_instance_type,
        })
    }
}
