// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateResolverEndpointIpAddressInput {
    /// <p>The ID of the Resolver endpoint that you want to associate IP addresses with.</p>
    #[doc(hidden)]
    pub resolver_endpoint_id: std::option::Option<std::string::String>,
    /// <p>Either the IPv4 address that you want to add to a Resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.</p>
    #[doc(hidden)]
    pub ip_address: std::option::Option<crate::types::IpAddressUpdate>,
}
impl AssociateResolverEndpointIpAddressInput {
    /// <p>The ID of the Resolver endpoint that you want to associate IP addresses with.</p>
    pub fn resolver_endpoint_id(&self) -> std::option::Option<&str> {
        self.resolver_endpoint_id.as_deref()
    }
    /// <p>Either the IPv4 address that you want to add to a Resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.</p>
    pub fn ip_address(&self) -> std::option::Option<&crate::types::IpAddressUpdate> {
        self.ip_address.as_ref()
    }
}
impl AssociateResolverEndpointIpAddressInput {
    /// Creates a new builder-style object to manufacture [`AssociateResolverEndpointIpAddressInput`](crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressInput).
    pub fn builder() -> crate::operation::associate_resolver_endpoint_ip_address::builders::AssociateResolverEndpointIpAddressInputBuilder{
        crate::operation::associate_resolver_endpoint_ip_address::builders::AssociateResolverEndpointIpAddressInputBuilder::default()
    }
}

/// A builder for [`AssociateResolverEndpointIpAddressInput`](crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateResolverEndpointIpAddressInputBuilder {
    pub(crate) resolver_endpoint_id: std::option::Option<std::string::String>,
    pub(crate) ip_address: std::option::Option<crate::types::IpAddressUpdate>,
}
impl AssociateResolverEndpointIpAddressInputBuilder {
    /// <p>The ID of the Resolver endpoint that you want to associate IP addresses with.</p>
    pub fn resolver_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolver_endpoint_id = Some(input.into());
        self
    }
    /// <p>The ID of the Resolver endpoint that you want to associate IP addresses with.</p>
    pub fn set_resolver_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resolver_endpoint_id = input;
        self
    }
    /// <p>Either the IPv4 address that you want to add to a Resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.</p>
    pub fn ip_address(mut self, input: crate::types::IpAddressUpdate) -> Self {
        self.ip_address = Some(input);
        self
    }
    /// <p>Either the IPv4 address that you want to add to a Resolver endpoint or a subnet ID. If you specify a subnet ID, Resolver chooses an IP address for you from the available IPs in the specified subnet.</p>
    pub fn set_ip_address(
        mut self,
        input: std::option::Option<crate::types::IpAddressUpdate>,
    ) -> Self {
        self.ip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateResolverEndpointIpAddressInput`](crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressInput).
    pub fn build(self) -> Result<crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressInput {
                resolver_endpoint_id: self.resolver_endpoint_id
                ,
                ip_address: self.ip_address
                ,
            }
        )
    }
}
