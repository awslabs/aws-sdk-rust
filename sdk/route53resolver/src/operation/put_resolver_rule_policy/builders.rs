// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_resolver_rule_policy::_put_resolver_rule_policy_output::PutResolverRulePolicyOutputBuilder;

pub use crate::operation::put_resolver_rule_policy::_put_resolver_rule_policy_input::PutResolverRulePolicyInputBuilder;

impl PutResolverRulePolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_resolver_rule_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutResolverRulePolicy`.
///
/// <p>Specifies an Amazon Web Services rule that you want to share with another account, the account that you want to share the rule with, and the operations that you want the account to be able to perform on the rule.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutResolverRulePolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput,
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError,
    > for PutResolverRulePolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput,
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutResolverRulePolicyFluentBuilder {
    /// Creates a new `PutResolverRulePolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutResolverRulePolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_resolver_rule_policy::PutResolverRulePolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput,
        crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule that you want to share with another account.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule that you want to share with another account.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the rule that you want to share with another account.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>An Identity and Access Management policy statement that lists the rules that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Action</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:GetResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:AssociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRules</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRuleAssociations</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, specify the ARN for the rule that you want to share with another account. Specify the same ARN that you specified in <code>Arn</code>.</p>
    pub fn resolver_rule_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resolver_rule_policy(input.into());
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the rules that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Action</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:GetResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:AssociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRules</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRuleAssociations</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, specify the ARN for the rule that you want to share with another account. Specify the same ARN that you specified in <code>Arn</code>.</p>
    pub fn set_resolver_rule_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resolver_rule_policy(input);
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the rules that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Action</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:GetResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:AssociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverRule</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRules</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverRuleAssociations</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, specify the ARN for the rule that you want to share with another account. Specify the same ARN that you specified in <code>Arn</code>.</p>
    pub fn get_resolver_rule_policy(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resolver_rule_policy()
    }
}
