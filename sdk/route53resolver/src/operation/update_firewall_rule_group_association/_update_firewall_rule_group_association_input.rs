// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFirewallRuleGroupAssociationInput {
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>. </p>
    #[doc(hidden)]
    pub firewall_rule_group_association_id: std::option::Option<std::string::String>,
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. </p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. </p>
    #[doc(hidden)]
    pub mutation_protection: std::option::Option<crate::types::MutationProtectionStatus>,
    /// <p>The name of the rule group association.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl UpdateFirewallRuleGroupAssociationInput {
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>. </p>
    pub fn firewall_rule_group_association_id(&self) -> std::option::Option<&str> {
        self.firewall_rule_group_association_id.as_deref()
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. </p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. </p>
    pub fn mutation_protection(
        &self,
    ) -> std::option::Option<&crate::types::MutationProtectionStatus> {
        self.mutation_protection.as_ref()
    }
    /// <p>The name of the rule group association.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl UpdateFirewallRuleGroupAssociationInput {
    /// Creates a new builder-style object to manufacture [`UpdateFirewallRuleGroupAssociationInput`](crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationInput).
    pub fn builder() -> crate::operation::update_firewall_rule_group_association::builders::UpdateFirewallRuleGroupAssociationInputBuilder{
        crate::operation::update_firewall_rule_group_association::builders::UpdateFirewallRuleGroupAssociationInputBuilder::default()
    }
}

/// A builder for [`UpdateFirewallRuleGroupAssociationInput`](crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateFirewallRuleGroupAssociationInputBuilder {
    pub(crate) firewall_rule_group_association_id: std::option::Option<std::string::String>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) mutation_protection: std::option::Option<crate::types::MutationProtectionStatus>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl UpdateFirewallRuleGroupAssociationInputBuilder {
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>. </p>
    pub fn firewall_rule_group_association_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.firewall_rule_group_association_id = Some(input.into());
        self
    }
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>. </p>
    pub fn set_firewall_rule_group_association_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.firewall_rule_group_association_id = input;
        self
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. </p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting. </p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. </p>
    pub fn mutation_protection(mut self, input: crate::types::MutationProtectionStatus) -> Self {
        self.mutation_protection = Some(input);
        self
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections. </p>
    pub fn set_mutation_protection(
        mut self,
        input: std::option::Option<crate::types::MutationProtectionStatus>,
    ) -> Self {
        self.mutation_protection = input;
        self
    }
    /// <p>The name of the rule group association.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule group association.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateFirewallRuleGroupAssociationInput`](crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationInput).
    pub fn build(self) -> Result<crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationInput {
                firewall_rule_group_association_id: self.firewall_rule_group_association_id
                ,
                priority: self.priority
                ,
                mutation_protection: self.mutation_protection
                ,
                name: self.name
                ,
            }
        )
    }
}
