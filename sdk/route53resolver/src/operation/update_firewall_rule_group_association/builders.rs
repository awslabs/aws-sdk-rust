// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_firewall_rule_group_association::_update_firewall_rule_group_association_output::UpdateFirewallRuleGroupAssociationOutputBuilder;

pub use crate::operation::update_firewall_rule_group_association::_update_firewall_rule_group_association_input::UpdateFirewallRuleGroupAssociationInputBuilder;

impl crate::operation::update_firewall_rule_group_association::builders::UpdateFirewallRuleGroupAssociationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_firewall_rule_group_association();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateFirewallRuleGroupAssociation`.
///
/// <p>Changes the association of a <code>FirewallRuleGroup</code> with a VPC. The association enables DNS filtering for the VPC.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateFirewallRuleGroupAssociationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_firewall_rule_group_association::builders::UpdateFirewallRuleGroupAssociationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationOutput,
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
    > for UpdateFirewallRuleGroupAssociationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationOutput,
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateFirewallRuleGroupAssociationFluentBuilder {
    /// Creates a new `UpdateFirewallRuleGroupAssociation`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateFirewallRuleGroupAssociation as a reference.
    pub fn as_input(&self) -> &crate::operation::update_firewall_rule_group_association::builders::UpdateFirewallRuleGroupAssociationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociation::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociation::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationOutput,
        crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>.</p>
    pub fn firewall_rule_group_association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_rule_group_association_id(input.into());
        self
    }
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>.</p>
    pub fn set_firewall_rule_group_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_rule_group_association_id(input);
        self
    }
    /// <p>The identifier of the <code>FirewallRuleGroupAssociation</code>.</p>
    pub fn get_firewall_rule_group_association_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_rule_group_association_id()
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting.</p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting.</p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule group among the rule groups that you associate with the specified VPC. DNS Firewall filters VPC traffic starting from the rule group with the lowest numeric priority setting.</p>
    /// <p>You must specify a unique priority for each rule group that you associate with a single VPC. To make it easier to insert rule groups later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for a rule group association after you create it.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        self.inner.get_priority()
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections.</p>
    pub fn mutation_protection(mut self, input: crate::types::MutationProtectionStatus) -> Self {
        self.inner = self.inner.mutation_protection(input);
        self
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections.</p>
    pub fn set_mutation_protection(mut self, input: ::std::option::Option<crate::types::MutationProtectionStatus>) -> Self {
        self.inner = self.inner.set_mutation_protection(input);
        self
    }
    /// <p>If enabled, this setting disallows modification or removal of the association, to help prevent against accidentally altering DNS firewall protections.</p>
    pub fn get_mutation_protection(&self) -> &::std::option::Option<crate::types::MutationProtectionStatus> {
        self.inner.get_mutation_protection()
    }
    /// <p>The name of the rule group association.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the rule group association.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the rule group association.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
}
