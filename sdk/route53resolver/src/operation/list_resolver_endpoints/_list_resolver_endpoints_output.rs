// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListResolverEndpointsOutput {
    /// <p>If more than <code>MaxResults</code> IP addresses match the specified criteria, you can submit another <code>ListResolverEndpoint</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The value that you specified for <code>MaxResults</code> in the request.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The Resolver endpoints that were created by using the current Amazon Web Services account, and that match the specified filters, if any.</p>
    #[doc(hidden)]
    pub resolver_endpoints: std::option::Option<std::vec::Vec<crate::types::ResolverEndpoint>>,
    _request_id: Option<String>,
}
impl ListResolverEndpointsOutput {
    /// <p>If more than <code>MaxResults</code> IP addresses match the specified criteria, you can submit another <code>ListResolverEndpoint</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The value that you specified for <code>MaxResults</code> in the request.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The Resolver endpoints that were created by using the current Amazon Web Services account, and that match the specified filters, if any.</p>
    pub fn resolver_endpoints(&self) -> std::option::Option<&[crate::types::ResolverEndpoint]> {
        self.resolver_endpoints.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListResolverEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListResolverEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`ListResolverEndpointsOutput`](crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput).
    pub fn builder(
    ) -> crate::operation::list_resolver_endpoints::builders::ListResolverEndpointsOutputBuilder
    {
        crate::operation::list_resolver_endpoints::builders::ListResolverEndpointsOutputBuilder::default()
    }
}

/// A builder for [`ListResolverEndpointsOutput`](crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListResolverEndpointsOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) resolver_endpoints:
        std::option::Option<std::vec::Vec<crate::types::ResolverEndpoint>>,
    _request_id: Option<String>,
}
impl ListResolverEndpointsOutputBuilder {
    /// <p>If more than <code>MaxResults</code> IP addresses match the specified criteria, you can submit another <code>ListResolverEndpoint</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If more than <code>MaxResults</code> IP addresses match the specified criteria, you can submit another <code>ListResolverEndpoint</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The value that you specified for <code>MaxResults</code> in the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The value that you specified for <code>MaxResults</code> in the request.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Appends an item to `resolver_endpoints`.
    ///
    /// To override the contents of this collection use [`set_resolver_endpoints`](Self::set_resolver_endpoints).
    ///
    /// <p>The Resolver endpoints that were created by using the current Amazon Web Services account, and that match the specified filters, if any.</p>
    pub fn resolver_endpoints(mut self, input: crate::types::ResolverEndpoint) -> Self {
        let mut v = self.resolver_endpoints.unwrap_or_default();
        v.push(input);
        self.resolver_endpoints = Some(v);
        self
    }
    /// <p>The Resolver endpoints that were created by using the current Amazon Web Services account, and that match the specified filters, if any.</p>
    pub fn set_resolver_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResolverEndpoint>>,
    ) -> Self {
        self.resolver_endpoints = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListResolverEndpointsOutput`](crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput).
    pub fn build(self) -> crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput {
        crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput {
            next_token: self.next_token,
            max_results: self.max_results,
            resolver_endpoints: self.resolver_endpoints,
            _request_id: self._request_id,
        }
    }
}
