// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_resolver_query_log_config::_delete_resolver_query_log_config_output::DeleteResolverQueryLogConfigOutputBuilder;

pub use crate::operation::delete_resolver_query_log_config::_delete_resolver_query_log_config_input::DeleteResolverQueryLogConfigInputBuilder;

impl DeleteResolverQueryLogConfigInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_resolver_query_log_config();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteResolverQueryLogConfig`.
///
/// <p>Deletes a query logging configuration. When you delete a configuration, Resolver stops logging DNS queries for all of the Amazon VPCs that are associated with the configuration. This also applies if the query logging configuration is shared with other Amazon Web Services accounts, and the other accounts have associated VPCs with the shared configuration.</p>
/// <p>Before you can delete a query logging configuration, you must first disassociate all VPCs from the configuration. See <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverQueryLogConfig.html">DisassociateResolverQueryLogConfig</a>.</p>
/// <p>If you used Resource Access Manager (RAM) to share a query logging configuration with other accounts, you must stop sharing the configuration before you can delete a configuration. The accounts that you shared the configuration with can first disassociate VPCs that they associated with the configuration, but that's not necessary. If you stop sharing the configuration, those VPCs are automatically disassociated from the configuration.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteResolverQueryLogConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_resolver_query_log_config::builders::DeleteResolverQueryLogConfigInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigOutput,
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
    > for DeleteResolverQueryLogConfigFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigOutput,
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteResolverQueryLogConfigFluentBuilder {
    /// Creates a new `DeleteResolverQueryLogConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteResolverQueryLogConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_resolver_query_log_config::builders::DeleteResolverQueryLogConfigInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfig::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfig::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigOutput,
        crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the query logging configuration that you want to delete.</p>
    pub fn resolver_query_log_config_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resolver_query_log_config_id(input.into());
        self
    }
    /// <p>The ID of the query logging configuration that you want to delete.</p>
    pub fn set_resolver_query_log_config_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resolver_query_log_config_id(input);
        self
    }
    /// <p>The ID of the query logging configuration that you want to delete.</p>
    pub fn get_resolver_query_log_config_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resolver_query_log_config_id()
    }
}
