// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_resolver_endpoint_ip_addresses::_list_resolver_endpoint_ip_addresses_output::ListResolverEndpointIpAddressesOutputBuilder;

pub use crate::operation::list_resolver_endpoint_ip_addresses::_list_resolver_endpoint_ip_addresses_input::ListResolverEndpointIpAddressesInputBuilder;

/// Fluent builder constructing a request to `ListResolverEndpointIpAddresses`.
///
/// <p>Gets the IP addresses for a specified Resolver endpoint.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListResolverEndpointIpAddressesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_resolver_endpoint_ip_addresses::builders::ListResolverEndpointIpAddressesInputBuilder
            }
impl ListResolverEndpointIpAddressesFluentBuilder {
    /// Creates a new `ListResolverEndpointIpAddresses`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddresses, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesOutput, aws_smithy_http::result::SdkError<crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_resolver_endpoint_ip_addresses::paginator::ListResolverEndpointIpAddressesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_resolver_endpoint_ip_addresses::paginator::ListResolverEndpointIpAddressesPaginator{
        crate::operation::list_resolver_endpoint_ip_addresses::paginator::ListResolverEndpointIpAddressesPaginator::new(self.handle, self.inner)
    }
    /// <p>The ID of the Resolver endpoint that you want to get IP addresses for.</p>
    pub fn resolver_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resolver_endpoint_id(input.into());
        self
    }
    /// <p>The ID of the Resolver endpoint that you want to get IP addresses for.</p>
    pub fn set_resolver_endpoint_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_resolver_endpoint_id(input);
        self
    }
    /// <p>The maximum number of IP addresses that you want to return in the response to a <code>ListResolverEndpointIpAddresses</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 IP addresses. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of IP addresses that you want to return in the response to a <code>ListResolverEndpointIpAddresses</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 IP addresses. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>For the first <code>ListResolverEndpointIpAddresses</code> request, omit this value.</p>
    /// <p>If the specified Resolver endpoint has more than <code>MaxResults</code> IP addresses, you can submit another <code>ListResolverEndpointIpAddresses</code> request to get the next group of IP addresses. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>For the first <code>ListResolverEndpointIpAddresses</code> request, omit this value.</p>
    /// <p>If the specified Resolver endpoint has more than <code>MaxResults</code> IP addresses, you can submit another <code>ListResolverEndpointIpAddresses</code> request to get the next group of IP addresses. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
