// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutResolverQueryLogConfigPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    #[doc(hidden)]
    pub resolver_query_log_config_policy: std::option::Option<std::string::String>,
}
impl PutResolverQueryLogConfigPolicyInput {
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn resolver_query_log_config_policy(&self) -> std::option::Option<&str> {
        self.resolver_query_log_config_policy.as_deref()
    }
}
impl PutResolverQueryLogConfigPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutResolverQueryLogConfigPolicyInput`](crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyInput).
    pub fn builder() -> crate::operation::put_resolver_query_log_config_policy::builders::PutResolverQueryLogConfigPolicyInputBuilder{
        crate::operation::put_resolver_query_log_config_policy::builders::PutResolverQueryLogConfigPolicyInputBuilder::default()
    }
}

/// A builder for [`PutResolverQueryLogConfigPolicyInput`](crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutResolverQueryLogConfigPolicyInputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) resolver_query_log_config_policy: std::option::Option<std::string::String>,
}
impl PutResolverQueryLogConfigPolicyInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn resolver_query_log_config_policy(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.resolver_query_log_config_policy = Some(input.into());
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn set_resolver_query_log_config_policy(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resolver_query_log_config_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`PutResolverQueryLogConfigPolicyInput`](crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyInput).
    pub fn build(self) -> Result<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyInput {
                arn: self.arn
                ,
                resolver_query_log_config_policy: self.resolver_query_log_config_policy
                ,
            }
        )
    }
}
