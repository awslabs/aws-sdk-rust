// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_resolver_query_log_config_policy::_put_resolver_query_log_config_policy_output::PutResolverQueryLogConfigPolicyOutputBuilder;

pub use crate::operation::put_resolver_query_log_config_policy::_put_resolver_query_log_config_policy_input::PutResolverQueryLogConfigPolicyInputBuilder;

/// Fluent builder constructing a request to `PutResolverQueryLogConfigPolicy`.
///
/// <p>Specifies an Amazon Web Services account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutResolverQueryLogConfigPolicyFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::put_resolver_query_log_config_policy::builders::PutResolverQueryLogConfigPolicyInputBuilder
            }
impl PutResolverQueryLogConfigPolicyFluentBuilder {
    /// Creates a new `PutResolverQueryLogConfigPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicy, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyOutput, aws_smithy_http::result::SdkError<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn resolver_query_log_config_policy(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.resolver_query_log_config_policy(input.into());
        self
    }
    /// <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>
    /// <ul>
    /// <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>
    /// <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>
    /// </ul>
    /// <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    pub fn set_resolver_query_log_config_policy(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_resolver_query_log_config_policy(input);
        self
    }
}
