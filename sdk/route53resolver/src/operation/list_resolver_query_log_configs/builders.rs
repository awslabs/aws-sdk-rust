// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_resolver_query_log_configs::_list_resolver_query_log_configs_output::ListResolverQueryLogConfigsOutputBuilder;

pub use crate::operation::list_resolver_query_log_configs::_list_resolver_query_log_configs_input::ListResolverQueryLogConfigsInputBuilder;

/// Fluent builder constructing a request to `ListResolverQueryLogConfigs`.
///
/// <p>Lists information about the specified query logging configurations. Each configuration defines where you want Resolver to save DNS query logs and specifies the VPCs that you want to log queries for.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListResolverQueryLogConfigsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsInputBuilder
            }
impl ListResolverQueryLogConfigsFluentBuilder {
    /// Creates a new `ListResolverQueryLogConfigs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_resolver_query_log_configs::paginator::ListResolverQueryLogConfigsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_resolver_query_log_configs::paginator::ListResolverQueryLogConfigsPaginator{
        crate::operation::list_resolver_query_log_configs::paginator::ListResolverQueryLogConfigsPaginator::new(self.handle, self.inner)
    }
    /// <p>The maximum number of query logging configurations that you want to return in the response to a <code>ListResolverQueryLogConfigs</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 query logging configurations. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of query logging configurations that you want to return in the response to a <code>ListResolverQueryLogConfigs</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 query logging configurations. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>For the first <code>ListResolverQueryLogConfigs</code> request, omit this value.</p>
    /// <p>If there are more than <code>MaxResults</code> query logging configurations that match the values that you specify for <code>Filters</code>, you can submit another <code>ListResolverQueryLogConfigs</code> request to get the next group of configurations. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>For the first <code>ListResolverQueryLogConfigs</code> request, omit this value.</p>
    /// <p>If there are more than <code>MaxResults</code> query logging configurations that match the values that you specify for <code>Filters</code>, you can submit another <code>ListResolverQueryLogConfigs</code> request to get the next group of configurations. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An optional specification to return a subset of query logging configurations.</p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p>
    /// </note>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>An optional specification to return a subset of query logging configurations.</p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p>
    /// </note>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The element that you want Resolver to sort query logging configurations by. </p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortBy</code>, if any, as in the previous request.</p>
    /// </note>
    /// <p>Valid values include the following elements:</p>
    /// <ul>
    /// <li> <p> <code>Arn</code>: The ARN of the query logging configuration</p> </li>
    /// <li> <p> <code>AssociationCount</code>: The number of VPCs that are associated with the specified configuration </p> </li>
    /// <li> <p> <code>CreationTime</code>: The date and time that Resolver returned when the configuration was created</p> </li>
    /// <li> <p> <code>CreatorRequestId</code>: The value that was specified for <code>CreatorRequestId</code> when the configuration was created</p> </li>
    /// <li> <p> <code>DestinationArn</code>: The location that logs are sent to</p> </li>
    /// <li> <p> <code>Id</code>: The ID of the configuration</p> </li>
    /// <li> <p> <code>Name</code>: The name of the configuration</p> </li>
    /// <li> <p> <code>OwnerId</code>: The Amazon Web Services account number of the account that created the configuration</p> </li>
    /// <li> <p> <code>ShareStatus</code>: Whether the configuration is shared with other Amazon Web Services accounts or shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p> </li>
    /// <li> <p> <code>Status</code>: The current status of the configuration. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code>: Resolver is creating the query logging configuration.</p> </li>
    /// <li> <p> <code>CREATED</code>: The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC.</p> </li>
    /// <li> <p> <code>DELETING</code>: Resolver is deleting this query logging configuration.</p> </li>
    /// <li> <p> <code>FAILED</code>: Resolver either couldn't create or couldn't delete the query logging configuration. Here are two common causes:</p>
    /// <ul>
    /// <li> <p>The specified destination (for example, an Amazon S3 bucket) was deleted.</p> </li>
    /// <li> <p>Permissions don't allow sending logs to the destination.</p> </li>
    /// </ul> </li>
    /// </ul> </li>
    /// </ul>
    pub fn sort_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sort_by(input.into());
        self
    }
    /// <p>The element that you want Resolver to sort query logging configurations by. </p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortBy</code>, if any, as in the previous request.</p>
    /// </note>
    /// <p>Valid values include the following elements:</p>
    /// <ul>
    /// <li> <p> <code>Arn</code>: The ARN of the query logging configuration</p> </li>
    /// <li> <p> <code>AssociationCount</code>: The number of VPCs that are associated with the specified configuration </p> </li>
    /// <li> <p> <code>CreationTime</code>: The date and time that Resolver returned when the configuration was created</p> </li>
    /// <li> <p> <code>CreatorRequestId</code>: The value that was specified for <code>CreatorRequestId</code> when the configuration was created</p> </li>
    /// <li> <p> <code>DestinationArn</code>: The location that logs are sent to</p> </li>
    /// <li> <p> <code>Id</code>: The ID of the configuration</p> </li>
    /// <li> <p> <code>Name</code>: The name of the configuration</p> </li>
    /// <li> <p> <code>OwnerId</code>: The Amazon Web Services account number of the account that created the configuration</p> </li>
    /// <li> <p> <code>ShareStatus</code>: Whether the configuration is shared with other Amazon Web Services accounts or shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p> </li>
    /// <li> <p> <code>Status</code>: The current status of the configuration. Valid values include the following:</p>
    /// <ul>
    /// <li> <p> <code>CREATING</code>: Resolver is creating the query logging configuration.</p> </li>
    /// <li> <p> <code>CREATED</code>: The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC.</p> </li>
    /// <li> <p> <code>DELETING</code>: Resolver is deleting this query logging configuration.</p> </li>
    /// <li> <p> <code>FAILED</code>: Resolver either couldn't create or couldn't delete the query logging configuration. Here are two common causes:</p>
    /// <ul>
    /// <li> <p>The specified destination (for example, an Amazon S3 bucket) was deleted.</p> </li>
    /// <li> <p>Permissions don't allow sending logs to the destination.</p> </li>
    /// </ul> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_sort_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p>If you specified a value for <code>SortBy</code>, the order that you want query logging configurations to be listed in, <code>ASCENDING</code> or <code>DESCENDING</code>.</p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortOrder</code>, if any, as in the previous request.</p>
    /// </note>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.inner = self.inner.sort_order(input);
        self
    }
    /// <p>If you specified a value for <code>SortBy</code>, the order that you want query logging configurations to be listed in, <code>ASCENDING</code> or <code>DESCENDING</code>.</p> <note>
    /// <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortOrder</code>, if any, as in the previous request.</p>
    /// </note>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.inner = self.inner.set_sort_order(input);
        self
    }
}
