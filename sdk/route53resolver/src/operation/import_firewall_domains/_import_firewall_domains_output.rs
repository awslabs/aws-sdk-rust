// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportFirewallDomainsOutput {
    /// <p>The Id of the firewall domain list that DNS Firewall just updated.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the domain list. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FirewallDomainListStatus>,
    /// <p>Additional information about the status of the list, if available.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportFirewallDomainsOutput {
    /// <p>The Id of the firewall domain list that DNS Firewall just updated.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the domain list. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> </p>
    pub fn status(&self) -> std::option::Option<&crate::types::FirewallDomainListStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl aws_http::request_id::RequestId for ImportFirewallDomainsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ImportFirewallDomainsOutput {
    /// Creates a new builder-style object to manufacture [`ImportFirewallDomainsOutput`](crate::operation::import_firewall_domains::ImportFirewallDomainsOutput).
    pub fn builder(
    ) -> crate::operation::import_firewall_domains::builders::ImportFirewallDomainsOutputBuilder
    {
        crate::operation::import_firewall_domains::builders::ImportFirewallDomainsOutputBuilder::default()
    }
}

/// A builder for [`ImportFirewallDomainsOutput`](crate::operation::import_firewall_domains::ImportFirewallDomainsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportFirewallDomainsOutputBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::FirewallDomainListStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ImportFirewallDomainsOutputBuilder {
    /// <p>The Id of the firewall domain list that DNS Firewall just updated.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The Id of the firewall domain list that DNS Firewall just updated.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the domain list. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the domain list. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> </p>
    pub fn status(mut self, input: crate::types::FirewallDomainListStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::FirewallDomainListStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Additional information about the status of the list, if available.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ImportFirewallDomainsOutput`](crate::operation::import_firewall_domains::ImportFirewallDomainsOutput).
    pub fn build(self) -> crate::operation::import_firewall_domains::ImportFirewallDomainsOutput {
        crate::operation::import_firewall_domains::ImportFirewallDomainsOutput {
            id: self.id,
            name: self.name,
            status: self.status,
            status_message: self.status_message,
            _request_id: self._request_id,
        }
    }
}
