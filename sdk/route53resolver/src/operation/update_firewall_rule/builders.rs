// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_firewall_rule::_update_firewall_rule_output::UpdateFirewallRuleOutputBuilder;

pub use crate::operation::update_firewall_rule::_update_firewall_rule_input::UpdateFirewallRuleInputBuilder;

impl crate::operation::update_firewall_rule::builders::UpdateFirewallRuleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_firewall_rule::UpdateFirewallRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule::UpdateFirewallRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_firewall_rule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateFirewallRule`.
///
/// <p>Updates the specified firewall rule.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateFirewallRuleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_firewall_rule::builders::UpdateFirewallRuleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_firewall_rule::UpdateFirewallRuleOutput,
        crate::operation::update_firewall_rule::UpdateFirewallRuleError,
    > for UpdateFirewallRuleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_firewall_rule::UpdateFirewallRuleOutput,
            crate::operation::update_firewall_rule::UpdateFirewallRuleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateFirewallRuleFluentBuilder {
    /// Creates a new `UpdateFirewallRule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateFirewallRule as a reference.
    pub fn as_input(&self) -> &crate::operation::update_firewall_rule::builders::UpdateFirewallRuleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_firewall_rule::UpdateFirewallRuleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule::UpdateFirewallRuleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_firewall_rule::UpdateFirewallRule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_firewall_rule::UpdateFirewallRule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_firewall_rule::UpdateFirewallRuleOutput,
        crate::operation::update_firewall_rule::UpdateFirewallRuleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn firewall_rule_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_rule_group_id(input.into());
        self
    }
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn set_firewall_rule_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_rule_group_id(input);
        self
    }
    /// <p>The unique identifier of the firewall rule group for the rule.</p>
    pub fn get_firewall_rule_group_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_rule_group_id()
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn firewall_domain_list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_domain_list_id(input.into());
        self
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn set_firewall_domain_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_domain_list_id(input);
        self
    }
    /// <p>The ID of the domain list to use in the rule.</p>
    pub fn get_firewall_domain_list_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_domain_list_id()
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn priority(mut self, input: i32) -> Self {
        self.inner = self.inner.priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn set_priority(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_priority(input);
        self
    }
    /// <p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>
    /// <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p>
    pub fn get_priority(&self) -> &::std::option::Option<i32> {
        self.inner.get_priority()
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn action(mut self, input: crate::types::Action) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::Action>) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:</p>
    /// <ul>
    /// <li>
    /// <p><code>ALLOW</code> - Permit the request to go through.</p></li>
    /// <li>
    /// <p><code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p></li>
    /// <li>
    /// <p><code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>.</p></li>
    /// </ul>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::Action> {
        self.inner.get_action()
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn block_response(mut self, input: crate::types::BlockResponse) -> Self {
        self.inner = self.inner.block_response(input);
        self
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn set_block_response(mut self, input: ::std::option::Option<crate::types::BlockResponse>) -> Self {
        self.inner = self.inner.set_block_response(input);
        self
    }
    /// <p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p></li>
    /// <li>
    /// <p><code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p></li>
    /// <li>
    /// <p><code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings.</p></li>
    /// </ul>
    pub fn get_block_response(&self) -> &::std::option::Option<crate::types::BlockResponse> {
        self.inner.get_block_response()
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.block_override_domain(input.into());
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_block_override_domain(input);
        self
    }
    /// <p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_block_override_domain()
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_dns_type(mut self, input: crate::types::BlockOverrideDnsType) -> Self {
        self.inner = self.inner.block_override_dns_type(input);
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_dns_type(mut self, input: ::std::option::Option<crate::types::BlockOverrideDnsType>) -> Self {
        self.inner = self.inner.set_block_override_dns_type(input);
        self
    }
    /// <p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_dns_type(&self) -> &::std::option::Option<crate::types::BlockOverrideDnsType> {
        self.inner.get_block_override_dns_type()
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn block_override_ttl(mut self, input: i32) -> Self {
        self.inner = self.inner.block_override_ttl(input);
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn set_block_override_ttl(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_block_override_ttl(input);
        self
    }
    /// <p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p>
    pub fn get_block_override_ttl(&self) -> &::std::option::Option<i32> {
        self.inner.get_block_override_ttl()
    }
    /// <p>The name of the rule.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the rule.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the rule.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// </ul>
    pub fn qtype(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.qtype(input.into());
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// </ul>
    pub fn set_qtype(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_qtype(input);
        self
    }
    /// <p>The DNS query type you want the rule to evaluate. Allowed values are;</p>
    /// <ul>
    /// <li>
    /// <p>A: Returns an IPv4 address.</p></li>
    /// <li>
    /// <p>AAAA: Returns an Ipv6 address.</p></li>
    /// <li>
    /// <p>CAA: Restricts CAs that can create SSL/TLS certifications for the domain.</p></li>
    /// <li>
    /// <p>CNAME: Returns another domain name.</p></li>
    /// <li>
    /// <p>DS: Record that identifies the DNSSEC signing key of a delegated zone.</p></li>
    /// <li>
    /// <p>MX: Specifies mail servers.</p></li>
    /// <li>
    /// <p>NAPTR: Regular-expression-based rewriting of domain names.</p></li>
    /// <li>
    /// <p>NS: Authoritative name servers.</p></li>
    /// <li>
    /// <p>PTR: Maps an IP address to a domain name.</p></li>
    /// <li>
    /// <p>SOA: Start of authority record for the zone.</p></li>
    /// <li>
    /// <p>SPF: Lists the servers authorized to send emails from a domain.</p></li>
    /// <li>
    /// <p>SRV: Application specific values that identify servers.</p></li>
    /// <li>
    /// <p>TXT: Verifies email senders and application-specific values.</p></li>
    /// </ul>
    pub fn get_qtype(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_qtype()
    }
}
