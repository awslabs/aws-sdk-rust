// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_firewall_rule_group_policy::_put_firewall_rule_group_policy_output::PutFirewallRuleGroupPolicyOutputBuilder;

pub use crate::operation::put_firewall_rule_group_policy::_put_firewall_rule_group_policy_input::PutFirewallRuleGroupPolicyInputBuilder;

impl PutFirewallRuleGroupPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_firewall_rule_group_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutFirewallRuleGroupPolicy`.
///
/// <p>Attaches an Identity and Access Management (Amazon Web Services IAM) policy for sharing the rule group. You can use the policy to share the rule group using Resource Access Manager (RAM). </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutFirewallRuleGroupPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_firewall_rule_group_policy::builders::PutFirewallRuleGroupPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyOutput,
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError,
    > for PutFirewallRuleGroupPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyOutput,
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutFirewallRuleGroupPolicyFluentBuilder {
    /// Creates a new `PutFirewallRuleGroupPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutFirewallRuleGroupPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::put_firewall_rule_group_policy::builders::PutFirewallRuleGroupPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyOutput,
        crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the rule group that you want to share.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the rule group that you want to share.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The ARN (Amazon Resource Name) for the rule group that you want to share.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>The Identity and Access Management (Amazon Web Services IAM) policy to attach to the rule group.</p>
    pub fn firewall_rule_group_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.firewall_rule_group_policy(input.into());
        self
    }
    /// <p>The Identity and Access Management (Amazon Web Services IAM) policy to attach to the rule group.</p>
    pub fn set_firewall_rule_group_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_firewall_rule_group_policy(input);
        self
    }
    /// <p>The Identity and Access Management (Amazon Web Services IAM) policy to attach to the rule group.</p>
    pub fn get_firewall_rule_group_policy(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_firewall_rule_group_policy()
    }
}
