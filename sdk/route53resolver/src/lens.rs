// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_firewall_configs_output_next_token(
    input: &crate::operation::list_firewall_configs::ListFirewallConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewall_domain_lists_output_next_token(
    input: &crate::operation::list_firewall_domain_lists::ListFirewallDomainListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewall_domains_output_next_token(
    input: &crate::operation::list_firewall_domains::ListFirewallDomainsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewall_rule_group_associations_output_next_token(
    input: &crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewall_rule_groups_output_next_token(
    input: &crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_firewall_rules_output_next_token(
    input: &crate::operation::list_firewall_rules::ListFirewallRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_configs_output_next_token(
    input: &crate::operation::list_resolver_configs::ListResolverConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_dnssec_configs_output_next_token(
    input: &crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_endpoint_ip_addresses_output_next_token(
    input: &crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_endpoints_output_next_token(
    input: &crate::operation::list_resolver_endpoints::ListResolverEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_query_log_config_associations_output_next_token(
    input: &crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_query_log_configs_output_next_token(
    input: &crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_rule_associations_output_next_token(
    input: &crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resolver_rules_output_next_token(
    input: &crate::operation::list_resolver_rules::ListResolverRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::operation::list_tags_for_resource::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
