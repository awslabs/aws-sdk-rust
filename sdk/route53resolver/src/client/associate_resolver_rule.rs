// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateResolverRule`](crate::client::fluent_builders::AssociateResolverRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resolver_rule_id(impl Into<String>)`](crate::client::fluent_builders::AssociateResolverRule::resolver_rule_id) / [`set_resolver_rule_id(Option<String>)`](crate::client::fluent_builders::AssociateResolverRule::set_resolver_rule_id): <p>The ID of the Resolver rule that you want to associate with the VPC. To list the existing Resolver rules, use <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRules.html">ListResolverRules</a>.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::AssociateResolverRule::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::AssociateResolverRule::set_name): <p>A name for the association that you're creating between a Resolver rule and a VPC.</p>
    ///   - [`vpc_id(impl Into<String>)`](crate::client::fluent_builders::AssociateResolverRule::vpc_id) / [`set_vpc_id(Option<String>)`](crate::client::fluent_builders::AssociateResolverRule::set_vpc_id): <p>The ID of the VPC that you want to associate the Resolver rule with.</p>
    /// - On success, responds with [`AssociateResolverRuleOutput`](crate::output::AssociateResolverRuleOutput) with field(s):
    ///   - [`resolver_rule_association(Option<ResolverRuleAssociation>)`](crate::output::AssociateResolverRuleOutput::resolver_rule_association): <p>Information about the <code>AssociateResolverRule</code> request, including the status of the request.</p>
    /// - On failure, responds with [`SdkError<AssociateResolverRuleError>`](crate::error::AssociateResolverRuleError)
    pub fn associate_resolver_rule(&self) -> crate::client::fluent_builders::AssociateResolverRule {
        crate::client::fluent_builders::AssociateResolverRule::new(self.handle.clone())
    }
}
