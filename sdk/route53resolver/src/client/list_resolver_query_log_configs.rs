// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListResolverQueryLogConfigs`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::set_max_results): <p>The maximum number of query logging configurations that you want to return in the response to a <code>ListResolverQueryLogConfigs</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 query logging configurations. </p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::set_next_token): <p>For the first <code>ListResolverQueryLogConfigs</code> request, omit this value.</p>  <p>If there are more than <code>MaxResults</code> query logging configurations that match the values that you specify for <code>Filters</code>, you can submit another <code>ListResolverQueryLogConfigs</code> request to get the next group of configurations. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::set_filters): <p>An optional specification to return a subset of query logging configurations.</p> <note>   <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p>  </note>
    ///   - [`sort_by(impl Into<String>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::sort_by) / [`set_sort_by(Option<String>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::set_sort_by): <p>The element that you want Resolver to sort query logging configurations by. </p> <note>   <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortBy</code>, if any, as in the previous request.</p>  </note>  <p>Valid values include the following elements:</p>  <ul>   <li> <p> <code>Arn</code>: The ARN of the query logging configuration</p> </li>   <li> <p> <code>AssociationCount</code>: The number of VPCs that are associated with the specified configuration </p> </li>   <li> <p> <code>CreationTime</code>: The date and time that Resolver returned when the configuration was created</p> </li>   <li> <p> <code>CreatorRequestId</code>: The value that was specified for <code>CreatorRequestId</code> when the configuration was created</p> </li>   <li> <p> <code>DestinationArn</code>: The location that logs are sent to</p> </li>   <li> <p> <code>Id</code>: The ID of the configuration</p> </li>   <li> <p> <code>Name</code>: The name of the configuration</p> </li>   <li> <p> <code>OwnerId</code>: The Amazon Web Services account number of the account that created the configuration</p> </li>   <li> <p> <code>ShareStatus</code>: Whether the configuration is shared with other Amazon Web Services accounts or shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p> </li>   <li> <p> <code>Status</code>: The current status of the configuration. Valid values include the following:</p>    <ul>     <li> <p> <code>CREATING</code>: Resolver is creating the query logging configuration.</p> </li>     <li> <p> <code>CREATED</code>: The query logging configuration was successfully created. Resolver is logging queries that originate in the specified VPC.</p> </li>     <li> <p> <code>DELETING</code>: Resolver is deleting this query logging configuration.</p> </li>     <li> <p> <code>FAILED</code>: Resolver either couldn't create or couldn't delete the query logging configuration. Here are two common causes:</p>      <ul>       <li> <p>The specified destination (for example, an Amazon S3 bucket) was deleted.</p> </li>       <li> <p>Permissions don't allow sending logs to the destination.</p> </li>      </ul> </li>    </ul> </li>  </ul>
    ///   - [`sort_order(SortOrder)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::sort_order) / [`set_sort_order(Option<SortOrder>)`](crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::set_sort_order): <p>If you specified a value for <code>SortBy</code>, the order that you want query logging configurations to be listed in, <code>ASCENDING</code> or <code>DESCENDING</code>.</p> <note>   <p>If you submit a second or subsequent <code>ListResolverQueryLogConfigs</code> request and specify the <code>NextToken</code> parameter, you must use the same value for <code>SortOrder</code>, if any, as in the previous request.</p>  </note>
    /// - On success, responds with [`ListResolverQueryLogConfigsOutput`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput::next_token): <p>If there are more than <code>MaxResults</code> query logging configurations, you can submit another <code>ListResolverQueryLogConfigs</code> request to get the next group of configurations. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    ///   - [`total_count(i32)`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput::total_count): <p>The total number of query logging configurations that were created by the current account in the specified Region. This count can differ from the number of query logging configurations that are returned in a <code>ListResolverQueryLogConfigs</code> response, depending on the values that you specify in the request.</p>
    ///   - [`total_filtered_count(i32)`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput::total_filtered_count): <p>The total number of query logging configurations that were created by the current account in the specified Region and that match the filters that were specified in the <code>ListResolverQueryLogConfigs</code> request. For the total number of query logging configurations that were created by the current account in the specified Region, see <code>TotalCount</code>.</p>
    ///   - [`resolver_query_log_configs(Option<Vec<ResolverQueryLogConfig>>)`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsOutput::resolver_query_log_configs): <p>A list that contains one <code>ResolverQueryLogConfig</code> element for each query logging configuration that matches the values that you specified for <code>Filter</code>.</p>
    /// - On failure, responds with [`SdkError<ListResolverQueryLogConfigsError>`](crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError)
    pub fn list_resolver_query_log_configs(&self) -> crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder{
        crate::operation::list_resolver_query_log_configs::builders::ListResolverQueryLogConfigsFluentBuilder::new(self.handle.clone())
    }
}
