// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutResolverRulePolicy`](crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder::arn) / [`set_arn(Option<String>)`](crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder::set_arn): <p>The Amazon Resource Name (ARN) of the rule that you want to share with another account.</p>
    ///   - [`resolver_rule_policy(impl Into<String>)`](crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder::resolver_rule_policy) / [`set_resolver_rule_policy(Option<String>)`](crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder::set_resolver_rule_policy): <p>An Identity and Access Management policy statement that lists the rules that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Action</code> section of the statement:</p>  <ul>   <li> <p> <code>route53resolver:GetResolverRule</code> </p> </li>   <li> <p> <code>route53resolver:AssociateResolverRule</code> </p> </li>   <li> <p> <code>route53resolver:DisassociateResolverRule</code> </p> </li>   <li> <p> <code>route53resolver:ListResolverRules</code> </p> </li>   <li> <p> <code>route53resolver:ListResolverRuleAssociations</code> </p> </li>  </ul>  <p>In the <code>Resource</code> section of the statement, specify the ARN for the rule that you want to share with another account. Specify the same ARN that you specified in <code>Arn</code>.</p>
    /// - On success, responds with [`PutResolverRulePolicyOutput`](crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput) with field(s):
    ///   - [`return_value(bool)`](crate::operation::put_resolver_rule_policy::PutResolverRulePolicyOutput::return_value): <p>Whether the <code>PutResolverRulePolicy</code> request was successful.</p>
    /// - On failure, responds with [`SdkError<PutResolverRulePolicyError>`](crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError)
    pub fn put_resolver_rule_policy(
        &self,
    ) -> crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder
    {
        crate::operation::put_resolver_rule_policy::builders::PutResolverRulePolicyFluentBuilder::new(self.handle.clone())
    }
}
