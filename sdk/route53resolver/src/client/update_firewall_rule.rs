// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFirewallRule`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`firewall_rule_group_id(impl Into<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::firewall_rule_group_id) / [`set_firewall_rule_group_id(Option<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_firewall_rule_group_id):<br>required: **true**<br><p>The unique identifier of the firewall rule group for the rule. </p><br>
    ///   - [`firewall_domain_list_id(impl Into<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::firewall_domain_list_id) / [`set_firewall_domain_list_id(Option<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_firewall_domain_list_id):<br>required: **true**<br><p>The ID of the domain list to use in the rule. </p><br>
    ///   - [`priority(i32)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::priority) / [`set_priority(Option<i32>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_priority):<br>required: **false**<br><p>The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.</p>  <p>You must specify a unique priority for each rule in a rule group. To make it easier to insert rules later, leave space between the numbers, for example, use 100, 200, and so on. You can change the priority setting for the rules in a rule group at any time.</p><br>
    ///   - [`action(Action)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::action) / [`set_action(Option<Action>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_action):<br>required: **false**<br><p>The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list:</p>  <ul>   <li> <p> <code>ALLOW</code> - Permit the request to go through.</p> </li>   <li> <p> <code>ALERT</code> - Permit the request to go through but send an alert to the logs.</p> </li>   <li> <p> <code>BLOCK</code> - Disallow the request. This option requires additional details in the rule's <code>BlockResponse</code>. </p> </li>  </ul><br>
    ///   - [`block_response(BlockResponse)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::block_response) / [`set_block_response(Option<BlockResponse>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_block_response):<br>required: **false**<br><p>The way that you want DNS Firewall to block the request. Used for the rule action setting <code>BLOCK</code>.</p>  <ul>   <li> <p> <code>NODATA</code> - Respond indicating that the query was successful, but no response is available for it.</p> </li>   <li> <p> <code>NXDOMAIN</code> - Respond indicating that the domain name that's in the query doesn't exist.</p> </li>   <li> <p> <code>OVERRIDE</code> - Provide a custom override in the response. This option requires custom handling details in the rule's <code>BlockOverride*</code> settings. </p> </li>  </ul><br>
    ///   - [`block_override_domain(impl Into<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::block_override_domain) / [`set_block_override_domain(Option<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_block_override_domain):<br>required: **false**<br><p>The custom DNS record to send back in response to the query. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p><br>
    ///   - [`block_override_dns_type(BlockOverrideDnsType)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::block_override_dns_type) / [`set_block_override_dns_type(Option<BlockOverrideDnsType>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_block_override_dns_type):<br>required: **false**<br><p>The DNS record's type. This determines the format of the record value that you provided in <code>BlockOverrideDomain</code>. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p><br>
    ///   - [`block_override_ttl(i32)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::block_override_ttl) / [`set_block_override_ttl(Option<i32>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_block_override_ttl):<br>required: **false**<br><p>The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Used for the rule action <code>BLOCK</code> with a <code>BlockResponse</code> setting of <code>OVERRIDE</code>.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::set_name):<br>required: **false**<br><p>The name of the rule.</p><br>
    /// - On success, responds with [`UpdateFirewallRuleOutput`](crate::operation::update_firewall_rule::UpdateFirewallRuleOutput) with field(s):
    ///   - [`firewall_rule(Option<FirewallRule>)`](crate::operation::update_firewall_rule::UpdateFirewallRuleOutput::firewall_rule): <p>The firewall rule that you just updated. </p>
    /// - On failure, responds with [`SdkError<UpdateFirewallRuleError>`](crate::operation::update_firewall_rule::UpdateFirewallRuleError)
    pub fn update_firewall_rule(&self) -> crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder {
        crate::operation::update_firewall_rule::builders::UpdateFirewallRuleFluentBuilder::new(self.handle.clone())
    }
}
