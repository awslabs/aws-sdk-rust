// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateResolverEndpoint`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`creator_request_id(impl Into<String>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::creator_request_id) / [`set_creator_request_id(Option<String>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_creator_request_id): <p>A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp. </p>
    ///   - [`name(impl Into<String>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_name): <p>A friendly name that lets you easily find a configuration in the Resolver dashboard in the Route 53 console.</p>
    ///   - [`security_group_ids(Vec<String>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::security_group_ids) / [`set_security_group_ids(Option<Vec<String>>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_security_group_ids): <p>The ID of one or more security groups that you want to use to control access to this VPC. The security group that you specify must include one or more inbound rules (for inbound Resolver endpoints) or outbound rules (for outbound Resolver endpoints). Inbound and outbound rules must allow TCP and UDP access. For inbound access, open port 53. For outbound access, open the port that you're using for DNS queries on your network.</p>
    ///   - [`direction(ResolverEndpointDirection)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::direction) / [`set_direction(Option<ResolverEndpointDirection>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_direction): <p>Specify the applicable value:</p>  <ul>   <li> <p> <code>INBOUND</code>: Resolver forwards DNS queries to the DNS service for a VPC from your network</p> </li>   <li> <p> <code>OUTBOUND</code>: Resolver forwards DNS queries from the DNS service for a VPC to your network</p> </li>  </ul>
    ///   - [`ip_addresses(Vec<IpAddressRequest>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::ip_addresses) / [`set_ip_addresses(Option<Vec<IpAddressRequest>>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_ip_addresses): <p>The subnets and IP addresses in your VPC that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). The subnet ID uniquely identifies a VPC. </p>
    ///   - [`tags(Vec<Tag>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::set_tags): <p>A list of the tag keys and values that you want to associate with the endpoint.</p>
    /// - On success, responds with [`CreateResolverEndpointOutput`](crate::operation::create_resolver_endpoint::CreateResolverEndpointOutput) with field(s):
    ///   - [`resolver_endpoint(Option<ResolverEndpoint>)`](crate::operation::create_resolver_endpoint::CreateResolverEndpointOutput::resolver_endpoint): <p>Information about the <code>CreateResolverEndpoint</code> request, including the status of the request.</p>
    /// - On failure, responds with [`SdkError<CreateResolverEndpointError>`](crate::operation::create_resolver_endpoint::CreateResolverEndpointError)
    pub fn create_resolver_endpoint(
        &self,
    ) -> crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder
    {
        crate::operation::create_resolver_endpoint::builders::CreateResolverEndpointFluentBuilder::new(self.handle.clone())
    }
}
