// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateResolverQueryLogConfig`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::set_name):<br>required: **true**<br><p>The name that you want to give the query logging configuration.</p><br>
    ///   - [`destination_arn(impl Into<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::destination_arn) / [`set_destination_arn(Option<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::set_destination_arn):<br>required: **true**<br><p>The ARN of the resource that you want Resolver to send query logs. You can send query logs to an S3 bucket, a CloudWatch Logs log group, or a Kinesis Data Firehose delivery stream. Examples of valid values include the following:</p>  <ul>   <li> <p> <b>S3 bucket</b>: </p> <p> <code>arn:aws:s3:::examplebucket</code> </p> <p>You can optionally append a file prefix to the end of the ARN.</p> <p> <code>arn:aws:s3:::examplebucket/development/</code> </p> </li>   <li> <p> <b>CloudWatch Logs log group</b>: </p> <p> <code>arn:aws:logs:us-west-1:123456789012:log-group:/mystack-testgroup-12ABC1AB12A1:*</code> </p> </li>   <li> <p> <b>Kinesis Data Firehose delivery stream</b>:</p> <p> <code>arn:aws:kinesis:us-east-2:0123456789:stream/my_stream_name</code> </p> </li>  </ul><br>
    ///   - [`creator_request_id(impl Into<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::creator_request_id) / [`set_creator_request_id(Option<String>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::set_creator_request_id):<br>required: **true**<br><p>A unique string that identifies the request and that allows failed requests to be retried without the risk of running the operation twice. <code>CreatorRequestId</code> can be any unique string, for example, a date/time stamp. </p><br>
    ///   - [`tags(Tag)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::set_tags):<br>required: **false**<br><p>A list of the tag keys and values that you want to associate with the query logging configuration.</p><br>
    /// - On success, responds with [`CreateResolverQueryLogConfigOutput`](crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigOutput) with field(s):
    ///   - [`resolver_query_log_config(Option<ResolverQueryLogConfig>)`](crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigOutput::resolver_query_log_config): <p>Information about the <code>CreateResolverQueryLogConfig</code> request, including the status of the request.</p>
    /// - On failure, responds with [`SdkError<CreateResolverQueryLogConfigError>`](crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError)
    pub fn create_resolver_query_log_config(
        &self,
    ) -> crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder {
        crate::operation::create_resolver_query_log_config::builders::CreateResolverQueryLogConfigFluentBuilder::new(self.handle.clone())
    }
}
