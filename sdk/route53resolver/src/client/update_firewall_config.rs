// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateFirewallConfig`](crate::client::fluent_builders::UpdateFirewallConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFirewallConfig::resource_id) / [`set_resource_id(Option<String>)`](crate::client::fluent_builders::UpdateFirewallConfig::set_resource_id): <p>The ID of the VPC that the configuration is for.</p>
    ///   - [`firewall_fail_open(FirewallFailOpenStatus)`](crate::client::fluent_builders::UpdateFirewallConfig::firewall_fail_open) / [`set_firewall_fail_open(Option<FirewallFailOpenStatus>)`](crate::client::fluent_builders::UpdateFirewallConfig::set_firewall_fail_open): <p>Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. </p>  <ul>   <li> <p>By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. </p> </li>   <li> <p>If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. </p> </li>  </ul>  <p>This behavior is only enforced for VPCs that have at least one DNS Firewall rule group association. </p>
    /// - On success, responds with [`UpdateFirewallConfigOutput`](crate::output::UpdateFirewallConfigOutput) with field(s):
    ///   - [`firewall_config(Option<FirewallConfig>)`](crate::output::UpdateFirewallConfigOutput::firewall_config): <p>Configuration of the firewall behavior provided by DNS Firewall for a single VPC. </p>
    /// - On failure, responds with [`SdkError<UpdateFirewallConfigError>`](crate::error::UpdateFirewallConfigError)
    pub fn update_firewall_config(&self) -> crate::client::fluent_builders::UpdateFirewallConfig {
        crate::client::fluent_builders::UpdateFirewallConfig::new(self.handle.clone())
    }
}
