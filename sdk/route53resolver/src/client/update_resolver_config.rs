// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateResolverConfig`](crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_id(impl Into<String>)`](crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder::resource_id) / [`set_resource_id(Option<String>)`](crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder::set_resource_id):<br>required: **true**<br><p>Resource ID of the Amazon VPC that you want to update the Resolver configuration for.</p><br>
    ///   - [`autodefined_reverse_flag(AutodefinedReverseFlag)`](crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder::autodefined_reverse_flag) / [`set_autodefined_reverse_flag(Option<AutodefinedReverseFlag>)`](crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder::set_autodefined_reverse_flag):<br>required: **true**<br><p>Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. This is enabled by default. Disabling this option will also affect EC2-Classic instances using ClassicLink. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html">ClassicLink</a> in the <i>Amazon EC2 guide</i>.</p> <important>   <p>We are retiring EC2-Classic on August 15, 2022. We recommend that you migrate from EC2-Classic to a VPC. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html">Migrate from EC2-Classic to a VPC</a> in the <i>Amazon EC2 guide</i> and the blog <a href="http://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/">EC2-Classic Networking is Retiring – Here’s How to Prepare</a>.</p>  </important> <note>   <p>It can take some time for the status change to be completed.</p>  </note>  <p></p><br>
    /// - On success, responds with [`UpdateResolverConfigOutput`](crate::operation::update_resolver_config::UpdateResolverConfigOutput) with field(s):
    ///   - [`resolver_config(Option<ResolverConfig>)`](crate::operation::update_resolver_config::UpdateResolverConfigOutput::resolver_config): <p>An array that contains settings for the specified Resolver configuration.</p>
    /// - On failure, responds with [`SdkError<UpdateResolverConfigError>`](crate::operation::update_resolver_config::UpdateResolverConfigError)
    pub fn update_resolver_config(&self) -> crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder {
        crate::operation::update_resolver_config::builders::UpdateResolverConfigFluentBuilder::new(self.handle.clone())
    }
}
