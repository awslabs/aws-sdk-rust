// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListResolverRules`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::set_max_results): <p>The maximum number of Resolver rules that you want to return in the response to a <code>ListResolverRules</code> request. If you don't specify a value for <code>MaxResults</code>, Resolver returns up to 100 Resolver rules.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::set_next_token): <p>For the first <code>ListResolverRules</code> request, omit this value.</p>  <p>If you have more than <code>MaxResults</code> Resolver rules, you can submit another <code>ListResolverRules</code> request to get the next group of Resolver rules. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::set_filters): <p>An optional specification to return a subset of Resolver rules, such as all Resolver rules that are associated with the same Resolver endpoint.</p> <note>   <p>If you submit a second or subsequent <code>ListResolverRules</code> request and specify the <code>NextToken</code> parameter, you must use the same values for <code>Filters</code>, if any, as in the previous request.</p>  </note>
    /// - On success, responds with [`ListResolverRulesOutput`](crate::operation::list_resolver_rules::ListResolverRulesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_resolver_rules::ListResolverRulesOutput::next_token): <p>If more than <code>MaxResults</code> Resolver rules match the specified criteria, you can submit another <code>ListResolverRules</code> request to get the next group of results. In the next request, specify the value of <code>NextToken</code> from the previous response. </p>
    ///   - [`max_results(Option<i32>)`](crate::operation::list_resolver_rules::ListResolverRulesOutput::max_results): <p>The value that you specified for <code>MaxResults</code> in the request.</p>
    ///   - [`resolver_rules(Option<Vec<ResolverRule>>)`](crate::operation::list_resolver_rules::ListResolverRulesOutput::resolver_rules): <p>The Resolver rules that were created using the current Amazon Web Services account and that match the specified filters, if any.</p>
    /// - On failure, responds with [`SdkError<ListResolverRulesError>`](crate::operation::list_resolver_rules::ListResolverRulesError)
    pub fn list_resolver_rules(
        &self,
    ) -> crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder {
        crate::operation::list_resolver_rules::builders::ListResolverRulesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
