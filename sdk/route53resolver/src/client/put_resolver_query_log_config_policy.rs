// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutResolverQueryLogConfigPolicy`](crate::client::fluent_builders::PutResolverQueryLogConfigPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::PutResolverQueryLogConfigPolicy::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::PutResolverQueryLogConfigPolicy::set_arn): <p>The Amazon Resource Name (ARN) of the account that you want to share rules with.</p>
    ///   - [`resolver_query_log_config_policy(impl Into<String>)`](crate::client::fluent_builders::PutResolverQueryLogConfigPolicy::resolver_query_log_config_policy) / [`set_resolver_query_log_config_policy(Option<String>)`](crate::client::fluent_builders::PutResolverQueryLogConfigPolicy::set_resolver_query_log_config_policy): <p>An Identity and Access Management policy statement that lists the query logging configurations that you want to share with another Amazon Web Services account and the operations that you want the account to be able to perform. You can specify the following operations in the <code>Actions</code> section of the statement:</p>  <ul>   <li> <p> <code>route53resolver:AssociateResolverQueryLogConfig</code> </p> </li>   <li> <p> <code>route53resolver:DisassociateResolverQueryLogConfig</code> </p> </li>   <li> <p> <code>route53resolver:ListResolverQueryLogConfigAssociations</code> </p> </li>   <li> <p> <code>route53resolver:ListResolverQueryLogConfigs</code> </p> </li>  </ul>  <p>In the <code>Resource</code> section of the statement, you specify the ARNs for the query logging configurations that you want to share with the account that you specified in <code>Arn</code>. </p>
    /// - On success, responds with [`PutResolverQueryLogConfigPolicyOutput`](crate::output::PutResolverQueryLogConfigPolicyOutput) with field(s):
    ///   - [`return_value(bool)`](crate::output::PutResolverQueryLogConfigPolicyOutput::return_value): <p>Whether the <code>PutResolverQueryLogConfigPolicy</code> request was successful.</p>
    /// - On failure, responds with [`SdkError<PutResolverQueryLogConfigPolicyError>`](crate::error::PutResolverQueryLogConfigPolicyError)
    pub fn put_resolver_query_log_config_policy(
        &self,
    ) -> crate::client::fluent_builders::PutResolverQueryLogConfigPolicy {
        crate::client::fluent_builders::PutResolverQueryLogConfigPolicy::new(self.handle.clone())
    }
}
