// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>High-level information for a firewall rule group. A firewall rule group is a collection of rules that DNS Firewall uses to filter DNS network traffic for a VPC. To retrieve the rules for the rule group, call <code>ListFirewallRules</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FirewallRuleGroup {
    /// <p>The ID of the rule group. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ARN (Amazon Resource Name) of the rule group.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the rule group.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The number of rules in the rule group.</p>
    #[doc(hidden)]
    pub rule_count: std::option::Option<i32>,
    /// <p>The status of the domain list. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FirewallRuleGroupStatus>,
    /// <p>Additional information about the status of the rule group, if available.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. </p>
    #[doc(hidden)]
    pub owner_id: std::option::Option<std::string::String>,
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    #[doc(hidden)]
    pub creator_request_id: std::option::Option<std::string::String>,
    /// <p>Whether the rule group is shared with other Amazon Web Services accounts, or was shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p>
    #[doc(hidden)]
    pub share_status: std::option::Option<crate::types::ShareStatus>,
    /// <p>The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<std::string::String>,
    /// <p>The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    #[doc(hidden)]
    pub modification_time: std::option::Option<std::string::String>,
}
impl FirewallRuleGroup {
    /// <p>The ID of the rule group. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN (Amazon Resource Name) of the rule group.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the rule group.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The number of rules in the rule group.</p>
    pub fn rule_count(&self) -> std::option::Option<i32> {
        self.rule_count
    }
    /// <p>The status of the domain list. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::FirewallRuleGroupStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about the status of the rule group, if available.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The Amazon Web Services account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. </p>
    pub fn owner_id(&self) -> std::option::Option<&str> {
        self.owner_id.as_deref()
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn creator_request_id(&self) -> std::option::Option<&str> {
        self.creator_request_id.as_deref()
    }
    /// <p>Whether the rule group is shared with other Amazon Web Services accounts, or was shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p>
    pub fn share_status(&self) -> std::option::Option<&crate::types::ShareStatus> {
        self.share_status.as_ref()
    }
    /// <p>The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn creation_time(&self) -> std::option::Option<&str> {
        self.creation_time.as_deref()
    }
    /// <p>The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(&self) -> std::option::Option<&str> {
        self.modification_time.as_deref()
    }
}
impl FirewallRuleGroup {
    /// Creates a new builder-style object to manufacture [`FirewallRuleGroup`](crate::types::FirewallRuleGroup).
    pub fn builder() -> crate::types::builders::FirewallRuleGroupBuilder {
        crate::types::builders::FirewallRuleGroupBuilder::default()
    }
}

/// A builder for [`FirewallRuleGroup`](crate::types::FirewallRuleGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FirewallRuleGroupBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) rule_count: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::FirewallRuleGroupStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) owner_id: std::option::Option<std::string::String>,
    pub(crate) creator_request_id: std::option::Option<std::string::String>,
    pub(crate) share_status: std::option::Option<crate::types::ShareStatus>,
    pub(crate) creation_time: std::option::Option<std::string::String>,
    pub(crate) modification_time: std::option::Option<std::string::String>,
}
impl FirewallRuleGroupBuilder {
    /// <p>The ID of the rule group. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the rule group. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the rule group.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN (Amazon Resource Name) of the rule group.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the rule group.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the rule group.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The number of rules in the rule group.</p>
    pub fn rule_count(mut self, input: i32) -> Self {
        self.rule_count = Some(input);
        self
    }
    /// <p>The number of rules in the rule group.</p>
    pub fn set_rule_count(mut self, input: std::option::Option<i32>) -> Self {
        self.rule_count = input;
        self
    }
    /// <p>The status of the domain list. </p>
    pub fn status(mut self, input: crate::types::FirewallRuleGroupStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the domain list. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::FirewallRuleGroupStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Additional information about the status of the rule group, if available.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Additional information about the status of the rule group, if available.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The Amazon Web Services account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. </p>
    pub fn owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID for the account that created the rule group. When a rule group is shared with your account, this is the account that has shared the rule group with you. </p>
    pub fn set_owner_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_id = input;
        self
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn creator_request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.creator_request_id = Some(input.into());
        self
    }
    /// <p>A unique string defined by you to identify the request. This allows you to retry failed requests without the risk of running the operation twice. This can be any unique string, for example, a timestamp. </p>
    pub fn set_creator_request_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creator_request_id = input;
        self
    }
    /// <p>Whether the rule group is shared with other Amazon Web Services accounts, or was shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p>
    pub fn share_status(mut self, input: crate::types::ShareStatus) -> Self {
        self.share_status = Some(input);
        self
    }
    /// <p>Whether the rule group is shared with other Amazon Web Services accounts, or was shared with the current account by another Amazon Web Services account. Sharing is configured through Resource Access Manager (RAM).</p>
    pub fn set_share_status(
        mut self,
        input: std::option::Option<crate::types::ShareStatus>,
    ) -> Self {
        self.share_status = input;
        self
    }
    /// <p>The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn creation_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_time = Some(input.into());
        self
    }
    /// <p>The date and time that the rule group was created, in Unix time format and Coordinated Universal Time (UTC). </p>
    pub fn set_creation_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn modification_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.modification_time = Some(input.into());
        self
    }
    /// <p>The date and time that the rule group was last modified, in Unix time format and Coordinated Universal Time (UTC).</p>
    pub fn set_modification_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.modification_time = input;
        self
    }
    /// Consumes the builder and constructs a [`FirewallRuleGroup`](crate::types::FirewallRuleGroup).
    pub fn build(self) -> crate::types::FirewallRuleGroup {
        crate::types::FirewallRuleGroup {
            id: self.id,
            arn: self.arn,
            name: self.name,
            rule_count: self.rule_count,
            status: self.status,
            status_message: self.status_message,
            owner_id: self.owner_id,
            creator_request_id: self.creator_request_id,
            share_status: self.share_status,
            creation_time: self.creation_time,
            modification_time: self.modification_time,
        }
    }
}
