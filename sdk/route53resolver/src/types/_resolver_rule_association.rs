// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In the response to an <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a>, <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_DisassociateResolverRule.html">DisassociateResolverRule</a>, or <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_ListResolverRuleAssociations.html">ListResolverRuleAssociations</a> request, provides information about an association between a Resolver rule and a VPC. The association determines which DNS queries that originate in the VPC are forwarded to your network. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResolverRuleAssociation {
    /// <p>The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a> request.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The ID of the Resolver rule that you associated with the VPC that is specified by <code>VPCId</code>.</p>
    #[doc(hidden)]
    pub resolver_rule_id: std::option::Option<std::string::String>,
    /// <p>The name of an association between a Resolver rule and a VPC.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the VPC that you associated the Resolver rule with.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>A code that specifies the current status of the association between a Resolver rule and a VPC.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ResolverRuleAssociationStatus>,
    /// <p>A detailed description of the status of the association between a Resolver rule and a VPC.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
}
impl ResolverRuleAssociation {
    /// <p>The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a> request.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ID of the Resolver rule that you associated with the VPC that is specified by <code>VPCId</code>.</p>
    pub fn resolver_rule_id(&self) -> std::option::Option<&str> {
        self.resolver_rule_id.as_deref()
    }
    /// <p>The name of an association between a Resolver rule and a VPC.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the VPC that you associated the Resolver rule with.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>A code that specifies the current status of the association between a Resolver rule and a VPC.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ResolverRuleAssociationStatus> {
        self.status.as_ref()
    }
    /// <p>A detailed description of the status of the association between a Resolver rule and a VPC.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
}
impl ResolverRuleAssociation {
    /// Creates a new builder-style object to manufacture [`ResolverRuleAssociation`](crate::types::ResolverRuleAssociation).
    pub fn builder() -> crate::types::builders::ResolverRuleAssociationBuilder {
        crate::types::builders::ResolverRuleAssociationBuilder::default()
    }
}

/// A builder for [`ResolverRuleAssociation`](crate::types::ResolverRuleAssociation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResolverRuleAssociationBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) resolver_rule_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ResolverRuleAssociationStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
}
impl ResolverRuleAssociationBuilder {
    /// <p>The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a> request.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the association between a Resolver rule and a VPC. Resolver assigns this value when you submit an <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_AssociateResolverRule.html">AssociateResolverRule</a> request.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Resolver rule that you associated with the VPC that is specified by <code>VPCId</code>.</p>
    pub fn resolver_rule_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resolver_rule_id = Some(input.into());
        self
    }
    /// <p>The ID of the Resolver rule that you associated with the VPC that is specified by <code>VPCId</code>.</p>
    pub fn set_resolver_rule_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resolver_rule_id = input;
        self
    }
    /// <p>The name of an association between a Resolver rule and a VPC.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of an association between a Resolver rule and a VPC.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ID of the VPC that you associated the Resolver rule with.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC that you associated the Resolver rule with.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>A code that specifies the current status of the association between a Resolver rule and a VPC.</p>
    pub fn status(mut self, input: crate::types::ResolverRuleAssociationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>A code that specifies the current status of the association between a Resolver rule and a VPC.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ResolverRuleAssociationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>A detailed description of the status of the association between a Resolver rule and a VPC.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>A detailed description of the status of the association between a Resolver rule and a VPC.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ResolverRuleAssociation`](crate::types::ResolverRuleAssociation).
    pub fn build(self) -> crate::types::ResolverRuleAssociation {
        crate::types::ResolverRuleAssociation {
            id: self.id,
            resolver_rule_id: self.resolver_rule_id,
            name: self.name,
            vpc_id: self.vpc_id,
            status: self.status,
            status_message: self.status_message,
        }
    }
}
