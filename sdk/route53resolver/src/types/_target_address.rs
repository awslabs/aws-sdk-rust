// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In a <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverRule.html">CreateResolverRule</a> request, an array of the IPs that you want to forward DNS queries to.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetAddress {
    /// <p>One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.</p>
    #[doc(hidden)]
    pub ip: std::option::Option<std::string::String>,
    /// <p>The port at <code>Ip</code> that you want to forward DNS queries to.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
}
impl TargetAddress {
    /// <p>One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.</p>
    pub fn ip(&self) -> std::option::Option<&str> {
        self.ip.as_deref()
    }
    /// <p>The port at <code>Ip</code> that you want to forward DNS queries to.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
}
impl TargetAddress {
    /// Creates a new builder-style object to manufacture [`TargetAddress`](crate::types::TargetAddress).
    pub fn builder() -> crate::types::builders::TargetAddressBuilder {
        crate::types::builders::TargetAddressBuilder::default()
    }
}

/// A builder for [`TargetAddress`](crate::types::TargetAddress).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetAddressBuilder {
    pub(crate) ip: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
}
impl TargetAddressBuilder {
    /// <p>One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.</p>
    pub fn ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip = Some(input.into());
        self
    }
    /// <p>One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.</p>
    pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// <p>The port at <code>Ip</code> that you want to forward DNS queries to.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port at <code>Ip</code> that you want to forward DNS queries to.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetAddress`](crate::types::TargetAddress).
    pub fn build(self) -> crate::types::TargetAddress {
        crate::types::TargetAddress {
            ip: self.ip,
            port: self.port,
        }
    }
}
