// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In a <a href="https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_CreateResolverEndpoint.html">CreateResolverEndpoint</a> request, the IP address that DNS queries originate from (for outbound endpoints) or that you forward DNS queries to (for inbound endpoints). <code>IpAddressRequest</code> also includes the ID of the subnet that contains the IP address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpAddressRequest {
    /// <p>The ID of the subnet that contains the IP address. </p>
    #[doc(hidden)]
    pub subnet_id: std::option::Option<std::string::String>,
    /// <p>The IP address that you want to use for DNS queries.</p>
    #[doc(hidden)]
    pub ip: std::option::Option<std::string::String>,
}
impl IpAddressRequest {
    /// <p>The ID of the subnet that contains the IP address. </p>
    pub fn subnet_id(&self) -> std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The IP address that you want to use for DNS queries.</p>
    pub fn ip(&self) -> std::option::Option<&str> {
        self.ip.as_deref()
    }
}
impl IpAddressRequest {
    /// Creates a new builder-style object to manufacture [`IpAddressRequest`](crate::types::IpAddressRequest).
    pub fn builder() -> crate::types::builders::IpAddressRequestBuilder {
        crate::types::builders::IpAddressRequestBuilder::default()
    }
}

/// A builder for [`IpAddressRequest`](crate::types::IpAddressRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpAddressRequestBuilder {
    pub(crate) subnet_id: std::option::Option<std::string::String>,
    pub(crate) ip: std::option::Option<std::string::String>,
}
impl IpAddressRequestBuilder {
    /// <p>The ID of the subnet that contains the IP address. </p>
    pub fn subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_id = Some(input.into());
        self
    }
    /// <p>The ID of the subnet that contains the IP address. </p>
    pub fn set_subnet_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The IP address that you want to use for DNS queries.</p>
    pub fn ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip = Some(input.into());
        self
    }
    /// <p>The IP address that you want to use for DNS queries.</p>
    pub fn set_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip = input;
        self
    }
    /// Consumes the builder and constructs a [`IpAddressRequest`](crate::types::IpAddressRequest).
    pub fn build(self) -> crate::types::IpAddressRequest {
        crate::types::IpAddressRequest {
            subnet_id: self.subnet_id,
            ip: self.ip,
        }
    }
}
