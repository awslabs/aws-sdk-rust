// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The current account doesn't have the IAM permissions required to perform the specified Resolver operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p></p>
    ConflictException(crate::error::ConflictException),
    /// <p>We encountered an unknown error. Try again in a few minutes.</p>
    InternalServiceErrorException(crate::error::InternalServiceErrorException),
    /// <p>The value that you specified for <code>NextToken</code> in a <code>List</code> request isn't valid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>One or more parameters in this request are not valid.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The specified Resolver rule policy is invalid.</p>
    InvalidPolicyDocument(crate::error::InvalidPolicyDocument),
    /// <p>The request is invalid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The specified tag is invalid.</p>
    InvalidTagException(crate::error::InvalidTagException),
    /// <p>The request caused one or more limits to be exceeded.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource that you tried to create already exists.</p>
    ResourceExistsException(crate::error::ResourceExistsException),
    /// <p>The resource that you tried to update or delete is currently in use.</p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// <p>The specified resource doesn't exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The specified resource isn't available.</p>
    ResourceUnavailableException(crate::error::ResourceUnavailableException),
    /// <p>The request was throttled. Try again in a few minutes.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The specified resource doesn't exist.</p>
    UnknownResourceException(crate::error::UnknownResourceException),
    /// <p></p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServiceErrorException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPolicyDocument(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnknownResourceException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateFirewallRuleGroupError> for Error {
    fn from(err: crate::error::AssociateFirewallRuleGroupError) -> Self {
        match err {
            crate::error::AssociateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateFirewallRuleGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::AssociateResolverEndpointIpAddressError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateResolverEndpointIpAddressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateResolverEndpointIpAddressError> for Error {
    fn from(err: crate::error::AssociateResolverEndpointIpAddressError) -> Self {
        match err {
            crate::error::AssociateResolverEndpointIpAddressError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::ResourceExistsException(inner) => Error::ResourceExistsException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::AssociateResolverEndpointIpAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AssociateResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateResolverQueryLogConfigError> for Error {
    fn from(err: crate::error::AssociateResolverQueryLogConfigError) -> Self {
        match err {
            crate::error::AssociateResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateResolverQueryLogConfigError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::AssociateResolverQueryLogConfigError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::AssociateResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateResolverQueryLogConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateResolverQueryLogConfigError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::AssociateResolverQueryLogConfigError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateResolverQueryLogConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateResolverRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateResolverRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateResolverRuleError> for Error {
    fn from(err: crate::error::AssociateResolverRuleError) -> Self {
        match err {
            crate::error::AssociateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::AssociateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateResolverRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateResolverRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateResolverRuleError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::AssociateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::AssociateResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFirewallDomainListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFirewallDomainListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFirewallDomainListError> for Error {
    fn from(err: crate::error::CreateFirewallDomainListError) -> Self {
        match err {
            crate::error::CreateFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateFirewallDomainListError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFirewallDomainListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFirewallDomainListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFirewallDomainListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFirewallRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFirewallRuleError> for Error {
    fn from(err: crate::error::CreateFirewallRuleError) -> Self {
        match err {
            crate::error::CreateFirewallRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateFirewallRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFirewallRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFirewallRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFirewallRuleGroupError> for Error {
    fn from(err: crate::error::CreateFirewallRuleGroupError) -> Self {
        match err {
            crate::error::CreateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateFirewallRuleGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResolverEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResolverEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResolverEndpointError> for Error {
    fn from(err: crate::error::CreateResolverEndpointError) -> Self {
        match err {
            crate::error::CreateResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateResolverEndpointError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResolverEndpointError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResolverEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResolverQueryLogConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResolverQueryLogConfigError> for Error {
    fn from(err: crate::error::CreateResolverQueryLogConfigError) -> Self {
        match err {
            crate::error::CreateResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::CreateResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateResolverQueryLogConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResolverRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResolverRuleError> for Error {
    fn from(err: crate::error::CreateResolverRuleError) -> Self {
        match err {
            crate::error::CreateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::CreateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateResolverRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateResolverRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResolverRuleError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::error::CreateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::CreateResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFirewallDomainListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFirewallDomainListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFirewallDomainListError> for Error {
    fn from(err: crate::error::DeleteFirewallDomainListError) -> Self {
        match err {
            crate::error::DeleteFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFirewallDomainListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteFirewallDomainListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFirewallDomainListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFirewallDomainListError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFirewallRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFirewallRuleError> for Error {
    fn from(err: crate::error::DeleteFirewallRuleError) -> Self {
        match err {
            crate::error::DeleteFirewallRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFirewallRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFirewallRuleGroupError> for Error {
    fn from(err: crate::error::DeleteFirewallRuleGroupError) -> Self {
        match err {
            crate::error::DeleteFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResolverEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResolverEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResolverEndpointError> for Error {
    fn from(err: crate::error::DeleteResolverEndpointError) -> Self {
        match err {
            crate::error::DeleteResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResolverEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResolverQueryLogConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResolverQueryLogConfigError> for Error {
    fn from(err: crate::error::DeleteResolverQueryLogConfigError) -> Self {
        match err {
            crate::error::DeleteResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteResolverQueryLogConfigError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DeleteResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResolverQueryLogConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResolverRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResolverRuleError> for Error {
    fn from(err: crate::error::DeleteResolverRuleError) -> Self {
        match err {
            crate::error::DeleteResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DeleteResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteResolverRuleError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFirewallRuleGroupError> for Error {
    fn from(err: crate::error::DisassociateFirewallRuleGroupError) -> Self {
        match err {
            crate::error::DisassociateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateFirewallRuleGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateFirewallRuleGroupError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::DisassociateFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateFirewallRuleGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateResolverEndpointIpAddressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateResolverEndpointIpAddressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateResolverEndpointIpAddressError> for Error {
    fn from(err: crate::error::DisassociateResolverEndpointIpAddressError) -> Self {
        match err {
            crate::error::DisassociateResolverEndpointIpAddressError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::ResourceExistsException(inner) => Error::ResourceExistsException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DisassociateResolverEndpointIpAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DisassociateResolverQueryLogConfigError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateResolverQueryLogConfigError> for Error {
    fn from(err: crate::error::DisassociateResolverQueryLogConfigError) -> Self {
        match err {
            crate::error::DisassociateResolverQueryLogConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DisassociateResolverQueryLogConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateResolverRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateResolverRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateResolverRuleError> for Error {
    fn from(err: crate::error::DisassociateResolverRuleError) -> Self {
        match err {
            crate::error::DisassociateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::DisassociateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DisassociateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateResolverRuleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFirewallConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFirewallConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFirewallConfigError> for Error {
    fn from(err: crate::error::GetFirewallConfigError) -> Self {
        match err {
            crate::error::GetFirewallConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFirewallConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetFirewallConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFirewallConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFirewallConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFirewallConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFirewallDomainListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFirewallDomainListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFirewallDomainListError> for Error {
    fn from(err: crate::error::GetFirewallDomainListError) -> Self {
        match err {
            crate::error::GetFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetFirewallDomainListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFirewallDomainListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFirewallDomainListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFirewallRuleGroupError> for Error {
    fn from(err: crate::error::GetFirewallRuleGroupError) -> Self {
        match err {
            crate::error::GetFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetFirewallRuleGroupAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetFirewallRuleGroupAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFirewallRuleGroupAssociationError> for Error {
    fn from(err: crate::error::GetFirewallRuleGroupAssociationError) -> Self {
        match err {
            crate::error::GetFirewallRuleGroupAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFirewallRuleGroupAssociationError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::GetFirewallRuleGroupAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetFirewallRuleGroupAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFirewallRuleGroupAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFirewallRuleGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFirewallRuleGroupPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFirewallRuleGroupPolicyError> for Error {
    fn from(err: crate::error::GetFirewallRuleGroupPolicyError) -> Self {
        match err {
            crate::error::GetFirewallRuleGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFirewallRuleGroupPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetFirewallRuleGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFirewallRuleGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFirewallRuleGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFirewallRuleGroupPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverConfigError> for Error {
    fn from(err: crate::error::GetResolverConfigError) -> Self {
        match err {
            crate::error::GetResolverConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResolverConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverDnssecConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverDnssecConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverDnssecConfigError> for Error {
    fn from(err: crate::error::GetResolverDnssecConfigError) -> Self {
        match err {
            crate::error::GetResolverDnssecConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResolverDnssecConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverDnssecConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverDnssecConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetResolverDnssecConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverDnssecConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverDnssecConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverEndpointError> for Error {
    fn from(err: crate::error::GetResolverEndpointError) -> Self {
        match err {
            crate::error::GetResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverQueryLogConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverQueryLogConfigError> for Error {
    fn from(err: crate::error::GetResolverQueryLogConfigError) -> Self {
        match err {
            crate::error::GetResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverQueryLogConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetResolverQueryLogConfigAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetResolverQueryLogConfigAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverQueryLogConfigAssociationError> for Error {
    fn from(err: crate::error::GetResolverQueryLogConfigAssociationError) -> Self {
        match err {
            crate::error::GetResolverQueryLogConfigAssociationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetResolverQueryLogConfigAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetResolverQueryLogConfigPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetResolverQueryLogConfigPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverQueryLogConfigPolicyError> for Error {
    fn from(err: crate::error::GetResolverQueryLogConfigPolicyError) -> Self {
        match err {
            crate::error::GetResolverQueryLogConfigPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResolverQueryLogConfigPolicyError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::GetResolverQueryLogConfigPolicyError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::GetResolverQueryLogConfigPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetResolverQueryLogConfigPolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::error::GetResolverQueryLogConfigPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetResolverRuleError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverRuleError> for Error {
    fn from(err: crate::error::GetResolverRuleError) -> Self {
        match err {
            crate::error::GetResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverRuleAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverRuleAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverRuleAssociationError> for Error {
    fn from(err: crate::error::GetResolverRuleAssociationError) -> Self {
        match err {
            crate::error::GetResolverRuleAssociationError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverRuleAssociationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverRuleAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResolverRuleAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResolverRuleAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResolverRulePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResolverRulePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResolverRulePolicyError> for Error {
    fn from(err: crate::error::GetResolverRulePolicyError) -> Self {
        match err {
            crate::error::GetResolverRulePolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::GetResolverRulePolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetResolverRulePolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::error::GetResolverRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportFirewallDomainsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportFirewallDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportFirewallDomainsError> for Error {
    fn from(err: crate::error::ImportFirewallDomainsError) -> Self {
        match err {
            crate::error::ImportFirewallDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ImportFirewallDomainsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ImportFirewallDomainsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ImportFirewallDomainsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ImportFirewallDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ImportFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFirewallConfigsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFirewallConfigsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallConfigsError> for Error {
    fn from(err: crate::error::ListFirewallConfigsError) -> Self {
        match err {
            crate::error::ListFirewallConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListFirewallConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallConfigsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFirewallDomainListsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFirewallDomainListsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallDomainListsError> for Error {
    fn from(err: crate::error::ListFirewallDomainListsError) -> Self {
        match err {
            crate::error::ListFirewallDomainListsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallDomainListsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListFirewallDomainListsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallDomainListsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallDomainListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFirewallDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFirewallDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallDomainsError> for Error {
    fn from(err: crate::error::ListFirewallDomainsError) -> Self {
        match err {
            crate::error::ListFirewallDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFirewallDomainsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListFirewallRuleGroupAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListFirewallRuleGroupAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallRuleGroupAssociationsError> for Error {
    fn from(err: crate::error::ListFirewallRuleGroupAssociationsError) -> Self {
        match err {
            crate::error::ListFirewallRuleGroupAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallRuleGroupAssociationsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListFirewallRuleGroupAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallRuleGroupAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallRuleGroupAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFirewallRuleGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFirewallRuleGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallRuleGroupsError> for Error {
    fn from(err: crate::error::ListFirewallRuleGroupsError) -> Self {
        match err {
            crate::error::ListFirewallRuleGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallRuleGroupsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListFirewallRuleGroupsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallRuleGroupsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallRuleGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFirewallRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFirewallRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFirewallRulesError> for Error {
    fn from(err: crate::error::ListFirewallRulesError) -> Self {
        match err {
            crate::error::ListFirewallRulesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFirewallRulesError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListFirewallRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFirewallRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFirewallRulesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFirewallRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverConfigsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverConfigsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverConfigsError> for Error {
    fn from(err: crate::error::ListResolverConfigsError) -> Self {
        match err {
            crate::error::ListResolverConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResolverConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListResolverConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverDnssecConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverDnssecConfigsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverDnssecConfigsError> for Error {
    fn from(err: crate::error::ListResolverDnssecConfigsError) -> Self {
        match err {
            crate::error::ListResolverDnssecConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverDnssecConfigsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListResolverEndpointIpAddressesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListResolverEndpointIpAddressesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverEndpointIpAddressesError> for Error {
    fn from(err: crate::error::ListResolverEndpointIpAddressesError) -> Self {
        match err {
            crate::error::ListResolverEndpointIpAddressesError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListResolverEndpointIpAddressesError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::ListResolverEndpointIpAddressesError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::ListResolverEndpointIpAddressesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListResolverEndpointIpAddressesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverEndpointIpAddressesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverEndpointsError> for Error {
    fn from(err: crate::error::ListResolverEndpointsError) -> Self {
        match err {
            crate::error::ListResolverEndpointsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListResolverEndpointsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverEndpointsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverEndpointsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverEndpointsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListResolverQueryLogConfigAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListResolverQueryLogConfigAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverQueryLogConfigAssociationsError> for Error {
    fn from(err: crate::error::ListResolverQueryLogConfigAssociationsError) -> Self {
        match err {
            crate::error::ListResolverQueryLogConfigAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListResolverQueryLogConfigAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverQueryLogConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverQueryLogConfigsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverQueryLogConfigsError> for Error {
    fn from(err: crate::error::ListResolverQueryLogConfigsError) -> Self {
        match err {
            crate::error::ListResolverQueryLogConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResolverQueryLogConfigsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListResolverQueryLogConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverQueryLogConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverQueryLogConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverQueryLogConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverQueryLogConfigsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverRuleAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverRuleAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverRuleAssociationsError> for Error {
    fn from(err: crate::error::ListResolverRuleAssociationsError) -> Self {
        match err {
            crate::error::ListResolverRuleAssociationsError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::ListResolverRuleAssociationsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverRuleAssociationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverRuleAssociationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverRuleAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverRuleAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResolverRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResolverRulesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResolverRulesError> for Error {
    fn from(err: crate::error::ListResolverRulesError) -> Self {
        match err {
            crate::error::ListResolverRulesError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListResolverRulesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListResolverRulesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResolverRulesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListResolverRulesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResolverRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutFirewallRuleGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutFirewallRuleGroupPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutFirewallRuleGroupPolicyError> for Error {
    fn from(err: crate::error::PutFirewallRuleGroupPolicyError) -> Self {
        match err {
            crate::error::PutFirewallRuleGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutFirewallRuleGroupPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::PutFirewallRuleGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutFirewallRuleGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutFirewallRuleGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutFirewallRuleGroupPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutResolverQueryLogConfigPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutResolverQueryLogConfigPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResolverQueryLogConfigPolicyError> for Error {
    fn from(err: crate::error::PutResolverQueryLogConfigPolicyError) -> Self {
        match err {
            crate::error::PutResolverQueryLogConfigPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutResolverQueryLogConfigPolicyError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::error::PutResolverQueryLogConfigPolicyError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::PutResolverQueryLogConfigPolicyError::InvalidPolicyDocument(inner) => {
                Error::InvalidPolicyDocument(inner)
            }
            crate::error::PutResolverQueryLogConfigPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::PutResolverQueryLogConfigPolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::error::PutResolverQueryLogConfigPolicyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResolverRulePolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutResolverRulePolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResolverRulePolicyError> for Error {
    fn from(err: crate::error::PutResolverRulePolicyError) -> Self {
        match err {
            crate::error::PutResolverRulePolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::PutResolverRulePolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutResolverRulePolicyError::InvalidPolicyDocument(inner) => {
                Error::InvalidPolicyDocument(inner)
            }
            crate::error::PutResolverRulePolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::error::PutResolverRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TagResourceError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFirewallConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFirewallConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFirewallConfigError> for Error {
    fn from(err: crate::error::UpdateFirewallConfigError) -> Self {
        match err {
            crate::error::UpdateFirewallConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFirewallConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateFirewallConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFirewallConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFirewallConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFirewallConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFirewallDomainsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFirewallDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFirewallDomainsError> for Error {
    fn from(err: crate::error::UpdateFirewallDomainsError) -> Self {
        match err {
            crate::error::UpdateFirewallDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFirewallDomainsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateFirewallDomainsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFirewallDomainsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFirewallDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFirewallRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFirewallRuleError> for Error {
    fn from(err: crate::error::UpdateFirewallRuleError) -> Self {
        match err {
            crate::error::UpdateFirewallRuleError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFirewallRuleError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFirewallRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFirewallRuleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::UpdateFirewallRuleGroupAssociationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateFirewallRuleGroupAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFirewallRuleGroupAssociationError> for Error {
    fn from(err: crate::error::UpdateFirewallRuleGroupAssociationError) -> Self {
        match err {
            crate::error::UpdateFirewallRuleGroupAssociationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateFirewallRuleGroupAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResolverConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResolverConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResolverConfigError> for Error {
    fn from(err: crate::error::UpdateResolverConfigError) -> Self {
        match err {
            crate::error::UpdateResolverConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateResolverConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateResolverConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateResolverConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateResolverConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateResolverConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResolverConfigError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateResolverConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResolverConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResolverDnssecConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResolverDnssecConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResolverDnssecConfigError> for Error {
    fn from(err: crate::error::UpdateResolverDnssecConfigError) -> Self {
        match err {
            crate::error::UpdateResolverDnssecConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResolverDnssecConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResolverEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResolverEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResolverEndpointError> for Error {
    fn from(err: crate::error::UpdateResolverEndpointError) -> Self {
        match err {
            crate::error::UpdateResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResolverEndpointError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResolverRuleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResolverRuleError> for Error {
    fn from(err: crate::error::UpdateResolverRuleError) -> Self {
        match err {
            crate::error::UpdateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::error::UpdateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateResolverRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateResolverRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::error::UpdateResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServiceErrorException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidPolicyDocument(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::InvalidTagException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceExistsException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnknownResourceException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
