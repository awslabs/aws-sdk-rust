// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The current account doesn't have the IAM permissions required to perform the specified Resolver operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The requested state transition isn't valid. For example, you can't delete a firewall domain list if it is in the process of being deleted, or you can't import domains into a domain list that is in the process of being deleted.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>We encountered an unknown error. Try again in a few minutes.</p>
    InternalServiceErrorException(crate::types::error::InternalServiceErrorException),
    /// <p>The value that you specified for <code>NextToken</code> in a <code>List</code> request isn't valid.</p>
    InvalidNextTokenException(crate::types::error::InvalidNextTokenException),
    /// <p>One or more parameters in this request are not valid.</p>
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// <p>The specified Resolver rule policy is invalid.</p>
    InvalidPolicyDocument(crate::types::error::InvalidPolicyDocument),
    /// <p>The request is invalid.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The specified tag is invalid.</p>
    InvalidTagException(crate::types::error::InvalidTagException),
    /// <p>The request caused one or more limits to be exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The resource that you tried to create already exists.</p>
    ResourceExistsException(crate::types::error::ResourceExistsException),
    /// <p>The resource that you tried to update or delete is currently in use.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The specified resource doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The specified resource isn't available.</p>
    ResourceUnavailableException(crate::types::error::ResourceUnavailableException),
    /// <p>Fulfilling the request would cause one or more quotas to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was throttled. Try again in a few minutes.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The specified resource doesn't exist.</p>
    UnknownResourceException(crate::types::error::UnknownResourceException),
    /// <p>You have provided an invalid command. Supported values are <code>ADD</code>, <code>REMOVE</code>, or <code>REPLACE</code> a domain.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServiceErrorException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPolicyDocument(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceUnavailableException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnknownResourceException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError> for Error {
    fn from(err: crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError) -> Self {
        match err {
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_firewall_rule_group::AssociateFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError> for Error {
    fn from(err: crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError) -> Self {
        match err {
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_resolver_endpoint_ip_address::AssociateResolverEndpointIpAddressError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError> for Error {
    fn from(err: crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError) -> Self {
        match err {
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_resolver_query_log_config::AssociateResolverQueryLogConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_resolver_rule::AssociateResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_resolver_rule::AssociateResolverRuleError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_resolver_rule::AssociateResolverRuleError> for Error {
    fn from(err: crate::operation::associate_resolver_rule::AssociateResolverRuleError) -> Self {
        match err {
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_resolver_rule::AssociateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_domain_list::CreateFirewallDomainListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_domain_list::CreateFirewallDomainListError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_firewall_domain_list::CreateFirewallDomainListError> for Error {
    fn from(err: crate::operation::create_firewall_domain_list::CreateFirewallDomainListError) -> Self {
        match err {
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_firewall_domain_list::CreateFirewallDomainListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_rule::CreateFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_rule::CreateFirewallRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_firewall_rule::CreateFirewallRuleError> for Error {
    fn from(err: crate::operation::create_firewall_rule::CreateFirewallRuleError) -> Self {
        match err {
            crate::operation::create_firewall_rule::CreateFirewallRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_firewall_rule::CreateFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_firewall_rule::CreateFirewallRuleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_firewall_rule::CreateFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_firewall_rule::CreateFirewallRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_firewall_rule::CreateFirewallRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_firewall_rule::CreateFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError> for Error {
    fn from(err: crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError) -> Self {
        match err {
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_firewall_rule_group::CreateFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_outpost_resolver::CreateOutpostResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_outpost_resolver::CreateOutpostResolverError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_outpost_resolver::CreateOutpostResolverError> for Error {
    fn from(err: crate::operation::create_outpost_resolver::CreateOutpostResolverError) -> Self {
        match err {
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_outpost_resolver::CreateOutpostResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver_endpoint::CreateResolverEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver_endpoint::CreateResolverEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resolver_endpoint::CreateResolverEndpointError> for Error {
    fn from(err: crate::operation::create_resolver_endpoint::CreateResolverEndpointError) -> Self {
        match err {
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_resolver_endpoint::CreateResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError> for Error {
    fn from(err: crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError) -> Self {
        match err {
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::ResourceExistsException(inner) => {
                Error::ResourceExistsException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_resolver_query_log_config::CreateResolverQueryLogConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver_rule::CreateResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resolver_rule::CreateResolverRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resolver_rule::CreateResolverRuleError> for Error {
    fn from(err: crate::operation::create_resolver_rule::CreateResolverRuleError) -> Self {
        match err {
            crate::operation::create_resolver_rule::CreateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::create_resolver_rule::CreateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::create_resolver_rule::CreateResolverRuleError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_resolver_rule::CreateResolverRuleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_resolver_rule::CreateResolverRuleError::ResourceExistsException(inner) => Error::ResourceExistsException(inner),
            crate::operation::create_resolver_rule::CreateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_resolver_rule::CreateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::operation::create_resolver_rule::CreateResolverRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_resolver_rule::CreateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError> for Error {
    fn from(err: crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError) -> Self {
        match err {
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_firewall_domain_list::DeleteFirewallDomainListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_rule::DeleteFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_rule::DeleteFirewallRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_firewall_rule::DeleteFirewallRuleError> for Error {
    fn from(err: crate::operation::delete_firewall_rule::DeleteFirewallRuleError) -> Self {
        match err {
            crate::operation::delete_firewall_rule::DeleteFirewallRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_firewall_rule::DeleteFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_firewall_rule::DeleteFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_firewall_rule::DeleteFirewallRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_firewall_rule::DeleteFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError> for Error {
    fn from(err: crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError) -> Self {
        match err {
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_firewall_rule_group::DeleteFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outpost_resolver::DeleteOutpostResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_outpost_resolver::DeleteOutpostResolverError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_outpost_resolver::DeleteOutpostResolverError> for Error {
    fn from(err: crate::operation::delete_outpost_resolver::DeleteOutpostResolverError) -> Self {
        match err {
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_outpost_resolver::DeleteOutpostResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError> for Error {
    fn from(err: crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError) -> Self {
        match err {
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resolver_endpoint::DeleteResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError> for Error {
    fn from(err: crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError) -> Self {
        match err {
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_resolver_query_log_config::DeleteResolverQueryLogConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver_rule::DeleteResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resolver_rule::DeleteResolverRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resolver_rule::DeleteResolverRuleError> for Error {
    fn from(err: crate::operation::delete_resolver_rule::DeleteResolverRuleError) -> Self {
        match err {
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_resolver_rule::DeleteResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError> for Error {
    fn from(err: crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError) -> Self {
        match err {
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_firewall_rule_group::DisassociateFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError> for Error {
    fn from(err: crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError) -> Self {
        match err {
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::ResourceExistsException(inner) => Error::ResourceExistsException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_resolver_endpoint_ip_address::DisassociateResolverEndpointIpAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError> for Error {
    fn from(err: crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError) -> Self {
        match err {
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_resolver_query_log_config::DisassociateResolverQueryLogConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError> for Error {
    fn from(err: crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError) -> Self {
        match err {
            crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_resolver_rule::DisassociateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_config::GetFirewallConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_config::GetFirewallConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_firewall_config::GetFirewallConfigError> for Error {
    fn from(err: crate::operation::get_firewall_config::GetFirewallConfigError) -> Self {
        match err {
            crate::operation::get_firewall_config::GetFirewallConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_firewall_config::GetFirewallConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_firewall_config::GetFirewallConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_firewall_config::GetFirewallConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_firewall_config::GetFirewallConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_firewall_config::GetFirewallConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_domain_list::GetFirewallDomainListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_domain_list::GetFirewallDomainListError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_firewall_domain_list::GetFirewallDomainListError> for Error {
    fn from(err: crate::operation::get_firewall_domain_list::GetFirewallDomainListError) -> Self {
        match err {
            crate::operation::get_firewall_domain_list::GetFirewallDomainListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_firewall_domain_list::GetFirewallDomainListError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_firewall_domain_list::GetFirewallDomainListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_firewall_domain_list::GetFirewallDomainListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_firewall_domain_list::GetFirewallDomainListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError> for Error {
    fn from(err: crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError) -> Self {
        match err {
            crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_firewall_rule_group::GetFirewallRuleGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError> for Error {
    fn from(err: crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError) -> Self {
        match err {
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_firewall_rule_group_association::GetFirewallRuleGroupAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError> for Error {
    fn from(err: crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError) -> Self {
        match err {
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_firewall_rule_group_policy::GetFirewallRuleGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outpost_resolver::GetOutpostResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_outpost_resolver::GetOutpostResolverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_outpost_resolver::GetOutpostResolverError> for Error {
    fn from(err: crate::operation::get_outpost_resolver::GetOutpostResolverError) -> Self {
        match err {
            crate::operation::get_outpost_resolver::GetOutpostResolverError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_outpost_resolver::GetOutpostResolverError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_outpost_resolver::GetOutpostResolverError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_outpost_resolver::GetOutpostResolverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_outpost_resolver::GetOutpostResolverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_outpost_resolver::GetOutpostResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_config::GetResolverConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_config::GetResolverConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_config::GetResolverConfigError> for Error {
    fn from(err: crate::operation::get_resolver_config::GetResolverConfigError) -> Self {
        match err {
            crate::operation::get_resolver_config::GetResolverConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_resolver_config::GetResolverConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_config::GetResolverConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_config::GetResolverConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resolver_config::GetResolverConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resolver_config::GetResolverConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_resolver_config::GetResolverConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError> for Error {
    fn from(err: crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError) -> Self {
        match err {
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_resolver_dnssec_config::GetResolverDnssecConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_endpoint::GetResolverEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_endpoint::GetResolverEndpointError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_endpoint::GetResolverEndpointError> for Error {
    fn from(err: crate::operation::get_resolver_endpoint::GetResolverEndpointError) -> Self {
        match err {
            crate::operation::get_resolver_endpoint::GetResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_endpoint::GetResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_endpoint::GetResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resolver_endpoint::GetResolverEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resolver_endpoint::GetResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError> for Error {
    fn from(err: crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError) -> Self {
        match err {
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_resolver_query_log_config::GetResolverQueryLogConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError> for Error {
    fn from(err: crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError) -> Self {
        match err {
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_resolver_query_log_config_association::GetResolverQueryLogConfigAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError> for Error {
    fn from(err: crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError) -> Self {
        match err {
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::operation::get_resolver_query_log_config_policy::GetResolverQueryLogConfigPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule::GetResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule::GetResolverRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_rule::GetResolverRuleError> for Error {
    fn from(err: crate::operation::get_resolver_rule::GetResolverRuleError) -> Self {
        match err {
            crate::operation::get_resolver_rule::GetResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_rule::GetResolverRuleError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_resolver_rule::GetResolverRuleError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_resolver_rule::GetResolverRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_resolver_rule::GetResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError> for Error {
    fn from(err: crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError) -> Self {
        match err {
            crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_resolver_rule_association::GetResolverRuleAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError> for Error {
    fn from(err: crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError) -> Self {
        match err {
            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::operation::get_resolver_rule_policy::GetResolverRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_firewall_domains::ImportFirewallDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_firewall_domains::ImportFirewallDomainsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_firewall_domains::ImportFirewallDomainsError> for Error {
    fn from(err: crate::operation::import_firewall_domains::ImportFirewallDomainsError) -> Self {
        match err {
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_firewall_domains::ImportFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_configs::ListFirewallConfigsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_configs::ListFirewallConfigsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_configs::ListFirewallConfigsError> for Error {
    fn from(err: crate::operation::list_firewall_configs::ListFirewallConfigsError) -> Self {
        match err {
            crate::operation::list_firewall_configs::ListFirewallConfigsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_firewall_configs::ListFirewallConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_configs::ListFirewallConfigsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_firewall_configs::ListFirewallConfigsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_firewall_configs::ListFirewallConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError> for Error {
    fn from(err: crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError) -> Self {
        match err {
            crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_firewall_domain_lists::ListFirewallDomainListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_domains::ListFirewallDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_domains::ListFirewallDomainsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_domains::ListFirewallDomainsError> for Error {
    fn from(err: crate::operation::list_firewall_domains::ListFirewallDomainsError) -> Self {
        match err {
            crate::operation::list_firewall_domains::ListFirewallDomainsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_firewall_domains::ListFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_domains::ListFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_firewall_domains::ListFirewallDomainsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_firewall_domains::ListFirewallDomainsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_firewall_domains::ListFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError> for Error {
    fn from(err: crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError) -> Self {
        match err {
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_firewall_rule_group_associations::ListFirewallRuleGroupAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError> for Error {
    fn from(err: crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError) -> Self {
        match err {
            crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_firewall_rule_groups::ListFirewallRuleGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_rules::ListFirewallRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_firewall_rules::ListFirewallRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_firewall_rules::ListFirewallRulesError> for Error {
    fn from(err: crate::operation::list_firewall_rules::ListFirewallRulesError) -> Self {
        match err {
            crate::operation::list_firewall_rules::ListFirewallRulesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_firewall_rules::ListFirewallRulesError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_firewall_rules::ListFirewallRulesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_firewall_rules::ListFirewallRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_firewall_rules::ListFirewallRulesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_firewall_rules::ListFirewallRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_outpost_resolvers::ListOutpostResolversError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_outpost_resolvers::ListOutpostResolversError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_outpost_resolvers::ListOutpostResolversError> for Error {
    fn from(err: crate::operation::list_outpost_resolvers::ListOutpostResolversError) -> Self {
        match err {
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_outpost_resolvers::ListOutpostResolversError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_configs::ListResolverConfigsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_configs::ListResolverConfigsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_configs::ListResolverConfigsError> for Error {
    fn from(err: crate::operation::list_resolver_configs::ListResolverConfigsError) -> Self {
        match err {
            crate::operation::list_resolver_configs::ListResolverConfigsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_resolver_configs::ListResolverConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_configs::ListResolverConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_configs::ListResolverConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_configs::ListResolverConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_resolver_configs::ListResolverConfigsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_resolver_configs::ListResolverConfigsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_resolver_configs::ListResolverConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError> for Error {
    fn from(err: crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError) -> Self {
        match err {
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_resolver_dnssec_configs::ListResolverDnssecConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError> for Error {
    fn from(err: crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError) -> Self {
        match err {
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_resolver_endpoint_ip_addresses::ListResolverEndpointIpAddressesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_endpoints::ListResolverEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_endpoints::ListResolverEndpointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_endpoints::ListResolverEndpointsError> for Error {
    fn from(err: crate::operation::list_resolver_endpoints::ListResolverEndpointsError) -> Self {
        match err {
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_resolver_endpoints::ListResolverEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError> for Error {
    fn from(err: crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError) -> Self {
        match err {
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_resolver_query_log_config_associations::ListResolverQueryLogConfigAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError> for Error {
    fn from(err: crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError) -> Self {
        match err {
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_resolver_query_log_configs::ListResolverQueryLogConfigsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError> for Error {
    fn from(err: crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError) -> Self {
        match err {
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_resolver_rule_associations::ListResolverRuleAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_rules::ListResolverRulesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resolver_rules::ListResolverRulesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resolver_rules::ListResolverRulesError> for Error {
    fn from(err: crate::operation::list_resolver_rules::ListResolverRulesError) -> Self {
        match err {
            crate::operation::list_resolver_rules::ListResolverRulesError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_resolver_rules::ListResolverRulesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_resolver_rules::ListResolverRulesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_resolver_rules::ListResolverRulesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_resolver_rules::ListResolverRulesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_resolver_rules::ListResolverRulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError> for Error {
    fn from(err: crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError) -> Self {
        match err {
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_firewall_rule_group_policy::PutFirewallRuleGroupPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError> for Error {
    fn from(err: crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError) -> Self {
        match err {
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::InvalidPolicyDocument(inner) => {
                Error::InvalidPolicyDocument(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::operation::put_resolver_query_log_config_policy::PutResolverQueryLogConfigPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError> for Error {
    fn from(err: crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError) -> Self {
        match err {
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::InvalidPolicyDocument(inner) => {
                Error::InvalidPolicyDocument(inner)
            }
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::UnknownResourceException(inner) => {
                Error::UnknownResourceException(inner)
            }
            crate::operation::put_resolver_rule_policy::PutResolverRulePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidTagException(inner) => Error::InvalidTagException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServiceErrorException(inner) => Error::InternalServiceErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_config::UpdateFirewallConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_config::UpdateFirewallConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_firewall_config::UpdateFirewallConfigError> for Error {
    fn from(err: crate::operation::update_firewall_config::UpdateFirewallConfigError) -> Self {
        match err {
            crate::operation::update_firewall_config::UpdateFirewallConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_firewall_config::UpdateFirewallConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_firewall_config::UpdateFirewallConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_firewall_config::UpdateFirewallConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_firewall_config::UpdateFirewallConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_firewall_config::UpdateFirewallConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_domains::UpdateFirewallDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_domains::UpdateFirewallDomainsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_firewall_domains::UpdateFirewallDomainsError> for Error {
    fn from(err: crate::operation::update_firewall_domains::UpdateFirewallDomainsError) -> Self {
        match err {
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_firewall_domains::UpdateFirewallDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_rule::UpdateFirewallRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_firewall_rule::UpdateFirewallRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_firewall_rule::UpdateFirewallRuleError> for Error {
    fn from(err: crate::operation::update_firewall_rule::UpdateFirewallRuleError) -> Self {
        match err {
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_firewall_rule::UpdateFirewallRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError> for Error {
    fn from(err: crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError) -> Self {
        match err {
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::InternalServiceErrorException(
                inner,
            ) => Error::InternalServiceErrorException(inner),
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_firewall_rule_group_association::UpdateFirewallRuleGroupAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_outpost_resolver::UpdateOutpostResolverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_outpost_resolver::UpdateOutpostResolverError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_outpost_resolver::UpdateOutpostResolverError> for Error {
    fn from(err: crate::operation::update_outpost_resolver::UpdateOutpostResolverError) -> Self {
        match err {
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_outpost_resolver::UpdateOutpostResolverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_config::UpdateResolverConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_config::UpdateResolverConfigError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resolver_config::UpdateResolverConfigError> for Error {
    fn from(err: crate::operation::update_resolver_config::UpdateResolverConfigError) -> Self {
        match err {
            crate::operation::update_resolver_config::UpdateResolverConfigError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_resolver_config::UpdateResolverConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::operation::update_resolver_config::UpdateResolverConfigError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_resolver_config::UpdateResolverConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_resolver_config::UpdateResolverConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError> for Error {
    fn from(err: crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError) -> Self {
        match err {
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_resolver_dnssec_config::UpdateResolverDnssecConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_endpoint::UpdateResolverEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_endpoint::UpdateResolverEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resolver_endpoint::UpdateResolverEndpointError> for Error {
    fn from(err: crate::operation::update_resolver_endpoint::UpdateResolverEndpointError) -> Self {
        match err {
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_resolver_endpoint::UpdateResolverEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_rule::UpdateResolverRuleError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resolver_rule::UpdateResolverRuleError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resolver_rule::UpdateResolverRuleError> for Error {
    fn from(err: crate::operation::update_resolver_rule::UpdateResolverRuleError) -> Self {
        match err {
            crate::operation::update_resolver_rule::UpdateResolverRuleError::InternalServiceErrorException(inner) => {
                Error::InternalServiceErrorException(inner)
            }
            crate::operation::update_resolver_rule::UpdateResolverRuleError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::operation::update_resolver_rule::UpdateResolverRuleError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_resolver_rule::UpdateResolverRuleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_resolver_rule::UpdateResolverRuleError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_resolver_rule::UpdateResolverRuleError::ResourceUnavailableException(inner) => {
                Error::ResourceUnavailableException(inner)
            }
            crate::operation::update_resolver_rule::UpdateResolverRuleError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_resolver_rule::UpdateResolverRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServiceErrorException(inner) => inner.source(),
            Error::InvalidNextTokenException(inner) => inner.source(),
            Error::InvalidParameterException(inner) => inner.source(),
            Error::InvalidPolicyDocument(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::InvalidTagException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceExistsException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ResourceUnavailableException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UnknownResourceException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServiceErrorException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidPolicyDocument(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::InvalidTagException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceExistsException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceUnavailableException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnknownResourceException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
