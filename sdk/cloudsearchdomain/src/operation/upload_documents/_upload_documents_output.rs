// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the response to an <code>UploadDocuments</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UploadDocumentsOutput {
    /// <p>The status of an <code>UploadDocumentsRequest</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The number of documents that were added to the search domain.</p>
    #[doc(hidden)]
    pub adds: i64,
    /// <p>The number of documents that were deleted from the search domain.</p>
    #[doc(hidden)]
    pub deletes: i64,
    /// <p>Any warnings returned by the document service about the documents being uploaded.</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::vec::Vec<crate::types::DocumentServiceWarning>>,
    _request_id: Option<String>,
}
impl UploadDocumentsOutput {
    /// <p>The status of an <code>UploadDocumentsRequest</code>.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The number of documents that were added to the search domain.</p>
    pub fn adds(&self) -> i64 {
        self.adds
    }
    /// <p>The number of documents that were deleted from the search domain.</p>
    pub fn deletes(&self) -> i64 {
        self.deletes
    }
    /// <p>Any warnings returned by the document service about the documents being uploaded.</p>
    pub fn warnings(&self) -> std::option::Option<&[crate::types::DocumentServiceWarning]> {
        self.warnings.as_deref()
    }
}
impl aws_http::request_id::RequestId for UploadDocumentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UploadDocumentsOutput {
    /// Creates a new builder-style object to manufacture [`UploadDocumentsOutput`](crate::operation::upload_documents::UploadDocumentsOutput).
    pub fn builder() -> crate::operation::upload_documents::builders::UploadDocumentsOutputBuilder {
        crate::operation::upload_documents::builders::UploadDocumentsOutputBuilder::default()
    }
}

/// A builder for [`UploadDocumentsOutput`](crate::operation::upload_documents::UploadDocumentsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UploadDocumentsOutputBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) adds: std::option::Option<i64>,
    pub(crate) deletes: std::option::Option<i64>,
    pub(crate) warnings: std::option::Option<std::vec::Vec<crate::types::DocumentServiceWarning>>,
    _request_id: Option<String>,
}
impl UploadDocumentsOutputBuilder {
    /// <p>The status of an <code>UploadDocumentsRequest</code>.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of an <code>UploadDocumentsRequest</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The number of documents that were added to the search domain.</p>
    pub fn adds(mut self, input: i64) -> Self {
        self.adds = Some(input);
        self
    }
    /// <p>The number of documents that were added to the search domain.</p>
    pub fn set_adds(mut self, input: std::option::Option<i64>) -> Self {
        self.adds = input;
        self
    }
    /// <p>The number of documents that were deleted from the search domain.</p>
    pub fn deletes(mut self, input: i64) -> Self {
        self.deletes = Some(input);
        self
    }
    /// <p>The number of documents that were deleted from the search domain.</p>
    pub fn set_deletes(mut self, input: std::option::Option<i64>) -> Self {
        self.deletes = input;
        self
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>Any warnings returned by the document service about the documents being uploaded.</p>
    pub fn warnings(mut self, input: crate::types::DocumentServiceWarning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = Some(v);
        self
    }
    /// <p>Any warnings returned by the document service about the documents being uploaded.</p>
    pub fn set_warnings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DocumentServiceWarning>>,
    ) -> Self {
        self.warnings = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UploadDocumentsOutput`](crate::operation::upload_documents::UploadDocumentsOutput).
    pub fn build(self) -> crate::operation::upload_documents::UploadDocumentsOutput {
        crate::operation::upload_documents::UploadDocumentsOutput {
            status: self.status,
            adds: self.adds.unwrap_or_default(),
            deletes: self.deletes.unwrap_or_default(),
            warnings: self.warnings,
            _request_id: self._request_id,
        }
    }
}
