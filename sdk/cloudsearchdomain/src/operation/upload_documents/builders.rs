// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::upload_documents::_upload_documents_output::UploadDocumentsOutputBuilder;

pub use crate::operation::upload_documents::_upload_documents_input::UploadDocumentsInputBuilder;

/// Fluent builder constructing a request to `UploadDocuments`.
///
/// <p>Posts a batch of documents to a search domain for indexing. A document batch is a collection of add and delete operations that represent the documents you want to add, update, or delete from your domain. Batches can be described in either JSON or XML. Each item that you want Amazon CloudSearch to return as a search result (such as a product) is represented as a document. Every document has a unique ID and one or more fields that contain the data that you want to search and return in results. Individual documents cannot contain more than 1 MB of data. The entire batch cannot exceed 5 MB. To get the best possible upload performance, group add and delete operations in batches that are close the 5 MB limit. Submitting a large volume of single-document batches can overload a domain's document service. </p>
/// <p>The endpoint for submitting <code>UploadDocuments</code> requests is domain-specific. To get the document endpoint for your domain, use the Amazon CloudSearch configuration service <code>DescribeDomains</code> action. A domain's endpoints are also displayed on the domain dashboard in the Amazon CloudSearch console. </p>
/// <p>For more information about formatting your data for Amazon CloudSearch, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/preparing-data.html">Preparing Your Data</a> in the <i>Amazon CloudSearch Developer Guide</i>. For more information about uploading data for indexing, see <a href="http://docs.aws.amazon.com/cloudsearch/latest/developerguide/uploading-data.html">Uploading Data</a> in the <i>Amazon CloudSearch Developer Guide</i>. </p>
#[derive(std::fmt::Debug)]
pub struct UploadDocumentsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::upload_documents::builders::UploadDocumentsInputBuilder,
}
impl UploadDocumentsFluentBuilder {
    /// Creates a new `UploadDocuments`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::upload_documents::UploadDocuments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::upload_documents::UploadDocumentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::upload_documents::UploadDocumentsOutput,
        aws_smithy_http::result::SdkError<crate::operation::upload_documents::UploadDocumentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A batch of documents formatted in JSON or HTML.</p>
    pub fn documents(mut self, input: aws_smithy_http::byte_stream::ByteStream) -> Self {
        self.inner = self.inner.documents(input);
        self
    }
    /// <p>A batch of documents formatted in JSON or HTML.</p>
    pub fn set_documents(
        mut self,
        input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
    ) -> Self {
        self.inner = self.inner.set_documents(input);
        self
    }
    /// <p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p>
    /// <ul>
    /// <li>application/json</li>
    /// <li>application/xml</li>
    /// </ul>
    pub fn content_type(mut self, input: crate::types::ContentType) -> Self {
        self.inner = self.inner.content_type(input);
        self
    }
    /// <p>The format of the batch you are uploading. Amazon CloudSearch supports two document batch formats:</p>
    /// <ul>
    /// <li>application/json</li>
    /// <li>application/xml</li>
    /// </ul>
    pub fn set_content_type(
        mut self,
        input: std::option::Option<crate::types::ContentType>,
    ) -> Self {
        self.inner = self.inner.set_content_type(input);
        self
    }
}
