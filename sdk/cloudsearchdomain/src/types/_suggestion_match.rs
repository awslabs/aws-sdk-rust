// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An autocomplete suggestion that matches the query string specified in a <code>SuggestRequest</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SuggestionMatch {
    /// <p>The string that matches the query string specified in the <code>SuggestRequest</code>. </p>
    #[doc(hidden)]
    pub suggestion: std::option::Option<std::string::String>,
    /// <p>The relevance score of a suggested match.</p>
    #[doc(hidden)]
    pub score: i64,
    /// <p>The document ID of the suggested document.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl SuggestionMatch {
    /// <p>The string that matches the query string specified in the <code>SuggestRequest</code>. </p>
    pub fn suggestion(&self) -> std::option::Option<&str> {
        self.suggestion.as_deref()
    }
    /// <p>The relevance score of a suggested match.</p>
    pub fn score(&self) -> i64 {
        self.score
    }
    /// <p>The document ID of the suggested document.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl SuggestionMatch {
    /// Creates a new builder-style object to manufacture [`SuggestionMatch`](crate::types::SuggestionMatch).
    pub fn builder() -> crate::types::builders::SuggestionMatchBuilder {
        crate::types::builders::SuggestionMatchBuilder::default()
    }
}

/// A builder for [`SuggestionMatch`](crate::types::SuggestionMatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SuggestionMatchBuilder {
    pub(crate) suggestion: std::option::Option<std::string::String>,
    pub(crate) score: std::option::Option<i64>,
    pub(crate) id: std::option::Option<std::string::String>,
}
impl SuggestionMatchBuilder {
    /// <p>The string that matches the query string specified in the <code>SuggestRequest</code>. </p>
    pub fn suggestion(mut self, input: impl Into<std::string::String>) -> Self {
        self.suggestion = Some(input.into());
        self
    }
    /// <p>The string that matches the query string specified in the <code>SuggestRequest</code>. </p>
    pub fn set_suggestion(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.suggestion = input;
        self
    }
    /// <p>The relevance score of a suggested match.</p>
    pub fn score(mut self, input: i64) -> Self {
        self.score = Some(input);
        self
    }
    /// <p>The relevance score of a suggested match.</p>
    pub fn set_score(mut self, input: std::option::Option<i64>) -> Self {
        self.score = input;
        self
    }
    /// <p>The document ID of the suggested document.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The document ID of the suggested document.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`SuggestionMatch`](crate::types::SuggestionMatch).
    pub fn build(self) -> crate::types::SuggestionMatch {
        crate::types::SuggestionMatch {
            suggestion: self.suggestion,
            score: self.score.unwrap_or_default(),
            id: self.id,
        }
    }
}
