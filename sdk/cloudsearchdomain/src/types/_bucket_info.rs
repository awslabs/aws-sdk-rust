// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for the calculated facet values and counts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketInfo {
    /// <p>A list of the calculated facet values and counts.</p>
    #[doc(hidden)]
    pub buckets: std::option::Option<std::vec::Vec<crate::types::Bucket>>,
}
impl BucketInfo {
    /// <p>A list of the calculated facet values and counts.</p>
    pub fn buckets(&self) -> std::option::Option<&[crate::types::Bucket]> {
        self.buckets.as_deref()
    }
}
impl BucketInfo {
    /// Creates a new builder-style object to manufacture [`BucketInfo`](crate::types::BucketInfo).
    pub fn builder() -> crate::types::builders::BucketInfoBuilder {
        crate::types::builders::BucketInfoBuilder::default()
    }
}

/// A builder for [`BucketInfo`](crate::types::BucketInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketInfoBuilder {
    pub(crate) buckets: std::option::Option<std::vec::Vec<crate::types::Bucket>>,
}
impl BucketInfoBuilder {
    /// Appends an item to `buckets`.
    ///
    /// To override the contents of this collection use [`set_buckets`](Self::set_buckets).
    ///
    /// <p>A list of the calculated facet values and counts.</p>
    pub fn buckets(mut self, input: crate::types::Bucket) -> Self {
        let mut v = self.buckets.unwrap_or_default();
        v.push(input);
        self.buckets = Some(v);
        self
    }
    /// <p>A list of the calculated facet values and counts.</p>
    pub fn set_buckets(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Bucket>>,
    ) -> Self {
        self.buckets = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketInfo`](crate::types::BucketInfo).
    pub fn build(self) -> crate::types::BucketInfo {
        crate::types::BucketInfo {
            buckets: self.buckets,
        }
    }
}
