// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_predictor::CreatePredictorInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.predictor_name {
        object.key("PredictorName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.algorithm_arn {
        object.key("AlgorithmArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.forecast_types {
        let mut array_5 = object.key("ForecastTypes").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.perform_auto_ml {
        object.key("PerformAutoML").boolean(*var_7);
    }
    if let Some(var_8) = &input.auto_ml_override_strategy {
        object.key("AutoMLOverrideStrategy").string(var_8.as_str());
    }
    if let Some(var_9) = &input.perform_hpo {
        object.key("PerformHPO").boolean(*var_9);
    }
    if let Some(var_10) = &input.training_parameters {
        #[allow(unused_mut)]
        let mut object_11 = object.key("TrainingParameters").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.evaluation_parameters {
        #[allow(unused_mut)]
        let mut object_15 = object.key("EvaluationParameters").start_object();
        crate::protocol_serde::shape_evaluation_parameters::ser_evaluation_parameters(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.hpo_config {
        #[allow(unused_mut)]
        let mut object_17 = object.key("HPOConfig").start_object();
        crate::protocol_serde::shape_hyper_parameter_tuning_job_config::ser_hyper_parameter_tuning_job_config(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.input_data_config {
        #[allow(unused_mut)]
        let mut object_19 = object.key("InputDataConfig").start_object();
        crate::protocol_serde::shape_input_data_config::ser_input_data_config(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.featurization_config {
        #[allow(unused_mut)]
        let mut object_21 = object.key("FeaturizationConfig").start_object();
        crate::protocol_serde::shape_featurization_config::ser_featurization_config(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.encryption_config {
        #[allow(unused_mut)]
        let mut object_23 = object.key("EncryptionConfig").start_object();
        crate::protocol_serde::shape_encryption_config::ser_encryption_config(
            &mut object_23,
            var_22,
        )?;
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("Tags").start_array();
        for item_26 in var_24 {
            {
                #[allow(unused_mut)]
                let mut object_27 = array_25.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.optimization_metric {
        object.key("OptimizationMetric").string(var_28.as_str());
    }
    Ok(())
}
