// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_auto_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_auto_predictor::CreateAutoPredictorInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.predictor_name {
        object.key("PredictorName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.forecast_types {
        let mut array_4 = object.key("ForecastTypes").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.forecast_dimensions {
        let mut array_7 = object.key("ForecastDimensions").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.forecast_frequency {
        object.key("ForecastFrequency").string(var_9.as_str());
    }
    if let Some(var_10) = &input.data_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("DataConfig").start_object();
        crate::protocol_serde::shape_data_config::ser_data_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.encryption_config {
        #[allow(unused_mut)]
        let mut object_13 = object.key("EncryptionConfig").start_object();
        crate::protocol_serde::shape_encryption_config::ser_encryption_config(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.reference_predictor_arn {
        object.key("ReferencePredictorArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.optimization_metric {
        object.key("OptimizationMetric").string(var_15.as_str());
    }
    if let Some(var_16) = &input.explain_predictor {
        object.key("ExplainPredictor").boolean(*var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.monitor_config {
        #[allow(unused_mut)]
        let mut object_22 = object.key("MonitorConfig").start_object();
        crate::protocol_serde::shape_monitor_config::ser_monitor_config(&mut object_22, var_21)?;
        object_22.finish();
    }
    if let Some(var_23) = &input.time_alignment_boundary {
        #[allow(unused_mut)]
        let mut object_24 = object.key("TimeAlignmentBoundary").start_object();
        crate::protocol_serde::shape_time_alignment_boundary::ser_time_alignment_boundary(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    Ok(())
}
