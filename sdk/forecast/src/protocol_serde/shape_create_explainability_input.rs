// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_explainability_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_explainability::CreateExplainabilityInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.explainability_name {
        object.key("ExplainabilityName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_arn {
        object.key("ResourceArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.explainability_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("ExplainabilityConfig").start_object();
        crate::protocol_serde::shape_explainability_config::ser_explainability_config(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DataSource").start_object();
        crate::protocol_serde::shape_data_source::ser_data_source(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.schema {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Schema").start_object();
        crate::protocol_serde::shape_schema::ser_schema(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.enable_visualization {
        object.key("EnableVisualization").boolean(*var_9);
    }
    if let Some(var_10) = &input.start_date_time {
        object.key("StartDateTime").string(var_10.as_str());
    }
    if let Some(var_11) = &input.end_date_time {
        object.key("EndDateTime").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
