// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dataset_import_job::CreateDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.dataset_import_job_name {
        object.key("DatasetImportJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_arn {
        object.key("DatasetArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DataSource").start_object();
        crate::protocol_serde::shape_data_source::ser_data_source(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.timestamp_format {
        object.key("TimestampFormat").string(var_5.as_str());
    }
    if let Some(var_6) = &input.time_zone {
        object.key("TimeZone").string(var_6.as_str());
    }
    if input.use_geolocation_for_time_zone {
        object
            .key("UseGeolocationForTimeZone")
            .boolean(input.use_geolocation_for_time_zone);
    }
    if let Some(var_7) = &input.geolocation_format {
        object.key("GeolocationFormat").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.format {
        object.key("Format").string(var_12.as_str());
    }
    Ok(())
}
