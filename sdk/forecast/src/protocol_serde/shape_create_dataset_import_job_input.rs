// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_dataset_import_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_dataset_import_job::CreateDatasetImportJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dataset_import_job_name {
        object.key("DatasetImportJobName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_arn {
        object.key("DatasetArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_source {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DataSource").start_object();
        crate::protocol_serde::shape_data_source::ser_data_source(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.timestamp_format {
        object.key("TimestampFormat").string(var_5.as_str());
    }
    if let Some(var_6) = &input.time_zone {
        object.key("TimeZone").string(var_6.as_str());
    }
    if let Some(var_7) = &input.use_geolocation_for_time_zone {
        object.key("UseGeolocationForTimeZone").boolean(*var_7);
    }
    if let Some(var_8) = &input.geolocation_format {
        object.key("GeolocationFormat").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.format {
        object.key("Format").string(var_13.as_str());
    }
    if let Some(var_14) = &input.import_mode {
        object.key("ImportMode").string(var_14.as_str());
    }
    Ok(())
}
