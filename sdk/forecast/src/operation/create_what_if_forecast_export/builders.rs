// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_what_if_forecast_export::_create_what_if_forecast_export_output::CreateWhatIfForecastExportOutputBuilder;

pub use crate::operation::create_what_if_forecast_export::_create_what_if_forecast_export_input::CreateWhatIfForecastExportInputBuilder;

/// Fluent builder constructing a request to `CreateWhatIfForecastExport`.
///
/// <p>Exports a forecast created by the <code>CreateWhatIfForecast</code> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p>
/// <p> <code>â‰ˆ
/// <forecastexportjobname>
/// _
/// <exporttimestamp>
/// _
/// <partnumber></partnumber>
/// </exporttimestamp>
/// </forecastexportjobname></code> </p>
/// <p>The <exporttimestamp>
/// component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).
/// </exporttimestamp></p>
/// <p>You must specify a <code>DataDestination</code> object that includes an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p>
/// <p>For more information, see <code>howitworks-forecast</code>.</p>
/// <p>To get a list of all your what-if forecast export jobs, use the <code>ListWhatIfForecastExports</code> operation.</p> <note>
/// <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <code>DescribeWhatIfForecastExport</code> operation.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWhatIfForecastExportFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_what_if_forecast_export::builders::CreateWhatIfForecastExportInputBuilder
            }
impl CreateWhatIfForecastExportFluentBuilder {
    /// Creates a new `CreateWhatIfForecastExport`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExport,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the what-if forecast to export.</p>
    pub fn what_if_forecast_export_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.what_if_forecast_export_name(input.into());
        self
    }
    /// <p>The name of the what-if forecast to export.</p>
    pub fn set_what_if_forecast_export_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_what_if_forecast_export_name(input);
        self
    }
    /// Appends an item to `WhatIfForecastArns`.
    ///
    /// To override the contents of this collection use [`set_what_if_forecast_arns`](Self::set_what_if_forecast_arns).
    ///
    /// <p>The list of what-if forecast Amazon Resource Names (ARNs) to export.</p>
    pub fn what_if_forecast_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.what_if_forecast_arns(input.into());
        self
    }
    /// <p>The list of what-if forecast Amazon Resource Names (ARNs) to export.</p>
    pub fn set_what_if_forecast_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_what_if_forecast_arns(input);
        self
    }
    /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
    /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
    pub fn destination(mut self, input: crate::types::DataDestination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The location where you want to save the forecast and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the location. The forecast must be exported to an Amazon S3 bucket.</p>
    /// <p>If encryption is used, <code>Destination</code> must include an AWS Key Management Service (KMS) key. The IAM role must allow Amazon Forecast permission to access the key.</p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::DataDestination>,
    ) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.format(input.into());
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
}
