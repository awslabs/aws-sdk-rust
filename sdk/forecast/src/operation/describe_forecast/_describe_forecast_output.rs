// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeForecastOutput {
    /// <p>The forecast ARN as specified in the request.</p>
    pub forecast_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the forecast.</p>
    pub forecast_name: ::std::option::Option<::std::string::String>,
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    pub forecast_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    pub predictor_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    pub dataset_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    pub estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    /// <p>The status of the forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>
    /// </note>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>If an error occurred, an informational message about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>When the forecast creation task was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time series to include in the forecast.</p>
    pub time_series_selector: ::std::option::Option<crate::types::TimeSeriesSelector>,
    _request_id: Option<String>,
}
impl DescribeForecastOutput {
    /// <p>The forecast ARN as specified in the request.</p>
    pub fn forecast_arn(&self) -> ::std::option::Option<&str> {
        self.forecast_arn.as_deref()
    }
    /// <p>The name of the forecast.</p>
    pub fn forecast_name(&self) -> ::std::option::Option<&str> {
        self.forecast_name.as_deref()
    }
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forecast_types.is_none()`.
    pub fn forecast_types(&self) -> &[::std::string::String] {
        self.forecast_types.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    pub fn predictor_arn(&self) -> ::std::option::Option<&str> {
        self.predictor_arn.as_deref()
    }
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    pub fn dataset_group_arn(&self) -> ::std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> ::std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>
    /// </note>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the forecast creation task was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The time series to include in the forecast.</p>
    pub fn time_series_selector(&self) -> ::std::option::Option<&crate::types::TimeSeriesSelector> {
        self.time_series_selector.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeForecastOutput {
    /// Creates a new builder-style object to manufacture [`DescribeForecastOutput`](crate::operation::describe_forecast::DescribeForecastOutput).
    pub fn builder() -> crate::operation::describe_forecast::builders::DescribeForecastOutputBuilder {
        crate::operation::describe_forecast::builders::DescribeForecastOutputBuilder::default()
    }
}

/// A builder for [`DescribeForecastOutput`](crate::operation::describe_forecast::DescribeForecastOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeForecastOutputBuilder {
    pub(crate) forecast_arn: ::std::option::Option<::std::string::String>,
    pub(crate) forecast_name: ::std::option::Option<::std::string::String>,
    pub(crate) forecast_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) predictor_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_series_selector: ::std::option::Option<crate::types::TimeSeriesSelector>,
    _request_id: Option<String>,
}
impl DescribeForecastOutputBuilder {
    /// <p>The forecast ARN as specified in the request.</p>
    pub fn forecast_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forecast_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The forecast ARN as specified in the request.</p>
    pub fn set_forecast_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forecast_arn = input;
        self
    }
    /// <p>The forecast ARN as specified in the request.</p>
    pub fn get_forecast_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.forecast_arn
    }
    /// <p>The name of the forecast.</p>
    pub fn forecast_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.forecast_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the forecast.</p>
    pub fn set_forecast_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.forecast_name = input;
        self
    }
    /// <p>The name of the forecast.</p>
    pub fn get_forecast_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.forecast_name
    }
    /// Appends an item to `forecast_types`.
    ///
    /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
    ///
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    pub fn forecast_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.forecast_types.unwrap_or_default();
        v.push(input.into());
        self.forecast_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    pub fn set_forecast_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.forecast_types = input;
        self
    }
    /// <p>The quantiles at which probabilistic forecasts were generated.</p>
    pub fn get_forecast_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.forecast_types
    }
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    pub fn predictor_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.predictor_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    pub fn set_predictor_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.predictor_arn = input;
        self
    }
    /// <p>The ARN of the predictor used to generate the forecast.</p>
    pub fn get_predictor_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.predictor_arn
    }
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    pub fn dataset_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    pub fn set_dataset_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// <p>The ARN of the dataset group that provided the data used to train the predictor.</p>
    pub fn get_dataset_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_group_arn
    }
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    pub fn set_estimated_time_remaining_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>The estimated time remaining in minutes for the forecast job to complete.</p>
    pub fn get_estimated_time_remaining_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>
    /// </note>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>
    /// </note>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast.</p>
    /// </note>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>When the forecast creation task was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the forecast creation task was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the forecast creation task was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn get_last_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_time
    }
    /// <p>The time series to include in the forecast.</p>
    pub fn time_series_selector(mut self, input: crate::types::TimeSeriesSelector) -> Self {
        self.time_series_selector = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time series to include in the forecast.</p>
    pub fn set_time_series_selector(mut self, input: ::std::option::Option<crate::types::TimeSeriesSelector>) -> Self {
        self.time_series_selector = input;
        self
    }
    /// <p>The time series to include in the forecast.</p>
    pub fn get_time_series_selector(&self) -> &::std::option::Option<crate::types::TimeSeriesSelector> {
        &self.time_series_selector
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeForecastOutput`](crate::operation::describe_forecast::DescribeForecastOutput).
    pub fn build(self) -> crate::operation::describe_forecast::DescribeForecastOutput {
        crate::operation::describe_forecast::DescribeForecastOutput {
            forecast_arn: self.forecast_arn,
            forecast_name: self.forecast_name,
            forecast_types: self.forecast_types,
            predictor_arn: self.predictor_arn,
            dataset_group_arn: self.dataset_group_arn,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            time_series_selector: self.time_series_selector,
            _request_id: self._request_id,
        }
    }
}
