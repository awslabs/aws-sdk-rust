// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_predictor::_describe_predictor_output::DescribePredictorOutputBuilder;

pub use crate::operation::describe_predictor::_describe_predictor_input::DescribePredictorInputBuilder;

/// Fluent builder constructing a request to `DescribePredictor`.
///
/// <note>
/// <p> This operation is only valid for legacy predictors created with CreatePredictor. If you are not using a legacy predictor, use <code>DescribeAutoPredictor</code>.</p>
/// </note>
/// <p>Describes a predictor created using the <code>CreatePredictor</code> operation.</p>
/// <p>In addition to listing the properties provided in the <code>CreatePredictor</code> request, this operation lists the following properties:</p>
/// <ul>
/// <li> <p> <code>DatasetImportJobArns</code> - The dataset import jobs used to import training data.</p> </li>
/// <li> <p> <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were evaluated.</p> </li>
/// <li> <p> <code>CreationTime</code> </p> </li>
/// <li> <p> <code>LastModificationTime</code> </p> </li>
/// <li> <p> <code>Status</code> </p> </li>
/// <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribePredictorFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_predictor::builders::DescribePredictorInputBuilder,
}
impl DescribePredictorFluentBuilder {
    /// Creates a new `DescribePredictor`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_predictor::DescribePredictor,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_predictor::DescribePredictorError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_predictor::DescribePredictorOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_predictor::DescribePredictorError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
    pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.predictor_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor that you want information about.</p>
    pub fn set_predictor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_predictor_arn(input);
        self
    }
}
