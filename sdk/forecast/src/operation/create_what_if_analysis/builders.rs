// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_what_if_analysis::_create_what_if_analysis_output::CreateWhatIfAnalysisOutputBuilder;

pub use crate::operation::create_what_if_analysis::_create_what_if_analysis_input::CreateWhatIfAnalysisInputBuilder;

/// Fluent builder constructing a request to `CreateWhatIfAnalysis`.
///
/// <p>What-if analysis is a scenario modeling technique where you make a hypothetical change to a time series and compare the forecasts generated by these changes against the baseline, unchanged time series. It is important to remember that the purpose of a what-if analysis is to understand how a forecast can change given different modifications to the baseline time series.</p>
/// <p>For example, imagine you are a clothing retailer who is considering an end of season sale to clear space for new styles. After creating a baseline forecast, you can use a what-if analysis to investigate how different sales tactics might affect your goals. You could create a scenario where everything is given a 25% markdown and another where everything is given a fixed dollar markdown. You can create a scenario where the sale lasts for 1 week and another where the sale lasts for 1 month. Your what-if analysis enables you to compare many different scenarios against each other.</p>
/// <p>Note that a what-if analysis is meant to display what the forecasting model has learned and how it will behave in the scenarios that you are evaluating. Do not blindly use the results of the what-if analysis to make business decisions. For instance, forecasts might not be accurate for novel scenarios where there is no reference available to determine whether a forecast is good.</p>
/// <p>The <code>TimeSeriesSelector</code> object defines the items that you want in the what-if analysis.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWhatIfAnalysisFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_what_if_analysis::builders::CreateWhatIfAnalysisInputBuilder,
}
impl CreateWhatIfAnalysisFluentBuilder {
    /// Creates a new `CreateWhatIfAnalysis`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysis,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_what_if_analysis::CreateWhatIfAnalysisOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the what-if analysis. Each name must be unique.</p>
    pub fn what_if_analysis_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.what_if_analysis_name(input.into());
        self
    }
    /// <p>The name of the what-if analysis. Each name must be unique.</p>
    pub fn set_what_if_analysis_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_what_if_analysis_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the baseline forecast.</p>
    pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.forecast_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the baseline forecast.</p>
    pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_forecast_arn(input);
        self
    }
    /// <p>Defines the set of time series that are used in the what-if analysis with a <code>TimeSeriesIdentifiers</code> object. What-if analyses are performed only for the time series in this object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    pub fn time_series_selector(mut self, input: crate::types::TimeSeriesSelector) -> Self {
        self.inner = self.inner.time_series_selector(input);
        self
    }
    /// <p>Defines the set of time series that are used in the what-if analysis with a <code>TimeSeriesIdentifiers</code> object. What-if analyses are performed only for the time series in this object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    pub fn set_time_series_selector(
        mut self,
        input: std::option::Option<crate::types::TimeSeriesSelector>,
    ) -> Self {
        self.inner = self.inner.set_time_series_selector(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
