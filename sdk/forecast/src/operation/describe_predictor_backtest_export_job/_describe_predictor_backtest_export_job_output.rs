// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribePredictorBacktestExportJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    #[doc(hidden)]
    pub predictor_backtest_export_job_arn: std::option::Option<std::string::String>,
    /// <p>The name of the predictor backtest export job.</p>
    #[doc(hidden)]
    pub predictor_backtest_export_job_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
    #[doc(hidden)]
    pub predictor_arn: std::option::Option<std::string::String>,
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    #[doc(hidden)]
    pub destination: std::option::Option<crate::types::DataDestination>,
    /// <p>Information about any errors that may have occurred during the backtest export.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The status of the predictor backtest export job. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>When the predictor backtest export job was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    #[doc(hidden)]
    pub format: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePredictorBacktestExportJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    pub fn predictor_backtest_export_job_arn(&self) -> std::option::Option<&str> {
        self.predictor_backtest_export_job_arn.as_deref()
    }
    /// <p>The name of the predictor backtest export job.</p>
    pub fn predictor_backtest_export_job_name(&self) -> std::option::Option<&str> {
        self.predictor_backtest_export_job_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
    pub fn predictor_arn(&self) -> std::option::Option<&str> {
        self.predictor_arn.as_deref()
    }
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    pub fn destination(&self) -> std::option::Option<&crate::types::DataDestination> {
        self.destination.as_ref()
    }
    /// <p>Information about any errors that may have occurred during the backtest export.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The status of the predictor backtest export job. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>When the predictor backtest export job was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    pub fn format(&self) -> std::option::Option<&str> {
        self.format.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribePredictorBacktestExportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribePredictorBacktestExportJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribePredictorBacktestExportJobOutput`](crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobOutput).
    pub fn builder() -> crate::operation::describe_predictor_backtest_export_job::builders::DescribePredictorBacktestExportJobOutputBuilder{
        crate::operation::describe_predictor_backtest_export_job::builders::DescribePredictorBacktestExportJobOutputBuilder::default()
    }
}

/// A builder for [`DescribePredictorBacktestExportJobOutput`](crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribePredictorBacktestExportJobOutputBuilder {
    pub(crate) predictor_backtest_export_job_arn: std::option::Option<std::string::String>,
    pub(crate) predictor_backtest_export_job_name: std::option::Option<std::string::String>,
    pub(crate) predictor_arn: std::option::Option<std::string::String>,
    pub(crate) destination: std::option::Option<crate::types::DataDestination>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) format: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribePredictorBacktestExportJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    pub fn predictor_backtest_export_job_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.predictor_backtest_export_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor backtest export job.</p>
    pub fn set_predictor_backtest_export_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.predictor_backtest_export_job_arn = input;
        self
    }
    /// <p>The name of the predictor backtest export job.</p>
    pub fn predictor_backtest_export_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.predictor_backtest_export_job_name = Some(input.into());
        self
    }
    /// <p>The name of the predictor backtest export job.</p>
    pub fn set_predictor_backtest_export_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.predictor_backtest_export_job_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
    pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.predictor_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor.</p>
    pub fn set_predictor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.predictor_arn = input;
        self
    }
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    pub fn destination(mut self, input: crate::types::DataDestination) -> Self {
        self.destination = Some(input);
        self
    }
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::DataDestination>,
    ) -> Self {
        self.destination = input;
        self
    }
    /// <p>Information about any errors that may have occurred during the backtest export.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>Information about any errors that may have occurred during the backtest export.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The status of the predictor backtest export job. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the predictor backtest export job. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>When the predictor backtest export job was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the predictor backtest export job was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.format = Some(input.into());
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET.</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.format = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribePredictorBacktestExportJobOutput`](crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobOutput).
    pub fn build(self) -> crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobOutput{
        crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobOutput {
            predictor_backtest_export_job_arn: self.predictor_backtest_export_job_arn
            ,
            predictor_backtest_export_job_name: self.predictor_backtest_export_job_name
            ,
            predictor_arn: self.predictor_arn
            ,
            destination: self.destination
            ,
            message: self.message
            ,
            status: self.status
            ,
            creation_time: self.creation_time
            ,
            last_modification_time: self.last_modification_time
            ,
            format: self.format
            ,
            _request_id: self._request_id,
        }
    }
}
