// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_what_if_forecast::_create_what_if_forecast_output::CreateWhatIfForecastOutputBuilder;

pub use crate::operation::create_what_if_forecast::_create_what_if_forecast_input::CreateWhatIfForecastInputBuilder;

/// Fluent builder constructing a request to `CreateWhatIfForecast`.
///
/// <p>A what-if forecast is a forecast that is created from a modified version of the baseline forecast. Each what-if forecast incorporates either a replacement dataset or a set of transformations to the original dataset. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateWhatIfForecastFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_what_if_forecast::builders::CreateWhatIfForecastInputBuilder,
}
impl CreateWhatIfForecastFluentBuilder {
    /// Creates a new `CreateWhatIfForecast`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_what_if_forecast::CreateWhatIfForecast,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_what_if_forecast::CreateWhatIfForecastOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the what-if forecast. Names must be unique within each what-if analysis.</p>
    pub fn what_if_forecast_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.what_if_forecast_name(input.into());
        self
    }
    /// <p>The name of the what-if forecast. Names must be unique within each what-if analysis.</p>
    pub fn set_what_if_forecast_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_what_if_forecast_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    pub fn what_if_analysis_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.what_if_analysis_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    pub fn set_what_if_analysis_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_what_if_analysis_arn(input);
        self
    }
    /// Appends an item to `TimeSeriesTransformations`.
    ///
    /// To override the contents of this collection use [`set_time_series_transformations`](Self::set_time_series_transformations).
    ///
    /// <p>The transformations that are applied to the baseline time series. Each transformation contains an action and a set of conditions. An action is applied only when all conditions are met. If no conditions are provided, the action is applied to all items.</p>
    pub fn time_series_transformations(
        mut self,
        input: crate::types::TimeSeriesTransformation,
    ) -> Self {
        self.inner = self.inner.time_series_transformations(input);
        self
    }
    /// <p>The transformations that are applied to the baseline time series. Each transformation contains an action and a set of conditions. An action is applied only when all conditions are met. If no conditions are provided, the action is applied to all items.</p>
    pub fn set_time_series_transformations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TimeSeriesTransformation>>,
    ) -> Self {
        self.inner = self.inner.set_time_series_transformations(input);
        self
    }
    /// <p>The replacement time series dataset, which contains the rows that you want to change in the related time series dataset. A replacement time series does not need to contain all rows that are in the baseline related time series. Include only the rows (measure-dimension combinations) that you want to include in the what-if forecast. This dataset is merged with the original time series to create a transformed dataset that is used for the what-if analysis.</p>
    /// <p>This dataset should contain the items to modify (such as item_id or workforce_type), any relevant dimensions, the timestamp column, and at least one of the related time series columns. This file should not contain duplicate timestamps for the same time series.</p>
    /// <p>Timestamps and item_ids not included in this dataset are not included in the what-if analysis. </p>
    pub fn time_series_replacements_data_source(
        mut self,
        input: crate::types::TimeSeriesReplacementsDataSource,
    ) -> Self {
        self.inner = self.inner.time_series_replacements_data_source(input);
        self
    }
    /// <p>The replacement time series dataset, which contains the rows that you want to change in the related time series dataset. A replacement time series does not need to contain all rows that are in the baseline related time series. Include only the rows (measure-dimension combinations) that you want to include in the what-if forecast. This dataset is merged with the original time series to create a transformed dataset that is used for the what-if analysis.</p>
    /// <p>This dataset should contain the items to modify (such as item_id or workforce_type), any relevant dimensions, the timestamp column, and at least one of the related time series columns. This file should not contain duplicate timestamps for the same time series.</p>
    /// <p>Timestamps and item_ids not included in this dataset are not included in the what-if analysis. </p>
    pub fn set_time_series_replacements_data_source(
        mut self,
        input: std::option::Option<crate::types::TimeSeriesReplacementsDataSource>,
    ) -> Self {
        self.inner = self.inner.set_time_series_replacements_data_source(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of <a href="https://docs.aws.amazon.com/forecast/latest/dg/tagging-forecast-resources.html">tags</a> to apply to the what if forecast.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
