// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePredictorInput {
    /// <p>A name for the predictor.</p>
    #[doc(hidden)]
    pub predictor_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
    /// <p class="title"> <b>Supported algorithms:</b> </p>
    /// <ul>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub algorithm_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
    /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
    /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
    #[doc(hidden)]
    pub forecast_horizon: std::option::Option<i32>,
    /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
    /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
    #[doc(hidden)]
    pub forecast_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
    /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
    /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
    #[doc(hidden)]
    pub perform_auto_ml: std::option::Option<bool>,
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    #[doc(hidden)]
    pub auto_ml_override_strategy: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
    /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
    /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
    /// <p>The following algorithms support HPO:</p>
    /// <ul>
    /// <li> <p>DeepAR+</p> </li>
    /// <li> <p>CNN-QR</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub perform_hpo: std::option::Option<bool>,
    /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
    #[doc(hidden)]
    pub training_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    #[doc(hidden)]
    pub evaluation_parameters: std::option::Option<crate::types::EvaluationParameters>,
    /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
    #[doc(hidden)]
    pub hpo_config: std::option::Option<crate::types::HyperParameterTuningJobConfig>,
    /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    #[doc(hidden)]
    pub input_data_config: std::option::Option<crate::types::InputDataConfig>,
    /// <p>The featurization configuration.</p>
    #[doc(hidden)]
    pub featurization_config: std::option::Option<crate::types::FeaturizationConfig>,
    /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    #[doc(hidden)]
    pub encryption_config: std::option::Option<crate::types::EncryptionConfig>,
    /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
    /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
    /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The accuracy metric used to optimize the predictor.</p>
    #[doc(hidden)]
    pub optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
}
impl CreatePredictorInput {
    /// <p>A name for the predictor.</p>
    pub fn predictor_name(&self) -> std::option::Option<&str> {
        self.predictor_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
    /// <p class="title"> <b>Supported algorithms:</b> </p>
    /// <ul>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
    /// </ul>
    pub fn algorithm_arn(&self) -> std::option::Option<&str> {
        self.algorithm_arn.as_deref()
    }
    /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
    /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
    /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
    pub fn forecast_horizon(&self) -> std::option::Option<i32> {
        self.forecast_horizon
    }
    /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
    /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
    pub fn forecast_types(&self) -> std::option::Option<&[std::string::String]> {
        self.forecast_types.as_deref()
    }
    /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
    /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
    /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
    pub fn perform_auto_ml(&self) -> std::option::Option<bool> {
        self.perform_auto_ml
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn auto_ml_override_strategy(
        &self,
    ) -> std::option::Option<&crate::types::AutoMlOverrideStrategy> {
        self.auto_ml_override_strategy.as_ref()
    }
    /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
    /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
    /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
    /// <p>The following algorithms support HPO:</p>
    /// <ul>
    /// <li> <p>DeepAR+</p> </li>
    /// <li> <p>CNN-QR</p> </li>
    /// </ul>
    pub fn perform_hpo(&self) -> std::option::Option<bool> {
        self.perform_hpo
    }
    /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
    pub fn training_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.training_parameters.as_ref()
    }
    /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    pub fn evaluation_parameters(
        &self,
    ) -> std::option::Option<&crate::types::EvaluationParameters> {
        self.evaluation_parameters.as_ref()
    }
    /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
    pub fn hpo_config(&self) -> std::option::Option<&crate::types::HyperParameterTuningJobConfig> {
        self.hpo_config.as_ref()
    }
    /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    pub fn input_data_config(&self) -> std::option::Option<&crate::types::InputDataConfig> {
        self.input_data_config.as_ref()
    }
    /// <p>The featurization configuration.</p>
    pub fn featurization_config(&self) -> std::option::Option<&crate::types::FeaturizationConfig> {
        self.featurization_config.as_ref()
    }
    /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    pub fn encryption_config(&self) -> std::option::Option<&crate::types::EncryptionConfig> {
        self.encryption_config.as_ref()
    }
    /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
    /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
    /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
    /// </ul>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(&self) -> std::option::Option<&crate::types::OptimizationMetric> {
        self.optimization_metric.as_ref()
    }
}
impl CreatePredictorInput {
    /// Creates a new builder-style object to manufacture [`CreatePredictorInput`](crate::operation::create_predictor::CreatePredictorInput).
    pub fn builder() -> crate::operation::create_predictor::builders::CreatePredictorInputBuilder {
        crate::operation::create_predictor::builders::CreatePredictorInputBuilder::default()
    }
}

/// A builder for [`CreatePredictorInput`](crate::operation::create_predictor::CreatePredictorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePredictorInputBuilder {
    pub(crate) predictor_name: std::option::Option<std::string::String>,
    pub(crate) algorithm_arn: std::option::Option<std::string::String>,
    pub(crate) forecast_horizon: std::option::Option<i32>,
    pub(crate) forecast_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) perform_auto_ml: std::option::Option<bool>,
    pub(crate) auto_ml_override_strategy: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    pub(crate) perform_hpo: std::option::Option<bool>,
    pub(crate) training_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) evaluation_parameters: std::option::Option<crate::types::EvaluationParameters>,
    pub(crate) hpo_config: std::option::Option<crate::types::HyperParameterTuningJobConfig>,
    pub(crate) input_data_config: std::option::Option<crate::types::InputDataConfig>,
    pub(crate) featurization_config: std::option::Option<crate::types::FeaturizationConfig>,
    pub(crate) encryption_config: std::option::Option<crate::types::EncryptionConfig>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
}
impl CreatePredictorInputBuilder {
    /// <p>A name for the predictor.</p>
    pub fn predictor_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.predictor_name = Some(input.into());
        self
    }
    /// <p>A name for the predictor.</p>
    pub fn set_predictor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.predictor_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
    /// <p class="title"> <b>Supported algorithms:</b> </p>
    /// <ul>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
    /// </ul>
    pub fn algorithm_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.algorithm_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the algorithm to use for model training. Required if <code>PerformAutoML</code> is not set to <code>true</code>.</p>
    /// <p class="title"> <b>Supported algorithms:</b> </p>
    /// <ul>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ARIMA</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/CNN-QR</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Deep_AR_Plus</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/ETS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/NPTS</code> </p> </li>
    /// <li> <p> <code>arn:aws:forecast:::algorithm/Prophet</code> </p> </li>
    /// </ul>
    pub fn set_algorithm_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.algorithm_arn = input;
        self
    }
    /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
    /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
    /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
    pub fn forecast_horizon(mut self, input: i32) -> Self {
        self.forecast_horizon = Some(input);
        self
    }
    /// <p>Specifies the number of time-steps that the model is trained to predict. The forecast horizon is also called the prediction length.</p>
    /// <p>For example, if you configure a dataset for daily data collection (using the <code>DataFrequency</code> parameter of the <code>CreateDataset</code> operation) and set the forecast horizon to 10, the model returns predictions for 10 days.</p>
    /// <p>The maximum forecast horizon is the lesser of 500 time-steps or 1/3 of the TARGET_TIME_SERIES dataset length.</p>
    pub fn set_forecast_horizon(mut self, input: std::option::Option<i32>) -> Self {
        self.forecast_horizon = input;
        self
    }
    /// Appends an item to `forecast_types`.
    ///
    /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
    ///
    /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
    /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
    pub fn forecast_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.forecast_types.unwrap_or_default();
        v.push(input.into());
        self.forecast_types = Some(v);
        self
    }
    /// <p>Specifies the forecast types used to train a predictor. You can specify up to five forecast types. Forecast types can be quantiles from 0.01 to 0.99, by increments of 0.01 or higher. You can also specify the mean forecast with <code>mean</code>. </p>
    /// <p>The default value is <code>["0.10", "0.50", "0.9"]</code>.</p>
    pub fn set_forecast_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.forecast_types = input;
        self
    }
    /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
    /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
    /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
    pub fn perform_auto_ml(mut self, input: bool) -> Self {
        self.perform_auto_ml = Some(input);
        self
    }
    /// <p>Whether to perform AutoML. When Amazon Forecast performs AutoML, it evaluates the algorithms it provides and chooses the best algorithm and configuration for your training dataset.</p>
    /// <p>The default value is <code>false</code>. In this case, you are required to specify an algorithm.</p>
    /// <p>Set <code>PerformAutoML</code> to <code>true</code> to have Amazon Forecast perform AutoML. This is a good option if you aren't sure which algorithm is suitable for your training data. In this case, <code>PerformHPO</code> must be false.</p>
    pub fn set_perform_auto_ml(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_auto_ml = input;
        self
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn auto_ml_override_strategy(
        mut self,
        input: crate::types::AutoMlOverrideStrategy,
    ) -> Self {
        self.auto_ml_override_strategy = Some(input);
        self
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>Used to overide the default AutoML strategy, which is to optimize predictor accuracy. To apply an AutoML strategy that minimizes training time, use <code>LatencyOptimized</code>.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn set_auto_ml_override_strategy(
        mut self,
        input: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    ) -> Self {
        self.auto_ml_override_strategy = input;
        self
    }
    /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
    /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
    /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
    /// <p>The following algorithms support HPO:</p>
    /// <ul>
    /// <li> <p>DeepAR+</p> </li>
    /// <li> <p>CNN-QR</p> </li>
    /// </ul>
    pub fn perform_hpo(mut self, input: bool) -> Self {
        self.perform_hpo = Some(input);
        self
    }
    /// <p>Whether to perform hyperparameter optimization (HPO). HPO finds optimal hyperparameter values for your training data. The process of performing HPO is known as running a hyperparameter tuning job.</p>
    /// <p>The default value is <code>false</code>. In this case, Amazon Forecast uses default hyperparameter values from the chosen algorithm.</p>
    /// <p>To override the default values, set <code>PerformHPO</code> to <code>true</code> and, optionally, supply the <code>HyperParameterTuningJobConfig</code> object. The tuning job specifies a metric to optimize, which hyperparameters participate in tuning, and the valid range for each tunable hyperparameter. In this case, you are required to specify an algorithm and <code>PerformAutoML</code> must be false.</p>
    /// <p>The following algorithms support HPO:</p>
    /// <ul>
    /// <li> <p>DeepAR+</p> </li>
    /// <li> <p>CNN-QR</p> </li>
    /// </ul>
    pub fn set_perform_hpo(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_hpo = input;
        self
    }
    /// Adds a key-value pair to `training_parameters`.
    ///
    /// To override the contents of this collection use [`set_training_parameters`](Self::set_training_parameters).
    ///
    /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
    pub fn training_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.training_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.training_parameters = Some(hash_map);
        self
    }
    /// <p>The hyperparameters to override for model training. The hyperparameters that you can override are listed in the individual algorithms. For the list of supported algorithms, see <code>aws-forecast-choosing-recipes</code>.</p>
    pub fn set_training_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.training_parameters = input;
        self
    }
    /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    pub fn evaluation_parameters(mut self, input: crate::types::EvaluationParameters) -> Self {
        self.evaluation_parameters = Some(input);
        self
    }
    /// <p>Used to override the default evaluation parameters of the specified algorithm. Amazon Forecast evaluates a predictor by splitting a dataset into training data and testing data. The evaluation parameters define how to perform the split and the number of iterations.</p>
    pub fn set_evaluation_parameters(
        mut self,
        input: std::option::Option<crate::types::EvaluationParameters>,
    ) -> Self {
        self.evaluation_parameters = input;
        self
    }
    /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
    pub fn hpo_config(mut self, input: crate::types::HyperParameterTuningJobConfig) -> Self {
        self.hpo_config = Some(input);
        self
    }
    /// <p>Provides hyperparameter override values for the algorithm. If you don't provide this parameter, Amazon Forecast uses default values. The individual algorithms specify which hyperparameters support hyperparameter optimization (HPO). For more information, see <code>aws-forecast-choosing-recipes</code>.</p>
    /// <p>If you included the <code>HPOConfig</code> object, you must set <code>PerformHPO</code> to true.</p>
    pub fn set_hpo_config(
        mut self,
        input: std::option::Option<crate::types::HyperParameterTuningJobConfig>,
    ) -> Self {
        self.hpo_config = input;
        self
    }
    /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    pub fn input_data_config(mut self, input: crate::types::InputDataConfig) -> Self {
        self.input_data_config = Some(input);
        self
    }
    /// <p>Describes the dataset group that contains the data to use to train the predictor.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<crate::types::InputDataConfig>,
    ) -> Self {
        self.input_data_config = input;
        self
    }
    /// <p>The featurization configuration.</p>
    pub fn featurization_config(mut self, input: crate::types::FeaturizationConfig) -> Self {
        self.featurization_config = Some(input);
        self
    }
    /// <p>The featurization configuration.</p>
    pub fn set_featurization_config(
        mut self,
        input: std::option::Option<crate::types::FeaturizationConfig>,
    ) -> Self {
        self.featurization_config = input;
        self
    }
    /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    pub fn encryption_config(mut self, input: crate::types::EncryptionConfig) -> Self {
        self.encryption_config = Some(input);
        self
    }
    /// <p>An AWS Key Management Service (KMS) key and the AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key.</p>
    pub fn set_encryption_config(
        mut self,
        input: std::option::Option<crate::types::EncryptionConfig>,
    ) -> Self {
        self.encryption_config = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
    /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
    /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
    /// </ul>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The optional metadata that you apply to the predictor to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.</p>
    /// <p>The following basic restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of tags per resource - 50.</p> </li>
    /// <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li>
    /// <li> <p>Maximum key length - 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length - 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for keys as it is reserved for AWS use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit.</p> </li>
    /// </ul>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(mut self, input: crate::types::OptimizationMetric) -> Self {
        self.optimization_metric = Some(input);
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn set_optimization_metric(
        mut self,
        input: std::option::Option<crate::types::OptimizationMetric>,
    ) -> Self {
        self.optimization_metric = input;
        self
    }
    /// Consumes the builder and constructs a [`CreatePredictorInput`](crate::operation::create_predictor::CreatePredictorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_predictor::CreatePredictorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_predictor::CreatePredictorInput {
            predictor_name: self.predictor_name,
            algorithm_arn: self.algorithm_arn,
            forecast_horizon: self.forecast_horizon,
            forecast_types: self.forecast_types,
            perform_auto_ml: self.perform_auto_ml,
            auto_ml_override_strategy: self.auto_ml_override_strategy,
            perform_hpo: self.perform_hpo,
            training_parameters: self.training_parameters,
            evaluation_parameters: self.evaluation_parameters,
            hpo_config: self.hpo_config,
            input_data_config: self.input_data_config,
            featurization_config: self.featurization_config,
            encryption_config: self.encryption_config,
            tags: self.tags,
            optimization_metric: self.optimization_metric,
        })
    }
}
