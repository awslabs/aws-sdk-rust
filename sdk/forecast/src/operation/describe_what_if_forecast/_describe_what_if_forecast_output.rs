// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeWhatIfForecastOutput {
    /// <p>The name of the what-if forecast.</p>
    pub what_if_forecast_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub what_if_forecast_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    pub what_if_analysis_arn: ::std::option::Option<::std::string::String>,
    /// <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    pub estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    /// <p>The status of the what-if forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>
    /// </note>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>If an error occurred, an informational message about the error.</p>
    pub message: ::std::option::Option<::std::string::String>,
    /// <p>When the what-if forecast was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    pub time_series_transformations: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesTransformation>>,
    /// <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    pub time_series_replacements_data_source: ::std::option::Option<crate::types::TimeSeriesReplacementsDataSource>,
    /// <p>The quantiles at which probabilistic forecasts are generated. You can specify up to five quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    pub forecast_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeWhatIfForecastOutput {
    /// <p>The name of the what-if forecast.</p>
    pub fn what_if_forecast_name(&self) -> ::std::option::Option<&str> {
        self.what_if_forecast_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn what_if_forecast_arn(&self) -> ::std::option::Option<&str> {
        self.what_if_forecast_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    pub fn what_if_analysis_arn(&self) -> ::std::option::Option<&str> {
        self.what_if_analysis_arn.as_deref()
    }
    /// <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> ::std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the what-if forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>
    /// </note>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the what-if forecast was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.time_series_transformations.is_none()`.
    pub fn time_series_transformations(&self) -> &[crate::types::TimeSeriesTransformation] {
        self.time_series_transformations.as_deref().unwrap_or_default()
    }
    /// <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    pub fn time_series_replacements_data_source(&self) -> ::std::option::Option<&crate::types::TimeSeriesReplacementsDataSource> {
        self.time_series_replacements_data_source.as_ref()
    }
    /// <p>The quantiles at which probabilistic forecasts are generated. You can specify up to five quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.forecast_types.is_none()`.
    pub fn forecast_types(&self) -> &[::std::string::String] {
        self.forecast_types.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeWhatIfForecastOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeWhatIfForecastOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWhatIfForecastOutput`](crate::operation::describe_what_if_forecast::DescribeWhatIfForecastOutput).
    pub fn builder() -> crate::operation::describe_what_if_forecast::builders::DescribeWhatIfForecastOutputBuilder {
        crate::operation::describe_what_if_forecast::builders::DescribeWhatIfForecastOutputBuilder::default()
    }
}

/// A builder for [`DescribeWhatIfForecastOutput`](crate::operation::describe_what_if_forecast::DescribeWhatIfForecastOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeWhatIfForecastOutputBuilder {
    pub(crate) what_if_forecast_name: ::std::option::Option<::std::string::String>,
    pub(crate) what_if_forecast_arn: ::std::option::Option<::std::string::String>,
    pub(crate) what_if_analysis_arn: ::std::option::Option<::std::string::String>,
    pub(crate) estimated_time_remaining_in_minutes: ::std::option::Option<i64>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) time_series_transformations: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesTransformation>>,
    pub(crate) time_series_replacements_data_source: ::std::option::Option<crate::types::TimeSeriesReplacementsDataSource>,
    pub(crate) forecast_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeWhatIfForecastOutputBuilder {
    /// <p>The name of the what-if forecast.</p>
    pub fn what_if_forecast_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.what_if_forecast_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the what-if forecast.</p>
    pub fn set_what_if_forecast_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.what_if_forecast_name = input;
        self
    }
    /// <p>The name of the what-if forecast.</p>
    pub fn get_what_if_forecast_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.what_if_forecast_name
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn what_if_forecast_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.what_if_forecast_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn set_what_if_forecast_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.what_if_forecast_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn get_what_if_forecast_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.what_if_forecast_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    pub fn what_if_analysis_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.what_if_analysis_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    pub fn set_what_if_analysis_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.what_if_analysis_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis that contains this forecast.</p>
    pub fn get_what_if_analysis_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.what_if_analysis_arn
    }
    /// <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    pub fn set_estimated_time_remaining_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>The approximate time remaining to complete the what-if forecast, in minutes.</p>
    pub fn get_estimated_time_remaining_in_minutes(&self) -> &::std::option::Option<i64> {
        &self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the what-if forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>
    /// </note>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the what-if forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>
    /// </note>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the what-if forecast. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if forecast must be <code>ACTIVE</code> before you can access the forecast.</p>
    /// </note>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>When the what-if forecast was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the what-if forecast was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>When the what-if forecast was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn get_last_modification_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modification_time
    }
    /// Appends an item to `time_series_transformations`.
    ///
    /// To override the contents of this collection use [`set_time_series_transformations`](Self::set_time_series_transformations).
    ///
    /// <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    pub fn time_series_transformations(mut self, input: crate::types::TimeSeriesTransformation) -> Self {
        let mut v = self.time_series_transformations.unwrap_or_default();
        v.push(input);
        self.time_series_transformations = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    pub fn set_time_series_transformations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesTransformation>>) -> Self {
        self.time_series_transformations = input;
        self
    }
    /// <p>An array of <code>Action</code> and <code>TimeSeriesConditions</code> elements that describe what transformations were applied to which time series.</p>
    pub fn get_time_series_transformations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesTransformation>> {
        &self.time_series_transformations
    }
    /// <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    pub fn time_series_replacements_data_source(mut self, input: crate::types::TimeSeriesReplacementsDataSource) -> Self {
        self.time_series_replacements_data_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    pub fn set_time_series_replacements_data_source(mut self, input: ::std::option::Option<crate::types::TimeSeriesReplacementsDataSource>) -> Self {
        self.time_series_replacements_data_source = input;
        self
    }
    /// <p>An array of <code>S3Config</code>, <code>Schema</code>, and <code>Format</code> elements that describe the replacement time series.</p>
    pub fn get_time_series_replacements_data_source(&self) -> &::std::option::Option<crate::types::TimeSeriesReplacementsDataSource> {
        &self.time_series_replacements_data_source
    }
    /// Appends an item to `forecast_types`.
    ///
    /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
    ///
    /// <p>The quantiles at which probabilistic forecasts are generated. You can specify up to five quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    pub fn forecast_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.forecast_types.unwrap_or_default();
        v.push(input.into());
        self.forecast_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The quantiles at which probabilistic forecasts are generated. You can specify up to five quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    pub fn set_forecast_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.forecast_types = input;
        self
    }
    /// <p>The quantiles at which probabilistic forecasts are generated. You can specify up to five quantiles per what-if forecast in the <code>CreateWhatIfForecast</code> operation. If you didn't specify quantiles, the default values are <code>["0.1", "0.5", "0.9"]</code>. </p>
    pub fn get_forecast_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.forecast_types
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeWhatIfForecastOutput`](crate::operation::describe_what_if_forecast::DescribeWhatIfForecastOutput).
    pub fn build(self) -> crate::operation::describe_what_if_forecast::DescribeWhatIfForecastOutput {
        crate::operation::describe_what_if_forecast::DescribeWhatIfForecastOutput {
            what_if_forecast_name: self.what_if_forecast_name,
            what_if_forecast_arn: self.what_if_forecast_arn,
            what_if_analysis_arn: self.what_if_analysis_arn,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            time_series_transformations: self.time_series_transformations,
            time_series_replacements_data_source: self.time_series_replacements_data_source,
            forecast_types: self.forecast_types,
            _request_id: self._request_id,
        }
    }
}
