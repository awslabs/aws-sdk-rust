// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeExplainabilityOutput {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    #[doc(hidden)]
    pub explainability_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Explainability.</p>
    #[doc(hidden)]
    pub explainability_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability resource.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    #[doc(hidden)]
    pub explainability_config: std::option::Option<crate::types::ExplainabilityConfig>,
    /// <p>Whether the visualization was enabled for the Explainability resource.</p>
    #[doc(hidden)]
    pub enable_visualization: std::option::Option<bool>,
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    #[doc(hidden)]
    pub data_source: std::option::Option<crate::types::DataSource>,
    /// <p>Defines the fields of a dataset.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<crate::types::Schema>,
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the first time point in the Explainability.</p>
    #[doc(hidden)]
    pub start_date_time: std::option::Option<std::string::String>,
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the last time point in the Explainability.</p>
    #[doc(hidden)]
    pub end_date_time: std::option::Option<std::string::String>,
    /// <p>The estimated time remaining in minutes for the <code>CreateExplainability</code> job to complete.</p>
    #[doc(hidden)]
    pub estimated_time_remaining_in_minutes: std::option::Option<i64>,
    /// <p>If an error occurred, a message about the error.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The status of the Explainability resource. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>When the Explainability resource was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeExplainabilityOutput {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn explainability_arn(&self) -> std::option::Option<&str> {
        self.explainability_arn.as_deref()
    }
    /// <p>The name of the Explainability.</p>
    pub fn explainability_name(&self) -> std::option::Option<&str> {
        self.explainability_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability resource.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn explainability_config(
        &self,
    ) -> std::option::Option<&crate::types::ExplainabilityConfig> {
        self.explainability_config.as_ref()
    }
    /// <p>Whether the visualization was enabled for the Explainability resource.</p>
    pub fn enable_visualization(&self) -> std::option::Option<bool> {
        self.enable_visualization
    }
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn data_source(&self) -> std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn schema(&self) -> std::option::Option<&crate::types::Schema> {
        self.schema.as_ref()
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the first time point in the Explainability.</p>
    pub fn start_date_time(&self) -> std::option::Option<&str> {
        self.start_date_time.as_deref()
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the last time point in the Explainability.</p>
    pub fn end_date_time(&self) -> std::option::Option<&str> {
        self.end_date_time.as_deref()
    }
    /// <p>The estimated time remaining in minutes for the <code>CreateExplainability</code> job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>If an error occurred, a message about the error.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The status of the Explainability resource. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>When the Explainability resource was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeExplainabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeExplainabilityOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExplainabilityOutput`](crate::operation::describe_explainability::DescribeExplainabilityOutput).
    pub fn builder(
    ) -> crate::operation::describe_explainability::builders::DescribeExplainabilityOutputBuilder
    {
        crate::operation::describe_explainability::builders::DescribeExplainabilityOutputBuilder::default()
    }
}

/// A builder for [`DescribeExplainabilityOutput`](crate::operation::describe_explainability::DescribeExplainabilityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeExplainabilityOutputBuilder {
    pub(crate) explainability_arn: std::option::Option<std::string::String>,
    pub(crate) explainability_name: std::option::Option<std::string::String>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) explainability_config: std::option::Option<crate::types::ExplainabilityConfig>,
    pub(crate) enable_visualization: std::option::Option<bool>,
    pub(crate) data_source: std::option::Option<crate::types::DataSource>,
    pub(crate) schema: std::option::Option<crate::types::Schema>,
    pub(crate) start_date_time: std::option::Option<std::string::String>,
    pub(crate) end_date_time: std::option::Option<std::string::String>,
    pub(crate) estimated_time_remaining_in_minutes: std::option::Option<i64>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeExplainabilityOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn explainability_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.explainability_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn set_explainability_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.explainability_arn = input;
        self
    }
    /// <p>The name of the Explainability.</p>
    pub fn explainability_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.explainability_name = Some(input.into());
        self
    }
    /// <p>The name of the Explainability.</p>
    pub fn set_explainability_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.explainability_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn explainability_config(mut self, input: crate::types::ExplainabilityConfig) -> Self {
        self.explainability_config = Some(input);
        self
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn set_explainability_config(
        mut self,
        input: std::option::Option<crate::types::ExplainabilityConfig>,
    ) -> Self {
        self.explainability_config = input;
        self
    }
    /// <p>Whether the visualization was enabled for the Explainability resource.</p>
    pub fn enable_visualization(mut self, input: bool) -> Self {
        self.enable_visualization = Some(input);
        self
    }
    /// <p>Whether the visualization was enabled for the Explainability resource.</p>
    pub fn set_enable_visualization(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_visualization = input;
        self
    }
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = Some(input);
        self
    }
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn set_data_source(mut self, input: std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn schema(mut self, input: crate::types::Schema) -> Self {
        self.schema = Some(input);
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn set_schema(mut self, input: std::option::Option<crate::types::Schema>) -> Self {
        self.schema = input;
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the first time point in the Explainability.</p>
    pub fn start_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_date_time = Some(input.into());
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the first time point in the Explainability.</p>
    pub fn set_start_date_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the last time point in the Explainability.</p>
    pub fn end_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.end_date_time = Some(input.into());
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, the last time point in the Explainability.</p>
    pub fn set_end_date_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.end_date_time = input;
        self
    }
    /// <p>The estimated time remaining in minutes for the <code>CreateExplainability</code> job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = Some(input);
        self
    }
    /// <p>The estimated time remaining in minutes for the <code>CreateExplainability</code> job to complete.</p>
    pub fn set_estimated_time_remaining_in_minutes(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>If an error occurred, a message about the error.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>If an error occurred, a message about the error.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The status of the Explainability resource. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the Explainability resource. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>When the Explainability resource was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the Explainability resource was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeExplainabilityOutput`](crate::operation::describe_explainability::DescribeExplainabilityOutput).
    pub fn build(self) -> crate::operation::describe_explainability::DescribeExplainabilityOutput {
        crate::operation::describe_explainability::DescribeExplainabilityOutput {
            explainability_arn: self.explainability_arn,
            explainability_name: self.explainability_name,
            resource_arn: self.resource_arn,
            explainability_config: self.explainability_config,
            enable_visualization: self.enable_visualization,
            data_source: self.data_source,
            schema: self.schema,
            start_date_time: self.start_date_time,
            end_date_time: self.end_date_time,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            message: self.message,
            status: self.status,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            _request_id: self._request_id,
        }
    }
}
