// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAutoPredictorOutput {
    /// <p>The Amazon Resource Name (ARN) of the predictor</p>
    #[doc(hidden)]
    pub predictor_arn: std::option::Option<std::string::String>,
    /// <p>The name of the predictor.</p>
    #[doc(hidden)]
    pub predictor_name: std::option::Option<std::string::String>,
    /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
    #[doc(hidden)]
    pub forecast_horizon: std::option::Option<i32>,
    /// <p>The forecast types used during predictor training. Default value is ["0.1","0.5","0.9"].</p>
    #[doc(hidden)]
    pub forecast_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    #[doc(hidden)]
    pub forecast_frequency: std::option::Option<std::string::String>,
    /// <p>An array of dimension (field) names that specify the attributes used to group your time series.</p>
    #[doc(hidden)]
    pub forecast_dimensions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    #[doc(hidden)]
    pub dataset_import_job_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The data configuration for your dataset group and any additional datasets.</p>
    #[doc(hidden)]
    pub data_config: std::option::Option<crate::types::DataConfig>,
    /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    #[doc(hidden)]
    pub encryption_config: std::option::Option<crate::types::EncryptionConfig>,
    /// <p>The ARN and state of the reference predictor. This parameter is only valid for retrained or upgraded predictors.</p>
    #[doc(hidden)]
    pub reference_predictor_summary: std::option::Option<crate::types::ReferencePredictorSummary>,
    /// <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    #[doc(hidden)]
    pub estimated_time_remaining_in_minutes: std::option::Option<i64>,
    /// <p>The status of the predictor. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>In the event of an error, a message detailing the cause of the error.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The timestamp of the CreateAutoPredictor request.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The accuracy metric used to optimize the predictor.</p>
    #[doc(hidden)]
    pub optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
    /// <p>Provides the status and ARN of the Predictor Explainability.</p>
    #[doc(hidden)]
    pub explainability_info: std::option::Option<crate::types::ExplainabilityInfo>,
    /// <p>A object with the Amazon Resource Name (ARN) and status of the monitor resource.</p>
    #[doc(hidden)]
    pub monitor_info: std::option::Option<crate::types::MonitorInfo>,
    /// <p>The time boundary Forecast uses when aggregating data.</p>
    #[doc(hidden)]
    pub time_alignment_boundary: std::option::Option<crate::types::TimeAlignmentBoundary>,
    _request_id: Option<String>,
}
impl DescribeAutoPredictorOutput {
    /// <p>The Amazon Resource Name (ARN) of the predictor</p>
    pub fn predictor_arn(&self) -> std::option::Option<&str> {
        self.predictor_arn.as_deref()
    }
    /// <p>The name of the predictor.</p>
    pub fn predictor_name(&self) -> std::option::Option<&str> {
        self.predictor_name.as_deref()
    }
    /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
    pub fn forecast_horizon(&self) -> std::option::Option<i32> {
        self.forecast_horizon
    }
    /// <p>The forecast types used during predictor training. Default value is ["0.1","0.5","0.9"].</p>
    pub fn forecast_types(&self) -> std::option::Option<&[std::string::String]> {
        self.forecast_types.as_deref()
    }
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    pub fn forecast_frequency(&self) -> std::option::Option<&str> {
        self.forecast_frequency.as_deref()
    }
    /// <p>An array of dimension (field) names that specify the attributes used to group your time series.</p>
    pub fn forecast_dimensions(&self) -> std::option::Option<&[std::string::String]> {
        self.forecast_dimensions.as_deref()
    }
    /// <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    pub fn dataset_import_job_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.dataset_import_job_arns.as_deref()
    }
    /// <p>The data configuration for your dataset group and any additional datasets.</p>
    pub fn data_config(&self) -> std::option::Option<&crate::types::DataConfig> {
        self.data_config.as_ref()
    }
    /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    pub fn encryption_config(&self) -> std::option::Option<&crate::types::EncryptionConfig> {
        self.encryption_config.as_ref()
    }
    /// <p>The ARN and state of the reference predictor. This parameter is only valid for retrained or upgraded predictors.</p>
    pub fn reference_predictor_summary(
        &self,
    ) -> std::option::Option<&crate::types::ReferencePredictorSummary> {
        self.reference_predictor_summary.as_ref()
    }
    /// <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the predictor. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>In the event of an error, a message detailing the cause of the error.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The timestamp of the CreateAutoPredictor request.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(&self) -> std::option::Option<&crate::types::OptimizationMetric> {
        self.optimization_metric.as_ref()
    }
    /// <p>Provides the status and ARN of the Predictor Explainability.</p>
    pub fn explainability_info(&self) -> std::option::Option<&crate::types::ExplainabilityInfo> {
        self.explainability_info.as_ref()
    }
    /// <p>A object with the Amazon Resource Name (ARN) and status of the monitor resource.</p>
    pub fn monitor_info(&self) -> std::option::Option<&crate::types::MonitorInfo> {
        self.monitor_info.as_ref()
    }
    /// <p>The time boundary Forecast uses when aggregating data.</p>
    pub fn time_alignment_boundary(
        &self,
    ) -> std::option::Option<&crate::types::TimeAlignmentBoundary> {
        self.time_alignment_boundary.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAutoPredictorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAutoPredictorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAutoPredictorOutput`](crate::operation::describe_auto_predictor::DescribeAutoPredictorOutput).
    pub fn builder(
    ) -> crate::operation::describe_auto_predictor::builders::DescribeAutoPredictorOutputBuilder
    {
        crate::operation::describe_auto_predictor::builders::DescribeAutoPredictorOutputBuilder::default()
    }
}

/// A builder for [`DescribeAutoPredictorOutput`](crate::operation::describe_auto_predictor::DescribeAutoPredictorOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeAutoPredictorOutputBuilder {
    pub(crate) predictor_arn: std::option::Option<std::string::String>,
    pub(crate) predictor_name: std::option::Option<std::string::String>,
    pub(crate) forecast_horizon: std::option::Option<i32>,
    pub(crate) forecast_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) forecast_frequency: std::option::Option<std::string::String>,
    pub(crate) forecast_dimensions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) dataset_import_job_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) data_config: std::option::Option<crate::types::DataConfig>,
    pub(crate) encryption_config: std::option::Option<crate::types::EncryptionConfig>,
    pub(crate) reference_predictor_summary:
        std::option::Option<crate::types::ReferencePredictorSummary>,
    pub(crate) estimated_time_remaining_in_minutes: std::option::Option<i64>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
    pub(crate) explainability_info: std::option::Option<crate::types::ExplainabilityInfo>,
    pub(crate) monitor_info: std::option::Option<crate::types::MonitorInfo>,
    pub(crate) time_alignment_boundary: std::option::Option<crate::types::TimeAlignmentBoundary>,
    _request_id: Option<String>,
}
impl DescribeAutoPredictorOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the predictor</p>
    pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.predictor_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor</p>
    pub fn set_predictor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.predictor_arn = input;
        self
    }
    /// <p>The name of the predictor.</p>
    pub fn predictor_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.predictor_name = Some(input.into());
        self
    }
    /// <p>The name of the predictor.</p>
    pub fn set_predictor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.predictor_name = input;
        self
    }
    /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
    pub fn forecast_horizon(mut self, input: i32) -> Self {
        self.forecast_horizon = Some(input);
        self
    }
    /// <p>The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p>
    pub fn set_forecast_horizon(mut self, input: std::option::Option<i32>) -> Self {
        self.forecast_horizon = input;
        self
    }
    /// Appends an item to `forecast_types`.
    ///
    /// To override the contents of this collection use [`set_forecast_types`](Self::set_forecast_types).
    ///
    /// <p>The forecast types used during predictor training. Default value is ["0.1","0.5","0.9"].</p>
    pub fn forecast_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.forecast_types.unwrap_or_default();
        v.push(input.into());
        self.forecast_types = Some(v);
        self
    }
    /// <p>The forecast types used during predictor training. Default value is ["0.1","0.5","0.9"].</p>
    pub fn set_forecast_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.forecast_types = input;
        self
    }
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    pub fn forecast_frequency(mut self, input: impl Into<std::string::String>) -> Self {
        self.forecast_frequency = Some(input.into());
        self
    }
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    pub fn set_forecast_frequency(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.forecast_frequency = input;
        self
    }
    /// Appends an item to `forecast_dimensions`.
    ///
    /// To override the contents of this collection use [`set_forecast_dimensions`](Self::set_forecast_dimensions).
    ///
    /// <p>An array of dimension (field) names that specify the attributes used to group your time series.</p>
    pub fn forecast_dimensions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.forecast_dimensions.unwrap_or_default();
        v.push(input.into());
        self.forecast_dimensions = Some(v);
        self
    }
    /// <p>An array of dimension (field) names that specify the attributes used to group your time series.</p>
    pub fn set_forecast_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.forecast_dimensions = input;
        self
    }
    /// Appends an item to `dataset_import_job_arns`.
    ///
    /// To override the contents of this collection use [`set_dataset_import_job_arns`](Self::set_dataset_import_job_arns).
    ///
    /// <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    pub fn dataset_import_job_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.dataset_import_job_arns.unwrap_or_default();
        v.push(input.into());
        self.dataset_import_job_arns = Some(v);
        self
    }
    /// <p>An array of the ARNs of the dataset import jobs used to import training data for the predictor.</p>
    pub fn set_dataset_import_job_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.dataset_import_job_arns = input;
        self
    }
    /// <p>The data configuration for your dataset group and any additional datasets.</p>
    pub fn data_config(mut self, input: crate::types::DataConfig) -> Self {
        self.data_config = Some(input);
        self
    }
    /// <p>The data configuration for your dataset group and any additional datasets.</p>
    pub fn set_data_config(mut self, input: std::option::Option<crate::types::DataConfig>) -> Self {
        self.data_config = input;
        self
    }
    /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    pub fn encryption_config(mut self, input: crate::types::EncryptionConfig) -> Self {
        self.encryption_config = Some(input);
        self
    }
    /// <p>An AWS Key Management Service (KMS) key and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the key. You can specify this optional object in the <code>CreateDataset</code> and <code>CreatePredictor</code> requests.</p>
    pub fn set_encryption_config(
        mut self,
        input: std::option::Option<crate::types::EncryptionConfig>,
    ) -> Self {
        self.encryption_config = input;
        self
    }
    /// <p>The ARN and state of the reference predictor. This parameter is only valid for retrained or upgraded predictors.</p>
    pub fn reference_predictor_summary(
        mut self,
        input: crate::types::ReferencePredictorSummary,
    ) -> Self {
        self.reference_predictor_summary = Some(input);
        self
    }
    /// <p>The ARN and state of the reference predictor. This parameter is only valid for retrained or upgraded predictors.</p>
    pub fn set_reference_predictor_summary(
        mut self,
        input: std::option::Option<crate::types::ReferencePredictorSummary>,
    ) -> Self {
        self.reference_predictor_summary = input;
        self
    }
    /// <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = Some(input);
        self
    }
    /// <p>The estimated time remaining in minutes for the predictor training job to complete.</p>
    pub fn set_estimated_time_remaining_in_minutes(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>The status of the predictor. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the predictor. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>In the event of an error, a message detailing the cause of the error.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>In the event of an error, a message detailing the cause of the error.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The timestamp of the CreateAutoPredictor request.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The timestamp of the CreateAutoPredictor request.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(mut self, input: crate::types::OptimizationMetric) -> Self {
        self.optimization_metric = Some(input);
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn set_optimization_metric(
        mut self,
        input: std::option::Option<crate::types::OptimizationMetric>,
    ) -> Self {
        self.optimization_metric = input;
        self
    }
    /// <p>Provides the status and ARN of the Predictor Explainability.</p>
    pub fn explainability_info(mut self, input: crate::types::ExplainabilityInfo) -> Self {
        self.explainability_info = Some(input);
        self
    }
    /// <p>Provides the status and ARN of the Predictor Explainability.</p>
    pub fn set_explainability_info(
        mut self,
        input: std::option::Option<crate::types::ExplainabilityInfo>,
    ) -> Self {
        self.explainability_info = input;
        self
    }
    /// <p>A object with the Amazon Resource Name (ARN) and status of the monitor resource.</p>
    pub fn monitor_info(mut self, input: crate::types::MonitorInfo) -> Self {
        self.monitor_info = Some(input);
        self
    }
    /// <p>A object with the Amazon Resource Name (ARN) and status of the monitor resource.</p>
    pub fn set_monitor_info(
        mut self,
        input: std::option::Option<crate::types::MonitorInfo>,
    ) -> Self {
        self.monitor_info = input;
        self
    }
    /// <p>The time boundary Forecast uses when aggregating data.</p>
    pub fn time_alignment_boundary(mut self, input: crate::types::TimeAlignmentBoundary) -> Self {
        self.time_alignment_boundary = Some(input);
        self
    }
    /// <p>The time boundary Forecast uses when aggregating data.</p>
    pub fn set_time_alignment_boundary(
        mut self,
        input: std::option::Option<crate::types::TimeAlignmentBoundary>,
    ) -> Self {
        self.time_alignment_boundary = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAutoPredictorOutput`](crate::operation::describe_auto_predictor::DescribeAutoPredictorOutput).
    pub fn build(self) -> crate::operation::describe_auto_predictor::DescribeAutoPredictorOutput {
        crate::operation::describe_auto_predictor::DescribeAutoPredictorOutput {
            predictor_arn: self.predictor_arn,
            predictor_name: self.predictor_name,
            forecast_horizon: self.forecast_horizon,
            forecast_types: self.forecast_types,
            forecast_frequency: self.forecast_frequency,
            forecast_dimensions: self.forecast_dimensions,
            dataset_import_job_arns: self.dataset_import_job_arns,
            data_config: self.data_config,
            encryption_config: self.encryption_config,
            reference_predictor_summary: self.reference_predictor_summary,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            optimization_metric: self.optimization_metric,
            explainability_info: self.explainability_info,
            monitor_info: self.monitor_info,
            time_alignment_boundary: self.time_alignment_boundary,
            _request_id: self._request_id,
        }
    }
}
