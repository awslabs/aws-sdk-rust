// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccuracyMetricsOutput {
    /// <p>An array of results from evaluating the predictor.</p>
    #[doc(hidden)]
    pub predictor_evaluation_results:
        std::option::Option<std::vec::Vec<crate::types::EvaluationResult>>,
    /// <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    #[doc(hidden)]
    pub is_auto_predictor: std::option::Option<bool>,
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    #[doc(hidden)]
    pub auto_ml_override_strategy: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    /// <p>The accuracy metric used to optimize the predictor.</p>
    #[doc(hidden)]
    pub optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
    _request_id: Option<String>,
}
impl GetAccuracyMetricsOutput {
    /// <p>An array of results from evaluating the predictor.</p>
    pub fn predictor_evaluation_results(
        &self,
    ) -> std::option::Option<&[crate::types::EvaluationResult]> {
        self.predictor_evaluation_results.as_deref()
    }
    /// <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    pub fn is_auto_predictor(&self) -> std::option::Option<bool> {
        self.is_auto_predictor
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn auto_ml_override_strategy(
        &self,
    ) -> std::option::Option<&crate::types::AutoMlOverrideStrategy> {
        self.auto_ml_override_strategy.as_ref()
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(&self) -> std::option::Option<&crate::types::OptimizationMetric> {
        self.optimization_metric.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccuracyMetricsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccuracyMetricsOutput {
    /// Creates a new builder-style object to manufacture [`GetAccuracyMetricsOutput`](crate::operation::get_accuracy_metrics::GetAccuracyMetricsOutput).
    pub fn builder(
    ) -> crate::operation::get_accuracy_metrics::builders::GetAccuracyMetricsOutputBuilder {
        crate::operation::get_accuracy_metrics::builders::GetAccuracyMetricsOutputBuilder::default()
    }
}

/// A builder for [`GetAccuracyMetricsOutput`](crate::operation::get_accuracy_metrics::GetAccuracyMetricsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetAccuracyMetricsOutputBuilder {
    pub(crate) predictor_evaluation_results:
        std::option::Option<std::vec::Vec<crate::types::EvaluationResult>>,
    pub(crate) is_auto_predictor: std::option::Option<bool>,
    pub(crate) auto_ml_override_strategy: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    pub(crate) optimization_metric: std::option::Option<crate::types::OptimizationMetric>,
    _request_id: Option<String>,
}
impl GetAccuracyMetricsOutputBuilder {
    /// Appends an item to `predictor_evaluation_results`.
    ///
    /// To override the contents of this collection use [`set_predictor_evaluation_results`](Self::set_predictor_evaluation_results).
    ///
    /// <p>An array of results from evaluating the predictor.</p>
    pub fn predictor_evaluation_results(mut self, input: crate::types::EvaluationResult) -> Self {
        let mut v = self.predictor_evaluation_results.unwrap_or_default();
        v.push(input);
        self.predictor_evaluation_results = Some(v);
        self
    }
    /// <p>An array of results from evaluating the predictor.</p>
    pub fn set_predictor_evaluation_results(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EvaluationResult>>,
    ) -> Self {
        self.predictor_evaluation_results = input;
        self
    }
    /// <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    pub fn is_auto_predictor(mut self, input: bool) -> Self {
        self.is_auto_predictor = Some(input);
        self
    }
    /// <p>Whether the predictor was created with <code>CreateAutoPredictor</code>.</p>
    pub fn set_is_auto_predictor(mut self, input: std::option::Option<bool>) -> Self {
        self.is_auto_predictor = input;
        self
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn auto_ml_override_strategy(
        mut self,
        input: crate::types::AutoMlOverrideStrategy,
    ) -> Self {
        self.auto_ml_override_strategy = Some(input);
        self
    }
    /// <note>
    /// <p> The <code>LatencyOptimized</code> AutoML override strategy is only available in private beta. Contact AWS Support or your account manager to learn more about access privileges. </p>
    /// </note>
    /// <p>The AutoML strategy used to train the predictor. Unless <code>LatencyOptimized</code> is specified, the AutoML strategy optimizes predictor accuracy.</p>
    /// <p>This parameter is only valid for predictors trained using AutoML.</p>
    pub fn set_auto_ml_override_strategy(
        mut self,
        input: std::option::Option<crate::types::AutoMlOverrideStrategy>,
    ) -> Self {
        self.auto_ml_override_strategy = input;
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn optimization_metric(mut self, input: crate::types::OptimizationMetric) -> Self {
        self.optimization_metric = Some(input);
        self
    }
    /// <p>The accuracy metric used to optimize the predictor.</p>
    pub fn set_optimization_metric(
        mut self,
        input: std::option::Option<crate::types::OptimizationMetric>,
    ) -> Self {
        self.optimization_metric = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetAccuracyMetricsOutput`](crate::operation::get_accuracy_metrics::GetAccuracyMetricsOutput).
    pub fn build(self) -> crate::operation::get_accuracy_metrics::GetAccuracyMetricsOutput {
        crate::operation::get_accuracy_metrics::GetAccuracyMetricsOutput {
            predictor_evaluation_results: self.predictor_evaluation_results,
            is_auto_predictor: self.is_auto_predictor,
            auto_ml_override_strategy: self.auto_ml_override_strategy,
            optimization_metric: self.optimization_metric,
            _request_id: self._request_id,
        }
    }
}
