// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_predictor_backtest_export_job::_create_predictor_backtest_export_job_output::CreatePredictorBacktestExportJobOutputBuilder;

pub use crate::operation::create_predictor_backtest_export_job::_create_predictor_backtest_export_job_input::CreatePredictorBacktestExportJobInputBuilder;

/// Fluent builder constructing a request to `CreatePredictorBacktestExportJob`.
///
/// <p>Exports backtest forecasts and accuracy metrics generated by the <code>CreateAutoPredictor</code> or <code>CreatePredictor</code> operations. Two folders containing CSV or Parquet files are exported to your specified S3 bucket.</p>
/// <p> The export file names will match the following conventions:</p>
/// <p> <code>
/// <exportjobname>
/// _
/// <exporttimestamp>
/// _
/// <partnumber>
/// .csv
/// </partnumber>
/// </exporttimestamp>
/// </exportjobname></code> </p>
/// <p>The <exporttimestamp>
/// component is in Java SimpleDate format (yyyy-MM-ddTHH-mm-ssZ).
/// </exporttimestamp></p>
/// <p>You must specify a <code>DataDestination</code> object that includes an Amazon S3 bucket and an AWS Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <code>aws-forecast-iam-roles</code>.</p> <note>
/// <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before you can access the export in your Amazon S3 bucket. To get the status, use the <code>DescribePredictorBacktestExportJob</code> operation.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePredictorBacktestExportJobFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_predictor_backtest_export_job::builders::CreatePredictorBacktestExportJobInputBuilder
            }
impl CreatePredictorBacktestExportJobFluentBuilder {
    /// Creates a new `CreatePredictorBacktestExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJob, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobOutput, aws_smithy_http::result::SdkError<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name for the backtest export job.</p>
    pub fn predictor_backtest_export_job_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.predictor_backtest_export_job_name(input.into());
        self
    }
    /// <p>The name for the backtest export job.</p>
    pub fn set_predictor_backtest_export_job_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_predictor_backtest_export_job_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor that you want to export.</p>
    pub fn predictor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.predictor_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the predictor that you want to export.</p>
    pub fn set_predictor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_predictor_arn(input);
        self
    }
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    pub fn destination(mut self, input: crate::types::DataDestination) -> Self {
        self.inner = self.inner.destination(input);
        self
    }
    /// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
    pub fn set_destination(
        mut self,
        input: std::option::Option<crate::types::DataDestination>,
    ) -> Self {
        self.inner = self.inner.set_destination(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata to help you categorize and organize your backtests. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
    /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
    /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
    /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
    /// </ul>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Optional metadata to help you categorize and organize your backtests. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
    /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
    /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
    /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
    /// </ul>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.format(input.into());
        self
    }
    /// <p>The format of the exported data, CSV or PARQUET. The default value is CSV.</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
}
