// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWhatIfAnalysisOutput {
    /// <p>The name of the what-if analysis.</p>
    #[doc(hidden)]
    pub what_if_analysis_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    #[doc(hidden)]
    pub what_if_analysis_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    #[doc(hidden)]
    pub forecast_arn: std::option::Option<std::string::String>,
    /// <p>The approximate time remaining to complete the what-if analysis, in minutes.</p>
    #[doc(hidden)]
    pub estimated_time_remaining_in_minutes: std::option::Option<i64>,
    /// <p>The status of the what-if analysis. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if analysis must be <code>ACTIVE</code> before you can access the analysis.</p>
    /// </note>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>If an error occurred, an informational message about the error.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>When the what-if analysis was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub time_series_selector: std::option::Option<crate::types::TimeSeriesSelector>,
    _request_id: Option<String>,
}
impl DescribeWhatIfAnalysisOutput {
    /// <p>The name of the what-if analysis.</p>
    pub fn what_if_analysis_name(&self) -> std::option::Option<&str> {
        self.what_if_analysis_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    pub fn what_if_analysis_arn(&self) -> std::option::Option<&str> {
        self.what_if_analysis_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn forecast_arn(&self) -> std::option::Option<&str> {
        self.forecast_arn.as_deref()
    }
    /// <p>The approximate time remaining to complete the what-if analysis, in minutes.</p>
    pub fn estimated_time_remaining_in_minutes(&self) -> std::option::Option<i64> {
        self.estimated_time_remaining_in_minutes
    }
    /// <p>The status of the what-if analysis. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if analysis must be <code>ACTIVE</code> before you can access the analysis.</p>
    /// </note>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>When the what-if analysis was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modification_time.as_ref()
    }
    /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    pub fn time_series_selector(&self) -> std::option::Option<&crate::types::TimeSeriesSelector> {
        self.time_series_selector.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeWhatIfAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeWhatIfAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWhatIfAnalysisOutput`](crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisOutput).
    pub fn builder(
    ) -> crate::operation::describe_what_if_analysis::builders::DescribeWhatIfAnalysisOutputBuilder
    {
        crate::operation::describe_what_if_analysis::builders::DescribeWhatIfAnalysisOutputBuilder::default()
    }
}

/// A builder for [`DescribeWhatIfAnalysisOutput`](crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeWhatIfAnalysisOutputBuilder {
    pub(crate) what_if_analysis_name: std::option::Option<std::string::String>,
    pub(crate) what_if_analysis_arn: std::option::Option<std::string::String>,
    pub(crate) forecast_arn: std::option::Option<std::string::String>,
    pub(crate) estimated_time_remaining_in_minutes: std::option::Option<i64>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_modification_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) time_series_selector: std::option::Option<crate::types::TimeSeriesSelector>,
    _request_id: Option<String>,
}
impl DescribeWhatIfAnalysisOutputBuilder {
    /// <p>The name of the what-if analysis.</p>
    pub fn what_if_analysis_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.what_if_analysis_name = Some(input.into());
        self
    }
    /// <p>The name of the what-if analysis.</p>
    pub fn set_what_if_analysis_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.what_if_analysis_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    pub fn what_if_analysis_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.what_if_analysis_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if analysis.</p>
    pub fn set_what_if_analysis_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.what_if_analysis_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn forecast_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.forecast_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the what-if forecast.</p>
    pub fn set_forecast_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.forecast_arn = input;
        self
    }
    /// <p>The approximate time remaining to complete the what-if analysis, in minutes.</p>
    pub fn estimated_time_remaining_in_minutes(mut self, input: i64) -> Self {
        self.estimated_time_remaining_in_minutes = Some(input);
        self
    }
    /// <p>The approximate time remaining to complete the what-if analysis, in minutes.</p>
    pub fn set_estimated_time_remaining_in_minutes(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.estimated_time_remaining_in_minutes = input;
        self
    }
    /// <p>The status of the what-if analysis. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if analysis must be <code>ACTIVE</code> before you can access the analysis.</p>
    /// </note>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the what-if analysis. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul> <note>
    /// <p>The <code>Status</code> of the what-if analysis must be <code>ACTIVE</code> before you can access the analysis.</p>
    /// </note>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>If an error occurred, an informational message about the error.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>When the what-if analysis was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>When the what-if analysis was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn last_modification_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modification_time = Some(input);
        self
    }
    /// <p>The last time the resource was modified. The timestamp depends on the status of the job:</p>
    /// <ul>
    /// <li> <p> <code>CREATE_PENDING</code> - The <code>CreationTime</code>.</p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code> - The current timestamp.</p> </li>
    /// <li> <p> <code>CREATE_STOPPED</code> - When the job stopped.</p> </li>
    /// <li> <p> <code>ACTIVE</code> or <code>CREATE_FAILED</code> - When the job finished or failed.</p> </li>
    /// </ul>
    pub fn set_last_modification_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modification_time = input;
        self
    }
    /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    pub fn time_series_selector(mut self, input: crate::types::TimeSeriesSelector) -> Self {
        self.time_series_selector = Some(input);
        self
    }
    /// <p>Defines the set of time series that are used to create the forecasts in a <code>TimeSeriesIdentifiers</code> object.</p>
    /// <p>The <code>TimeSeriesIdentifiers</code> object needs the following information:</p>
    /// <ul>
    /// <li> <p> <code>DataSource</code> </p> </li>
    /// <li> <p> <code>Format</code> </p> </li>
    /// <li> <p> <code>Schema</code> </p> </li>
    /// </ul>
    pub fn set_time_series_selector(
        mut self,
        input: std::option::Option<crate::types::TimeSeriesSelector>,
    ) -> Self {
        self.time_series_selector = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeWhatIfAnalysisOutput`](crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisOutput {
        crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisOutput {
            what_if_analysis_name: self.what_if_analysis_name,
            what_if_analysis_arn: self.what_if_analysis_arn,
            forecast_arn: self.forecast_arn,
            estimated_time_remaining_in_minutes: self.estimated_time_remaining_in_minutes,
            status: self.status,
            message: self.message,
            creation_time: self.creation_time,
            last_modification_time: self.last_modification_time,
            time_series_selector: self.time_series_selector,
            _request_id: self._request_id,
        }
    }
}
