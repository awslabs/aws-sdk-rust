// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_explainability::_create_explainability_output::CreateExplainabilityOutputBuilder;

pub use crate::operation::create_explainability::_create_explainability_input::CreateExplainabilityInputBuilder;

impl CreateExplainabilityInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_explainability::CreateExplainabilityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_explainability::CreateExplainabilityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_explainability();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateExplainability`.
///
/// <note>
/// <p>Explainability is only available for Forecasts and Predictors generated from an AutoPredictor (<code>CreateAutoPredictor</code>)</p>
/// </note>
/// <p>Creates an Amazon Forecast Explainability.</p>
/// <p>Explainability helps you better understand how the attributes in your datasets impact forecast. Amazon Forecast uses a metric called Impact scores to quantify the relative impact of each attribute and determine whether they increase or decrease forecast values.</p>
/// <p>To enable Forecast Explainability, your predictor must include at least one of the following: related time series, item metadata, or additional datasets like Holidays and the Weather Index.</p>
/// <p>CreateExplainability accepts either a Predictor ARN or Forecast ARN. To receive aggregated Impact scores for all time series and time points in your datasets, provide a Predictor ARN. To receive Impact scores for specific time series and time points, provide a Forecast ARN.</p>
/// <p> <b>CreateExplainability with a Predictor ARN</b> </p> <note>
/// <p>You can only have one Explainability resource per predictor. If you already enabled <code>ExplainPredictor</code> in <code>CreateAutoPredictor</code>, that predictor already has an Explainability resource.</p>
/// </note>
/// <p>The following parameters are required when providing a Predictor ARN:</p>
/// <ul>
/// <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li>
/// <li> <p> <code>ResourceArn</code> - The Arn of the predictor.</p> </li>
/// <li> <p> <code>TimePointGranularity</code> - Must be set to “ALL”.</p> </li>
/// <li> <p> <code>TimeSeriesGranularity</code> - Must be set to “ALL”.</p> </li>
/// </ul>
/// <p>Do not specify a value for the following parameters:</p>
/// <ul>
/// <li> <p> <code>DataSource</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li>
/// <li> <p> <code>Schema</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li>
/// <li> <p> <code>StartDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li>
/// <li> <p> <code>EndDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li>
/// </ul>
/// <p> <b>CreateExplainability with a Forecast ARN</b> </p> <note>
/// <p>You can specify a maximum of 50 time series and 500 time points.</p>
/// </note>
/// <p>The following parameters are required when providing a Predictor ARN:</p>
/// <ul>
/// <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li>
/// <li> <p> <code>ResourceArn</code> - The Arn of the forecast.</p> </li>
/// <li> <p> <code>TimePointGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li>
/// <li> <p> <code>TimeSeriesGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li>
/// </ul>
/// <p>If you set TimeSeriesGranularity to “SPECIFIC”, you must also provide the following:</p>
/// <ul>
/// <li> <p> <code>DataSource</code> - The S3 location of the CSV file specifying your time series.</p> </li>
/// <li> <p> <code>Schema</code> - The Schema defines the attributes and attribute types listed in the Data Source.</p> </li>
/// </ul>
/// <p>If you set TimePointGranularity to “SPECIFIC”, you must also provide the following:</p>
/// <ul>
/// <li> <p> <code>StartDateTime</code> - The first timestamp in the range of time points.</p> </li>
/// <li> <p> <code>EndDateTime</code> - The last timestamp in the range of time points.</p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateExplainabilityFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_explainability::builders::CreateExplainabilityInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_explainability::CreateExplainabilityOutput,
        crate::operation::create_explainability::CreateExplainabilityError,
    > for CreateExplainabilityFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_explainability::CreateExplainabilityOutput,
            crate::operation::create_explainability::CreateExplainabilityError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateExplainabilityFluentBuilder {
    /// Creates a new `CreateExplainability`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateExplainability as a reference.
    pub fn as_input(&self) -> &crate::operation::create_explainability::builders::CreateExplainabilityInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_explainability::CreateExplainabilityOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_explainability::CreateExplainabilityError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_explainability::CreateExplainability::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_explainability::CreateExplainability::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_explainability::CreateExplainabilityOutput,
        crate::operation::create_explainability::CreateExplainabilityError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique name for the Explainability.</p>
    pub fn explainability_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.explainability_name(input.into());
        self
    }
    /// <p>A unique name for the Explainability.</p>
    pub fn set_explainability_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_explainability_name(input);
        self
    }
    /// <p>A unique name for the Explainability.</p>
    pub fn get_explainability_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_explainability_name()
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Predictor or Forecast used to create the Explainability.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_arn()
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn explainability_config(mut self, input: crate::types::ExplainabilityConfig) -> Self {
        self.inner = self.inner.explainability_config(input);
        self
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn set_explainability_config(mut self, input: ::std::option::Option<crate::types::ExplainabilityConfig>) -> Self {
        self.inner = self.inner.set_explainability_config(input);
        self
    }
    /// <p>The configuration settings that define the granularity of time series and time points for the Explainability.</p>
    pub fn get_explainability_config(&self) -> &::std::option::Option<crate::types::ExplainabilityConfig> {
        self.inner.get_explainability_config()
    }
    /// <p>The source of your data, an Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an Key Management Service (KMS) key.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.inner = self.inner.data_source(input);
        self
    }
    /// <p>The source of your data, an Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an Key Management Service (KMS) key.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<crate::types::DataSource>) -> Self {
        self.inner = self.inner.set_data_source(input);
        self
    }
    /// <p>The source of your data, an Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an Key Management Service (KMS) key.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<crate::types::DataSource> {
        self.inner.get_data_source()
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn schema(mut self, input: crate::types::Schema) -> Self {
        self.inner = self.inner.schema(input);
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn set_schema(mut self, input: ::std::option::Option<crate::types::Schema>) -> Self {
        self.inner = self.inner.set_schema(input);
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn get_schema(&self) -> &::std::option::Option<crate::types::Schema> {
        self.inner.get_schema()
    }
    /// <p>Create an Explainability visualization that is viewable within the Amazon Web Services console.</p>
    pub fn enable_visualization(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_visualization(input);
        self
    }
    /// <p>Create an Explainability visualization that is viewable within the Amazon Web Services console.</p>
    pub fn set_enable_visualization(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_visualization(input);
        self
    }
    /// <p>Create an Explainability visualization that is viewable within the Amazon Web Services console.</p>
    pub fn get_enable_visualization(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_visualization()
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn start_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.start_date_time(input.into());
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_start_date_time(input);
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the first point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_start_date_time()
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn end_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.end_date_time(input.into());
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn set_end_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_end_date_time(input);
        self
    }
    /// <p>If <code>TimePointGranularity</code> is set to <code>SPECIFIC</code>, define the last time point for the Explainability.</p>
    /// <p>Use the following timestamp format: yyyy-MM-ddTHH:mm:ss (example: 2015-01-01T20:00:00)</p>
    pub fn get_end_date_time(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_end_date_time()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
    /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
    /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
    /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
    /// </ul>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
    /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
    /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
    /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Optional metadata to help you categorize and organize your resources. Each tag consists of a key and an optional value, both of which you define. Tag keys and values are case sensitive.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>For each resource, each tag key must be unique and each tag key must have one value.</p> </li>
    /// <li> <p>Maximum number of tags per resource: 50.</p> </li>
    /// <li> <p>Maximum key length: 128 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Maximum value length: 256 Unicode characters in UTF-8.</p> </li>
    /// <li> <p>Accepted characters: all letters and numbers, spaces representable in UTF-8, and + - = . _ : / @. If your tagging schema is used across other services and resources, the character restrictions of those services also apply. </p> </li>
    /// <li> <p>Key prefixes cannot include any upper or lowercase combination of <code>aws:</code> or <code>AWS:</code>. Values can have this prefix. If a tag value has <code>aws</code> as its prefix but the key does not, Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of <code>aws</code> do not count against your tags per resource limit. You cannot edit or delete tag keys with this prefix.</p> </li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
