// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>We can't process the request because it includes an invalid value or a value that exceeds the valid range.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    /// <p>The token is not valid. Tokens expire after 24 hours.</p>
    InvalidNextTokenException(crate::types::error::InvalidNextTokenException),
    /// <p>The limit on the number of resources per account has been exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>There is already a resource with this name. Try again with a different name.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>The specified resource is in use.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>We can't find a resource with that Amazon Resource Name (ARN). Check the ARN and try again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_auto_predictor::CreateAutoPredictorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_auto_predictor::CreateAutoPredictorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_auto_predictor::CreateAutoPredictorError> for Error {
    fn from(err: crate::operation::create_auto_predictor::CreateAutoPredictorError) -> Self {
        match err {
            crate::operation::create_auto_predictor::CreateAutoPredictorError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_auto_predictor::CreateAutoPredictorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_auto_predictor::CreateAutoPredictorError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_auto_predictor::CreateAutoPredictorError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_auto_predictor::CreateAutoPredictorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_auto_predictor::CreateAutoPredictorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_dataset::CreateDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_dataset::CreateDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset::CreateDatasetError> for Error {
    fn from(err: crate::operation::create_dataset::CreateDatasetError) -> Self {
        match err {
            crate::operation::create_dataset::CreateDatasetError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_dataset::CreateDatasetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_dataset::CreateDatasetError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_dataset::CreateDatasetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_dataset_group::CreateDatasetGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_dataset_group::CreateDatasetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset_group::CreateDatasetGroupError> for Error {
    fn from(err: crate::operation::create_dataset_group::CreateDatasetGroupError) -> Self {
        match err {
            crate::operation::create_dataset_group::CreateDatasetGroupError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_dataset_group::CreateDatasetGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_dataset_group::CreateDatasetGroupError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_dataset_group::CreateDatasetGroupError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_dataset_group::CreateDatasetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_dataset_group::CreateDatasetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset_import_job::CreateDatasetImportJobError> for Error {
    fn from(err: crate::operation::create_dataset_import_job::CreateDatasetImportJobError) -> Self {
        match err {
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_dataset_import_job::CreateDatasetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_explainability::CreateExplainabilityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_explainability::CreateExplainabilityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_explainability::CreateExplainabilityError> for Error {
    fn from(err: crate::operation::create_explainability::CreateExplainabilityError) -> Self {
        match err {
            crate::operation::create_explainability::CreateExplainabilityError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_explainability::CreateExplainabilityError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_explainability::CreateExplainabilityError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_explainability::CreateExplainabilityError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_explainability::CreateExplainabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_explainability::CreateExplainabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_explainability_export::CreateExplainabilityExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_explainability_export::CreateExplainabilityExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_explainability_export::CreateExplainabilityExportError>
    for Error
{
    fn from(
        err: crate::operation::create_explainability_export::CreateExplainabilityExportError,
    ) -> Self {
        match err {
            crate::operation::create_explainability_export::CreateExplainabilityExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_explainability_export::CreateExplainabilityExportError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_explainability_export::CreateExplainabilityExportError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_explainability_export::CreateExplainabilityExportError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_explainability_export::CreateExplainabilityExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_explainability_export::CreateExplainabilityExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_forecast::CreateForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_forecast::CreateForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_forecast::CreateForecastError> for Error {
    fn from(err: crate::operation::create_forecast::CreateForecastError) -> Self {
        match err {
            crate::operation::create_forecast::CreateForecastError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_forecast::CreateForecastError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_forecast::CreateForecastError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_forecast::CreateForecastError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_forecast::CreateForecastError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_forecast::CreateForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_forecast_export_job::CreateForecastExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_forecast_export_job::CreateForecastExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_forecast_export_job::CreateForecastExportJobError> for Error {
    fn from(
        err: crate::operation::create_forecast_export_job::CreateForecastExportJobError,
    ) -> Self {
        match err {
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_forecast_export_job::CreateForecastExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_monitor::CreateMonitorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_monitor::CreateMonitorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_monitor::CreateMonitorError> for Error {
    fn from(err: crate::operation::create_monitor::CreateMonitorError) -> Self {
        match err {
            crate::operation::create_monitor::CreateMonitorError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_monitor::CreateMonitorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_monitor::CreateMonitorError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_monitor::CreateMonitorError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_monitor::CreateMonitorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_monitor::CreateMonitorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_predictor::CreatePredictorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_predictor::CreatePredictorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_predictor::CreatePredictorError> for Error {
    fn from(err: crate::operation::create_predictor::CreatePredictorError) -> Self {
        match err {
            crate::operation::create_predictor::CreatePredictorError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_predictor::CreatePredictorError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_predictor::CreatePredictorError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_predictor::CreatePredictorError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_predictor::CreatePredictorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_predictor::CreatePredictorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError> for Error {
    fn from(err: crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError) -> Self {
        match err {
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_predictor_backtest_export_job::CreatePredictorBacktestExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError> for Error {
    fn from(err: crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError) -> Self {
        match err {
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_what_if_analysis::CreateWhatIfAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_what_if_forecast::CreateWhatIfForecastError> for Error {
    fn from(err: crate::operation::create_what_if_forecast::CreateWhatIfForecastError) -> Self {
        match err {
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_what_if_forecast::CreateWhatIfForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError>
    for Error
{
    fn from(
        err: crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError,
    ) -> Self {
        match err {
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_what_if_forecast_export::CreateWhatIfForecastExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_dataset::DeleteDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset::DeleteDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset::DeleteDatasetError> for Error {
    fn from(err: crate::operation::delete_dataset::DeleteDatasetError) -> Self {
        match err {
            crate::operation::delete_dataset::DeleteDatasetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset_group::DeleteDatasetGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset_group::DeleteDatasetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset_group::DeleteDatasetGroupError> for Error {
    fn from(err: crate::operation::delete_dataset_group::DeleteDatasetGroupError) -> Self {
        match err {
            crate::operation::delete_dataset_group::DeleteDatasetGroupError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_dataset_group::DeleteDatasetGroupError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_dataset_group::DeleteDatasetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset_group::DeleteDatasetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError> for Error {
    fn from(err: crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError) -> Self {
        match err {
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset_import_job::DeleteDatasetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_explainability::DeleteExplainabilityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_explainability::DeleteExplainabilityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_explainability::DeleteExplainabilityError> for Error {
    fn from(err: crate::operation::delete_explainability::DeleteExplainabilityError) -> Self {
        match err {
            crate::operation::delete_explainability::DeleteExplainabilityError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_explainability::DeleteExplainabilityError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_explainability::DeleteExplainabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_explainability::DeleteExplainabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_explainability_export::DeleteExplainabilityExportError>
    for Error
{
    fn from(
        err: crate::operation::delete_explainability_export::DeleteExplainabilityExportError,
    ) -> Self {
        match err {
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_explainability_export::DeleteExplainabilityExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_forecast::DeleteForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_forecast::DeleteForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_forecast::DeleteForecastError> for Error {
    fn from(err: crate::operation::delete_forecast::DeleteForecastError) -> Self {
        match err {
            crate::operation::delete_forecast::DeleteForecastError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::delete_forecast::DeleteForecastError::ResourceInUseException(
                inner,
            ) => Error::ResourceInUseException(inner),
            crate::operation::delete_forecast::DeleteForecastError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_forecast::DeleteForecastError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_forecast_export_job::DeleteForecastExportJobError> for Error {
    fn from(
        err: crate::operation::delete_forecast_export_job::DeleteForecastExportJobError,
    ) -> Self {
        match err {
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_forecast_export_job::DeleteForecastExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_monitor::DeleteMonitorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_monitor::DeleteMonitorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_monitor::DeleteMonitorError> for Error {
    fn from(err: crate::operation::delete_monitor::DeleteMonitorError) -> Self {
        match err {
            crate::operation::delete_monitor::DeleteMonitorError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::delete_monitor::DeleteMonitorError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_monitor::DeleteMonitorError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_monitor::DeleteMonitorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_predictor::DeletePredictorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_predictor::DeletePredictorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_predictor::DeletePredictorError> for Error {
    fn from(err: crate::operation::delete_predictor::DeletePredictorError) -> Self {
        match err {
            crate::operation::delete_predictor::DeletePredictorError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::delete_predictor::DeletePredictorError::ResourceInUseException(
                inner,
            ) => Error::ResourceInUseException(inner),
            crate::operation::delete_predictor::DeletePredictorError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_predictor::DeletePredictorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError> for Error {
    fn from(err: crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError) -> Self {
        match err {
            crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_predictor_backtest_export_job::DeletePredictorBacktestExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_tree::DeleteResourceTreeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_resource_tree::DeleteResourceTreeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_tree::DeleteResourceTreeError> for Error {
    fn from(err: crate::operation::delete_resource_tree::DeleteResourceTreeError) -> Self {
        match err {
            crate::operation::delete_resource_tree::DeleteResourceTreeError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_resource_tree::DeleteResourceTreeError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_resource_tree::DeleteResourceTreeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_resource_tree::DeleteResourceTreeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError> for Error {
    fn from(err: crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError) -> Self {
        match err {
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_what_if_analysis::DeleteWhatIfAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError> for Error {
    fn from(err: crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError) -> Self {
        match err {
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_what_if_forecast::DeleteWhatIfForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError>
    for Error
{
    fn from(
        err: crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError,
    ) -> Self {
        match err {
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_what_if_forecast_export::DeleteWhatIfForecastExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_predictor::DescribeAutoPredictorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_auto_predictor::DescribeAutoPredictorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_auto_predictor::DescribeAutoPredictorError> for Error {
    fn from(err: crate::operation::describe_auto_predictor::DescribeAutoPredictorError) -> Self {
        match err {
            crate::operation::describe_auto_predictor::DescribeAutoPredictorError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_auto_predictor::DescribeAutoPredictorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_auto_predictor::DescribeAutoPredictorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset::DescribeDatasetError> for Error {
    fn from(err: crate::operation::describe_dataset::DescribeDatasetError) -> Self {
        match err {
            crate::operation::describe_dataset::DescribeDatasetError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset_group::DescribeDatasetGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset_group::DescribeDatasetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset_group::DescribeDatasetGroupError> for Error {
    fn from(err: crate::operation::describe_dataset_group::DescribeDatasetGroupError) -> Self {
        match err {
            crate::operation::describe_dataset_group::DescribeDatasetGroupError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_dataset_group::DescribeDatasetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset_group::DescribeDatasetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError> for Error {
    fn from(
        err: crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError,
    ) -> Self {
        match err {
            crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset_import_job::DescribeDatasetImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_explainability::DescribeExplainabilityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_explainability::DescribeExplainabilityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_explainability::DescribeExplainabilityError> for Error {
    fn from(err: crate::operation::describe_explainability::DescribeExplainabilityError) -> Self {
        match err {
            crate::operation::describe_explainability::DescribeExplainabilityError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_explainability::DescribeExplainabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_explainability::DescribeExplainabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_explainability_export::DescribeExplainabilityExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_explainability_export::DescribeExplainabilityExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_explainability_export::DescribeExplainabilityExportError>
    for Error
{
    fn from(
        err: crate::operation::describe_explainability_export::DescribeExplainabilityExportError,
    ) -> Self {
        match err {
            crate::operation::describe_explainability_export::DescribeExplainabilityExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_explainability_export::DescribeExplainabilityExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_explainability_export::DescribeExplainabilityExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_forecast::DescribeForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_forecast::DescribeForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_forecast::DescribeForecastError> for Error {
    fn from(err: crate::operation::describe_forecast::DescribeForecastError) -> Self {
        match err {
            crate::operation::describe_forecast::DescribeForecastError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_forecast::DescribeForecastError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_forecast::DescribeForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_forecast_export_job::DescribeForecastExportJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_forecast_export_job::DescribeForecastExportJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_forecast_export_job::DescribeForecastExportJobError>
    for Error
{
    fn from(
        err: crate::operation::describe_forecast_export_job::DescribeForecastExportJobError,
    ) -> Self {
        match err {
            crate::operation::describe_forecast_export_job::DescribeForecastExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_forecast_export_job::DescribeForecastExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_forecast_export_job::DescribeForecastExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_monitor::DescribeMonitorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_monitor::DescribeMonitorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_monitor::DescribeMonitorError> for Error {
    fn from(err: crate::operation::describe_monitor::DescribeMonitorError) -> Self {
        match err {
            crate::operation::describe_monitor::DescribeMonitorError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::describe_monitor::DescribeMonitorError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_monitor::DescribeMonitorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_predictor::DescribePredictorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_predictor::DescribePredictorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_predictor::DescribePredictorError> for Error {
    fn from(err: crate::operation::describe_predictor::DescribePredictorError) -> Self {
        match err {
            crate::operation::describe_predictor::DescribePredictorError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_predictor::DescribePredictorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_predictor::DescribePredictorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError> for Error {
    fn from(err: crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError) -> Self {
        match err {
            crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_predictor_backtest_export_job::DescribePredictorBacktestExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError> for Error {
    fn from(err: crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError) -> Self {
        match err {
            crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_what_if_analysis::DescribeWhatIfAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError> for Error {
    fn from(err: crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError) -> Self {
        match err {
            crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_what_if_forecast::DescribeWhatIfForecastError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError>
    for Error
{
    fn from(
        err: crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError,
    ) -> Self {
        match err {
            crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_what_if_forecast_export::DescribeWhatIfForecastExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_accuracy_metrics::GetAccuracyMetricsError> for Error {
    fn from(err: crate::operation::get_accuracy_metrics::GetAccuracyMetricsError) -> Self {
        match err {
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_accuracy_metrics::GetAccuracyMetricsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_groups::ListDatasetGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_groups::ListDatasetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dataset_groups::ListDatasetGroupsError> for Error {
    fn from(err: crate::operation::list_dataset_groups::ListDatasetGroupsError) -> Self {
        match err {
            crate::operation::list_dataset_groups::ListDatasetGroupsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_dataset_groups::ListDatasetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError> for Error {
    fn from(err: crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError) -> Self {
        match err {
            crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_dataset_import_jobs::ListDatasetImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_datasets::ListDatasetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_datasets::ListDatasetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_datasets::ListDatasetsError> for Error {
    fn from(err: crate::operation::list_datasets::ListDatasetsError) -> Self {
        match err {
            crate::operation::list_datasets::ListDatasetsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::list_datasets::ListDatasetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_explainabilities::ListExplainabilitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_explainabilities::ListExplainabilitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_explainabilities::ListExplainabilitiesError> for Error {
    fn from(err: crate::operation::list_explainabilities::ListExplainabilitiesError) -> Self {
        match err {
            crate::operation::list_explainabilities::ListExplainabilitiesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_explainabilities::ListExplainabilitiesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_explainabilities::ListExplainabilitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_explainability_exports::ListExplainabilityExportsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_explainability_exports::ListExplainabilityExportsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_explainability_exports::ListExplainabilityExportsError> for Error {
    fn from(
        err: crate::operation::list_explainability_exports::ListExplainabilityExportsError,
    ) -> Self {
        match err {
            crate::operation::list_explainability_exports::ListExplainabilityExportsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_explainability_exports::ListExplainabilityExportsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_explainability_exports::ListExplainabilityExportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_forecast_export_jobs::ListForecastExportJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_forecast_export_jobs::ListForecastExportJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_forecast_export_jobs::ListForecastExportJobsError> for Error {
    fn from(err: crate::operation::list_forecast_export_jobs::ListForecastExportJobsError) -> Self {
        match err {
            crate::operation::list_forecast_export_jobs::ListForecastExportJobsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_forecast_export_jobs::ListForecastExportJobsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_forecast_export_jobs::ListForecastExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_forecasts::ListForecastsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_forecasts::ListForecastsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_forecasts::ListForecastsError> for Error {
    fn from(err: crate::operation::list_forecasts::ListForecastsError) -> Self {
        match err {
            crate::operation::list_forecasts::ListForecastsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::list_forecasts::ListForecastsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::list_forecasts::ListForecastsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError> for Error {
    fn from(err: crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError) -> Self {
        match err {
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_monitor_evaluations::ListMonitorEvaluationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_monitors::ListMonitorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_monitors::ListMonitorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_monitors::ListMonitorsError> for Error {
    fn from(err: crate::operation::list_monitors::ListMonitorsError) -> Self {
        match err {
            crate::operation::list_monitors::ListMonitorsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::list_monitors::ListMonitorsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::list_monitors::ListMonitorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError,
    > for Error
{
    fn from(
        err: crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError,
    ) -> Self {
        match err {
            crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_predictors::ListPredictorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_predictors::ListPredictorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_predictors::ListPredictorsError> for Error {
    fn from(err: crate::operation::list_predictors::ListPredictorsError) -> Self {
        match err {
            crate::operation::list_predictors::ListPredictorsError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::list_predictors::ListPredictorsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::list_predictors::ListPredictorsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_analyses::ListWhatIfAnalysesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_analyses::ListWhatIfAnalysesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_what_if_analyses::ListWhatIfAnalysesError> for Error {
    fn from(err: crate::operation::list_what_if_analyses::ListWhatIfAnalysesError) -> Self {
        match err {
            crate::operation::list_what_if_analyses::ListWhatIfAnalysesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_what_if_analyses::ListWhatIfAnalysesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_what_if_analyses::ListWhatIfAnalysesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError>
    for Error
{
    fn from(
        err: crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError,
    ) -> Self {
        match err {
            crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_forecasts::ListWhatIfForecastsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_what_if_forecasts::ListWhatIfForecastsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_what_if_forecasts::ListWhatIfForecastsError> for Error {
    fn from(err: crate::operation::list_what_if_forecasts::ListWhatIfForecastsError) -> Self {
        match err {
            crate::operation::list_what_if_forecasts::ListWhatIfForecastsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_what_if_forecasts::ListWhatIfForecastsError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::list_what_if_forecasts::ListWhatIfForecastsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::resume_resource::ResumeResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::resume_resource::ResumeResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resume_resource::ResumeResourceError> for Error {
    fn from(err: crate::operation::resume_resource::ResumeResourceError) -> Self {
        match err {
            crate::operation::resume_resource::ResumeResourceError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::resume_resource::ResumeResourceError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::resume_resource::ResumeResourceError::ResourceInUseException(
                inner,
            ) => Error::ResourceInUseException(inner),
            crate::operation::resume_resource::ResumeResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::resume_resource::ResumeResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::stop_resource::StopResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_resource::StopResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_resource::StopResourceError> for Error {
    fn from(err: crate::operation::stop_resource::StopResourceError) -> Self {
        match err {
            crate::operation::stop_resource::StopResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::stop_resource::StopResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::stop_resource::StopResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_resource::StopResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_dataset_group::UpdateDatasetGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_dataset_group::UpdateDatasetGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_dataset_group::UpdateDatasetGroupError> for Error {
    fn from(err: crate::operation::update_dataset_group::UpdateDatasetGroupError) -> Self {
        match err {
            crate::operation::update_dataset_group::UpdateDatasetGroupError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_dataset_group::UpdateDatasetGroupError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_dataset_group::UpdateDatasetGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_dataset_group::UpdateDatasetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
