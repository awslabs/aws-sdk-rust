// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn data_config_correct_errors(mut builder: crate::types::builders::DataConfigBuilder) -> crate::types::builders::DataConfigBuilder {
    if builder.dataset_group_arn.is_none() {
        builder.dataset_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn data_destination_correct_errors(
    mut builder: crate::types::builders::DataDestinationBuilder,
) -> crate::types::builders::DataDestinationBuilder {
    if builder.s3_config.is_none() {
        builder.s3_config = {
            let builder = crate::types::builders::S3ConfigBuilder::default();
            crate::serde_util::s3_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.s3_config.is_none() {
        builder.s3_config = {
            let builder = crate::types::builders::S3ConfigBuilder::default();
            crate::serde_util::s3_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn encryption_config_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigBuilder,
) -> crate::types::builders::EncryptionConfigBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn explainability_config_correct_errors(
    mut builder: crate::types::builders::ExplainabilityConfigBuilder,
) -> crate::types::builders::ExplainabilityConfigBuilder {
    if builder.time_series_granularity.is_none() {
        builder.time_series_granularity = "no value was set".parse::<crate::types::TimeSeriesGranularity>().ok()
    }
    if builder.time_point_granularity.is_none() {
        builder.time_point_granularity = "no value was set".parse::<crate::types::TimePointGranularity>().ok()
    }
    builder
}

pub(crate) fn featurization_config_correct_errors(
    mut builder: crate::types::builders::FeaturizationConfigBuilder,
) -> crate::types::builders::FeaturizationConfigBuilder {
    if builder.forecast_frequency.is_none() {
        builder.forecast_frequency = Some(Default::default())
    }
    builder
}

pub(crate) fn input_data_config_correct_errors(
    mut builder: crate::types::builders::InputDataConfigBuilder,
) -> crate::types::builders::InputDataConfigBuilder {
    if builder.dataset_group_arn.is_none() {
        builder.dataset_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn time_series_replacements_data_source_correct_errors(
    mut builder: crate::types::builders::TimeSeriesReplacementsDataSourceBuilder,
) -> crate::types::builders::TimeSeriesReplacementsDataSourceBuilder {
    if builder.s3_config.is_none() {
        builder.s3_config = {
            let builder = crate::types::builders::S3ConfigBuilder::default();
            crate::serde_util::s3_config_correct_errors(builder).build().ok()
        }
    }
    if builder.schema.is_none() {
        builder.schema = {
            let builder = crate::types::builders::SchemaBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn action_correct_errors(mut builder: crate::types::builders::ActionBuilder) -> crate::types::builders::ActionBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.operation.is_none() {
        builder.operation = "no value was set".parse::<crate::types::Operation>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn additional_dataset_correct_errors(
    mut builder: crate::types::builders::AdditionalDatasetBuilder,
) -> crate::types::builders::AdditionalDatasetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn attribute_config_correct_errors(
    mut builder: crate::types::builders::AttributeConfigBuilder,
) -> crate::types::builders::AttributeConfigBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.transformations.is_none() {
        builder.transformations = Some(Default::default())
    }
    builder
}

pub(crate) fn featurization_correct_errors(
    mut builder: crate::types::builders::FeaturizationBuilder,
) -> crate::types::builders::FeaturizationBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn supplementary_feature_correct_errors(
    mut builder: crate::types::builders::SupplementaryFeatureBuilder,
) -> crate::types::builders::SupplementaryFeatureBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn categorical_parameter_range_correct_errors(
    mut builder: crate::types::builders::CategoricalParameterRangeBuilder,
) -> crate::types::builders::CategoricalParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.values.is_none() {
        builder.values = Some(Default::default())
    }
    builder
}

pub(crate) fn continuous_parameter_range_correct_errors(
    mut builder: crate::types::builders::ContinuousParameterRangeBuilder,
) -> crate::types::builders::ContinuousParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    builder
}

pub(crate) fn integer_parameter_range_correct_errors(
    mut builder: crate::types::builders::IntegerParameterRangeBuilder,
) -> crate::types::builders::IntegerParameterRangeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.max_value.is_none() {
        builder.max_value = Some(Default::default())
    }
    if builder.min_value.is_none() {
        builder.min_value = Some(Default::default())
    }
    builder
}

pub(crate) fn time_series_condition_correct_errors(
    mut builder: crate::types::builders::TimeSeriesConditionBuilder,
) -> crate::types::builders::TimeSeriesConditionBuilder {
    if builder.attribute_name.is_none() {
        builder.attribute_name = Some(Default::default())
    }
    if builder.attribute_value.is_none() {
        builder.attribute_value = Some(Default::default())
    }
    if builder.condition.is_none() {
        builder.condition = "no value was set".parse::<crate::types::Condition>().ok()
    }
    builder
}

pub(crate) fn featurization_method_correct_errors(
    mut builder: crate::types::builders::FeaturizationMethodBuilder,
) -> crate::types::builders::FeaturizationMethodBuilder {
    if builder.featurization_method_name.is_none() {
        builder.featurization_method_name = "no value was set".parse::<crate::types::FeaturizationMethodName>().ok()
    }
    builder
}
