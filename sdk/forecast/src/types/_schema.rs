// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the fields of a dataset.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Schema {
    /// <p>An array of attributes specifying the name and type of each field in a dataset.</p>
    pub attributes: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAttribute>>,
}
impl Schema {
    /// <p>An array of attributes specifying the name and type of each field in a dataset.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.attributes.is_none()`.
    pub fn attributes(&self) -> &[crate::types::SchemaAttribute] {
        self.attributes.as_deref().unwrap_or_default()
    }
}
impl Schema {
    /// Creates a new builder-style object to manufacture [`Schema`](crate::types::Schema).
    pub fn builder() -> crate::types::builders::SchemaBuilder {
        crate::types::builders::SchemaBuilder::default()
    }
}

/// A builder for [`Schema`](crate::types::Schema).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SchemaBuilder {
    pub(crate) attributes: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAttribute>>,
}
impl SchemaBuilder {
    /// Appends an item to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>An array of attributes specifying the name and type of each field in a dataset.</p>
    pub fn attributes(mut self, input: crate::types::SchemaAttribute) -> Self {
        let mut v = self.attributes.unwrap_or_default();
        v.push(input);
        self.attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of attributes specifying the name and type of each field in a dataset.</p>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SchemaAttribute>>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>An array of attributes specifying the name and type of each field in a dataset.</p>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SchemaAttribute>> {
        &self.attributes
    }
    /// Consumes the builder and constructs a [`Schema`](crate::types::Schema).
    pub fn build(self) -> crate::types::Schema {
        crate::types::Schema { attributes: self.attributes }
    }
}
