// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status, start time, and end time of a backtest, as well as a failure reason if applicable.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestWindowSummary {
    /// <p>The time at which the test began.</p>
    #[doc(hidden)]
    pub test_window_start: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the test ended.</p>
    #[doc(hidden)]
    pub test_window_end: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the test. Possible status values are:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>If the test failed, the reason why it failed.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
}
impl TestWindowSummary {
    /// <p>The time at which the test began.</p>
    pub fn test_window_start(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.test_window_start.as_ref()
    }
    /// <p>The time at which the test ended.</p>
    pub fn test_window_end(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.test_window_end.as_ref()
    }
    /// <p>The status of the test. Possible status values are:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>If the test failed, the reason why it failed.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl TestWindowSummary {
    /// Creates a new builder-style object to manufacture [`TestWindowSummary`](crate::types::TestWindowSummary).
    pub fn builder() -> crate::types::builders::TestWindowSummaryBuilder {
        crate::types::builders::TestWindowSummaryBuilder::default()
    }
}

/// A builder for [`TestWindowSummary`](crate::types::TestWindowSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestWindowSummaryBuilder {
    pub(crate) test_window_start: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) test_window_end: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
}
impl TestWindowSummaryBuilder {
    /// <p>The time at which the test began.</p>
    pub fn test_window_start(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.test_window_start = Some(input);
        self
    }
    /// <p>The time at which the test began.</p>
    pub fn set_test_window_start(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.test_window_start = input;
        self
    }
    /// <p>The time at which the test ended.</p>
    pub fn test_window_end(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.test_window_end = Some(input);
        self
    }
    /// <p>The time at which the test ended.</p>
    pub fn set_test_window_end(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.test_window_end = input;
        self
    }
    /// <p>The status of the test. Possible status values are:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the test. Possible status values are:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>If the test failed, the reason why it failed.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>If the test failed, the reason why it failed.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Consumes the builder and constructs a [`TestWindowSummary`](crate::types::TestWindowSummary).
    pub fn build(self) -> crate::types::TestWindowSummary {
        crate::types::TestWindowSummary {
            test_window_start: self.test_window_start,
            test_window_end: self.test_window_end,
            status: self.status,
            message: self.message,
        }
    }
}
