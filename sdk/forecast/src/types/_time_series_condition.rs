// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates a subset of items within an attribute that are modified. For example, you can use this operation to create a subset of items that cost $5 or less. To do this, you specify <code>"AttributeName": "price"</code>, <code>"AttributeValue": "5"</code>, and <code>"Condition": "LESS_THAN"</code>. Pair this operation with the <code>Action</code> operation within the <code>CreateWhatIfForecastRequest$TimeSeriesTransformations</code> operation to define how the attribute is modified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeSeriesCondition {
    /// <p>The item_id, dimension name, IM name, or timestamp that you are modifying.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>The value that is applied for the chosen <code>Condition</code>.</p>
    #[doc(hidden)]
    pub attribute_value: std::option::Option<std::string::String>,
    /// <p>The condition to apply. Valid values are <code>EQUALS</code>, <code>NOT_EQUALS</code>, <code>LESS_THAN</code> and <code>GREATER_THAN</code>.</p>
    #[doc(hidden)]
    pub condition: std::option::Option<crate::types::Condition>,
}
impl TimeSeriesCondition {
    /// <p>The item_id, dimension name, IM name, or timestamp that you are modifying.</p>
    pub fn attribute_name(&self) -> std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The value that is applied for the chosen <code>Condition</code>.</p>
    pub fn attribute_value(&self) -> std::option::Option<&str> {
        self.attribute_value.as_deref()
    }
    /// <p>The condition to apply. Valid values are <code>EQUALS</code>, <code>NOT_EQUALS</code>, <code>LESS_THAN</code> and <code>GREATER_THAN</code>.</p>
    pub fn condition(&self) -> std::option::Option<&crate::types::Condition> {
        self.condition.as_ref()
    }
}
impl TimeSeriesCondition {
    /// Creates a new builder-style object to manufacture [`TimeSeriesCondition`](crate::types::TimeSeriesCondition).
    pub fn builder() -> crate::types::builders::TimeSeriesConditionBuilder {
        crate::types::builders::TimeSeriesConditionBuilder::default()
    }
}

/// A builder for [`TimeSeriesCondition`](crate::types::TimeSeriesCondition).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeSeriesConditionBuilder {
    pub(crate) attribute_name: std::option::Option<std::string::String>,
    pub(crate) attribute_value: std::option::Option<std::string::String>,
    pub(crate) condition: std::option::Option<crate::types::Condition>,
}
impl TimeSeriesConditionBuilder {
    /// <p>The item_id, dimension name, IM name, or timestamp that you are modifying.</p>
    pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_name = Some(input.into());
        self
    }
    /// <p>The item_id, dimension name, IM name, or timestamp that you are modifying.</p>
    pub fn set_attribute_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The value that is applied for the chosen <code>Condition</code>.</p>
    pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_value = Some(input.into());
        self
    }
    /// <p>The value that is applied for the chosen <code>Condition</code>.</p>
    pub fn set_attribute_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// <p>The condition to apply. Valid values are <code>EQUALS</code>, <code>NOT_EQUALS</code>, <code>LESS_THAN</code> and <code>GREATER_THAN</code>.</p>
    pub fn condition(mut self, input: crate::types::Condition) -> Self {
        self.condition = Some(input);
        self
    }
    /// <p>The condition to apply. Valid values are <code>EQUALS</code>, <code>NOT_EQUALS</code>, <code>LESS_THAN</code> and <code>GREATER_THAN</code>.</p>
    pub fn set_condition(mut self, input: std::option::Option<crate::types::Condition>) -> Self {
        self.condition = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeSeriesCondition`](crate::types::TimeSeriesCondition).
    pub fn build(self) -> crate::types::TimeSeriesCondition {
        crate::types::TimeSeriesCondition {
            attribute_name: self.attribute_name,
            attribute_value: self.attribute_value,
            condition: self.condition,
        }
    }
}
