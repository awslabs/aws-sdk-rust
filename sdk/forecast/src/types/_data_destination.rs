// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The destination for an export job. Provide an S3 path, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the location, and an AWS Key Management Service (KMS) key (optional). </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataDestination {
    /// <p>The path to an Amazon Simple Storage Service (Amazon S3) bucket along with the credentials to access the bucket.</p>
    #[doc(hidden)]
    pub s3_config: std::option::Option<crate::types::S3Config>,
}
impl DataDestination {
    /// <p>The path to an Amazon Simple Storage Service (Amazon S3) bucket along with the credentials to access the bucket.</p>
    pub fn s3_config(&self) -> std::option::Option<&crate::types::S3Config> {
        self.s3_config.as_ref()
    }
}
impl DataDestination {
    /// Creates a new builder-style object to manufacture [`DataDestination`](crate::types::DataDestination).
    pub fn builder() -> crate::types::builders::DataDestinationBuilder {
        crate::types::builders::DataDestinationBuilder::default()
    }
}

/// A builder for [`DataDestination`](crate::types::DataDestination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataDestinationBuilder {
    pub(crate) s3_config: std::option::Option<crate::types::S3Config>,
}
impl DataDestinationBuilder {
    /// <p>The path to an Amazon Simple Storage Service (Amazon S3) bucket along with the credentials to access the bucket.</p>
    pub fn s3_config(mut self, input: crate::types::S3Config) -> Self {
        self.s3_config = Some(input);
        self
    }
    /// <p>The path to an Amazon Simple Storage Service (Amazon S3) bucket along with the credentials to access the bucket.</p>
    pub fn set_s3_config(mut self, input: std::option::Option<crate::types::S3Config>) -> Self {
        self.s3_config = input;
        self
    }
    /// Consumes the builder and constructs a [`DataDestination`](crate::types::DataDestination).
    pub fn build(self) -> crate::types::DataDestination {
        crate::types::DataDestination {
            s3_config: self.s3_config,
        }
    }
}
