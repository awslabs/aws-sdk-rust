// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metrics for a time range within the evaluation portion of a dataset. This object is part of the <code>EvaluationResult</code> object.</p>
/// <p>The <code>TestWindowStart</code> and <code>TestWindowEnd</code> parameters are determined by the <code>BackTestWindowOffset</code> parameter of the <code>EvaluationParameters</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WindowSummary {
    /// <p>The timestamp that defines the start of the window.</p>
    #[doc(hidden)]
    pub test_window_start: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp that defines the end of the window.</p>
    #[doc(hidden)]
    pub test_window_end: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The number of data points within the window.</p>
    #[doc(hidden)]
    pub item_count: std::option::Option<i32>,
    /// <p>The type of evaluation.</p>
    /// <ul>
    /// <li> <p> <code>SUMMARY</code> - The average metrics across all windows.</p> </li>
    /// <li> <p> <code>COMPUTED</code> - The metrics for the specified window.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub evaluation_type: std::option::Option<crate::types::EvaluationType>,
    /// <p>Provides metrics used to evaluate the performance of a predictor.</p>
    #[doc(hidden)]
    pub metrics: std::option::Option<crate::types::Metrics>,
}
impl WindowSummary {
    /// <p>The timestamp that defines the start of the window.</p>
    pub fn test_window_start(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.test_window_start.as_ref()
    }
    /// <p>The timestamp that defines the end of the window.</p>
    pub fn test_window_end(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.test_window_end.as_ref()
    }
    /// <p>The number of data points within the window.</p>
    pub fn item_count(&self) -> std::option::Option<i32> {
        self.item_count
    }
    /// <p>The type of evaluation.</p>
    /// <ul>
    /// <li> <p> <code>SUMMARY</code> - The average metrics across all windows.</p> </li>
    /// <li> <p> <code>COMPUTED</code> - The metrics for the specified window.</p> </li>
    /// </ul>
    pub fn evaluation_type(&self) -> std::option::Option<&crate::types::EvaluationType> {
        self.evaluation_type.as_ref()
    }
    /// <p>Provides metrics used to evaluate the performance of a predictor.</p>
    pub fn metrics(&self) -> std::option::Option<&crate::types::Metrics> {
        self.metrics.as_ref()
    }
}
impl WindowSummary {
    /// Creates a new builder-style object to manufacture [`WindowSummary`](crate::types::WindowSummary).
    pub fn builder() -> crate::types::builders::WindowSummaryBuilder {
        crate::types::builders::WindowSummaryBuilder::default()
    }
}

/// A builder for [`WindowSummary`](crate::types::WindowSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WindowSummaryBuilder {
    pub(crate) test_window_start: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) test_window_end: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) item_count: std::option::Option<i32>,
    pub(crate) evaluation_type: std::option::Option<crate::types::EvaluationType>,
    pub(crate) metrics: std::option::Option<crate::types::Metrics>,
}
impl WindowSummaryBuilder {
    /// <p>The timestamp that defines the start of the window.</p>
    pub fn test_window_start(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.test_window_start = Some(input);
        self
    }
    /// <p>The timestamp that defines the start of the window.</p>
    pub fn set_test_window_start(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.test_window_start = input;
        self
    }
    /// <p>The timestamp that defines the end of the window.</p>
    pub fn test_window_end(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.test_window_end = Some(input);
        self
    }
    /// <p>The timestamp that defines the end of the window.</p>
    pub fn set_test_window_end(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.test_window_end = input;
        self
    }
    /// <p>The number of data points within the window.</p>
    pub fn item_count(mut self, input: i32) -> Self {
        self.item_count = Some(input);
        self
    }
    /// <p>The number of data points within the window.</p>
    pub fn set_item_count(mut self, input: std::option::Option<i32>) -> Self {
        self.item_count = input;
        self
    }
    /// <p>The type of evaluation.</p>
    /// <ul>
    /// <li> <p> <code>SUMMARY</code> - The average metrics across all windows.</p> </li>
    /// <li> <p> <code>COMPUTED</code> - The metrics for the specified window.</p> </li>
    /// </ul>
    pub fn evaluation_type(mut self, input: crate::types::EvaluationType) -> Self {
        self.evaluation_type = Some(input);
        self
    }
    /// <p>The type of evaluation.</p>
    /// <ul>
    /// <li> <p> <code>SUMMARY</code> - The average metrics across all windows.</p> </li>
    /// <li> <p> <code>COMPUTED</code> - The metrics for the specified window.</p> </li>
    /// </ul>
    pub fn set_evaluation_type(
        mut self,
        input: std::option::Option<crate::types::EvaluationType>,
    ) -> Self {
        self.evaluation_type = input;
        self
    }
    /// <p>Provides metrics used to evaluate the performance of a predictor.</p>
    pub fn metrics(mut self, input: crate::types::Metrics) -> Self {
        self.metrics = Some(input);
        self
    }
    /// <p>Provides metrics used to evaluate the performance of a predictor.</p>
    pub fn set_metrics(mut self, input: std::option::Option<crate::types::Metrics>) -> Self {
        self.metrics = input;
        self
    }
    /// Consumes the builder and constructs a [`WindowSummary`](crate::types::WindowSummary).
    pub fn build(self) -> crate::types::WindowSummary {
        crate::types::WindowSummary {
            test_window_start: self.test_window_start,
            test_window_end: self.test_window_end,
            item_count: self.item_count,
            evaluation_type: self.evaluation_type,
            metrics: self.metrics,
        }
    }
}
