// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An individual metric Forecast calculated when monitoring predictor usage. You can compare the value for this metric to the metric's value in the <code>Baseline</code> to see how your predictor's performance is changing.</p>
/// <p>For more information about metrics generated by Forecast see <a href="https://docs.aws.amazon.com/forecast/latest/dg/metrics.html">Evaluating Predictor Accuracy</a> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MetricResult {
    /// <p>The name of the metric.</p>
    #[doc(hidden)]
    pub metric_name: std::option::Option<std::string::String>,
    /// <p>The value for the metric.</p>
    #[doc(hidden)]
    pub metric_value: std::option::Option<f64>,
}
impl MetricResult {
    /// <p>The name of the metric.</p>
    pub fn metric_name(&self) -> std::option::Option<&str> {
        self.metric_name.as_deref()
    }
    /// <p>The value for the metric.</p>
    pub fn metric_value(&self) -> std::option::Option<f64> {
        self.metric_value
    }
}
impl MetricResult {
    /// Creates a new builder-style object to manufacture [`MetricResult`](crate::types::MetricResult).
    pub fn builder() -> crate::types::builders::MetricResultBuilder {
        crate::types::builders::MetricResultBuilder::default()
    }
}

/// A builder for [`MetricResult`](crate::types::MetricResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MetricResultBuilder {
    pub(crate) metric_name: std::option::Option<std::string::String>,
    pub(crate) metric_value: std::option::Option<f64>,
}
impl MetricResultBuilder {
    /// <p>The name of the metric.</p>
    pub fn metric_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.metric_name = Some(input.into());
        self
    }
    /// <p>The name of the metric.</p>
    pub fn set_metric_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p>The value for the metric.</p>
    pub fn metric_value(mut self, input: f64) -> Self {
        self.metric_value = Some(input);
        self
    }
    /// <p>The value for the metric.</p>
    pub fn set_metric_value(mut self, input: std::option::Option<f64>) -> Self {
        self.metric_value = input;
        self
    }
    /// Consumes the builder and constructs a [`MetricResult`](crate::types::MetricResult).
    pub fn build(self) -> crate::types::MetricResult {
        crate::types::MetricResult {
            metric_name: self.metric_name,
            metric_value: self.metric_value,
        }
    }
}
