// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a continuous hyperparameter and it's range of tunable values. This object is part of the <code>ParameterRanges</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ContinuousParameterRange {
    /// <p>The name of the hyperparameter to tune.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The maximum tunable value of the hyperparameter.</p>
    #[doc(hidden)]
    pub max_value: std::option::Option<f64>,
    /// <p>The minimum tunable value of the hyperparameter.</p>
    #[doc(hidden)]
    pub min_value: std::option::Option<f64>,
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. Valid values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>Amazon Forecast hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have values greater than 0.</p>
    /// </dd>
    /// <dt>
    /// ReverseLogarithmic
    /// </dt>
    /// <dd>
    /// <p>hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale.</p>
    /// <p>Reverse logarithmic scaling works only for ranges that are entirely within the range 0 &lt;= x &lt; 1.0.</p>
    /// </dd>
    /// </dl>
    /// <p>For information about choosing a hyperparameter scale, see <a href="http://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    #[doc(hidden)]
    pub scaling_type: std::option::Option<crate::types::ScalingType>,
}
impl ContinuousParameterRange {
    /// <p>The name of the hyperparameter to tune.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The maximum tunable value of the hyperparameter.</p>
    pub fn max_value(&self) -> std::option::Option<f64> {
        self.max_value
    }
    /// <p>The minimum tunable value of the hyperparameter.</p>
    pub fn min_value(&self) -> std::option::Option<f64> {
        self.min_value
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. Valid values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>Amazon Forecast hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have values greater than 0.</p>
    /// </dd>
    /// <dt>
    /// ReverseLogarithmic
    /// </dt>
    /// <dd>
    /// <p>hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale.</p>
    /// <p>Reverse logarithmic scaling works only for ranges that are entirely within the range 0 &lt;= x &lt; 1.0.</p>
    /// </dd>
    /// </dl>
    /// <p>For information about choosing a hyperparameter scale, see <a href="http://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    pub fn scaling_type(&self) -> std::option::Option<&crate::types::ScalingType> {
        self.scaling_type.as_ref()
    }
}
impl ContinuousParameterRange {
    /// Creates a new builder-style object to manufacture [`ContinuousParameterRange`](crate::types::ContinuousParameterRange).
    pub fn builder() -> crate::types::builders::ContinuousParameterRangeBuilder {
        crate::types::builders::ContinuousParameterRangeBuilder::default()
    }
}

/// A builder for [`ContinuousParameterRange`](crate::types::ContinuousParameterRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ContinuousParameterRangeBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) max_value: std::option::Option<f64>,
    pub(crate) min_value: std::option::Option<f64>,
    pub(crate) scaling_type: std::option::Option<crate::types::ScalingType>,
}
impl ContinuousParameterRangeBuilder {
    /// <p>The name of the hyperparameter to tune.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the hyperparameter to tune.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The maximum tunable value of the hyperparameter.</p>
    pub fn max_value(mut self, input: f64) -> Self {
        self.max_value = Some(input);
        self
    }
    /// <p>The maximum tunable value of the hyperparameter.</p>
    pub fn set_max_value(mut self, input: std::option::Option<f64>) -> Self {
        self.max_value = input;
        self
    }
    /// <p>The minimum tunable value of the hyperparameter.</p>
    pub fn min_value(mut self, input: f64) -> Self {
        self.min_value = Some(input);
        self
    }
    /// <p>The minimum tunable value of the hyperparameter.</p>
    pub fn set_min_value(mut self, input: std::option::Option<f64>) -> Self {
        self.min_value = input;
        self
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. Valid values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>Amazon Forecast hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have values greater than 0.</p>
    /// </dd>
    /// <dt>
    /// ReverseLogarithmic
    /// </dt>
    /// <dd>
    /// <p>hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale.</p>
    /// <p>Reverse logarithmic scaling works only for ranges that are entirely within the range 0 &lt;= x &lt; 1.0.</p>
    /// </dd>
    /// </dl>
    /// <p>For information about choosing a hyperparameter scale, see <a href="http://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    pub fn scaling_type(mut self, input: crate::types::ScalingType) -> Self {
        self.scaling_type = Some(input);
        self
    }
    /// <p>The scale that hyperparameter tuning uses to search the hyperparameter range. Valid values:</p>
    /// <dl>
    /// <dt>
    /// Auto
    /// </dt>
    /// <dd>
    /// <p>Amazon Forecast hyperparameter tuning chooses the best scale for the hyperparameter.</p>
    /// </dd>
    /// <dt>
    /// Linear
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale.</p>
    /// </dd>
    /// <dt>
    /// Logarithmic
    /// </dt>
    /// <dd>
    /// <p>Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale.</p>
    /// <p>Logarithmic scaling works only for ranges that have values greater than 0.</p>
    /// </dd>
    /// <dt>
    /// ReverseLogarithmic
    /// </dt>
    /// <dd>
    /// <p>hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale.</p>
    /// <p>Reverse logarithmic scaling works only for ranges that are entirely within the range 0 &lt;= x &lt; 1.0.</p>
    /// </dd>
    /// </dl>
    /// <p>For information about choosing a hyperparameter scale, see <a href="http://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type">Hyperparameter Scaling</a>. One of the following values:</p>
    pub fn set_scaling_type(
        mut self,
        input: std::option::Option<crate::types::ScalingType>,
    ) -> Self {
        self.scaling_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ContinuousParameterRange`](crate::types::ContinuousParameterRange).
    pub fn build(self) -> crate::types::ContinuousParameterRange {
        crate::types::ContinuousParameterRange {
            name: self.name,
            max_value: self.max_value,
            min_value: self.min_value,
            scaling_type: self.scaling_type,
        }
    }
}
