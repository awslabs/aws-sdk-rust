// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides detailed error metrics to evaluate the performance of a predictor. This object is part of the <code>Metrics</code> object. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorMetric {
    /// <p> The Forecast type used to compute WAPE, MAPE, MASE, and RMSE. </p>
    #[doc(hidden)]
    pub forecast_type: std::option::Option<std::string::String>,
    /// <p> The weighted absolute percentage error (WAPE). </p>
    #[doc(hidden)]
    pub wape: std::option::Option<f64>,
    /// <p> The root-mean-square error (RMSE). </p>
    #[doc(hidden)]
    pub rmse: std::option::Option<f64>,
    /// <p>The Mean Absolute Scaled Error (MASE)</p>
    #[doc(hidden)]
    pub mase: std::option::Option<f64>,
    /// <p>The Mean Absolute Percentage Error (MAPE)</p>
    #[doc(hidden)]
    pub mape: std::option::Option<f64>,
}
impl ErrorMetric {
    /// <p> The Forecast type used to compute WAPE, MAPE, MASE, and RMSE. </p>
    pub fn forecast_type(&self) -> std::option::Option<&str> {
        self.forecast_type.as_deref()
    }
    /// <p> The weighted absolute percentage error (WAPE). </p>
    pub fn wape(&self) -> std::option::Option<f64> {
        self.wape
    }
    /// <p> The root-mean-square error (RMSE). </p>
    pub fn rmse(&self) -> std::option::Option<f64> {
        self.rmse
    }
    /// <p>The Mean Absolute Scaled Error (MASE)</p>
    pub fn mase(&self) -> std::option::Option<f64> {
        self.mase
    }
    /// <p>The Mean Absolute Percentage Error (MAPE)</p>
    pub fn mape(&self) -> std::option::Option<f64> {
        self.mape
    }
}
impl ErrorMetric {
    /// Creates a new builder-style object to manufacture [`ErrorMetric`](crate::types::ErrorMetric).
    pub fn builder() -> crate::types::builders::ErrorMetricBuilder {
        crate::types::builders::ErrorMetricBuilder::default()
    }
}

/// A builder for [`ErrorMetric`](crate::types::ErrorMetric).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorMetricBuilder {
    pub(crate) forecast_type: std::option::Option<std::string::String>,
    pub(crate) wape: std::option::Option<f64>,
    pub(crate) rmse: std::option::Option<f64>,
    pub(crate) mase: std::option::Option<f64>,
    pub(crate) mape: std::option::Option<f64>,
}
impl ErrorMetricBuilder {
    /// <p> The Forecast type used to compute WAPE, MAPE, MASE, and RMSE. </p>
    pub fn forecast_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.forecast_type = Some(input.into());
        self
    }
    /// <p> The Forecast type used to compute WAPE, MAPE, MASE, and RMSE. </p>
    pub fn set_forecast_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.forecast_type = input;
        self
    }
    /// <p> The weighted absolute percentage error (WAPE). </p>
    pub fn wape(mut self, input: f64) -> Self {
        self.wape = Some(input);
        self
    }
    /// <p> The weighted absolute percentage error (WAPE). </p>
    pub fn set_wape(mut self, input: std::option::Option<f64>) -> Self {
        self.wape = input;
        self
    }
    /// <p> The root-mean-square error (RMSE). </p>
    pub fn rmse(mut self, input: f64) -> Self {
        self.rmse = Some(input);
        self
    }
    /// <p> The root-mean-square error (RMSE). </p>
    pub fn set_rmse(mut self, input: std::option::Option<f64>) -> Self {
        self.rmse = input;
        self
    }
    /// <p>The Mean Absolute Scaled Error (MASE)</p>
    pub fn mase(mut self, input: f64) -> Self {
        self.mase = Some(input);
        self
    }
    /// <p>The Mean Absolute Scaled Error (MASE)</p>
    pub fn set_mase(mut self, input: std::option::Option<f64>) -> Self {
        self.mase = input;
        self
    }
    /// <p>The Mean Absolute Percentage Error (MAPE)</p>
    pub fn mape(mut self, input: f64) -> Self {
        self.mape = Some(input);
        self
    }
    /// <p>The Mean Absolute Percentage Error (MAPE)</p>
    pub fn set_mape(mut self, input: std::option::Option<f64>) -> Self {
        self.mape = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorMetric`](crate::types::ErrorMetric).
    pub fn build(self) -> crate::types::ErrorMetric {
        crate::types::ErrorMetric {
            forecast_type: self.forecast_type,
            wape: self.wape,
            rmse: self.rmse,
            mase: self.mase,
            mape: self.mape,
        }
    }
}
