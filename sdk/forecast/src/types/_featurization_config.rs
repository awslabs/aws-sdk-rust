// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This object belongs to the <code>CreatePredictor</code> operation. If you created your predictor with <code>CreateAutoPredictor</code>, see <code>AttributeConfig</code>.</p>
/// </note>
/// <p>In a <code>CreatePredictor</code> operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as <i>featurization</i>.</p>
/// <p>You define featurization using the <code>FeaturizationConfig</code> object. You specify an array of transformations, one for each field that you want to featurize. You then include the <code>FeaturizationConfig</code> object in your <code>CreatePredictor</code> request. Amazon Forecast applies the featurization to the <code>TARGET_TIME_SERIES</code> and <code>RELATED_TIME_SERIES</code> datasets before model training.</p>
/// <p>You can create multiple featurization configurations. For example, you might call the <code>CreatePredictor</code> operation twice by specifying different featurization configurations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FeaturizationConfig {
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
    /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
    #[doc(hidden)]
    pub forecast_frequency: std::option::Option<std::string::String>,
    /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
    /// <p>For example, suppose that you are generating a forecast for item sales across all of your stores, and your dataset contains a <code>store_id</code> field. If you want the sales forecast for each item by store, you would specify <code>store_id</code> as the dimension.</p>
    /// <p>All forecast dimensions specified in the <code>TARGET_TIME_SERIES</code> dataset don't need to be specified in the <code>CreatePredictor</code> request. All forecast dimensions specified in the <code>RELATED_TIME_SERIES</code> dataset must be specified in the <code>CreatePredictor</code> request.</p>
    #[doc(hidden)]
    pub forecast_dimensions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array of featurization (transformation) information for the fields of a dataset.</p>
    #[doc(hidden)]
    pub featurizations: std::option::Option<std::vec::Vec<crate::types::Featurization>>,
}
impl FeaturizationConfig {
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
    /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
    pub fn forecast_frequency(&self) -> std::option::Option<&str> {
        self.forecast_frequency.as_deref()
    }
    /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
    /// <p>For example, suppose that you are generating a forecast for item sales across all of your stores, and your dataset contains a <code>store_id</code> field. If you want the sales forecast for each item by store, you would specify <code>store_id</code> as the dimension.</p>
    /// <p>All forecast dimensions specified in the <code>TARGET_TIME_SERIES</code> dataset don't need to be specified in the <code>CreatePredictor</code> request. All forecast dimensions specified in the <code>RELATED_TIME_SERIES</code> dataset must be specified in the <code>CreatePredictor</code> request.</p>
    pub fn forecast_dimensions(&self) -> std::option::Option<&[std::string::String]> {
        self.forecast_dimensions.as_deref()
    }
    /// <p>An array of featurization (transformation) information for the fields of a dataset.</p>
    pub fn featurizations(&self) -> std::option::Option<&[crate::types::Featurization]> {
        self.featurizations.as_deref()
    }
}
impl FeaturizationConfig {
    /// Creates a new builder-style object to manufacture [`FeaturizationConfig`](crate::types::FeaturizationConfig).
    pub fn builder() -> crate::types::builders::FeaturizationConfigBuilder {
        crate::types::builders::FeaturizationConfigBuilder::default()
    }
}

/// A builder for [`FeaturizationConfig`](crate::types::FeaturizationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FeaturizationConfigBuilder {
    pub(crate) forecast_frequency: std::option::Option<std::string::String>,
    pub(crate) forecast_dimensions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) featurizations: std::option::Option<std::vec::Vec<crate::types::Featurization>>,
}
impl FeaturizationConfigBuilder {
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
    /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
    pub fn forecast_frequency(mut self, input: impl Into<std::string::String>) -> Self {
        self.forecast_frequency = Some(input.into());
        self
    }
    /// <p>The frequency of predictions in a forecast.</p>
    /// <p>Valid intervals are Y (Year), M (Month), W (Week), D (Day), H (Hour), 30min (30 minutes), 15min (15 minutes), 10min (10 minutes), 5min (5 minutes), and 1min (1 minute). For example, "Y" indicates every year and "5min" indicates every five minutes.</p>
    /// <p>The frequency must be greater than or equal to the TARGET_TIME_SERIES dataset frequency.</p>
    /// <p>When a RELATED_TIME_SERIES dataset is provided, the frequency must be equal to the RELATED_TIME_SERIES dataset frequency.</p>
    pub fn set_forecast_frequency(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.forecast_frequency = input;
        self
    }
    /// Appends an item to `forecast_dimensions`.
    ///
    /// To override the contents of this collection use [`set_forecast_dimensions`](Self::set_forecast_dimensions).
    ///
    /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
    /// <p>For example, suppose that you are generating a forecast for item sales across all of your stores, and your dataset contains a <code>store_id</code> field. If you want the sales forecast for each item by store, you would specify <code>store_id</code> as the dimension.</p>
    /// <p>All forecast dimensions specified in the <code>TARGET_TIME_SERIES</code> dataset don't need to be specified in the <code>CreatePredictor</code> request. All forecast dimensions specified in the <code>RELATED_TIME_SERIES</code> dataset must be specified in the <code>CreatePredictor</code> request.</p>
    pub fn forecast_dimensions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.forecast_dimensions.unwrap_or_default();
        v.push(input.into());
        self.forecast_dimensions = Some(v);
        self
    }
    /// <p>An array of dimension (field) names that specify how to group the generated forecast.</p>
    /// <p>For example, suppose that you are generating a forecast for item sales across all of your stores, and your dataset contains a <code>store_id</code> field. If you want the sales forecast for each item by store, you would specify <code>store_id</code> as the dimension.</p>
    /// <p>All forecast dimensions specified in the <code>TARGET_TIME_SERIES</code> dataset don't need to be specified in the <code>CreatePredictor</code> request. All forecast dimensions specified in the <code>RELATED_TIME_SERIES</code> dataset must be specified in the <code>CreatePredictor</code> request.</p>
    pub fn set_forecast_dimensions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.forecast_dimensions = input;
        self
    }
    /// Appends an item to `featurizations`.
    ///
    /// To override the contents of this collection use [`set_featurizations`](Self::set_featurizations).
    ///
    /// <p>An array of featurization (transformation) information for the fields of a dataset.</p>
    pub fn featurizations(mut self, input: crate::types::Featurization) -> Self {
        let mut v = self.featurizations.unwrap_or_default();
        v.push(input);
        self.featurizations = Some(v);
        self
    }
    /// <p>An array of featurization (transformation) information for the fields of a dataset.</p>
    pub fn set_featurizations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Featurization>>,
    ) -> Self {
        self.featurizations = input;
        self
    }
    /// Consumes the builder and constructs a [`FeaturizationConfig`](crate::types::FeaturizationConfig).
    pub fn build(self) -> crate::types::FeaturizationConfig {
        crate::types::FeaturizationConfig {
            forecast_frequency: self.forecast_frequency,
            forecast_dimensions: self.forecast_dimensions,
            featurizations: self.featurizations,
        }
    }
}
