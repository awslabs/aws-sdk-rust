// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The ExplainabilityConfig data type defines the number of time series and time points included in <code>CreateExplainability</code>.</p>
/// <p>If you provide a predictor ARN for <code>ResourceArn</code>, you must set both <code>TimePointGranularity</code> and <code>TimeSeriesGranularity</code> to “ALL”. When creating Predictor Explainability, Amazon Forecast considers all time series and time points.</p>
/// <p>If you provide a forecast ARN for <code>ResourceArn</code>, you can set <code>TimePointGranularity</code> and <code>TimeSeriesGranularity</code> to either “ALL” or “Specific”.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExplainabilityConfig {
    /// <p>To create an Explainability for all time series in your datasets, use <code>ALL</code>. To create an Explainability for specific time series in your datasets, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time series by uploading a CSV or Parquet file to an Amazon S3 bucket and set the location within the <code>DataDestination</code> data type.</p>
    #[doc(hidden)]
    pub time_series_granularity: std::option::Option<crate::types::TimeSeriesGranularity>,
    /// <p>To create an Explainability for all time points in your forecast horizon, use <code>ALL</code>. To create an Explainability for specific time points in your forecast horizon, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time points with the <code>StartDateTime</code> and <code>EndDateTime</code> parameters within the <code>CreateExplainability</code> operation.</p>
    #[doc(hidden)]
    pub time_point_granularity: std::option::Option<crate::types::TimePointGranularity>,
}
impl ExplainabilityConfig {
    /// <p>To create an Explainability for all time series in your datasets, use <code>ALL</code>. To create an Explainability for specific time series in your datasets, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time series by uploading a CSV or Parquet file to an Amazon S3 bucket and set the location within the <code>DataDestination</code> data type.</p>
    pub fn time_series_granularity(
        &self,
    ) -> std::option::Option<&crate::types::TimeSeriesGranularity> {
        self.time_series_granularity.as_ref()
    }
    /// <p>To create an Explainability for all time points in your forecast horizon, use <code>ALL</code>. To create an Explainability for specific time points in your forecast horizon, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time points with the <code>StartDateTime</code> and <code>EndDateTime</code> parameters within the <code>CreateExplainability</code> operation.</p>
    pub fn time_point_granularity(
        &self,
    ) -> std::option::Option<&crate::types::TimePointGranularity> {
        self.time_point_granularity.as_ref()
    }
}
impl ExplainabilityConfig {
    /// Creates a new builder-style object to manufacture [`ExplainabilityConfig`](crate::types::ExplainabilityConfig).
    pub fn builder() -> crate::types::builders::ExplainabilityConfigBuilder {
        crate::types::builders::ExplainabilityConfigBuilder::default()
    }
}

/// A builder for [`ExplainabilityConfig`](crate::types::ExplainabilityConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExplainabilityConfigBuilder {
    pub(crate) time_series_granularity: std::option::Option<crate::types::TimeSeriesGranularity>,
    pub(crate) time_point_granularity: std::option::Option<crate::types::TimePointGranularity>,
}
impl ExplainabilityConfigBuilder {
    /// <p>To create an Explainability for all time series in your datasets, use <code>ALL</code>. To create an Explainability for specific time series in your datasets, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time series by uploading a CSV or Parquet file to an Amazon S3 bucket and set the location within the <code>DataDestination</code> data type.</p>
    pub fn time_series_granularity(mut self, input: crate::types::TimeSeriesGranularity) -> Self {
        self.time_series_granularity = Some(input);
        self
    }
    /// <p>To create an Explainability for all time series in your datasets, use <code>ALL</code>. To create an Explainability for specific time series in your datasets, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time series by uploading a CSV or Parquet file to an Amazon S3 bucket and set the location within the <code>DataDestination</code> data type.</p>
    pub fn set_time_series_granularity(
        mut self,
        input: std::option::Option<crate::types::TimeSeriesGranularity>,
    ) -> Self {
        self.time_series_granularity = input;
        self
    }
    /// <p>To create an Explainability for all time points in your forecast horizon, use <code>ALL</code>. To create an Explainability for specific time points in your forecast horizon, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time points with the <code>StartDateTime</code> and <code>EndDateTime</code> parameters within the <code>CreateExplainability</code> operation.</p>
    pub fn time_point_granularity(mut self, input: crate::types::TimePointGranularity) -> Self {
        self.time_point_granularity = Some(input);
        self
    }
    /// <p>To create an Explainability for all time points in your forecast horizon, use <code>ALL</code>. To create an Explainability for specific time points in your forecast horizon, use <code>SPECIFIC</code>.</p>
    /// <p>Specify time points with the <code>StartDateTime</code> and <code>EndDateTime</code> parameters within the <code>CreateExplainability</code> operation.</p>
    pub fn set_time_point_granularity(
        mut self,
        input: std::option::Option<crate::types::TimePointGranularity>,
    ) -> Self {
        self.time_point_granularity = input;
        self
    }
    /// Consumes the builder and constructs a [`ExplainabilityConfig`](crate::types::ExplainabilityConfig).
    pub fn build(self) -> crate::types::ExplainabilityConfig {
        crate::types::ExplainabilityConfig {
            time_series_granularity: self.time_series_granularity,
            time_point_granularity: self.time_point_granularity,
        }
    }
}
