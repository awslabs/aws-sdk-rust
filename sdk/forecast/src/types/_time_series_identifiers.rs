// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the import file that contains the time series for which you want to create forecasts.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeSeriesIdentifiers {
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    #[doc(hidden)]
    pub data_source: std::option::Option<crate::types::DataSource>,
    /// <p>Defines the fields of a dataset.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<crate::types::Schema>,
    /// <p>The format of the data, either CSV or PARQUET.</p>
    #[doc(hidden)]
    pub format: std::option::Option<std::string::String>,
}
impl TimeSeriesIdentifiers {
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn data_source(&self) -> std::option::Option<&crate::types::DataSource> {
        self.data_source.as_ref()
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn schema(&self) -> std::option::Option<&crate::types::Schema> {
        self.schema.as_ref()
    }
    /// <p>The format of the data, either CSV or PARQUET.</p>
    pub fn format(&self) -> std::option::Option<&str> {
        self.format.as_deref()
    }
}
impl TimeSeriesIdentifiers {
    /// Creates a new builder-style object to manufacture [`TimeSeriesIdentifiers`](crate::types::TimeSeriesIdentifiers).
    pub fn builder() -> crate::types::builders::TimeSeriesIdentifiersBuilder {
        crate::types::builders::TimeSeriesIdentifiersBuilder::default()
    }
}

/// A builder for [`TimeSeriesIdentifiers`](crate::types::TimeSeriesIdentifiers).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeSeriesIdentifiersBuilder {
    pub(crate) data_source: std::option::Option<crate::types::DataSource>,
    pub(crate) schema: std::option::Option<crate::types::Schema>,
    pub(crate) format: std::option::Option<std::string::String>,
}
impl TimeSeriesIdentifiersBuilder {
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn data_source(mut self, input: crate::types::DataSource) -> Self {
        self.data_source = Some(input);
        self
    }
    /// <p>The source of your data, an AWS Identity and Access Management (IAM) role that allows Amazon Forecast to access the data and, optionally, an AWS Key Management Service (KMS) key.</p>
    pub fn set_data_source(mut self, input: std::option::Option<crate::types::DataSource>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn schema(mut self, input: crate::types::Schema) -> Self {
        self.schema = Some(input);
        self
    }
    /// <p>Defines the fields of a dataset.</p>
    pub fn set_schema(mut self, input: std::option::Option<crate::types::Schema>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The format of the data, either CSV or PARQUET.</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.format = Some(input.into());
        self
    }
    /// <p>The format of the data, either CSV or PARQUET.</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeSeriesIdentifiers`](crate::types::TimeSeriesIdentifiers).
    pub fn build(self) -> crate::types::TimeSeriesIdentifiers {
        crate::types::TimeSeriesIdentifiers {
            data_source: self.data_source,
            schema: self.schema,
            format: self.format,
        }
    }
}
