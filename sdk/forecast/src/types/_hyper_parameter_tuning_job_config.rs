// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for a hyperparameter tuning job. You specify this object in the <code>CreatePredictor</code> request.</p>
/// <p>A <i>hyperparameter</i> is a parameter that governs the model training process. You set hyperparameters before training starts, unlike model parameters, which are determined during training. The values of the hyperparameters effect which values are chosen for the model parameters.</p>
/// <p>In a <i>hyperparameter tuning job</i>, Amazon Forecast chooses the set of hyperparameter values that optimize a specified metric. Forecast accomplishes this by running many training jobs over a range of hyperparameter values. The optimum set of values depends on the algorithm, the training data, and the specified metric objective.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HyperParameterTuningJobConfig {
    /// <p>Specifies the ranges of valid values for the hyperparameters.</p>
    #[doc(hidden)]
    pub parameter_ranges: std::option::Option<crate::types::ParameterRanges>,
}
impl HyperParameterTuningJobConfig {
    /// <p>Specifies the ranges of valid values for the hyperparameters.</p>
    pub fn parameter_ranges(&self) -> std::option::Option<&crate::types::ParameterRanges> {
        self.parameter_ranges.as_ref()
    }
}
impl HyperParameterTuningJobConfig {
    /// Creates a new builder-style object to manufacture [`HyperParameterTuningJobConfig`](crate::types::HyperParameterTuningJobConfig).
    pub fn builder() -> crate::types::builders::HyperParameterTuningJobConfigBuilder {
        crate::types::builders::HyperParameterTuningJobConfigBuilder::default()
    }
}

/// A builder for [`HyperParameterTuningJobConfig`](crate::types::HyperParameterTuningJobConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HyperParameterTuningJobConfigBuilder {
    pub(crate) parameter_ranges: std::option::Option<crate::types::ParameterRanges>,
}
impl HyperParameterTuningJobConfigBuilder {
    /// <p>Specifies the ranges of valid values for the hyperparameters.</p>
    pub fn parameter_ranges(mut self, input: crate::types::ParameterRanges) -> Self {
        self.parameter_ranges = Some(input);
        self
    }
    /// <p>Specifies the ranges of valid values for the hyperparameters.</p>
    pub fn set_parameter_ranges(
        mut self,
        input: std::option::Option<crate::types::ParameterRanges>,
    ) -> Self {
        self.parameter_ranges = input;
        self
    }
    /// Consumes the builder and constructs a [`HyperParameterTuningJobConfig`](crate::types::HyperParameterTuningJobConfig).
    pub fn build(self) -> crate::types::HyperParameterTuningJobConfig {
        crate::types::HyperParameterTuningJobConfig {
            parameter_ranges: self.parameter_ranges,
        }
    }
}
