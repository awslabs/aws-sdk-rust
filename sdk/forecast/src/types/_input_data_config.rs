// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <note>
/// <p>This object belongs to the <code>CreatePredictor</code> operation. If you created your predictor with <code>CreateAutoPredictor</code>, see <code>DataConfig</code>.</p>
/// </note>
/// <p>The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the <code>CreatePredictor</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputDataConfig {
    /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    #[doc(hidden)]
    pub dataset_group_arn: std::option::Option<std::string::String>,
    /// <p>An array of supplementary features. The only supported feature is a holiday calendar.</p>
    #[doc(hidden)]
    pub supplementary_features:
        std::option::Option<std::vec::Vec<crate::types::SupplementaryFeature>>,
}
impl InputDataConfig {
    /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    pub fn dataset_group_arn(&self) -> std::option::Option<&str> {
        self.dataset_group_arn.as_deref()
    }
    /// <p>An array of supplementary features. The only supported feature is a holiday calendar.</p>
    pub fn supplementary_features(
        &self,
    ) -> std::option::Option<&[crate::types::SupplementaryFeature]> {
        self.supplementary_features.as_deref()
    }
}
impl InputDataConfig {
    /// Creates a new builder-style object to manufacture [`InputDataConfig`](crate::types::InputDataConfig).
    pub fn builder() -> crate::types::builders::InputDataConfigBuilder {
        crate::types::builders::InputDataConfigBuilder::default()
    }
}

/// A builder for [`InputDataConfig`](crate::types::InputDataConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputDataConfigBuilder {
    pub(crate) dataset_group_arn: std::option::Option<std::string::String>,
    pub(crate) supplementary_features:
        std::option::Option<std::vec::Vec<crate::types::SupplementaryFeature>>,
}
impl InputDataConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    pub fn dataset_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset group.</p>
    pub fn set_dataset_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dataset_group_arn = input;
        self
    }
    /// Appends an item to `supplementary_features`.
    ///
    /// To override the contents of this collection use [`set_supplementary_features`](Self::set_supplementary_features).
    ///
    /// <p>An array of supplementary features. The only supported feature is a holiday calendar.</p>
    pub fn supplementary_features(mut self, input: crate::types::SupplementaryFeature) -> Self {
        let mut v = self.supplementary_features.unwrap_or_default();
        v.push(input);
        self.supplementary_features = Some(v);
        self
    }
    /// <p>An array of supplementary features. The only supported feature is a holiday calendar.</p>
    pub fn set_supplementary_features(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SupplementaryFeature>>,
    ) -> Self {
        self.supplementary_features = input;
        self
    }
    /// Consumes the builder and constructs a [`InputDataConfig`](crate::types::InputDataConfig).
    pub fn build(self) -> crate::types::InputDataConfig {
        crate::types::InputDataConfig {
            dataset_group_arn: self.dataset_group_arn,
            supplementary_features: self.supplementary_features,
        }
    }
}
