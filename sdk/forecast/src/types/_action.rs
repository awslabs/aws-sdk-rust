// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the modifications that you are making to an attribute for a what-if forecast. For example, you can use this operation to create a what-if forecast that investigates a 10% off sale on all shoes. To do this, you specify <code>"AttributeName": "shoes"</code>, <code>"Operation": "MULTIPLY"</code>, and <code>"Value": "0.90"</code>. Pair this operation with the <code>TimeSeriesCondition</code> operation within the <code>CreateWhatIfForecastRequest$TimeSeriesTransformations</code> operation to define a subset of attribute items that are modified.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Action {
    /// <p>The related time series that you are modifying. This value is case insensitive.</p>
    #[doc(hidden)]
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>The operation that is applied to the provided attribute. Operations include:</p>
    /// <ul>
    /// <li> <p> <code>ADD</code> - adds <code>Value</code> to all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>SUBTRACT</code> - subtracts <code>Value</code> from all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>MULTIPLY</code> - multiplies all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// <li> <p> <code>DIVIDE</code> - divides all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub operation: std::option::Option<crate::types::Operation>,
    /// <p>The value that is applied for the chosen <code>Operation</code>.</p>
    #[doc(hidden)]
    pub value: std::option::Option<f64>,
}
impl Action {
    /// <p>The related time series that you are modifying. This value is case insensitive.</p>
    pub fn attribute_name(&self) -> std::option::Option<&str> {
        self.attribute_name.as_deref()
    }
    /// <p>The operation that is applied to the provided attribute. Operations include:</p>
    /// <ul>
    /// <li> <p> <code>ADD</code> - adds <code>Value</code> to all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>SUBTRACT</code> - subtracts <code>Value</code> from all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>MULTIPLY</code> - multiplies all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// <li> <p> <code>DIVIDE</code> - divides all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// </ul>
    pub fn operation(&self) -> std::option::Option<&crate::types::Operation> {
        self.operation.as_ref()
    }
    /// <p>The value that is applied for the chosen <code>Operation</code>.</p>
    pub fn value(&self) -> std::option::Option<f64> {
        self.value
    }
}
impl Action {
    /// Creates a new builder-style object to manufacture [`Action`](crate::types::Action).
    pub fn builder() -> crate::types::builders::ActionBuilder {
        crate::types::builders::ActionBuilder::default()
    }
}

/// A builder for [`Action`](crate::types::Action).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionBuilder {
    pub(crate) attribute_name: std::option::Option<std::string::String>,
    pub(crate) operation: std::option::Option<crate::types::Operation>,
    pub(crate) value: std::option::Option<f64>,
}
impl ActionBuilder {
    /// <p>The related time series that you are modifying. This value is case insensitive.</p>
    pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_name = Some(input.into());
        self
    }
    /// <p>The related time series that you are modifying. This value is case insensitive.</p>
    pub fn set_attribute_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_name = input;
        self
    }
    /// <p>The operation that is applied to the provided attribute. Operations include:</p>
    /// <ul>
    /// <li> <p> <code>ADD</code> - adds <code>Value</code> to all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>SUBTRACT</code> - subtracts <code>Value</code> from all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>MULTIPLY</code> - multiplies all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// <li> <p> <code>DIVIDE</code> - divides all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// </ul>
    pub fn operation(mut self, input: crate::types::Operation) -> Self {
        self.operation = Some(input);
        self
    }
    /// <p>The operation that is applied to the provided attribute. Operations include:</p>
    /// <ul>
    /// <li> <p> <code>ADD</code> - adds <code>Value</code> to all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>SUBTRACT</code> - subtracts <code>Value</code> from all rows of <code>AttributeName</code>.</p> </li>
    /// <li> <p> <code>MULTIPLY</code> - multiplies all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// <li> <p> <code>DIVIDE</code> - divides all rows of <code>AttributeName</code> by <code>Value</code>.</p> </li>
    /// </ul>
    pub fn set_operation(mut self, input: std::option::Option<crate::types::Operation>) -> Self {
        self.operation = input;
        self
    }
    /// <p>The value that is applied for the chosen <code>Operation</code>.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value that is applied for the chosen <code>Operation</code>.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`Action`](crate::types::Action).
    pub fn build(self) -> crate::types::Action {
        crate::types::Action {
            attribute_name: self.attribute_name,
            operation: self.operation,
            value: self.value,
        }
    }
}
