// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the categorical, continuous, and integer hyperparameters, and their ranges of tunable values. The range of tunable values determines which values that a hyperparameter tuning job can choose for the specified hyperparameter. This object is part of the <code>HyperParameterTuningJobConfig</code> object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParameterRanges {
    /// <p>Specifies the tunable range for each categorical hyperparameter.</p>
    #[doc(hidden)]
    pub categorical_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::CategoricalParameterRange>>,
    /// <p>Specifies the tunable range for each continuous hyperparameter.</p>
    #[doc(hidden)]
    pub continuous_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::ContinuousParameterRange>>,
    /// <p>Specifies the tunable range for each integer hyperparameter.</p>
    #[doc(hidden)]
    pub integer_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::IntegerParameterRange>>,
}
impl ParameterRanges {
    /// <p>Specifies the tunable range for each categorical hyperparameter.</p>
    pub fn categorical_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::CategoricalParameterRange]> {
        self.categorical_parameter_ranges.as_deref()
    }
    /// <p>Specifies the tunable range for each continuous hyperparameter.</p>
    pub fn continuous_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::ContinuousParameterRange]> {
        self.continuous_parameter_ranges.as_deref()
    }
    /// <p>Specifies the tunable range for each integer hyperparameter.</p>
    pub fn integer_parameter_ranges(
        &self,
    ) -> std::option::Option<&[crate::types::IntegerParameterRange]> {
        self.integer_parameter_ranges.as_deref()
    }
}
impl ParameterRanges {
    /// Creates a new builder-style object to manufacture [`ParameterRanges`](crate::types::ParameterRanges).
    pub fn builder() -> crate::types::builders::ParameterRangesBuilder {
        crate::types::builders::ParameterRangesBuilder::default()
    }
}

/// A builder for [`ParameterRanges`](crate::types::ParameterRanges).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParameterRangesBuilder {
    pub(crate) categorical_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::CategoricalParameterRange>>,
    pub(crate) continuous_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::ContinuousParameterRange>>,
    pub(crate) integer_parameter_ranges:
        std::option::Option<std::vec::Vec<crate::types::IntegerParameterRange>>,
}
impl ParameterRangesBuilder {
    /// Appends an item to `categorical_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_categorical_parameter_ranges`](Self::set_categorical_parameter_ranges).
    ///
    /// <p>Specifies the tunable range for each categorical hyperparameter.</p>
    pub fn categorical_parameter_ranges(
        mut self,
        input: crate::types::CategoricalParameterRange,
    ) -> Self {
        let mut v = self.categorical_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.categorical_parameter_ranges = Some(v);
        self
    }
    /// <p>Specifies the tunable range for each categorical hyperparameter.</p>
    pub fn set_categorical_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CategoricalParameterRange>>,
    ) -> Self {
        self.categorical_parameter_ranges = input;
        self
    }
    /// Appends an item to `continuous_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_continuous_parameter_ranges`](Self::set_continuous_parameter_ranges).
    ///
    /// <p>Specifies the tunable range for each continuous hyperparameter.</p>
    pub fn continuous_parameter_ranges(
        mut self,
        input: crate::types::ContinuousParameterRange,
    ) -> Self {
        let mut v = self.continuous_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.continuous_parameter_ranges = Some(v);
        self
    }
    /// <p>Specifies the tunable range for each continuous hyperparameter.</p>
    pub fn set_continuous_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ContinuousParameterRange>>,
    ) -> Self {
        self.continuous_parameter_ranges = input;
        self
    }
    /// Appends an item to `integer_parameter_ranges`.
    ///
    /// To override the contents of this collection use [`set_integer_parameter_ranges`](Self::set_integer_parameter_ranges).
    ///
    /// <p>Specifies the tunable range for each integer hyperparameter.</p>
    pub fn integer_parameter_ranges(mut self, input: crate::types::IntegerParameterRange) -> Self {
        let mut v = self.integer_parameter_ranges.unwrap_or_default();
        v.push(input);
        self.integer_parameter_ranges = Some(v);
        self
    }
    /// <p>Specifies the tunable range for each integer hyperparameter.</p>
    pub fn set_integer_parameter_ranges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IntegerParameterRange>>,
    ) -> Self {
        self.integer_parameter_ranges = input;
        self
    }
    /// Consumes the builder and constructs a [`ParameterRanges`](crate::types::ParameterRanges).
    pub fn build(self) -> crate::types::ParameterRanges {
        crate::types::ParameterRanges {
            categorical_parameter_ranges: self.categorical_parameter_ranges,
            continuous_parameter_ranges: self.continuous_parameter_ranges,
            integer_parameter_ranges: self.integer_parameter_ranges,
        }
    }
}
