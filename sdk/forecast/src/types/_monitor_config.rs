// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration details for the predictor monitor.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitorConfig {
    /// <p>The name of the monitor resource.</p>
    #[doc(hidden)]
    pub monitor_name: std::option::Option<std::string::String>,
}
impl MonitorConfig {
    /// <p>The name of the monitor resource.</p>
    pub fn monitor_name(&self) -> std::option::Option<&str> {
        self.monitor_name.as_deref()
    }
}
impl MonitorConfig {
    /// Creates a new builder-style object to manufacture [`MonitorConfig`](crate::types::MonitorConfig).
    pub fn builder() -> crate::types::builders::MonitorConfigBuilder {
        crate::types::builders::MonitorConfigBuilder::default()
    }
}

/// A builder for [`MonitorConfig`](crate::types::MonitorConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitorConfigBuilder {
    pub(crate) monitor_name: std::option::Option<std::string::String>,
}
impl MonitorConfigBuilder {
    /// <p>The name of the monitor resource.</p>
    pub fn monitor_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitor_name = Some(input.into());
        self
    }
    /// <p>The name of the monitor resource.</p>
    pub fn set_monitor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.monitor_name = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitorConfig`](crate::types::MonitorConfig).
    pub fn build(self) -> crate::types::MonitorConfig {
        crate::types::MonitorConfig {
            monitor_name: self.monitor_name,
        }
    }
}
