// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The algorithm used to perform a backtest and the status of those tests.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PredictorExecution {
    /// <p>The ARN of the algorithm used to test the predictor.</p>
    pub algorithm_arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of test windows used to evaluate the algorithm. The <code>NumberOfBacktestWindows</code> from the object determines the number of windows in the array.</p>
    pub test_windows: ::std::option::Option<::std::vec::Vec<crate::types::TestWindowSummary>>,
}
impl PredictorExecution {
    /// <p>The ARN of the algorithm used to test the predictor.</p>
    pub fn algorithm_arn(&self) -> ::std::option::Option<&str> {
        self.algorithm_arn.as_deref()
    }
    /// <p>An array of test windows used to evaluate the algorithm. The <code>NumberOfBacktestWindows</code> from the object determines the number of windows in the array.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.test_windows.is_none()`.
    pub fn test_windows(&self) -> &[crate::types::TestWindowSummary] {
        self.test_windows.as_deref().unwrap_or_default()
    }
}
impl PredictorExecution {
    /// Creates a new builder-style object to manufacture [`PredictorExecution`](crate::types::PredictorExecution).
    pub fn builder() -> crate::types::builders::PredictorExecutionBuilder {
        crate::types::builders::PredictorExecutionBuilder::default()
    }
}

/// A builder for [`PredictorExecution`](crate::types::PredictorExecution).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PredictorExecutionBuilder {
    pub(crate) algorithm_arn: ::std::option::Option<::std::string::String>,
    pub(crate) test_windows: ::std::option::Option<::std::vec::Vec<crate::types::TestWindowSummary>>,
}
impl PredictorExecutionBuilder {
    /// <p>The ARN of the algorithm used to test the predictor.</p>
    pub fn algorithm_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.algorithm_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the algorithm used to test the predictor.</p>
    pub fn set_algorithm_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.algorithm_arn = input;
        self
    }
    /// <p>The ARN of the algorithm used to test the predictor.</p>
    pub fn get_algorithm_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.algorithm_arn
    }
    /// Appends an item to `test_windows`.
    ///
    /// To override the contents of this collection use [`set_test_windows`](Self::set_test_windows).
    ///
    /// <p>An array of test windows used to evaluate the algorithm. The <code>NumberOfBacktestWindows</code> from the object determines the number of windows in the array.</p>
    pub fn test_windows(mut self, input: crate::types::TestWindowSummary) -> Self {
        let mut v = self.test_windows.unwrap_or_default();
        v.push(input);
        self.test_windows = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of test windows used to evaluate the algorithm. The <code>NumberOfBacktestWindows</code> from the object determines the number of windows in the array.</p>
    pub fn set_test_windows(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TestWindowSummary>>) -> Self {
        self.test_windows = input;
        self
    }
    /// <p>An array of test windows used to evaluate the algorithm. The <code>NumberOfBacktestWindows</code> from the object determines the number of windows in the array.</p>
    pub fn get_test_windows(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TestWindowSummary>> {
        &self.test_windows
    }
    /// Consumes the builder and constructs a [`PredictorExecution`](crate::types::PredictorExecution).
    pub fn build(self) -> crate::types::PredictorExecution {
        crate::types::PredictorExecution {
            algorithm_arn: self.algorithm_arn,
            test_windows: self.test_windows,
        }
    }
}
