// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the monitor resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitorInfo {
    /// <p>The Amazon Resource Name (ARN) of the monitor resource.</p>
    #[doc(hidden)]
    pub monitor_arn: std::option::Option<std::string::String>,
    /// <p>The status of the monitor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ACTIVE_STOPPING</code>, <code>ACTIVE_STOPPED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl MonitorInfo {
    /// <p>The Amazon Resource Name (ARN) of the monitor resource.</p>
    pub fn monitor_arn(&self) -> std::option::Option<&str> {
        self.monitor_arn.as_deref()
    }
    /// <p>The status of the monitor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ACTIVE_STOPPING</code>, <code>ACTIVE_STOPPED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl MonitorInfo {
    /// Creates a new builder-style object to manufacture [`MonitorInfo`](crate::types::MonitorInfo).
    pub fn builder() -> crate::types::builders::MonitorInfoBuilder {
        crate::types::builders::MonitorInfoBuilder::default()
    }
}

/// A builder for [`MonitorInfo`](crate::types::MonitorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitorInfoBuilder {
    pub(crate) monitor_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl MonitorInfoBuilder {
    /// <p>The Amazon Resource Name (ARN) of the monitor resource.</p>
    pub fn monitor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitor_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the monitor resource.</p>
    pub fn set_monitor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.monitor_arn = input;
        self
    }
    /// <p>The status of the monitor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ACTIVE_STOPPING</code>, <code>ACTIVE_STOPPED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the monitor. States include:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>ACTIVE_STOPPING</code>, <code>ACTIVE_STOPPED</code> </p> </li>
    /// <li> <p> <code>UPDATE_IN_PROGRESS</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitorInfo`](crate::types::MonitorInfo).
    pub fn build(self) -> crate::types::MonitorInfo {
        crate::types::MonitorInfo {
            monitor_arn: self.monitor_arn,
            status: self.status,
        }
    }
}
