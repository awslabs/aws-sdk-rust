// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the Explainability resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExplainabilityInfo {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    #[doc(hidden)]
    pub explainability_arn: std::option::Option<std::string::String>,
    /// <p>The status of the Explainability. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl ExplainabilityInfo {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn explainability_arn(&self) -> std::option::Option<&str> {
        self.explainability_arn.as_deref()
    }
    /// <p>The status of the Explainability. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl ExplainabilityInfo {
    /// Creates a new builder-style object to manufacture [`ExplainabilityInfo`](crate::types::ExplainabilityInfo).
    pub fn builder() -> crate::types::builders::ExplainabilityInfoBuilder {
        crate::types::builders::ExplainabilityInfoBuilder::default()
    }
}

/// A builder for [`ExplainabilityInfo`](crate::types::ExplainabilityInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExplainabilityInfoBuilder {
    pub(crate) explainability_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl ExplainabilityInfoBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn explainability_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.explainability_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Explainability.</p>
    pub fn set_explainability_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.explainability_arn = input;
        self
    }
    /// <p>The status of the Explainability. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the Explainability. States include: </p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> </p> </li>
    /// <li> <p> <code>CREATE_PENDING</code>, <code>CREATE_IN_PROGRESS</code>, <code>CREATE_FAILED</code> </p> </li>
    /// <li> <p> <code>CREATE_STOPPING</code>, <code>CREATE_STOPPED</code> </p> </li>
    /// <li> <p> <code>DELETE_PENDING</code>, <code>DELETE_IN_PROGRESS</code>, <code>DELETE_FAILED</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ExplainabilityInfo`](crate::types::ExplainabilityInfo).
    pub fn build(self) -> crate::types::ExplainabilityInfo {
        crate::types::ExplainabilityInfo {
            explainability_arn: self.explainability_arn,
            status: self.status,
        }
    }
}
