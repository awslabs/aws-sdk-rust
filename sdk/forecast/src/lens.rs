// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_dataset_groups_output_next_token(
    input: &crate::operation::list_dataset_groups::ListDatasetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_dataset_import_jobs_output_next_token(
    input: &crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_datasets_output_next_token(
    input: &crate::operation::list_datasets::ListDatasetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_explainabilities_output_next_token(
    input: &crate::operation::list_explainabilities::ListExplainabilitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_explainability_exports_output_next_token(
    input: &crate::operation::list_explainability_exports::ListExplainabilityExportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_forecast_export_jobs_output_next_token(
    input: &crate::operation::list_forecast_export_jobs::ListForecastExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_forecasts_output_next_token(
    input: &crate::operation::list_forecasts::ListForecastsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_monitor_evaluations_output_next_token(
    input: &crate::operation::list_monitor_evaluations::ListMonitorEvaluationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_monitors_output_next_token(
    input: &crate::operation::list_monitors::ListMonitorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_predictor_backtest_export_jobs_output_next_token(
    input: &crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_predictors_output_next_token(
    input: &crate::operation::list_predictors::ListPredictorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_what_if_analyses_output_next_token(
    input: &crate::operation::list_what_if_analyses::ListWhatIfAnalysesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_what_if_forecast_exports_output_next_token(
    input: &crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_what_if_forecasts_output_next_token(
    input: &crate::operation::list_what_if_forecasts::ListWhatIfForecastsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_groups_output_dataset_groups(
    input: crate::operation::list_dataset_groups::ListDatasetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetGroupSummary>> {
    let input = match input.dataset_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_import_jobs_output_dataset_import_jobs(
    input: crate::operation::list_dataset_import_jobs::ListDatasetImportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetImportJobSummary>> {
    let input = match input.dataset_import_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_datasets_output_datasets(
    input: crate::operation::list_datasets::ListDatasetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DatasetSummary>> {
    let input = match input.datasets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_explainabilities_output_explainabilities(
    input: crate::operation::list_explainabilities::ListExplainabilitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExplainabilitySummary>> {
    let input = match input.explainabilities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_explainability_exports_output_explainability_exports(
    input: crate::operation::list_explainability_exports::ListExplainabilityExportsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ExplainabilityExportSummary>> {
    let input = match input.explainability_exports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_forecast_export_jobs_output_forecast_export_jobs(
    input: crate::operation::list_forecast_export_jobs::ListForecastExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ForecastExportJobSummary>> {
    let input = match input.forecast_export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_forecasts_output_forecasts(
    input: crate::operation::list_forecasts::ListForecastsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ForecastSummary>> {
    let input = match input.forecasts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_monitor_evaluations_output_predictor_monitor_evaluations(
    input: crate::operation::list_monitor_evaluations::ListMonitorEvaluationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PredictorMonitorEvaluation>> {
    let input = match input.predictor_monitor_evaluations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_monitors_output_monitors(
    input: crate::operation::list_monitors::ListMonitorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MonitorSummary>> {
    let input = match input.monitors {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_predictor_backtest_export_jobs_output_predictor_backtest_export_jobs(
    input: crate::operation::list_predictor_backtest_export_jobs::ListPredictorBacktestExportJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PredictorBacktestExportJobSummary>> {
    let input = match input.predictor_backtest_export_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_predictors_output_predictors(
    input: crate::operation::list_predictors::ListPredictorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PredictorSummary>> {
    let input = match input.predictors {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_what_if_analyses_output_what_if_analyses(
    input: crate::operation::list_what_if_analyses::ListWhatIfAnalysesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WhatIfAnalysisSummary>> {
    let input = match input.what_if_analyses {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_what_if_forecast_exports_output_what_if_forecast_exports(
    input: crate::operation::list_what_if_forecast_exports::ListWhatIfForecastExportsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WhatIfForecastExportSummary>> {
    let input = match input.what_if_forecast_exports {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_what_if_forecasts_output_what_if_forecasts(
    input: crate::operation::list_what_if_forecasts::ListWhatIfForecastsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::WhatIfForecastSummary>> {
    let input = match input.what_if_forecasts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
