// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_dataset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) {
    if let Some(var_1) = &input.dataset_name {
        object.key("DatasetName").string(var_1);
    }
    if let Some(var_2) = &input.domain {
        object.key("Domain").string(var_2.as_str());
    }
    if let Some(var_3) = &input.dataset_type {
        object.key("DatasetType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_frequency {
        object.key("DataFrequency").string(var_4);
    }
    if let Some(var_5) = &input.schema {
        let mut object_6 = object.key("Schema").start_object();
        crate::json_ser::serialize_structure_schema(&mut object_6, var_5);
        object_6.finish();
    }
    if let Some(var_7) = &input.encryption_config {
        let mut object_8 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_encryption_config(&mut object_8, var_7);
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_12, item_11);
                object_12.finish();
            }
        }
        array_10.finish();
    }
}

pub fn serialize_structure_create_dataset_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetGroupInput,
) {
    if let Some(var_13) = &input.dataset_group_name {
        object.key("DatasetGroupName").string(var_13);
    }
    if let Some(var_14) = &input.domain {
        object.key("Domain").string(var_14.as_str());
    }
    if let Some(var_15) = &input.dataset_arns {
        let mut array_16 = object.key("DatasetArns").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17);
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.tags {
        let mut array_19 = object.key("Tags").start_array();
        for item_20 in var_18 {
            {
                let mut object_21 = array_19.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_21, item_20);
                object_21.finish();
            }
        }
        array_19.finish();
    }
}

pub fn serialize_structure_create_dataset_import_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetImportJobInput,
) {
    if let Some(var_22) = &input.dataset_import_job_name {
        object.key("DatasetImportJobName").string(var_22);
    }
    if let Some(var_23) = &input.dataset_arn {
        object.key("DatasetArn").string(var_23);
    }
    if let Some(var_24) = &input.data_source {
        let mut object_25 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_data_source(&mut object_25, var_24);
        object_25.finish();
    }
    if let Some(var_26) = &input.timestamp_format {
        object.key("TimestampFormat").string(var_26);
    }
    if let Some(var_27) = &input.time_zone {
        object.key("TimeZone").string(var_27);
    }
    if input.use_geolocation_for_time_zone {
        object
            .key("UseGeolocationForTimeZone")
            .boolean(input.use_geolocation_for_time_zone);
    }
    if let Some(var_28) = &input.geolocation_format {
        object.key("GeolocationFormat").string(var_28);
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_32, item_31);
                object_32.finish();
            }
        }
        array_30.finish();
    }
}

pub fn serialize_structure_create_forecast_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateForecastInput,
) {
    if let Some(var_33) = &input.forecast_name {
        object.key("ForecastName").string(var_33);
    }
    if let Some(var_34) = &input.predictor_arn {
        object.key("PredictorArn").string(var_34);
    }
    if let Some(var_35) = &input.forecast_types {
        let mut array_36 = object.key("ForecastTypes").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37);
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
}

pub fn serialize_structure_create_forecast_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateForecastExportJobInput,
) {
    if let Some(var_42) = &input.forecast_export_job_name {
        object.key("ForecastExportJobName").string(var_42);
    }
    if let Some(var_43) = &input.forecast_arn {
        object.key("ForecastArn").string(var_43);
    }
    if let Some(var_44) = &input.destination {
        let mut object_45 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_data_destination(&mut object_45, var_44);
        object_45.finish();
    }
    if let Some(var_46) = &input.tags {
        let mut array_47 = object.key("Tags").start_array();
        for item_48 in var_46 {
            {
                let mut object_49 = array_47.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_49, item_48);
                object_49.finish();
            }
        }
        array_47.finish();
    }
}

pub fn serialize_structure_create_predictor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePredictorInput,
) {
    if let Some(var_50) = &input.predictor_name {
        object.key("PredictorName").string(var_50);
    }
    if let Some(var_51) = &input.algorithm_arn {
        object.key("AlgorithmArn").string(var_51);
    }
    if let Some(var_52) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_52).into()),
        );
    }
    if let Some(var_53) = &input.forecast_types {
        let mut array_54 = object.key("ForecastTypes").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55);
            }
        }
        array_54.finish();
    }
    if let Some(var_56) = &input.perform_auto_ml {
        object.key("PerformAutoML").boolean(*var_56);
    }
    if let Some(var_57) = &input.auto_ml_override_strategy {
        object.key("AutoMLOverrideStrategy").string(var_57.as_str());
    }
    if let Some(var_58) = &input.perform_hpo {
        object.key("PerformHPO").boolean(*var_58);
    }
    if let Some(var_59) = &input.training_parameters {
        let mut object_60 = object.key("TrainingParameters").start_object();
        for (key_61, value_62) in var_59 {
            {
                object_60.key(key_61).string(value_62);
            }
        }
        object_60.finish();
    }
    if let Some(var_63) = &input.evaluation_parameters {
        let mut object_64 = object.key("EvaluationParameters").start_object();
        crate::json_ser::serialize_structure_evaluation_parameters(&mut object_64, var_63);
        object_64.finish();
    }
    if let Some(var_65) = &input.hpo_config {
        let mut object_66 = object.key("HPOConfig").start_object();
        crate::json_ser::serialize_structure_hyper_parameter_tuning_job_config(
            &mut object_66,
            var_65,
        );
        object_66.finish();
    }
    if let Some(var_67) = &input.input_data_config {
        let mut object_68 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_input_data_config(&mut object_68, var_67);
        object_68.finish();
    }
    if let Some(var_69) = &input.featurization_config {
        let mut object_70 = object.key("FeaturizationConfig").start_object();
        crate::json_ser::serialize_structure_featurization_config(&mut object_70, var_69);
        object_70.finish();
    }
    if let Some(var_71) = &input.encryption_config {
        let mut object_72 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_encryption_config(&mut object_72, var_71);
        object_72.finish();
    }
    if let Some(var_73) = &input.tags {
        let mut array_74 = object.key("Tags").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_76, item_75);
                object_76.finish();
            }
        }
        array_74.finish();
    }
}

pub fn serialize_structure_create_predictor_backtest_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePredictorBacktestExportJobInput,
) {
    if let Some(var_77) = &input.predictor_backtest_export_job_name {
        object.key("PredictorBacktestExportJobName").string(var_77);
    }
    if let Some(var_78) = &input.predictor_arn {
        object.key("PredictorArn").string(var_78);
    }
    if let Some(var_79) = &input.destination {
        let mut object_80 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_data_destination(&mut object_80, var_79);
        object_80.finish();
    }
    if let Some(var_81) = &input.tags {
        let mut array_82 = object.key("Tags").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_84, item_83);
                object_84.finish();
            }
        }
        array_82.finish();
    }
}

pub fn serialize_structure_delete_dataset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetInput,
) {
    if let Some(var_85) = &input.dataset_arn {
        object.key("DatasetArn").string(var_85);
    }
}

pub fn serialize_structure_delete_dataset_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetGroupInput,
) {
    if let Some(var_86) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_86);
    }
}

pub fn serialize_structure_delete_dataset_import_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetImportJobInput,
) {
    if let Some(var_87) = &input.dataset_import_job_arn {
        object.key("DatasetImportJobArn").string(var_87);
    }
}

pub fn serialize_structure_delete_forecast_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteForecastInput,
) {
    if let Some(var_88) = &input.forecast_arn {
        object.key("ForecastArn").string(var_88);
    }
}

pub fn serialize_structure_delete_forecast_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteForecastExportJobInput,
) {
    if let Some(var_89) = &input.forecast_export_job_arn {
        object.key("ForecastExportJobArn").string(var_89);
    }
}

pub fn serialize_structure_delete_predictor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePredictorInput,
) {
    if let Some(var_90) = &input.predictor_arn {
        object.key("PredictorArn").string(var_90);
    }
}

pub fn serialize_structure_delete_predictor_backtest_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePredictorBacktestExportJobInput,
) {
    if let Some(var_91) = &input.predictor_backtest_export_job_arn {
        object.key("PredictorBacktestExportJobArn").string(var_91);
    }
}

pub fn serialize_structure_delete_resource_tree_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceTreeInput,
) {
    if let Some(var_92) = &input.resource_arn {
        object.key("ResourceArn").string(var_92);
    }
}

pub fn serialize_structure_describe_dataset_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetInput,
) {
    if let Some(var_93) = &input.dataset_arn {
        object.key("DatasetArn").string(var_93);
    }
}

pub fn serialize_structure_describe_dataset_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetGroupInput,
) {
    if let Some(var_94) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_94);
    }
}

pub fn serialize_structure_describe_dataset_import_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetImportJobInput,
) {
    if let Some(var_95) = &input.dataset_import_job_arn {
        object.key("DatasetImportJobArn").string(var_95);
    }
}

pub fn serialize_structure_describe_forecast_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeForecastInput,
) {
    if let Some(var_96) = &input.forecast_arn {
        object.key("ForecastArn").string(var_96);
    }
}

pub fn serialize_structure_describe_forecast_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeForecastExportJobInput,
) {
    if let Some(var_97) = &input.forecast_export_job_arn {
        object.key("ForecastExportJobArn").string(var_97);
    }
}

pub fn serialize_structure_describe_predictor_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePredictorInput,
) {
    if let Some(var_98) = &input.predictor_arn {
        object.key("PredictorArn").string(var_98);
    }
}

pub fn serialize_structure_describe_predictor_backtest_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePredictorBacktestExportJobInput,
) {
    if let Some(var_99) = &input.predictor_backtest_export_job_arn {
        object.key("PredictorBacktestExportJobArn").string(var_99);
    }
}

pub fn serialize_structure_get_accuracy_metrics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAccuracyMetricsInput,
) {
    if let Some(var_100) = &input.predictor_arn {
        object.key("PredictorArn").string(var_100);
    }
}

pub fn serialize_structure_list_dataset_groups_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetGroupsInput,
) {
    if let Some(var_101) = &input.next_token {
        object.key("NextToken").string(var_101);
    }
    if let Some(var_102) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_102).into()),
        );
    }
}

pub fn serialize_structure_list_dataset_import_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetImportJobsInput,
) {
    if let Some(var_103) = &input.next_token {
        object.key("NextToken").string(var_103);
    }
    if let Some(var_104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    if let Some(var_105) = &input.filters {
        let mut array_106 = object.key("Filters").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_108, item_107);
                object_108.finish();
            }
        }
        array_106.finish();
    }
}

pub fn serialize_structure_list_datasets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetsInput,
) {
    if let Some(var_109) = &input.next_token {
        object.key("NextToken").string(var_109);
    }
    if let Some(var_110) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_110).into()),
        );
    }
}

pub fn serialize_structure_list_forecast_export_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListForecastExportJobsInput,
) {
    if let Some(var_111) = &input.next_token {
        object.key("NextToken").string(var_111);
    }
    if let Some(var_112) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_112).into()),
        );
    }
    if let Some(var_113) = &input.filters {
        let mut array_114 = object.key("Filters").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_116, item_115);
                object_116.finish();
            }
        }
        array_114.finish();
    }
}

pub fn serialize_structure_list_forecasts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListForecastsInput,
) {
    if let Some(var_117) = &input.next_token {
        object.key("NextToken").string(var_117);
    }
    if let Some(var_118) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    if let Some(var_119) = &input.filters {
        let mut array_120 = object.key("Filters").start_array();
        for item_121 in var_119 {
            {
                let mut object_122 = array_120.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_122, item_121);
                object_122.finish();
            }
        }
        array_120.finish();
    }
}

pub fn serialize_structure_list_predictor_backtest_export_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPredictorBacktestExportJobsInput,
) {
    if let Some(var_123) = &input.next_token {
        object.key("NextToken").string(var_123);
    }
    if let Some(var_124) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    if let Some(var_125) = &input.filters {
        let mut array_126 = object.key("Filters").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_128, item_127);
                object_128.finish();
            }
        }
        array_126.finish();
    }
}

pub fn serialize_structure_list_predictors_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPredictorsInput,
) {
    if let Some(var_129) = &input.next_token {
        object.key("NextToken").string(var_129);
    }
    if let Some(var_130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_130).into()),
        );
    }
    if let Some(var_131) = &input.filters {
        let mut array_132 = object.key("Filters").start_array();
        for item_133 in var_131 {
            {
                let mut object_134 = array_132.value().start_object();
                crate::json_ser::serialize_structure_filter(&mut object_134, item_133);
                object_134.finish();
            }
        }
        array_132.finish();
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_135) = &input.resource_arn {
        object.key("ResourceArn").string(var_135);
    }
}

pub fn serialize_structure_stop_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopResourceInput,
) {
    if let Some(var_136) = &input.resource_arn {
        object.key("ResourceArn").string(var_136);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_137) = &input.resource_arn {
        object.key("ResourceArn").string(var_137);
    }
    if let Some(var_138) = &input.tags {
        let mut array_139 = object.key("Tags").start_array();
        for item_140 in var_138 {
            {
                let mut object_141 = array_139.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_141, item_140);
                object_141.finish();
            }
        }
        array_139.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_142) = &input.resource_arn {
        object.key("ResourceArn").string(var_142);
    }
    if let Some(var_143) = &input.tag_keys {
        let mut array_144 = object.key("TagKeys").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145);
            }
        }
        array_144.finish();
    }
}

pub fn serialize_structure_update_dataset_group_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetGroupInput,
) {
    if let Some(var_146) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_146);
    }
    if let Some(var_147) = &input.dataset_arns {
        let mut array_148 = object.key("DatasetArns").start_array();
        for item_149 in var_147 {
            {
                array_148.value().string(item_149);
            }
        }
        array_148.finish();
    }
}

pub fn serialize_structure_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Schema,
) {
    if let Some(var_150) = &input.attributes {
        let mut array_151 = object.key("Attributes").start_array();
        for item_152 in var_150 {
            {
                let mut object_153 = array_151.value().start_object();
                crate::json_ser::serialize_structure_schema_attribute(&mut object_153, item_152);
                object_153.finish();
            }
        }
        array_151.finish();
    }
}

pub fn serialize_structure_encryption_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) {
    if let Some(var_154) = &input.role_arn {
        object.key("RoleArn").string(var_154);
    }
    if let Some(var_155) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_155);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_156) = &input.key {
        object.key("Key").string(var_156);
    }
    if let Some(var_157) = &input.value {
        object.key("Value").string(var_157);
    }
}

pub fn serialize_structure_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) {
    if let Some(var_158) = &input.s3_config {
        let mut object_159 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_s3_config(&mut object_159, var_158);
        object_159.finish();
    }
}

pub fn serialize_structure_data_destination(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataDestination,
) {
    if let Some(var_160) = &input.s3_config {
        let mut object_161 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_s3_config(&mut object_161, var_160);
        object_161.finish();
    }
}

pub fn serialize_structure_evaluation_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EvaluationParameters,
) {
    if let Some(var_162) = &input.number_of_backtest_windows {
        object.key("NumberOfBacktestWindows").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_162).into()),
        );
    }
    if let Some(var_163) = &input.back_test_window_offset {
        object.key("BackTestWindowOffset").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
}

pub fn serialize_structure_hyper_parameter_tuning_job_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) {
    if let Some(var_164) = &input.parameter_ranges {
        let mut object_165 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_parameter_ranges(&mut object_165, var_164);
        object_165.finish();
    }
}

pub fn serialize_structure_input_data_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) {
    if let Some(var_166) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_166);
    }
    if let Some(var_167) = &input.supplementary_features {
        let mut array_168 = object.key("SupplementaryFeatures").start_array();
        for item_169 in var_167 {
            {
                let mut object_170 = array_168.value().start_object();
                crate::json_ser::serialize_structure_supplementary_feature(
                    &mut object_170,
                    item_169,
                );
                object_170.finish();
            }
        }
        array_168.finish();
    }
}

pub fn serialize_structure_featurization_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeaturizationConfig,
) {
    if let Some(var_171) = &input.forecast_frequency {
        object.key("ForecastFrequency").string(var_171);
    }
    if let Some(var_172) = &input.forecast_dimensions {
        let mut array_173 = object.key("ForecastDimensions").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.featurizations {
        let mut array_176 = object.key("Featurizations").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_featurization(&mut object_178, item_177);
                object_178.finish();
            }
        }
        array_176.finish();
    }
}

pub fn serialize_structure_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_179) = &input.key {
        object.key("Key").string(var_179);
    }
    if let Some(var_180) = &input.value {
        object.key("Value").string(var_180);
    }
    if let Some(var_181) = &input.condition {
        object.key("Condition").string(var_181.as_str());
    }
}

pub fn serialize_structure_schema_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaAttribute,
) {
    if let Some(var_182) = &input.attribute_name {
        object.key("AttributeName").string(var_182);
    }
    if let Some(var_183) = &input.attribute_type {
        object.key("AttributeType").string(var_183.as_str());
    }
}

pub fn serialize_structure_s3_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) {
    if let Some(var_184) = &input.path {
        object.key("Path").string(var_184);
    }
    if let Some(var_185) = &input.role_arn {
        object.key("RoleArn").string(var_185);
    }
    if let Some(var_186) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_186);
    }
}

pub fn serialize_structure_parameter_ranges(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) {
    if let Some(var_187) = &input.categorical_parameter_ranges {
        let mut array_188 = object.key("CategoricalParameterRanges").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_categorical_parameter_range(
                    &mut object_190,
                    item_189,
                );
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.continuous_parameter_ranges {
        let mut array_192 = object.key("ContinuousParameterRanges").start_array();
        for item_193 in var_191 {
            {
                let mut object_194 = array_192.value().start_object();
                crate::json_ser::serialize_structure_continuous_parameter_range(
                    &mut object_194,
                    item_193,
                );
                object_194.finish();
            }
        }
        array_192.finish();
    }
    if let Some(var_195) = &input.integer_parameter_ranges {
        let mut array_196 = object.key("IntegerParameterRanges").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_integer_parameter_range(
                    &mut object_198,
                    item_197,
                );
                object_198.finish();
            }
        }
        array_196.finish();
    }
}

pub fn serialize_structure_supplementary_feature(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupplementaryFeature,
) {
    if let Some(var_199) = &input.name {
        object.key("Name").string(var_199);
    }
    if let Some(var_200) = &input.value {
        object.key("Value").string(var_200);
    }
}

pub fn serialize_structure_featurization(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Featurization,
) {
    if let Some(var_201) = &input.attribute_name {
        object.key("AttributeName").string(var_201);
    }
    if let Some(var_202) = &input.featurization_pipeline {
        let mut array_203 = object.key("FeaturizationPipeline").start_array();
        for item_204 in var_202 {
            {
                let mut object_205 = array_203.value().start_object();
                crate::json_ser::serialize_structure_featurization_method(
                    &mut object_205,
                    item_204,
                );
                object_205.finish();
            }
        }
        array_203.finish();
    }
}

pub fn serialize_structure_categorical_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) {
    if let Some(var_206) = &input.name {
        object.key("Name").string(var_206);
    }
    if let Some(var_207) = &input.values {
        let mut array_208 = object.key("Values").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
}

pub fn serialize_structure_continuous_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) {
    if let Some(var_210) = &input.name {
        object.key("Name").string(var_210);
    }
    if let Some(var_211) = &input.max_value {
        object.key("MaxValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.min_value {
        object.key("MinValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_212).into()),
        );
    }
    if let Some(var_213) = &input.scaling_type {
        object.key("ScalingType").string(var_213.as_str());
    }
}

pub fn serialize_structure_integer_parameter_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) {
    if let Some(var_214) = &input.name {
        object.key("Name").string(var_214);
    }
    if let Some(var_215) = &input.max_value {
        object.key("MaxValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_215).into()),
        );
    }
    if let Some(var_216) = &input.min_value {
        object.key("MinValue").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_216).into()),
        );
    }
    if let Some(var_217) = &input.scaling_type {
        object.key("ScalingType").string(var_217.as_str());
    }
}

pub fn serialize_structure_featurization_method(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeaturizationMethod,
) {
    if let Some(var_218) = &input.featurization_method_name {
        object
            .key("FeaturizationMethodName")
            .string(var_218.as_str());
    }
    if let Some(var_219) = &input.featurization_method_parameters {
        let mut object_220 = object.key("FeaturizationMethodParameters").start_object();
        for (key_221, value_222) in var_219 {
            {
                object_220.key(key_221).string(value_222);
            }
        }
        object_220.finish();
    }
}
