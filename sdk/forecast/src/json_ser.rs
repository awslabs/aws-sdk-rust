// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_auto_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoPredictorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.predictor_name {
        object.key("PredictorName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.forecast_types {
        let mut array_4 = object.key("ForecastTypes").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.forecast_dimensions {
        let mut array_7 = object.key("ForecastDimensions").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.forecast_frequency {
        object.key("ForecastFrequency").string(var_9.as_str());
    }
    if let Some(var_10) = &input.data_config {
        let mut object_11 = object.key("DataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_data_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.encryption_config {
        let mut object_13 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.reference_predictor_arn {
        object.key("ReferencePredictorArn").string(var_14.as_str());
    }
    if let Some(var_15) = &input.optimization_metric {
        object.key("OptimizationMetric").string(var_15.as_str());
    }
    if let Some(var_16) = &input.explain_predictor {
        object.key("ExplainPredictor").boolean(*var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.dataset_name {
        object.key("DatasetName").string(var_21.as_str());
    }
    if let Some(var_22) = &input.domain {
        object.key("Domain").string(var_22.as_str());
    }
    if let Some(var_23) = &input.dataset_type {
        object.key("DatasetType").string(var_23.as_str());
    }
    if let Some(var_24) = &input.data_frequency {
        object.key("DataFrequency").string(var_24.as_str());
    }
    if let Some(var_25) = &input.schema {
        let mut object_26 = object.key("Schema").start_object();
        crate::json_ser::serialize_structure_crate_model_schema(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.encryption_config {
        let mut object_28 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.tags {
        let mut array_30 = object.key("Tags").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_32, item_31)?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.dataset_group_name {
        object.key("DatasetGroupName").string(var_33.as_str());
    }
    if let Some(var_34) = &input.domain {
        object.key("Domain").string(var_34.as_str());
    }
    if let Some(var_35) = &input.dataset_arns {
        let mut array_36 = object.key("DatasetArns").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_41, item_40)?;
                object_41.finish();
            }
        }
        array_39.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.dataset_import_job_name {
        object.key("DatasetImportJobName").string(var_42.as_str());
    }
    if let Some(var_43) = &input.dataset_arn {
        object.key("DatasetArn").string(var_43.as_str());
    }
    if let Some(var_44) = &input.data_source {
        let mut object_45 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_45, var_44)?;
        object_45.finish();
    }
    if let Some(var_46) = &input.timestamp_format {
        object.key("TimestampFormat").string(var_46.as_str());
    }
    if let Some(var_47) = &input.time_zone {
        object.key("TimeZone").string(var_47.as_str());
    }
    if input.use_geolocation_for_time_zone {
        object
            .key("UseGeolocationForTimeZone")
            .boolean(input.use_geolocation_for_time_zone);
    }
    if let Some(var_48) = &input.geolocation_format {
        object.key("GeolocationFormat").string(var_48.as_str());
    }
    if let Some(var_49) = &input.tags {
        let mut array_50 = object.key("Tags").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_explainability_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExplainabilityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.explainability_name {
        object.key("ExplainabilityName").string(var_53.as_str());
    }
    if let Some(var_54) = &input.resource_arn {
        object.key("ResourceArn").string(var_54.as_str());
    }
    if let Some(var_55) = &input.explainability_config {
        let mut object_56 = object.key("ExplainabilityConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_explainability_config(
            &mut object_56,
            var_55,
        )?;
        object_56.finish();
    }
    if let Some(var_57) = &input.data_source {
        let mut object_58 = object.key("DataSource").start_object();
        crate::json_ser::serialize_structure_crate_model_data_source(&mut object_58, var_57)?;
        object_58.finish();
    }
    if let Some(var_59) = &input.schema {
        let mut object_60 = object.key("Schema").start_object();
        crate::json_ser::serialize_structure_crate_model_schema(&mut object_60, var_59)?;
        object_60.finish();
    }
    if let Some(var_61) = &input.enable_visualization {
        object.key("EnableVisualization").boolean(*var_61);
    }
    if let Some(var_62) = &input.start_date_time {
        object.key("StartDateTime").string(var_62.as_str());
    }
    if let Some(var_63) = &input.end_date_time {
        object.key("EndDateTime").string(var_63.as_str());
    }
    if let Some(var_64) = &input.tags {
        let mut array_65 = object.key("Tags").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_67, item_66)?;
                object_67.finish();
            }
        }
        array_65.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_explainability_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateExplainabilityExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.explainability_export_name {
        object
            .key("ExplainabilityExportName")
            .string(var_68.as_str());
    }
    if let Some(var_69) = &input.explainability_arn {
        object.key("ExplainabilityArn").string(var_69.as_str());
    }
    if let Some(var_70) = &input.destination {
        let mut object_71 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_data_destination(&mut object_71, var_70)?;
        object_71.finish();
    }
    if let Some(var_72) = &input.tags {
        let mut array_73 = object.key("Tags").start_array();
        for item_74 in var_72 {
            {
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_75, item_74)?;
                object_75.finish();
            }
        }
        array_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_forecast_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateForecastInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.forecast_name {
        object.key("ForecastName").string(var_76.as_str());
    }
    if let Some(var_77) = &input.predictor_arn {
        object.key("PredictorArn").string(var_77.as_str());
    }
    if let Some(var_78) = &input.forecast_types {
        let mut array_79 = object.key("ForecastTypes").start_array();
        for item_80 in var_78 {
            {
                array_79.value().string(item_80.as_str());
            }
        }
        array_79.finish();
    }
    if let Some(var_81) = &input.tags {
        let mut array_82 = object.key("Tags").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_84, item_83)?;
                object_84.finish();
            }
        }
        array_82.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_forecast_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateForecastExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.forecast_export_job_name {
        object.key("ForecastExportJobName").string(var_85.as_str());
    }
    if let Some(var_86) = &input.forecast_arn {
        object.key("ForecastArn").string(var_86.as_str());
    }
    if let Some(var_87) = &input.destination {
        let mut object_88 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_data_destination(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.tags {
        let mut array_90 = object.key("Tags").start_array();
        for item_91 in var_89 {
            {
                let mut object_92 = array_90.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_92, item_91)?;
                object_92.finish();
            }
        }
        array_90.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePredictorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.predictor_name {
        object.key("PredictorName").string(var_93.as_str());
    }
    if let Some(var_94) = &input.algorithm_arn {
        object.key("AlgorithmArn").string(var_94.as_str());
    }
    if let Some(var_95) = &input.forecast_horizon {
        object.key("ForecastHorizon").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    if let Some(var_96) = &input.forecast_types {
        let mut array_97 = object.key("ForecastTypes").start_array();
        for item_98 in var_96 {
            {
                array_97.value().string(item_98.as_str());
            }
        }
        array_97.finish();
    }
    if let Some(var_99) = &input.perform_auto_ml {
        object.key("PerformAutoML").boolean(*var_99);
    }
    if let Some(var_100) = &input.auto_ml_override_strategy {
        object
            .key("AutoMLOverrideStrategy")
            .string(var_100.as_str());
    }
    if let Some(var_101) = &input.perform_hpo {
        object.key("PerformHPO").boolean(*var_101);
    }
    if let Some(var_102) = &input.training_parameters {
        let mut object_103 = object.key("TrainingParameters").start_object();
        for (key_104, value_105) in var_102 {
            {
                object_103.key(key_104).string(value_105.as_str());
            }
        }
        object_103.finish();
    }
    if let Some(var_106) = &input.evaluation_parameters {
        let mut object_107 = object.key("EvaluationParameters").start_object();
        crate::json_ser::serialize_structure_crate_model_evaluation_parameters(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    if let Some(var_108) = &input.hpo_config {
        let mut object_109 = object.key("HPOConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_hyper_parameter_tuning_job_config(
            &mut object_109,
            var_108,
        )?;
        object_109.finish();
    }
    if let Some(var_110) = &input.input_data_config {
        let mut object_111 = object.key("InputDataConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_input_data_config(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    if let Some(var_112) = &input.featurization_config {
        let mut object_113 = object.key("FeaturizationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_featurization_config(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    if let Some(var_114) = &input.encryption_config {
        let mut object_115 = object.key("EncryptionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_config(
            &mut object_115,
            var_114,
        )?;
        object_115.finish();
    }
    if let Some(var_116) = &input.tags {
        let mut array_117 = object.key("Tags").start_array();
        for item_118 in var_116 {
            {
                let mut object_119 = array_117.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_119, item_118)?;
                object_119.finish();
            }
        }
        array_117.finish();
    }
    if let Some(var_120) = &input.optimization_metric {
        object.key("OptimizationMetric").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_predictor_backtest_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePredictorBacktestExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.predictor_backtest_export_job_name {
        object
            .key("PredictorBacktestExportJobName")
            .string(var_121.as_str());
    }
    if let Some(var_122) = &input.predictor_arn {
        object.key("PredictorArn").string(var_122.as_str());
    }
    if let Some(var_123) = &input.destination {
        let mut object_124 = object.key("Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_data_destination(
            &mut object_124,
            var_123,
        )?;
        object_124.finish();
    }
    if let Some(var_125) = &input.tags {
        let mut array_126 = object.key("Tags").start_array();
        for item_127 in var_125 {
            {
                let mut object_128 = array_126.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_128, item_127)?;
                object_128.finish();
            }
        }
        array_126.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.dataset_arn {
        object.key("DatasetArn").string(var_129.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_130.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.dataset_import_job_arn {
        object.key("DatasetImportJobArn").string(var_131.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_explainability_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExplainabilityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.explainability_arn {
        object.key("ExplainabilityArn").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_explainability_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteExplainabilityExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.explainability_export_arn {
        object
            .key("ExplainabilityExportArn")
            .string(var_133.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_forecast_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteForecastInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.forecast_arn {
        object.key("ForecastArn").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_forecast_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteForecastExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.forecast_export_job_arn {
        object.key("ForecastExportJobArn").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePredictorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.predictor_arn {
        object.key("PredictorArn").string(var_136.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_predictor_backtest_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePredictorBacktestExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.predictor_backtest_export_job_arn {
        object
            .key("PredictorBacktestExportJobArn")
            .string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_tree_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceTreeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.resource_arn {
        object.key("ResourceArn").string(var_138.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoPredictorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_139) = &input.predictor_arn {
        object.key("PredictorArn").string(var_139.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.dataset_arn {
        object.key("DatasetArn").string(var_140.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_141.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_dataset_import_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDatasetImportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.dataset_import_job_arn {
        object.key("DatasetImportJobArn").string(var_142.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_explainability_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExplainabilityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_143) = &input.explainability_arn {
        object.key("ExplainabilityArn").string(var_143.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_explainability_export_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeExplainabilityExportInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.explainability_export_arn {
        object
            .key("ExplainabilityExportArn")
            .string(var_144.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_forecast_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeForecastInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.forecast_arn {
        object.key("ForecastArn").string(var_145.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_forecast_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeForecastExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.forecast_export_job_arn {
        object.key("ForecastExportJobArn").string(var_146.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_predictor_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePredictorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.predictor_arn {
        object.key("PredictorArn").string(var_147.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_predictor_backtest_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePredictorBacktestExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.predictor_backtest_export_job_arn {
        object
            .key("PredictorBacktestExportJobArn")
            .string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_accuracy_metrics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAccuracyMetricsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.predictor_arn {
        object.key("PredictorArn").string(var_149.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.next_token {
        object.key("NextToken").string(var_150.as_str());
    }
    if let Some(var_151) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_151).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_dataset_import_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetImportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.next_token {
        object.key("NextToken").string(var_152.as_str());
    }
    if let Some(var_153) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_153).into()),
        );
    }
    if let Some(var_154) = &input.filters {
        let mut array_155 = object.key("Filters").start_array();
        for item_156 in var_154 {
            {
                let mut object_157 = array_155.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_157, item_156)?;
                object_157.finish();
            }
        }
        array_155.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_datasets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDatasetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.next_token {
        object.key("NextToken").string(var_158.as_str());
    }
    if let Some(var_159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_explainabilities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExplainabilitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.next_token {
        object.key("NextToken").string(var_160.as_str());
    }
    if let Some(var_161) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.filters {
        let mut array_163 = object.key("Filters").start_array();
        for item_164 in var_162 {
            {
                let mut object_165 = array_163.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_165, item_164)?;
                object_165.finish();
            }
        }
        array_163.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_explainability_exports_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListExplainabilityExportsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_166) = &input.next_token {
        object.key("NextToken").string(var_166.as_str());
    }
    if let Some(var_167) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.filters {
        let mut array_169 = object.key("Filters").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_171, item_170)?;
                object_171.finish();
            }
        }
        array_169.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_forecast_export_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListForecastExportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_172) = &input.next_token {
        object.key("NextToken").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.filters {
        let mut array_175 = object.key("Filters").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_177, item_176)?;
                object_177.finish();
            }
        }
        array_175.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_forecasts_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListForecastsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178.as_str());
    }
    if let Some(var_179) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_179).into()),
        );
    }
    if let Some(var_180) = &input.filters {
        let mut array_181 = object.key("Filters").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_183, item_182)?;
                object_183.finish();
            }
        }
        array_181.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_predictor_backtest_export_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPredictorBacktestExportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.next_token {
        object.key("NextToken").string(var_184.as_str());
    }
    if let Some(var_185) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.filters {
        let mut array_187 = object.key("Filters").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_189, item_188)?;
                object_189.finish();
            }
        }
        array_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_predictors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPredictorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.next_token {
        object.key("NextToken").string(var_190.as_str());
    }
    if let Some(var_191) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.filters {
        let mut array_193 = object.key("Filters").start_array();
        for item_194 in var_192 {
            {
                let mut object_195 = array_193.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_195, item_194)?;
                object_195.finish();
            }
        }
        array_193.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_196) = &input.resource_arn {
        object.key("ResourceArn").string(var_196.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.resource_arn {
        object.key("ResourceArn").string(var_197.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_198) = &input.resource_arn {
        object.key("ResourceArn").string(var_198.as_str());
    }
    if let Some(var_199) = &input.tags {
        let mut array_200 = object.key("Tags").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_202, item_201)?;
                object_202.finish();
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.resource_arn {
        object.key("ResourceArn").string(var_203.as_str());
    }
    if let Some(var_204) = &input.tag_keys {
        let mut array_205 = object.key("TagKeys").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206.as_str());
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dataset_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDatasetGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_207.as_str());
    }
    if let Some(var_208) = &input.dataset_arns {
        let mut array_209 = object.key("DatasetArns").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210.as_str());
            }
        }
        array_209.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_211) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_211.as_str());
    }
    if let Some(var_212) = &input.attribute_configs {
        let mut array_213 = object.key("AttributeConfigs").start_array();
        for item_214 in var_212 {
            {
                let mut object_215 = array_213.value().start_object();
                crate::json_ser::serialize_structure_crate_model_attribute_config(
                    &mut object_215,
                    item_214,
                )?;
                object_215.finish();
            }
        }
        array_213.finish();
    }
    if let Some(var_216) = &input.additional_datasets {
        let mut array_217 = object.key("AdditionalDatasets").start_array();
        for item_218 in var_216 {
            {
                let mut object_219 = array_217.value().start_object();
                crate::json_ser::serialize_structure_crate_model_additional_dataset(
                    &mut object_219,
                    item_218,
                )?;
                object_219.finish();
            }
        }
        array_217.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.role_arn {
        object.key("RoleArn").string(var_220.as_str());
    }
    if let Some(var_221) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_221.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_222) = &input.key {
        object.key("Key").string(var_222.as_str());
    }
    if let Some(var_223) = &input.value {
        object.key("Value").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Schema,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.attributes {
        let mut array_225 = object.key("Attributes").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_schema_attribute(
                    &mut object_227,
                    item_226,
                )?;
                object_227.finish();
            }
        }
        array_225.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_source(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSource,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.s3_config {
        let mut object_229 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_229, var_228)?;
        object_229.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_explainability_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExplainabilityConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.time_series_granularity {
        object.key("TimeSeriesGranularity").string(var_230.as_str());
    }
    if let Some(var_231) = &input.time_point_granularity {
        object.key("TimePointGranularity").string(var_231.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.s3_config {
        let mut object_233 = object.key("S3Config").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_config(&mut object_233, var_232)?;
        object_233.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_evaluation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EvaluationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.number_of_backtest_windows {
        object.key("NumberOfBacktestWindows").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_234).into()),
        );
    }
    if let Some(var_235) = &input.back_test_window_offset {
        object.key("BackTestWindowOffset").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hyper_parameter_tuning_job_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HyperParameterTuningJobConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.parameter_ranges {
        let mut object_237 = object.key("ParameterRanges").start_object();
        crate::json_ser::serialize_structure_crate_model_parameter_ranges(
            &mut object_237,
            var_236,
        )?;
        object_237.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_input_data_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputDataConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.dataset_group_arn {
        object.key("DatasetGroupArn").string(var_238.as_str());
    }
    if let Some(var_239) = &input.supplementary_features {
        let mut array_240 = object.key("SupplementaryFeatures").start_array();
        for item_241 in var_239 {
            {
                let mut object_242 = array_240.value().start_object();
                crate::json_ser::serialize_structure_crate_model_supplementary_feature(
                    &mut object_242,
                    item_241,
                )?;
                object_242.finish();
            }
        }
        array_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_featurization_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeaturizationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_243) = &input.forecast_frequency {
        object.key("ForecastFrequency").string(var_243.as_str());
    }
    if let Some(var_244) = &input.forecast_dimensions {
        let mut array_245 = object.key("ForecastDimensions").start_array();
        for item_246 in var_244 {
            {
                array_245.value().string(item_246.as_str());
            }
        }
        array_245.finish();
    }
    if let Some(var_247) = &input.featurizations {
        let mut array_248 = object.key("Featurizations").start_array();
        for item_249 in var_247 {
            {
                let mut object_250 = array_248.value().start_object();
                crate::json_ser::serialize_structure_crate_model_featurization(
                    &mut object_250,
                    item_249,
                )?;
                object_250.finish();
            }
        }
        array_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.key {
        object.key("Key").string(var_251.as_str());
    }
    if let Some(var_252) = &input.value {
        object.key("Value").string(var_252.as_str());
    }
    if let Some(var_253) = &input.condition {
        object.key("Condition").string(var_253.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributeConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_254) = &input.attribute_name {
        object.key("AttributeName").string(var_254.as_str());
    }
    if let Some(var_255) = &input.transformations {
        let mut object_256 = object.key("Transformations").start_object();
        for (key_257, value_258) in var_255 {
            {
                object_256.key(key_257).string(value_258.as_str());
            }
        }
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_additional_dataset(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AdditionalDataset,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_259) = &input.name {
        object.key("Name").string(var_259.as_str());
    }
    if let Some(var_260) = &input.configuration {
        let mut object_261 = object.key("Configuration").start_object();
        for (key_262, value_263) in var_260 {
            {
                let mut array_264 = object_261.key(key_262).start_array();
                for item_265 in value_263 {
                    {
                        array_264.value().string(item_265.as_str());
                    }
                }
                array_264.finish();
            }
        }
        object_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_schema_attribute(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SchemaAttribute,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.attribute_name {
        object.key("AttributeName").string(var_266.as_str());
    }
    if let Some(var_267) = &input.attribute_type {
        object.key("AttributeType").string(var_267.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Config,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_268) = &input.path {
        object.key("Path").string(var_268.as_str());
    }
    if let Some(var_269) = &input.role_arn {
        object.key("RoleArn").string(var_269.as_str());
    }
    if let Some(var_270) = &input.kms_key_arn {
        object.key("KMSKeyArn").string(var_270.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parameter_ranges(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParameterRanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.categorical_parameter_ranges {
        let mut array_272 = object.key("CategoricalParameterRanges").start_array();
        for item_273 in var_271 {
            {
                let mut object_274 = array_272.value().start_object();
                crate::json_ser::serialize_structure_crate_model_categorical_parameter_range(
                    &mut object_274,
                    item_273,
                )?;
                object_274.finish();
            }
        }
        array_272.finish();
    }
    if let Some(var_275) = &input.continuous_parameter_ranges {
        let mut array_276 = object.key("ContinuousParameterRanges").start_array();
        for item_277 in var_275 {
            {
                let mut object_278 = array_276.value().start_object();
                crate::json_ser::serialize_structure_crate_model_continuous_parameter_range(
                    &mut object_278,
                    item_277,
                )?;
                object_278.finish();
            }
        }
        array_276.finish();
    }
    if let Some(var_279) = &input.integer_parameter_ranges {
        let mut array_280 = object.key("IntegerParameterRanges").start_array();
        for item_281 in var_279 {
            {
                let mut object_282 = array_280.value().start_object();
                crate::json_ser::serialize_structure_crate_model_integer_parameter_range(
                    &mut object_282,
                    item_281,
                )?;
                object_282.finish();
            }
        }
        array_280.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_supplementary_feature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupplementaryFeature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.name {
        object.key("Name").string(var_283.as_str());
    }
    if let Some(var_284) = &input.value {
        object.key("Value").string(var_284.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_featurization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Featurization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_285) = &input.attribute_name {
        object.key("AttributeName").string(var_285.as_str());
    }
    if let Some(var_286) = &input.featurization_pipeline {
        let mut array_287 = object.key("FeaturizationPipeline").start_array();
        for item_288 in var_286 {
            {
                let mut object_289 = array_287.value().start_object();
                crate::json_ser::serialize_structure_crate_model_featurization_method(
                    &mut object_289,
                    item_288,
                )?;
                object_289.finish();
            }
        }
        array_287.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_categorical_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CategoricalParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_290) = &input.name {
        object.key("Name").string(var_290.as_str());
    }
    if let Some(var_291) = &input.values {
        let mut array_292 = object.key("Values").start_array();
        for item_293 in var_291 {
            {
                array_292.value().string(item_293.as_str());
            }
        }
        array_292.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_continuous_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ContinuousParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_294) = &input.name {
        object.key("Name").string(var_294.as_str());
    }
    if let Some(var_295) = &input.max_value {
        object.key("MaxValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_295).into()),
        );
    }
    if let Some(var_296) = &input.min_value {
        object.key("MinValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.scaling_type {
        object.key("ScalingType").string(var_297.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_integer_parameter_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IntegerParameterRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_298) = &input.name {
        object.key("Name").string(var_298.as_str());
    }
    if let Some(var_299) = &input.max_value {
        object.key("MaxValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_299).into()),
        );
    }
    if let Some(var_300) = &input.min_value {
        object.key("MinValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    if let Some(var_301) = &input.scaling_type {
        object.key("ScalingType").string(var_301.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_featurization_method(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FeaturizationMethod,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.featurization_method_name {
        object
            .key("FeaturizationMethodName")
            .string(var_302.as_str());
    }
    if let Some(var_303) = &input.featurization_method_parameters {
        let mut object_304 = object.key("FeaturizationMethodParameters").start_object();
        for (key_305, value_306) in var_303 {
            {
                object_304.key(key_305).string(value_306.as_str());
            }
        }
        object_304.finish();
    }
    Ok(())
}
